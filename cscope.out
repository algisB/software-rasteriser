cscope 15 /home/software-rasteriser               0003561322
	@Color.cpp

1 
	~<Cﬁ‹.h
>

3 
	gCﬁ‹
::
	$Cﬁ‹
(
_R
, 
_G
, 
_B
, 
_A
)

5 
this
->
R
 = 
_R
;

6 
this
->
G
 = 
_G
;

7 
this
->
B
 = 
_B
;

8 
this
->
A
 = 
_A
;

9 
	}
}

11 
uöt32_t
 
	gCﬁ‹
::
	$ToUI¡32
() const

13 
uöt8_t
 
r
 = (uöt8_t)(
R
 * 255.0f);

14 
uöt8_t
 
g
 = (uöt8_t)(
G
 * 255.0f);

15 
uöt8_t
 
b
 = (uöt8_t)(
B
 * 255.0f);

16 
uöt8_t
 
a
 = (uöt8_t)(
A
 * 255.0f);

18  (
a
 << 24Ë| (
r
 << 16Ë| (
g
 << 8Ë| 
b
;

19 
	}
}

21 
Cﬁ‹
 
	gCﬁ‹
::
›î©‹
 + (c⁄° Cﬁ‹ &
c
) const

23  
Cﬁ‹
(
R
 + 
c
.R, 
G
 + c.G, 
B
 + c.B, 
A
 + c.A);

26 
Cﬁ‹
 
	gCﬁ‹
::
›î©‹
 - (c⁄° Cﬁ‹ &
c
) const

28  
Cﬁ‹
(
R
 - 
c
.R, 
G
 - c.G, 
B
 - c.B, 
A
 - c.A);

31 
Cﬁ‹
 
	gCﬁ‹
::
›î©‹
 * (
f
) const

33  
Cﬁ‹
(
R
 * 
f
, 
G
 * f, 
B
 * f, 
A
 * f);

	@Color.h

1 #i‚de‡
COLOR_H


2 
	#COLOR_H


	)

4 
	~<°döt.h
>

6 ˛as†
	cCﬁ‹


8 
	mpublic
:

9 
R
, 
	mG
, 
	mB
, 
	mA
;

11 
Cﬁ‹
(
_R
, 
_G
, 
_B
, 
_A
);

13 
uöt32_t
 
	$ToUI¡32
() const;

15 
Cﬁ‹
 
›î©‹
 + (c⁄° Cﬁ‹ &
c
) const;

16 
Cﬁ‹
 
›î©‹
 - (c⁄° Cﬁ‹ &
c
) const;

17 
Cﬁ‹
 
›î©‹
 * (
f
) const;

	@Obj2.cpp

1 
	~"Obj2.h
"

2 
	gObj2
::
	$Obj2
(* 
fûeName
)

4 
this
->
fûe
 = 
fûeName
;

5 
°rög
 
löe
;

6 
v
 = 
Ál£
;

7 
vt
 = 
Ál£
;

8 
vn
 = 
Ál£
;

11 
if°ªam
 
	`myfûe
(
fûe
);

13 !
myfûe
.
	`eof
())

16 
	`gëlöe
(
myfûe
, 
löe
);

19 i‡(
löe
[0] == 'v' &&Üine[1] == ' ')

21 
v
 = 
åue
;

23 i‡(
löe
[0] == 'v' &&Üine[1] == 't' &&Üine[2] == ' ')

25 
vt
 = 
åue
;

27 i‡(
löe
[0] == 'v' &&Üine[1] == 'n' &&Üine[2] == ' ')

29 
vn
 = 
åue
;

32 
	}
}

33 
	gObj2
::~
	$Obj2
()

37 
	}
}

39 
Obj2
::
	$lﬂdV
()

41 i‡(
v
 =
åue
)

43 
°rög
 
löe
;

44 
°rög
 
v
;

45 
vTy≥
 
x
 = 0;

46 
vTy≥
 
y
 = 0;

47 
vTy≥
 
z
 = 0;

50 
if°ªam
 
	`myfûe
(
fûe
);

52 !
myfûe
.
	`eof
())

55 
	`gëlöe
(
myfûe
, 
löe
);

58 i‡(
löe
[0] == 'v' &&Üine[1] == ' ')

62 
i°rög°ªam
 
	`öputS
(
löe
);

63 
öputS
 >> 
v
 >> 
x
 >> 
y
 >> 
z
;

64 
V
.
	`push_back
(
x
);

65 
V
.
	`push_back
(
y
);

66 
V
.
	`push_back
(
z
);

67 
x
 = 0;

68 
y
 = 0;

69 
z
 = 0;

78 
cout
 << "ˇ¡Öröt, d€†nŸ c⁄èö vîãx info." << 
ídl
;

80 
	}
}

81 
	gObj2
::
	$¥ötV
()

83 i‡(
v
 =
åue
)

86 
i
 = 0; i < 
V
.
	`size
() - 1; i = i + 3)

88 
cout
 << "v ";

89 
cout
 << 
V
[
i
] << ", ";

90 
cout
 << 
V
[
i
 + 1] << ", ";

91 
cout
 << 
V
[
i
 + 2];

92 
cout
 << 
ídl
;

98 
cout
 << "ˇ¡Öröt, d€†nŸ c⁄èö vîãx info." << 
ídl
;

100 
	}
}

102 
	gObj2
::
	$lﬂdVT
()

104 i‡(
vt
 =
åue
)

106 
°rög
 
löe
;

107 
°rög
 
vt
;

108 
vTy≥
 
x
 = 0;

109 
vTy≥
 
y
 = 0;

112 
if°ªam
 
	`myfûe
(
fûe
);

114 !
myfûe
.
	`eof
())

117 
	`gëlöe
(
myfûe
, 
löe
);

120 i‡(
löe
[0] == 'v' &&Üine[1] == 't' &&Üine[2] == ' ')

124 
i°rög°ªam
 
	`öputS
(
löe
);

125 
öputS
 >> 
vt
 >> 
x
 >> 
y
;

126 
VT
.
	`push_back
(
x
);

127 
VT
.
	`push_back
(
y
);

128 
x
 = 0;

129 
y
 = 0;

138 
cout
 << "d€†nŸ c⁄èö vîãxÅextuª inf‹m©i⁄." << 
ídl
;

140 
	}
}

141 
	gObj2
::
	$¥ötVT
()

143 i‡(
vt
 =
åue
)

146 
i
 = 0; i < 
VT
.
	`size
() - 1; i = i + 2)

148 
cout
 << "vt ";

149 
cout
 << 
VT
[
i
] << ", ";

150 
cout
 << 
VT
[
i
 + 1];

151 
cout
 << 
ídl
;

156 
cout
 << "ˇ¡Öröt, d€†nŸ c⁄èö vîãxÅextuª inf‹m©i⁄." << 
ídl
;

159 
	}
}

161 
	gObj2
::
	$lﬂdVN
()

163 i‡(
vn
 =
åue
)

165 
°rög
 
löe
;

166 
°rög
 
vn
;

167 
vTy≥
 
x
 = 0;

168 
vTy≥
 
y
 = 0;

169 
vTy≥
 
z
 = 0;

172 
if°ªam
 
	`myfûe
(
fûe
);

174 !
myfûe
.
	`eof
())

177 
	`gëlöe
(
myfûe
, 
löe
);

180 i‡(
löe
[0] == 'v' &&Üine[1] == 'n' &&Üine[2] == ' ')

184 
i°rög°ªam
 
	`öputS
(
löe
);

185 
öputS
 >> 
vn
 >> 
x
 >> 
y
 >> 
z
;

186 
VN
.
	`push_back
(
x
);

187 
VN
.
	`push_back
(
y
);

188 
VN
.
	`push_back
(
z
);

189 
x
 = 0;

190 
y
 = 0;

191 
z
 = 0;

198 
cout
 << "d€†nŸ c⁄èö vîãxÇ‹mÆ inf‹m©i⁄." << 
ídl
;

200 
	}
}

201 
	gObj2
::
	$¥ötVN
()

203 i‡(
vn
 =
åue
)

206 
i
 = 0; i < 
VN
.
	`size
() - 1; i = i + 3)

208 
cout
 << "vn ";

209 
cout
 << 
VN
[
i
] << ", ";

210 
cout
 << 
VN
[
i
 + 1] << ", ";

211 
cout
 << 
VN
[
i
 + 2];

212 
cout
 << 
ídl
;

218 
cout
 << "ˇ¡Öröt, d€†nŸ c⁄èö vîãxÇ‹mÆ inf‹m©i⁄." << 
ídl
;

220 
	}
}

224 
	gObj2
::
	$lﬂdF
()

226 
°rög
 
löe
;

227 
f
;

229 
ãmpfV
[4];

230 
ãmpfVT
[4];

231 
ãmpfVN
[4];

233 
if°ªam
 
	`myfûe
(
fûe
);

235 !
myfûe
.
	`eof
())

238 
	`gëlöe
(
myfûe
, 
löe
);

240 i‡(
löe
 == "") ;

243 i‡(
v
 =
åue
 && 
vt
 =åuê&& 
vn
 ==Årue)

245 i‡(
löe
[0] == 'f' &&Üine[1] == ' ')

247 
Á˚
 
ãmpFa˚
;

248 
i°rög°ªam
 
	`öputS
(
löe
);

250 
nG
 = 
	`numbîG≠s
(
löe
);

252 i‡(
nG
 == 3)

254 
öputS
 >> 
f
 >> 
ãmpfV
[0] >> f >> 
ãmpfVT
[0] >> f >> 
ãmpfVN
[0] >>ÅempfV[1] >> f >>ÅempfVT[1] >> f >>ÅempfVN[1] >>ÅempfV[2] >> f >>ÅempfVT[2] >> f >>ÅempfVN[2];

255 
ãmpFa˚
.
quad
 = 
Ál£
;

257 i‡(
nG
 == 4)

259 
öputS
 >> 
f
 >> 
ãmpfV
[0] >> f >> 
ãmpfVT
[0] >> f >> 
ãmpfVN
[0] >>ÅempfV[1] >> f >>ÅempfVT[1] >> f >>ÅempfVN[1] >>ÅempfV[2] >> f >>ÅempfVT[2] >> f >>ÅempfVN[2] >>ÅempfV[3] >> f >>ÅempfVT[3] >> f >>ÅempfVN[3];

260 
ãmpFa˚
.
quad
 = 
åue
;

263 
x
 = 0; x < 
nG
; x++)

265 
ãmpFa˚
.
fV
.
	`push_back
(
ãmpfV
[
x
]);

266 
ãmpfV
[
x
] = 0;

269 
x
 = 0; x < 
nG
; x++)

271 
ãmpFa˚
.
fVT
.
	`push_back
(
ãmpfVT
[
x
]);

272 
ãmpfVT
[
x
] = 0;

274 
x
 = 0; x < 
nG
; x++)

276 
ãmpFa˚
.
fVN
.
	`push_back
(
ãmpfVN
[
x
]);

277 
ãmpfVN
[
x
] = 0;

280 
F
.
	`push_back
(
ãmpFa˚
);

285 i‡(
v
 =
åue
 && 
vt
 =åuê&& 
vn
 =
Ál£
)

287 i‡(
löe
[0] == 'f' &&Üine[1] == ' ')

289 
Á˚
 
ãmpFa˚
;

290 
i°rög°ªam
 
	`öputS
(
löe
);

291 
nG
 = 
	`numbîG≠s
(
löe
);

292 i‡(
nG
 == 3)

294 
öputS
 >> 
f
 >> 
ãmpfV
[0] >> f >> 
ãmpfVT
[0] >>ÅempfV[1] >> f >>ÅempfVT[1] >>ÅempfV[2] >> f >>ÅempfVT[2];

295 
ãmpFa˚
.
quad
 = 
Ál£
;

298 i‡(
nG
 == 4)

300 
öputS
 >> 
f
 >> 
ãmpfV
[0] >> f >> 
ãmpfVT
[0] >>ÅempfV[1] >> f >>ÅempfVT[1] >>ÅempfV[2] >> f >>ÅempfVT[2] >>ÅempfV[3] >> f >>ÅempfVT[3];

301 
ãmpFa˚
.
quad
 = 
åue
;

305 
x
 = 0; x < 
nG
; x++)

307 
ãmpFa˚
.
fV
.
	`push_back
(
ãmpfV
[
x
]);

308 
ãmpfV
[
x
] = 0;

311 
x
 = 0; x < 
nG
; x++)

313 
ãmpFa˚
.
fVT
.
	`push_back
(
ãmpfVT
[
x
]);

314 
ãmpfVT
[
x
] = 0;

316 
F
.
	`push_back
(
ãmpFa˚
);

320 i‡(
v
 =
åue
 && 
vt
 =
Ál£
 && 
vn
 ==Årue)

322 i‡(
löe
[0] == 'f' &&Üine[1] == ' ')

324 
Á˚
 
ãmpFa˚
;

325 
i°rög°ªam
 
	`öputS
(
löe
);

326 
nG
 = 
	`numbîG≠s
(
löe
);

327 i‡(
nG
 == 3)

329 
öputS
 >> 
f
 >> 
ãmpfV
[0] >> f >> f >> 
ãmpfVN
[0] >>ÅempfV[1] >> f >> f >>ÅempfVN[1] >>ÅempfV[2] >> f >> f >>ÅempfVN[2];

330 
ãmpFa˚
.
quad
 = 
Ál£
;

333 i‡(
nG
 == 4)

335 
öputS
 >> 
f
 >> 
ãmpfV
[0] >> f >> f >> 
ãmpfVN
[0] >>ÅempfV[1] >> f >> f >>ÅempfVN[1] >>ÅempfV[2] >> f >> f >>ÅempfVN[2] >>ÅempfV[3] >> f >> f >>ÅempfVN[3];

336 
ãmpFa˚
.
quad
 = 
åue
;

339 
x
 = 0; x < 
nG
; x++)

341 
ãmpFa˚
.
fV
.
	`push_back
(
ãmpfV
[
x
]);

342 
ãmpfV
[
x
] = 0;

345 
x
 = 0; x < 
nG
; x++)

347 
ãmpFa˚
.
fVN
.
	`push_back
(
ãmpfVN
[
x
]);

348 
ãmpfVN
[
x
] = 0;

350 
F
.
	`push_back
(
ãmpFa˚
);

355 i‡(
v
 =
åue
 && 
vt
 =
Ál£
 && 
vn
 == false)

357 i‡(
löe
[0] == 'f' &&Üine[1] == ' ')

359 
Á˚
 
ãmpFa˚
;

360 
i°rög°ªam
 
	`öputS
(
löe
);

361 
nG
 = 
	`numbîG≠s
(
löe
);

362 i‡(
nG
 == 3)

364 
öputS
 >> 
f
 >> 
ãmpfV
[0] >>ÅempfV[1] >>ÅempfV[2];

365 
ãmpFa˚
.
quad
 = 
Ál£
;

368 i‡(
nG
 == 4)

370 
öputS
 >> 
f
 >> 
ãmpfV
[0] >>ÅempfV[1] >>ÅempfV[2] >>ÅempfV[3];

371 
ãmpFa˚
.
quad
 = 
åue
;

374 
x
 = 0; x < 
nG
; x++)

376 
ãmpFa˚
.
fV
.
	`push_back
(
ãmpfV
[
x
]);

377 
ãmpfV
[
x
] = 0;

379 
F
.
	`push_back
(
ãmpFa˚
);

387 
	}
}

389 
	gObj2
::
	$¥ötF
()

391 i‡(
v
 =
åue
 && 
vt
 =åuê&& 
vn
 ==Årue)

393 
i
 = 0; i < 
F
.
	`size
(); i++)

395 i‡(
F
[
i
].
quad
 =
åue
)

397 
cout
 << "fV " << 
F
[
i
].
fV
[0] << ", " << F[i].fV[1] << ", " << F[i].fV[2] << ", " << F[i].fV[3] << 
ídl
;

399 i‡(
F
[
i
].
quad
 =
Ál£
)

401 
cout
 << "fV " << 
F
[
i
].
fV
[0] << ", " << F[i].fV[1] << ", " << F[i].fV[2] << 
ídl
;

405 
i
 = 0; i < 
F
.
	`size
(); i++)

407 i‡(
F
[
i
].
quad
 =
åue
)

409 
cout
 << "fVT " << 
F
[
i
].
fVT
[0] << ", " << F[i].fVT[1] << ", " << F[i].fVT[2] << ", " << F[i].fVT[3] << 
ídl
;

411 i‡(
F
[
i
].
quad
 =
Ál£
)

413 
cout
 << "fVT " << 
F
[
i
].
fVT
[0] << ", " << F[i].fVT[1] << ", " << F[i].fVT[2] << 
ídl
;

417 
i
 = 0; i < 
F
.
	`size
(); i++)

419 i‡(
F
[
i
].
quad
 =
åue
)

421 
cout
 << "fVN " << 
F
[
i
].
fVN
[0] << ", " << F[i].fVN[1] << ", " << F[i].fVN[2] << ", " << F[i].fVN[3] << 
ídl
;

423 i‡(
F
[
i
].
quad
 =
Ál£
)

425 
cout
 << "fVN " << 
F
[
i
].
fVN
[0] << ", " << F[i].fVN[1] << ", " << F[i].fVN[2] << 
ídl
;

431 i‡(
v
 =
åue
 && 
vt
 =åuê&& 
vn
 =
Ál£
)

433 
i
 = 0; i < 
F
.
	`size
(); i++)

435 i‡(
F
[
i
].
quad
 =
åue
)

437 
cout
 << "fV " << 
F
[
i
].
fV
[0] << ", " << F[i].fV[1] << ", " << F[i].fV[2] << ", " << F[i].fV[3] << 
ídl
;

439 i‡(
F
[
i
].
quad
 =
Ál£
)

441 
cout
 << "fV " << 
F
[
i
].
fV
[0] << ", " << F[i].fV[1] << ", " << F[i].fV[2] << 
ídl
;

445 
i
 = 0; i < 
F
.
	`size
(); i++)

447 i‡(
F
[
i
].
quad
 =
åue
)

449 
cout
 << "fVT " << 
F
[
i
].
fVT
[0] << ", " << F[i].fVT[1] << ", " << F[i].fVT[2] << ", " << F[i].fVT[3] << 
ídl
;

451 i‡(
F
[
i
].
quad
 =
Ál£
)

453 
cout
 << "fVT " << 
F
[
i
].
fVT
[0] << ", " << F[i].fVT[1] << ", " << F[i].fVT[2] << 
ídl
;

459 i‡(
v
 =
åue
 && 
vt
 =
Ál£
 && 
vn
 ==Årue)

461 
i
 = 0; i < 
F
.
	`size
(); i++)

463 i‡(
F
[
i
].
quad
 =
åue
)

465 
cout
 << "fV " << 
F
[
i
].
fV
[0] << ", " << F[i].fV[1] << ", " << F[i].fV[2] << ", " << F[i].fV[3] << 
ídl
;

467 i‡(
F
[
i
].
quad
 =
Ál£
)

469 
cout
 << "fV " << 
F
[
i
].
fV
[0] << ", " << F[i].fV[1] << ", " << F[i].fV[2] << 
ídl
;

473 
i
 = 0; i < 
F
.
	`size
(); i++)

475 i‡(
F
[
i
].
quad
 =
åue
)

477 
cout
 << "fVN " << 
F
[
i
].
fVN
[0] << ", " << F[i].fVN[1] << ", " << F[i].fVN[2] << ", " << F[i].fVN[3] << 
ídl
;

479 i‡(
F
[
i
].
quad
 =
Ál£
)

481 
cout
 << "fVN " << 
F
[
i
].
fVN
[0] << ", " << F[i].fVN[1] << ", " << F[i].fVN[2] << 
ídl
;

486 i‡(
v
 =
åue
 && 
vt
 =
Ál£
 && 
vn
 == false)

488 
i
 = 0; i < 
F
.
	`size
(); i++)

490 i‡(
F
[
i
].
quad
 =
åue
)

492 
cout
 << "fV " << 
F
[
i
].
fV
[0] << ", " << F[i].fV[1] << ", " << F[i].fV[2] << ", " << F[i].fV[3] << 
ídl
;

494 i‡(
F
[
i
].
quad
 =
Ál£
)

496 
cout
 << "fV " << 
F
[
i
].
fV
[0] << ", " << F[i].fV[1] << ", " << F[i].fV[2] << 
ídl
;

502 
	}
}

505 
	gObj2
::
	$c⁄vîtVîãxRTE
()

507 i‡(
v
 =
åue
)

510 
fNum
 = 0;

512 
i
 = 0; i < 
F
.
	`size
() ; i++)

516 i‡(
F
[
i
].
quad
 =
Ál£
)

518 
x
 = 0; x < 3; x++)

520 
ödex
 = (
F
[
i
].
fV
[
x
] - 1) * 3;

522 
VRTE
.
	`push_back
(
V
[
ödex
]);

523 
VRTE
.
	`push_back
(
V
[
ödex
 + 1]);

524 
VRTE
.
	`push_back
(
V
[
ödex
 + 2]);

529 i‡(
F
[
fNum
].
quad
 =
åue
)

531 
vTy≥
 
ãmpVît
[4][3];

532 
x
 = 0; x < 4; x++)

534 
ödex
 = (
F
[
i
].
fV
[
x
] - 1) * 3;

536 
ãmpVît
[
x
][0] = 
V
[
ödex
];

537 
ãmpVît
[
x
][1] = 
V
[
ödex
 + 1];

538 
ãmpVît
[
x
][2] = 
V
[
ödex
 + 2];

555 
d
 = 0; d < 3; d++)

557 
VRTE
.
	`push_back
(
ãmpVît
[0][
d
]);

559 
d
 = 0; d < 3; d++)

561 
VRTE
.
	`push_back
(
ãmpVît
[1][
d
]);

563 
d
 = 0; d < 3; d++)

565 
VRTE
.
	`push_back
(
ãmpVît
[2][
d
]);

568 
d
 = 0; d < 3; d++)

570 
VRTE
.
	`push_back
(
ãmpVît
[2][
d
]);

572 
d
 = 0; d < 3; d++)

574 
VRTE
.
	`push_back
(
ãmpVît
[3][
d
]);

576 
d
 = 0; d < 3; d++)

578 
VRTE
.
	`push_back
(
ãmpVît
[0][
d
]);

586 
fNum
++;

591 
cout
 << "C™àc⁄vîàtÿRTE, Nÿvîãx info." << 
ídl
;

593 
	}
}

595 
	gObj2
::
	$¥ötVîãxRTE
()

597 
someC⁄°
 = 0;

598 
i
 = 0; i < 
VRTE
.
	`size
() ; i = i + 3)

600 
someC⁄°
++;

601 
cout
 << "VRTE ";

602 
cout
 << 
VRTE
[
i
] << ", ";

603 
cout
 << 
VRTE
[
i
 + 1] << ", ";

604 
cout
 << 
VRTE
[
i
 + 2];

605 
cout
 << 
ídl
;

606 i‡(
someC⁄°
>2)

608 
cout
 << 
ídl
;

609 
someC⁄°
 = 0;

613 
	}
}

616 
	gObj2
::
	$c⁄vîtVîãxTextuªRTE
()

618 i‡(
vt
 =
åue
)

621 
fNum
 = 0;

623 
i
 = 0; i < 
F
.
	`size
(); i++)

627 i‡(
F
[
i
].
quad
 =
Ál£
)

629 
x
 = 0; x < 3; x++)

631 
ödex
 = (
F
[
i
].
fVT
[
x
] - 1) * 2;

633 
VTRTE
.
	`push_back
(
VT
[
ödex
]);

634 
VTRTE
.
	`push_back
(1.0‡- 
VT
[
ödex
 + 1]);

639 i‡(
F
[
fNum
].
quad
 =
åue
)

641 
vTy≥
 
ãmpVîtTextuª
[4][2];

642 
x
 = 0; x < 4; x++)

644 
ödex
 = (
F
[
i
].
fVT
[
x
] - 1) * 2;

646 
ãmpVîtTextuª
[
x
][0] = 
VT
[
ödex
];

647 
ãmpVîtTextuª
[
x
][1] = 
VT
[
ödex
 + 1];

664 
d
 = 0; d < 2; d++)

666 
VTRTE
.
	`push_back
(
ãmpVîtTextuª
[0][
d
]);

668 
d
 = 0; d < 2; d++)

670 
VTRTE
.
	`push_back
(
ãmpVîtTextuª
[1][
d
]);

672 
d
 = 0; d < 2; d++)

674 
VTRTE
.
	`push_back
(
ãmpVîtTextuª
[2][
d
]);

677 
d
 = 0; d < 2; d++)

679 
VTRTE
.
	`push_back
(
ãmpVîtTextuª
[2][
d
]);

681 
d
 = 0; d < 2; d++)

683 
VTRTE
.
	`push_back
(
ãmpVîtTextuª
[3][
d
]);

685 
d
 = 0; d < 2; d++)

687 
VTRTE
.
	`push_back
(
ãmpVîtTextuª
[0][
d
]);

695 
fNum
++;

700 
cout
 << "C™àc⁄vîàtÿRTE, NÿvîãxÅextuª info." << 
ídl
;

702 
	}
}

704 
	gObj2
::
	$¥ötVîãxTextuªRTE
()

706 
someC⁄°
 = 0;

707 
i
 = 0; i < 
VTRTE
.
	`size
(); i = i + 2)

709 
someC⁄°
++;

710 
cout
 << "VTRTE ";

711 
cout
 << 
VTRTE
[
i
] << ", ";

712 
cout
 << 
VTRTE
[
i
 + 1];

713 
cout
 << 
ídl
;

714 i‡(
someC⁄°
>2)

716 
cout
 << 
ídl
;

717 
someC⁄°
 = 0;

721 
	}
}

723 
	gObj2
::
	$c⁄vîtVîãxN‹mÆRTE
()

725 i‡(
vn
 =
åue
)

728 
fNum
 = 0;

729 
i
 = 0; i < 
F
.
	`size
(); i++)

733 i‡(
F
[
i
].
quad
 =
Ál£
)

735 
x
 = 0; x < 3; x++)

737 
ödex
 = (
F
[
i
].
fVN
[
x
] - 1) * 3;

739 
VNRTE
.
	`push_back
(
VN
[
ödex
]);

740 
VNRTE
.
	`push_back
(
VN
[
ödex
 + 1]);

741 
VNRTE
.
	`push_back
(
VN
[
ödex
 + 2]);

746 i‡(
F
[
fNum
].
quad
 =
åue
)

748 
vTy≥
 
ãmpVîtN‹m
[4][3];

749 
x
 = 0; x < 4; x++)

751 
ödex
 = (
F
[
i
].
fVN
[
x
] - 1) * 3;

753 
ãmpVîtN‹m
[
x
][0] = 
VN
[
ödex
];

754 
ãmpVîtN‹m
[
x
][1] = 
VN
[
ödex
 + 1];

755 
ãmpVîtN‹m
[
x
][2] = 
VN
[
ödex
 + 2];

772 
d
 = 0; d < 3; d++)

774 
VNRTE
.
	`push_back
(
ãmpVîtN‹m
[0][
d
]);

776 
d
 = 0; d < 3; d++)

778 
VNRTE
.
	`push_back
(
ãmpVîtN‹m
[1][
d
]);

780 
d
 = 0; d < 3; d++)

782 
VNRTE
.
	`push_back
(
ãmpVîtN‹m
[2][
d
]);

785 
d
 = 0; d < 3; d++)

787 
VNRTE
.
	`push_back
(
ãmpVîtN‹m
[2][
d
]);

789 
d
 = 0; d < 3; d++)

791 
VNRTE
.
	`push_back
(
ãmpVîtN‹m
[3][
d
]);

793 
d
 = 0; d < 3; d++)

795 
VNRTE
.
	`push_back
(
ãmpVîtN‹m
[0][
d
]);

803 
fNum
++;

808 
cout
 << "C™àc⁄vîàtÿRTE, NÿvîãxÇ‹mÆ info." << 
ídl
;

810 
	}
}

812 
	gObj2
::
	$¥ötVîãxN‹mÆRTE
()

814 
someC⁄°
 = 0;

815 
i
 = 0; i < 
VNRTE
.
	`size
(); i = i + 3)

817 
someC⁄°
++;

818 
cout
 << "VNRTE ";

819 
cout
 << 
VNRTE
[
i
] << ", ";

820 
cout
 << 
VNRTE
[
i
 + 1] << ", ";

821 
cout
 << 
VNRTE
[
i
 + 2];

822 
cout
 << 
ídl
;

823 i‡(
someC⁄°
>2)

825 
cout
 << 
ídl
;

826 
someC⁄°
 = 0;

830 
	}
}

833 
	gObj2
::
	$lﬂdAŒ
()

835 
	`lﬂdV
();

836 
	`lﬂdVT
();

837 
	`lﬂdVN
();

838 
	`lﬂdF
();

839 
	`c⁄vîtVîãxRTE
();

840 
	`c⁄vîtVîãxTextuªRTE
();

841 
	`c⁄vîtVîãxN‹mÆRTE
();

842 
	`c⁄vîtoObjToGlm
();

843 
	}
}

845 
	gObj2
::
	$¥ötAŒ
()

847 
	`¥ötV
();

848 
	`¥ötVT
();

849 
	`¥ötVN
();

850 
	`¥ötF
();

851 
	}
}

853 
	gObj2
::
	$numbîG≠s
(
°rög
 
l
)

855 
q
 = 0;

856 
i
 = 0; i < 
l
.
	`size
();i++)

859 i‡(
l
[
i
] == ' ' )

861 
q
++;

866  
q
;

867 
	}
}

869 
	gObj2
::
	$c⁄vîtoObjToGlm
()

871 i‡(
v
 =
åue
)

873 
i
 = 0; i < 
VRTE
.
	`size
(); i += 3)

875 
glm
::
vec3
 
ãmpVît
;

876 
ãmpVît
.
x
 = 
VRTE
[
i
 + 0];

877 
ãmpVît
.
y
 = 
VRTE
[
i
 + 1];

878 
ãmpVît
.
z
 = 
VRTE
[
i
 + 2];

879 
vîti˚s
.
	`push_back
(
ãmpVît
);

883 i‡(
vt
 =
åue
)

886 
i
 = 0; i < 
VTRTE
.
	`size
(); i += 2)

888 
glm
::
vec2
 
ãmpUV
;

889 
ãmpUV
.
x
 = 
VTRTE
[
i
 + 0];

890 
ãmpUV
.
y
 = 
VTRTE
[
i
 + 1];

891 
uvs
.
	`push_back
(
ãmpUV
);

895 i‡(
vn
 =
åue
)

897 
i
 = 0; i < 
VNRTE
.
	`size
(); i += 3)

899 
glm
::
vec3
 
ãmpN‹mÆ
;

900 
ãmpN‹mÆ
.
x
 = 
VNRTE
[
i
 + 0];

901 
ãmpN‹mÆ
.
y
 = 
VNRTE
[
i
 + 1];

902 
ãmpN‹mÆ
.
z
 = 
VNRTE
[
i
 + 2];

903 
n‹mÆs
.
	`push_back
(
ãmpN‹mÆ
);

907 
	}
}

909 
	gObj2
::
	$compuãT™gítBasis
()

911 
i
 = 0; i<
vîti˚s
.
	`size
(); i += 3){

914 
glm
::
vec3
 & 
v0
 = 
vîti˚s
[
i
 + 0];

915 
glm
::
vec3
 & 
v1
 = 
vîti˚s
[
i
 + 1];

916 
glm
::
vec3
 & 
v2
 = 
vîti˚s
[
i
 + 2];

919 
glm
::
vec2
 & 
uv0
 = 
uvs
[
i
 + 0];

920 
glm
::
vec2
 & 
uv1
 = 
uvs
[
i
 + 1];

921 
glm
::
vec2
 & 
uv2
 = 
uvs
[
i
 + 2];

924 
glm
::
vec3
 
dñèPos1
 = 
v1
 - 
v0
;

925 
glm
::
vec3
 
dñèPos2
 = 
v2
 - 
v0
;

928 
glm
::
vec2
 
dñèUV1
 = 
uv1
 - 
uv0
;

929 
glm
::
vec2
 
dñèUV2
 = 
uv2
 - 
uv0
;

931 
r
 = 1.0‡/ (
dñèUV1
.
x
 * 
dñèUV2
.
y
 - deltaUV1.y * deltaUV2.x);

932 
glm
::
vec3
 
èngít
 = (
dñèPos1
 * 
dñèUV2
.
y
 - 
dñèPos2
 * 
dñèUV1
.y)*
r
;

933 
glm
::
vec3
 
bô™gít
 = (
dñèPos2
 * 
dñèUV1
.
x
 - 
dñèPos1
 * 
dñèUV2
.x)*
r
;

937 
èngíts
.
	`push_back
(
èngít
);

938 
èngíts
.
	`push_back
(
èngít
);

939 
èngíts
.
	`push_back
(
èngít
);

942 
bô™gíts
.
	`push_back
(
bô™gít
);

943 
bô™gíts
.
	`push_back
(
bô™gít
);

944 
bô™gíts
.
	`push_back
(
bô™gít
);

949 
i
 = 0; i<
vîti˚s
.
	`size
(); i += 1)

951 
glm
::
vec3
 & 
n
 = 
n‹mÆs
[
i
];

952 
glm
::
vec3
 & 
t
 = 
èngíts
[
i
];

953 
glm
::
vec3
 & 
b
 = 
bô™gíts
[
i
];

956 
t
 = 
glm
::
	`n‹mÆize
— - 
n
 * glm::
	`dŸ
(n,Å));

959 i‡(
glm
::
	`dŸ
(glm::
	`¸oss
(
n
, 
t
), 
b
) < 0.0f){

960 
t
 =Å * -1.0f;

964 
	}
}

	@Obj2.h

1 #i‚de‡
OBJ2_H


2 
	#OBJ2_H


	)

3 
	~<°rög
>

4 
	~<io°ªam
>

5 
	~<ve˘‹
>

6 
	~<f°ªam
>

7 
	~<s°ªam
>

8 
	~<glm.hµ
>

9 
	#COORD_SIZE
 100

	)

10 
	tvTy≥
;

13 
usög
 
«me•a˚
 
	g°d
;

15 
	sÁ˚


17 
boﬁ
 
	mquad
 = 
Ál£
;

18 
	mve˘‹
<> 
	mfV
;

19 
	mve˘‹
<> 
	mfVT
;

20 
	mve˘‹
<> 
	mfVN
;

23 ˛as†
	cObj2


25 
	m¥iv©e
:

26 * 
fûe
;

29 
lﬂdV
();

30 
¥ötV
();

32 
lﬂdVT
();

33 
¥ötVT
();

35 
lﬂdVN
();

36 
¥ötVN
();

38 
lﬂdF
();

39 
¥ötF
();

41 
numbîG≠s
(
°rög
 
l
);

47 
	mpublic
:

48 
boﬁ
 
v
;

49 
boﬁ
 
	mvt
;

50 
boﬁ
 
	mvn
;

52 
	mve˘‹
<
	mvTy≥
> 
	mV
;

53 
	mve˘‹
<
	mvTy≥
> 
	mVT
;

54 
	mve˘‹
<
	mvTy≥
> 
	mVN
;

56 
	mve˘‹
<
	mÁ˚
> 
	mF
;

58 
	mve˘‹
<
	mvTy≥
> 
	mVRTE
;

59 
	mve˘‹
<
	mvTy≥
> 
	mVTRTE
;

60 
	mve˘‹
<
	mvTy≥
> 
	mVNRTE
;

62 
	mve˘‹
<
	mvTy≥
> 
	mTRTE
;

63 
	mve˘‹
<
	mvTy≥
> 
	mBTRTE
;

65 
	m°d
::
ve˘‹
<
glm
::
vec3
> 
vîti˚s
;

66 
	m°d
::
ve˘‹
<
glm
::
vec2
> 
uvs
;

67 
	m°d
::
ve˘‹
<
glm
::
vec3
> 
n‹mÆs
;

69 
	m°d
::
ve˘‹
<
glm
::
vec3
> 
èngíts
;

70 
	m°d
::
ve˘‹
<
glm
::
vec3
> 
bô™gíts
;

73 
Obj2
(* 
fûeName
);

74 ~
Obj2
();

77 
lﬂdAŒ
();

78 
¥ötAŒ
();

80 
c⁄vîtVîãxRTE
();

81 
¥ötVîãxRTE
();

83 
c⁄vîtVîãxTextuªRTE
();

84 
¥ötVîãxTextuªRTE
();

86 
c⁄vîtVîãxN‹mÆRTE
();

87 
¥ötVîãxN‹mÆRTE
();

89 
c⁄vîtoObjToGlm
();

90 
compuãT™gítBasis
();

	@Rasterizer.cpp

1 ªø#ö˛udê
	~<Ra°îizî.h
>

4 
	gRa°îizî
::
	$SëFømeBuf„r
(
uöt32_t
 *
_‰ameBuf„r
, 
_width
, 
_height
)

6 
m_FømeBuf„r
 = 
_‰ameBuf„r
;

7 
m_Width
 = 
_width
;

8 
m_Height
 = 
_height
;

9 
	}
}

11 
	gRa°îizî
::
	$SëPixñ
(
glm
::
ivec2
 
_pos
, 
Cﬁ‹
 * 
_cﬁ‹
)

13 i‡(
_pos
.
x
 >
m_Width
 || _pos.
y
 >
m_Height
)

18 
m_FømeBuf„r
[
_pos
.
y
 * 
m_Width
 + _pos.
x
] = 
_cﬁ‹
->
	`ToUI¡32
();

19 
	}
}

21 
	gRa°îizî
::
	$DøwLöe
(
Cﬁ‹
 * 
_cﬁ‹0
, 
glm
::
ivec2
 
_pos0
, Cﬁ‹ * 
_cﬁ‹1
, glm::ivec2 
_pos1
)

43 
x0
 = 
_pos0
.
x
;

44 
y0
 = 
_pos0
.
y
;

46 
x1
 = 
_pos1
.
x
;

47 
y1
 = 
_pos1
.
y
;

49 
boﬁ
 
°ìp
 = 
Ál£
;

50 i‡–
°d
::
	`abs
(
x1
 - 
x0
Ë< std::abs(
y1
 - 
y0
) )

52 
°d
::
	`sw≠
(
x0
, 
y0
);

53 
°d
::
	`sw≠
(
x1
, 
y1
);

54 
°ìp
 = 
åue
;

56 i‡(
x0
>
x1
)

58 
°d
::
	`sw≠
(
x0
, 
x1
);

59 
°d
::
	`sw≠
(
y0
, 
y1
);

62 
dx
 = 
x1
 - 
x0
;

63 
dy
 = 
y1
 - 
y0
;

65 if(
dx
 == 0)

68 
dyDx
 = 
glm
::
	`abs
(()
dy
/()
dx
);

71 
îr‹
 = 
dyDx
 - 0.5f;

73 
y
 = 
y0
;

75 
x
 = 
x0
; x < 
x1
; x++)

77 if(
°ìp
)

79 
	`SëPixñ
(
glm
::
	`vec2
(
y
, 
x
), 
_cﬁ‹0
);

83 
	`SëPixñ
(
glm
::
	`vec2
(
x
, 
y
), 
_cﬁ‹0
);

85 
îr‹
 =Éº‹ + 
dyDx
;

86 if(
îr‹
 >= 0.5f)

88 
y
 +(
y1
>
y0
?1:-1);

89 
îr‹
 =Érror - 1;

140 
	}
}

142 
	gRa°îizî
::
	$DøwWúeTrüngÀ
(
Cﬁ‹
 * 
_cﬁ‹0
, 
glm
::
ivec2
 
_pos0
, Cﬁ‹ * 
_cﬁ‹1
, glm::ivec2 
_pos1
, Cﬁ‹ * 
_cﬁ‹2
, glm::ivec2 
_pos2
)

144 
	`DøwLöe
(
_cﬁ‹0
, 
_pos0
, 
_cﬁ‹1
, 
_pos1
);

145 
	`DøwLöe
(
_cﬁ‹0
, 
_pos0
, 
_cﬁ‹2
, 
_pos2
);

146 
	`DøwLöe
(
_cﬁ‹1
, 
_pos1
, 
_cﬁ‹2
, 
_pos2
);

147 
	}
}

149 
	gRa°îizî
::
	$AªaOfTrüngÀ
(
_a
, 
_b
, 
_c
)

151 
s
 = (
_a
 + 
_b
 + 
_c
) / 2;

152 
a
 = 
	`sqπ
(
s
*((s-
_a
)*(s-
_b
)*(s-
_c
)));

153  
a
;

154 
	}
}

156 
boﬁ
 
	gRa°îizî
::
	$poötInTrüngÀ2D
(
glm
::
ivec2
 
_poöt
, glm::ivec2 
_pos0
, glm::ivec2 
_pos1
, glm::ivec2 
_pos2
)

159 
glm
::
vec2
 
v0
;

160 
v0
 = (
glm
::
vec2
)(
_pos1
 - 
_pos0
);

161 
vm0
 = 
glm
::
	`Àngth
(
v0
);

163 
glm
::
vec2
 
v1
;

164 
v1
 = (
glm
::
vec2
)(
_pos2
 - 
_pos0
);

165 
vm1
 = 
glm
::
	`Àngth
(
v1
);

167 
glm
::
vec2
 
v2
;

168 
v2
 = (
glm
::
vec2
)(
_pos2
 - 
_pos1
);

169 
vm2
 = 
glm
::
	`Àngth
(
v2
);

172 
glm
::
vec2
 
vp0
;

173 
vp0
 = (
glm
::
vec2
)(
_pos0
 - 
_poöt
);

174 
vpm0
 = 
glm
::
	`Àngth
(
vp0
);

176 
glm
::
vec2
 
vp1
;

177 
vp1
 = (
glm
::
vec2
)(
_pos1
 - 
_poöt
);

178 
vpm1
 = 
glm
::
	`Àngth
(
vp1
);

180 
glm
::
vec2
 
vp2
;

181 
vp2
 = (
glm
::
vec2
)(
_pos2
 - 
_poöt
);

182 
vpm2
 = 
glm
::
	`Àngth
(
vp2
);

184 
tA
 = 
	`AªaOfTrüngÀ
(
vm0
,
vm1
,
vm2
);

186 
u
 = 
	`AªaOfTrüngÀ
(
vm0
, 
vpm0
, 
vpm1
) ;

187 
v
 = 
	`AªaOfTrüngÀ
(
vm1
, 
vpm0
, 
vpm2
) ;

188 
w
 = 
	`AªaOfTrüngÀ
(
vm2
, 
vpm1
, 
vpm2
) ;

194 i‡(((
u
 + 
v
 + 
w
)<
tA
+2) && ((u + v + w) >= 0.0f))

196  
åue
;

202  
Ál£
;

237 
	}
}

239 
	gRa°îizî
::
	$DøwTrüngÀ
(
Cﬁ‹
 * 
_cﬁ‹0
, 
glm
::
ivec2
 
_pos0
, Cﬁ‹ * 
_cﬁ‹1
, glm::ivec2 
_pos1
, Cﬁ‹ * 
_cﬁ‹2
, glm::ivec2 
_pos2
)

244 
glm
::
vec2
 
v0
 = 
_pos1
 - 
_pos0
;

245 
glm
::
vec2
 
vn0
 = glm::
	`n‹mÆize
(
v0
);

246 
vm0
 = 
glm
::
	`Àngth
(
v0
);

248 
glm
::
vec2
 
v1
 = 
_pos2
 - 
_pos0
;

249 
glm
::
vec2
 
vn1
 = glm::
	`n‹mÆize
(
v1
);

250 
vm1
 = 
glm
::
	`Àngth
(
v1
);

252 
gm
;

253 i‡(
vm0
>
vm1
)

255 
gm
 = 
vm0
;

259 
gm
 = 
vm1
;

262 
i
 = 1; i < 
gm
; i++)

264 
π10
 = 
i
 / 
vm0
;

265 
π00
 = 1 - 
π10
;

267 
Cﬁ‹
 
c0
 = (*
_cﬁ‹0
 * 
π00
Ë+ (*
_cﬁ‹1
 * 
π10
);

268 
glm
::
vec2
 
vi0
 = 
vn0
 * 
i
;

269 i‡(
i
>
vm0
)

271 
vi0
 = 
vn0
*
vm0
;

273 
glm
::
ivec2
 
fPos0
 = 
_pos0
 + (glm::ivec2)
vi0
;

277 
π11
 = 
i
 / 
vm1
;

278 
π01
 = 1 - 
π11
;

280 
Cﬁ‹
 
c1
 = (*
_cﬁ‹0
 * 
π01
Ë+ (*
_cﬁ‹2
 * 
π11
);

281 
glm
::
vec2
 
vi1
 = 
vn1
 * 
i
;

282 i‡(
i
>
vm1
)

284 
vi1
 = 
vn1
*
vm1
;

287 
glm
::
ivec2
 
fPos1
 = 
_pos0
 + (glm::ivec2)
vi1
;

289 
	`DøwLöe
(&
c0
, 
fPos0
, &
c1
, 
fPos1
);

292 
	}
}

294 
	gRa°îizî
::
	$DøwTrüngÀ1
(
Cﬁ‹
 * 
_cﬁ‹0
, 
glm
::
ivec2
 
_pos0
, Cﬁ‹ * 
_cﬁ‹1
, glm::ivec2 
_pos1
, Cﬁ‹ * 
_cﬁ‹2
, glm::ivec2 
_pos2
)

297 
y
 = 0; y < 
SCREEN_HEIGHT
; y++)

299 
x
 = 0; x < 
SCREEN_WIDTH
; x++)

301 i‡(
	`poötInTrüngÀ2D
(
glm
::
	`ivec2
(
x
,
y
),
_pos0
,
_pos1
,
_pos2
))

303 
glm
::
vec2
 
v0
;

304 
v0
 = (
glm
::
vec2
)(
_pos1
 - 
_pos0
);

305 
vm0
 = 
glm
::
	`Àngth
(
v0
);

307 
glm
::
vec2
 
v1
;

308 
v1
 = (
glm
::
vec2
)(
_pos2
 - 
_pos0
);

309 
vm1
 = 
glm
::
	`Àngth
(
v1
);

311 
glm
::
vec2
 
v2
;

312 
v2
 = (
glm
::
vec2
)(
_pos2
 - 
_pos1
);

313 
vm2
 = 
glm
::
	`Àngth
(
v2
);

316 
glm
::
vec2
 
vp0
;

317 
vp0
 = (
glm
::
vec2
)(
_pos0
 - glm::
	`ivec2
(
x
, 
y
));

318 
vpm0
 = 
glm
::
	`Àngth
(
vp0
);

320 
glm
::
vec2
 
vp1
;

321 
vp1
 = (
glm
::
vec2
)(
_pos1
 - glm::
	`ivec2
(
x
, 
y
));

322 
vpm1
 = 
glm
::
	`Àngth
(
vp1
);

324 
glm
::
vec2
 
vp2
;

325 
vp2
 = (
glm
::
vec2
)(
_pos2
 - glm::
	`ivec2
(
x
, 
y
));

326 
vpm2
 = 
glm
::
	`Àngth
(
vp2
);

328 
tA
 = 
	`AªaOfTrüngÀ
(
vm0
, 
vm1
, 
vm2
);

330 
u
 = 
	`AªaOfTrüngÀ
(
vm0
, 
vpm0
, 
vpm1
)/
tA
;

331 
v
 = 
	`AªaOfTrüngÀ
(
vm1
, 
vpm0
, 
vpm2
)/
tA
;

332 
w
 = 
	`AªaOfTrüngÀ
(
vm2
, 
vpm1
, 
vpm2
)/
tA
;

334 
Cﬁ‹
 
tmpCﬁ0
 = *
_cﬁ‹0
 * 
glm
::
	`abs
(
w
);

335 
Cﬁ‹
 
tmpCﬁ1
 = *
_cﬁ‹1
 * 
glm
::
	`abs
(
v
);

336 
Cﬁ‹
 
tmpCﬁ2
 = *
_cﬁ‹2
 * 
glm
::
	`abs
(
u
);

337 
Cﬁ‹
 
tmpCﬁ
 = 
tmpCﬁ0
 + 
tmpCﬁ1
 + 
tmpCﬁ2
;

339 
	`SëPixñ
(
glm
::
	`ivec2
(
x
, 
y
), &
tmpCﬁ
);

345 
	}
}

347 
	gRa°îizî
::
DøwTrüngÀs
(
°d
::
ve˘‹
<
glm
::
vec3
> * 
_vîãxD©a
, glm::
m©4
 
_MVP
)

349 
Cﬁ‹
 
cﬁ‹0
(1.0f, 0.0f, 0.0f, 1.0f);

350 
Cﬁ‹
 
cﬁ‹1
(0.0f, 1.0f, 0.0f, 1.0f);

351 
Cﬁ‹
 
cﬁ‹2
(0.0f, 0.0f, 1.0f, 1.0f);

353 
	gi
 = 0; i < 
	g_vîãxD©a
->
size
(); i=
i
+3)

356 
glm
::
vec4
 
v0
 = 
_MVP
 * glm::vec4((*
_vîãxD©a
)[
i
+0].
x
, (*_vîãxD©a)[i+0].
y
, (*_vîãxD©a)[i+0].
z
, 1.0f);

357 
	gglm
::
vec4
 
v1
 = 
_MVP
 * 
glm
::vec4((*
_vîãxD©a
)[
i
+1].
x
, (*_vîãxD©a)[i+1].
y
, (*_vîãxD©a)[i+1].
z
, 1.0f);

358 
	gglm
::
vec4
 
v2
 = 
_MVP
 * 
glm
::vec4((*
_vîãxD©a
)[
i
+2].
x
, (*_vîãxD©a)[i+2].
y
, (*_vîãxD©a)[i+2].
z
, 1.0f);

360 
	gglm
::
vec2
 
p0
((
v0
.
x
)*
SCREEN_WIDTH
/2 + SCREEN_WIDTH / 2, (v0.
y
)*
SCREEN_HEIGHT
/2 + SCREEN_HEIGHT / 2);

361 
	gglm
::
vec2
 
p1
((
v1
.
x
)*
SCREEN_WIDTH
/2 + SCREEN_WIDTH / 2, (v1.
y
)*
SCREEN_HEIGHT
/2 + SCREEN_HEIGHT / 2);

362 
	gglm
::
vec2
 
p2
((
v2
.
x
)*
SCREEN_WIDTH
/2 + SCREEN_WIDTH / 2, (v2.
y
)*
SCREEN_HEIGHT
/2 + SCREEN_HEIGHT / 2);

364 if(
	gv0
.
	gw
 > 0.0f)

366 
	gp0
 = 
glm
::
vec2
((
v0
.
x
 / v0.
w
)*
SCREEN_WIDTH
/2 + SCREEN_WIDTH / 2, (v0.
y
 / v0.w)*
SCREEN_HEIGHT
/2 + SCREEN_HEIGHT / 2);

368 if(
	gv1
.
	gw
 > 0.0f)

370 
	gp1
 = 
glm
::
vec2
((
v1
.
x
 / v1.
w
)*
SCREEN_WIDTH
/2 + SCREEN_WIDTH / 2, (v1.
y
 / v1.w)*
SCREEN_HEIGHT
/2 + SCREEN_HEIGHT / 2);

372 if(
	gv2
.
	gw
 > 0.0f)

374 
	gp2
 = 
glm
::
vec2
((
v2
.
x
 / v2.
w
)*
SCREEN_WIDTH
/2 + SCREEN_WIDTH / 2, (v2.
y
 / v2.w)*
SCREEN_HEIGHT
/2 + SCREEN_HEIGHT / 2);

376 if(
	gv0
.
	gz
 > 0.0f)

378 
DøwWúeTrüngÀ
(&
cﬁ‹0
, 
p0
, &
cﬁ‹1
, 
p1
, &
cﬁ‹2
, 
p2
);

	@Rasterizer.h

1 #i‚de‡
RASTERIZER_H


2 
	#RASTERIZER_H


	)

4 
	~<ve˘‹
>

5 
	~<io°ªam
>

6 
	~<Cﬁ‹.h
>

7 
	~<m©h.h
>

8 
	~<glm.hµ
>

9 
	~<m©rix_å™sf‹m.hµ
>

11 c⁄° 
	gSCREEN_WIDTH
 = 1920;

12 c⁄° 
	gSCREEN_HEIGHT
 = 1080;

13 c⁄° 
	gSCREEN_BPP
 = 32;

15 
˛ass
 
	gS∑n
;

16 ˛as†
	cRa°îizî


18 
	m¥Ÿe˘ed
:

19 
uöt32_t
 *
m_FømeBuf„r
;

20 
	mm_Width
, 
	mm_Height
;

21 
	mpublic
:

22 
SëFømeBuf„r
(
uöt32_t
 * 
_‰ameBuf„r
, 
_width
, 
_height
);

23 
SëPixñ
(
glm
::
ivec2
 
_pos
, 
Cﬁ‹
 * 
_cﬁ‹
);

24 
DøwLöe
(
Cﬁ‹
 * 
_cﬁ‹0
, 
glm
::
ivec2
 
_pos0
, Cﬁ‹ * 
_cﬁ‹1
, glm::ivec2 
_pos1
);

25 
DøwWúeTrüngÀ
(
Cﬁ‹
 * 
_cﬁ‹0
, 
glm
::
ivec2
 
_pos0
, Cﬁ‹ * 
_cﬁ‹1
, glm::ivec2 
_pos1
, Cﬁ‹ * 
_cﬁ‹2
, glm::ivec2 
_pos2
);

26 
DøwTrüngÀ
(
Cﬁ‹
 * 
_cﬁ‹0
, 
glm
::
ivec2
 
_pos0
, Cﬁ‹ * 
_cﬁ‹1
, glm::ivec2 
_pos1
, Cﬁ‹ * 
_cﬁ‹2
, glm::ivec2 
_pos2
);

27 
AªaOfTrüngÀ
(
_a
, 
_b
, 
_c
);

28 
DøwTrüngÀ1
(
Cﬁ‹
 * 
_cﬁ‹0
, 
glm
::
ivec2
 
_pos0
, Cﬁ‹ * 
_cﬁ‹1
, glm::ivec2 
_pos1
, Cﬁ‹ * 
_cﬁ‹2
, glm::ivec2 
_pos2
);

29 
boﬁ
 
poötInTrüngÀ2D
(
glm
::
ivec2
 
_poöt
, glm::ivec2 
_pos0
, glm::ivec2 
_pos1
, glm::ivec2 
_pos2
);

30 
DøwTrüngÀs
(
°d
::
ve˘‹
<
glm
::
vec3
> * 
_vîãxD©a
, glm::
m©4
 
_MVP
);

31 
˛órS¸ìn
();

	@SDL-win/include/SDL/._SDL.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_active.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_audio.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_byteorder.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_cdrom.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_config.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_copying.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_cpuinfo.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_endian.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_error.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_events.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_getenv.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_joystick.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_keyboard.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_keysym.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_loadso.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_main.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_mouse.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_mutex.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_name.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_opengl.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_platform.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_quit.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_rwops.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_stdinc.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_syswm.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_thread.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_timer.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_types.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_version.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._SDL_video.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._begin_code.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/._close_code.h

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/include/SDL/SDL.h

27 #i‚de‡
_SDL_H


28 
	#_SDL_H


	)

30 
	~"SDL_maö.h
"

31 
	~"SDL_°döc.h
"

32 
	~"SDL_audio.h
"

33 
	~"SDL_cdrom.h
"

34 
	~"SDL_˝uöfo.h
"

35 
	~"SDL_ídün.h
"

36 
	~"SDL_îr‹.h
"

37 
	~"SDL_evíts.h
"

38 
	~"SDL_lﬂdso.h
"

39 
	~"SDL_muãx.h
"

40 
	~"SDL_rw›s.h
"

41 
	~"SDL_thªad.h
"

42 
	~"SDL_timî.h
"

43 
	~"SDL_video.h
"

44 
	~"SDL_vîsi⁄.h
"

46 
	~"begö_code.h
"

48 #ifde‡
__˝lu•lus


61 
	#SDL_INIT_TIMER
 0x00000001

	)

62 
	#SDL_INIT_AUDIO
 0x00000010

	)

63 
	#SDL_INIT_VIDEO
 0x00000020

	)

64 
	#SDL_INIT_CDROM
 0x00000100

	)

65 
	#SDL_INIT_JOYSTICK
 0x00000200

	)

66 
	#SDL_INIT_NOPARACHUTE
 0x00100000

	)

67 
	#SDL_INIT_EVENTTHREAD
 0x01000000

	)

68 
	#SDL_INIT_EVERYTHING
 0x0000FFFF

	)

76 
DECLSPEC
 
SDLCALL
 
SDL_Inô
(
Uöt32
 
Êags
);

79 
DECLSPEC
 
SDLCALL
 
SDL_InôSubSy°em
(
Uöt32
 
Êags
);

82 
DECLSPEC
 
SDLCALL
 
SDL_QuôSubSy°em
(
Uöt32
 
Êags
);

88 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_WasInô
(Uöt32 
Êags
);

93 
DECLSPEC
 
SDLCALL
 
SDL_Quô
();

96 #ifde‡
__˝lu•lus


99 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_active.h

28 #i‚de‡
_SDL_a˘ive_h


29 
	#_SDL_a˘ive_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


42 
	#SDL_APPMOUSEFOCUS
 0x01

	)

43 
	#SDL_APPINPUTFOCUS
 0x02

	)

44 
	#SDL_APPACTIVE
 0x04

	)

54 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_GëAµSèã
();

58 #ifde‡
__˝lu•lus


61 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_audio.h

28 #i‚de‡
_SDL_audio_h


29 
	#_SDL_audio_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_ídün.h
"

34 
	~"SDL_muãx.h
"

35 
	~"SDL_thªad.h
"

36 
	~"SDL_rw›s.h
"

38 
	~"begö_code.h
"

40 #ifde‡
__˝lu•lus


74 
	sSDL_AudioS≥c
 {

75 
‰eq
;

76 
Uöt16
 
f‹m©
;

77 
Uöt8
 
ch™√ls
;

78 
Uöt8
 
sûí˚
;

79 
Uöt16
 
ßm∂es
;

80 
Uöt16
 
∑ddög
;

81 
Uöt32
 
size
;

91 (
SDLCALL
 *
ˇŒback
)(*
u£rd©a
, 
Uöt8
 *
°ªam
, 
Àn
);

92 *
u£rd©a
;

93 } 
	tSDL_AudioS≥c
;

100 
	#AUDIO_U8
 0x0008

	)

101 
	#AUDIO_S8
 0x8008

	)

102 
	#AUDIO_U16LSB
 0x0010

	)

103 
	#AUDIO_S16LSB
 0x8010

	)

104 
	#AUDIO_U16MSB
 0x1010

	)

105 
	#AUDIO_S16MSB
 0x9010

	)

106 
	#AUDIO_U16
 
AUDIO_U16LSB


	)

107 
	#AUDIO_S16
 
AUDIO_S16LSB


	)

113 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


114 
	#AUDIO_U16SYS
 
AUDIO_U16LSB


	)

115 
	#AUDIO_S16SYS
 
AUDIO_S16LSB


	)

117 
	#AUDIO_U16SYS
 
AUDIO_U16MSB


	)

118 
	#AUDIO_S16SYS
 
AUDIO_S16MSB


	)

126 
	sSDL_AudioCVT
 {

127 
√eded
;

128 
Uöt16
 
§c_f‹m©
;

129 
Uöt16
 
d°_f‹m©
;

130 
øã_ö¸
;

131 
Uöt8
 *
buf
;

132 
Àn
;

133 
Àn_cvt
;

134 
Àn_mu…
;

135 
Àn_øtio
;

136 (
SDLCALL
 *
fûãrs
[10])(
SDL_AudioCVT
 *
cvt
, 
Uöt16
 
f‹m©
);

137 
fûãr_ödex
;

138 } 
	tSDL_AudioCVT
;

150 
DECLSPEC
 
SDLCALL
 
SDL_AudioInô
(c⁄° *
drivî_«me
);

151 
DECLSPEC
 
SDLCALL
 
SDL_AudioQuô
();

159 
DECLSPEC
 * 
SDLCALL
 
SDL_AudioDrivîName
(*
«mebuf
, 
maxÀn
);

178 
DECLSPEC
 
SDLCALL
 
SDL_O≥nAudio
(
SDL_AudioS≥c
 *
desúed
, SDL_AudioS≥¯*
obèöed
);

181 
	gSDL_AUDIO_STOPPED
 = 0,

182 
	gSDL_AUDIO_PLAYING
,

183 
	gSDL_AUDIO_PAUSED


184 } 
	tSDL_audio°©us
;

187 
DECLSPEC
 
SDL_audio°©us
 
SDLCALL
 
SDL_GëAudioSètus
();

196 
DECLSPEC
 
SDLCALL
 
SDL_Pau£Audio
(
∑u£_⁄
);

215 
DECLSPEC
 
SDL_AudioS≥c
 * 
SDLCALL
 
SDL_LﬂdWAV_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, SDL_AudioS≥¯*
•ec
, 
Uöt8
 **
audio_buf
, 
Uöt32
 *
audio_Àn
);

218 
	#SDL_LﬂdWAV
(
fûe
, 
•ec
, 
audio_buf
, 
audio_Àn
) \

219 
	`SDL_LﬂdWAV_RW
(
	`SDL_RWFromFûe
(
fûe
, "rb"),1, 
•ec
,
audio_buf
,
audio_Àn
)

	)

224 
DECLSPEC
 
SDLCALL
 
SDL_FªeWAV
(
Uöt8
 *
audio_buf
);

234 
DECLSPEC
 
SDLCALL
 
SDL_BuûdAudioCVT
(
SDL_AudioCVT
 *
cvt
,

235 
Uöt16
 
§c_f‹m©
, 
Uöt8
 
§c_ch™√ls
, 
§c_øã
,

236 
Uöt16
 
d°_f‹m©
, 
Uöt8
 
d°_ch™√ls
, 
d°_øã
);

247 
DECLSPEC
 
SDLCALL
 
SDL_C⁄vîtAudio
(
SDL_AudioCVT
 *
cvt
);

250 
	#SDL_MIX_MAXVOLUME
 128

	)

258 
DECLSPEC
 
SDLCALL
 
SDL_MixAudio
(
Uöt8
 *
d°
, c⁄° Uöt8 *
§c
, 
Uöt32
 
Àn
, 
vﬁume
);

268 
DECLSPEC
 
SDLCALL
 
SDL_LockAudio
();

269 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockAudio
();

275 
DECLSPEC
 
SDLCALL
 
SDL_Clo£Audio
();

279 #ifde‡
__˝lu•lus


282 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_byteorder.h

29 
	~"SDL_ídün.h
"

	@SDL-win/include/SDL/SDL_cdrom.h

28 #i‚de‡
_SDL_cdrom_h


29 
	#_SDL_cdrom_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


48 
	#SDL_MAX_TRACKS
 99

	)

54 
	#SDL_AUDIO_TRACK
 0x00

	)

55 
	#SDL_DATA_TRACK
 0x04

	)

60 
CD_TRAYEMPTY
,

61 
CD_STOPPED
,

62 
CD_PLAYING
,

63 
CD_PAUSED
,

64 
CD_ERROR
 = -1

65 } 
	tCD°©us
;

68 
	#CD_INDRIVE
(
°©us
Ë(()(°©usË> 0)

	)

70 
	sSDL_CDåack
 {

71 
Uöt8
 
id
;

72 
Uöt8
 
ty≥
;

73 
Uöt16
 
unu£d
;

74 
Uöt32
 
Àngth
;

75 
Uöt32
 
off£t
;

76 } 
	tSDL_CDåack
;

79 
	sSDL_CD
 {

80 
id
;

81 
CD°©us
 
°©us
;

85 
numåacks
;

86 
cur_åack
;

87 
cur_‰ame
;

88 
SDL_CDåack
 
åack
[
SDL_MAX_TRACKS
+1];

90 } 
	tSDL_CD
;

96 
	#CD_FPS
 75

	)

97 
	#FRAMES_TO_MSF
(
f
, 
M
,
S
,
F
) { \

98 
vÆue
 = 
f
; \

99 *(
F
Ë
vÆue
%
CD_FPS
; \

100 
vÆue
 /
CD_FPS
; \

101 *(
S
Ë
vÆue
%60; \

102 
vÆue
 /= 60; \

103 *(
M
Ë
vÆue
; \

104 }

	)

105 
	#MSF_TO_FRAMES
(
M
, 
S
, 
F
Ë((M)*60*
CD_FPS
+(S)*CD_FPS+(F))

	)

114 
DECLSPEC
 
SDLCALL
 
SDL_CDNumDrives
();

123 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDL_CDName
(
drive
);

132 
DECLSPEC
 
SDL_CD
 * 
SDLCALL
 
SDL_CDO≥n
(
drive
);

139 
DECLSPEC
 
CD°©us
 
SDLCALL
 
SDL_CDSètus
(
SDL_CD
 *
cdrom
);

163 
DECLSPEC
 
SDLCALL
 
SDL_CDPœyTøcks
(
SDL_CD
 *
cdrom
,

164 
°¨t_åack
, 
°¨t_‰ame
, 
¡øcks
, 
n‰ames
);

170 
DECLSPEC
 
SDLCALL
 
SDL_CDPœy
(
SDL_CD
 *
cdrom
, 
°¨t
, 
Àngth
);

175 
DECLSPEC
 
SDLCALL
 
SDL_CDPau£
(
SDL_CD
 *
cdrom
);

180 
DECLSPEC
 
SDLCALL
 
SDL_CDResume
(
SDL_CD
 *
cdrom
);

185 
DECLSPEC
 
SDLCALL
 
SDL_CDSt›
(
SDL_CD
 *
cdrom
);

190 
DECLSPEC
 
SDLCALL
 
SDL_CDEje˘
(
SDL_CD
 *
cdrom
);

193 
DECLSPEC
 
SDLCALL
 
SDL_CDClo£
(
SDL_CD
 *
cdrom
);

197 #ifde‡
__˝lu•lus


200 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_config.h

23 #i‚de‡
_SDL_c⁄fig_h


24 
	#_SDL_c⁄fig_h


	)

26 
	~"SDL_∂©f‹m.h
"

29 #i‡
deföed
(
__DREAMCAST__
)

30 
	~"SDL_c⁄fig_dªamˇ°.h
"

31 #ñi‡
deföed
(
__MACOS__
)

32 
	~"SDL_c⁄fig_macos.h
"

33 #ñi‡
deföed
(
__MACOSX__
)

34 
	~"SDL_c⁄fig_macosx.h
"

35 #ñi‡
deföed
(
__SYMBIAN32__
)

36 
	~"SDL_c⁄fig_symbün.h
"

37 #ñi‡
deföed
(
__WIN32__
)

38 
	~"SDL_c⁄fig_wö32.h
"

39 #ñi‡
deföed
(
__OS2__
)

40 
	~"SDL_c⁄fig_os2.h
"

42 
	~"SDL_c⁄fig_möimÆ.h
"

	@SDL-win/include/SDL/SDL_config_win32.h

23 #i‚de‡
_SDL_c⁄fig_wö32_h


24 
	#_SDL_c⁄fig_wö32_h


	)

26 
	~"SDL_∂©f‹m.h
"

30 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__DMC__
)

31 
	#HAVE_STDINT_H
 1

	)

32 #ñi‡
deföed
(
_MSC_VER
)

33 sig√d 
	t__öt8
 
	töt8_t
;

34 
	t__öt8
 
	tuöt8_t
;

35 sig√d 
	t__öt16
 
	töt16_t
;

36 
	t__öt16
 
	tuöt16_t
;

37 sig√d 
	t__öt32
 
	töt32_t
;

38 
	t__öt32
 
	tuöt32_t
;

39 sig√d 
	t__öt64
 
	töt64_t
;

40 
	t__öt64
 
	tuöt64_t
;

41 #i‚de‡
_UINTPTR_T_DEFINED


42 #ifde‡ 
_WIN64


43 
	t__öt64
 
	tuöçå_t
;

45 
	tuöçå_t
;

47 
	#_UINTPTR_T_DEFINED


	)

50 #i‡((
_MSC_VER
 <1200Ë&& (!
deföed
(
DWORD_PTR
)))

51 
	#DWORD_PTR
 
DWORD


	)

53 #i‡((
_MSC_VER
 <1200Ë&& (!
deföed
(
LONG_PTR
)))

54 
	#LONG_PTR
 
LONG


	)

57 sig√d 
	töt8_t
;

58 
	tuöt8_t
;

59 sig√d 
	töt16_t
;

60 
	tuöt16_t
;

61 sig√d 
	töt32_t
;

62 
	tuöt32_t
;

63 sig√d 
	töt64_t
;

64 
	tuöt64_t
;

65 #i‚de‡
_SIZE_T_DEFINED_


66 
	#_SIZE_T_DEFINED_


	)

67 
	tsize_t
;

69 
	tuöçå_t
;

71 
	#SDL_HAS_64BIT_TYPE
 1

	)

74 
	#HAVE_LIBC
 1

	)

75 #ifde‡
HAVE_LIBC


77 
	#HAVE_STDIO_H
 1

	)

78 
	#STDC_HEADERS
 1

	)

79 
	#HAVE_STRING_H
 1

	)

80 
	#HAVE_CTYPE_H
 1

	)

81 
	#HAVE_MATH_H
 1

	)

82 #i‚de‡
_WIN32_WCE


83 
	#HAVE_SIGNAL_H
 1

	)

87 
	#HAVE_MALLOC
 1

	)

88 
	#HAVE_CALLOC
 1

	)

89 
	#HAVE_REALLOC
 1

	)

90 
	#HAVE_FREE
 1

	)

91 
	#HAVE_ALLOCA
 1

	)

92 
	#HAVE_QSORT
 1

	)

93 
	#HAVE_ABS
 1

	)

94 
	#HAVE_MEMSET
 1

	)

95 
	#HAVE_MEMCPY
 1

	)

96 
	#HAVE_MEMMOVE
 1

	)

97 
	#HAVE_MEMCMP
 1

	)

98 
	#HAVE_STRLEN
 1

	)

99 
	#HAVE__STRREV
 1

	)

100 
	#HAVE__STRUPR
 1

	)

101 
	#HAVE__STRLWR
 1

	)

102 
	#HAVE_STRCHR
 1

	)

103 
	#HAVE_STRRCHR
 1

	)

104 
	#HAVE_STRSTR
 1

	)

105 
	#HAVE_ITOA
 1

	)

106 
	#HAVE__LTOA
 1

	)

107 
	#HAVE__ULTOA
 1

	)

108 
	#HAVE_STRTOL
 1

	)

109 
	#HAVE_STRTOUL
 1

	)

110 
	#HAVE_STRTOLL
 1

	)

111 
	#HAVE_STRTOD
 1

	)

112 
	#HAVE_ATOI
 1

	)

113 
	#HAVE_ATOF
 1

	)

114 
	#HAVE_STRCMP
 1

	)

115 
	#HAVE_STRNCMP
 1

	)

116 
	#HAVE__STRICMP
 1

	)

117 
	#HAVE__STRNICMP
 1

	)

118 
	#HAVE_SSCANF
 1

	)

120 
	#HAVE_STDARG_H
 1

	)

121 
	#HAVE_STDDEF_H
 1

	)

125 #i‚de‡
_WIN32_WCE


126 
	#SDL_AUDIO_DRIVER_DSOUND
 1

	)

128 
	#SDL_AUDIO_DRIVER_WAVEOUT
 1

	)

129 
	#SDL_AUDIO_DRIVER_DISK
 1

	)

130 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

133 #ifde‡
_WIN32_WCE


134 
	#SDL_CDROM_DISABLED
 1

	)

136 
	#SDL_CDROM_WIN32
 1

	)

140 #ifde‡
_WIN32_WCE


141 
	#SDL_JOYSTICK_DISABLED
 1

	)

143 
	#SDL_JOYSTICK_WINMM
 1

	)

147 
	#SDL_LOADSO_WIN32
 1

	)

150 
	#SDL_THREAD_WIN32
 1

	)

153 #ifde‡
_WIN32_WCE


154 
	#SDL_TIMER_WINCE
 1

	)

156 
	#SDL_TIMER_WIN32
 1

	)

160 #ifde‡
_WIN32_WCE


161 
	#SDL_VIDEO_DRIVER_GAPI
 1

	)

163 #i‚de‡
_WIN32_WCE


164 
	#SDL_VIDEO_DRIVER_DDRAW
 1

	)

166 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

167 
	#SDL_VIDEO_DRIVER_WINDIB
 1

	)

170 #i‚de‡
_WIN32_WCE


171 
	#SDL_VIDEO_OPENGL
 1

	)

172 
	#SDL_VIDEO_OPENGL_WGL
 1

	)

176 
	#SDL_VIDEO_DISABLE_SCREENSAVER
 1

	)

179 #i‚de‡
_WIN64


180 
	#SDL_ASSEMBLY_ROUTINES
 1

	)

	@SDL-win/include/SDL/SDL_copying.h

	@SDL-win/include/SDL/SDL_cpuinfo.h

28 #i‚de‡
_SDL_˝uöfo_h


29 
	#_SDL_˝uöfo_h


	)

31 
	~"SDL_°döc.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


40 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasRDTSC
();

43 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasMMX
();

46 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasMMXExt
();

49 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_Has3DNow
();

52 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_Has3DNowExt
();

55 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasSSE
();

58 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasSSE2
();

61 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasA…iVec
();

64 #ifde‡
__˝lu•lus


67 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_endian.h

28 #i‚de‡
_SDL_ídün_h


29 
	#_SDL_ídün_h


	)

31 
	~"SDL_°döc.h
"

37 
	#SDL_LIL_ENDIAN
 1234

	)

38 
	#SDL_BIG_ENDIAN
 4321

	)

41 #i‚de‡
SDL_BYTEORDER


42 #ifde‡
__löux__


43 
	~<ídün.h
>

44 
	#SDL_BYTEORDER
 
__BYTE_ORDER


	)

46 #i‡
deföed
(
__hµa__
) || \

47 
deföed
(
__m68k__
Ë|| deföed(
mc68000
Ë|| deföed(
_M_M68K
) || \

48 (
deföed
(
__MIPS__
Ë&& deföed(
__MISPEB__
)) || \

49 
deföed
(
__µc__
Ë|| deföed(
__POWERPC__
Ë|| deföed(
_M_PPC
) || \

50 
	$deföed
(
__•¨c__
)

51 
	#SDL_BYTEORDER
 
SDL_BIG_ENDIAN


	)

53 
	#SDL_BYTEORDER
 
SDL_LIL_ENDIAN


	)

59 
	~"begö_code.h
"

61 #ifde‡
__˝lu•lus


73 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__i386__
) && \

74 !(
__GNUC__
 =2 && 
__GNUC_MINOR__
 <= 95 )

75 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
)

77 
	`__asm__
("xchgb %b0,%h0" : "=q" (
x
) : "0" (x));

78  
x
;

79 
	}
}

80 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
)

81 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
)

83 
	`__asm__
("xchgb %b0,%h0" : "=Q" (
x
) : "0" (x));

84  
x
;

85 
	}
}

86 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__powîpc__
Ë|| deföed(
__µc__
))

87 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
)

89 
Uöt16
 
ªsu…
;

91 
	`__asm__
("æwimò%0,%2,8,16,23" : "=&r" (
ªsu…
Ë: "0" (
x
 >> 8), "r" (x));

92  
ªsu…
;

93 
	}
}

94 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__m68k__
Ë&& !deföed(
__mcﬁdfúe__
))

95 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
)

97 
	`__asm__
("r‹w #8,%0" : "=d" (
x
) : "0" (x) : "cc");

98  
x
;

99 
	}
}

101 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
) {

102  
	`SDL_°©ic_ˇ°
(
Uöt16
, ((
x
<<8)|(x>>8)));

103 
	}
}

106 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__i386__
) && \

107 !(
__GNUC__
 =2 && 
__GNUC_MINOR__
 <= 95 )

108 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
)

110 
__asm__
("bsw≠ %0" : "Ù" (
x
) : "0" (x));

111  
x
;

113 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
)

114 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
)

116 
__asm__
("bsw≠»%0" : "Ù" (
x
) : "0" (x));

117  
x
;

119 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__powîpc__
Ë|| deföed(
__µc__
))

120 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
)

122 
Uöt32
 
ªsu…
;

124 
__asm__
("æwimò%0,%2,24,16,23" : "=&r" (
ªsu…
Ë: "0" (
x
>>24), "r" (x));

125 
__asm__
("æwimò%0,%2,8,8,15" : "=&r" (
ªsu…
Ë: "0" (ªsu…), "r" (
x
));

126 
__asm__
("æwimò%0,%2,24,0,7" : "=&r" (
ªsu…
Ë: "0" (ªsu…), "r" (
x
));

127  
ªsu…
;

129 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__m68k__
Ë&& !deföed(
__mcﬁdfúe__
))

130 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
)

132 
__asm__
("r‹w #8,%0\n\tsw≠ %0\n\å‹w #8,%0" : "=d" (
x
) : "0" (x) : "cc");

133  
x
;

136 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
) {

137  
SDL_°©ic_ˇ°
(
Uöt32
, ((
x
<<24)|((x<<8)&0x00FF0000)|((x>>8)&0x0000FF00)|(x>>24)));

141 #ifde‡
SDL_HAS_64BIT_TYPE


142 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__i386__
) && \

143 !(
__GNUC__
 =2 && 
__GNUC_MINOR__
 <= 95 )

144 
__ölöe__
 
Uöt64
 
SDL_Sw≠64
(Uöt64 
x
)

147 °ru˘ { 
Uöt32
 
a
,
b
; } 
s
;

148 
Uöt64
 
u
;

149 } 
v
;

150 
v
.
u
 = 
x
;

151 
__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

152 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

153 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

154  
v
.
u
;

156 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
)

157 
__ölöe__
 
Uöt64
 
SDL_Sw≠64
(Uöt64 
x
)

159 
__asm__
("bsw≠q %0" : "Ù" (
x
) : "0" (x));

160  
x
;

163 
__ölöe__
 
Uöt64
 
SDL_Sw≠64
(Uöt64 
x
)

165 
Uöt32
 
hi
, 
lo
;

168 
lo
 = 
SDL_°©ic_ˇ°
(
Uöt32
, 
x
 & 0xFFFFFFFF);

169 
x
 >>= 32;

170 
hi
 = 
SDL_°©ic_ˇ°
(
Uöt32
, 
x
 & 0xFFFFFFFF);

171 
x
 = 
SDL_Sw≠32
(
lo
);

172 
x
 <<= 32;

173 
x
 |
SDL_Sw≠32
(
hi
);

174  (
x
);

182 
	#SDL_Sw≠64
(
X
Ë(X)

	)

191 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


192 
	#SDL_Sw≠LE16
(
X
Ë(X)

	)

193 
	#SDL_Sw≠LE32
(
X
Ë(X)

	)

194 
	#SDL_Sw≠LE64
(
X
Ë(X)

	)

195 
	#SDL_Sw≠BE16
(
X
Ë
	`SDL_Sw≠16
(X)

	)

196 
	#SDL_Sw≠BE32
(
X
Ë
	`SDL_Sw≠32
(X)

	)

197 
	#SDL_Sw≠BE64
(
X
Ë
	`SDL_Sw≠64
(X)

	)

199 
	#SDL_Sw≠LE16
(
X
Ë
	`SDL_Sw≠16
(X)

	)

200 
	#SDL_Sw≠LE32
(
X
Ë
	`SDL_Sw≠32
(X)

	)

201 
	#SDL_Sw≠LE64
(
X
Ë
	`SDL_Sw≠64
(X)

	)

202 
	#SDL_Sw≠BE16
(
X
Ë(X)

	)

203 
	#SDL_Sw≠BE32
(
X
Ë(X)

	)

204 
	#SDL_Sw≠BE64
(
X
Ë(X)

	)

209 #ifde‡
__˝lu•lus


212 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_error.h

28 #i‚de‡
_SDL_îr‹_h


29 
	#_SDL_îr‹_h


	)

31 
	~"SDL_°döc.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


43 
DECLSPEC
 
SDLCALL
 
SDL_SëEº‹
(c⁄° *
fmt
, ...);

44 
DECLSPEC
 * 
SDLCALL
 
SDL_GëEº‹
();

45 
DECLSPEC
 
SDLCALL
 
SDL_CÀ¨Eº‹
();

53 
	#SDL_OutOfMem‹y
(Ë
	`SDL_Eº‹
(
SDL_ENOMEM
)

	)

54 
	#SDL_Unsuµ‹ãd
(Ë
	`SDL_Eº‹
(
SDL_UNSUPPORTED
)

	)

56 
	gSDL_ENOMEM
,

57 
	gSDL_EFREAD
,

58 
	gSDL_EFWRITE
,

59 
	gSDL_EFSEEK
,

60 
	gSDL_UNSUPPORTED
,

61 
	gSDL_LASTERROR


62 } 
	tSDL_îr‹code
;

63 
DECLSPEC
 
SDLCALL
 
SDL_Eº‹
(
SDL_îr‹code
 
code
);

67 #ifde‡
__˝lu•lus


70 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_events.h

28 #i‚de‡
_SDL_evíts_h


29 
	#_SDL_evíts_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_a˘ive.h
"

34 
	~"SDL_keybﬂrd.h
"

35 
	~"SDL_mou£.h
"

36 
	~"SDL_joy°ick.h
"

37 
	~"SDL_quô.h
"

39 
	~"begö_code.h
"

41 #ifde‡
__˝lu•lus


47 
	#SDL_RELEASED
 0

	)

48 
	#SDL_PRESSED
 1

	)

53 
SDL_NOEVENT
 = 0,

54 
SDL_ACTIVEEVENT
,

55 
SDL_KEYDOWN
,

56 
SDL_KEYUP
,

57 
SDL_MOUSEMOTION
,

58 
SDL_MOUSEBUTTONDOWN
,

59 
SDL_MOUSEBUTTONUP
,

60 
SDL_JOYAXISMOTION
,

61 
SDL_JOYBALLMOTION
,

62 
SDL_JOYHATMOTION
,

63 
SDL_JOYBUTTONDOWN
,

64 
SDL_JOYBUTTONUP
,

65 
SDL_QUIT
,

66 
SDL_SYSWMEVENT
,

67 
SDL_EVENT_RESERVEDA
,

68 
SDL_EVENT_RESERVEDB
,

69 
SDL_VIDEORESIZE
,

70 
SDL_VIDEOEXPOSE
,

71 
SDL_EVENT_RESERVED2
,

72 
SDL_EVENT_RESERVED3
,

73 
SDL_EVENT_RESERVED4
,

74 
SDL_EVENT_RESERVED5
,

75 
SDL_EVENT_RESERVED6
,

76 
SDL_EVENT_RESERVED7
,

78 
SDL_USEREVENT
 = 24,

82 
SDL_NUMEVENTS
 = 32

83 } 
	tSDL_EvítTy≥
;

87 
	#SDL_EVENTMASK
(
X
Ë(1<<(X))

	)

89 
SDL_ACTIVEEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_ACTIVEEVENT
),

90 
SDL_KEYDOWNMASK
 = 
SDL_EVENTMASK
(
SDL_KEYDOWN
),

91 
SDL_KEYUPMASK
 = 
SDL_EVENTMASK
(
SDL_KEYUP
),

92 
SDL_KEYEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_KEYDOWN
)|

93 
SDL_EVENTMASK
(
SDL_KEYUP
),

94 
SDL_MOUSEMOTIONMASK
 = 
SDL_EVENTMASK
(
SDL_MOUSEMOTION
),

95 
SDL_MOUSEBUTTONDOWNMASK
 = 
SDL_EVENTMASK
(
SDL_MOUSEBUTTONDOWN
),

96 
SDL_MOUSEBUTTONUPMASK
 = 
SDL_EVENTMASK
(
SDL_MOUSEBUTTONUP
),

97 
SDL_MOUSEEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_MOUSEMOTION
)|

98 
SDL_EVENTMASK
(
SDL_MOUSEBUTTONDOWN
)|

99 
SDL_EVENTMASK
(
SDL_MOUSEBUTTONUP
),

100 
SDL_JOYAXISMOTIONMASK
 = 
SDL_EVENTMASK
(
SDL_JOYAXISMOTION
),

101 
SDL_JOYBALLMOTIONMASK
 = 
SDL_EVENTMASK
(
SDL_JOYBALLMOTION
),

102 
SDL_JOYHATMOTIONMASK
 = 
SDL_EVENTMASK
(
SDL_JOYHATMOTION
),

103 
SDL_JOYBUTTONDOWNMASK
 = 
SDL_EVENTMASK
(
SDL_JOYBUTTONDOWN
),

104 
SDL_JOYBUTTONUPMASK
 = 
SDL_EVENTMASK
(
SDL_JOYBUTTONUP
),

105 
SDL_JOYEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_JOYAXISMOTION
)|

106 
SDL_EVENTMASK
(
SDL_JOYBALLMOTION
)|

107 
SDL_EVENTMASK
(
SDL_JOYHATMOTION
)|

108 
SDL_EVENTMASK
(
SDL_JOYBUTTONDOWN
)|

109 
SDL_EVENTMASK
(
SDL_JOYBUTTONUP
),

110 
SDL_VIDEORESIZEMASK
 = 
SDL_EVENTMASK
(
SDL_VIDEORESIZE
),

111 
SDL_VIDEOEXPOSEMASK
 = 
SDL_EVENTMASK
(
SDL_VIDEOEXPOSE
),

112 
SDL_QUITMASK
 = 
SDL_EVENTMASK
(
SDL_QUIT
),

113 
SDL_SYSWMEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_SYSWMEVENT
)

114 } 
	tSDL_EvítMask
 ;

115 
	#SDL_ALLEVENTS
 0xFFFFFFFF

	)

119 
	sSDL_A˘iveEvít
 {

120 
Uöt8
 
ty≥
;

121 
Uöt8
 
gaö
;

122 
Uöt8
 
°©e
;

123 } 
	tSDL_A˘iveEvít
;

126 
	sSDL_KeybﬂrdEvít
 {

127 
Uöt8
 
ty≥
;

128 
Uöt8
 
which
;

129 
Uöt8
 
°©e
;

130 
SDL_keysym
 
keysym
;

131 } 
	tSDL_KeybﬂrdEvít
;

134 
	sSDL_Mou£MŸi⁄Evít
 {

135 
Uöt8
 
ty≥
;

136 
Uöt8
 
which
;

137 
Uöt8
 
°©e
;

138 
Uöt16
 
x
, 
y
;

139 
Söt16
 
xªl
;

140 
Söt16
 
yªl
;

141 } 
	tSDL_Mou£MŸi⁄Evít
;

144 
	sSDL_Mou£Buâ⁄Evít
 {

145 
Uöt8
 
ty≥
;

146 
Uöt8
 
which
;

147 
Uöt8
 
buâ⁄
;

148 
Uöt8
 
°©e
;

149 
Uöt16
 
x
, 
y
;

150 } 
	tSDL_Mou£Buâ⁄Evít
;

153 
	sSDL_JoyAxisEvít
 {

154 
Uöt8
 
ty≥
;

155 
Uöt8
 
which
;

156 
Uöt8
 
axis
;

157 
Söt16
 
vÆue
;

158 } 
	tSDL_JoyAxisEvít
;

161 
	sSDL_JoyBÆlEvít
 {

162 
Uöt8
 
ty≥
;

163 
Uöt8
 
which
;

164 
Uöt8
 
bÆl
;

165 
Söt16
 
xªl
;

166 
Söt16
 
yªl
;

167 } 
	tSDL_JoyBÆlEvít
;

170 
	sSDL_JoyH©Evít
 {

171 
Uöt8
 
ty≥
;

172 
Uöt8
 
which
;

173 
Uöt8
 
h©
;

174 
Uöt8
 
vÆue
;

180 } 
	tSDL_JoyH©Evít
;

183 
	sSDL_JoyBuâ⁄Evít
 {

184 
Uöt8
 
ty≥
;

185 
Uöt8
 
which
;

186 
Uöt8
 
buâ⁄
;

187 
Uöt8
 
°©e
;

188 } 
	tSDL_JoyBuâ⁄Evít
;

194 
	sSDL_ResizeEvít
 {

195 
Uöt8
 
ty≥
;

196 
w
;

197 
h
;

198 } 
	tSDL_ResizeEvít
;

201 
	sSDL_Expo£Evít
 {

202 
Uöt8
 
ty≥
;

203 } 
	tSDL_Expo£Evít
;

206 
	sSDL_QuôEvít
 {

207 
Uöt8
 
ty≥
;

208 } 
	tSDL_QuôEvít
;

211 
	sSDL_U£rEvít
 {

212 
Uöt8
 
ty≥
;

213 
code
;

214 *
d©a1
;

215 *
d©a2
;

216 } 
	tSDL_U£rEvít
;

219 
SDL_SysWMmsg
;

220 
SDL_SysWMmsg
 
	tSDL_SysWMmsg
;

221 
	sSDL_SysWMEvít
 {

222 
Uöt8
 
ty≥
;

223 
SDL_SysWMmsg
 *
msg
;

224 } 
	tSDL_SysWMEvít
;

227 
	uSDL_Evít
 {

228 
Uöt8
 
ty≥
;

229 
SDL_A˘iveEvít
 
a˘ive
;

230 
SDL_KeybﬂrdEvít
 
key
;

231 
SDL_Mou£MŸi⁄Evít
 
mŸi⁄
;

232 
SDL_Mou£Buâ⁄Evít
 
buâ⁄
;

233 
SDL_JoyAxisEvít
 
jaxis
;

234 
SDL_JoyBÆlEvít
 
jbÆl
;

235 
SDL_JoyH©Evít
 
jh©
;

236 
SDL_JoyBuâ⁄Evít
 
jbuâ⁄
;

237 
SDL_ResizeEvít
 
ªsize
;

238 
SDL_Expo£Evít
 
expo£
;

239 
SDL_QuôEvít
 
quô
;

240 
SDL_U£rEvít
 
u£r
;

241 
SDL_SysWMEvít
 
syswm
;

242 } 
	tSDL_Evít
;

251 
DECLSPEC
 
SDLCALL
 
SDL_PumpEvíts
();

254 
	gSDL_ADDEVENT
,

255 
	gSDL_PEEKEVENT
,

256 
	gSDL_GETEVENT


257 } 
	tSDL_evíè˘i⁄
;

277 
DECLSPEC
 
SDLCALL
 
SDL_PìpEvíts
(
SDL_Evít
 *
evíts
, 
numevíts
,

278 
SDL_evíè˘i⁄
 
a˘i⁄
, 
Uöt32
 
mask
);

284 
DECLSPEC
 
SDLCALL
 
SDL_PﬁlEvít
(
SDL_Evít
 *
evít
);

290 
DECLSPEC
 
SDLCALL
 
SDL_WaôEvít
(
SDL_Evít
 *
evít
);

296 
DECLSPEC
 
SDLCALL
 
SDL_PushEvít
(
SDL_Evít
 *
evít
);

300 (
SDLCALL
 *
	tSDL_EvítFûãr
)(c⁄° 
	tSDL_Evít
 *
	tevít
);

323 
DECLSPEC
 
SDLCALL
 
SDL_SëEvítFûãr
(
SDL_EvítFûãr
 
fûãr
);

329 
DECLSPEC
 
SDL_EvítFûãr
 
SDLCALL
 
SDL_GëEvítFûãr
();

334 
	#SDL_QUERY
 -1

	)

335 
	#SDL_IGNORE
 0

	)

336 
	#SDL_DISABLE
 0

	)

337 
	#SDL_ENABLE
 1

	)

348 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_EvítSèã
(Uöt8 
ty≥
, 
°©e
);

351 #ifde‡
__˝lu•lus


354 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_getenv.h

28 
	~"SDL_°döc.h
"

	@SDL-win/include/SDL/SDL_joystick.h

27 #i‚de‡
_SDL_joy°ick_h


28 
	#_SDL_joy°ick_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


46 
_SDL_Joy°ick
;

47 
_SDL_Joy°ick
 
	tSDL_Joy°ick
;

53 
DECLSPEC
 
SDLCALL
 
SDL_NumJoy°icks
();

61 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDL_Joy°ickName
(
devi˚_ödex
);

73 
DECLSPEC
 
SDL_Joy°ick
 * 
SDLCALL
 
SDL_Joy°ickO≥n
(
devi˚_ödex
);

78 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickO≥√d
(
devi˚_ödex
);

83 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickIndex
(
SDL_Joy°ick
 *
joy°ick
);

88 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumAxes
(
SDL_Joy°ick
 *
joy°ick
);

96 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumBÆls
(
SDL_Joy°ick
 *
joy°ick
);

101 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumH©s
(
SDL_Joy°ick
 *
joy°ick
);

106 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumBuâ⁄s
(
SDL_Joy°ick
 *
joy°ick
);

114 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickUpd©e
();

125 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickEvítSèã
(
°©e
);

134 
DECLSPEC
 
Söt16
 
SDLCALL
 
SDL_Joy°ickGëAxis
(
SDL_Joy°ick
 *
joy°ick
, 
axis
);

141 
	#SDL_HAT_CENTERED
 0x00

	)

142 
	#SDL_HAT_UP
 0x01

	)

143 
	#SDL_HAT_RIGHT
 0x02

	)

144 
	#SDL_HAT_DOWN
 0x04

	)

145 
	#SDL_HAT_LEFT
 0x08

	)

146 
	#SDL_HAT_RIGHTUP
 (
SDL_HAT_RIGHT
|
SDL_HAT_UP
)

	)

147 
	#SDL_HAT_RIGHTDOWN
 (
SDL_HAT_RIGHT
|
SDL_HAT_DOWN
)

	)

148 
	#SDL_HAT_LEFTUP
 (
SDL_HAT_LEFT
|
SDL_HAT_UP
)

	)

149 
	#SDL_HAT_LEFTDOWN
 (
SDL_HAT_LEFT
|
SDL_HAT_DOWN
)

	)

157 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_Joy°ickGëH©
(
SDL_Joy°ick
 *
joy°ick
, 
h©
);

166 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickGëBÆl
(
SDL_Joy°ick
 *
joy°ick
, 
bÆl
, *
dx
, *
dy
);

173 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_Joy°ickGëBuâ⁄
(
SDL_Joy°ick
 *
joy°ick
, 
buâ⁄
);

178 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickClo£
(
SDL_Joy°ick
 *
joy°ick
);

182 #ifde‡
__˝lu•lus


185 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_keyboard.h

27 #i‚de‡
_SDL_keybﬂrd_h


28 
	#_SDL_keybﬂrd_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

32 
	~"SDL_keysym.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


59 
	sSDL_keysym
 {

60 
Uöt8
 
sˇncode
;

61 
SDLKey
 
sym
;

62 
SDLMod
 
mod
;

63 
Uöt16
 
unicode
;

64 } 
	tSDL_keysym
;

67 
	#SDL_ALL_HOTKEYS
 0xFFFFFFFF

	)

82 
DECLSPEC
 
SDLCALL
 
SDL_E«bÀUNICODE
(
íabÀ
);

84 
	#SDL_DEFAULT_REPEAT_DELAY
 500

	)

85 
	#SDL_DEFAULT_REPEAT_INTERVAL
 30

	)

98 
DECLSPEC
 
SDLCALL
 
SDL_E«bÀKeyRïót
(
dñay
, 
öãrvÆ
);

99 
DECLSPEC
 
SDLCALL
 
SDL_GëKeyRïót
(*
dñay
, *
öãrvÆ
);

110 
DECLSPEC
 
Uöt8
 * 
SDLCALL
 
SDL_GëKeySèã
(*
numkeys
);

115 
DECLSPEC
 
SDLMod
 
SDLCALL
 
SDL_GëModSèã
();

121 
DECLSPEC
 
SDLCALL
 
SDL_SëModSèã
(
SDLMod
 
mod°©e
);

126 
DECLSPEC
 * 
SDLCALL
 
SDL_GëKeyName
(
SDLKey
 
key
);

130 #ifde‡
__˝lu•lus


133 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_keysym.h

23 #i‚de‡
_SDL_keysym_h


24 
	#_SDL_keysym_h


	)

36 
	mSDLK_UNKNOWN
 = 0,

37 
	mSDLK_FIRST
 = 0,

38 
	mSDLK_BACKSPACE
 = 8,

39 
	mSDLK_TAB
 = 9,

40 
	mSDLK_CLEAR
 = 12,

41 
	mSDLK_RETURN
 = 13,

42 
	mSDLK_PAUSE
 = 19,

43 
	mSDLK_ESCAPE
 = 27,

44 
	mSDLK_SPACE
 = 32,

45 
	mSDLK_EXCLAIM
 = 33,

46 
	mSDLK_QUOTEDBL
 = 34,

47 
	mSDLK_HASH
 = 35,

48 
	mSDLK_DOLLAR
 = 36,

49 
	mSDLK_AMPERSAND
 = 38,

50 
	mSDLK_QUOTE
 = 39,

51 
	mSDLK_LEFTPAREN
 = 40,

52 
	mSDLK_RIGHTPAREN
 = 41,

53 
	mSDLK_ASTERISK
 = 42,

54 
	mSDLK_PLUS
 = 43,

55 
	mSDLK_COMMA
 = 44,

56 
	mSDLK_MINUS
 = 45,

57 
	mSDLK_PERIOD
 = 46,

58 
	mSDLK_SLASH
 = 47,

59 
	mSDLK_0
 = 48,

60 
	mSDLK_1
 = 49,

61 
	mSDLK_2
 = 50,

62 
	mSDLK_3
 = 51,

63 
	mSDLK_4
 = 52,

64 
	mSDLK_5
 = 53,

65 
	mSDLK_6
 = 54,

66 
	mSDLK_7
 = 55,

67 
	mSDLK_8
 = 56,

68 
	mSDLK_9
 = 57,

69 
	mSDLK_COLON
 = 58,

70 
	mSDLK_SEMICOLON
 = 59,

71 
	mSDLK_LESS
 = 60,

72 
	mSDLK_EQUALS
 = 61,

73 
	mSDLK_GREATER
 = 62,

74 
	mSDLK_QUESTION
 = 63,

75 
	mSDLK_AT
 = 64,

79 
	mSDLK_LEFTBRACKET
 = 91,

80 
	mSDLK_BACKSLASH
 = 92,

81 
	mSDLK_RIGHTBRACKET
 = 93,

82 
	mSDLK_CARET
 = 94,

83 
	mSDLK_UNDERSCORE
 = 95,

84 
	mSDLK_BACKQUOTE
 = 96,

85 
	mSDLK_a
 = 97,

86 
	mSDLK_b
 = 98,

87 
	mSDLK_c
 = 99,

88 
	mSDLK_d
 = 100,

89 
	mSDLK_e
 = 101,

90 
	mSDLK_f
 = 102,

91 
	mSDLK_g
 = 103,

92 
	mSDLK_h
 = 104,

93 
	mSDLK_i
 = 105,

94 
	mSDLK_j
 = 106,

95 
	mSDLK_k
 = 107,

96 
	mSDLK_l
 = 108,

97 
	mSDLK_m
 = 109,

98 
	mSDLK_n
 = 110,

99 
	mSDLK_o
 = 111,

100 
	mSDLK_p
 = 112,

101 
	mSDLK_q
 = 113,

102 
	mSDLK_r
 = 114,

103 
	mSDLK_s
 = 115,

104 
	mSDLK_t
 = 116,

105 
	mSDLK_u
 = 117,

106 
	mSDLK_v
 = 118,

107 
	mSDLK_w
 = 119,

108 
	mSDLK_x
 = 120,

109 
	mSDLK_y
 = 121,

110 
	mSDLK_z
 = 122,

111 
	mSDLK_DELETE
 = 127,

117 
	mSDLK_WORLD_0
 = 160,

118 
	mSDLK_WORLD_1
 = 161,

119 
	mSDLK_WORLD_2
 = 162,

120 
	mSDLK_WORLD_3
 = 163,

121 
	mSDLK_WORLD_4
 = 164,

122 
	mSDLK_WORLD_5
 = 165,

123 
	mSDLK_WORLD_6
 = 166,

124 
	mSDLK_WORLD_7
 = 167,

125 
	mSDLK_WORLD_8
 = 168,

126 
	mSDLK_WORLD_9
 = 169,

127 
	mSDLK_WORLD_10
 = 170,

128 
	mSDLK_WORLD_11
 = 171,

129 
	mSDLK_WORLD_12
 = 172,

130 
	mSDLK_WORLD_13
 = 173,

131 
	mSDLK_WORLD_14
 = 174,

132 
	mSDLK_WORLD_15
 = 175,

133 
	mSDLK_WORLD_16
 = 176,

134 
	mSDLK_WORLD_17
 = 177,

135 
	mSDLK_WORLD_18
 = 178,

136 
	mSDLK_WORLD_19
 = 179,

137 
	mSDLK_WORLD_20
 = 180,

138 
	mSDLK_WORLD_21
 = 181,

139 
	mSDLK_WORLD_22
 = 182,

140 
	mSDLK_WORLD_23
 = 183,

141 
	mSDLK_WORLD_24
 = 184,

142 
	mSDLK_WORLD_25
 = 185,

143 
	mSDLK_WORLD_26
 = 186,

144 
	mSDLK_WORLD_27
 = 187,

145 
	mSDLK_WORLD_28
 = 188,

146 
	mSDLK_WORLD_29
 = 189,

147 
	mSDLK_WORLD_30
 = 190,

148 
	mSDLK_WORLD_31
 = 191,

149 
	mSDLK_WORLD_32
 = 192,

150 
	mSDLK_WORLD_33
 = 193,

151 
	mSDLK_WORLD_34
 = 194,

152 
	mSDLK_WORLD_35
 = 195,

153 
	mSDLK_WORLD_36
 = 196,

154 
	mSDLK_WORLD_37
 = 197,

155 
	mSDLK_WORLD_38
 = 198,

156 
	mSDLK_WORLD_39
 = 199,

157 
	mSDLK_WORLD_40
 = 200,

158 
	mSDLK_WORLD_41
 = 201,

159 
	mSDLK_WORLD_42
 = 202,

160 
	mSDLK_WORLD_43
 = 203,

161 
	mSDLK_WORLD_44
 = 204,

162 
	mSDLK_WORLD_45
 = 205,

163 
	mSDLK_WORLD_46
 = 206,

164 
	mSDLK_WORLD_47
 = 207,

165 
	mSDLK_WORLD_48
 = 208,

166 
	mSDLK_WORLD_49
 = 209,

167 
	mSDLK_WORLD_50
 = 210,

168 
	mSDLK_WORLD_51
 = 211,

169 
	mSDLK_WORLD_52
 = 212,

170 
	mSDLK_WORLD_53
 = 213,

171 
	mSDLK_WORLD_54
 = 214,

172 
	mSDLK_WORLD_55
 = 215,

173 
	mSDLK_WORLD_56
 = 216,

174 
	mSDLK_WORLD_57
 = 217,

175 
	mSDLK_WORLD_58
 = 218,

176 
	mSDLK_WORLD_59
 = 219,

177 
	mSDLK_WORLD_60
 = 220,

178 
	mSDLK_WORLD_61
 = 221,

179 
	mSDLK_WORLD_62
 = 222,

180 
	mSDLK_WORLD_63
 = 223,

181 
	mSDLK_WORLD_64
 = 224,

182 
	mSDLK_WORLD_65
 = 225,

183 
	mSDLK_WORLD_66
 = 226,

184 
	mSDLK_WORLD_67
 = 227,

185 
	mSDLK_WORLD_68
 = 228,

186 
	mSDLK_WORLD_69
 = 229,

187 
	mSDLK_WORLD_70
 = 230,

188 
	mSDLK_WORLD_71
 = 231,

189 
	mSDLK_WORLD_72
 = 232,

190 
	mSDLK_WORLD_73
 = 233,

191 
	mSDLK_WORLD_74
 = 234,

192 
	mSDLK_WORLD_75
 = 235,

193 
	mSDLK_WORLD_76
 = 236,

194 
	mSDLK_WORLD_77
 = 237,

195 
	mSDLK_WORLD_78
 = 238,

196 
	mSDLK_WORLD_79
 = 239,

197 
	mSDLK_WORLD_80
 = 240,

198 
	mSDLK_WORLD_81
 = 241,

199 
	mSDLK_WORLD_82
 = 242,

200 
	mSDLK_WORLD_83
 = 243,

201 
	mSDLK_WORLD_84
 = 244,

202 
	mSDLK_WORLD_85
 = 245,

203 
	mSDLK_WORLD_86
 = 246,

204 
	mSDLK_WORLD_87
 = 247,

205 
	mSDLK_WORLD_88
 = 248,

206 
	mSDLK_WORLD_89
 = 249,

207 
	mSDLK_WORLD_90
 = 250,

208 
	mSDLK_WORLD_91
 = 251,

209 
	mSDLK_WORLD_92
 = 252,

210 
	mSDLK_WORLD_93
 = 253,

211 
	mSDLK_WORLD_94
 = 254,

212 
	mSDLK_WORLD_95
 = 255,

217 
	mSDLK_KP0
 = 256,

218 
	mSDLK_KP1
 = 257,

219 
	mSDLK_KP2
 = 258,

220 
	mSDLK_KP3
 = 259,

221 
	mSDLK_KP4
 = 260,

222 
	mSDLK_KP5
 = 261,

223 
	mSDLK_KP6
 = 262,

224 
	mSDLK_KP7
 = 263,

225 
	mSDLK_KP8
 = 264,

226 
	mSDLK_KP9
 = 265,

227 
	mSDLK_KP_PERIOD
 = 266,

228 
	mSDLK_KP_DIVIDE
 = 267,

229 
	mSDLK_KP_MULTIPLY
 = 268,

230 
	mSDLK_KP_MINUS
 = 269,

231 
	mSDLK_KP_PLUS
 = 270,

232 
	mSDLK_KP_ENTER
 = 271,

233 
	mSDLK_KP_EQUALS
 = 272,

238 
	mSDLK_UP
 = 273,

239 
	mSDLK_DOWN
 = 274,

240 
	mSDLK_RIGHT
 = 275,

241 
	mSDLK_LEFT
 = 276,

242 
	mSDLK_INSERT
 = 277,

243 
	mSDLK_HOME
 = 278,

244 
	mSDLK_END
 = 279,

245 
	mSDLK_PAGEUP
 = 280,

246 
	mSDLK_PAGEDOWN
 = 281,

251 
	mSDLK_F1
 = 282,

252 
	mSDLK_F2
 = 283,

253 
	mSDLK_F3
 = 284,

254 
	mSDLK_F4
 = 285,

255 
	mSDLK_F5
 = 286,

256 
	mSDLK_F6
 = 287,

257 
	mSDLK_F7
 = 288,

258 
	mSDLK_F8
 = 289,

259 
	mSDLK_F9
 = 290,

260 
	mSDLK_F10
 = 291,

261 
	mSDLK_F11
 = 292,

262 
	mSDLK_F12
 = 293,

263 
	mSDLK_F13
 = 294,

264 
	mSDLK_F14
 = 295,

265 
	mSDLK_F15
 = 296,

270 
	mSDLK_NUMLOCK
 = 300,

271 
	mSDLK_CAPSLOCK
 = 301,

272 
	mSDLK_SCROLLOCK
 = 302,

273 
	mSDLK_RSHIFT
 = 303,

274 
	mSDLK_LSHIFT
 = 304,

275 
	mSDLK_RCTRL
 = 305,

276 
	mSDLK_LCTRL
 = 306,

277 
	mSDLK_RALT
 = 307,

278 
	mSDLK_LALT
 = 308,

279 
	mSDLK_RMETA
 = 309,

280 
	mSDLK_LMETA
 = 310,

281 
	mSDLK_LSUPER
 = 311,

282 
	mSDLK_RSUPER
 = 312,

283 
	mSDLK_MODE
 = 313,

284 
	mSDLK_COMPOSE
 = 314,

289 
	mSDLK_HELP
 = 315,

290 
	mSDLK_PRINT
 = 316,

291 
	mSDLK_SYSREQ
 = 317,

292 
	mSDLK_BREAK
 = 318,

293 
	mSDLK_MENU
 = 319,

294 
	mSDLK_POWER
 = 320,

295 
	mSDLK_EURO
 = 321,

296 
	mSDLK_UNDO
 = 322,

301 
	mSDLK_LAST


302 } 
	tSDLKey
;

306 
	mKMOD_NONE
 = 0x0000,

307 
	mKMOD_LSHIFT
= 0x0001,

308 
	mKMOD_RSHIFT
= 0x0002,

309 
	mKMOD_LCTRL
 = 0x0040,

310 
	mKMOD_RCTRL
 = 0x0080,

311 
	mKMOD_LALT
 = 0x0100,

312 
	mKMOD_RALT
 = 0x0200,

313 
	mKMOD_LMETA
 = 0x0400,

314 
	mKMOD_RMETA
 = 0x0800,

315 
	mKMOD_NUM
 = 0x1000,

316 
	mKMOD_CAPS
 = 0x2000,

317 
	mKMOD_MODE
 = 0x4000,

318 
	mKMOD_RESERVED
 = 0x8000

319 } 
	tSDLMod
;

321 
	#KMOD_CTRL
 (
KMOD_LCTRL
|
KMOD_RCTRL
)

	)

322 
	#KMOD_SHIFT
 (
KMOD_LSHIFT
|
KMOD_RSHIFT
)

	)

323 
	#KMOD_ALT
 (
KMOD_LALT
|
KMOD_RALT
)

	)

324 
	#KMOD_META
 (
KMOD_LMETA
|
KMOD_RMETA
)

	)

	@SDL-win/include/SDL/SDL_loadso.h

43 #i‚de‡
_SDL_lﬂdso_h


44 
	#_SDL_lﬂdso_h


	)

46 
	~"SDL_°döc.h
"

47 
	~"SDL_îr‹.h
"

49 
	~"begö_code.h
"

51 #ifde‡
__˝lu•lus


60 
DECLSPEC
 * 
SDLCALL
 
SDL_LﬂdObje˘
(c⁄° *
sofûe
);

67 
DECLSPEC
 * 
SDLCALL
 
SDL_LﬂdFun˘i⁄
(*
h™dÀ
, c⁄° *
«me
);

70 
DECLSPEC
 
SDLCALL
 
SDL_U∆ﬂdObje˘
(*
h™dÀ
);

73 #ifde‡
__˝lu•lus


76 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_main.h

23 #i‚de‡
_SDL_maö_h


24 
	#_SDL_maö_h


	)

26 
	~"SDL_°döc.h
"

32 #i‡
deföed
(
__WIN32__
) || \

33 (
deföed
(
__MWERKS__
Ë&& !deföed(
__BEOS__
)) || \

34 
deföed
(
__MACOS__
Ë|| deföed(
__MACOSX__
) || \

35 
deföed
(
__SYMBIAN32__
Ë|| 
	$deföed
(
QWS
)

37 #ifde‡
__˝lu•lus


38 
	#C_LINKAGE
 "C"

	)

40 
	#C_LINKAGE


	)

54 
	#maö
 
SDL_maö


	)

57 
C_LINKAGE
 
	`SDL_maö
(
¨gc
, *
¨gv
[]);

62 #ifde‡
__WIN32__


64 
	~"begö_code.h
"

65 #ifde‡
__˝lu•lus


70 
DECLSPEC
 
SDLCALL
 
	`SDL_SëModuÀH™dÀ
(*
hIn°
);

72 
DECLSPEC
 
SDLCALL
 
	`SDL_Regi°îAµ
(*
«me
, 
Uöt32
 
°yÀ
, *
hIn°
);

74 
DECLSPEC
 
SDLCALL
 
	`SDL_Uƒegi°îAµ
();

75 #ifde‡
__˝lu•lus


76 
	}
}

78 
	~"˛o£_code.h
"

84 #i‡
deföed
(
__MACOS__
)

86 
	~"begö_code.h
"

87 #ifde‡
__˝lu•lus


92 
QDGlobÆs
;

95 
DECLSPEC
 
SDLCALL
 
SDL_InôQuickDøw
(
QDGlobÆs
 *
the_qd
);

97 #ifde‡
__˝lu•lus


100 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_mouse.h

27 #i‚de‡
_SDL_mou£_h


28 
	#_SDL_mou£_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

32 
	~"SDL_video.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


40 
WMcurs‹
 
	tWMcurs‹
;

41 
	sSDL_Curs‹
 {

42 
SDL_Re˘
 
¨ó
;

43 
Söt16
 
hŸ_x
, 
hŸ_y
;

44 
Uöt8
 *
d©a
;

45 
Uöt8
 *
mask
;

46 
Uöt8
 *
ßve
[2];

47 
WMcurs‹
 *
wm_curs‹
;

48 } 
	tSDL_Curs‹
;

57 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_GëMou£Sèã
(*
x
, *
y
);

65 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_GëRñ©iveMou£Sèã
(*
x
, *
y
);

70 
DECLSPEC
 
SDLCALL
 
SDL_W¨pMou£
(
Uöt16
 
x
, Uöt16 
y
);

85 
DECLSPEC
 
SDL_Curs‹
 * 
SDLCALL
 
SDL_Cª©eCurs‹


86 (
Uöt8
 *
d©a
, Uöt8 *
mask
, 
w
, 
h
, 
hŸ_x
, 
hŸ_y
);

93 
DECLSPEC
 
SDLCALL
 
SDL_SëCurs‹
(
SDL_Curs‹
 *
curs‹
);

98 
DECLSPEC
 
SDL_Curs‹
 * 
SDLCALL
 
SDL_GëCurs‹
();

103 
DECLSPEC
 
SDLCALL
 
SDL_FªeCurs‹
(
SDL_Curs‹
 *
curs‹
);

112 
DECLSPEC
 
SDLCALL
 
SDL_ShowCurs‹
(
toggÀ
);

122 
	#SDL_BUTTON
(
X
Ë(1 << ((X)-1))

	)

123 
	#SDL_BUTTON_LEFT
 1

	)

124 
	#SDL_BUTTON_MIDDLE
 2

	)

125 
	#SDL_BUTTON_RIGHT
 3

	)

126 
	#SDL_BUTTON_WHEELUP
 4

	)

127 
	#SDL_BUTTON_WHEELDOWN
 5

	)

128 
	#SDL_BUTTON_X1
 6

	)

129 
	#SDL_BUTTON_X2
 7

	)

130 
	#SDL_BUTTON_LMASK
 
	`SDL_BUTTON
(
SDL_BUTTON_LEFT
)

	)

131 
	#SDL_BUTTON_MMASK
 
	`SDL_BUTTON
(
SDL_BUTTON_MIDDLE
)

	)

132 
	#SDL_BUTTON_RMASK
 
	`SDL_BUTTON
(
SDL_BUTTON_RIGHT
)

	)

133 
	#SDL_BUTTON_X1MASK
 
	`SDL_BUTTON
(
SDL_BUTTON_X1
)

	)

134 
	#SDL_BUTTON_X2MASK
 
	`SDL_BUTTON
(
SDL_BUTTON_X2
)

	)

138 #ifde‡
__˝lu•lus


141 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_mutex.h

23 #i‚de‡
_SDL_muãx_h


24 
	#_SDL_muãx_h


	)

32 
	~"SDL_°döc.h
"

33 
	~"SDL_îr‹.h
"

35 
	~"begö_code.h
"

37 #ifde‡
__˝lu•lus


44 
	#SDL_MUTEX_TIMEDOUT
 1

	)

47 
	#SDL_MUTEX_MAXWAIT
 (~(
Uöt32
)0)

	)

55 
SDL_muãx
;

56 
SDL_muãx
 
	tSDL_muãx
;

59 
DECLSPEC
 
SDL_muãx
 * 
SDLCALL
 
SDL_Cª©eMuãx
();

61 
	#SDL_LockMuãx
(
m
Ë
	`SDL_muãxP
(m)

	)

65 
DECLSPEC
 
SDLCALL
 
SDL_muãxP
(
SDL_muãx
 *
muãx
);

67 
	#SDL_U∆ockMuãx
(
m
Ë
	`SDL_muãxV
(m)

	)

74 
DECLSPEC
 
SDLCALL
 
SDL_muãxV
(
SDL_muãx
 *
muãx
);

77 
DECLSPEC
 
SDLCALL
 
SDL_De°royMuãx
(
SDL_muãx
 *
muãx
);

86 
	gSDL_£m≠h‹e
;

87 
SDL_£m≠h‹e
 
	tSDL_£m
;

90 
DECLSPEC
 
SDL_£m
 * 
SDLCALL
 
SDL_Cª©eSem≠h‹e
(
Uöt32
 
öôül_vÆue
);

93 
DECLSPEC
 
SDLCALL
 
SDL_De°roySem≠h‹e
(
SDL_£m
 *
£m
);

100 
DECLSPEC
 
SDLCALL
 
SDL_SemWaô
(
SDL_£m
 *
£m
);

106 
DECLSPEC
 
SDLCALL
 
SDL_SemTryWaô
(
SDL_£m
 *
£m
);

115 
DECLSPEC
 
SDLCALL
 
SDL_SemWaôTimeout
(
SDL_£m
 *
£m
, 
Uöt32
 
ms
);

120 
DECLSPEC
 
SDLCALL
 
SDL_SemPo°
(
SDL_£m
 *
£m
);

123 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_SemVÆue
(
SDL_£m
 *
£m
);

133 
	gSDL_c⁄d
;

134 
SDL_c⁄d
 
	tSDL_c⁄d
;

138 
DECLSPEC
 
SDL_c⁄d
 * 
SDLCALL
 
SDL_Cª©eC⁄d
();

141 
DECLSPEC
 
SDLCALL
 
SDL_De°royC⁄d
(
SDL_c⁄d
 *
c⁄d
);

146 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dSig«l
(
SDL_c⁄d
 *
c⁄d
);

151 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dBrﬂdˇ°
(
SDL_c⁄d
 *
c⁄d
);

158 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dWaô
(
SDL_c⁄d
 *
c⁄d
, 
SDL_muãx
 *
mut
);

166 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dWaôTimeout
(
SDL_c⁄d
 *
c⁄d
, 
SDL_muãx
 *
muãx
, 
Uöt32
 
ms
);

171 #ifde‡
__˝lu•lus


174 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_name.h

2 #i‚de‡
_SDL«me_h_


3 
	#_SDL«me_h_


	)

5 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

6 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

9 
	#SDL_NAME
(
X
Ë
SDL_
##
	)
X

	@SDL-win/include/SDL/SDL_opengl.h

27 
	~"SDL_c⁄fig.h
"

29 #ifde‡
__WIN32__


30 
	#WIN32_LEAN_AND_MEAN


	)

31 #i‚de‡
NOMINMAX


32 
	#NOMINMAX


	)

34 
	~<wödows.h
>

36 #i‚de‡
NO_SDL_GLEXT


37 
	#__gÀxt_h_


	)

39 #i‡
deföed
(
__MACOSX__
)

40 
	~<O≥nGL/gl.h
>

41 
	~<O≥nGL/glu.h
>

42 #ñi‡
deföed
(
__MACOS__
)

43 
	~<gl.h
>

44 
	~<glu.h
>

46 
	~<GL/gl.h
>

47 
	~<GL/glu.h
>

49 #i‚de‡
NO_SDL_GLEXT


50 #unde‡
__gÀxt_h_


59 #i‚de‡
NO_SDL_GLEXT


60 #i‡!
deföed
(
__gÀxt_h_
Ë&& !deföed(
GL_GLEXT_LEGACY
)

61 
	#__gÀxt_h_


	)

63 #ifde‡
__˝lu•lus


96 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

97 
	#WIN32_LEAN_AND_MEAN
 1

	)

98 
	~<wödows.h
>

101 #i‚de‡
APIENTRY


102 
	#APIENTRY


	)

104 #i‚de‡
APIENTRYP


105 
	#APIENTRYP
 
APIENTRY
 *

	)

107 #i‚de‡
GLAPI


108 
	#GLAPI
 

	)

116 
	#GL_GLEXT_VERSION
 29

	)

118 #i‚de‡
GL_VERSION_1_2


119 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

120 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

121 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

122 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

123 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

124 
	#GL_RESCALE_NORMAL
 0x803A

	)

125 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

126 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

127 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

128 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

129 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

130 
	#GL_TEXTURE_3D
 0x806F

	)

131 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

132 
	#GL_TEXTURE_DEPTH
 0x8071

	)

133 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

134 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

135 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

136 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

137 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

138 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

139 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

140 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

141 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

142 
	#GL_BGR
 0x80E0

	)

143 
	#GL_BGRA
 0x80E1

	)

144 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

145 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

146 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

147 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

148 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

149 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

150 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

151 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

152 
	#GL_SINGLE_COLOR
 0x81F9

	)

153 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

154 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

155 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

156 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

157 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

158 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

159 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

162 #i‚de‡
GL_ARB_imagög


163 
	#GL_CONSTANT_COLOR
 0x8001

	)

164 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

165 
	#GL_CONSTANT_ALPHA
 0x8003

	)

166 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

167 
	#GL_BLEND_COLOR
 0x8005

	)

168 
	#GL_FUNC_ADD
 0x8006

	)

169 
	#GL_MIN
 0x8007

	)

170 
	#GL_MAX
 0x8008

	)

171 
	#GL_BLEND_EQUATION
 0x8009

	)

172 
	#GL_FUNC_SUBTRACT
 0x800A

	)

173 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

174 
	#GL_CONVOLUTION_1D
 0x8010

	)

175 
	#GL_CONVOLUTION_2D
 0x8011

	)

176 
	#GL_SEPARABLE_2D
 0x8012

	)

177 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

178 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

179 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

180 
	#GL_REDUCE
 0x8016

	)

181 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

182 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

183 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

184 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

185 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

186 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

187 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

188 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

189 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

190 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

191 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

192 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

193 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

194 
	#GL_HISTOGRAM
 0x8024

	)

195 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

196 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

197 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

198 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

199 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

200 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

201 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

202 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

203 
	#GL_HISTOGRAM_SINK
 0x802D

	)

204 
	#GL_MINMAX
 0x802E

	)

205 
	#GL_MINMAX_FORMAT
 0x802F

	)

206 
	#GL_MINMAX_SINK
 0x8030

	)

207 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

208 
	#GL_COLOR_MATRIX
 0x80B1

	)

209 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

210 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

211 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

212 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

213 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

214 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

215 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

216 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

217 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

218 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

219 
	#GL_COLOR_TABLE
 0x80D0

	)

220 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

221 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

222 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

223 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

224 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

225 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

226 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

227 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

228 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

229 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

230 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

231 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

232 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

233 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

234 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

235 
	#GL_CONSTANT_BORDER
 0x8151

	)

236 
	#GL_REPLICATE_BORDER
 0x8153

	)

237 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

240 #i‚de‡
GL_VERSION_1_3


241 
	#GL_TEXTURE0
 0x84C0

	)

242 
	#GL_TEXTURE1
 0x84C1

	)

243 
	#GL_TEXTURE2
 0x84C2

	)

244 
	#GL_TEXTURE3
 0x84C3

	)

245 
	#GL_TEXTURE4
 0x84C4

	)

246 
	#GL_TEXTURE5
 0x84C5

	)

247 
	#GL_TEXTURE6
 0x84C6

	)

248 
	#GL_TEXTURE7
 0x84C7

	)

249 
	#GL_TEXTURE8
 0x84C8

	)

250 
	#GL_TEXTURE9
 0x84C9

	)

251 
	#GL_TEXTURE10
 0x84CA

	)

252 
	#GL_TEXTURE11
 0x84CB

	)

253 
	#GL_TEXTURE12
 0x84CC

	)

254 
	#GL_TEXTURE13
 0x84CD

	)

255 
	#GL_TEXTURE14
 0x84CE

	)

256 
	#GL_TEXTURE15
 0x84CF

	)

257 
	#GL_TEXTURE16
 0x84D0

	)

258 
	#GL_TEXTURE17
 0x84D1

	)

259 
	#GL_TEXTURE18
 0x84D2

	)

260 
	#GL_TEXTURE19
 0x84D3

	)

261 
	#GL_TEXTURE20
 0x84D4

	)

262 
	#GL_TEXTURE21
 0x84D5

	)

263 
	#GL_TEXTURE22
 0x84D6

	)

264 
	#GL_TEXTURE23
 0x84D7

	)

265 
	#GL_TEXTURE24
 0x84D8

	)

266 
	#GL_TEXTURE25
 0x84D9

	)

267 
	#GL_TEXTURE26
 0x84DA

	)

268 
	#GL_TEXTURE27
 0x84DB

	)

269 
	#GL_TEXTURE28
 0x84DC

	)

270 
	#GL_TEXTURE29
 0x84DD

	)

271 
	#GL_TEXTURE30
 0x84DE

	)

272 
	#GL_TEXTURE31
 0x84DF

	)

273 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

274 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

275 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

276 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

277 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

278 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

279 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

280 
	#GL_MULTISAMPLE
 0x809D

	)

281 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

282 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

283 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

284 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

285 
	#GL_SAMPLES
 0x80A9

	)

286 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

287 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

288 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

289 
	#GL_NORMAL_MAP
 0x8511

	)

290 
	#GL_REFLECTION_MAP
 0x8512

	)

291 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

292 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

293 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

294 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

295 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

296 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

297 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

298 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

299 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

300 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

301 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

302 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

303 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

304 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

305 
	#GL_COMPRESSED_RGB
 0x84ED

	)

306 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

307 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

308 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

309 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

310 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

311 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

312 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

313 
	#GL_COMBINE
 0x8570

	)

314 
	#GL_COMBINE_RGB
 0x8571

	)

315 
	#GL_COMBINE_ALPHA
 0x8572

	)

316 
	#GL_SOURCE0_RGB
 0x8580

	)

317 
	#GL_SOURCE1_RGB
 0x8581

	)

318 
	#GL_SOURCE2_RGB
 0x8582

	)

319 
	#GL_SOURCE0_ALPHA
 0x8588

	)

320 
	#GL_SOURCE1_ALPHA
 0x8589

	)

321 
	#GL_SOURCE2_ALPHA
 0x858A

	)

322 
	#GL_OPERAND0_RGB
 0x8590

	)

323 
	#GL_OPERAND1_RGB
 0x8591

	)

324 
	#GL_OPERAND2_RGB
 0x8592

	)

325 
	#GL_OPERAND0_ALPHA
 0x8598

	)

326 
	#GL_OPERAND1_ALPHA
 0x8599

	)

327 
	#GL_OPERAND2_ALPHA
 0x859A

	)

328 
	#GL_RGB_SCALE
 0x8573

	)

329 
	#GL_ADD_SIGNED
 0x8574

	)

330 
	#GL_INTERPOLATE
 0x8575

	)

331 
	#GL_SUBTRACT
 0x84E7

	)

332 
	#GL_CONSTANT
 0x8576

	)

333 
	#GL_PRIMARY_COLOR
 0x8577

	)

334 
	#GL_PREVIOUS
 0x8578

	)

335 
	#GL_DOT3_RGB
 0x86AE

	)

336 
	#GL_DOT3_RGBA
 0x86AF

	)

339 #i‚de‡
GL_VERSION_1_4


340 
	#GL_BLEND_DST_RGB
 0x80C8

	)

341 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

342 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

343 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

344 
	#GL_POINT_SIZE_MIN
 0x8126

	)

345 
	#GL_POINT_SIZE_MAX
 0x8127

	)

346 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

347 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

348 
	#GL_GENERATE_MIPMAP
 0x8191

	)

349 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

350 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

351 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

352 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

353 
	#GL_MIRRORED_REPEAT
 0x8370

	)

354 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

355 
	#GL_FOG_COORDINATE
 0x8451

	)

356 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

357 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

358 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

359 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

360 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

361 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

362 
	#GL_COLOR_SUM
 0x8458

	)

363 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

364 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

365 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

366 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

367 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

368 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

369 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

370 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

371 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

372 
	#GL_INCR_WRAP
 0x8507

	)

373 
	#GL_DECR_WRAP
 0x8508

	)

374 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

375 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

376 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

377 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

378 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

381 #i‚de‡
GL_VERSION_1_5


382 
	#GL_BUFFER_SIZE
 0x8764

	)

383 
	#GL_BUFFER_USAGE
 0x8765

	)

384 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

385 
	#GL_CURRENT_QUERY
 0x8865

	)

386 
	#GL_QUERY_RESULT
 0x8866

	)

387 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

388 
	#GL_ARRAY_BUFFER
 0x8892

	)

389 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

390 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

391 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

392 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

393 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

394 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

395 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

396 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

397 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

398 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

399 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

400 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

401 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

402 
	#GL_READ_ONLY
 0x88B8

	)

403 
	#GL_WRITE_ONLY
 0x88B9

	)

404 
	#GL_READ_WRITE
 0x88BA

	)

405 
	#GL_BUFFER_ACCESS
 0x88BB

	)

406 
	#GL_BUFFER_MAPPED
 0x88BC

	)

407 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

408 
	#GL_STREAM_DRAW
 0x88E0

	)

409 
	#GL_STREAM_READ
 0x88E1

	)

410 
	#GL_STREAM_COPY
 0x88E2

	)

411 
	#GL_STATIC_DRAW
 0x88E4

	)

412 
	#GL_STATIC_READ
 0x88E5

	)

413 
	#GL_STATIC_COPY
 0x88E6

	)

414 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

415 
	#GL_DYNAMIC_READ
 0x88E9

	)

416 
	#GL_DYNAMIC_COPY
 0x88EA

	)

417 
	#GL_SAMPLES_PASSED
 0x8914

	)

418 
	#GL_FOG_COORD_SRC
 
GL_FOG_COORDINATE_SOURCE


	)

419 
	#GL_FOG_COORD
 
GL_FOG_COORDINATE


	)

420 
	#GL_CURRENT_FOG_COORD
 
GL_CURRENT_FOG_COORDINATE


	)

421 
	#GL_FOG_COORD_ARRAY_TYPE
 
GL_FOG_COORDINATE_ARRAY_TYPE


	)

422 
	#GL_FOG_COORD_ARRAY_STRIDE
 
GL_FOG_COORDINATE_ARRAY_STRIDE


	)

423 
	#GL_FOG_COORD_ARRAY_POINTER
 
GL_FOG_COORDINATE_ARRAY_POINTER


	)

424 
	#GL_FOG_COORD_ARRAY
 
GL_FOG_COORDINATE_ARRAY


	)

425 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING


	)

426 
	#GL_SRC0_RGB
 
GL_SOURCE0_RGB


	)

427 
	#GL_SRC1_RGB
 
GL_SOURCE1_RGB


	)

428 
	#GL_SRC2_RGB
 
GL_SOURCE2_RGB


	)

429 
	#GL_SRC0_ALPHA
 
GL_SOURCE0_ALPHA


	)

430 
	#GL_SRC1_ALPHA
 
GL_SOURCE1_ALPHA


	)

431 
	#GL_SRC2_ALPHA
 
GL_SOURCE2_ALPHA


	)

434 #i‚de‡
GL_VERSION_2_0


435 
	#GL_BLEND_EQUATION_RGB
 
GL_BLEND_EQUATION


	)

436 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

437 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

438 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

439 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

440 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

441 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

442 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

443 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

444 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

445 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

446 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

447 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

448 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

449 
	#GL_DRAW_BUFFER0
 0x8825

	)

450 
	#GL_DRAW_BUFFER1
 0x8826

	)

451 
	#GL_DRAW_BUFFER2
 0x8827

	)

452 
	#GL_DRAW_BUFFER3
 0x8828

	)

453 
	#GL_DRAW_BUFFER4
 0x8829

	)

454 
	#GL_DRAW_BUFFER5
 0x882A

	)

455 
	#GL_DRAW_BUFFER6
 0x882B

	)

456 
	#GL_DRAW_BUFFER7
 0x882C

	)

457 
	#GL_DRAW_BUFFER8
 0x882D

	)

458 
	#GL_DRAW_BUFFER9
 0x882E

	)

459 
	#GL_DRAW_BUFFER10
 0x882F

	)

460 
	#GL_DRAW_BUFFER11
 0x8830

	)

461 
	#GL_DRAW_BUFFER12
 0x8831

	)

462 
	#GL_DRAW_BUFFER13
 0x8832

	)

463 
	#GL_DRAW_BUFFER14
 0x8833

	)

464 
	#GL_DRAW_BUFFER15
 0x8834

	)

465 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

466 
	#GL_POINT_SPRITE
 0x8861

	)

467 
	#GL_COORD_REPLACE
 0x8862

	)

468 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

469 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

470 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

471 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

472 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

473 
	#GL_VERTEX_SHADER
 0x8B31

	)

474 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

475 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

476 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

477 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

478 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

479 
	#GL_SHADER_TYPE
 0x8B4F

	)

480 
	#GL_FLOAT_VEC2
 0x8B50

	)

481 
	#GL_FLOAT_VEC3
 0x8B51

	)

482 
	#GL_FLOAT_VEC4
 0x8B52

	)

483 
	#GL_INT_VEC2
 0x8B53

	)

484 
	#GL_INT_VEC3
 0x8B54

	)

485 
	#GL_INT_VEC4
 0x8B55

	)

486 
	#GL_BOOL
 0x8B56

	)

487 
	#GL_BOOL_VEC2
 0x8B57

	)

488 
	#GL_BOOL_VEC3
 0x8B58

	)

489 
	#GL_BOOL_VEC4
 0x8B59

	)

490 
	#GL_FLOAT_MAT2
 0x8B5A

	)

491 
	#GL_FLOAT_MAT3
 0x8B5B

	)

492 
	#GL_FLOAT_MAT4
 0x8B5C

	)

493 
	#GL_SAMPLER_1D
 0x8B5D

	)

494 
	#GL_SAMPLER_2D
 0x8B5E

	)

495 
	#GL_SAMPLER_3D
 0x8B5F

	)

496 
	#GL_SAMPLER_CUBE
 0x8B60

	)

497 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

498 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

499 
	#GL_DELETE_STATUS
 0x8B80

	)

500 
	#GL_COMPILE_STATUS
 0x8B81

	)

501 
	#GL_LINK_STATUS
 0x8B82

	)

502 
	#GL_VALIDATE_STATUS
 0x8B83

	)

503 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

504 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

505 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

506 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

507 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

508 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

509 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

510 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

511 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

512 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

513 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

514 
	#GL_LOWER_LEFT
 0x8CA1

	)

515 
	#GL_UPPER_LEFT
 0x8CA2

	)

516 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

517 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

518 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

521 #i‚de‡
GL_ARB_mu…ôextuª


522 
	#GL_TEXTURE0_ARB
 0x84C0

	)

523 
	#GL_TEXTURE1_ARB
 0x84C1

	)

524 
	#GL_TEXTURE2_ARB
 0x84C2

	)

525 
	#GL_TEXTURE3_ARB
 0x84C3

	)

526 
	#GL_TEXTURE4_ARB
 0x84C4

	)

527 
	#GL_TEXTURE5_ARB
 0x84C5

	)

528 
	#GL_TEXTURE6_ARB
 0x84C6

	)

529 
	#GL_TEXTURE7_ARB
 0x84C7

	)

530 
	#GL_TEXTURE8_ARB
 0x84C8

	)

531 
	#GL_TEXTURE9_ARB
 0x84C9

	)

532 
	#GL_TEXTURE10_ARB
 0x84CA

	)

533 
	#GL_TEXTURE11_ARB
 0x84CB

	)

534 
	#GL_TEXTURE12_ARB
 0x84CC

	)

535 
	#GL_TEXTURE13_ARB
 0x84CD

	)

536 
	#GL_TEXTURE14_ARB
 0x84CE

	)

537 
	#GL_TEXTURE15_ARB
 0x84CF

	)

538 
	#GL_TEXTURE16_ARB
 0x84D0

	)

539 
	#GL_TEXTURE17_ARB
 0x84D1

	)

540 
	#GL_TEXTURE18_ARB
 0x84D2

	)

541 
	#GL_TEXTURE19_ARB
 0x84D3

	)

542 
	#GL_TEXTURE20_ARB
 0x84D4

	)

543 
	#GL_TEXTURE21_ARB
 0x84D5

	)

544 
	#GL_TEXTURE22_ARB
 0x84D6

	)

545 
	#GL_TEXTURE23_ARB
 0x84D7

	)

546 
	#GL_TEXTURE24_ARB
 0x84D8

	)

547 
	#GL_TEXTURE25_ARB
 0x84D9

	)

548 
	#GL_TEXTURE26_ARB
 0x84DA

	)

549 
	#GL_TEXTURE27_ARB
 0x84DB

	)

550 
	#GL_TEXTURE28_ARB
 0x84DC

	)

551 
	#GL_TEXTURE29_ARB
 0x84DD

	)

552 
	#GL_TEXTURE30_ARB
 0x84DE

	)

553 
	#GL_TEXTURE31_ARB
 0x84DF

	)

554 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

555 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

556 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

559 #i‚de‡
GL_ARB_å™•o£_m©rix


560 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

561 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

562 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

563 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

566 #i‚de‡
GL_ARB_mu…ißm∂e


567 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

568 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

569 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

570 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

571 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

572 
	#GL_SAMPLES_ARB
 0x80A9

	)

573 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

574 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

575 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

578 #i‚de‡
GL_ARB_ãxtuª_ív_add


581 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


582 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

583 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

584 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

585 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

586 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

587 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

588 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

589 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

590 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

591 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

592 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

593 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

596 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


597 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

598 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

599 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

600 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

601 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

602 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

603 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

604 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

605 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

606 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

607 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

610 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


611 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

614 #i‚de‡
GL_ARB_poöt_∑ømëîs


615 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

616 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

617 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

618 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

621 #i‚de‡
GL_ARB_vîãx_bÀnd


622 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

623 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

624 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

625 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

626 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

627 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

628 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

629 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

630 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

631 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

632 
	#GL_MODELVIEW0_ARB
 0x1700

	)

633 
	#GL_MODELVIEW1_ARB
 0x850A

	)

634 
	#GL_MODELVIEW2_ARB
 0x8722

	)

635 
	#GL_MODELVIEW3_ARB
 0x8723

	)

636 
	#GL_MODELVIEW4_ARB
 0x8724

	)

637 
	#GL_MODELVIEW5_ARB
 0x8725

	)

638 
	#GL_MODELVIEW6_ARB
 0x8726

	)

639 
	#GL_MODELVIEW7_ARB
 0x8727

	)

640 
	#GL_MODELVIEW8_ARB
 0x8728

	)

641 
	#GL_MODELVIEW9_ARB
 0x8729

	)

642 
	#GL_MODELVIEW10_ARB
 0x872A

	)

643 
	#GL_MODELVIEW11_ARB
 0x872B

	)

644 
	#GL_MODELVIEW12_ARB
 0x872C

	)

645 
	#GL_MODELVIEW13_ARB
 0x872D

	)

646 
	#GL_MODELVIEW14_ARB
 0x872E

	)

647 
	#GL_MODELVIEW15_ARB
 0x872F

	)

648 
	#GL_MODELVIEW16_ARB
 0x8730

	)

649 
	#GL_MODELVIEW17_ARB
 0x8731

	)

650 
	#GL_MODELVIEW18_ARB
 0x8732

	)

651 
	#GL_MODELVIEW19_ARB
 0x8733

	)

652 
	#GL_MODELVIEW20_ARB
 0x8734

	)

653 
	#GL_MODELVIEW21_ARB
 0x8735

	)

654 
	#GL_MODELVIEW22_ARB
 0x8736

	)

655 
	#GL_MODELVIEW23_ARB
 0x8737

	)

656 
	#GL_MODELVIEW24_ARB
 0x8738

	)

657 
	#GL_MODELVIEW25_ARB
 0x8739

	)

658 
	#GL_MODELVIEW26_ARB
 0x873A

	)

659 
	#GL_MODELVIEW27_ARB
 0x873B

	)

660 
	#GL_MODELVIEW28_ARB
 0x873C

	)

661 
	#GL_MODELVIEW29_ARB
 0x873D

	)

662 
	#GL_MODELVIEW30_ARB
 0x873E

	)

663 
	#GL_MODELVIEW31_ARB
 0x873F

	)

666 #i‚de‡
GL_ARB_m©rix_∑Àâe


667 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

668 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

669 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

670 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

671 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

672 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

673 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

674 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

675 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

676 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

679 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


680 
	#GL_COMBINE_ARB
 0x8570

	)

681 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

682 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

683 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

684 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

685 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

686 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

687 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

688 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

689 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

690 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

691 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

692 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

693 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

694 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

695 
	#GL_RGB_SCALE_ARB
 0x8573

	)

696 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

697 
	#GL_INTERPOLATE_ARB
 0x8575

	)

698 
	#GL_SUBTRACT_ARB
 0x84E7

	)

699 
	#GL_CONSTANT_ARB
 0x8576

	)

700 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

701 
	#GL_PREVIOUS_ARB
 0x8578

	)

704 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


707 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


708 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

709 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

712 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


713 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

716 #i‚de‡
GL_ARB_dïth_ãxtuª


717 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

718 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

719 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

720 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

721 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

724 #i‚de‡
GL_ARB_shadow


725 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

726 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

727 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

730 #i‚de‡
GL_ARB_shadow_ambõ¡


731 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

734 #i‚de‡
GL_ARB_wödow_pos


737 #i‚de‡
GL_ARB_vîãx_¥ogøm


738 
	#GL_COLOR_SUM_ARB
 0x8458

	)

739 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

740 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

741 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

742 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

743 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

744 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

745 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

746 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

747 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

748 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

749 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

750 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

751 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

752 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

753 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

754 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

755 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

756 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

757 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

758 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

759 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

760 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

761 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

762 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

763 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

764 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

765 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

766 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

767 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

768 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

769 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

770 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

771 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

772 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

773 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

774 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

775 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

776 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

777 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

778 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

779 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

780 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

781 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

782 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

783 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

784 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

785 
	#GL_MATRIX0_ARB
 0x88C0

	)

786 
	#GL_MATRIX1_ARB
 0x88C1

	)

787 
	#GL_MATRIX2_ARB
 0x88C2

	)

788 
	#GL_MATRIX3_ARB
 0x88C3

	)

789 
	#GL_MATRIX4_ARB
 0x88C4

	)

790 
	#GL_MATRIX5_ARB
 0x88C5

	)

791 
	#GL_MATRIX6_ARB
 0x88C6

	)

792 
	#GL_MATRIX7_ARB
 0x88C7

	)

793 
	#GL_MATRIX8_ARB
 0x88C8

	)

794 
	#GL_MATRIX9_ARB
 0x88C9

	)

795 
	#GL_MATRIX10_ARB
 0x88CA

	)

796 
	#GL_MATRIX11_ARB
 0x88CB

	)

797 
	#GL_MATRIX12_ARB
 0x88CC

	)

798 
	#GL_MATRIX13_ARB
 0x88CD

	)

799 
	#GL_MATRIX14_ARB
 0x88CE

	)

800 
	#GL_MATRIX15_ARB
 0x88CF

	)

801 
	#GL_MATRIX16_ARB
 0x88D0

	)

802 
	#GL_MATRIX17_ARB
 0x88D1

	)

803 
	#GL_MATRIX18_ARB
 0x88D2

	)

804 
	#GL_MATRIX19_ARB
 0x88D3

	)

805 
	#GL_MATRIX20_ARB
 0x88D4

	)

806 
	#GL_MATRIX21_ARB
 0x88D5

	)

807 
	#GL_MATRIX22_ARB
 0x88D6

	)

808 
	#GL_MATRIX23_ARB
 0x88D7

	)

809 
	#GL_MATRIX24_ARB
 0x88D8

	)

810 
	#GL_MATRIX25_ARB
 0x88D9

	)

811 
	#GL_MATRIX26_ARB
 0x88DA

	)

812 
	#GL_MATRIX27_ARB
 0x88DB

	)

813 
	#GL_MATRIX28_ARB
 0x88DC

	)

814 
	#GL_MATRIX29_ARB
 0x88DD

	)

815 
	#GL_MATRIX30_ARB
 0x88DE

	)

816 
	#GL_MATRIX31_ARB
 0x88DF

	)

819 #i‚de‡
GL_ARB_‰agmít_¥ogøm


820 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

821 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

822 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

823 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

824 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

825 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

826 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

827 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

828 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

829 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

830 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

831 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

832 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

833 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

834 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

837 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


838 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

839 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

840 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

841 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

842 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

843 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

844 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

845 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

846 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

847 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

848 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

849 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

850 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

851 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

852 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

853 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

854 
	#GL_READ_ONLY_ARB
 0x88B8

	)

855 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

856 
	#GL_READ_WRITE_ARB
 0x88BA

	)

857 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

858 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

859 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

860 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

861 
	#GL_STREAM_READ_ARB
 0x88E1

	)

862 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

863 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

864 
	#GL_STATIC_READ_ARB
 0x88E5

	)

865 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

866 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

867 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

868 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

871 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


872 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

873 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

874 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

875 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

876 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

879 #i‚de‡
GL_ARB_shadî_obje˘s


880 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

881 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

882 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

883 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

884 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

885 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

886 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

887 
	#GL_INT_VEC2_ARB
 0x8B53

	)

888 
	#GL_INT_VEC3_ARB
 0x8B54

	)

889 
	#GL_INT_VEC4_ARB
 0x8B55

	)

890 
	#GL_BOOL_ARB
 0x8B56

	)

891 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

892 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

893 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

894 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

895 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

896 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

897 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

898 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

899 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

900 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

901 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

902 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

903 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

904 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

905 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

906 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

907 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

908 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

909 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

910 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

911 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

912 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

913 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

916 #i‚de‡
GL_ARB_vîãx_shadî


917 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

918 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

919 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

920 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

921 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

922 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

923 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

926 #i‚de‡
GL_ARB_‰agmít_shadî


927 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

928 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

929 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

932 #i‚de‡
GL_ARB_shadög_œnguage_100


933 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

936 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


939 #i‚de‡
GL_ARB_poöt_•rôe


940 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

941 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

944 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


947 #i‚de‡
GL_ARB_døw_buf„rs


948 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

949 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

950 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

951 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

952 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

953 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

954 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

955 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

956 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

957 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

958 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

959 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

960 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

961 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

962 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

963 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

964 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

967 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


968 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

969 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

970 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

971 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

974 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


975 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

976 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

977 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

978 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

979 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

982 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


983 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

986 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


987 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

988 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

989 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

990 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

991 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

992 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

993 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

994 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

995 
	#GL_RGBA32F_ARB
 0x8814

	)

996 
	#GL_RGB32F_ARB
 0x8815

	)

997 
	#GL_ALPHA32F_ARB
 0x8816

	)

998 
	#GL_INTENSITY32F_ARB
 0x8817

	)

999 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

1000 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

1001 
	#GL_RGBA16F_ARB
 0x881A

	)

1002 
	#GL_RGB16F_ARB
 0x881B

	)

1003 
	#GL_ALPHA16F_ARB
 0x881C

	)

1004 
	#GL_INTENSITY16F_ARB
 0x881D

	)

1005 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

1006 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

1009 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


1010 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

1011 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

1012 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

1013 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

1016 #i‚de‡
GL_EXT_abgr


1017 
	#GL_ABGR_EXT
 0x8000

	)

1020 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


1021 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

1022 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

1023 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

1024 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

1025 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

1028 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


1029 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

1030 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

1031 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

1034 #i‚de‡
GL_EXT_ãxtuª


1035 
	#GL_ALPHA4_EXT
 0x803B

	)

1036 
	#GL_ALPHA8_EXT
 0x803C

	)

1037 
	#GL_ALPHA12_EXT
 0x803D

	)

1038 
	#GL_ALPHA16_EXT
 0x803E

	)

1039 
	#GL_LUMINANCE4_EXT
 0x803F

	)

1040 
	#GL_LUMINANCE8_EXT
 0x8040

	)

1041 
	#GL_LUMINANCE12_EXT
 0x8041

	)

1042 
	#GL_LUMINANCE16_EXT
 0x8042

	)

1043 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

1044 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

1045 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

1046 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

1047 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

1048 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

1049 
	#GL_INTENSITY_EXT
 0x8049

	)

1050 
	#GL_INTENSITY4_EXT
 0x804A

	)

1051 
	#GL_INTENSITY8_EXT
 0x804B

	)

1052 
	#GL_INTENSITY12_EXT
 0x804C

	)

1053 
	#GL_INTENSITY16_EXT
 0x804D

	)

1054 
	#GL_RGB2_EXT
 0x804E

	)

1055 
	#GL_RGB4_EXT
 0x804F

	)

1056 
	#GL_RGB5_EXT
 0x8050

	)

1057 
	#GL_RGB8_EXT
 0x8051

	)

1058 
	#GL_RGB10_EXT
 0x8052

	)

1059 
	#GL_RGB12_EXT
 0x8053

	)

1060 
	#GL_RGB16_EXT
 0x8054

	)

1061 
	#GL_RGBA2_EXT
 0x8055

	)

1062 
	#GL_RGBA4_EXT
 0x8056

	)

1063 
	#GL_RGB5_A1_EXT
 0x8057

	)

1064 
	#GL_RGBA8_EXT
 0x8058

	)

1065 
	#GL_RGB10_A2_EXT
 0x8059

	)

1066 
	#GL_RGBA12_EXT
 0x805A

	)

1067 
	#GL_RGBA16_EXT
 0x805B

	)

1068 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

1069 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

1070 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

1071 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

1072 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

1073 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

1074 
	#GL_REPLACE_EXT
 0x8062

	)

1075 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

1076 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

1077 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

1080 #i‚de‡
GL_EXT_ãxtuª3D


1081 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

1082 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

1083 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

1084 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

1085 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

1086 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

1087 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

1088 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

1089 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

1092 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


1093 
	#GL_FILTER4_SGIS
 0x8146

	)

1094 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

1097 #i‚de‡
GL_EXT_subãxtuª


1100 #i‚de‡
GL_EXT_c›y_ãxtuª


1103 #i‚de‡
GL_EXT_hi°ogøm


1104 
	#GL_HISTOGRAM_EXT
 0x8024

	)

1105 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

1106 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

1107 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

1108 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

1109 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

1110 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

1111 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

1112 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

1113 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

1114 
	#GL_MINMAX_EXT
 0x802E

	)

1115 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

1116 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

1117 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

1120 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


1121 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

1122 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

1123 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

1124 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

1125 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

1126 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

1127 
	#GL_REDUCE_EXT
 0x8016

	)

1128 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

1129 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

1130 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

1131 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

1132 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

1133 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

1134 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

1135 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

1136 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

1137 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

1138 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

1139 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

1140 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

1143 #i‚de‡
GL_SGI_cﬁ‹_m©rix


1144 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

1145 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

1146 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

1147 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

1148 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

1149 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

1150 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

1151 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

1152 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

1153 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

1154 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

1157 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


1158 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

1159 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

1160 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

1161 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

1162 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

1163 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

1164 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

1165 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

1166 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

1167 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

1168 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

1169 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

1170 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

1171 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

1172 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

1173 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

1176 #i‚de‡
GL_SGIS_pixñ_ãxtuª


1177 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

1178 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

1179 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

1180 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

1183 #i‚de‡
GL_SGIX_pixñ_ãxtuª


1184 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

1185 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

1188 #i‚de‡
GL_SGIS_ãxtuª4D


1189 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

1190 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

1191 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

1192 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

1193 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

1194 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

1195 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

1196 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

1197 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

1198 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

1201 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


1202 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

1203 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

1206 #i‚de‡
GL_EXT_cmyka


1207 
	#GL_CMYK_EXT
 0x800C

	)

1208 
	#GL_CMYKA_EXT
 0x800D

	)

1209 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

1210 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

1213 #i‚de‡
GL_EXT_ãxtuª_obje˘


1214 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

1215 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

1216 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

1217 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

1218 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

1221 #i‚de‡
GL_SGIS_dëaû_ãxtuª


1222 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

1223 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

1224 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

1225 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

1226 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

1227 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

1228 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

1229 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

1232 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


1233 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

1234 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

1235 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

1236 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

1239 #i‚de‡
GL_EXT_∑cked_pixñs


1240 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

1241 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

1242 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

1243 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

1244 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

1247 #i‚de‡
GL_SGIS_ãxtuª_lod


1248 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

1249 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

1250 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

1251 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

1254 #i‚de‡
GL_SGIS_mu…ißm∂e


1255 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

1256 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

1257 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

1258 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

1259 
	#GL_1PASS_SGIS
 0x80A1

	)

1260 
	#GL_2PASS_0_SGIS
 0x80A2

	)

1261 
	#GL_2PASS_1_SGIS
 0x80A3

	)

1262 
	#GL_4PASS_0_SGIS
 0x80A4

	)

1263 
	#GL_4PASS_1_SGIS
 0x80A5

	)

1264 
	#GL_4PASS_2_SGIS
 0x80A6

	)

1265 
	#GL_4PASS_3_SGIS
 0x80A7

	)

1266 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

1267 
	#GL_SAMPLES_SGIS
 0x80A9

	)

1268 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

1269 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

1270 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

1273 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


1274 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

1277 #i‚de‡
GL_EXT_vîãx_¨øy


1278 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

1279 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

1280 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

1281 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

1282 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

1283 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

1284 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

1285 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

1286 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

1287 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

1288 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

1289 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

1290 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

1291 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

1292 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

1293 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

1294 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

1295 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

1296 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

1297 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

1298 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

1299 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

1300 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

1301 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

1302 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

1303 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

1304 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

1305 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

1306 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

1307 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

1308 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

1309 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

1312 #i‚de‡
GL_EXT_misc_©åibuã


1315 #i‚de‡
GL_SGIS_gíî©e_mùm≠


1316 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

1317 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

1320 #i‚de‡
GL_SGIX_˛ùm≠


1321 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

1322 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

1323 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

1324 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

1325 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

1326 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

1327 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

1328 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

1329 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

1330 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

1331 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

1332 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

1335 #i‚de‡
GL_SGIX_shadow


1336 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

1337 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

1338 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

1339 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

1342 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


1343 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

1346 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


1347 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

1350 #i‚de‡
GL_EXT_bÀnd_mömax


1351 
	#GL_FUNC_ADD_EXT
 0x8006

	)

1352 
	#GL_MIN_EXT
 0x8007

	)

1353 
	#GL_MAX_EXT
 0x8008

	)

1354 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

1357 #i‚de‡
GL_EXT_bÀnd_subåa˘


1358 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

1359 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

1362 #i‚de‡
GL_EXT_bÀnd_logic_›


1365 #i‚de‡
GL_SGIX_öãæa˚


1366 
	#GL_INTERLACE_SGIX
 0x8094

	)

1369 #i‚de‡
GL_SGIX_pixñ_tûes


1370 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

1371 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

1372 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

1373 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

1374 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

1375 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

1376 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

1377 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

1380 #i‚de‡
GL_SGIS_ãxtuª_£À˘


1381 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

1382 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

1383 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

1384 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

1385 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

1386 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

1387 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

1388 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

1389 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

1390 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

1391 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

1392 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

1393 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

1394 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

1395 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

1396 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

1397 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

1398 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

1399 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

1400 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

1401 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

1402 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

1405 #i‚de‡
GL_SGIX_•rôe


1406 
	#GL_SPRITE_SGIX
 0x8148

	)

1407 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

1408 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

1409 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

1410 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

1411 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

1412 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

1415 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


1416 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

1419 #i‚de‡
GL_EXT_poöt_∑ømëîs


1420 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

1421 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

1422 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

1423 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

1426 #i‚de‡
GL_SGIS_poöt_∑ømëîs


1427 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

1428 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

1429 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

1430 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

1433 #i‚de‡
GL_SGIX_ö°rumíts


1434 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

1435 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

1438 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


1439 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

1440 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

1441 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

1442 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

1445 #i‚de‡
GL_SGIX_‰amezoom


1446 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

1447 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

1448 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

1451 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


1454 #i‚de‡
GL_FfdMaskSGIX


1455 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

1456 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

1459 #i‚de‡
GL_SGIX_pﬁynomül_ffd


1460 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

1461 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

1462 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

1463 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

1466 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


1467 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

1468 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

1471 #i‚de‡
GL_SGIX_Êush_ø°î


1474 #i‚de‡
GL_SGIX_dïth_ãxtuª


1475 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

1476 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

1477 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

1480 #i‚de‡
GL_SGIS_fog_fun˘i⁄


1481 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

1482 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

1483 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

1486 #i‚de‡
GL_SGIX_fog_off£t


1487 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

1488 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

1491 #i‚de‡
GL_HP_image_å™sf‹m


1492 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

1493 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

1494 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

1495 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

1496 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

1497 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

1498 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

1499 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

1500 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

1501 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

1502 
	#GL_CUBIC_HP
 0x815F

	)

1503 
	#GL_AVERAGE_HP
 0x8160

	)

1504 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

1505 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

1506 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

1509 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


1510 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

1511 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

1512 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

1513 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

1516 #i‚de‡
GL_INGR_∑Àâe_buf„r


1519 #i‚de‡
GL_SGIX_ãxtuª_add_ív


1520 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

1523 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


1526 #i‚de‡
GL_PGI_vîãx_höts


1527 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

1528 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

1529 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

1530 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

1531 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

1532 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

1533 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

1534 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

1535 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

1536 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

1537 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

1538 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

1539 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

1540 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

1541 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

1542 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

1543 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

1544 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

1545 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

1546 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

1547 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

1548 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

1551 #i‚de‡
GL_PGI_misc_höts


1552 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

1553 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

1554 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

1555 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

1556 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

1557 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

1558 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

1559 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

1560 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

1561 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

1562 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

1563 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

1564 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

1565 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

1566 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

1567 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

1568 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

1569 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

1570 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

1571 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

1574 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


1575 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

1576 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

1577 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

1578 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

1579 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

1580 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

1581 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

1584 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


1585 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

1588 #i‚de‡
GL_SGIX_li°_¥i‹ôy


1589 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

1592 #i‚de‡
GL_SGIX_ú_ö°rumít1


1593 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

1596 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


1597 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

1600 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


1601 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

1602 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

1603 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

1606 #i‚de‡
GL_SGIX_shadow_ambõ¡


1607 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

1610 #i‚de‡
GL_EXT_ödex_ãxtuª


1613 #i‚de‡
GL_EXT_ödex_m©îül


1614 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

1615 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

1616 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

1619 #i‚de‡
GL_EXT_ödex_func


1620 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

1621 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

1622 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

1625 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


1626 
	#GL_IUI_V2F_EXT
 0x81AD

	)

1627 
	#GL_IUI_V3F_EXT
 0x81AE

	)

1628 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

1629 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

1630 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

1631 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

1632 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

1633 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

1636 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


1637 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

1638 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

1641 #i‚de‡
GL_EXT_cuŒ_vîãx


1642 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

1643 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

1644 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

1647 #i‚de‡
GL_SGIX_y¸cb


1648 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

1649 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

1652 #i‚de‡
GL_SGIX_‰agmít_lightög


1653 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

1654 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

1655 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

1656 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

1657 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

1658 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

1659 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

1660 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

1661 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

1662 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

1663 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

1664 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

1665 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

1666 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

1667 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

1668 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

1669 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

1670 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

1671 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

1672 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

1675 #i‚de‡
GL_IBM_ø°îpos_˛ù


1676 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

1679 #i‚de‡
GL_HP_ãxtuª_lightög


1680 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

1681 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

1682 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

1685 #i‚de‡
GL_EXT_døw_ønge_ñemíts


1686 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

1687 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

1690 #i‚de‡
GL_WIN_ph⁄g_shadög


1691 
	#GL_PHONG_WIN
 0x80EA

	)

1692 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

1695 #i‚de‡
GL_WIN_•ecuœr_fog


1696 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

1699 #i‚de‡
GL_EXT_light_ãxtuª


1700 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

1701 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

1702 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

1703 
	#GL_ATTENUATION_EXT
 0x834D

	)

1704 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

1705 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

1706 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

1707 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

1708 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

1712 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


1713 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

1714 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

1717 #i‚de‡
GL_SGIX_im∑˘_pixñ_ãxtuª


1718 
	#GL_PIXEL_TEX_GEN_Q_CEILING_SGIX
 0x8184

	)

1719 
	#GL_PIXEL_TEX_GEN_Q_ROUND_SGIX
 0x8185

	)

1720 
	#GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX
 0x8186

	)

1721 
	#GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX
 0x8187

	)

1722 
	#GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX
 0x8188

	)

1723 
	#GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX
 0x8189

	)

1724 
	#GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX
 0x818A

	)

1727 #i‚de‡
GL_EXT_bgø


1728 
	#GL_BGR_EXT
 0x80E0

	)

1729 
	#GL_BGRA_EXT
 0x80E1

	)

1732 #i‚de‡
GL_SGIX_async


1733 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

1736 #i‚de‡
GL_SGIX_async_pixñ


1737 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

1738 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

1739 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

1740 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

1741 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

1742 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

1745 #i‚de‡
GL_SGIX_async_hi°ogøm


1746 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

1747 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

1750 #i‚de‡
GL_INTEL_ãxtuª_sciss‹


1753 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


1754 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

1755 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

1756 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

1757 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

1758 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

1761 #i‚de‡
GL_HP_oc˛usi⁄_ã°


1762 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

1763 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

1766 #i‚de‡
GL_EXT_pixñ_å™sf‹m


1767 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

1768 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

1769 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

1770 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

1771 
	#GL_CUBIC_EXT
 0x8334

	)

1772 
	#GL_AVERAGE_EXT
 0x8335

	)

1773 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

1774 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

1775 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

1778 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


1781 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


1782 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

1785 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


1786 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

1787 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

1788 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

1791 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


1792 
	#GL_COLOR_SUM_EXT
 0x8458

	)

1793 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

1794 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

1795 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

1796 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

1797 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

1798 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

1801 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


1802 
	#GL_PERTURB_EXT
 0x85AE

	)

1803 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

1806 #i‚de‡
GL_EXT_mu…i_døw_¨øys


1809 #i‚de‡
GL_EXT_fog_co‹d


1810 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

1811 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

1812 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

1813 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

1814 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

1815 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

1816 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

1817 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

1820 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


1821 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

1822 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

1825 #i‚de‡
GL_EXT_co‹dö©e_‰ame


1826 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

1827 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

1828 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

1829 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

1830 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

1831 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

1832 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

1833 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

1834 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

1835 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

1836 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

1837 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

1838 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

1839 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

1842 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


1843 
	#GL_COMBINE_EXT
 0x8570

	)

1844 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

1845 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

1846 
	#GL_RGB_SCALE_EXT
 0x8573

	)

1847 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

1848 
	#GL_INTERPOLATE_EXT
 0x8575

	)

1849 
	#GL_CONSTANT_EXT
 0x8576

	)

1850 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

1851 
	#GL_PREVIOUS_EXT
 0x8578

	)

1852 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

1853 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

1854 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

1855 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

1856 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

1857 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

1858 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

1859 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

1860 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

1861 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

1862 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

1863 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

1866 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


1867 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

1870 #i‚de‡
GL_APPLE_å™sf‹m_höt


1871 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

1874 #i‚de‡
GL_SGIX_fog_sˇÀ


1875 
	#GL_FOG_SCALE_SGIX
 0x81FC

	)

1876 
	#GL_FOG_SCALE_VALUE_SGIX
 0x81FD

	)

1879 #i‚de‡
GL_SUNX_c⁄°™t_d©a


1880 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

1881 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

1884 #i‚de‡
GL_SUN_globÆ_Æpha


1885 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

1886 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

1889 #i‚de‡
GL_SUN_åüngÀ_li°


1890 
	#GL_RESTART_SUN
 0x0001

	)

1891 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

1892 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

1893 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

1894 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

1895 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

1896 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

1897 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

1898 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

1899 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

1900 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

1901 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

1902 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

1903 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

1904 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

1905 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

1906 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

1909 #i‚de‡
GL_SUN_vîãx


1912 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


1913 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

1914 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

1915 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

1916 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

1919 #i‚de‡
GL_INGR_cﬁ‹_˛amp


1920 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

1921 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

1922 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

1923 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

1924 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

1925 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

1926 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

1927 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

1930 #i‚de‡
GL_INGR_öãæa˚_ªad


1931 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

1934 #i‚de‡
GL_EXT_°ícû_wøp


1935 
	#GL_INCR_WRAP_EXT
 0x8507

	)

1936 
	#GL_DECR_WRAP_EXT
 0x8508

	)

1939 #i‚de‡
GL_EXT_422_pixñs


1940 
	#GL_422_EXT
 0x80CC

	)

1941 
	#GL_422_REV_EXT
 0x80CD

	)

1942 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

1943 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

1946 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


1947 
	#GL_NORMAL_MAP_NV
 0x8511

	)

1948 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

1951 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


1952 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

1953 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

1954 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

1955 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

1956 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

1957 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

1958 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

1959 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

1960 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

1961 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

1962 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

1963 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

1966 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


1967 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

1970 #i‚de‡
GL_EXT_ãxtuª_ív_add


1973 #i‚de‡
GL_EXT_ãxtuª_lod_büs


1974 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

1975 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

1976 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

1979 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


1980 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

1981 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

1984 #i‚de‡
GL_EXT_vîãx_weightög


1985 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 
GL_MODELVIEW_STACK_DEPTH


	)

1986 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

1987 
	#GL_MODELVIEW0_MATRIX_EXT
 
GL_MODELVIEW_MATRIX


	)

1988 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

1989 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

1990 
	#GL_MODELVIEW0_EXT
 
GL_MODELVIEW


	)

1991 
	#GL_MODELVIEW1_EXT
 0x850A

	)

1992 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

1993 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

1994 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

1995 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

1996 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

1997 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

2000 #i‚de‡
GL_NV_light_max_exp⁄ít


2001 
	#GL_MAX_SHININESS_NV
 0x8504

	)

2002 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

2005 #i‚de‡
GL_NV_vîãx_¨øy_ønge


2006 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

2007 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

2008 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

2009 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

2010 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

2013 #i‚de‡
GL_NV_ªgi°î_comböîs


2014 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

2015 
	#GL_VARIABLE_A_NV
 0x8523

	)

2016 
	#GL_VARIABLE_B_NV
 0x8524

	)

2017 
	#GL_VARIABLE_C_NV
 0x8525

	)

2018 
	#GL_VARIABLE_D_NV
 0x8526

	)

2019 
	#GL_VARIABLE_E_NV
 0x8527

	)

2020 
	#GL_VARIABLE_F_NV
 0x8528

	)

2021 
	#GL_VARIABLE_G_NV
 0x8529

	)

2022 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

2023 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

2024 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

2025 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

2026 
	#GL_SPARE0_NV
 0x852E

	)

2027 
	#GL_SPARE1_NV
 0x852F

	)

2028 
	#GL_DISCARD_NV
 0x8530

	)

2029 
	#GL_E_TIMES_F_NV
 0x8531

	)

2030 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

2031 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

2032 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

2033 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

2034 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

2035 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

2036 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

2037 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

2038 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

2039 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

2040 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

2041 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

2042 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

2043 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

2044 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

2045 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

2046 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

2047 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

2048 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

2049 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

2050 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

2051 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

2052 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

2053 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

2054 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

2055 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

2056 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

2057 
	#GL_COMBINER0_NV
 0x8550

	)

2058 
	#GL_COMBINER1_NV
 0x8551

	)

2059 
	#GL_COMBINER2_NV
 0x8552

	)

2060 
	#GL_COMBINER3_NV
 0x8553

	)

2061 
	#GL_COMBINER4_NV
 0x8554

	)

2062 
	#GL_COMBINER5_NV
 0x8555

	)

2063 
	#GL_COMBINER6_NV
 0x8556

	)

2064 
	#GL_COMBINER7_NV
 0x8557

	)

2072 #i‚de‡
GL_NV_fog_di°™˚


2073 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

2074 
	#GL_EYE_RADIAL_NV
 0x855B

	)

2075 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

2079 #i‚de‡
GL_NV_ãxgí_emboss


2080 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

2081 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

2082 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

2085 #i‚de‡
GL_NV_bÀnd_squ¨e


2088 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


2089 
	#GL_COMBINE4_NV
 0x8503

	)

2090 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

2091 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

2092 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

2093 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

2096 #i‚de‡
GL_MESA_ªsize_buf„rs


2099 #i‚de‡
GL_MESA_wödow_pos


2102 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


2103 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

2104 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

2105 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

2106 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

2109 #i‚de‡
GL_IBM_cuŒ_vîãx


2110 
	#GL_CULL_VERTEX_IBM
 103050

	)

2113 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


2116 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


2117 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

2118 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

2119 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

2120 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

2121 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

2122 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

2123 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

2124 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

2125 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

2126 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

2127 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

2128 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

2129 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

2130 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

2131 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

2132 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

2135 #i‚de‡
GL_SGIX_subßm∂e


2136 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

2137 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

2138 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

2139 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

2140 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

2143 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


2146 #i‚de‡
GL_SGIX_y¸cba


2147 
	#GL_YCRCB_SGIX
 0x8318

	)

2148 
	#GL_YCRCBA_SGIX
 0x8319

	)

2151 #i‚de‡
GL_SGI_dïth_∑ss_ö°rumít


2152 
	#GL_DEPTH_PASS_INSTRUMENT_SGIX
 0x8310

	)

2153 
	#GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX
 0x8311

	)

2154 
	#GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX
 0x8312

	)

2157 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


2158 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

2159 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

2162 #i‚de‡
GL_3DFX_mu…ißm∂e


2163 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

2164 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

2165 
	#GL_SAMPLES_3DFX
 0x86B4

	)

2166 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

2169 #i‚de‡
GL_3DFX_tbuf„r


2172 #i‚de‡
GL_EXT_mu…ißm∂e


2173 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

2174 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

2175 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

2176 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

2177 
	#GL_1PASS_EXT
 0x80A1

	)

2178 
	#GL_2PASS_0_EXT
 0x80A2

	)

2179 
	#GL_2PASS_1_EXT
 0x80A3

	)

2180 
	#GL_4PASS_0_EXT
 0x80A4

	)

2181 
	#GL_4PASS_1_EXT
 0x80A5

	)

2182 
	#GL_4PASS_2_EXT
 0x80A6

	)

2183 
	#GL_4PASS_3_EXT
 0x80A7

	)

2184 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

2185 
	#GL_SAMPLES_EXT
 0x80A9

	)

2186 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

2187 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

2188 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

2189 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

2192 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


2193 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

2194 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

2197 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


2198 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

2201 #i‚de‡
GL_SGIX_ªßm∂e


2202 
	#GL_PACK_RESAMPLE_SGIX
 0x842C

	)

2203 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842D

	)

2204 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x842E

	)

2205 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x842F

	)

2206 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

2209 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


2210 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

2211 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

2212 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

2213 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

2214 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

2215 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

2216 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

2217 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

2220 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


2221 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

2224 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


2225 
	#GL_DOT3_RGB_EXT
 0x8740

	)

2226 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

2229 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


2230 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

2231 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

2234 #i‚de‡
GL_NV_„n˚


2235 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

2236 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

2237 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

2240 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


2241 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

2244 #i‚de‡
GL_NV_evÆu©‹s


2245 
	#GL_EVAL_2D_NV
 0x86C0

	)

2246 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

2247 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

2248 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

2249 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

2250 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

2251 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

2252 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

2253 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

2254 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

2255 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

2256 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

2257 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

2258 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

2259 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

2260 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

2261 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

2262 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

2263 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

2264 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

2265 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

2266 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

2267 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

2268 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

2271 #i‚de‡
GL_NV_∑cked_dïth_°ícû


2272 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

2273 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

2276 #i‚de‡
GL_NV_ªgi°î_comböîs2


2277 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

2280 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


2283 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


2284 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

2285 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

2286 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

2287 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

2290 #i‚de‡
GL_NV_ãxtuª_shadî


2291 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

2292 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

2293 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

2294 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

2295 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

2296 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

2297 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

2298 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

2299 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

2300 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

2301 
	#GL_CULL_MODES_NV
 0x86E0

	)

2302 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

2303 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

2304 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

2305 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 
GL_OFFSET_TEXTURE_MATRIX_NV


	)

2306 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 
GL_OFFSET_TEXTURE_SCALE_NV


	)

2307 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 
GL_OFFSET_TEXTURE_BIAS_NV


	)

2308 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

2309 
	#GL_CONST_EYE_NV
 0x86E5

	)

2310 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

2311 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

2312 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

2313 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

2314 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

2315 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

2316 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

2317 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

2318 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

2319 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

2320 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

2321 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

2322 
	#GL_HILO_NV
 0x86F4

	)

2323 
	#GL_DSDT_NV
 0x86F5

	)

2324 
	#GL_DSDT_MAG_NV
 0x86F6

	)

2325 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

2326 
	#GL_HILO16_NV
 0x86F8

	)

2327 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

2328 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

2329 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

2330 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

2331 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

2332 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

2333 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

2334 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

2335 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

2336 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

2337 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

2338 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

2339 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

2340 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

2341 
	#GL_DSDT8_NV
 0x8709

	)

2342 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

2343 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

2344 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

2345 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

2346 
	#GL_HI_SCALE_NV
 0x870E

	)

2347 
	#GL_LO_SCALE_NV
 0x870F

	)

2348 
	#GL_DS_SCALE_NV
 0x8710

	)

2349 
	#GL_DT_SCALE_NV
 0x8711

	)

2350 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

2351 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

2352 
	#GL_HI_BIAS_NV
 0x8714

	)

2353 
	#GL_LO_BIAS_NV
 0x8715

	)

2354 
	#GL_DS_BIAS_NV
 0x8716

	)

2355 
	#GL_DT_BIAS_NV
 0x8717

	)

2356 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

2357 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

2358 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

2359 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

2360 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

2361 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

2362 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

2363 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

2366 #i‚de‡
GL_NV_ãxtuª_shadî2


2367 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

2370 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


2371 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

2374 #i‚de‡
GL_NV_vîãx_¥ogøm


2375 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

2376 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

2377 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

2378 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

2379 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

2380 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

2381 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

2382 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

2383 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

2384 
	#GL_IDENTITY_NV
 0x862A

	)

2385 
	#GL_INVERSE_NV
 0x862B

	)

2386 
	#GL_TRANSPOSE_NV
 0x862C

	)

2387 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

2388 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

2389 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

2390 
	#GL_MATRIX0_NV
 0x8630

	)

2391 
	#GL_MATRIX1_NV
 0x8631

	)

2392 
	#GL_MATRIX2_NV
 0x8632

	)

2393 
	#GL_MATRIX3_NV
 0x8633

	)

2394 
	#GL_MATRIX4_NV
 0x8634

	)

2395 
	#GL_MATRIX5_NV
 0x8635

	)

2396 
	#GL_MATRIX6_NV
 0x8636

	)

2397 
	#GL_MATRIX7_NV
 0x8637

	)

2398 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

2399 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

2400 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

2401 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

2402 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

2403 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

2404 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

2405 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

2406 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

2407 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

2408 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

2409 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

2410 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

2411 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

2412 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

2413 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

2414 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

2415 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

2416 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

2417 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

2418 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

2419 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

2420 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

2421 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

2422 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

2423 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

2424 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

2425 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

2426 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

2427 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

2428 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

2429 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

2430 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

2431 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

2432 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

2433 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

2434 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

2435 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

2436 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

2437 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

2438 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

2439 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

2440 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

2441 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

2442 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

2443 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

2444 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

2445 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

2446 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

2447 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

2448 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

2449 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

2450 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

2451 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

2452 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

2453 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

2454 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

2455 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

2456 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

2457 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

2460 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


2461 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

2462 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

2463 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

2466 #i‚de‡
GL_SGIX_sˇÀbüs_höt


2467 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

2470 #i‚de‡
GL_OML_öãæa˚


2471 
	#GL_INTERLACE_OML
 0x8980

	)

2472 
	#GL_INTERLACE_READ_OML
 0x8981

	)

2475 #i‚de‡
GL_OML_subßm∂e


2476 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

2477 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

2480 #i‚de‡
GL_OML_ªßm∂e


2481 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

2482 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

2483 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

2484 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

2485 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

2486 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

2489 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


2490 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

2491 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

2494 #i‚de‡
GL_ATI_ívm≠_bumpm≠


2495 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

2496 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

2497 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

2498 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

2499 
	#GL_DUDV_ATI
 0x8779

	)

2500 
	#GL_DU8DV8_ATI
 0x877A

	)

2501 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

2502 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

2505 #i‚de‡
GL_ATI_‰agmít_shadî


2506 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

2507 
	#GL_REG_0_ATI
 0x8921

	)

2508 
	#GL_REG_1_ATI
 0x8922

	)

2509 
	#GL_REG_2_ATI
 0x8923

	)

2510 
	#GL_REG_3_ATI
 0x8924

	)

2511 
	#GL_REG_4_ATI
 0x8925

	)

2512 
	#GL_REG_5_ATI
 0x8926

	)

2513 
	#GL_REG_6_ATI
 0x8927

	)

2514 
	#GL_REG_7_ATI
 0x8928

	)

2515 
	#GL_REG_8_ATI
 0x8929

	)

2516 
	#GL_REG_9_ATI
 0x892A

	)

2517 
	#GL_REG_10_ATI
 0x892B

	)

2518 
	#GL_REG_11_ATI
 0x892C

	)

2519 
	#GL_REG_12_ATI
 0x892D

	)

2520 
	#GL_REG_13_ATI
 0x892E

	)

2521 
	#GL_REG_14_ATI
 0x892F

	)

2522 
	#GL_REG_15_ATI
 0x8930

	)

2523 
	#GL_REG_16_ATI
 0x8931

	)

2524 
	#GL_REG_17_ATI
 0x8932

	)

2525 
	#GL_REG_18_ATI
 0x8933

	)

2526 
	#GL_REG_19_ATI
 0x8934

	)

2527 
	#GL_REG_20_ATI
 0x8935

	)

2528 
	#GL_REG_21_ATI
 0x8936

	)

2529 
	#GL_REG_22_ATI
 0x8937

	)

2530 
	#GL_REG_23_ATI
 0x8938

	)

2531 
	#GL_REG_24_ATI
 0x8939

	)

2532 
	#GL_REG_25_ATI
 0x893A

	)

2533 
	#GL_REG_26_ATI
 0x893B

	)

2534 
	#GL_REG_27_ATI
 0x893C

	)

2535 
	#GL_REG_28_ATI
 0x893D

	)

2536 
	#GL_REG_29_ATI
 0x893E

	)

2537 
	#GL_REG_30_ATI
 0x893F

	)

2538 
	#GL_REG_31_ATI
 0x8940

	)

2539 
	#GL_CON_0_ATI
 0x8941

	)

2540 
	#GL_CON_1_ATI
 0x8942

	)

2541 
	#GL_CON_2_ATI
 0x8943

	)

2542 
	#GL_CON_3_ATI
 0x8944

	)

2543 
	#GL_CON_4_ATI
 0x8945

	)

2544 
	#GL_CON_5_ATI
 0x8946

	)

2545 
	#GL_CON_6_ATI
 0x8947

	)

2546 
	#GL_CON_7_ATI
 0x8948

	)

2547 
	#GL_CON_8_ATI
 0x8949

	)

2548 
	#GL_CON_9_ATI
 0x894A

	)

2549 
	#GL_CON_10_ATI
 0x894B

	)

2550 
	#GL_CON_11_ATI
 0x894C

	)

2551 
	#GL_CON_12_ATI
 0x894D

	)

2552 
	#GL_CON_13_ATI
 0x894E

	)

2553 
	#GL_CON_14_ATI
 0x894F

	)

2554 
	#GL_CON_15_ATI
 0x8950

	)

2555 
	#GL_CON_16_ATI
 0x8951

	)

2556 
	#GL_CON_17_ATI
 0x8952

	)

2557 
	#GL_CON_18_ATI
 0x8953

	)

2558 
	#GL_CON_19_ATI
 0x8954

	)

2559 
	#GL_CON_20_ATI
 0x8955

	)

2560 
	#GL_CON_21_ATI
 0x8956

	)

2561 
	#GL_CON_22_ATI
 0x8957

	)

2562 
	#GL_CON_23_ATI
 0x8958

	)

2563 
	#GL_CON_24_ATI
 0x8959

	)

2564 
	#GL_CON_25_ATI
 0x895A

	)

2565 
	#GL_CON_26_ATI
 0x895B

	)

2566 
	#GL_CON_27_ATI
 0x895C

	)

2567 
	#GL_CON_28_ATI
 0x895D

	)

2568 
	#GL_CON_29_ATI
 0x895E

	)

2569 
	#GL_CON_30_ATI
 0x895F

	)

2570 
	#GL_CON_31_ATI
 0x8960

	)

2571 
	#GL_MOV_ATI
 0x8961

	)

2572 
	#GL_ADD_ATI
 0x8963

	)

2573 
	#GL_MUL_ATI
 0x8964

	)

2574 
	#GL_SUB_ATI
 0x8965

	)

2575 
	#GL_DOT3_ATI
 0x8966

	)

2576 
	#GL_DOT4_ATI
 0x8967

	)

2577 
	#GL_MAD_ATI
 0x8968

	)

2578 
	#GL_LERP_ATI
 0x8969

	)

2579 
	#GL_CND_ATI
 0x896A

	)

2580 
	#GL_CND0_ATI
 0x896B

	)

2581 
	#GL_DOT2_ADD_ATI
 0x896C

	)

2582 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

2583 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

2584 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

2585 
	#GL_NUM_PASSES_ATI
 0x8970

	)

2586 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

2587 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

2588 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

2589 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

2590 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

2591 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

2592 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

2593 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

2594 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

2595 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

2596 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

2597 
	#GL_RED_BIT_ATI
 0x00000001

	)

2598 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

2599 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

2600 
	#GL_2X_BIT_ATI
 0x00000001

	)

2601 
	#GL_4X_BIT_ATI
 0x00000002

	)

2602 
	#GL_8X_BIT_ATI
 0x00000004

	)

2603 
	#GL_HALF_BIT_ATI
 0x00000008

	)

2604 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

2605 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

2606 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

2607 
	#GL_COMP_BIT_ATI
 0x00000002

	)

2608 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

2609 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

2612 #i‚de‡
GL_ATI_≤_åüngÀs


2613 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

2614 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

2615 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

2616 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

2617 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

2618 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

2619 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

2620 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

2621 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

2624 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


2625 
	#GL_STATIC_ATI
 0x8760

	)

2626 
	#GL_DYNAMIC_ATI
 0x8761

	)

2627 
	#GL_PRESERVE_ATI
 0x8762

	)

2628 
	#GL_DISCARD_ATI
 0x8763

	)

2629 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

2630 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

2631 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

2632 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

2635 #i‚de‡
GL_EXT_vîãx_shadî


2636 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

2637 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

2638 
	#GL_OP_INDEX_EXT
 0x8782

	)

2639 
	#GL_OP_NEGATE_EXT
 0x8783

	)

2640 
	#GL_OP_DOT3_EXT
 0x8784

	)

2641 
	#GL_OP_DOT4_EXT
 0x8785

	)

2642 
	#GL_OP_MUL_EXT
 0x8786

	)

2643 
	#GL_OP_ADD_EXT
 0x8787

	)

2644 
	#GL_OP_MADD_EXT
 0x8788

	)

2645 
	#GL_OP_FRAC_EXT
 0x8789

	)

2646 
	#GL_OP_MAX_EXT
 0x878A

	)

2647 
	#GL_OP_MIN_EXT
 0x878B

	)

2648 
	#GL_OP_SET_GE_EXT
 0x878C

	)

2649 
	#GL_OP_SET_LT_EXT
 0x878D

	)

2650 
	#GL_OP_CLAMP_EXT
 0x878E

	)

2651 
	#GL_OP_FLOOR_EXT
 0x878F

	)

2652 
	#GL_OP_ROUND_EXT
 0x8790

	)

2653 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

2654 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

2655 
	#GL_OP_POWER_EXT
 0x8793

	)

2656 
	#GL_OP_RECIP_EXT
 0x8794

	)

2657 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

2658 
	#GL_OP_SUB_EXT
 0x8796

	)

2659 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

2660 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

2661 
	#GL_OP_MOV_EXT
 0x8799

	)

2662 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

2663 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

2664 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

2665 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

2666 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

2667 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

2668 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

2669 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

2670 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

2671 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

2672 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

2673 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

2674 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

2675 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

2676 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

2677 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

2678 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

2679 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

2680 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

2681 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

2682 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

2683 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

2684 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

2685 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

2686 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

2687 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

2688 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

2689 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

2690 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

2691 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

2692 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

2693 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

2694 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

2695 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

2696 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

2697 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

2698 
	#GL_SCALAR_EXT
 0x87BE

	)

2699 
	#GL_VECTOR_EXT
 0x87BF

	)

2700 
	#GL_MATRIX_EXT
 0x87C0

	)

2701 
	#GL_VARIANT_EXT
 0x87C1

	)

2702 
	#GL_INVARIANT_EXT
 0x87C2

	)

2703 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

2704 
	#GL_LOCAL_EXT
 0x87C4

	)

2705 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

2706 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

2707 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

2708 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

2709 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

2710 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

2711 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

2712 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

2713 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

2714 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

2715 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

2716 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

2717 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

2718 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

2719 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

2720 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

2721 
	#GL_X_EXT
 0x87D5

	)

2722 
	#GL_Y_EXT
 0x87D6

	)

2723 
	#GL_Z_EXT
 0x87D7

	)

2724 
	#GL_W_EXT
 0x87D8

	)

2725 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

2726 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

2727 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

2728 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

2729 
	#GL_ZERO_EXT
 0x87DD

	)

2730 
	#GL_ONE_EXT
 0x87DE

	)

2731 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

2732 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

2733 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

2734 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

2735 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

2736 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

2737 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

2738 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

2739 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

2740 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

2741 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

2742 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

2743 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

2744 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

2745 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

2748 #i‚de‡
GL_ATI_vîãx_°ªams


2749 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

2750 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

2751 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

2752 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

2753 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

2754 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

2755 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

2756 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

2757 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

2758 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

2761 #i‚de‡
GL_ATI_ñemít_¨øy


2762 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

2763 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

2764 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

2767 #i‚de‡
GL_SUN_mesh_¨øy


2768 
	#GL_QUAD_MESH_SUN
 0x8614

	)

2769 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

2772 #i‚de‡
GL_SUN_¶i˚_accum


2773 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

2776 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


2777 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

2780 #i‚de‡
GL_NV_dïth_˛amp


2781 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

2784 #i‚de‡
GL_NV_oc˛usi⁄_quîy


2785 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

2786 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

2787 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

2788 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

2791 #i‚de‡
GL_NV_poöt_•rôe


2792 
	#GL_POINT_SPRITE_NV
 0x8861

	)

2793 
	#GL_COORD_REPLACE_NV
 0x8862

	)

2794 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

2797 #i‚de‡
GL_NV_ãxtuª_shadî3


2798 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

2799 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

2800 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

2801 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

2802 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

2803 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

2804 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

2805 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

2806 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

2807 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

2808 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

2809 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

2810 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

2811 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

2812 
	#GL_HILO8_NV
 0x885E

	)

2813 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

2814 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

2817 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


2820 #i‚de‡
GL_EXT_shadow_funcs


2823 #i‚de‡
GL_EXT_°ícû_two_side


2824 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

2825 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

2828 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


2829 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

2832 #i‚de‡
GL_APPLE_˛õ¡_°‹age


2833 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

2836 #i‚de‡
GL_APPLE_ñemít_¨øy


2837 
	#GL_ELEMENT_ARRAY_APPLE
 0x8768

	)

2838 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8769

	)

2839 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x876A

	)

2842 #i‚de‡
GL_APPLE_„n˚


2843 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

2844 
	#GL_FENCE_APPLE
 0x8A0B

	)

2847 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


2848 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

2851 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


2852 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

2853 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

2854 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

2855 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

2856 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

2857 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

2860 #i‚de‡
GL_APPLE_ycb¸_422


2861 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

2862 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

2863 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

2866 #i‚de‡
GL_S3_s3tc


2867 
	#GL_RGB_S3TC
 0x83A0

	)

2868 
	#GL_RGB4_S3TC
 0x83A1

	)

2869 
	#GL_RGBA_S3TC
 0x83A2

	)

2870 
	#GL_RGBA4_S3TC
 0x83A3

	)

2873 #i‚de‡
GL_ATI_døw_buf„rs


2874 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

2875 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

2876 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

2877 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

2878 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

2879 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

2880 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

2881 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

2882 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

2883 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

2884 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

2885 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

2886 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

2887 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

2888 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

2889 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

2890 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

2893 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


2894 
	#GL_TYPE_RGBA_FLOAT_ATI
 0x8820

	)

2895 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

2898 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


2899 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

2900 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

2901 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

2904 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


2905 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

2906 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

2907 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

2908 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

2909 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

2910 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

2911 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

2912 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

2913 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

2914 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

2915 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

2916 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

2919 #i‚de‡
GL_NV_Êﬂt_buf„r


2920 
	#GL_FLOAT_R_NV
 0x8880

	)

2921 
	#GL_FLOAT_RG_NV
 0x8881

	)

2922 
	#GL_FLOAT_RGB_NV
 0x8882

	)

2923 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

2924 
	#GL_FLOAT_R16_NV
 0x8884

	)

2925 
	#GL_FLOAT_R32_NV
 0x8885

	)

2926 
	#GL_FLOAT_RG16_NV
 0x8886

	)

2927 
	#GL_FLOAT_RG32_NV
 0x8887

	)

2928 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

2929 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

2930 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

2931 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

2932 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

2933 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

2934 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

2937 #i‚de‡
GL_NV_‰agmít_¥ogøm


2938 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

2939 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

2940 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

2941 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

2942 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

2943 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

2946 #i‚de‡
GL_NV_hÆf_Êﬂt


2947 
	#GL_HALF_FLOAT_NV
 0x140B

	)

2950 #i‚de‡
GL_NV_pixñ_d©a_ønge


2951 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

2952 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

2953 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

2954 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

2955 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

2956 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

2959 #i‚de‡
GL_NV_¥imôive_ª°¨t


2960 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

2961 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

2964 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


2965 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

2968 #i‚de‡
GL_NV_vîãx_¥ogøm2


2971 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


2974 #i‚de‡
GL_ATI_£∑øã_°ícû


2975 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

2976 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

2977 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

2978 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

2981 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


2984 #i‚de‡
GL_OES_ªad_f‹m©


2985 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

2986 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

2989 #i‚de‡
GL_EXT_dïth_bounds_ã°


2990 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

2991 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

2994 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


2995 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

2996 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

2997 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

3000 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


3001 
	#GL_BLEND_EQUATION_RGB_EXT
 
GL_BLEND_EQUATION


	)

3002 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

3005 #i‚de‡
GL_MESA_∑ck_övît


3006 
	#GL_PACK_INVERT_MESA
 0x8758

	)

3009 #i‚de‡
GL_MESA_ycb¸_ãxtuª


3010 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

3011 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

3012 
	#GL_YCBCR_MESA
 0x8757

	)

3015 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


3016 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

3017 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

3018 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

3019 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

3022 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


3025 #i‚de‡
GL_NV_‰agmít_¥ogøm2


3026 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

3027 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

3028 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

3029 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

3030 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

3033 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


3038 #i‚de‡
GL_NV_vîãx_¥ogøm3


3042 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


3043 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

3044 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

3045 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

3046 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

3047 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

3048 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

3049 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

3050 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

3051 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

3052 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

3053 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

3054 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

3055 
	#GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT
 0x8CD8

	)

3056 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

3057 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

3058 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

3059 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

3060 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

3061 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

3062 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

3063 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

3064 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

3065 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

3066 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

3067 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

3068 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

3069 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

3070 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

3071 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

3072 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

3073 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

3074 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

3075 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

3076 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

3077 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

3078 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

3079 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

3080 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

3081 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

3082 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

3083 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

3084 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

3085 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

3086 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

3087 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

3088 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

3089 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

3090 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

3091 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

3092 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

3093 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

3094 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

3097 #i‚de‡
GL_GREMEDY_°rög_m¨kî


3103 
	~<°ddef.h
>

3104 #i‚de‡
GL_VERSION_2_0


3106 
	tGLch¨
;

3109 #i‚de‡
GL_VERSION_1_5


3111 #ifde‡
__APPLE__


3112 
	tGLöçå
;

3113 
	tGLsizeùå
;

3115 
±rdiff_t
 
	tGLöçå
;

3116 
±rdiff_t
 
	tGLsizeùå
;

3120 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


3122 #ifde‡
__APPLE__


3123 
	tGLöçåARB
;

3124 
	tGLsizeùåARB
;

3126 
±rdiff_t
 
	tGLöçåARB
;

3127 
±rdiff_t
 
	tGLsizeùåARB
;

3131 #i‚de‡
GL_ARB_shadî_obje˘s


3133 
	tGLch¨ARB
;

3134 #i‡
deföed
(
__APPLE__
)

3135 *
	tGLh™dÀARB
;

3137 
	tGLh™dÀARB
;

3142 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


3143 
	tGLhÆfARB
;

3146 #i‚de‡
GL_NV_hÆf_Êﬂt


3147 
	tGLhÆfNV
;

3150 #i‚de‡
GL_VERSION_1_2


3151 
	#GL_VERSION_1_2
 1

	)

3152 #ifde‡
GL_GLEXT_PROTOTYPES


3153 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GL˛ampf
, GLclampf, GLclampf, GLclampf);

3154 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
);

3155 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *);

3156 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

3157 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

3158 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

3159 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

3160 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

3161 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3162 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3163 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

3164 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
, 
GLsizei
, 
GLöt
, GLint, GLsizei);

3165 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

3166 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

3167 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
, GLíum, 
GLÊﬂt
);

3168 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

3169 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
, GLíum, 
GLöt
);

3170 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

3171 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

3172 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
, GLsizei);

3173 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

3174 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3175 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3176 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *, GLvoid *, GLvoid *);

3177 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *, const GLvoid *);

3178 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

3179 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3180 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3181 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

3182 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3183 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3184 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
, 
GLsizei
, GLíum, 
GLboﬁón
);

3185 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
, GLíum, 
GLboﬁón
);

3186 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
);

3187 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
);

3188 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

3189 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

3190 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

3192 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

3193 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

3194 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

3195 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

3196 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3197 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3198 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3199 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

3200 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3201 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3202 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

3203 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

3204 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

3205 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

3206 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

3207 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3208 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

3209 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3210 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3211 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3212 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

3213 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3214 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3215 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

3216 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

3217 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

3218 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3219 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3220 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

3221 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3222 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3223 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3224 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3225 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

3226 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

3227 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

3228 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

3229 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3232 #i‚de‡
GL_VERSION_1_3


3233 
	#GL_VERSION_1_3
 1

	)

3234 #ifde‡
GL_GLEXT_PROTOTYPES


3235 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
);

3236 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
);

3237 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
, 
GLdoubÀ
);

3238 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3239 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
, 
GLÊﬂt
);

3240 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3241 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
, 
GLöt
);

3242 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
, c⁄° 
GLöt
 *);

3243 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
, 
GLsh‹t
);

3244 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3245 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
, 
GLdoubÀ
, GLdouble);

3246 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3247 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
, 
GLÊﬂt
, GLfloat);

3248 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3249 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
, 
GLöt
, GLint);

3250 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
, c⁄° 
GLöt
 *);

3251 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
, 
GLsh‹t
, GLshort);

3252 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3253 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

3254 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3255 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

3256 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3257 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
, 
GLöt
, GLint, GLint);

3258 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
, c⁄° 
GLöt
 *);

3259 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

3260 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3261 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3262 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3263 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3264 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3265 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

3266 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
, c⁄° 
GLöt
 *);

3267 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3268 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3269 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *);

3270 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *);

3271 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *);

3272 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *);

3273 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GL˛ampf
, 
GLboﬁón
);

3274 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3275 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3276 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3277 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3278 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3279 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3280 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
, 
GLöt
, 
GLvoid
 *);

3282 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

3283 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

3284 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3285 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3286 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3287 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3288 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3289 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3290 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3291 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3292 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3293 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3294 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3295 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3296 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3297 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3298 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3299 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3300 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3301 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3302 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3303 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3304 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3305 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3306 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3307 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3308 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3309 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3310 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3311 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3312 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3313 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3314 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3315 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3316 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3317 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3318 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3319 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3320 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3321 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3322 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3323 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3324 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3325 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3326 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3327 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

3330 #i‚de‡
GL_VERSION_1_4


3331 
	#GL_VERSION_1_4
 1

	)

3332 #ifde‡
GL_GLEXT_PROTOTYPES


3333 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
, GLenum, GLenum, GLenum);

3334 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
);

3335 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *);

3336 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
);

3337 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *);

3338 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3339 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
, 
GLöt
 *, 
GLsizei
 *, GLsizei);

3340 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* *, GLsizei);

3341 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
, 
GLÊﬂt
);

3342 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3343 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
, 
GLöt
);

3344 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
, c⁄° 
GLöt
 *);

3345 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
, GLbyte, GLbyte);

3346 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *);

3347 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
, GLdouble, GLdouble);

3348 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *);

3349 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
, GLfloat, GLfloat);

3350 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *);

3351 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
, GLint, GLint);

3352 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *);

3353 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
, GLshort, GLshort);

3354 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *);

3355 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
, GLubyte, GLubyte);

3356 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *);

3357 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
, GLuint, GLuint);

3358 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *);

3359 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
, GLushort, GLushort);

3360 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *);

3361 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3362 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
, GLdouble);

3363 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *);

3364 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
, GLfloat);

3365 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *);

3366 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
, GLint);

3367 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *);

3368 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
, GLshort);

3369 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *);

3370 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
, GLdouble, GLdouble);

3371 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *);

3372 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
, GLfloat, GLfloat);

3373 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *);

3374 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
, GLint, GLint);

3375 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *);

3376 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
, GLshort, GLshort);

3377 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *);

3379 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

3380 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

3381 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

3382 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

3383 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

3384 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3385 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

3386 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

3387 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

3388 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3389 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

3390 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3391 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

3392 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

3393 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

3394 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3395 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

3396 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3397 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

3398 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3399 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

3400 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3401 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

3402 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

3403 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

3404 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

3405 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

3406 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

3407 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3408 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3409 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3410 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

3411 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3412 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

3413 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3414 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

3415 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3416 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3417 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3418 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

3419 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3420 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

3421 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3422 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

3423 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3426 #i‚de‡
GL_VERSION_1_5


3427 
	#GL_VERSION_1_5
 1

	)

3428 #ifde‡
GL_GLEXT_PROTOTYPES


3429 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
, 
GLuöt
 *);

3430 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
, c⁄° 
GLuöt
 *);

3431 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
);

3432 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
, 
GLuöt
);

3433 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
);

3434 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
, GLíum, 
GLöt
 *);

3435 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3436 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
, 
GLíum
, GLuint *);

3437 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
, 
GLuöt
);

3438 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
, c⁄° 
GLuöt
 *);

3439 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
, 
GLuöt
 *);

3440 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
);

3441 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
, 
GLsizeùå
, c⁄° 
GLvoid
 *, GLenum);

3442 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
, 
GLöçå
, 
GLsizeùå
, c⁄° 
GLvoid
 *);

3443 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
, 
GLöçå
, 
GLsizeùå
, 
GLvoid
 *);

3444 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„r
 (
GLíum
, GLenum);

3445 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
);

3446 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3447 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
, GLíum, 
GLvoid
* *);

3449 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

3450 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

3451 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

3452 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

3453 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

3454 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3455 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3456 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

3457 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

3458 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

3459 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

3460 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

3461 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

3462 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

3463 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

3464 
GLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

3465 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

3466 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3467 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

3470 #i‚de‡
GL_VERSION_2_0


3471 
	#GL_VERSION_2_0
 1

	)

3472 #ifde‡
GL_GLEXT_PROTOTYPES


3473 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
, GLenum);

3474 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
, c⁄° 
GLíum
 *);

3475 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
, GLenum, GLenum, GLenum);

3476 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
, GLíum, 
GLöt
, 
GLuöt
);

3477 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
, 
GLuöt
);

3478 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
, GLuint);

3479 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
, GLuöt, c⁄° 
GLch¨
 *);

3480 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
);

3481 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

3482 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
);

3483 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
);

3484 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
);

3485 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
, GLuint);

3486 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
);

3487 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
);

3488 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨
 *);

3489 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨
 *);

3490 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
, 
GLsizei
, GLsizei *, GLuint *);

3491 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
, c⁄° 
GLch¨
 *);

3492 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3493 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

3494 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3495 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

3496 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

3497 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
, c⁄° 
GLch¨
 *);

3498 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
, 
GLöt
, 
GLÊﬂt
 *);

3499 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
, 
GLöt
, GLint *);

3500 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

3501 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

3502 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3503 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

3504 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
);

3505 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
);

3506 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
);

3507 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
, 
GLsizei
, c⁄° 
GLch¨
* *, c⁄° 
GLöt
 *);

3508 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
);

3509 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
, 
GLÊﬂt
);

3510 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
, 
GLÊﬂt
, GLfloat);

3511 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat);

3512 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3513 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
, GLint);

3514 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
, GLint, GLint);

3515 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
, GLint, GLint, GLint);

3516 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
, GLint, GLint, GLint, GLint);

3517 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

3518 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

3519 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

3520 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

3521 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
, 
GLsizei
, const GLint *);

3522 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
, 
GLsizei
, const GLint *);

3523 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
, 
GLsizei
, const GLint *);

3524 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
, 
GLsizei
, const GLint *);

3525 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

3526 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

3527 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

3528 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
);

3529 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
, 
GLdoubÀ
);

3530 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3531 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
, 
GLÊﬂt
);

3532 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3533 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
, 
GLsh‹t
);

3534 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3535 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

3536 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3537 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

3538 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3539 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
, 
GLsh‹t
, GLshort);

3540 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3541 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

3542 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3543 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

3544 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3545 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

3546 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3547 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
, c⁄° 
GLbyã
 *);

3548 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
, c⁄° 
GLöt
 *);

3549 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3550 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

3551 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
, c⁄° 
GLubyã
 *);

3552 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
, const GLuint *);

3553 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
, c⁄° 
GLush‹t
 *);

3554 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
, c⁄° 
GLbyã
 *);

3555 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3556 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3557 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3558 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3559 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
, c⁄° 
GLöt
 *);

3560 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3561 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3562 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
, c⁄° 
GLubyã
 *);

3563 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
, const GLuint *);

3564 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
, c⁄° 
GLush‹t
 *);

3565 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, c⁄° 
GLvoid
 *);

3567 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

3568 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

3569 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

3570 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

3571 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

3572 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

3573 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

3574 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

3575 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

3576 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

3577 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3578 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

3579 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

3580 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

3581 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

3582 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

3583 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

3584 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tobj
);

3585 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

3586 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3587 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

3588 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3589 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

3590 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

3591 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

3592 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

3593 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

3594 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

3595 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3596 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3597 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

3598 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3599 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

3600 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3601 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

3602 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3603 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

3604 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

3605 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

3606 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

3607 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

3608 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

3609 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

3610 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

3611 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3612 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3613 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3614 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3615 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3616 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3617 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3618 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3619 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3620 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3621 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3622 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3623 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

3624 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3625 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

3626 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3627 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

3628 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3629 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3630 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3631 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

3632 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3633 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

3634 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3635 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3636 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3637 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

3638 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3639 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

3640 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3641 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

3642 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

3643 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3644 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

3645 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

3646 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

3647 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

3648 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

3649 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

3650 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3651 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

3652 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3653 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

3654 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

3655 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3656 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

3657 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

3658 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

3659 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3662 #i‚de‡
GL_ARB_mu…ôextuª


3663 
	#GL_ARB_mu…ôextuª
 1

	)

3664 #ifde‡
GL_GLEXT_PROTOTYPES


3665 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
);

3666 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
);

3667 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
, 
GLdoubÀ
);

3668 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3669 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
, 
GLÊﬂt
);

3670 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3671 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
, 
GLöt
);

3672 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

3673 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
, 
GLsh‹t
);

3674 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3675 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble);

3676 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3677 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat);

3678 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3679 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
, 
GLöt
, GLint);

3680 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

3681 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
, 
GLsh‹t
, GLshort);

3682 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3683 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

3684 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3685 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

3686 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3687 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
, 
GLöt
, GLint, GLint);

3688 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

3689 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

3690 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3691 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3692 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3693 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3694 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3695 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

3696 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

3697 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3698 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3700 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3701 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3702 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3703 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3704 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3705 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3706 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3707 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3708 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3709 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3710 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3711 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3712 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3713 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3714 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3715 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3716 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3717 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3718 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3719 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3720 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3721 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3722 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3723 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3724 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3725 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3726 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3727 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3728 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3729 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3730 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3731 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3732 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3733 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3736 #i‚de‡
GL_ARB_å™•o£_m©rix


3737 
	#GL_ARB_å™•o£_m©rix
 1

	)

3738 #ifde‡
GL_GLEXT_PROTOTYPES


3739 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *);

3740 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *);

3741 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *);

3742 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *);

3744 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3745 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3746 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3747 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3750 #i‚de‡
GL_ARB_mu…ißm∂e


3751 
	#GL_ARB_mu…ißm∂e
 1

	)

3752 #ifde‡
GL_GLEXT_PROTOTYPES


3753 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GL˛ampf
, 
GLboﬁón
);

3755 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3758 #i‚de‡
GL_ARB_ãxtuª_ív_add


3759 
	#GL_ARB_ãxtuª_ív_add
 1

	)

3762 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


3763 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

3766 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


3767 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

3768 #ifde‡
GL_GLEXT_PROTOTYPES


3769 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3770 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3771 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3772 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3773 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3774 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3775 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
, 
GLöt
, 
GLvoid
 *);

3777 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3778 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3779 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3780 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3781 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3782 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3783 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

3786 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


3787 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

3790 #i‚de‡
GL_ARB_poöt_∑ømëîs


3791 
	#GL_ARB_poöt_∑ømëîs
 1

	)

3792 #ifde‡
GL_GLEXT_PROTOTYPES


3793 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
, 
GLÊﬂt
);

3794 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3796 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

3797 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3800 #i‚de‡
GL_ARB_vîãx_bÀnd


3801 
	#GL_ARB_vîãx_bÀnd
 1

	)

3802 #ifde‡
GL_GLEXT_PROTOTYPES


3803 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
, c⁄° 
GLbyã
 *);

3804 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
, c⁄° 
GLsh‹t
 *);

3805 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
, const GLint *);

3806 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
, c⁄° 
GLÊﬂt
 *);

3807 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
, c⁄° 
GLdoubÀ
 *);

3808 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
, c⁄° 
GLubyã
 *);

3809 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
, c⁄° 
GLush‹t
 *);

3810 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
, c⁄° 
GLuöt
 *);

3811 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3812 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
);

3814 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

3815 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

3816 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

3817 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

3818 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

3819 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

3820 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

3821 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

3822 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3823 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

3826 #i‚de‡
GL_ARB_m©rix_∑Àâe


3827 
	#GL_ARB_m©rix_∑Àâe
 1

	)

3828 #ifde‡
GL_GLEXT_PROTOTYPES


3829 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
);

3830 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
, c⁄° 
GLubyã
 *);

3831 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
, c⁄° 
GLush‹t
 *);

3832 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
, c⁄° 
GLuöt
 *);

3833 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3835 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

3836 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

3837 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

3838 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

3839 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3842 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


3843 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

3846 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


3847 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

3850 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


3851 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

3854 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


3855 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

3858 #i‚de‡
GL_ARB_dïth_ãxtuª


3859 
	#GL_ARB_dïth_ãxtuª
 1

	)

3862 #i‚de‡
GL_ARB_shadow


3863 
	#GL_ARB_shadow
 1

	)

3866 #i‚de‡
GL_ARB_shadow_ambõ¡


3867 
	#GL_ARB_shadow_ambõ¡
 1

	)

3870 #i‚de‡
GL_ARB_wödow_pos


3871 
	#GL_ARB_wödow_pos
 1

	)

3872 #ifde‡
GL_GLEXT_PROTOTYPES


3873 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
, GLdouble);

3874 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *);

3875 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
, GLfloat);

3876 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *);

3877 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
, GLint);

3878 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *);

3879 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
, GLshort);

3880 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *);

3881 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
, GLdouble, GLdouble);

3882 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *);

3883 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
, GLfloat, GLfloat);

3884 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *);

3885 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
, GLint, GLint);

3886 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *);

3887 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
, GLshort, GLshort);

3888 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *);

3890 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3891 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3892 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

3893 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3894 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

3895 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3896 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

3897 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3898 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3899 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3900 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

3901 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3902 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

3903 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3904 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

3905 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3908 #i‚de‡
GL_ARB_vîãx_¥ogøm


3909 
	#GL_ARB_vîãx_¥ogøm
 1

	)

3910 #ifde‡
GL_GLEXT_PROTOTYPES


3911 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
, 
GLdoubÀ
);

3912 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3913 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
, 
GLÊﬂt
);

3914 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3915 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
, 
GLsh‹t
);

3916 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3917 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

3918 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3919 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

3920 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3921 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
, 
GLsh‹t
, GLshort);

3922 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3923 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

3924 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3925 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

3926 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3927 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

3928 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3929 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
, c⁄° 
GLbyã
 *);

3930 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
, c⁄° 
GLöt
 *);

3931 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3932 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

3933 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
, c⁄° 
GLubyã
 *);

3934 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
, const GLuint *);

3935 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
, c⁄° 
GLush‹t
 *);

3936 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
, c⁄° 
GLbyã
 *);

3937 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3938 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3939 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3940 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3941 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
, c⁄° 
GLöt
 *);

3942 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3943 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3944 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
, c⁄° 
GLubyã
 *);

3945 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
, const GLuint *);

3946 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
, c⁄° 
GLush‹t
 *);

3947 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, c⁄° 
GLvoid
 *);

3948 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
);

3949 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
);

3950 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
, GLíum, 
GLsizei
, c⁄° 
GLvoid
 *);

3951 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
, 
GLuöt
);

3952 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

3953 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
, 
GLuöt
 *);

3954 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3955 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

3956 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3957 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

3958 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3959 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

3960 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3961 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

3962 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
 *);

3963 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

3964 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
 *);

3965 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

3966 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
, GLíum, 
GLöt
 *);

3967 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
, GLíum, 
GLvoid
 *);

3968 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

3969 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

3970 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3971 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

3972 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
);

3974 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

3975 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3976 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

3977 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3978 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

3979 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3980 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3981 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3982 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

3983 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3984 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

3985 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3986 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3987 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3988 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

3989 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3990 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

3991 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3992 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

3993 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

3994 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3995 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

3996 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

3997 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

3998 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

3999 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4000 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4001 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4002 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4003 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4004 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4005 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

4006 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4007 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4008 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4009 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4010 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4011 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4012 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4013 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

4014 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

4015 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

4016 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

4017 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4018 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

4019 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4020 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4021 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4022 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

4023 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4024 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4025 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

4026 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

4027 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

4028 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

4029 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4030 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

4031 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4032 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4033 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4034 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

4035 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4038 #i‚de‡
GL_ARB_‰agmít_¥ogøm


4039 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

4043 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


4044 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

4045 #ifde‡
GL_GLEXT_PROTOTYPES


4046 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
, 
GLuöt
);

4047 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

4048 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
, 
GLuöt
 *);

4049 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
);

4050 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
, 
GLsizeùåARB
, c⁄° 
GLvoid
 *, GLenum);

4051 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
, 
GLöçåARB
, 
GLsizeùåARB
, c⁄° 
GLvoid
 *);

4052 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
, 
GLöçåARB
, 
GLsizeùåARB
, 
GLvoid
 *);

4053 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
, GLenum);

4054 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
);

4055 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
, GLíum, 
GLöt
 *);

4056 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
, GLíum, 
GLvoid
* *);

4058 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

4059 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

4060 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

4061 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4062 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

4063 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

4064 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, 
	tGLvoid
 *
	td©a
);

4065 
GLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

4066 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4067 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4068 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

4071 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


4072 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

4073 #ifde‡
GL_GLEXT_PROTOTYPES


4074 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
, 
GLuöt
 *);

4075 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

4076 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
);

4077 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
, 
GLuöt
);

4078 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
);

4079 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
, GLíum, 
GLöt
 *);

4080 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4081 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
, 
GLíum
, GLuint *);

4083 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

4084 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

4085 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

4086 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

4087 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4088 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4089 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4090 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

4093 #i‚de‡
GL_ARB_shadî_obje˘s


4094 
	#GL_ARB_shadî_obje˘s
 1

	)

4095 #ifde‡
GL_GLEXT_PROTOTYPES


4096 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
);

4097 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
);

4098 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
, GLhandleARB);

4099 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
);

4100 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
, 
GLsizei
, c⁄° 
GLch¨ARB
* *, c⁄° 
GLöt
 *);

4101 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
);

4102 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

4103 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
, GLhandleARB);

4104 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
);

4105 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
);

4106 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
);

4107 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
, 
GLÊﬂt
);

4108 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat);

4109 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat);

4110 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4111 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
, GLint);

4112 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
, GLint, GLint);

4113 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
, GLint, GLint, GLint);

4114 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
, GLint, GLint, GLint, GLint);

4115 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4116 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4117 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4118 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4119 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4120 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4121 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4122 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4123 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4124 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4125 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4126 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
, 
GLíum
, 
GLÊﬂt
 *);

4127 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
, 
GLíum
, 
GLöt
 *);

4128 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizeò*, 
GLch¨ARB
 *);

4129 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizei *, GLhandleARB *);

4130 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
, c⁄° 
GLch¨ARB
 *);

4131 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
, 
GLuöt
, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨ARB
 *);

4132 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
, 
GLöt
, 
GLÊﬂt
 *);

4133 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
, 
GLöt
, GLint *);

4134 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizeò*, 
GLch¨ARB
 *);

4136 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

4137 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

4138 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

4139 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

4140 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

4141 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

4142 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

4143 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

4144 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4145 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4146 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4147 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

4148 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

4149 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

4150 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

4151 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

4152 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

4153 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

4154 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

4155 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4156 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4157 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4158 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4159 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4160 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4161 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4162 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4163 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4164 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4165 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4166 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4167 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4168 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

4169 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

4170 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4171 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4172 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

4173 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

4174 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

4177 #i‚de‡
GL_ARB_vîãx_shadî


4178 
	#GL_ARB_vîãx_shadî
 1

	)

4179 #ifde‡
GL_GLEXT_PROTOTYPES


4180 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
, 
GLuöt
, c⁄° 
GLch¨ARB
 *);

4181 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
, 
GLuöt
, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨ARB
 *);

4182 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
, c⁄° 
GLch¨ARB
 *);

4184 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4185 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4186 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4189 #i‚de‡
GL_ARB_‰agmít_shadî


4190 
	#GL_ARB_‰agmít_shadî
 1

	)

4193 #i‚de‡
GL_ARB_shadög_œnguage_100


4194 
	#GL_ARB_shadög_œnguage_100
 1

	)

4197 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


4198 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

4201 #i‚de‡
GL_ARB_poöt_•rôe


4202 
	#GL_ARB_poöt_•rôe
 1

	)

4205 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


4206 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

4209 #i‚de‡
GL_ARB_døw_buf„rs


4210 
	#GL_ARB_døw_buf„rs
 1

	)

4211 #ifde‡
GL_GLEXT_PROTOTYPES


4212 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
, c⁄° 
GLíum
 *);

4214 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

4217 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


4218 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

4221 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


4222 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

4223 #ifde‡
GL_GLEXT_PROTOTYPES


4224 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
, GLenum);

4226 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

4229 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


4230 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

4233 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


4234 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

4237 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


4238 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

4241 #i‚de‡
GL_EXT_abgr


4242 
	#GL_EXT_abgr
 1

	)

4245 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


4246 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

4247 #ifde‡
GL_GLEXT_PROTOTYPES


4248 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GL˛ampf
, GLclampf, GLclampf, GLclampf);

4250 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

4253 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


4254 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

4255 #ifde‡
GL_GLEXT_PROTOTYPES


4256 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
, GLfloat);

4258 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

4261 #i‚de‡
GL_EXT_ãxtuª


4262 
	#GL_EXT_ãxtuª
 1

	)

4265 #i‚de‡
GL_EXT_ãxtuª3D


4266 
	#GL_EXT_ãxtuª3D
 1

	)

4267 #ifde‡
GL_GLEXT_PROTOTYPES


4268 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

4269 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4271 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4272 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4275 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


4276 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

4277 #ifde‡
GL_GLEXT_PROTOTYPES


4278 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4279 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
, GLíum, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4281 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

4282 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

4285 #i‚de‡
GL_EXT_subãxtuª


4286 
	#GL_EXT_subãxtuª
 1

	)

4287 #ifde‡
GL_GLEXT_PROTOTYPES


4288 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4289 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4291 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4292 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4295 #i‚de‡
GL_EXT_c›y_ãxtuª


4296 
	#GL_EXT_c›y_ãxtuª
 1

	)

4297 #ifde‡
GL_GLEXT_PROTOTYPES


4298 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLint);

4299 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLsizei, GLint);

4300 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
);

4301 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

4302 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

4304 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

4305 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

4306 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4307 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4308 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4311 #i‚de‡
GL_EXT_hi°ogøm


4312 
	#GL_EXT_hi°ogøm
 1

	)

4313 #ifde‡
GL_GLEXT_PROTOTYPES


4314 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

4315 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4316 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

4317 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

4318 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4319 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

4320 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
, 
GLsizei
, GLíum, 
GLboﬁón
);

4321 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
, GLíum, 
GLboﬁón
);

4322 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
);

4323 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
);

4325 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

4326 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4327 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4328 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

4329 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4330 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4331 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

4332 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

4333 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

4334 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

4337 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


4338 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

4339 #ifde‡
GL_GLEXT_PROTOTYPES


4340 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4341 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4342 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
, GLíum, 
GLÊﬂt
);

4343 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4344 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
, GLíum, 
GLöt
);

4345 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4346 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

4347 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
, GLsizei);

4348 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

4349 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4350 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

4351 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *, GLvoid *, GLvoid *);

4352 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *, const GLvoid *);

4354 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

4355 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

4356 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

4357 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4358 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

4359 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4360 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4361 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4362 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

4363 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4364 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4365 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

4366 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

4369 #i‚de‡
GL_EXT_cﬁ‹_m©rix


4370 
	#GL_EXT_cﬁ‹_m©rix
 1

	)

4373 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


4374 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

4375 #ifde‡
GL_GLEXT_PROTOTYPES


4376 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4377 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4378 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4379 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

4380 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

4381 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4382 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
, GLíum, 
GLöt
 *);

4384 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

4385 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4386 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4387 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4388 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

4389 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4390 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4393 #i‚de‡
GL_SGIX_pixñ_ãxtuª


4394 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

4395 #ifde‡
GL_GLEXT_PROTOTYPES


4396 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
);

4398 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

4401 #i‚de‡
GL_SGIS_pixñ_ãxtuª


4402 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

4403 #ifde‡
GL_GLEXT_PROTOTYPES


4404 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
, 
GLöt
);

4405 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
, c⁄° 
GLöt
 *);

4406 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
, 
GLÊﬂt
);

4407 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4408 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
, 
GLöt
 *);

4409 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
, 
GLÊﬂt
 *);

4411 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4412 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4413 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4414 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4415 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4416 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4419 #i‚de‡
GL_SGIS_ãxtuª4D


4420 
	#GL_SGIS_ãxtuª4D
 1

	)

4421 #ifde‡
GL_GLEXT_PROTOTYPES


4422 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

4423 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4425 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4426 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4429 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


4430 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

4433 #i‚de‡
GL_EXT_cmyka


4434 
	#GL_EXT_cmyka
 1

	)

4437 #i‚de‡
GL_EXT_ãxtuª_obje˘


4438 
	#GL_EXT_ãxtuª_obje˘
 1

	)

4439 #ifde‡
GL_GLEXT_PROTOTYPES


4440 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
, c⁄° 
GLuöt
 *, GLboolean *);

4441 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
, 
GLuöt
);

4442 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

4443 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
, 
GLuöt
 *);

4444 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
);

4445 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *, c⁄° 
GL˛ampf
 *);

4447 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

4448 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

4449 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

4450 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

4451 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

4452 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

4455 #i‚de‡
GL_SGIS_dëaû_ãxtuª


4456 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

4457 #ifde‡
GL_GLEXT_PROTOTYPES


4458 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4459 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
, 
GLÊﬂt
 *);

4461 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

4462 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

4465 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


4466 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

4467 #ifde‡
GL_GLEXT_PROTOTYPES


4468 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4469 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
, 
GLÊﬂt
 *);

4471 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

4472 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

4475 #i‚de‡
GL_EXT_∑cked_pixñs


4476 
	#GL_EXT_∑cked_pixñs
 1

	)

4479 #i‚de‡
GL_SGIS_ãxtuª_lod


4480 
	#GL_SGIS_ãxtuª_lod
 1

	)

4483 #i‚de‡
GL_SGIS_mu…ißm∂e


4484 
	#GL_SGIS_mu…ißm∂e
 1

	)

4485 #ifde‡
GL_GLEXT_PROTOTYPES


4486 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
, 
GLboﬁón
);

4487 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
);

4489 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

4490 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

4493 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


4494 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

4497 #i‚de‡
GL_EXT_vîãx_¨øy


4498 
	#GL_EXT_vîãx_¨øy
 1

	)

4499 #ifde‡
GL_GLEXT_PROTOTYPES


4500 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
);

4501 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4502 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
, 
GLöt
, 
GLsizei
);

4503 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
, GLsizei, c⁄° 
GLboﬁón
 *);

4504 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
, 
GLvoid
* *);

4505 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4506 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4507 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4508 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4510 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

4511 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4512 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

4513 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

4514 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

4515 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4516 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4517 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4518 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4521 #i‚de‡
GL_EXT_misc_©åibuã


4522 
	#GL_EXT_misc_©åibuã
 1

	)

4525 #i‚de‡
GL_SGIS_gíî©e_mùm≠


4526 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

4529 #i‚de‡
GL_SGIX_˛ùm≠


4530 
	#GL_SGIX_˛ùm≠
 1

	)

4533 #i‚de‡
GL_SGIX_shadow


4534 
	#GL_SGIX_shadow
 1

	)

4537 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


4538 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

4541 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


4542 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

4545 #i‚de‡
GL_EXT_bÀnd_mömax


4546 
	#GL_EXT_bÀnd_mömax
 1

	)

4547 #ifde‡
GL_GLEXT_PROTOTYPES


4548 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
);

4550 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

4553 #i‚de‡
GL_EXT_bÀnd_subåa˘


4554 
	#GL_EXT_bÀnd_subåa˘
 1

	)

4557 #i‚de‡
GL_EXT_bÀnd_logic_›


4558 
	#GL_EXT_bÀnd_logic_›
 1

	)

4561 #i‚de‡
GL_SGIX_öãæa˚


4562 
	#GL_SGIX_öãæa˚
 1

	)

4565 #i‚de‡
GL_SGIX_pixñ_tûes


4566 
	#GL_SGIX_pixñ_tûes
 1

	)

4569 #i‚de‡
GL_SGIX_ãxtuª_£À˘


4570 
	#GL_SGIX_ãxtuª_£À˘
 1

	)

4573 #i‚de‡
GL_SGIX_•rôe


4574 
	#GL_SGIX_•rôe
 1

	)

4575 #ifde‡
GL_GLEXT_PROTOTYPES


4576 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
, 
GLÊﬂt
);

4577 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4578 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
, 
GLöt
);

4579 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
, c⁄° 
GLöt
 *);

4581 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4582 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4583 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4584 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4587 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


4588 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

4591 #i‚de‡
GL_EXT_poöt_∑ømëîs


4592 
	#GL_EXT_poöt_∑ømëîs
 1

	)

4593 #ifde‡
GL_GLEXT_PROTOTYPES


4594 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
, 
GLÊﬂt
);

4595 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4597 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4598 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4601 #i‚de‡
GL_SGIS_poöt_∑ømëîs


4602 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

4603 #ifde‡
GL_GLEXT_PROTOTYPES


4604 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
, 
GLÊﬂt
);

4605 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4607 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4608 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4611 #i‚de‡
GL_SGIX_ö°rumíts


4612 
	#GL_SGIX_ö°rumíts
 1

	)

4613 #ifde‡
GL_GLEXT_PROTOTYPES


4614 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

4615 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
, 
GLöt
 *);

4616 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLint *);

4617 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
);

4618 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

4619 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
);

4621 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

4622 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

4623 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

4624 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

4625 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

4626 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

4629 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


4630 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

4633 #i‚de‡
GL_SGIX_‰amezoom


4634 
	#GL_SGIX_‰amezoom
 1

	)

4635 #ifde‡
GL_GLEXT_PROTOTYPES


4636 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
);

4638 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

4641 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


4642 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

4643 #ifde‡
GL_GLEXT_PROTOTYPES


4644 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

4646 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

4649 #i‚de‡
GL_SGIX_pﬁynomül_ffd


4650 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

4651 #ifde‡
GL_GLEXT_PROTOTYPES


4652 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
, 
GLdoubÀ
, GLdoubÀ, 
GLöt
, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);

4653 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
, 
GLÊﬂt
, GLÊﬂt, 
GLöt
, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);

4654 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
);

4655 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
);

4657 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

4658 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

4659 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

4660 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

4663 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


4664 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

4665 #ifde‡
GL_GLEXT_PROTOTYPES


4666 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *);

4668 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

4671 #i‚de‡
GL_SGIX_Êush_ø°î


4672 
	#GL_SGIX_Êush_ø°î
 1

	)

4673 #ifde‡
GL_GLEXT_PROTOTYPES


4674 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

4676 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

4679 #i‚de‡
GL_SGIX_dïth_ãxtuª


4680 
	#GL_SGIX_dïth_ãxtuª
 1

	)

4683 #i‚de‡
GL_SGIS_fog_fun˘i⁄


4684 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

4685 #ifde‡
GL_GLEXT_PROTOTYPES


4686 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
, c⁄° 
GLÊﬂt
 *);

4687 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *);

4689 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

4690 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

4693 #i‚de‡
GL_SGIX_fog_off£t


4694 
	#GL_SGIX_fog_off£t
 1

	)

4697 #i‚de‡
GL_HP_image_å™sf‹m


4698 
	#GL_HP_image_å™sf‹m
 1

	)

4699 #ifde‡
GL_GLEXT_PROTOTYPES


4700 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
, GLíum, 
GLöt
);

4701 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
, GLíum, 
GLÊﬂt
);

4702 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4703 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4704 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
, GLíum, 
GLöt
 *);

4705 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4707 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4708 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4709 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4710 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4711 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4712 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4715 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


4716 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

4719 #i‚de‡
GL_SGIX_ãxtuª_add_ív


4720 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

4723 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


4724 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

4725 #ifde‡
GL_GLEXT_PROTOTYPES


4726 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4727 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
, 
GLsizei
, 
GLöt
, GLint, GLsizei);

4729 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

4730 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

4733 #i‚de‡
GL_PGI_vîãx_höts


4734 
	#GL_PGI_vîãx_höts
 1

	)

4737 #i‚de‡
GL_PGI_misc_höts


4738 
	#GL_PGI_misc_höts
 1

	)

4739 #ifde‡
GL_GLEXT_PROTOTYPES


4740 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
, 
GLöt
);

4742 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

4745 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


4746 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

4747 #ifde‡
GL_GLEXT_PROTOTYPES


4748 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4749 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

4750 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

4751 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4753 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

4754 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	td©a
);

4755 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4756 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4759 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


4760 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

4763 #i‚de‡
GL_SGIX_li°_¥i‹ôy


4764 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

4765 #ifde‡
GL_GLEXT_PROTOTYPES


4766 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

4767 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4768 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
);

4769 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
, 
GLíum
, c⁄° 
GLÊﬂt
 *);

4770 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
, 
GLíum
, 
GLöt
);

4771 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
, 
GLíum
, c⁄° 
GLöt
 *);

4773 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4774 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4775 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4776 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4777 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4778 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4781 #i‚de‡
GL_SGIX_ú_ö°rumít1


4782 
	#GL_SGIX_ú_ö°rumít1
 1

	)

4785 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


4786 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

4789 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


4790 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

4793 #i‚de‡
GL_SGIX_shadow_ambõ¡


4794 
	#GL_SGIX_shadow_ambõ¡
 1

	)

4797 #i‚de‡
GL_EXT_ödex_ãxtuª


4798 
	#GL_EXT_ödex_ãxtuª
 1

	)

4801 #i‚de‡
GL_EXT_ödex_m©îül


4802 
	#GL_EXT_ödex_m©îül
 1

	)

4803 #ifde‡
GL_GLEXT_PROTOTYPES


4804 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
, GLenum);

4806 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

4809 #i‚de‡
GL_EXT_ödex_func


4810 
	#GL_EXT_ödex_func
 1

	)

4811 #ifde‡
GL_GLEXT_PROTOTYPES


4812 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
, 
GL˛ampf
);

4814 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

4817 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


4818 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

4821 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


4822 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

4823 #ifde‡
GL_GLEXT_PROTOTYPES


4824 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
, 
GLsizei
);

4825 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

4827 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

4828 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

4831 #i‚de‡
GL_EXT_cuŒ_vîãx


4832 
	#GL_EXT_cuŒ_vîãx
 1

	)

4833 #ifde‡
GL_GLEXT_PROTOTYPES


4834 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
, 
GLdoubÀ
 *);

4835 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
, 
GLÊﬂt
 *);

4837 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4838 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4841 #i‚de‡
GL_SGIX_y¸cb


4842 
	#GL_SGIX_y¸cb
 1

	)

4845 #i‚de‡
GL_SGIX_‰agmít_lightög


4846 
	#GL_SGIX_‰agmít_lightög
 1

	)

4847 #ifde‡
GL_GLEXT_PROTOTYPES


4848 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
, GLenum);

4849 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
);

4850 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4851 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
, GLíum, 
GLöt
);

4852 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4853 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
, 
GLÊﬂt
);

4854 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4855 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
, 
GLöt
);

4856 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
, c⁄° 
GLöt
 *);

4857 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
);

4858 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4859 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
, GLíum, 
GLöt
);

4860 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4861 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4862 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
, GLíum, 
GLöt
 *);

4863 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4864 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
, GLíum, 
GLöt
 *);

4865 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
, 
GLöt
);

4867 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

4868 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4869 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4870 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4871 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4872 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4873 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4874 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4875 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4876 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4877 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4878 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4879 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4880 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4881 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4882 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4883 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4884 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4887 #i‚de‡
GL_IBM_ø°îpos_˛ù


4888 
	#GL_IBM_ø°îpos_˛ù
 1

	)

4891 #i‚de‡
GL_HP_ãxtuª_lightög


4892 
	#GL_HP_ãxtuª_lightög
 1

	)

4895 #i‚de‡
GL_EXT_døw_ønge_ñemíts


4896 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

4897 #ifde‡
GL_GLEXT_PROTOTYPES


4898 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *);

4900 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

4903 #i‚de‡
GL_WIN_ph⁄g_shadög


4904 
	#GL_WIN_ph⁄g_shadög
 1

	)

4907 #i‚de‡
GL_WIN_•ecuœr_fog


4908 
	#GL_WIN_•ecuœr_fog
 1

	)

4911 #i‚de‡
GL_EXT_light_ãxtuª


4912 
	#GL_EXT_light_ãxtuª
 1

	)

4913 #ifde‡
GL_GLEXT_PROTOTYPES


4914 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
);

4915 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
);

4916 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
, GLenum);

4918 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

4919 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

4920 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

4923 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


4924 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

4927 #i‚de‡
GL_EXT_bgø


4928 
	#GL_EXT_bgø
 1

	)

4931 #i‚de‡
GL_SGIX_async


4932 
	#GL_SGIX_async
 1

	)

4933 #ifde‡
GL_GLEXT_PROTOTYPES


4934 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
);

4935 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *);

4936 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *);

4937 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
);

4938 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
, 
GLsizei
);

4939 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
);

4941 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

4942 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

4943 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

4944 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

4945 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

4946 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

4949 #i‚de‡
GL_SGIX_async_pixñ


4950 
	#GL_SGIX_async_pixñ
 1

	)

4953 #i‚de‡
GL_SGIX_async_hi°ogøm


4954 
	#GL_SGIX_async_hi°ogøm
 1

	)

4957 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


4958 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

4959 #ifde‡
GL_GLEXT_PROTOTYPES


4960 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

4961 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
, c⁄° 
GLvoid
* *);

4962 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

4963 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

4965 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

4966 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

4967 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

4968 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

4971 #i‚de‡
GL_HP_oc˛usi⁄_ã°


4972 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

4975 #i‚de‡
GL_EXT_pixñ_å™sf‹m


4976 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

4977 #ifde‡
GL_GLEXT_PROTOTYPES


4978 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
, GLíum, 
GLöt
);

4979 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
, GLíum, 
GLÊﬂt
);

4980 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4981 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4983 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4984 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4985 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4986 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4989 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


4990 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

4993 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


4994 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

4997 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


4998 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

5001 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


5002 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

5003 #ifde‡
GL_GLEXT_PROTOTYPES


5004 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
, GLbyte, GLbyte);

5005 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *);

5006 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

5007 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *);

5008 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

5009 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *);

5010 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
, GLint, GLint);

5011 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *);

5012 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
, GLshort, GLshort);

5013 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *);

5014 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
, GLubyte, GLubyte);

5015 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *);

5016 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
, GLuint, GLuint);

5017 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *);

5018 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
, GLushort, GLushort);

5019 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *);

5020 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5022 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

5023 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5024 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

5025 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5026 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

5027 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5028 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

5029 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5030 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

5031 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5032 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

5033 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

5034 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

5035 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

5036 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

5037 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

5038 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5041 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


5042 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

5043 #ifde‡
GL_GLEXT_PROTOTYPES


5044 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
);

5046 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

5049 #i‚de‡
GL_EXT_mu…i_døw_¨øys


5050 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

5051 #ifde‡
GL_GLEXT_PROTOTYPES


5052 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
, 
GLöt
 *, 
GLsizei
 *, GLsizei);

5053 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* *, GLsizei);

5055 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5056 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

5059 #i‚de‡
GL_EXT_fog_co‹d


5060 
	#GL_EXT_fog_co‹d
 1

	)

5061 #ifde‡
GL_GLEXT_PROTOTYPES


5062 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
);

5063 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *);

5064 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
);

5065 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *);

5066 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5068 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

5069 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

5070 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

5071 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

5072 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5075 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


5076 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

5079 #i‚de‡
GL_EXT_co‹dö©e_‰ame


5080 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

5081 #ifde‡
GL_GLEXT_PROTOTYPES


5082 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
, GLbyte, GLbyte);

5083 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *);

5084 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

5085 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *);

5086 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

5087 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *);

5088 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
, GLint, GLint);

5089 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *);

5090 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
, GLshort, GLshort);

5091 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *);

5092 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
, GLbyte, GLbyte);

5093 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *);

5094 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

5095 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *);

5096 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

5097 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *);

5098 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
, GLint, GLint);

5099 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *);

5100 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
, GLshort, GLshort);

5101 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *);

5102 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5103 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5105 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

5106 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5107 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

5108 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5109 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

5110 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5111 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

5112 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5113 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

5114 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5115 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

5116 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5117 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

5118 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5119 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

5120 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5121 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

5122 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5123 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

5124 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5125 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5126 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5129 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


5130 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

5133 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


5134 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

5137 #i‚de‡
GL_APPLE_å™sf‹m_höt


5138 
	#GL_APPLE_å™sf‹m_höt
 1

	)

5141 #i‚de‡
GL_SGIX_fog_sˇÀ


5142 
	#GL_SGIX_fog_sˇÀ
 1

	)

5145 #i‚de‡
GL_SUNX_c⁄°™t_d©a


5146 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

5147 #ifde‡
GL_GLEXT_PROTOTYPES


5148 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

5150 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

5153 #i‚de‡
GL_SUN_globÆ_Æpha


5154 
	#GL_SUN_globÆ_Æpha
 1

	)

5155 #ifde‡
GL_GLEXT_PROTOTYPES


5156 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
);

5157 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
);

5158 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
);

5159 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
);

5160 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
);

5161 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
);

5162 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
);

5163 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
);

5165 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

5166 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

5167 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

5168 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

5169 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

5170 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

5171 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

5172 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

5175 #i‚de‡
GL_SUN_åüngÀ_li°


5176 
	#GL_SUN_åüngÀ_li°
 1

	)

5177 #ifde‡
GL_GLEXT_PROTOTYPES


5178 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
);

5179 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
);

5180 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
);

5181 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *);

5182 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *);

5183 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *);

5184 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
* *);

5186 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

5187 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

5188 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

5189 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

5190 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

5191 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

5192 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

5195 #i‚de‡
GL_SUN_vîãx


5196 
	#GL_SUN_vîãx
 1

	)

5197 #ifde‡
GL_GLEXT_PROTOTYPES


5198 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat);

5199 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

5200 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat, GLfloat);

5201 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

5202 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5203 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5204 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5205 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5206 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5207 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5208 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat);

5209 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5210 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5211 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5212 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
, GLÊﬂt, 
GLubyã
, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);

5213 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, c⁄° 
GLubyã
 *, const GLfloat *);

5214 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5215 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5216 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5217 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5218 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5219 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

5220 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5221 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

5222 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

5223 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *);

5224 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
, 
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat, GLfloat);

5225 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

5226 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5227 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

5228 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5229 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

5230 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5231 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5232 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat);

5233 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

5234 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5235 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5236 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5237 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

5239 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5240 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5241 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5242 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5243 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5244 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

5245 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5246 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

5247 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5248 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5249 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5250 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

5251 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5252 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

5253 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5254 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

5255 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5256 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

5257 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5258 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5259 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5260 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5261 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5262 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5263 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5264 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5265 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5266 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5267 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5268 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

5269 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5270 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

5271 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5272 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5273 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5274 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

5275 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5276 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5277 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5278 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5281 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


5282 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

5283 #ifde‡
GL_GLEXT_PROTOTYPES


5284 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
, GLenum, GLenum, GLenum);

5286 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

5289 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


5290 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

5291 #ifde‡
GL_GLEXT_PROTOTYPES


5292 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
, GLenum, GLenum, GLenum);

5294 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

5297 #i‚de‡
GL_INGR_cﬁ‹_˛amp


5298 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

5301 #i‚de‡
GL_INGR_öãæa˚_ªad


5302 
	#GL_INGR_öãæa˚_ªad
 1

	)

5305 #i‚de‡
GL_EXT_°ícû_wøp


5306 
	#GL_EXT_°ícû_wøp
 1

	)

5309 #i‚de‡
GL_EXT_422_pixñs


5310 
	#GL_EXT_422_pixñs
 1

	)

5313 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


5314 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

5317 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


5318 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

5321 #i‚de‡
GL_EXT_ãxtuª_ív_add


5322 
	#GL_EXT_ãxtuª_ív_add
 1

	)

5325 #i‚de‡
GL_EXT_ãxtuª_lod_büs


5326 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

5329 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


5330 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

5333 #i‚de‡
GL_EXT_vîãx_weightög


5334 
	#GL_EXT_vîãx_weightög
 1

	)

5335 #ifde‡
GL_GLEXT_PROTOTYPES


5336 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
);

5337 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *);

5338 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLsizei
, 
GLíum
, GLsizei, c⁄° 
GLvoid
 *);

5340 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

5341 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

5342 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLíum
 
	tty≥
, GLsizeò
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5345 #i‚de‡
GL_NV_light_max_exp⁄ít


5346 
	#GL_NV_light_max_exp⁄ít
 1

	)

5349 #i‚de‡
GL_NV_vîãx_¨øy_ønge


5350 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

5351 #ifde‡
GL_GLEXT_PROTOTYPES


5352 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

5353 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
, c⁄° 
GLvoid
 *);

5355 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

5356 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5359 #i‚de‡
GL_NV_ªgi°î_comböîs


5360 
	#GL_NV_ªgi°î_comböîs
 1

	)

5361 #ifde‡
GL_GLEXT_PROTOTYPES


5362 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5363 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
, 
GLÊﬂt
);

5364 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
, c⁄° 
GLöt
 *);

5365 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
, 
GLöt
);

5366 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
, GLenum, GLenum, GLenum, GLenum, GLenum);

5367 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
, GLíum, GLíum, GLíum, GLíum, GLíum, GLíum, 
GLboﬁón
, GLboolean, GLboolean);

5368 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
, GLenum, GLenum, GLenum);

5369 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
, GLíum, GLíum, GLíum, 
GLÊﬂt
 *);

5370 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
, GLíum, GLíum, GLíum, 
GLöt
 *);

5371 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
, GLíum, GLíum, 
GLÊﬂt
 *);

5372 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

5373 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5374 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
, GLíum, 
GLöt
 *);

5376 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5377 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5378 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5379 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5380 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

5381 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

5382 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

5383 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5384 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5385 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5386 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5387 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5388 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5391 #i‚de‡
GL_NV_fog_di°™˚


5392 
	#GL_NV_fog_di°™˚
 1

	)

5395 #i‚de‡
GL_NV_ãxgí_emboss


5396 
	#GL_NV_ãxgí_emboss
 1

	)

5399 #i‚de‡
GL_NV_bÀnd_squ¨e


5400 
	#GL_NV_bÀnd_squ¨e
 1

	)

5403 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


5404 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

5407 #i‚de‡
GL_MESA_ªsize_buf„rs


5408 
	#GL_MESA_ªsize_buf„rs
 1

	)

5409 #ifde‡
GL_GLEXT_PROTOTYPES


5410 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

5412 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

5415 #i‚de‡
GL_MESA_wödow_pos


5416 
	#GL_MESA_wödow_pos
 1

	)

5417 #ifde‡
GL_GLEXT_PROTOTYPES


5418 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
, GLdouble);

5419 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *);

5420 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
, GLfloat);

5421 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *);

5422 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
, GLint);

5423 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *);

5424 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
, GLshort);

5425 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *);

5426 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
, GLdouble, GLdouble);

5427 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *);

5428 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
, GLfloat, GLfloat);

5429 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *);

5430 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
, GLint, GLint);

5431 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *);

5432 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
, GLshort, GLshort);

5433 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *);

5434 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5435 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *);

5436 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5437 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *);

5438 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
, GLint, GLint, GLint);

5439 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *);

5440 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
, GLshort, GLshort, GLshort);

5441 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *);

5443 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

5444 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5445 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5446 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5447 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

5448 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5449 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

5450 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5451 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5452 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5453 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5454 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5455 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

5456 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5457 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

5458 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5459 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5460 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5461 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5462 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5463 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

5464 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5465 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

5466 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5469 #i‚de‡
GL_IBM_cuŒ_vîãx


5470 
	#GL_IBM_cuŒ_vîãx
 1

	)

5473 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


5474 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

5475 #ifde‡
GL_GLEXT_PROTOTYPES


5476 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei, GLint);

5477 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* c⁄° *, GLsizei, 
GLöt
);

5479 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

5480 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

5483 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


5484 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

5485 #ifde‡
GL_GLEXT_PROTOTYPES


5486 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

5487 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

5488 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
, c⁄° 
GLboﬁón
* *, GLint);

5489 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

5490 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

5491 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

5492 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

5493 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

5495 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5496 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5497 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
* *
	tpoöãr
, GLöà
	t±r°ride
);

5498 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5499 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5500 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5501 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5502 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5505 #i‚de‡
GL_SGIX_subßm∂e


5506 
	#GL_SGIX_subßm∂e
 1

	)

5509 #i‚de‡
GL_SGIX_y¸cba


5510 
	#GL_SGIX_y¸cba
 1

	)

5513 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


5514 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

5517 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


5518 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

5521 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


5522 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

5525 #i‚de‡
GL_3DFX_mu…ißm∂e


5526 
	#GL_3DFX_mu…ißm∂e
 1

	)

5529 #i‚de‡
GL_3DFX_tbuf„r


5530 
	#GL_3DFX_tbuf„r
 1

	)

5531 #ifde‡
GL_GLEXT_PROTOTYPES


5532 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
);

5534 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

5537 #i‚de‡
GL_EXT_mu…ißm∂e


5538 
	#GL_EXT_mu…ißm∂e
 1

	)

5539 #ifde‡
GL_GLEXT_PROTOTYPES


5540 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
, 
GLboﬁón
);

5541 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
);

5543 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

5544 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

5547 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


5548 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

5551 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


5552 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

5555 #i‚de‡
GL_SGIX_ªßm∂e


5556 
	#GL_SGIX_ªßm∂e
 1

	)

5559 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


5560 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

5563 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


5564 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

5565 #ifde‡
GL_GLEXT_PROTOTYPES


5566 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
, GLboolean, GLboolean, GLboolean);

5568 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

5571 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


5572 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

5573 #ifde‡
GL_GLEXT_PROTOTYPES


5574 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
, c⁄° 
GLvoid
 *);

5576 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLvoid
 *
	t∑øms
);

5579 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


5580 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

5583 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


5584 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

5587 #i‚de‡
GL_NV_„n˚


5588 
	#GL_NV_„n˚
 1

	)

5589 #ifde‡
GL_GLEXT_PROTOTYPES


5590 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

5591 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
, 
GLuöt
 *);

5592 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
);

5593 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
);

5594 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5595 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
);

5596 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
, 
GLíum
);

5598 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

5599 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

5600 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

5601 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

5602 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5603 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

5604 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

5607 #i‚de‡
GL_NV_evÆu©‹s


5608 
	#GL_NV_evÆu©‹s
 1

	)

5609 #ifde‡
GL_GLEXT_PROTOTYPES


5610 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLsizei
, GLsizei, 
GLöt
, GLöt, 
GLboﬁón
, c⁄° 
GLvoid
 *);

5611 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

5612 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

5613 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLsizei
, GLsizei, 
GLboﬁón
, 
GLvoid
 *);

5614 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
, GLíum, 
GLöt
 *);

5615 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5616 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLöt
 *);

5617 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLÊﬂt
 *);

5618 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
, GLenum);

5620 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° 
	tGLvoid
 *
	tpoöts
);

5621 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5622 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5623 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, 
	tGLvoid
 *
	tpoöts
);

5624 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5625 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5626 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5627 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5628 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

5631 #i‚de‡
GL_NV_∑cked_dïth_°ícû


5632 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

5635 #i‚de‡
GL_NV_ªgi°î_comböîs2


5636 
	#GL_NV_ªgi°î_comböîs2
 1

	)

5637 #ifde‡
GL_GLEXT_PROTOTYPES


5638 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

5639 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5641 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5642 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5645 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


5646 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

5649 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


5650 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

5653 #i‚de‡
GL_NV_ãxtuª_shadî


5654 
	#GL_NV_ãxtuª_shadî
 1

	)

5657 #i‚de‡
GL_NV_ãxtuª_shadî2


5658 
	#GL_NV_ãxtuª_shadî2
 1

	)

5661 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


5662 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

5665 #i‚de‡
GL_NV_vîãx_¥ogøm


5666 
	#GL_NV_vîãx_¥ogøm
 1

	)

5667 #ifde‡
GL_GLEXT_PROTOTYPES


5668 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
, c⁄° 
GLuöt
 *, GLboolean *);

5669 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
, 
GLuöt
);

5670 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

5671 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

5672 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
, 
GLuöt
 *);

5673 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLdoubÀ
 *);

5674 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLÊﬂt
 *);

5675 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5676 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
, 
GLíum
, 
GLubyã
 *);

5677 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLöt
 *);

5678 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

5679 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5680 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5681 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

5682 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
);

5683 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *);

5684 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5685 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

5686 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5687 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

5688 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLdoubÀ
 *);

5689 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLÊﬂt
 *);

5690 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

5691 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
, 
GLuöt
, GLenum, GLenum);

5692 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5693 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
, 
GLdoubÀ
);

5694 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5695 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
, 
GLÊﬂt
);

5696 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5697 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
, 
GLsh‹t
);

5698 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5699 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

5700 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5701 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

5702 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5703 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
, 
GLsh‹t
, GLshort);

5704 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5705 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

5706 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5707 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

5708 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5709 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

5710 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5711 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5712 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5713 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5714 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5715 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

5716 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5717 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

5718 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
, c⁄° 
GLubyã
 *);

5719 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

5720 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5721 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

5722 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

5723 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5724 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

5725 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

5726 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5727 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

5728 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

5729 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5730 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

5731 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *);

5733 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

5734 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

5735 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

5736 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5737 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

5738 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

5739 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5740 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5741 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

5742 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5743 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

5744 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5745 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5746 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

5747 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

5748 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

5749 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5750 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5751 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5752 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5753 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5754 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5755 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

5756 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

5757 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5758 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

5759 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5760 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

5761 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5762 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

5763 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5764 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

5765 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5766 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5767 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5768 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

5769 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5770 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5771 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5772 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5773 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5774 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

5775 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5776 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5777 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5778 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5779 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5780 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

5781 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5782 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

5783 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

5784 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5785 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5786 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

5787 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5788 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5789 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

5790 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5791 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5792 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

5793 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5794 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5795 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

5796 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

5799 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


5800 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

5803 #i‚de‡
GL_SGIX_sˇÀbüs_höt


5804 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

5807 #i‚de‡
GL_OML_öãæa˚


5808 
	#GL_OML_öãæa˚
 1

	)

5811 #i‚de‡
GL_OML_subßm∂e


5812 
	#GL_OML_subßm∂e
 1

	)

5815 #i‚de‡
GL_OML_ªßm∂e


5816 
	#GL_OML_ªßm∂e
 1

	)

5819 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


5820 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

5823 #i‚de‡
GL_ATI_ívm≠_bumpm≠


5824 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

5825 #ifde‡
GL_GLEXT_PROTOTYPES


5826 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
, c⁄° 
GLöt
 *);

5827 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5828 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
, 
GLöt
 *);

5829 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
, 
GLÊﬂt
 *);

5831 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

5832 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

5833 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

5834 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

5837 #i‚de‡
GL_ATI_‰agmít_shadî


5838 
	#GL_ATI_‰agmít_shadî
 1

	)

5839 #ifde‡
GL_GLEXT_PROTOTYPES


5840 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuint);

5841 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
);

5842 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
);

5843 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

5844 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

5845 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
, GLuöt, 
GLíum
);

5846 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
, GLuöt, 
GLíum
);

5847 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint);

5848 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

5849 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

5850 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint);

5851 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

5852 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

5853 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5855 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

5856 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

5857 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

5858 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

5859 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

5860 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

5861 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

5862 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

5863 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

5864 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

5865 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

5866 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

5867 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

5868 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5871 #i‚de‡
GL_ATI_≤_åüngÀs


5872 
	#GL_ATI_≤_åüngÀs
 1

	)

5873 #ifde‡
GL_GLEXT_PROTOTYPES


5874 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
, 
GLöt
);

5875 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
, 
GLÊﬂt
);

5877 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5878 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5881 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


5882 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

5883 #ifde‡
GL_GLEXT_PROTOTYPES


5884 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
, c⁄° 
GLvoid
 *, 
GLíum
);

5885 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
);

5886 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
, GLuöt, 
GLsizei
, c⁄° 
GLvoid
 *, 
GLíum
);

5887 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5888 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5889 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
);

5890 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, 
GLuöt
, GLuint);

5891 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5892 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
, GLíum, 
GLöt
 *);

5893 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
, 
GLíum
, 
GLsizei
, GLuint, GLuint);

5894 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5895 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5897 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	tußge
);

5898 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5899 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

5900 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5901 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5902 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5903 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

5904 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5905 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5906 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

5907 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5908 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5911 #i‚de‡
GL_EXT_vîãx_shadî


5912 
	#GL_EXT_vîãx_shadî
 1

	)

5913 #ifde‡
GL_GLEXT_PROTOTYPES


5914 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

5915 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

5916 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
);

5917 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuint);

5918 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
);

5919 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
, 
GLuöt
, GLuint);

5920 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
, 
GLuöt
, GLuint, GLuint);

5921 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint);

5922 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
, GLuöt, 
GLíum
, GLenum, GLenum, GLenum);

5923 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
, GLuöt, 
GLíum
, GLenum, GLenum, GLenum);

5924 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
, GLuint, GLuint);

5925 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
, GLuint, GLuint);

5926 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
, GLenum, GLenum, GLuint);

5927 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
, 
GLíum
, c⁄° 
GLvoid
 *);

5928 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
, 
GLíum
, c⁄° 
GLvoid
 *);

5929 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
, c⁄° 
GLbyã
 *);

5930 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5931 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

5932 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5933 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5934 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
, c⁄° 
GLubyã
 *);

5935 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
, c⁄° 
GLush‹t
 *);

5936 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
, const GLuint *);

5937 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
, 
GLíum
, GLuöt, c⁄° 
GLvoid
 *);

5938 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
);

5939 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
);

5940 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
, GLenum);

5941 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
, GLenum);

5942 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
, GLenum, GLenum);

5943 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
, GLenum);

5944 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
);

5945 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
, 
GLíum
);

5946 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

5947 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5948 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5949 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

5950 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

5951 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5952 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5953 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

5954 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5955 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5957 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

5958 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

5959 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

5960 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

5961 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

5962 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

5963 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

5964 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

5965 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

5966 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

5967 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

5968 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

5969 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

5970 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

5971 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

5972 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

5973 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

5974 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

5975 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

5976 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

5977 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

5978 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

5979 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

5980 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° 
	tGLvoid
 *
	taddr
);

5981 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

5982 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

5983 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

5984 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

5985 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

5986 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

5987 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

5988 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

5989 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

5990 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

5991 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

5992 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLvoid
* *
	td©a
);

5993 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

5994 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

5995 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

5996 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

5997 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

5998 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

6001 #i‚de‡
GL_ATI_vîãx_°ªams


6002 
	#GL_ATI_vîãx_°ªams
 1

	)

6003 #ifde‡
GL_GLEXT_PROTOTYPES


6004 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
, 
GLsh‹t
);

6005 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6006 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
, 
GLöt
);

6007 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6008 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
, 
GLÊﬂt
);

6009 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6010 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
, 
GLdoubÀ
);

6011 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6012 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
, 
GLsh‹t
, GLshort);

6013 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6014 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
, 
GLöt
, GLint);

6015 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6016 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat);

6017 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6018 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble);

6019 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6020 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

6021 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6022 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
, 
GLöt
, GLint, GLint);

6023 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6024 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

6025 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6026 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

6027 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6028 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

6029 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6030 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

6031 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6032 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

6033 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6034 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

6035 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6036 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
, 
GLbyã
, GLbyte, GLbyte);

6037 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
, c⁄° 
GLbyã
 *);

6038 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

6039 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6040 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
, 
GLöt
, GLint, GLint);

6041 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6042 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

6043 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6044 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

6045 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6046 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
);

6047 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
, 
GLöt
);

6048 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
, 
GLÊﬂt
);

6050 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

6051 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6052 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

6053 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6054 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

6055 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6056 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

6057 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6058 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6059 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6060 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

6061 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6062 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6063 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6064 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6065 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6066 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6067 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6068 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6069 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6070 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6071 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6072 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6073 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6074 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6075 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6076 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6077 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6078 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6079 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6080 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6081 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6082 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

6083 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

6084 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

6085 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6086 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

6087 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6088 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

6089 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6090 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

6091 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6092 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

6093 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6094 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6097 #i‚de‡
GL_ATI_ñemít_¨øy


6098 
	#GL_ATI_ñemít_¨øy
 1

	)

6099 #ifde‡
GL_GLEXT_PROTOTYPES


6100 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
, c⁄° 
GLvoid
 *);

6101 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
, 
GLsizei
);

6102 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
);

6104 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6105 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

6106 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

6109 #i‚de‡
GL_SUN_mesh_¨øy


6110 
	#GL_SUN_mesh_¨øy
 1

	)

6111 #ifde‡
GL_GLEXT_PROTOTYPES


6112 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
, 
GLöt
, 
GLsizei
, GLsizei);

6114 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

6117 #i‚de‡
GL_SUN_¶i˚_accum


6118 
	#GL_SUN_¶i˚_accum
 1

	)

6121 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


6122 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

6125 #i‚de‡
GL_NV_dïth_˛amp


6126 
	#GL_NV_dïth_˛amp
 1

	)

6129 #i‚de‡
GL_NV_oc˛usi⁄_quîy


6130 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

6131 #ifde‡
GL_GLEXT_PROTOTYPES


6132 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
, 
GLuöt
 *);

6133 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

6134 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
);

6135 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
);

6136 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

6137 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6138 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
, 
GLíum
, GLuint *);

6140 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

6141 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

6142 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

6143 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

6144 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

6145 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6146 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

6149 #i‚de‡
GL_NV_poöt_•rôe


6150 
	#GL_NV_poöt_•rôe
 1

	)

6151 #ifde‡
GL_GLEXT_PROTOTYPES


6152 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
, 
GLöt
);

6153 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
, c⁄° 
GLöt
 *);

6155 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6156 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6159 #i‚de‡
GL_NV_ãxtuª_shadî3


6160 
	#GL_NV_ãxtuª_shadî3
 1

	)

6163 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


6164 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

6167 #i‚de‡
GL_EXT_shadow_funcs


6168 
	#GL_EXT_shadow_funcs
 1

	)

6171 #i‚de‡
GL_EXT_°ícû_two_side


6172 
	#GL_EXT_°ícû_two_side
 1

	)

6173 #ifde‡
GL_GLEXT_PROTOTYPES


6174 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
);

6176 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

6179 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


6180 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

6183 #i‚de‡
GL_APPLE_˛õ¡_°‹age


6184 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

6187 #i‚de‡
GL_APPLE_ñemít_¨øy


6188 
	#GL_APPLE_ñemít_¨øy
 1

	)

6189 #ifde‡
GL_GLEXT_PROTOTYPES


6190 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
, c⁄° 
GLvoid
 *);

6191 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
, 
GLöt
, 
GLsizei
);

6192 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
, 
GLuöt
, GLuöt, 
GLöt
, 
GLsizei
);

6193 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei);

6194 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei);

6196 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6197 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6198 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6199 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

6200 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

6203 #i‚de‡
GL_APPLE_„n˚


6204 
	#GL_APPLE_„n˚
 1

	)

6205 #ifde‡
GL_GLEXT_PROTOTYPES


6206 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
, 
GLuöt
 *);

6207 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

6208 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
);

6209 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
);

6210 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
);

6211 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
);

6212 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
, 
GLuöt
);

6213 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
, 
GLöt
);

6215 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

6216 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

6217 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6218 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6219 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6220 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6221 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

6222 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

6225 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


6226 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

6227 #ifde‡
GL_GLEXT_PROTOTYPES


6228 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
);

6229 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

6230 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

6231 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
);

6233 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

6234 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

6235 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

6236 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

6239 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


6240 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

6241 #ifde‡
GL_GLEXT_PROTOTYPES


6242 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
, 
GLvoid
 *);

6243 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
, 
GLvoid
 *);

6244 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
, 
GLöt
);

6246 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

6247 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

6248 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6251 #i‚de‡
GL_APPLE_ycb¸_422


6252 
	#GL_APPLE_ycb¸_422
 1

	)

6255 #i‚de‡
GL_S3_s3tc


6256 
	#GL_S3_s3tc
 1

	)

6259 #i‚de‡
GL_ATI_døw_buf„rs


6260 
	#GL_ATI_døw_buf„rs
 1

	)

6261 #ifde‡
GL_GLEXT_PROTOTYPES


6262 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
, c⁄° 
GLíum
 *);

6264 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6267 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


6268 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

6274 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


6275 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

6278 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


6279 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

6282 #i‚de‡
GL_NV_Êﬂt_buf„r


6283 
	#GL_NV_Êﬂt_buf„r
 1

	)

6286 #i‚de‡
GL_NV_‰agmít_¥ogøm


6287 
	#GL_NV_‰agmít_¥ogøm
 1

	)

6289 #ifde‡
GL_GLEXT_PROTOTYPES


6290 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

6291 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

6292 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

6293 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, c⁄° 
GLdoubÀ
 *);

6294 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLÊﬂt
 *);

6295 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLdoubÀ
 *);

6297 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6298 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6299 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6300 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6301 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

6302 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

6305 #i‚de‡
GL_NV_hÆf_Êﬂt


6306 
	#GL_NV_hÆf_Êﬂt
 1

	)

6307 #ifde‡
GL_GLEXT_PROTOTYPES


6308 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
, GLhalfNV);

6309 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *);

6310 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6311 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *);

6312 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6313 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *);

6314 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6315 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *);

6316 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6317 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *);

6318 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6319 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *);

6320 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
);

6321 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *);

6322 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
, GLhalfNV);

6323 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *);

6324 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6325 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *);

6326 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6327 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *);

6328 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
, 
GLhÆfNV
);

6329 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

6330 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV);

6331 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

6332 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV, GLhalfNV);

6333 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

6334 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6335 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

6336 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
);

6337 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *);

6338 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6339 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *);

6340 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
);

6341 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *);

6342 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
, 
GLhÆfNV
);

6343 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

6344 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV);

6345 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

6346 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV, GLhalfNV);

6347 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

6348 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6349 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

6350 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

6351 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

6352 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

6353 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

6355 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

6356 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6357 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

6358 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6359 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

6360 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6361 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

6362 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6363 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

6364 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6365 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

6366 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6367 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

6368 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6369 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

6370 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6371 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

6372 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6373 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

6374 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6375 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

6376 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6377 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

6378 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6379 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

6380 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6381 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

6382 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6383 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

6384 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

6385 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

6386 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6387 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

6388 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

6389 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

6390 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6391 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

6392 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6393 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

6394 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6395 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

6396 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6397 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6398 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6399 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6400 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6403 #i‚de‡
GL_NV_pixñ_d©a_ønge


6404 
	#GL_NV_pixñ_d©a_ønge
 1

	)

6405 #ifde‡
GL_GLEXT_PROTOTYPES


6406 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
, 
GLsizei
, 
GLvoid
 *);

6407 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
);

6409 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

6410 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

6413 #i‚de‡
GL_NV_¥imôive_ª°¨t


6414 
	#GL_NV_¥imôive_ª°¨t
 1

	)

6415 #ifde‡
GL_GLEXT_PROTOTYPES


6416 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

6417 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
);

6419 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

6420 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

6423 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


6424 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

6427 #i‚de‡
GL_NV_vîãx_¥ogøm2


6428 
	#GL_NV_vîãx_¥ogøm2
 1

	)

6431 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


6432 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

6433 #ifde‡
GL_GLEXT_PROTOTYPES


6434 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
);

6435 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
);

6437 
GLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6438 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6441 #i‚de‡
GL_ATI_£∑øã_°ícû


6442 
	#GL_ATI_£∑øã_°ícû
 1

	)

6443 #ifde‡
GL_GLEXT_PROTOTYPES


6444 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
, GLenum, GLenum, GLenum);

6445 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
, GLíum, 
GLöt
, 
GLuöt
);

6447 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

6448 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

6451 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


6452 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

6453 #ifde‡
GL_GLEXT_PROTOTYPES


6454 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, GLuint, GLuint);

6455 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

6456 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6458 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

6459 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6460 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6463 #i‚de‡
GL_OES_ªad_f‹m©


6464 
	#GL_OES_ªad_f‹m©
 1

	)

6467 #i‚de‡
GL_EXT_dïth_bounds_ã°


6468 
	#GL_EXT_dïth_bounds_ã°
 1

	)

6469 #ifde‡
GL_GLEXT_PROTOTYPES


6470 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
, GLclampd);

6472 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

6475 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


6476 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

6479 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


6480 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

6481 #ifde‡
GL_GLEXT_PROTOTYPES


6482 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
, GLenum);

6484 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6487 #i‚de‡
GL_MESA_∑ck_övît


6488 
	#GL_MESA_∑ck_övît
 1

	)

6491 #i‚de‡
GL_MESA_ycb¸_ãxtuª


6492 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

6495 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


6496 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

6499 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


6500 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

6503 #i‚de‡
GL_NV_‰agmít_¥ogøm2


6504 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

6507 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


6508 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

6511 #i‚de‡
GL_NV_vîãx_¥ogøm3


6512 
	#GL_NV_vîãx_¥ogøm3
 1

	)

6515 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


6516 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

6517 #ifde‡
GL_GLEXT_PROTOTYPES


6518 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
);

6519 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
, 
GLuöt
);

6520 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

6521 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
, 
GLuöt
 *);

6522 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei);

6523 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

6524 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
);

6525 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
, 
GLuöt
);

6526 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

6527 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
, 
GLuöt
 *);

6528 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLenum);

6529 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
);

6530 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
);

6531 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
, GLint);

6532 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
);

6533 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

6534 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
);

6536 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

6537 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

6538 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

6539 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

6540 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6541 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6542 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

6543 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

6544 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

6545 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

6546 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6547 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6548 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6549 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

6550 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

6551 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6552 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6555 #i‚de‡
GL_GREMEDY_°rög_m¨kî


6556 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

6557 #ifde‡
GL_GLEXT_PROTOTYPES


6558 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
, c⁄° 
GLvoid
 *);

6560 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

6564 #ifde‡
__˝lu•lus


	@SDL-win/include/SDL/SDL_platform.h

27 #i‚de‡
_SDL_∂©f‹m_h


28 
	#_SDL_∂©f‹m_h


	)

30 #i‡
deföed
(
_AIX
)

31 #unde‡
__AIX__


32 
	#__AIX__
 1

	)

34 #i‡
deföed
(
__BEOS__
)

35 #unde‡
__BEOS__


36 
	#__BEOS__
 1

	)

38 #i‡
deföed
(
__HAIKU__
)

39 #unde‡
__HAIKU__


40 
	#__HAIKU__
 1

	)

42 #i‡
deföed
(
bsdi
Ë|| deföed(
__bsdi
Ë|| deföed(
__bsdi__
)

43 #unde‡
__BSDI__


44 
	#__BSDI__
 1

	)

46 #i‡
deföed
(
_¨ch_dªamˇ°
)

47 #unde‡
__DREAMCAST__


48 
	#__DREAMCAST__
 1

	)

50 #i‡
deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD_kî√l__
Ë|| deföed(
__Døg⁄Fly__
)

51 #unde‡
__FREEBSD__


52 
	#__FREEBSD__
 1

	)

54 #i‡
deföed
(
__HAIKU__
)

55 #unde‡
__HAIKU__


56 
	#__HAIKU__
 1

	)

58 #i‡
deföed
(
hpux
Ë|| deföed(
__hpux
Ë|| deföed(
__hpux__
)

59 #unde‡
__HPUX__


60 
	#__HPUX__
 1

	)

62 #i‡
deföed
(
sgi
Ë|| deföed(
__sgi
Ë|| deföed(
__sgi__
Ë|| deföed(
_SGI_SOURCE
)

63 #unde‡
__IRIX__


64 
	#__IRIX__
 1

	)

66 #i‡
deföed
(
löux
Ë|| deföed(
__löux
Ë|| deföed(
__löux__
)

67 #unde‡
__LINUX__


68 
	#__LINUX__
 1

	)

70 #i‡
deföed
(
__APPLE__
)

71 #unde‡
__MACOSX__


72 
	#__MACOSX__
 1

	)

73 #ñi‡
deföed
(
macötosh
)

74 #unde‡
__MACOS__


75 
	#__MACOS__
 1

	)

77 #i‡
deföed
(
__NëBSD__
)

78 #unde‡
__NETBSD__


79 
	#__NETBSD__
 1

	)

81 #i‡
deföed
(
__O≥nBSD__
)

82 #unde‡
__OPENBSD__


83 
	#__OPENBSD__
 1

	)

85 #i‡
deföed
(
__OS2__
)

86 #unde‡
__OS2__


87 
	#__OS2__
 1

	)

89 #i‡
deföed
(
osf
Ë|| deföed(
__osf
Ë|| deföed(
__osf__
Ë|| deföed(
_OSF_SOURCE
)

90 #unde‡
__OSF__


91 
	#__OSF__
 1

	)

93 #i‡
deföed
(
__QNXNTO__
)

94 #unde‡
__QNXNTO__


95 
	#__QNXNTO__
 1

	)

97 #i‡
deföed
(
riscos
Ë|| deföed(
__riscos
Ë|| deföed(
__riscos__
)

98 #unde‡
__RISCOS__


99 
	#__RISCOS__
 1

	)

101 #i‡
deföed
(
__SVR4
)

102 #unde‡
__SOLARIS__


103 
	#__SOLARIS__
 1

	)

105 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN32
)

106 #unde‡
__WIN32__


107 
	#__WIN32__
 1

	)

	@SDL-win/include/SDL/SDL_quit.h

27 #i‚de‡
_SDL_quô_h


28 
	#_SDL_quô_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

52 
	#SDL_QuôReque°ed
() \

53 (
	`SDL_PumpEvíts
(), 
	`SDL_PìpEvíts
(
NULL
,0,
SDL_PEEKEVENT
,
SDL_QUITMASK
))

	)

	@SDL-win/include/SDL/SDL_rwops.h

28 #i‚de‡
_SDL_rw›s_h


29 
	#_SDL_rw›s_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


42 
	sSDL_RW›s
 {

47 (
SDLCALL
 *
£ek
)(
SDL_RW›s
 *
c⁄ãxt
, 
off£t
, 
whí˚
);

53 (
SDLCALL
 *
ªad
)(
SDL_RW›s
 *
c⁄ãxt
, *
±r
, 
size
, 
maxnum
);

59 (
SDLCALL
 *
wrôe
)(
SDL_RW›s
 *
c⁄ãxt
, c⁄° *
±r
, 
size
, 
num
);

62 (
SDLCALL
 *
˛o£
)(
SDL_RW›s
 *
c⁄ãxt
);

64 
Uöt32
 
ty≥
;

66 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__SYMBIAN32__
)

68 
≠≥nd
;

69 *
h
;

71 *
d©a
;

72 
size
;

73 
À·
;

74 } 
buf„r
;

75 } 
wö32io
;

77 #ifde‡
HAVE_STDIO_H


79 
auto˛o£
;

80 
FILE
 *
Â
;

81 } 
°dio
;

84 
Uöt8
 *
ba£
;

85 
Uöt8
 *
hîe
;

86 
Uöt8
 *
°›
;

87 } 
mem
;

89 *
d©a1
;

90 } 
unknown
;

91 } 
hiddí
;

93 } 
	tSDL_RW›s
;

99 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_RWFromFûe
(c⁄° *
fûe
, c⁄° *
mode
);

101 #ifde‡
HAVE_STDIO_H


102 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_RWFromFP
(
FILE
 *
Â
, 
auto˛o£
);

105 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_RWFromMem
(*
mem
, 
size
);

106 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_RWFromC⁄°Mem
(c⁄° *
mem
, 
size
);

108 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_AŒocRW
();

109 
DECLSPEC
 
SDLCALL
 
SDL_FªeRW
(
SDL_RW›s
 *
¨ó
);

115 
	#RW_SEEK_SET
 0

	)

116 
	#RW_SEEK_CUR
 1

	)

117 
	#RW_SEEK_END
 2

	)

122 
	#SDL_RW£ek
(
˘x
, 
off£t
, 
whí˚
Ë(˘x)->
	`£ek
(˘x, off£t, whí˚)

	)

123 
	#SDL_RWãŒ
(
˘x
Ë(˘x)->
	`£ek
(˘x, 0, 
RW_SEEK_CUR
)

	)

124 
	#SDL_RWªad
(
˘x
, 
±r
, 
size
, 
n
Ë(˘x)->
	`ªad
(˘x,Öå, size,Ç)

	)

125 
	#SDL_RWwrôe
(
˘x
, 
±r
, 
size
, 
n
Ë(˘x)->
	`wrôe
(˘x,Öå, size,Ç)

	)

126 
	#SDL_RW˛o£
(
˘x
Ë(˘x)->
	`˛o£
(˘x)

	)

131 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_RódLE16
(
SDL_RW›s
 *
§c
);

132 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_RódBE16
(
SDL_RW›s
 *
§c
);

133 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_RódLE32
(
SDL_RW›s
 *
§c
);

134 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_RódBE32
(
SDL_RW›s
 *
§c
);

135 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_RódLE64
(
SDL_RW›s
 *
§c
);

136 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_RódBE64
(
SDL_RW›s
 *
§c
);

141 
DECLSPEC
 
SDLCALL
 
SDL_WrôeLE16
(
SDL_RW›s
 *
d°
, 
Uöt16
 
vÆue
);

142 
DECLSPEC
 
SDLCALL
 
SDL_WrôeBE16
(
SDL_RW›s
 *
d°
, 
Uöt16
 
vÆue
);

143 
DECLSPEC
 
SDLCALL
 
SDL_WrôeLE32
(
SDL_RW›s
 *
d°
, 
Uöt32
 
vÆue
);

144 
DECLSPEC
 
SDLCALL
 
SDL_WrôeBE32
(
SDL_RW›s
 *
d°
, 
Uöt32
 
vÆue
);

145 
DECLSPEC
 
SDLCALL
 
SDL_WrôeLE64
(
SDL_RW›s
 *
d°
, 
Uöt64
 
vÆue
);

146 
DECLSPEC
 
SDLCALL
 
SDL_WrôeBE64
(
SDL_RW›s
 *
d°
, 
Uöt64
 
vÆue
);

150 #ifde‡
__˝lu•lus


153 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_stdinc.h

27 #i‚de‡
_SDL_°döc_h


28 
	#_SDL_°döc_h


	)

30 
	~"SDL_c⁄fig.h
"

33 #ifde‡
HAVE_SYS_TYPES_H


34 
	~<sys/ty≥s.h
>

36 #ifde‡
HAVE_STDIO_H


37 
	~<°dio.h
>

39 #i‡
deföed
(
STDC_HEADERS
)

40 
	~<°dlib.h
>

41 
	~<°ddef.h
>

42 
	~<°d¨g.h
>

44 #i‡
deföed
(
HAVE_STDLIB_H
)

45 
	~<°dlib.h
>

46 #ñi‡
deföed
(
HAVE_MALLOC_H
)

47 
	~<mÆloc.h
>

49 #i‡
deföed
(
HAVE_STDDEF_H
)

50 
	~<°ddef.h
>

52 #i‡
deföed
(
HAVE_STDARG_H
)

53 
	~<°d¨g.h
>

56 #ifde‡
HAVE_STRING_H


57 #i‡!
deföed
(
STDC_HEADERS
Ë&& deföed(
HAVE_MEMORY_H
)

58 
	~<mem‹y.h
>

60 
	~<°rög.h
>

62 #ifde‡
HAVE_STRINGS_H


63 
	~<°rögs.h
>

65 #i‡
deföed
(
HAVE_INTTYPES_H
)

66 
	~<öây≥s.h
>

67 #ñi‡
deföed
(
HAVE_STDINT_H
)

68 
	~<°döt.h
>

70 #ifde‡
HAVE_CTYPE_H


71 
	~<˘y≥.h
>

73 #i‡
deföed
(
HAVE_ICONV
Ë&& deföed(
HAVE_ICONV_H
)

74 
	~<ic⁄v.h
>

78 
	#SDL_¨øysize
(
¨øy
Ë(◊ºay)/◊ºay[0]))

	)

79 
	#SDL_TABLESIZE
(
èbÀ
Ë
	`SDL_¨øysize
—abÀ)

	)

83 #ifde‡
__˝lu•lus


84 
	#SDL_ªöãΩªt_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë
ªöãΩªt_ˇ°
<ty≥>”x¥essi⁄)

	)

85 
	#SDL_°©ic_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë
°©ic_ˇ°
<ty≥>”x¥essi⁄)

	)

87 
	#SDL_ªöãΩªt_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë(—y≥)”x¥essi⁄))

	)

88 
	#SDL_°©ic_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë(—y≥)”x¥essi⁄))

	)

94 
	mSDL_FALSE
 = 0,

95 
	mSDL_TRUE
 = 1

96 } 
	tSDL_boﬁ
;

98 
öt8_t
 
	tSöt8
;

99 
uöt8_t
 
	tUöt8
;

100 
öt16_t
 
	tSöt16
;

101 
uöt16_t
 
	tUöt16
;

102 
öt32_t
 
	tSöt32
;

103 
uöt32_t
 
	tUöt32
;

105 #ifde‡
SDL_HAS_64BIT_TYPE


106 
öt64_t
 
	tSöt64
;

107 #i‚de‡
SYMBIAN32_GCCE


108 
uöt64_t
 
	tUöt64
;

113 
Uöt32
 
	mhi
;

114 
Uöt32
 
	mlo
;

115 } 
	tUöt64
, 
	tSöt64
;

122 
	#SDL_COMPILE_TIME_ASSERT
(
«me
, 
x
) \

123 
	tSDL_dummy_
 ## 
	t«me
[(
x
Ë* 2 - 1]

	)

125 
	tSDL_COMPILE_TIME_ASSERT
(
	tuöt8
, (
	tUöt8
) == 1);

126 
SDL_COMPILE_TIME_ASSERT
(
söt8
, (
Söt8
) == 1);

127 
SDL_COMPILE_TIME_ASSERT
(
uöt16
, (
Uöt16
) == 2);

128 
SDL_COMPILE_TIME_ASSERT
(
söt16
, (
Söt16
) == 2);

129 
SDL_COMPILE_TIME_ASSERT
(
uöt32
, (
Uöt32
) == 4);

130 
SDL_COMPILE_TIME_ASSERT
(
söt32
, (
Söt32
) == 4);

131 
SDL_COMPILE_TIME_ASSERT
(
uöt64
, (
Uöt64
) == 8);

132 
SDL_COMPILE_TIME_ASSERT
(
söt64
, (
Söt64
) == 8);

142 #ifde‡
__MWERKS__


143 #¥agm®
íumßlwaysöt
 
⁄


147 
	mDUMMY_ENUM_VALUE


148 } 
	tSDL_DUMMY_ENUM
;

150 #i‚de‡
__NDS__


151 
SDL_COMPILE_TIME_ASSERT
(, (
SDL_DUMMY_ENUM
) == ());

155 
	~"begö_code.h
"

157 #ifde‡
__˝lu•lus


161 #ifde‡
HAVE_MALLOC


162 
	#SDL_mÆloc
 
mÆloc


	)

164 
DECLSPEC
 * 
SDLCALL
 
SDL_mÆloc
(
size_t
 
size
);

167 #ifde‡
HAVE_CALLOC


168 
	#SDL_ˇŒoc
 
ˇŒoc


	)

170 
DECLSPEC
 * 
SDLCALL
 
SDL_ˇŒoc
(
size_t
 
nmemb
, size_à
size
);

173 #ifde‡
HAVE_REALLOC


174 
	#SDL_ªÆloc
 
ªÆloc


	)

176 
DECLSPEC
 * 
SDLCALL
 
SDL_ªÆloc
(*
mem
, 
size_t
 
size
);

179 #ifde‡
HAVE_FREE


180 
	#SDL_‰ì
 
‰ì


	)

182 
DECLSPEC
 
SDLCALL
 
SDL_‰ì
(*
mem
);

185 #i‡
deföed
(
HAVE_ALLOCA
Ë&& !deföed(
Æloˇ
)

186 #i‡
deföed
(
HAVE_ALLOCA_H
)

187 
	~<Æloˇ.h
>

188 #ñi‡
deföed
(
__GNUC__
)

189 
	#Æloˇ
 
__buûtö_Æloˇ


	)

190 #ñi‡
deföed
(
_MSC_VER
)

191 
	~<mÆloc.h
>

192 
	#Æloˇ
 
_Æloˇ


	)

193 #ñi‡
deföed
(
__WATCOMC__
)

194 
	~<mÆloc.h
>

195 #ñi‡
deföed
(
__BORLANDC__
)

196 
	~<mÆloc.h
>

197 #ñi‡
deföed
(
__DMC__
)

198 
	~<°dlib.h
>

199 #ñi‡
deföed
(
__AIX__
)

200 #¥agm®
Æloˇ


201 #ñi‡
deföed
(
__MRC__
)

202 *
Æloˇ
 ();

204 *
Æloˇ
 ();

207 #ifde‡
HAVE_ALLOCA


208 
	#SDL_°ack_Æloc
(
ty≥
, 
cou¡
Ë—y≥*)
	`Æloˇ
(—y≥)*(cou¡))

	)

209 
	#SDL_°ack_‰ì
(
d©a
)

	)

211 
	#SDL_°ack_Æloc
(
ty≥
, 
cou¡
Ë—y≥*)
	`SDL_mÆloc
(—y≥)*(cou¡))

	)

212 
	#SDL_°ack_‰ì
(
d©a
Ë
	`SDL_‰ì
(d©a)

	)

215 #ifde‡
HAVE_GETENV


216 
	#SDL_gëív
 
gëív


	)

218 
DECLSPEC
 * 
SDLCALL
 
SDL_gëív
(c⁄° *
«me
);

221 #ifde‡
HAVE_PUTENV


222 
	#SDL_puãnv
 
puãnv


	)

224 
DECLSPEC
 
SDLCALL
 
SDL_puãnv
(c⁄° *
v¨übÀ
);

227 #ifde‡
HAVE_QSORT


228 
	#SDL_qs‹t
 
qs‹t


	)

230 
DECLSPEC
 
SDLCALL
 
SDL_qs‹t
(*
ba£
, 
size_t
 
nmemb
, size_à
size
,

231 (*
com∑ª
)(const *, const *));

234 #ifde‡
HAVE_ABS


235 
	#SDL_abs
 
abs


	)

237 
	#SDL_abs
(
X
Ë((XË< 0 ? -(XË: (X))

	)

240 
	#SDL_mö
(
x
, 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

241 
	#SDL_max
(
x
, 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

243 #ifde‡
HAVE_CTYPE_H


244 
	#SDL_isdigô
(
X
Ë
	`isdigô
(X)

	)

245 
	#SDL_is•a˚
(
X
Ë
	`is•a˚
(X)

	)

246 
	#SDL_touµî
(
X
Ë
	`touµî
(X)

	)

247 
	#SDL_tﬁowî
(
X
Ë
	`tﬁowî
(X)

	)

249 
	#SDL_isdigô
(
X
Ë(((XË>'0'Ë&& ((XË<'9'))

	)

250 
	#SDL_is•a˚
(
X
Ë(((XË=' 'Ë|| ((XË='\t'Ë|| ((XË='\r'Ë|| ((XË='\n'))

	)

251 
	#SDL_touµî
(
X
Ë(((XË>'a'Ë&& ((XË<'z'Ë? ('A'+((X)-'a')Ë: (X))

	)

252 
	#SDL_tﬁowî
(
X
Ë(((XË>'A'Ë&& ((XË<'Z'Ë? ('a'+((X)-'A')Ë: (X))

	)

255 #ifde‡
HAVE_MEMSET


256 
	#SDL_mem£t
 
mem£t


	)

258 
DECLSPEC
 * 
SDLCALL
 
SDL_mem£t
(*
d°
, 
c
, 
size_t
 
Àn
);

261 #i‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

262 
	#SDL_mem£t4
(
d°
, 
vÆ
, 
Àn
) \

264 
u0
, 
u1
, 
u2
; \

265 
__asm__
 
	`__vﬁ©ûe__
 ( \

268 : "=&D" (
u0
), "=&a" (
u1
), "=&c" (
u2
) \

269 : "0" (
d°
), "1" (
vÆ
), "2" (
	`SDL_°©ic_ˇ°
(
Uöt32
, 
Àn
)) \

271 } 0)

	)

273 #i‚de‡
SDL_mem£t4


274 
	#SDL_mem£t4
(
d°
, 
vÆ
, 
Àn
) \

276 
_cou¡
 = (
Àn
); \

277 
_n
 = (
_cou¡
 + 3) / 4; \

278 
Uöt32
 *
_p
 = 
	`SDL_°©ic_ˇ°
(Uöt32 *, 
d°
); \

279 
Uöt32
 
_vÆ
 = (
vÆ
); \

280 i‡(
Àn
 == 0) ; \

281 
_cou¡
 % 4) { \

282 0: dÿ{ *
_p
++ = 
_vÆ
; \

283 3: *
_p
++ = 
_vÆ
; \

284 2: *
_p
++ = 
_vÆ
; \

285 1: *
_p
++ = 
_vÆ
; \

286 }  --
_n
 ); \

288 } 0)

	)

292 #i‡
deföed
(
__MACH__
Ë&& deföed(
__APPLE__
)

293 
	#SDL_mem˝y
(
d°
, 
§c
, 
Àn
Ë
	`mem˝y
(d°, src,Üí)

	)

294 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

295 
	#SDL_mem˝y
(
d°
, 
§c
, 
Àn
) \

297 
u0
, 
u1
, 
u2
; \

298 
__asm__
 
	`__vﬁ©ûe__
 ( \

308 : "=&c" (
u0
), "=&D" (
u1
), "=&S" (
u2
) \

309 : "0" (
	`SDL_°©ic_ˇ°
(, 
Àn
)/4), "q" (Àn), "1" (
d°
),"2" (
§c
) \

311 } 0)

	)

313 #i‚de‡
SDL_mem˝y


314 #ifde‡
HAVE_MEMCPY


315 
	#SDL_mem˝y
 
mem˝y


	)

316 #ñi‡
deföed
(
HAVE_BCOPY
)

317 
	#SDL_mem˝y
(
d
, 
s
, 
n
Ë
	`bc›y
((s), (d), (n))

	)

319 
DECLSPEC
 * 
SDLCALL
 
SDL_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

324 #i‡
deföed
(
__MACH__
Ë&& deföed(
__APPLE__
)

325 
	#SDL_mem˝y4
(
d°
, 
§c
, 
Àn
Ë
	`mem˝y
(d°, src, (Àn)*4)

	)

326 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

327 
	#SDL_mem˝y4
(
d°
, 
§c
, 
Àn
) \

329 
ecx
, 
edi
, 
esi
; \

330 
__asm__
 
	`__vﬁ©ûe__
 ( \

333 : "=&c" (
ecx
), "=&D" (
edi
), "=&S" (
esi
) \

334 : "0" (
	`SDL_°©ic_ˇ°
(, 
Àn
)), "1" (
d°
), "2" (
§c
) \

336 } 0)

	)

338 #i‚de‡
SDL_mem˝y4


339 
	#SDL_mem˝y4
(
d°
, 
§c
, 
Àn
Ë
	`SDL_mem˝y
(d°, src, (ÀnË<< 2)

	)

342 #i‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

343 
	#SDL_ªv˝y
(
d°
, 
§c
, 
Àn
) \

345 
u0
, 
u1
, 
u2
; \

346 *
d°p
 = 
	`SDL_°©ic_ˇ°
(*, 
d°
); \

347 *
§˝
 = 
	`SDL_°©ic_ˇ°
(*, 
§c
); \

348 
n
 = (
Àn
); \

349 i‡–
n
 >= 4 ) { \

350 
__asm__
 
	`__vﬁ©ûe__
 ( \

354 : "=&c" (
u0
), "=&D" (
u1
), "=&S" (
u2
) \

355 : "0" (
n
 >> 2), \

356 "1" (
d°p
+(
n
-4)), "2" (
§˝
+(n-4)) \

359 
n
 & 3) { \

360 3: 
d°p
[2] = 
§˝
[2]; \

361 2: 
d°p
[1] = 
§˝
[1]; \

362 1: 
d°p
[0] = 
§˝
[0]; \

367 } 0)

	)

369 #i‚de‡
SDL_ªv˝y


370 
DECLSPEC
 * 
SDLCALL
 
SDL_ªv˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

373 #ifde‡
HAVE_MEMMOVE


374 
	#SDL_memmove
 
memmove


	)

375 #ñi‡
deföed
(
HAVE_BCOPY
)

376 
	#SDL_memmove
(
d
, 
s
, 
n
Ë
	`bc›y
((s), (d), (n))

	)

378 
	#SDL_memmove
(
d°
, 
§c
, 
Àn
) \

380 i‡–
d°
 < 
§c
 ) { \

381 
	`SDL_mem˝y
(
d°
, 
§c
, 
Àn
); \

383 
	`SDL_ªv˝y
(
d°
, 
§c
, 
Àn
); \

385 } 0)

	)

388 #ifde‡
HAVE_MEMCMP


389 
	#SDL_memcmp
 
memcmp


	)

391 
DECLSPEC
 
SDLCALL
 
SDL_memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

394 #ifde‡
HAVE_STRLEN


395 
	#SDL_°æí
 
°æí


	)

397 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_°æí
(c⁄° *
°rög
);

400 #ifde‡
HAVE_STRLCPY


401 
	#SDL_°æ˝y
 
°æ˝y


	)

403 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
maxÀn
);

406 #ifde‡
HAVE_STRLCAT


407 
	#SDL_°æˇt
 
°æˇt


	)

409 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_°æˇt
(*
d°
, c⁄° *
§c
, size_à
maxÀn
);

412 #ifde‡
HAVE_STRDUP


413 
	#SDL_°rdup
 
°rdup


	)

415 
DECLSPEC
 * 
SDLCALL
 
SDL_°rdup
(c⁄° *
°rög
);

418 #ifde‡
HAVE__STRREV


419 
	#SDL_°ºev
 
_°ºev


	)

421 
DECLSPEC
 * 
SDLCALL
 
SDL_°ºev
(*
°rög
);

424 #ifde‡
HAVE__STRUPR


425 
	#SDL_°ru¥
 
_°ru¥


	)

427 
DECLSPEC
 * 
SDLCALL
 
SDL_°ru¥
(*
°rög
);

430 #ifde‡
HAVE__STRLWR


431 
	#SDL_°æwr
 
_°æwr


	)

433 
DECLSPEC
 * 
SDLCALL
 
SDL_°æwr
(*
°rög
);

436 #ifde‡
HAVE_STRCHR


437 
	#SDL_°rchr
 
°rchr


	)

438 #ñi‡
deföed
(
HAVE_INDEX
)

439 
	#SDL_°rchr
 
ödex


	)

441 
DECLSPEC
 * 
SDLCALL
 
SDL_°rchr
(c⁄° *
°rög
, 
c
);

444 #ifde‡
HAVE_STRRCHR


445 
	#SDL_°ºchr
 
°ºchr


	)

446 #ñi‡
deföed
(
HAVE_RINDEX
)

447 
	#SDL_°ºchr
 
rödex


	)

449 
DECLSPEC
 * 
SDLCALL
 
SDL_°ºchr
(c⁄° *
°rög
, 
c
);

452 #ifde‡
HAVE_STRSTR


453 
	#SDL_°r°r
 
°r°r


	)

455 
DECLSPEC
 * 
SDLCALL
 
SDL_°r°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

458 #ifde‡
HAVE_ITOA


459 
	#SDL_ôﬂ
 
ôﬂ


	)

461 
	#SDL_ôﬂ
(
vÆue
, 
°rög
, 
ødix
Ë
	`SDL_…ﬂ
(()vÆue, såög,Ñadix)

	)

464 #ifde‡
HAVE__LTOA


465 
	#SDL_…ﬂ
 
_…ﬂ


	)

467 
DECLSPEC
 * 
SDLCALL
 
SDL_…ﬂ
(
vÆue
, *
°rög
, 
ødix
);

470 #ifde‡
HAVE__UITOA


471 
	#SDL_uôﬂ
 
_uôﬂ


	)

473 
	#SDL_uôﬂ
(
vÆue
, 
°rög
, 
ødix
Ë
	`SDL_u…ﬂ
(()vÆue, såög,Ñadix)

	)

476 #ifde‡
HAVE__ULTOA


477 
	#SDL_u…ﬂ
 
_u…ﬂ


	)

479 
DECLSPEC
 * 
SDLCALL
 
SDL_u…ﬂ
(
vÆue
, *
°rög
, 
ødix
);

482 #ifde‡
HAVE_STRTOL


483 
	#SDL_°πﬁ
 
°πﬁ


	)

485 
DECLSPEC
 
SDLCALL
 
SDL_°πﬁ
(c⁄° *
°rög
, **
ídp
, 
ba£
);

488 #ifde‡
HAVE_STRTOUL


489 
	#SDL_°πoul
 
°πoul


	)

491 
DECLSPEC
 
SDLCALL
 
SDL_°πoul
(c⁄° *
°rög
, **
ídp
, 
ba£
);

494 #ifde‡
SDL_HAS_64BIT_TYPE


496 #ifde‡
HAVE__I64TOA


497 
	#SDL_Œtﬂ
 
_i64tﬂ


	)

499 
DECLSPEC
 * 
SDLCALL
 
SDL_Œtﬂ
(
Söt64
 
vÆue
, *
°rög
, 
ødix
);

502 #ifde‡
HAVE__UI64TOA


503 
	#SDL_uŒtﬂ
 
_ui64tﬂ


	)

505 
DECLSPEC
 * 
SDLCALL
 
SDL_uŒtﬂ
(
Uöt64
 
vÆue
, *
°rög
, 
ødix
);

508 #ifde‡
HAVE_STRTOLL


509 
	#SDL_°πﬁl
 
°πﬁl


	)

511 
DECLSPEC
 
Söt64
 
SDLCALL
 
SDL_°πﬁl
(c⁄° *
°rög
, **
ídp
, 
ba£
);

514 #ifde‡
HAVE_STRTOULL


515 
	#SDL_°πouŒ
 
°πouŒ


	)

517 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_°πouŒ
(c⁄° *
°rög
, **
ídp
, 
ba£
);

522 #ifde‡
HAVE_STRTOD


523 
	#SDL_°πod
 
°πod


	)

525 
DECLSPEC
 
SDLCALL
 
SDL_°πod
(c⁄° *
°rög
, **
ídp
);

528 #ifde‡
HAVE_ATOI


529 
	#SDL_©oi
 
©oi


	)

531 
	#SDL_©oi
(
X
Ë
	`SDL_°πﬁ
(X, 
NULL
, 0)

	)

534 #ifde‡
HAVE_ATOF


535 
	#SDL_©of
 
©of


	)

537 
	#SDL_©of
(
X
Ë
	`SDL_°πod
(X, 
NULL
)

	)

540 #ifde‡
HAVE_STRCMP


541 
	#SDL_°rcmp
 
°rcmp


	)

543 
DECLSPEC
 
SDLCALL
 
SDL_°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

546 #ifde‡
HAVE_STRNCMP


547 
	#SDL_°∫cmp
 
°∫cmp


	)

549 
DECLSPEC
 
SDLCALL
 
SDL_°∫cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
size_t
 
maxÀn
);

552 #ifde‡
HAVE_STRCASECMP


553 
	#SDL_°rˇ£cmp
 
°rˇ£cmp


	)

554 #ñi‡
deföed
(
HAVE__STRICMP
)

555 
	#SDL_°rˇ£cmp
 
_°ricmp


	)

557 
DECLSPEC
 
SDLCALL
 
SDL_°rˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
);

560 #ifde‡
HAVE_STRNCASECMP


561 
	#SDL_°∫ˇ£cmp
 
°∫ˇ£cmp


	)

562 #ñi‡
deföed
(
HAVE__STRNICMP
)

563 
	#SDL_°∫ˇ£cmp
 
_°∫icmp


	)

565 
DECLSPEC
 
SDLCALL
 
SDL_°∫ˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
size_t
 
maxÀn
);

568 #ifde‡
HAVE_SSCANF


569 
	#SDL_ssˇnf
 
ssˇnf


	)

571 
DECLSPEC
 
SDLCALL
 
SDL_ssˇnf
(c⁄° *
ãxt
, c⁄° *
fmt
, ...);

574 #ifde‡
HAVE_SNPRINTF


575 
	#SDL_¢¥ötf
 
¢¥ötf


	)

577 
DECLSPEC
 
SDLCALL
 
SDL_¢¥ötf
(*
ãxt
, 
size_t
 
maxÀn
, c⁄° *
fmt
, ...);

580 #ifde‡
HAVE_VSNPRINTF


581 
	#SDL_v¢¥ötf
 
v¢¥ötf


	)

583 
DECLSPEC
 
SDLCALL
 
SDL_v¢¥ötf
(*
ãxt
, 
size_t
 
maxÀn
, c⁄° *
fmt
, 
va_li°
 
≠
);

590 
	#SDL_ICONV_ERROR
 (
size_t
)-1

	)

591 
	#SDL_ICONV_E2BIG
 (
size_t
)-2

	)

592 
	#SDL_ICONV_EILSEQ
 (
size_t
)-3

	)

593 
	#SDL_ICONV_EINVAL
 (
size_t
)-4

	)

596 #i‡
deföed
(
HAVE_ICONV
Ë&& deföed(
HAVE_ICONV_H
)

597 
	#SDL_ic⁄v_t
 
ic⁄v_t


	)

598 
	#SDL_ic⁄v_›í
 
ic⁄v_›í


	)

599 
	#SDL_ic⁄v_˛o£
 
ic⁄v_˛o£


	)

601 
_SDL_ic⁄v_t
 *
	tSDL_ic⁄v_t
;

602 
DECLSPEC
 
SDL_ic⁄v_t
 
SDLCALL
 
SDL_ic⁄v_›í
(c⁄° *
tocode
, c⁄° *
‰omcode
);

603 
DECLSPEC
 
SDLCALL
 
SDL_ic⁄v_˛o£
(
SDL_ic⁄v_t
 
cd
);

605 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_ic⁄v
(
SDL_ic⁄v_t
 
cd
, c⁄° **
öbuf
, size_à*
öbyã¶e·
, **
outbuf
, size_à*
outbyã¶e·
);

609 
DECLSPEC
 * 
SDLCALL
 
SDL_ic⁄v_°rög
(c⁄° *
tocode
, c⁄° *
‰omcode
, c⁄° *
öbuf
, 
size_t
 
öbyã¶e·
);

610 
	#SDL_ic⁄v_utf8_loˇÀ
(
S
Ë
	`SDL_ic⁄v_°rög
("", "UTF-8", S, 
	`SDL_°æí
(S)+1)

	)

611 
	#SDL_ic⁄v_utf8_ucs2
(
S
Ë(
Uöt16
 *)
	`SDL_ic⁄v_°rög
("UCS-2", "UTF-8", S, 
	`SDL_°æí
(S)+1)

	)

612 
	#SDL_ic⁄v_utf8_ucs4
(
S
Ë(
Uöt32
 *)
	`SDL_ic⁄v_°rög
("UCS-4", "UTF-8", S, 
	`SDL_°æí
(S)+1)

	)

615 #ifde‡
__˝lu•lus


618 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_syswm.h

27 #i‚de‡
_SDL_syswm_h


28 
	#_SDL_syswm_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

32 
	~"SDL_vîsi⁄.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


46 #ifde‡
SDL_PROTOTYPES_ONLY


47 
SDL_SysWMöfo
;

48 
SDL_SysWMöfo
 
	tSDL_SysWMöfo
;

52 #i‡
deföed
(
SDL_VIDEO_DRIVER_X11
)

53 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

55 
	#Curs‹
 
X11Curs‹


	)

58 
	~<X11/Xlib.h
>

59 
	~<X11/X©om.h
>

61 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

63 #unde‡
Curs‹


68 
	mSDL_SYSWM_X11


69 } 
	tSDL_SYSWM_TYPE
;

72 
	sSDL_SysWMmsg
 {

73 
SDL_vîsi⁄
 
	mvîsi⁄
;

74 
SDL_SYSWM_TYPE
 
	msubsy°em
;

76 
XEvít
 
	mxevít
;

77 } 
	mevít
;

84 
	sSDL_SysWMöfo
 {

85 
SDL_vîsi⁄
 
	mvîsi⁄
;

86 
SDL_SYSWM_TYPE
 
	msubsy°em
;

89 
Di•œy
 *
	mdi•œy
;

90 
Wödow
 
	mwödow
;

98 (*
	mlock_func
)();

99 (*
	mu∆ock_func
)();

104 
Wödow
 
	mfswödow
;

105 
Wödow
 
	mwmwödow
;

110 
Di•œy
 *
	mgfxdi•œy
;

112 } 
	mx11
;

113 } 
	möfo
;

114 } 
	tSDL_SysWMöfo
;

116 #ñi‡
deföed
(
SDL_VIDEO_DRIVER_NANOX
)

117 
	~<mi¸owö/«no-X.h
>

120 
	sSDL_SysWMmsg
 {

121 
SDL_vîsi⁄
 
	mvîsi⁄
;

122 
	md©a
;

126 
	sSDL_SysWMöfo
 {

127 
SDL_vîsi⁄
 
	mvîsi⁄
 ;

128 
GR_WINDOW_ID
 
	mwödow
 ;

129 } 
	tSDL_SysWMöfo
;

131 #ñi‡
deföed
(
SDL_VIDEO_DRIVER_WINDIB
Ë|| deföed(
SDL_VIDEO_DRIVER_DDRAW
Ë|| deföed(
SDL_VIDEO_DRIVER_GAPI
)

132 
	#WIN32_LEAN_AND_MEAN


	)

133 
	~<wödows.h
>

136 
	sSDL_SysWMmsg
 {

137 
SDL_vîsi⁄
 
	mvîsi⁄
;

138 
HWND
 
	mhwnd
;

139 
UINT
 
	mmsg
;

140 
WPARAM
 
	mwP¨am
;

141 
LPARAM
 
	mlP¨am
;

145 
	sSDL_SysWMöfo
 {

146 
SDL_vîsi⁄
 
	mvîsi⁄
;

147 
HWND
 
	mwödow
;

148 
HGLRC
 
	mhgÃc
;

149 } 
	tSDL_SysWMöfo
;

151 #ñi‡
deföed
(
SDL_VIDEO_DRIVER_RISCOS
)

154 
	sSDL_SysWMmsg
 {

155 
SDL_vîsi⁄
 
	mvîsi⁄
;

156 
	mevítCode
;

157 
	mpﬁlBlock
[64];

161 
	sSDL_SysWMöfo
 {

162 
SDL_vîsi⁄
 
	mvîsi⁄
;

163 
	mwimpVîsi⁄
;

164 
	mèskH™dÀ
;

165 
	mwödow
;

166 } 
	tSDL_SysWMöfo
;

168 #ñi‡
deföed
(
SDL_VIDEO_DRIVER_PHOTON
)

169 
	~<sys/√uåöo.h
>

170 
	~<Ph.h
>

173 
	sSDL_SysWMmsg
 {

174 
SDL_vîsi⁄
 
	mvîsi⁄
;

175 
	md©a
;

179 
	sSDL_SysWMöfo
 {

180 
SDL_vîsi⁄
 
	mvîsi⁄
;

181 
	md©a
;

182 } 
	tSDL_SysWMöfo
;

187 
	sSDL_SysWMmsg
 {

188 
SDL_vîsi⁄
 
	mvîsi⁄
;

189 
	md©a
;

193 
	sSDL_SysWMöfo
 {

194 
SDL_vîsi⁄
 
	mvîsi⁄
;

195 
	md©a
;

196 } 
	tSDL_SysWMöfo
;

217 
DECLSPEC
 
SDLCALL
 
SDL_GëWMInfo
(
SDL_SysWMöfo
 *
öfo
);

221 #ifde‡
__˝lu•lus


224 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_thread.h

23 #i‚de‡
_SDL_thªad_h


24 
	#_SDL_thªad_h


	)

32 
	~"SDL_°döc.h
"

33 
	~"SDL_îr‹.h
"

36 
	~"SDL_muãx.h
"

38 
	~"begö_code.h
"

40 #ifde‡
__˝lu•lus


45 
SDL_Thªad
;

46 
SDL_Thªad
 
	tSDL_Thªad
;

49 #i‡((
deföed
(
__WIN32__
Ë&& !deföed(
HAVE_LIBC
)Ë|| deföed(
__OS2__
)Ë&& !deföed(
__SYMBIAN32__
)

63 
	#SDL_PASSED_BEGINTHREAD_ENDTHREAD


	)

64 #i‚de‡
_WIN32_WCE


65 
	~<¥o˚ss.h
>

68 #ifde‡
__OS2__


69 (*
p‚SDL_CuºítBegöThªad
)((*
	tfunc
)(*), *, , *
	t¨g
);

70 (*
p‚SDL_CuºítEndThªad
)();

72 
uöçå_t
 (
	t__cde˛
 *
	tp‚SDL_CuºítBegöThªad
) (*, ,

73 (
	t__°dˇŒ
 *
	tfunc
)(*), *
	t¨g
,

74 , *
	tthªadID
);

75 (
__cde˛
 *
	tp‚SDL_CuºítEndThªad
)(
	tcode
);

78 
DECLSPEC
 
SDL_Thªad
 * 
SDLCALL
 
SDL_Cª©eThªad
((SDLCALL *
‚
)(*), *
d©a
, 
p‚SDL_CuºítBegöThªad
 
p‚BegöThªad
, 
p‚SDL_CuºítEndThªad
 
p‚EndThªad
);

80 #ifde‡
__OS2__


81 
	#SDL_Cª©eThªad
(
‚
, 
d©a
Ë
	`SDL_Cª©eThªad
(‚, d©a, 
_begöthªad
, 
_ídthªad
)

	)

82 #ñi‡
deföed
(
_WIN32_WCE
)

83 
	#SDL_Cª©eThªad
(
‚
, 
d©a
Ë
	`SDL_Cª©eThªad
(‚, d©a, 
NULL
, NULL)

	)

85 
	#SDL_Cª©eThªad
(
‚
, 
d©a
Ë
	`SDL_Cª©eThªad
(‚, d©a, 
_begöthªadex
, 
_ídthªadex
)

	)

88 
DECLSPEC
 
SDL_Thªad
 * 
SDLCALL
 
SDL_Cª©eThªad
((SDLCALL *
‚
)(*), *
d©a
);

92 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_ThªadID
();

97 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëThªadID
(
SDL_Thªad
 *
thªad
);

103 
DECLSPEC
 
SDLCALL
 
SDL_WaôThªad
(
SDL_Thªad
 *
thªad
, *
°©us
);

106 
DECLSPEC
 
SDLCALL
 
SDL_KûlThªad
(
SDL_Thªad
 *
thªad
);

110 #ifde‡
__˝lu•lus


113 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_timer.h

23 #i‚de‡
_SDL_timî_h


24 
	#_SDL_timî_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


40 
	#SDL_TIMESLICE
 10

	)

43 
	#TIMER_RESOLUTION
 10

	)

49 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëTicks
();

52 
DECLSPEC
 
SDLCALL
 
SDL_Dñay
(
Uöt32
 
ms
);

55 
Uöt32
 (
	tSDLCALL
 *
	tSDL_TimîCÆlback
)(
	tUöt32
 
	töãrvÆ
);

86 
DECLSPEC
 
SDLCALL
 
SDL_SëTimî
(
Uöt32
 
öãrvÆ
, 
SDL_TimîCÆlback
 
ˇŒback
);

101 
Uöt32
 (
	tSDLCALL
 *
	tSDL_NewTimîCÆlback
)(
	tUöt32
 
	töãrvÆ
, *
	t∑øm
);

104 
_SDL_TimîID
 *
	tSDL_TimîID
;

109 
DECLSPEC
 
SDL_TimîID
 
SDLCALL
 
SDL_AddTimî
(
Uöt32
 
öãrvÆ
, 
SDL_NewTimîCÆlback
 
ˇŒback
, *
∑øm
);

115 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_RemoveTimî
(
SDL_TimîID
 
t
);

120 #ifde‡
__˝lu•lus


123 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_types.h

28 
	~"SDL_°döc.h
"

	@SDL-win/include/SDL/SDL_version.h

27 #i‚de‡
_SDL_vîsi⁄_h


28 
	#_SDL_vîsi⁄_h


	)

30 
	~"SDL_°döc.h
"

32 
	~"begö_code.h
"

34 #ifde‡
__˝lu•lus


42 
	#SDL_MAJOR_VERSION
 1

	)

43 
	#SDL_MINOR_VERSION
 2

	)

44 
	#SDL_PATCHLEVEL
 15

	)

47 
	sSDL_vîsi⁄
 {

48 
Uöt8
 
maj‹
;

49 
Uöt8
 
mö‹
;

50 
Uöt8
 
∑tch
;

51 } 
	tSDL_vîsi⁄
;

57 
	#SDL_VERSION
(
X
) \

59 (
X
)->
maj‹
 = 
SDL_MAJOR_VERSION
; \

60 (
X
)->
mö‹
 = 
SDL_MINOR_VERSION
; \

61 (
X
)->
∑tch
 = 
SDL_PATCHLEVEL
; \

62 }

	)

68 
	#SDL_VERSIONNUM
(
X
, 
Y
, 
Z
) \

69 ((
X
)*1000 + (
Y
)*100 + (
Z
))

	)

72 
	#SDL_COMPILEDVERSION
 \

73 
	`SDL_VERSIONNUM
(
SDL_MAJOR_VERSION
, 
SDL_MINOR_VERSION
, 
SDL_PATCHLEVEL
)

	)

76 
	#SDL_VERSION_ATLEAST
(
X
, 
Y
, 
Z
) \

77 (
SDL_COMPILEDVERSION
 >
	`SDL_VERSIONNUM
(
X
, 
Y
, 
Z
))

	)

83 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
SDL_Löked_Vîsi⁄
();

86 #ifde‡
__˝lu•lus


89 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/SDL_video.h

27 #i‚de‡
_SDL_video_h


28 
	#_SDL_video_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

32 
	~"SDL_rw›s.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


44 
	#SDL_ALPHA_OPAQUE
 255

	)

45 
	#SDL_ALPHA_TRANSPARENT
 0

	)

50 
	sSDL_Re˘
 {

51 
Söt16
 
x
, 
y
;

52 
Uöt16
 
w
, 
h
;

53 } 
	tSDL_Re˘
;

55 
	sSDL_Cﬁ‹
 {

56 
Uöt8
 
r
;

57 
Uöt8
 
g
;

58 
Uöt8
 
b
;

59 
Uöt8
 
unu£d
;

60 } 
	tSDL_Cﬁ‹
;

61 
	#SDL_Cﬁour
 
SDL_Cﬁ‹


	)

63 
	sSDL_PÆëã
 {

64 
ncﬁ‹s
;

65 
SDL_Cﬁ‹
 *
cﬁ‹s
;

66 } 
	tSDL_PÆëã
;

70 
	sSDL_PixñF‹m©
 {

71 
SDL_PÆëã
 *
∑Àâe
;

72 
Uöt8
 
BôsPîPixñ
;

73 
Uöt8
 
ByãsPîPixñ
;

74 
Uöt8
 
Rloss
;

75 
Uöt8
 
Gloss
;

76 
Uöt8
 
Bloss
;

77 
Uöt8
 
Aloss
;

78 
Uöt8
 
Rshi·
;

79 
Uöt8
 
Gshi·
;

80 
Uöt8
 
Bshi·
;

81 
Uöt8
 
Ashi·
;

82 
Uöt32
 
Rmask
;

83 
Uöt32
 
Gmask
;

84 
Uöt32
 
Bmask
;

85 
Uöt32
 
Amask
;

88 
Uöt32
 
cﬁ‹key
;

90 
Uöt8
 
Æpha
;

91 } 
	tSDL_PixñF‹m©
;

96 
	sSDL_SurÁ˚
 {

97 
Uöt32
 
Êags
;

98 
SDL_PixñF‹m©
 *
f‹m©
;

99 
w
, 
h
;

100 
Uöt16
 
pôch
;

101 *
pixñs
;

102 
off£t
;

105 
¥iv©e_hwd©a
 *
hwd©a
;

108 
SDL_Re˘
 
˛ù_ª˘
;

109 
Uöt32
 
unu£d1
;

112 
Uöt32
 
locked
;

115 
SDL_BlôM≠
 *
m≠
;

118 
f‹m©_vîsi⁄
;

121 
ªfcou¡
;

122 } 
	tSDL_SurÁ˚
;

131 
	#SDL_SWSURFACE
 0x00000000

	)

132 
	#SDL_HWSURFACE
 0x00000001

	)

133 
	#SDL_ASYNCBLIT
 0x00000004

	)

138 
	#SDL_ANYFORMAT
 0x10000000

	)

139 
	#SDL_HWPALETTE
 0x20000000

	)

140 
	#SDL_DOUBLEBUF
 0x40000000

	)

141 
	#SDL_FULLSCREEN
 0x80000000

	)

142 
	#SDL_OPENGL
 0x00000002

	)

143 
	#SDL_OPENGLBLIT
 0x0000000A

	)

144 
	#SDL_RESIZABLE
 0x00000010

	)

145 
	#SDL_NOFRAME
 0x00000020

	)

150 
	#SDL_HWACCEL
 0x00000100

	)

151 
	#SDL_SRCCOLORKEY
 0x00001000

	)

152 
	#SDL_RLEACCELOK
 0x00002000

	)

153 
	#SDL_RLEACCEL
 0x00004000

	)

154 
	#SDL_SRCALPHA
 0x00010000

	)

155 
	#SDL_PREALLOC
 0x01000000

	)

161 
	#SDL_MUSTLOCK
(
surÁ˚
) \

162 (
surÁ˚
->
off£t
 || \

163 ((
surÁ˚
->
Êags
 & (
SDL_HWSURFACE
|
SDL_ASYNCBLIT
|
SDL_RLEACCEL
)Ë!0))

	)

166 (*
SDL_blô
)(
	tSDL_SurÁ˚
 *
	t§c
, 
	tSDL_Re˘
 *
	t§¸e˘
,

167 
	tSDL_SurÁ˚
 *
	td°
, 
	tSDL_Re˘
 *
	td°ª˘
);

171 
	sSDL_VideoInfo
 {

172 
Uöt32
 
hw_avaûabÀ
 :1;

173 
Uöt32
 
wm_avaûabÀ
 :1;

174 
Uöt32
 
Unu£dBôs1
 :6;

175 
Uöt32
 
Unu£dBôs2
 :1;

176 
Uöt32
 
blô_hw
 :1;

177 
Uöt32
 
blô_hw_CC
 :1;

178 
Uöt32
 
blô_hw_A
 :1;

179 
Uöt32
 
blô_sw
 :1;

180 
Uöt32
 
blô_sw_CC
 :1;

181 
Uöt32
 
blô_sw_A
 :1;

182 
Uöt32
 
blô_fûl
 :1;

183 
Uöt32
 
Unu£dBôs3
 :16;

184 
Uöt32
 
video_mem
;

185 
SDL_PixñF‹m©
 *
vfmt
;

186 
cuºít_w
;

187 
cuºít_h
;

188 } 
	tSDL_VideoInfo
;

200 
	#SDL_YV12_OVERLAY
 0x32315659

	)

201 
	#SDL_IYUV_OVERLAY
 0x56555949

	)

202 
	#SDL_YUY2_OVERLAY
 0x32595559

	)

203 
	#SDL_UYVY_OVERLAY
 0x59565955

	)

204 
	#SDL_YVYU_OVERLAY
 0x55595659

	)

208 
	sSDL_Ovîœy
 {

209 
Uöt32
 
f‹m©
;

210 
w
, 
h
;

211 
∂™es
;

212 
Uöt16
 *
pôches
;

213 
Uöt8
 **
pixñs
;

217 
¥iv©e_yuvhwfuncs
 *
hwfuncs
;

218 
¥iv©e_yuvhwd©a
 *
hwd©a
;

223 
Uöt32
 
hw_ovîœy
 :1;

224 
Uöt32
 
Unu£dBôs
 :31;

226 } 
	tSDL_Ovîœy
;

231 
SDL_GL_RED_SIZE
,

232 
SDL_GL_GREEN_SIZE
,

233 
SDL_GL_BLUE_SIZE
,

234 
SDL_GL_ALPHA_SIZE
,

235 
SDL_GL_BUFFER_SIZE
,

236 
SDL_GL_DOUBLEBUFFER
,

237 
SDL_GL_DEPTH_SIZE
,

238 
SDL_GL_STENCIL_SIZE
,

239 
SDL_GL_ACCUM_RED_SIZE
,

240 
SDL_GL_ACCUM_GREEN_SIZE
,

241 
SDL_GL_ACCUM_BLUE_SIZE
,

242 
SDL_GL_ACCUM_ALPHA_SIZE
,

243 
SDL_GL_STEREO
,

244 
SDL_GL_MULTISAMPLEBUFFERS
,

245 
SDL_GL_MULTISAMPLESAMPLES
,

246 
SDL_GL_ACCELERATED_VISUAL
,

247 
SDL_GL_SWAP_CONTROL


248 } 
	tSDL_GL©å
;

252 
	#SDL_LOGPAL
 0x01

	)

253 
	#SDL_PHYSPAL
 0x02

	)

275 
DECLSPEC
 
SDLCALL
 
SDL_VideoInô
(c⁄° *
drivî_«me
, 
Uöt32
 
Êags
);

276 
DECLSPEC
 
SDLCALL
 
SDL_VideoQuô
();

284 
DECLSPEC
 * 
SDLCALL
 
SDL_VideoDrivîName
(*
«mebuf
, 
maxÀn
);

292 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_GëVideoSurÁ˚
();

300 
DECLSPEC
 c⁄° 
SDL_VideoInfo
 * 
SDLCALL
 
SDL_GëVideoInfo
();

313 
DECLSPEC
 
SDLCALL
 
SDL_VideoModeOK
(
width
, 
height
, 
bµ
, 
Uöt32
 
Êags
);

324 
DECLSPEC
 
SDL_Re˘
 ** 
SDLCALL
 
SDL_Li°Modes
(
SDL_PixñF‹m©
 *
f‹m©
, 
Uöt32
 
Êags
);

384 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_SëVideoMode


385 (
width
, 
height
, 
bµ
, 
Uöt32
 
Êags
);

394 
DECLSPEC
 
SDLCALL
 
SDL_Upd©eRe˘s


395 (
SDL_SurÁ˚
 *
s¸ìn
, 
numª˘s
, 
SDL_Re˘
 *
ª˘s
);

400 
DECLSPEC
 
SDLCALL
 
SDL_Upd©eRe˘


401 (
SDL_SurÁ˚
 *
s¸ìn
, 
Söt32
 
x
, Söt32 
y
, 
Uöt32
 
w
, Uöt32 
h
);

414 
DECLSPEC
 
SDLCALL
 
SDL_Flù
(
SDL_SurÁ˚
 *
s¸ìn
);

424 
DECLSPEC
 
SDLCALL
 
SDL_SëGamma
(
ªd
, 
gªí
, 
blue
);

438 
DECLSPEC
 
SDLCALL
 
SDL_SëGammaRamp
(c⁄° 
Uöt16
 *
ªd
, c⁄° Uöt16 *
gªí
, c⁄° Uöt16 *
blue
);

449 
DECLSPEC
 
SDLCALL
 
SDL_GëGammaRamp
(
Uöt16
 *
ªd
, Uöt16 *
gªí
, Uöt16 *
blue
);

466 
DECLSPEC
 
SDLCALL
 
SDL_SëCﬁ‹s
(
SDL_SurÁ˚
 *
surÁ˚
,

467 
SDL_Cﬁ‹
 *
cﬁ‹s
, 
fú°cﬁ‹
, 
ncﬁ‹s
);

485 
DECLSPEC
 
SDLCALL
 
SDL_SëPÆëã
(
SDL_SurÁ˚
 *
surÁ˚
, 
Êags
,

486 
SDL_Cﬁ‹
 *
cﬁ‹s
, 
fú°cﬁ‹
,

487 
ncﬁ‹s
);

492 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_M≠RGB


493 (c⁄° 
SDL_PixñF‹m©
 * c⁄° 
f‹m©
,

494 c⁄° 
Uöt8
 
r
, c⁄° Uöt8 
g
, c⁄° Uöt8 
b
);

499 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_M≠RGBA


500 (c⁄° 
SDL_PixñF‹m©
 * c⁄° 
f‹m©
,

501 c⁄° 
Uöt8
 
r
, c⁄° Uöt8 
g
, c⁄° Uöt8 
b
, c⁄° Uöt8 
a
);

506 
DECLSPEC
 
SDLCALL
 
SDL_GëRGB
(
Uöt32
 
pixñ
,

507 c⁄° 
SDL_PixñF‹m©
 * c⁄° 
fmt
,

508 
Uöt8
 *
r
, Uöt8 *
g
, Uöt8 *
b
);

513 
DECLSPEC
 
SDLCALL
 
SDL_GëRGBA
(
Uöt32
 
pixñ
,

514 c⁄° 
SDL_PixñF‹m©
 * c⁄° 
fmt
,

515 
Uöt8
 *
r
, Uöt8 *
g
, Uöt8 *
b
, Uöt8 *
a
);

518 
	#SDL_AŒocSurÁ˚
 
SDL_Cª©eRGBSurÁ˚


	)

553 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_Cª©eRGBSurÁ˚


554 (
Uöt32
 
Êags
, 
width
, 
height
, 
dïth
,

555 
Uöt32
 
Rmask
, Uöt32 
Gmask
, Uöt32 
Bmask
, Uöt32 
Amask
);

557 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_Cª©eRGBSurÁ˚From
(*
pixñs
,

558 
width
, 
height
, 
dïth
, 
pôch
,

559 
Uöt32
 
Rmask
, Uöt32 
Gmask
, Uöt32 
Bmask
, Uöt32 
Amask
);

560 
DECLSPEC
 
SDLCALL
 
SDL_FªeSurÁ˚
(
SDL_SurÁ˚
 *
surÁ˚
);

580 
DECLSPEC
 
SDLCALL
 
SDL_LockSurÁ˚
(
SDL_SurÁ˚
 *
surÁ˚
);

581 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockSurÁ˚
(
SDL_SurÁ˚
 *
surÁ˚
);

589 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_LﬂdBMP_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
);

592 
	#SDL_LﬂdBMP
(
fûe
Ë
	`SDL_LﬂdBMP_RW
(
	`SDL_RWFromFûe
(fûe, "rb"), 1)

	)

599 
DECLSPEC
 
SDLCALL
 
SDL_SaveBMP_RW


600 (
SDL_SurÁ˚
 *
surÁ˚
, 
SDL_RW›s
 *
d°
, 
‰ìd°
);

603 
	#SDL_SaveBMP
(
surÁ˚
, 
fûe
) \

604 
	`SDL_SaveBMP_RW
(
surÁ˚
, 
	`SDL_RWFromFûe
(
fûe
, "wb"), 1)

	)

615 
DECLSPEC
 
SDLCALL
 
SDL_SëCﬁ‹Key


616 (
SDL_SurÁ˚
 *
surÁ˚
, 
Uöt32
 
Êag
, Uöt32 
key
);

633 
DECLSPEC
 
SDLCALL
 
SDL_SëAÕha
(
SDL_SurÁ˚
 *
surÁ˚
, 
Uöt32
 
Êag
, 
Uöt8
 
Æpha
);

647 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_SëClùRe˘
(
SDL_SurÁ˚
 *
surÁ˚
, c⁄° 
SDL_Re˘
 *
ª˘
);

654 
DECLSPEC
 
SDLCALL
 
SDL_GëClùRe˘
(
SDL_SurÁ˚
 *
surÁ˚
, 
SDL_Re˘
 *
ª˘
);

668 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_C⁄vîtSurÁ˚


669 (
SDL_SurÁ˚
 *
§c
, 
SDL_PixñF‹m©
 *
fmt
, 
Uöt32
 
Êags
);

743 
	#SDL_BlôSurÁ˚
 
SDL_UµîBlô


	)

748 
DECLSPEC
 
SDLCALL
 
SDL_UµîBlô


749 (
SDL_SurÁ˚
 *
§c
, 
SDL_Re˘
 *
§¸e˘
,

750 
SDL_SurÁ˚
 *
d°
, 
SDL_Re˘
 *
d°ª˘
);

754 
DECLSPEC
 
SDLCALL
 
SDL_LowîBlô


755 (
SDL_SurÁ˚
 *
§c
, 
SDL_Re˘
 *
§¸e˘
,

756 
SDL_SurÁ˚
 *
d°
, 
SDL_Re˘
 *
d°ª˘
);

767 
DECLSPEC
 
SDLCALL
 
SDL_FûlRe˘


768 (
SDL_SurÁ˚
 *
d°
, 
SDL_Re˘
 *
d°ª˘
, 
Uöt32
 
cﬁ‹
);

781 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_Di•œyF‹m©
(SDL_SurÁ˚ *
surÁ˚
);

795 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_Di•œyF‹m©AÕha
(SDL_SurÁ˚ *
surÁ˚
);

807 
DECLSPEC
 
SDL_Ovîœy
 * 
SDLCALL
 
SDL_Cª©eYUVOvîœy
(
width
, 
height
,

808 
Uöt32
 
f‹m©
, 
SDL_SurÁ˚
 *
di•œy
);

811 
DECLSPEC
 
SDLCALL
 
SDL_LockYUVOvîœy
(
SDL_Ovîœy
 *
ovîœy
);

812 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockYUVOvîœy
(
SDL_Ovîœy
 *
ovîœy
);

820 
DECLSPEC
 
SDLCALL
 
SDL_Di•œyYUVOvîœy
(
SDL_Ovîœy
 *
ovîœy
, 
SDL_Re˘
 *
d°ª˘
);

823 
DECLSPEC
 
SDLCALL
 
SDL_FªeYUVOvîœy
(
SDL_Ovîœy
 *
ovîœy
);

837 
DECLSPEC
 
SDLCALL
 
SDL_GL_LﬂdLibøry
(c⁄° *
∑th
);

842 
DECLSPEC
 * 
SDLCALL
 
SDL_GL_GëProcAddªss
(c⁄° * 
¥oc
);

847 
DECLSPEC
 
SDLCALL
 
SDL_GL_SëAâribuã
(
SDL_GL©å
 
©å
, 
vÆue
);

858 
DECLSPEC
 
SDLCALL
 
SDL_GL_GëAâribuã
(
SDL_GL©å
 
©å
, * 
vÆue
);

863 
DECLSPEC
 
SDLCALL
 
SDL_GL_Sw≠Buf„rs
();

870 
DECLSPEC
 
SDLCALL
 
SDL_GL_Upd©eRe˘s
(
numª˘s
, 
SDL_Re˘
* 
ª˘s
);

871 
DECLSPEC
 
SDLCALL
 
SDL_GL_Lock
();

872 
DECLSPEC
 
SDLCALL
 
SDL_GL_U∆ock
();

885 
DECLSPEC
 
SDLCALL
 
SDL_WM_SëC≠ti⁄
(c⁄° *
tôÀ
, c⁄° *
ic⁄
);

889 
DECLSPEC
 
SDLCALL
 
SDL_WM_GëC≠ti⁄
(**
tôÀ
, **
ic⁄
);

897 
DECLSPEC
 
SDLCALL
 
SDL_WM_SëIc⁄
(
SDL_SurÁ˚
 *
ic⁄
, 
Uöt8
 *
mask
);

904 
DECLSPEC
 
SDLCALL
 
SDL_WM_Ic⁄ifyWödow
();

921 
DECLSPEC
 
SDLCALL
 
SDL_WM_ToggÀFuŒS¸ìn
(
SDL_SurÁ˚
 *
surÁ˚
);

924 
	gSDL_GRAB_QUERY
 = -1,

925 
	gSDL_GRAB_OFF
 = 0,

926 
	gSDL_GRAB_ON
 = 1,

927 
	gSDL_GRAB_FULLSCREEN


928 } 
	tSDL_GøbMode
;

937 
DECLSPEC
 
SDL_GøbMode
 
SDLCALL
 
SDL_WM_GøbI≈ut
(SDL_GøbModê
mode
);

942 
DECLSPEC
 
SDLCALL
 
SDL_So·Såëch
(
SDL_SurÁ˚
 *
§c
, 
SDL_Re˘
 *
§¸e˘
,

943 
SDL_SurÁ˚
 *
d°
, 
SDL_Re˘
 *
d°ª˘
);

946 #ifde‡
__˝lu•lus


949 
	~"˛o£_code.h
"

	@SDL-win/include/SDL/begin_code.h

34 #ifde‡
_begö_code_h


35 #îr‹ 
Ne°ed
 
ö˛usi⁄
 
of
 
begö_code
.
h


37 
	#_begö_code_h


	)

43 #i‚de‡
DECLSPEC


44 #i‡
deföed
(
__BEOS__
Ë|| deföed(
__HAIKU__
)

45 #i‡
deföed
(
__GNUC__
)

46 
	#DECLSPEC


	)

48 
	#DECLSPEC
 
	`__de˛•ec
(
exp‹t
)

	)

50 #ñi‡
deföed
(
__WIN32__
)

51 #ifde‡
__BORLANDC__


52 #ifde‡
BUILD_SDL


53 
	#DECLSPEC


	)

55 
	#DECLSPEC
 
	`__de˛•ec
(
dŒimp‹t
)

	)

58 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

60 #ñi‡
deföed
(
__OS2__
)

61 #ifde‡
__WATCOMC__


62 #ifde‡
BUILD_SDL


63 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

65 
	#DECLSPEC


	)

67 #ñi‡
deföed
 (
__GNUC__
) && __GNUC__ < 4

68 #/* 
Added
 
suµ‹t
 
GCC
-
EMX
 <
v4
.
x
 */

69 #/* 
this
 
is
 
√eded
 
XFªe86
/
OS2
 
devñ›emít
 */

70 #/* 
F
. 
Ambachî
(
™ak‹
@
¢afu
.
de
) 05.2008 */

71 #ifde‡
BUILD_SDL


72 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

74 
	#DECLSPEC


	)

77 
	#DECLSPEC


	)

80 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 4

81 
	#DECLSPEC
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

83 
	#DECLSPEC


	)

92 #i‚de‡
SDLCALL


93 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__GNUC__
)

94 
	#SDLCALL
 
__cde˛


	)

95 #ñi‡
deföed
(
__OS2__
)

96 #i‡
deföed
 (
__GNUC__
) && __GNUC__ < 4

97 #/* 
Added
 
suµ‹t
 
GCC
-
EMX
 <
v4
.
x
 */

98 #/* 
this
 
is
 
√eded
 
XFªe86
/
OS2
 
devñ›emít
 */

99 #/* 
F
. 
Ambachî
(
™ak‹
@
¢afu
.
de
) 05.2008 */

100 
	#SDLCALL
 
_cde˛


	)

102 #/* 
On
 
Ÿhî
 
compûîs
 
⁄
 
OS
/2, 
we
 
u£
 
the
 
_Sy°em
 
ˇŒög
 
c⁄víti⁄
 */

103 #/* 
to
 
be
 
com∑tibÀ
 
wôh
 
evîy
 
compûî
 */

104 
	#SDLCALL
 
_Sy°em


	)

107 
	#SDLCALL


	)

111 #ifde‡
__SYMBIAN32__


112 #i‚de‡
EKA2


113 #unde‡
DECLSPEC


114 
	#DECLSPEC


	)

115 #ñi‡!
deföed
(
__WINS__
)

116 #unde‡
DECLSPEC


117 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

128 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MWERKS__
Ë|| deföed(
__BORLANDC__
)

129 #ifde‡
_MSC_VER


130 #¥agm®
w¨nög
(
dißbÀ
: 4103)

132 #ifde‡
__BORLANDC__


133 #¥agm®
n›ackw¨nög


135 #ifde‡
_M_X64


137 #¥agm®
∑ck
(
push
,8)

139 #¥agm®
∑ck
(
push
,4)

141 #ñi‡(
deföed
(
__MWERKS__
Ë&& deföed(
__MACOS__
))

142 #¥agm®
›ti⁄s
 
Æign
=
mac68k4byã


143 #¥agm®
íumßlwaysöt
 
⁄


150 #i‚de‡
SDL_INLINE_OKAY


151 #ifde‡
__GNUC__


152 
	#SDL_INLINE_OKAY


	)

155 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
) || \

156 
deföed
(
__DMC__
Ë|| deföed(
__SC__
) || \

157 
deföed
(
__WATCOMC__
Ë|| deföed(
__LCC__
) || \

158 
deföed
(
__DECC
Ë|| 
	$deföed
(
__EABI__
)

159 #i‚de‡
__ölöe__


160 
	#__ölöe__
 
__ölöe


	)

162 
	#SDL_INLINE_OKAY


	)

164 #i‡!
	`deföed
(
__MRC__
Ë&& !deföed(
_SGI_SOURCE
)

165 #i‚de‡
__ölöe__


166 
	#__ölöe__
 
ölöe


	)

168 
	#SDL_INLINE_OKAY


	)

180 #i‚de‡
SDL_INLINE_OKAY


181 
	#__ölöe__


	)

188 #i‡!
	`deföed
(
__MACH__
)

189 #i‚de‡
NULL


190 #ifde‡
__˝lu•lus


191 
	#NULL
 0

	)

193 
	#NULL
 ((*)0)

	)

	@SDL-win/include/SDL/close_code.h

29 #unde‡
_begö_code_h


35 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MWERKS__
Ë|| deföed(
__WATCOMC__
Ë|| deföed(
__BORLANDC__
)

36 #ifde‡
__BORLANDC__


37 #¥agm®
n›ackw¨nög


39 #i‡(
deföed
(
__MWERKS__
Ë&& deföed(
__MACOS__
))

40 #¥agm®
›ti⁄s
 
Æign
=
ª£t


41 #¥agm®
íumßlwaysöt
 
ª£t


43 #¥agm®
∑ck
(
p›
)

	@SDL-win/test/._checkkeys.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._graywin.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._loopwave.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testalpha.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testbitmap.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testblitspeed.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testcdrom.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testcursor.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testdyngl.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testerror.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testfile.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testgamma.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testgl.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testhread.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testiconv.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testjoystick.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testkeys.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testloadso.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testlock.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testoverlay.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testoverlay2.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testpalette.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testplatform.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testsem.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testsprite.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testtimer.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testver.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testvidinfo.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testwin.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._testwm.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._threadwin.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/._torturethread.c

1      OS X        2   æ                                                      ò                     ò     .≠∂e.qu¨™töe /0001;4f052700;GoogÀ\x20Chrome;28A614E8-A178-466C-A9CD-1ED6EBEABF06|com.googÀ.Chrome 

	@SDL-win/test/checkkeys.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

11 
	~"SDL.h
"

14 
	$quô
(
rc
)

16 
	`SDL_Quô
();

17 
	`exô
(
rc
);

18 
	}
}

20 
	$¥öt_modifõrs
()

22 
mod
;

23 
	`¥ötf
(" modifiers:");

24 
mod
 = 
	`SDL_GëModSèã
();

25 if(!
mod
) {

26 
	`¥ötf
(" (none)");

29 if(
mod
 & 
KMOD_LSHIFT
)

30 
	`¥ötf
(" LSHIFT");

31 if(
mod
 & 
KMOD_RSHIFT
)

32 
	`¥ötf
(" RSHIFT");

33 if(
mod
 & 
KMOD_LCTRL
)

34 
	`¥ötf
(" LCTRL");

35 if(
mod
 & 
KMOD_RCTRL
)

36 
	`¥ötf
(" RCTRL");

37 if(
mod
 & 
KMOD_LALT
)

38 
	`¥ötf
(" LALT");

39 if(
mod
 & 
KMOD_RALT
)

40 
	`¥ötf
(" RALT");

41 if(
mod
 & 
KMOD_LMETA
)

42 
	`¥ötf
(" LMETA");

43 if(
mod
 & 
KMOD_RMETA
)

44 
	`¥ötf
(" RMETA");

45 if(
mod
 & 
KMOD_NUM
)

46 
	`¥ötf
(" NUM");

47 if(
mod
 & 
KMOD_CAPS
)

48 
	`¥ötf
(" CAPS");

49 if(
mod
 & 
KMOD_MODE
)

50 
	`¥ötf
(" MODE");

51 
	}
}

53 
	$PrötKey
(
SDL_keysym
 *
sym
, 
¥es£d
)

56 i‡–
sym
->sym ) {

57 
	`¥ötf
("Key %s: %d-%†", 
¥es£d
 ? "pressed" : "released",

58 
sym
->sym, 
	`SDL_GëKeyName
(sym->sym));

60 
	`¥ötf
("Unknow¿Key (sˇncodê%dË%†", 
sym
->
sˇncode
,

61 
¥es£d
 ? "pressed" : "released");

65 i‡–
sym
->
unicode
 ) {

67 i‡–
sym
->
unicode
 < ' ' ) {

68 
	`¥ötf
(" (^%c)", 
sym
->
unicode
+'@');

70 #ifde‡
UNICODE


71 
	`¥ötf
(" (%c)", 
sym
->
unicode
);

74 i‡–!(
sym
->
unicode
 & 0xFF00) )

75 
	`¥ötf
(" (%c)", 
sym
->
unicode
);

77 
	`¥ötf
(" (0x%X)", 
sym
->
unicode
);

81 
	`¥öt_modifõrs
();

82 
	`¥ötf
("\n");

83 
	}
}

85 
	$maö
(
¨gc
, *
¨gv
[])

87 
SDL_Evít
 
evít
;

88 
d⁄e
;

89 
Uöt32
 
videoÊags
;

92 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 ) {

93 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

97 
videoÊags
 = 
SDL_SWSURFACE
;

98  
¨gc
 > 1 ) {

99 --
¨gc
;

100 i‡–
¨gv
[
¨gc
] && !
	`°rcmp
(argv[argc], "-fullscreen") ) {

101 
videoÊags
 |
SDL_FULLSCREEN
;

103 
	`Ârötf
(
°dîr
, "Ußge: %†[-fuŒs¸ìn]\n", 
¨gv
[0]);

104 
	`quô
(1);

109 i‡–
	`SDL_SëVideoMode
(640, 480, 0, 
videoÊags
Ë=
NULL
 ) {

110 
	`Ârötf
(
°dîr
, "Couldn't set 640x480 video mode: %s\n",

111 
	`SDL_GëEº‹
());

112 
	`quô
(2);

116 
	`SDL_E«bÀUNICODE
(1);

119 
	`SDL_E«bÀKeyRïót
(
SDL_DEFAULT_REPEAT_DELAY
,

120 
SDL_DEFAULT_REPEAT_INTERVAL
);

123 
d⁄e
 = 0;

124  !
d⁄e
 ) {

126 
	`SDL_WaôEvít
(&
evít
);

127 
evít
.
ty≥
) {

128 
SDL_KEYDOWN
:

129 
	`PrötKey
(&
evít
.
key
.
keysym
, 1);

131 
SDL_KEYUP
:

132 
	`PrötKey
(&
evít
.
key
.
keysym
, 0);

134 
SDL_MOUSEBUTTONDOWN
:

136 
SDL_QUIT
:

137 
d⁄e
 = 1;

144 
	`SDL_Quô
();

146 
	}
}

	@SDL-win/test/graywin.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<time.h
>

9 
	~"SDL.h
"

11 #ifde‡
TEST_VGA16


12 
	#NUM_COLORS
 16

	)

14 
	#NUM_COLORS
 256

	)

18 
	$DøwBox
(
SDL_SurÁ˚
 *
s¸ìn
, 
X
, 
Y
, 
width
, 
height
)

20 
£eded
 = 0;

21 
SDL_Re˘
 
¨ó
;

22 
Uöt32
 
cﬁ‹
;

23 
Uöt32
 
øndc
;

26 i‡–
£eded
 == 0 ) {

27 
	`§™d
(
	`time
(
NULL
));

28 
£eded
 = 1;

32 
¨ó
.
w
 = (
	`ønd
()%
width
);

33 
¨ó
.
h
 = (
	`ønd
()%
height
);

34 
¨ó
.
x
 = 
X
-◊ªa.
w
/2);

35 
¨ó
.
y
 = 
Y
-◊ªa.
h
/2);

36 
øndc
 = (
	`ønd
()%
NUM_COLORS
);

38 i‡(
s¸ìn
->
f‹m©
->
ByãsPîPixñ
==1)

40 
cﬁ‹
 = 
øndc
;

44 
cﬁ‹
 = 
	`SDL_M≠RGB
(
s¸ìn
->
f‹m©
, 
øndc
,Ñandc,Ñandc);

48 
	`SDL_FûlRe˘
(
s¸ìn
, &
¨ó
, 
cﬁ‹
);

49 i‡–
s¸ìn
->
Êags
 & 
SDL_DOUBLEBUF
 ) {

50 
	`SDL_Flù
(
s¸ìn
);

52 
	`SDL_Upd©eRe˘s
(
s¸ìn
, 1, &
¨ó
);

54 
	}
}

56 
	$DøwBackground
(
SDL_SurÁ˚
 *
s¸ìn
)

58 
i
, 
j
, 
k
;

59 
Uöt8
 *
buf„r
;

60 
Uöt16
 *
buf„r16
;

61 
Uöt16
 
cﬁ‹
;

62 
Uöt8
 
gødõ¡
;

67  
j
=0; j<2; ++j ) {

68 i‡–
	`SDL_LockSurÁ˚
(
s¸ìn
) < 0 ) {

69 
	`Ârötf
(
°dîr
, "Couldn'tÜock display surface: %s\n",

70 
	`SDL_GëEº‹
());

73 
buf„r
 = (
Uöt8
 *)
s¸ìn
->
pixñs
;

75 i‡(
s¸ìn
->
f‹m©
->
ByãsPîPixñ
!=2) {

76  
i
=0; i<
s¸ìn
->
h
; ++i ) {

77 
	`mem£t
(
buf„r
,(
i
*(
NUM_COLORS
-1))/
s¸ìn
->
h
, s¸ìn->
w
 * s¸ìn->
f‹m©
->
ByãsPîPixñ
);

78 
buf„r
 +
s¸ìn
->
pôch
;

83  
i
=0; i<
s¸ìn
->
h
; ++i ) {

84 
gødõ¡
=((
i
*(
NUM_COLORS
-1))/
s¸ìn
->
h
);

85 
cﬁ‹
 = 
	`SDL_M≠RGB
(
s¸ìn
->
f‹m©
, 
gødõ¡
, gradient, gradient);

86 
buf„r16
=(
Uöt16
*)
buf„r
;

87 
k
=0; k<
s¸ìn
->
w
; k++)

89 *(
buf„r16
+
k
)=
cﬁ‹
;

91 
buf„r
 +
s¸ìn
->
pôch
;

95 
	`SDL_U∆ockSurÁ˚
(
s¸ìn
);

96 i‡–
s¸ìn
->
Êags
 & 
SDL_DOUBLEBUF
 ) {

97 
	`SDL_Flù
(
s¸ìn
);

99 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0, 0, 0, 0);

103 
	}
}

105 
SDL_SurÁ˚
 *
	$Cª©eS¸ìn
(
Uöt16
 
w
, Uöt16 
h
, 
Uöt8
 
bµ
, 
Uöt32
 
Êags
)

107 
SDL_SurÁ˚
 *
s¸ìn
;

108 
i
;

109 
SDL_Cﬁ‹
 
∑Àâe
[
NUM_COLORS
];

112 
s¸ìn
 = 
	`SDL_SëVideoMode
(
w
, 
h
, 
bµ
, 
Êags
);

113 i‡–
s¸ìn
 =
NULL
 ) {

114 
	`Ârötf
(
°dîr
, "Couldn't set display mode: %s\n",

115 
	`SDL_GëEº‹
());

116 (
NULL
);

118 
	`Ârötf
(
°dîr
, "Screen is in %s mode\n",

119 (
s¸ìn
->
Êags
 & 
SDL_FULLSCREEN
) ? "fullscreen" : "windowed");

121 i‡(
bµ
==8) {

123  
i
=0; i<
NUM_COLORS
; ++i ) {

124 
∑Àâe
[
i
].
r
 = (
NUM_COLORS
-1)-i * (256 / NUM_COLORS);

125 
∑Àâe
[
i
].
g
 = (
NUM_COLORS
-1)-i * (256 / NUM_COLORS);

126 
∑Àâe
[
i
].
b
 = (
NUM_COLORS
-1)-i * (256 / NUM_COLORS);

128 
	`SDL_SëCﬁ‹s
(
s¸ìn
, 
∑Àâe
, 0, 
NUM_COLORS
);

131 (
s¸ìn
);

132 
	}
}

134 
	$maö
(
¨gc
, *
¨gv
[])

136 
SDL_SurÁ˚
 *
s¸ìn
;

137 
Uöt32
 
videoÊags
;

138 
d⁄e
;

139 
SDL_Evít
 
evít
;

140 
width
, 
height
, 
bµ
;

143 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 ) {

144 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

145 
	`exô
(1);

149 
width
 = 640;

150 
height
 = 480;

151 
bµ
 = 8;

152 
videoÊags
 = 
SDL_SWSURFACE
;

153  
¨gc
 > 1 ) {

154 --
¨gc
;

155 i‡–
¨gv
[
¨gc
-1] && (
	`°rcmp
(argv[argc-1], "-width") == 0) ) {

156 
width
 = 
	`©oi
(
¨gv
[
¨gc
]);

157 --
¨gc
;

159 i‡–
¨gv
[
¨gc
-1] && (
	`°rcmp
(argv[argc-1], "-height") == 0) ) {

160 
height
 = 
	`©oi
(
¨gv
[
¨gc
]);

161 --
¨gc
;

163 i‡–
¨gv
[
¨gc
-1] && (
	`°rcmp
(argv[argc-1], "-bpp") == 0) ) {

164 
bµ
 = 
	`©oi
(
¨gv
[
¨gc
]);

165 --
¨gc
;

167 i‡–
¨gv
[
¨gc
] && (
	`°rcmp
(argv[argc], "-hw") == 0) ) {

168 
videoÊags
 |
SDL_HWSURFACE
;

170 i‡–
¨gv
[
¨gc
] && (
	`°rcmp
(argv[argc], "-hwpalette") == 0) ) {

171 
videoÊags
 |
SDL_HWPALETTE
;

173 i‡–
¨gv
[
¨gc
] && (
	`°rcmp
(argv[argc], "-flip") == 0) ) {

174 
videoÊags
 |
SDL_DOUBLEBUF
;

176 i‡–
¨gv
[
¨gc
] && (
	`°rcmp
(argv[argc], "-noframe") == 0) ) {

177 
videoÊags
 |
SDL_NOFRAME
;

179 i‡–
¨gv
[
¨gc
] && (
	`°rcmp
(argv[argc], "-resize") == 0) ) {

180 
videoÊags
 |
SDL_RESIZABLE
;

182 i‡–
¨gv
[
¨gc
] && (
	`°rcmp
(argv[argc], "-fullscreen") == 0) ) {

183 
videoÊags
 |
SDL_FULLSCREEN
;

185 
	`Ârötf
(
°dîr
, "Usage: %s [-width] [-height] [-bpp] [-hw] [-hwpalette] [-flip] [-noframe] [-fullscreen] [-resize]\n",

186 
¨gv
[0]);

187 
	`exô
(1);

192 
s¸ìn
 = 
	`Cª©eS¸ìn
(
width
, 
height
, 
bµ
, 
videoÊags
);

193 i‡–
s¸ìn
 =
NULL
 ) {

194 
	`exô
(2);

197 
	`DøwBackground
(
s¸ìn
);

200 
d⁄e
 = 0;

201  !
d⁄e
 && 
	`SDL_WaôEvít
(&
evít
) ) {

202 
evít
.
ty≥
) {

203 
SDL_MOUSEBUTTONDOWN
:

204 
	`DøwBox
(
s¸ìn
, 
evít
.
buâ⁄
.
x
,Évít.buâ⁄.
y
, 
width
, 
height
);

206 
SDL_KEYDOWN
:

208 i‡–(
evít
.
key
.
keysym
.
sym
 =
SDLK_LALT
) ||

209 (
evít
.
key
.
keysym
.
sym
 =
SDLK_TAB
) ) {

213 i‡–
evít
.
key
.
keysym
.
sym
 =
SDLK_SPACE
 ) {

214 
	`SDL_W¨pMou£
(
width
/2, 
height
/2);

218 i‡–
evít
.
key
.
keysym
.
sym
 =
SDLK_RETURN
 ) {

219 
videoÊags
 ^
SDL_FULLSCREEN
;

220 
s¸ìn
 = 
	`Cª©eS¸ìn
(

221 
s¸ìn
->
w
, s¸ìn->
h
,

222 
s¸ìn
->
f‹m©
->
BôsPîPixñ
,

223 
videoÊags
);

224 i‡–
s¸ìn
 =
NULL
 ) {

225 
	`Ârötf
(
°dîr
,

227 
d⁄e
 = 1;

229 
	`DøwBackground
(
s¸ìn
);

233 
SDL_QUIT
:

234 
d⁄e
 = 1;

236 
SDL_VIDEOEXPOSE
:

237 
	`DøwBackground
(
s¸ìn
);

239 
SDL_VIDEORESIZE
:

240 
s¸ìn
 = 
	`Cª©eS¸ìn
(

241 
evít
.
ªsize
.
w
,Évít.ªsize.
h
,

242 
s¸ìn
->
f‹m©
->
BôsPîPixñ
,

243 
videoÊags
);

244 i‡–
s¸ìn
 =
NULL
 ) {

245 
	`Ârötf
(
°dîr
,

247 
d⁄e
 = 1;

249 
	`DøwBackground
(
s¸ìn
);

255 
	`SDL_Quô
();

257 
	}
}

	@SDL-win/test/loopwave.c

7 
	~"SDL_c⁄fig.h
"

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

12 #i‡
HAVE_SIGNAL_H


13 
	~<sig«l.h
>

16 
	~"SDL.h
"

17 
	~"SDL_audio.h
"

20 
SDL_AudioS≥c
 
	m•ec
;

21 
Uöt8
 *
	msound
;

22 
Uöt32
 
	msoundÀn
;

23 
	msoundpos
;

24 } 
	gwave
;

28 
	$quô
(
rc
)

30 
	`SDL_Quô
();

31 
	`exô
(
rc
);

32 
	}
}

35 
SDLCALL
 
	$fûÀrup
(*
unu£d
, 
Uöt8
 *
°ªam
, 
Àn
)

37 
Uöt8
 *
wavïå
;

38 
wavñe·
;

41 
wavïå
 = 
wave
.
sound
 + wave.
soundpos
;

42 
wavñe·
 = 
wave
.
soundÀn
 - wave.
soundpos
;

45  
wavñe·
 <
Àn
 ) {

46 
	`SDL_mem˝y
(
°ªam
, 
wavïå
, 
wavñe·
);

47 
°ªam
 +
wavñe·
;

48 
Àn
 -
wavñe·
;

49 
wavïå
 = 
wave
.
sound
;

50 
wavñe·
 = 
wave
.
soundÀn
;

51 
wave
.
soundpos
 = 0;

53 
	`SDL_mem˝y
(
°ªam
, 
wavïå
, 
Àn
);

54 
wave
.
soundpos
 +
Àn
;

55 
	}
}

57 
	gd⁄e
 = 0;

58 
	$poked
(
sig
)

60 
d⁄e
 = 1;

61 
	}
}

63 
	$maö
(
¨gc
, *
¨gv
[])

65 
«me
[32];

68 i‡–
	`SDL_Inô
(
SDL_INIT_AUDIO
) < 0 ) {

69 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

72 i‡–
¨gv
[1] =
NULL
 ) {

73 
¨gv
[1] = "sample.wav";

76 i‡–
	`SDL_LﬂdWAV
(
¨gv
[1],

77 &
wave
.
•ec
, &wave.
sound
, &wave.
soundÀn
Ë=
NULL
 ) {

78 
	`Ârötf
(
°dîr
, "Couldn'tÜoad %s: %s\n",

79 
¨gv
[1], 
	`SDL_GëEº‹
());

80 
	`quô
(1);

83 
wave
.
•ec
.
ˇŒback
 = 
fûÀrup
;

84 #i‡
HAVE_SIGNAL_H


86 #ifde‡
SIGHUP


87 
	`sig«l
(
SIGHUP
, 
poked
);

89 
	`sig«l
(
SIGINT
, 
poked
);

90 #ifde‡
SIGQUIT


91 
	`sig«l
(
SIGQUIT
, 
poked
);

93 
	`sig«l
(
SIGTERM
, 
poked
);

97 i‡–
	`SDL_O≥nAudio
(&
wave
.
•ec
, 
NULL
) < 0 ) {

98 
	`Ârötf
(
°dîr
, "Couldn'à›íáudio: %s\n", 
	`SDL_GëEº‹
());

99 
	`SDL_FªeWAV
(
wave
.
sound
);

100 
	`quô
(2);

102 
	`SDL_Pau£Audio
(0);

105 
	`¥ötf
("Usögáudiÿdrivî: %s\n", 
	`SDL_AudioDrivîName
(
«me
, 32));

106  ! 
d⁄e
 && (
	`SDL_GëAudioSètus
(Ë=
SDL_AUDIO_PLAYING
) )

107 
	`SDL_Dñay
(1000);

110 
	`SDL_Clo£Audio
();

111 
	`SDL_FªeWAV
(
wave
.
sound
);

112 
	`SDL_Quô
();

114 
	}
}

	@SDL-win/test/testalpha.c

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

9 
	~<m©h.h
>

11 
	~"SDL.h
"

13 
	#FRAME_TICKS
 (1000/30Ë

	)

16 
	$quô
(
rc
)

18 
	`SDL_Quô
();

19 
	`exô
(
rc
);

20 
	}
}

23 
	$FûlBackground
(
SDL_SurÁ˚
 *
s¸ìn
)

25 
Uöt8
 *
buf„r
;

26 
Uöt16
 *
buf„r16
;

27 
Uöt16
 
cﬁ‹
;

28 
Uöt8
 
gødõ¡
;

29 
i
, 
k
;

32 i‡–
	`SDL_LockSurÁ˚
(
s¸ìn
) < 0 ) {

33 
	`Ârötf
(
°dîr
, "Couldn'tÜockÅhe display surface: %s\n",

34 
	`SDL_GëEº‹
());

35 
	`quô
(2);

37 
buf„r
=(
Uöt8
 *)
s¸ìn
->
pixñs
;

38 i‡(
s¸ìn
->
f‹m©
->
ByãsPîPixñ
!=2) {

39  
i
=0; i<
s¸ìn
->
h
; ++i ) {

40 
	`mem£t
(
buf„r
,(
i
*255)/
s¸ìn
->
h
, s¸ìn->
w
*s¸ìn->
f‹m©
->
ByãsPîPixñ
);

41 
buf„r
 +
s¸ìn
->
pôch
;

46  
i
=0; i<
s¸ìn
->
h
; ++i ) {

47 
gødõ¡
=((
i
*255)/
s¸ìn
->
h
);

48 
cﬁ‹
 = (
Uöt16
)
	`SDL_M≠RGB
(
s¸ìn
->
f‹m©
, 
gødõ¡
, gradient, gradient);

49 
buf„r16
=(
Uöt16
*)
buf„r
;

50 
k
=0; k<
s¸ìn
->
w
; k++)

52 *(
buf„r16
+
k
)=
cﬁ‹
;

54 
buf„r
 +
s¸ìn
->
pôch
;

58 
	`SDL_U∆ockSurÁ˚
(
s¸ìn
);

59 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0, 0, 0, 0);

60 
	}
}

63 
SDL_SurÁ˚
 *
	$Cª©eLight
(
ødius
)

65 
Uöt8
 
å™s
, 
Æphamask
;

66 
ønge
, 
addôi⁄
;

67 
xdi°
, 
ydi°
;

68 
Uöt16
 
x
, 
y
;

69 
Uöt16
 
skù
;

70 
Uöt32
 
pixñ
;

71 
SDL_SurÁ˚
 *
light
;

73 #ifde‡
LIGHT_16BIT


74 
Uöt16
 *
buf
;

78 
Æphamask
 = 0x0000000F;

79 
light
 = 
	`SDL_Cª©eRGBSurÁ˚
(
SDL_SWSURFACE
, 2*
ødius
, 2*radius, 16,

80 0x0000F000, 0x00000F00, 0x000000F0, 
Æphamask
);

82 
Uöt32
 *
buf
;

85 
Æphamask
 = 0x000000FF;

86 
light
 = 
	`SDL_Cª©eRGBSurÁ˚
(
SDL_SWSURFACE
, 2*
ødius
, 2*radius, 32,

87 0xFF000000, 0x00FF0000, 0x0000FF00, 
Æphamask
);

88 i‡–
light
 =
NULL
 ) {

89 
	`Ârötf
(
°dîr
, "Couldn'à¸óãÜight: %s\n", 
	`SDL_GëEº‹
());

90 (
NULL
);

95 
skù
 = 
light
->
pôch
-÷ight->
w
*light->
f‹m©
->
ByãsPîPixñ
);

96 #ifde‡
LIGHT_16BIT


97 
buf
 = (
Uöt16
 *)
light
->
pixñs
;

99 
buf
 = (
Uöt32
 *)
light
->
pixñs
;

102 
pixñ
 = 
	`SDL_M≠RGBA
(
light
->
f‹m©
, 0xFF, 0xDD, 0x88, 0);

103  
y
=0; y<
light
->
h
; ++y ) {

104  
x
=0; x<
light
->
w
; ++x ) {

105 *
buf
++ = 
pixñ
;

107 
buf
 +
skù
;

111 #ifde‡
LIGHT_16BIT


112 
buf
 = (
Uöt16
 *)
light
->
pixñs
;

114 
buf
 = (
Uöt32
 *)
light
->
pixñs
;

116  
y
=0; y<
light
->
h
; ++y ) {

117  
x
=0; x<
light
->
w
; ++x ) {

119 
xdi°
 = 
x
-(
light
->
w
/2);

120 
ydi°
 = 
y
-(
light
->
h
/2);

121 
ønge
 = ()
	`sqπ
(
xdi°
*xdi°+
ydi°
*ydist);

124 i‡–
ønge
 > 
ødius
 ) {

125 
å™s
 = 
Æphamask
;

128 
å™s
 = (
Uöt8
)((
ønge
*
Æphamask
)/
ødius
);

131 
addôi⁄
 = (
Æphamask
+1)/8;

132 i‡–()
å™s
+
addôi⁄
 > 
Æphamask
 ) {

133 
å™s
 = 
Æphamask
;

135 
å™s
 +
addôi⁄
;

139 *
buf
++ |(255-
å™s
);

141 
buf
 +
skù
;

144 
	`SDL_SëAÕha
(
light
, 
SDL_SRCALPHA
|
SDL_RLEACCEL
, 0);

147 (
light
);

148 
	}
}

150 
Uöt32
 
	gÊashes
 = 0;

151 
Uöt32
 
	gÊashtime
 = 0;

153 
	$FœshLight
(
SDL_SurÁ˚
 *
s¸ìn
, SDL_SurÁ˚ *
light
, 
x
, 
y
)

155 
SDL_Re˘
 
posôi⁄
;

156 
Uöt32
 
ticks1
;

157 
Uöt32
 
ticks2
;

160 
posôi⁄
.
x
 = x-(
light
->
w
/2);

161 
posôi⁄
.
y
 = y-(
light
->
h
/2);

162 
posôi⁄
.
w
 = 
light
->w;

163 
posôi⁄
.
h
 = 
light
->h;

164 
ticks1
 = 
	`SDL_GëTicks
();

165 
	`SDL_BlôSurÁ˚
(
light
, 
NULL
, 
s¸ìn
, &
posôi⁄
);

166 
ticks2
 = 
	`SDL_GëTicks
();

167 
	`SDL_Upd©eRe˘s
(
s¸ìn
, 1, &
posôi⁄
);

168 ++
Êashes
;

171 
Êashtime
 +(
ticks2
-
ticks1
);

172 
	}
}

174 
	g•rôe_visibÀ
 = 0;

175 
SDL_SurÁ˚
 *
	g•rôe
;

176 
SDL_SurÁ˚
 *
	gbackög
;

177 
SDL_Re˘
 
	gposôi⁄
;

178 
	gx_vñ
, 
	gy_vñ
;

179 
	gÆpha_vñ
;

181 
	$LﬂdS¥ôe
(
SDL_SurÁ˚
 *
s¸ìn
, *
fûe
)

183 
SDL_SurÁ˚
 *
c⁄vîãd
;

186 
•rôe
 = 
	`SDL_LﬂdBMP
(
fûe
);

187 i‡–
•rôe
 =
NULL
 ) {

188 
	`Ârötf
(
°dîr
, "Couldn'àlﬂd %s: %s", 
fûe
, 
	`SDL_GëEº‹
());

193 i‡–
•rôe
->
f‹m©
->
∑Àâe
 ) {

194 
	`SDL_SëCﬁ‹Key
(
•rôe
, 
SDL_SRCCOLORKEY
,

195 *(
Uöt8
 *)
•rôe
->
pixñs
);

199 
c⁄vîãd
 = 
	`SDL_Di•œyF‹m©
(
•rôe
);

200 
	`SDL_FªeSurÁ˚
(
•rôe
);

201 i‡–
c⁄vîãd
 =
NULL
 ) {

202 
	`Ârötf
(
°dîr
, "Couldn't convert background: %s\n",

203 
	`SDL_GëEº‹
());

206 
•rôe
 = 
c⁄vîãd
;

209 
backög
 = 
	`SDL_Cª©eRGBSurÁ˚
(
SDL_SWSURFACE
, 
•rôe
->
w
, s¥ôe->
h
, 8,

211 i‡–
backög
 =
NULL
 ) {

212 
	`Ârötf
(
°dîr
, "Couldn't create background: %s\n",

213 
	`SDL_GëEº‹
());

214 
	`SDL_FªeSurÁ˚
(
•rôe
);

219 
c⁄vîãd
 = 
	`SDL_Di•œyF‹m©
(
backög
);

220 
	`SDL_FªeSurÁ˚
(
backög
);

221 i‡–
c⁄vîãd
 =
NULL
 ) {

222 
	`Ârötf
(
°dîr
, "Couldn't convert background: %s\n",

223 
	`SDL_GëEº‹
());

224 
	`SDL_FªeSurÁ˚
(
•rôe
);

227 
backög
 = 
c⁄vîãd
;

230 
posôi⁄
.
x
 = (
s¸ìn
->
w
-
•rôe
->w)/2;

231 
posôi⁄
.
y
 = (
s¸ìn
->
h
-
•rôe
->h)/2;

232 
posôi⁄
.
w
 = 
•rôe
->w;

233 
posôi⁄
.
h
 = 
•rôe
->h;

234 
x_vñ
 = 0; 
y_vñ
 = 0;

235 
Æpha_vñ
 = 1;

239 
	}
}

241 
	$Aâø˘S¥ôe
(
Uöt16
 
x
, Uöt16 
y
)

243 
x_vñ
 = (()
x
-
posôi⁄
.x)/10;

244 
y_vñ
 = (()
y
-
posôi⁄
.y)/10;

245 
	}
}

247 
	$MoveS¥ôe
(
SDL_SurÁ˚
 *
s¸ìn
, SDL_SurÁ˚ *
light
)

249 
SDL_Re˘
 
upd©es
[2];

250 
Æpha
;

253 i‡–
•rôe_visibÀ
 ) {

254 
upd©es
[0] = 
posôi⁄
;

255 
	`SDL_BlôSurÁ˚
(
backög
, 
NULL
, 
s¸ìn
, &
upd©es
[0]);

257 
upd©es
[0].
x
 = 0; upd©es[0].
y
 = 0;

258 
upd©es
[0].
w
 = 0; upd©es[0].
h
 = 0;

259 
•rôe_visibÀ
 = 1;

265 i‡–
light
 !
NULL
 ) {

266 
x
, 
y
;

268 
	`SDL_GëMou£Sèã
(&
x
, &
y
);

269 
	`FœshLight
(
s¸ìn
, 
light
, 
x
, 
y
);

273 
posôi⁄
.
x
 +
x_vñ
;

274 i‡–(
posôi⁄
.
x
 < 0Ë|| (posôi⁄.x >
s¸ìn
->
w
) ) {

275 
x_vñ
 = -x_vel;

276 
posôi⁄
.
x
 +
x_vñ
;

278 
posôi⁄
.
y
 +
y_vñ
;

279 i‡–(
posôi⁄
.
y
 < 0Ë|| (posôi⁄.y >
s¸ìn
->
h
) ) {

280 
y_vñ
 = -y_vel;

281 
posôi⁄
.
y
 +
y_vñ
;

285 
Æpha
 = 
•rôe
->
f‹m©
->alpha;

286 i‡–(
Æpha
+
Æpha_vñ
) < 0 ) {

287 
Æpha_vñ
 = -alpha_vel;

289 i‡–(
Æpha
+
Æpha_vñ
) > 255 ) {

290 
Æpha_vñ
 = -alpha_vel;

292 
	`SDL_SëAÕha
(
•rôe
, 
SDL_SRCALPHA
, (
Uöt8
)(
Æpha
+
Æpha_vñ
));

295 
upd©es
[1] = 
posôi⁄
;

296 
	`SDL_BlôSurÁ˚
(
s¸ìn
, &
upd©es
[1], 
backög
, 
NULL
);

299 
upd©es
[1] = 
posôi⁄
;

300 
	`SDL_BlôSurÁ˚
(
•rôe
, 
NULL
, 
s¸ìn
, &
upd©es
[1]);

303 
	`SDL_Upd©eRe˘s
(
s¸ìn
, 2, 
upd©es
);

304 
	}
}

306 
	$W¨pS¥ôe
(
SDL_SurÁ˚
 *
s¸ìn
, 
x
, 
y
)

308 
SDL_Re˘
 
upd©es
[2];

311 
upd©es
[0] = 
posôi⁄
;

312 
	`SDL_BlôSurÁ˚
(
backög
, 
NULL
, 
s¸ìn
, &
upd©es
[0]);

313 
posôi⁄
.
x
 = x-
•rôe
->
w
/2;

314 
posôi⁄
.
y
 = y-
•rôe
->
h
/2;

315 
upd©es
[1] = 
posôi⁄
;

316 
	`SDL_BlôSurÁ˚
(
s¸ìn
, &
upd©es
[1], 
backög
, 
NULL
);

317 
upd©es
[1] = 
posôi⁄
;

318 
	`SDL_BlôSurÁ˚
(
•rôe
, 
NULL
, 
s¸ìn
, &
upd©es
[1]);

319 
	`SDL_Upd©eRe˘s
(
s¸ìn
, 2, 
upd©es
);

320 
	}
}

322 
	$maö
(
¨gc
, *
¨gv
[])

324 c⁄° 
SDL_VideoInfo
 *
öfo
;

325 
SDL_SurÁ˚
 *
s¸ìn
;

326 
w
, 
h
;

327 
Uöt8
 
video_bµ
;

328 
Uöt32
 
videoÊags
;

329 
i
, 
d⁄e
;

330 
SDL_Evít
 
evít
;

331 
SDL_SurÁ˚
 *
light
;

332 
mou£_¥es£d
;

333 
Uöt32
 
ticks
, 
œ°ticks
;

337 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 ) {

338 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

343 #ifde‡
_WIN32_WCE


345 
w
 = 240;

346 
h
 = 320;

348 
w
 = 640;

349 
h
 = 480;

351 
öfo
 = 
	`SDL_GëVideoInfo
();

352 i‡–
öfo
->
vfmt
->
BôsPîPixñ
 > 8 ) {

353 
video_bµ
 = 
öfo
->
vfmt
->
BôsPîPixñ
;

355 
video_bµ
 = 16;

356 
	`Ârötf
(
°dîr
, "forced 16 bpp mode\n");

358 
videoÊags
 = 
SDL_SWSURFACE
;

359  
i
 = 1; 
¨gv
[i]; ++i ) {

360 i‡–
	`°rcmp
(
¨gv
[
i
], "-bpp") == 0 ) {

361 
video_bµ
 = 
	`©oi
(
¨gv
[++
i
]);

362 i‡(
video_bµ
<=8) {

363 
video_bµ
=16;

364 
	`Ârötf
(
°dîr
, "forced 16 bpp mode\n");

367 i‡–
	`°rcmp
(
¨gv
[
i
], "-hw") == 0 ) {

368 
videoÊags
 |
SDL_HWSURFACE
;

370 i‡–
	`°rcmp
(
¨gv
[
i
], "-warp") == 0 ) {

371 
videoÊags
 |
SDL_HWPALETTE
;

373 i‡–
	`°rcmp
(
¨gv
[
i
], "-width") == 0 &&árgv[i+1] ) {

374 
w
 = 
	`©oi
(
¨gv
[++
i
]);

376 i‡–
	`°rcmp
(
¨gv
[
i
], "-height") == 0 &&árgv[i+1] ) {

377 
h
 = 
	`©oi
(
¨gv
[++
i
]);

379 i‡–
	`°rcmp
(
¨gv
[
i
], "-resize") == 0 ) {

380 
videoÊags
 |
SDL_RESIZABLE
;

382 i‡–
	`°rcmp
(
¨gv
[
i
], "-noframe") == 0 ) {

383 
videoÊags
 |
SDL_NOFRAME
;

385 i‡–
	`°rcmp
(
¨gv
[
i
], "-fullscreen") == 0 ) {

386 
videoÊags
 |
SDL_FULLSCREEN
;

388 
	`Ârötf
(
°dîr
,

390 
¨gv
[0]);

391 
	`quô
(1);

396 i‡–(
s¸ìn
=
	`SDL_SëVideoMode
(
w
,
h
,
video_bµ
,
videoÊags
)Ë=
NULL
 ) {

397 
	`Ârötf
(
°dîr
, "Couldn't set %dx%dx%d video mode: %s\n",

398 
w
, 
h
, 
video_bµ
, 
	`SDL_GëEº‹
());

399 
	`quô
(2);

401 
	`FûlBackground
(
s¸ìn
);

404 
light
 = 
	`Cª©eLight
(82);

405 i‡–
light
 =
NULL
 ) {

406 
	`quô
(1);

410 i‡–
	`LﬂdS¥ôe
(
s¸ìn
, "icon.bmp") < 0 ) {

411 
	`SDL_FªeSurÁ˚
(
light
);

412 
	`quô
(1);

416 
	`¥ötf
("S¸ì¿i†© %d bô†≥∏pixñ\n",
s¸ìn
->
f‹m©
->
BôsPîPixñ
);

417 i‡–(
s¸ìn
->
Êags
 & 
SDL_HWSURFACE
) == SDL_HWSURFACE ) {

418 
	`¥ötf
("Screen is in video memory\n");

420 
	`¥ötf
("Screen is in system memory\n");

422 i‡–(
s¸ìn
->
Êags
 & 
SDL_DOUBLEBUF
) == SDL_DOUBLEBUF ) {

423 
	`¥ötf
("Screen has double-bufferingÉnabled\n");

425 i‡–(
•rôe
->
Êags
 & 
SDL_HWSURFACE
) == SDL_HWSURFACE ) {

426 
	`¥ötf
("Sprite is in video memory\n");

428 
	`¥ötf
("Sprite is in system memory\n");

432 
	`MoveS¥ôe
(
s¸ìn
, 
NULL
);

433 i‡–(
•rôe
->
Êags
 & 
SDL_HWACCEL
) == SDL_HWACCEL ) {

434 
	`¥ötf
("Sprite blit uses hardwareálphaácceleration\n");

436 
	`¥ötf
("Sprite blit dosn't uses hardwareálphaácceleration\n");

440 { 
SDL_Re˘
 
˛ù
;

441 
˛ù
.
x
 = 32;

442 
˛ù
.
y
 = 32;

443 
˛ù
.
w
 = 
s¸ìn
->w-(2*32);

444 
˛ù
.
h
 = 
s¸ìn
->h-(2*32);

445 
	`SDL_SëClùRe˘
(
s¸ìn
, &
˛ù
);

449 
œ°ticks
 = 
	`SDL_GëTicks
();

450 
d⁄e
 = 0;

451 
mou£_¥es£d
 = 0;

452  !
d⁄e
 ) {

454 i‡–
mou£_¥es£d
 ) {

455 
	`MoveS¥ôe
(
s¸ìn
, 
light
);

456 
mou£_¥es£d
 = 0;

458 
	`MoveS¥ôe
(
s¸ìn
, 
NULL
);

462 
ticks
 = 
	`SDL_GëTicks
();

463 i‡–(
ticks
-
œ°ticks
Ë< 
FRAME_TICKS
 ) {

464 #ifde‡
CHECK_SLEEP_GRANULARITY


465 
	`Ârötf
(
°dîr
, "SÀïög %dÅicks\n", 
FRAME_TICKS
-(
ticks
-
œ°ticks
));

467 
	`SDL_Dñay
(
FRAME_TICKS
-(
ticks
-
œ°ticks
));

468 #ifde‡
CHECK_SLEEP_GRANULARITY


469 
	`Ârötf
(
°dîr
, "SÀ± %dÅicks\n", (
	`SDL_GëTicks
()-
ticks
));

472 
œ°ticks
 = 
ticks
;

475  
	`SDL_PﬁlEvít
(&
evít
) ) {

476 
evít
.
ty≥
) {

477 
SDL_VIDEORESIZE
:

478 
s¸ìn
 = 
	`SDL_SëVideoMode
(
evít
.
ªsize
.
w
,Évít.ªsize.
h
, 
video_bµ
, 
videoÊags
);

479 i‡–
s¸ìn
 ) {

480 
	`FûlBackground
(
s¸ìn
);

484 
SDL_MOUSEMOTION
:

485 i‡(
evít
.
mŸi⁄
.
°©e
 != 0) {

486 
	`Aâø˘S¥ôe
(
evít
.
mŸi⁄
.
x
,

487 
evít
.
mŸi⁄
.
y
);

488 
mou£_¥es£d
 = 1;

491 
SDL_MOUSEBUTTONDOWN
:

492 i‡–
evít
.
buâ⁄
.button == 1 ) {

493 
	`Aâø˘S¥ôe
(
evít
.
buâ⁄
.
x
,

494 
evít
.
buâ⁄
.
y
);

495 
mou£_¥es£d
 = 1;

497 
SDL_Re˘
 
¨ó
;

499 
¨ó
.
x
 = 
evít
.
buâ⁄
.x-16;

500 
¨ó
.
y
 = 
evít
.
buâ⁄
.y-16;

501 
¨ó
.
w
 = 32;

502 
¨ó
.
h
 = 32;

503 
	`SDL_FûlRe˘
(
s¸ìn
, &
¨ó
, 0);

504 
	`SDL_Upd©eRe˘s
(
s¸ìn
,1,&
¨ó
);

507 
SDL_KEYDOWN
:

508 #ifde‡
_WIN32_WCE


510 
d⁄e
 = 1;

512 i‡–
evít
.
key
.
keysym
.
sym
 =
SDLK_ESCAPE
 ) {

513 
d⁄e
 = 1;

514 } i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_t
) {

515 
videoÊags
 ^
SDL_FULLSCREEN
;

516 
s¸ìn
 = 
	`SDL_SëVideoMode
(
w
, 
h
, 
video_bµ
, 
videoÊags
);

517 i‡–
s¸ìn
 =
NULL
 ) {

518 
	`Ârötf
(
°dîr
, "Couldn'tÅoggle video mode: %s\n",

519 
	`SDL_GëEº‹
());

520 
	`quô
(2);

522 
	`FûlBackground
(
s¸ìn
);

527 
SDL_QUIT
:

528 
d⁄e
 = 1;

535 
	`SDL_FªeSurÁ˚
(
light
);

536 
	`SDL_FªeSurÁ˚
(
•rôe
);

537 
	`SDL_FªeSurÁ˚
(
backög
);

540 i‡–
Êashes
 > 0 ) {

541 
	`¥ötf
("%dálpha blits, ~%4.4f msÖer blit\n",

542 
Êashes
, ()
Êashtime
/flashes);

545 
	`SDL_Quô
();

547 
	}
}

	@SDL-win/test/testbitmap.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

8 
	~"SDL.h
"

9 
	~"pi˘uª.xbm
"

12 
	$quô
(
rc
)

14 
	`SDL_Quô
();

15 
	`exô
(
rc
);

16 
	}
}

18 
SDL_SurÁ˚
 *
	$LﬂdXBM
(
SDL_SurÁ˚
 *
s¸ìn
, 
w
, 
h
, 
Uöt8
 *
bôs
)

20 
SDL_SurÁ˚
 *
bôm≠
;

21 
Uöt8
 *
löe
;

24 
bôm≠
 = 
	`SDL_Cª©eRGBSurÁ˚
(
SDL_SWSURFACE
, 
w
, 
h
, 1, 0, 0, 0, 0);

25 i‡–
bôm≠
 =
NULL
 ) {

26 
	`Ârötf
(
°dîr
, "Couldn'tállocate bitmap: %s\n",

27 
	`SDL_GëEº‹
());

28 (
NULL
);

32 
löe
 = (
Uöt8
 *)
bôm≠
->
pixñs
;

33 
w
 = (w+7)/8;

34  
h
-- ) {

35 
	`mem˝y
(
löe
, 
bôs
, 
w
);

37 { 
i
, 
j
; 
Uöt8
 *
buf
, 
byã
;

38  
buf
=
löe
, 
i
=0; i<
w
; ++i, ++buf ) {

39 
byã
 = *
buf
;

40 *
buf
 = 0;

41  
j
=7; j>=0; --j ) {

42 *
buf
 |(
byã
&0x01)<<
j
;

43 
byã
 >>= 1;

47 
löe
 +
bôm≠
->
pôch
;

48 
bôs
 +
w
;

50 (
bôm≠
);

51 
	}
}

53 
	$maö
(
¨gc
, *
¨gv
[])

55 
SDL_SurÁ˚
 *
s¸ìn
;

56 
SDL_SurÁ˚
 *
bôm≠
;

57 
Uöt8
 
video_bµ
;

58 
Uöt32
 
videoÊags
;

59 
Uöt8
 *
buf„r
;

60 
i
, 
k
, 
d⁄e
;

61 
SDL_Evít
 
evít
;

62 
Uöt16
 *
buf„r16
;

63 
Uöt16
 
cﬁ‹
;

64 
Uöt8
 
gødõ¡
;

65 
SDL_Cﬁ‹
 
∑Àâe
[256];

69 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 ) {

70 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

74 
video_bµ
 = 0;

75 
videoÊags
 = 
SDL_SWSURFACE
;

76  
¨gc
 > 1 ) {

77 --
¨gc
;

78 i‡–
	`°rcmp
(
¨gv
[
¨gc
-1], "-bpp") == 0 ) {

79 
video_bµ
 = 
	`©oi
(
¨gv
[
¨gc
]);

80 --
¨gc
;

82 i‡–
	`°rcmp
(
¨gv
[
¨gc
], "-warp") == 0 ) {

83 
videoÊags
 |
SDL_HWPALETTE
;

85 i‡–
	`°rcmp
(
¨gv
[
¨gc
], "-hw") == 0 ) {

86 
videoÊags
 |
SDL_HWSURFACE
;

88 i‡–
	`°rcmp
(
¨gv
[
¨gc
], "-fullscreen") == 0 ) {

89 
videoÊags
 |
SDL_FULLSCREEN
;

91 
	`Ârötf
(
°dîr
,

93 
¨gv
[0]);

94 
	`quô
(1);

99 i‡–(
s¸ìn
=
	`SDL_SëVideoMode
(640,480,
video_bµ
,
videoÊags
)Ë=
NULL
 ) {

100 
	`Ârötf
(
°dîr
, "Couldn't set 640x480x%d video mode: %s\n",

101 
video_bµ
, 
	`SDL_GëEº‹
());

102 
	`quô
(2);

105 i‡(
video_bµ
==8) {

107  
i
=0; i<256; ++i ) {

108 
∑Àâe
[
i
].
r
 = 255-i;

109 
∑Àâe
[
i
].
g
 = 255-i;

110 
∑Àâe
[
i
].
b
 = 255-i;

112 
	`SDL_SëCﬁ‹s
(
s¸ìn
, 
∑Àâe
, 0, 256);

116 i‡–
	`SDL_LockSurÁ˚
(
s¸ìn
) < 0 ) {

117 
	`Ârötf
(
°dîr
, "Couldn'tÜockÅhe display surface: %s\n",

118 
	`SDL_GëEº‹
());

119 
	`quô
(2);

121 
buf„r
=(
Uöt8
 *)
s¸ìn
->
pixñs
;

122 i‡(
s¸ìn
->
f‹m©
->
ByãsPîPixñ
!=2) {

123  
i
=0; i<
s¸ìn
->
h
; ++i ) {

124 
	`mem£t
(
buf„r
,(
i
*255)/
s¸ìn
->
h
, s¸ìn->
pôch
);

125 
buf„r
 +
s¸ìn
->
pôch
;

130  
i
=0; i<
s¸ìn
->
h
; ++i ) {

131 
gødõ¡
=((
i
*255)/
s¸ìn
->
h
);

132 
cﬁ‹
 = 
	`SDL_M≠RGB
(
s¸ìn
->
f‹m©
, 
gødõ¡
, gradient, gradient);

133 
buf„r16
=(
Uöt16
*)
buf„r
;

134 
k
=0; k<
s¸ìn
->
w
; k++)

136 *(
buf„r16
+
k
)=
cﬁ‹
;

138 
buf„r
 +
s¸ìn
->
pôch
;

141 
	`SDL_U∆ockSurÁ˚
(
s¸ìn
);

142 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0, 0, 0, 0);

145 
bôm≠
 = 
	`LﬂdXBM
(
s¸ìn
, 
pi˘uª_width
, 
pi˘uª_height
,

146 (
Uöt8
 *)
pi˘uª_bôs
);

147 i‡–
bôm≠
 =
NULL
 ) {

148 
	`quô
(1);

152 
d⁄e
 = 0;

153  !
d⁄e
 ) {

155  
	`SDL_PﬁlEvít
(&
evít
) ) {

156 
evít
.
ty≥
) {

157 
SDL_MOUSEBUTTONDOWN
: {

158 
SDL_Re˘
 
d°
;

160 
d°
.
x
 = 
evít
.
buâ⁄
.x - 
bôm≠
->
w
/2;

161 
d°
.
y
 = 
evít
.
buâ⁄
.y - 
bôm≠
->
h
/2;

162 
d°
.
w
 = 
bôm≠
->w;

163 
d°
.
h
 = 
bôm≠
->h;

164 
	`SDL_BlôSurÁ˚
(
bôm≠
, 
NULL
,

165 
s¸ìn
, &
d°
);

166 
	`SDL_Upd©eRe˘s
(
s¸ìn
,1,&
d°
);

169 
SDL_KEYDOWN
:

171 
d⁄e
 = 1;

173 
SDL_QUIT
:

174 
d⁄e
 = 1;

181 
	`SDL_FªeSurÁ˚
(
bôm≠
);

182 
	`SDL_Quô
();

184 
	}
}

	@SDL-win/test/testblitspeed.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

11 
	~"SDL.h
"

13 
SDL_SurÁ˚
 *
	gde°
 = 
NULL
;

14 
SDL_SurÁ˚
 *
	g§c
 = 
NULL
;

15 
	gã°Sec⁄ds
 = 10;

18 
	$≥r˚¡
(
vÆ
, 
tŸÆ
)

20 ((Ë((((Ë
vÆ
Ë/ ((Ë
tŸÆ
)) * 100.0f));

21 
	}
}

23 
	$øndR™ge
(
lo
, 
hi
)

25 (
lo
 + (Ë(((Ë
hi
)*
	`ønd
()/(
RAND_MAX
+1.0)));

26 
	}
}

28 
	$c›y_åunc_°r
(*
°r
, 
size_t
 
°rsize
, c⁄° *
Êag°r
)

30 i‡–(
	`°æí
(
°r
Ë+ såÀn(
Êag°r
)Ë>(
°rsize
 - 1) )

31 
	`°r˝y
(
°r
 + (
°rsize
 - 5), " ...");

33 
	`°rˇt
(
°r
, 
Êag°r
);

34 
	}
}

36 
	$__≠≥nd_sdl_surÁ˚_Êag
(
SDL_SurÁ˚
 *
_surÁ˚
, *
°r
,

37 
size_t
 
°rsize
, 
Uöt32
 
Êag
,

38 c⁄° *
Êag°r
)

40 i‡(
_surÁ˚
->
Êags
 & 
Êag
)

41 
	`c›y_åunc_°r
(
°r
, 
°rsize
, 
Êag°r
);

42 
	}
}

45 
	#≠≥nd_sdl_surÁ˚_Êag
(
a
, 
b
, 
c
, 
Ê
Ë
	`__≠≥nd_sdl_surÁ˚_Êag
◊, b, c, fl, " " #Ê)

	)

46 
	#¥öt_tf_°©e
(
°r
, 
vÆ
Ë
	`¥ötf
("%s: {%s}\n", så, (vÆË? "åue" : "Ál£" )

	)

48 
	$ouçut_videoöfo_dëaûs
()

50 c⁄° 
SDL_VideoInfo
 *
öfo
 = 
	`SDL_GëVideoInfo
();

51 
	`¥ötf
("SDL_GetVideoInfo():\n");

52 i‡(
öfo
 =
NULL
)

53 
	`¥ötf
(" (null.)\n");

56 
	`¥öt_tf_°©e
(" h¨dw¨êsurÁ˚ávaûabÀ", 
öfo
->
hw_avaûabÀ
);

57 
	`¥öt_tf_°©e
(" wödow m™agîávaûabÀ", 
öfo
->
wm_avaûabÀ
);

58 
	`¥öt_tf_°©e
("ác˚Àøãd h¨dw¨e->h¨dw¨êblôs", 
öfo
->
blô_hw
);

59 
	`¥öt_tf_°©e
("ác˚Àøãd h¨dw¨e->h¨dw¨êcﬁ‹key blôs", 
öfo
->
blô_hw_CC
);

60 
	`¥öt_tf_°©e
("ác˚Àøãd h¨dw¨e->h¨dw¨êÆph®blôs", 
öfo
->
blô_hw_A
);

61 
	`¥öt_tf_°©e
("ác˚Àøãd so·w¨e->h¨dw¨êblôs", 
öfo
->
blô_sw
);

62 
	`¥öt_tf_°©e
("ác˚Àøãd so·w¨e->h¨dw¨êcﬁ‹key blôs", 
öfo
->
blô_sw_CC
);

63 
	`¥öt_tf_°©e
("ác˚Àøãd so·w¨e->h¨dw¨êÆph®blôs", 
öfo
->
blô_sw_A
);

64 
	`¥öt_tf_°©e
("ác˚Àøãd cﬁ‹ fûls", 
öfo
->
blô_fûl
);

65 
	`¥ötf
(" videÿmem‹y: (%d)\n", 
öfo
->
video_mem
);

68 
	`¥ötf
("\n");

69 
	}
}

71 
	$ouçut_surÁ˚_dëaûs
(c⁄° *
«me
, 
SDL_SurÁ˚
 *
surÁ˚
)

73 
	`¥ötf
("Dëaû†f‹ %s:\n", 
«me
);

75 i‡(
surÁ˚
 =
NULL
)

77 
	`¥ötf
("-WARNING- You've gotá NULL surface!");

81 
f
[256];

82 
	`¥ötf
(" width : %d\n", 
surÁ˚
->
w
);

83 
	`¥ötf
(" heighà : %d\n", 
surÁ˚
->
h
);

84 
	`¥ötf
(" dïth : %d bô†≥∏pixñ\n", 
surÁ˚
->
f‹m©
->
BôsPîPixñ
);

85 
	`¥ötf
("Öôch : %d\n", (Ë
surÁ˚
->
pôch
);

86 
	`¥ötf
("áÕh® : %d\n", (Ë
surÁ˚
->
f‹m©
->
Æpha
);

87 
	`¥ötf
(" cﬁ‹key : 0x%X\n", (Ë
surÁ˚
->
f‹m©
->
cﬁ‹key
);

89 
	`¥ötf
("Ñed bits : 0x%08X mask, %d shift, %dÜoss\n",

90 (Ë
surÁ˚
->
f‹m©
->
Rmask
,

91 (Ë
surÁ˚
->
f‹m©
->
Rshi·
,

92 (Ë
surÁ˚
->
f‹m©
->
Rloss
);

93 
	`¥ötf
(" green bits : 0x%08X mask, %d shift, %dÜoss\n",

94 (Ë
surÁ˚
->
f‹m©
->
Gmask
,

95 (Ë
surÁ˚
->
f‹m©
->
Gshi·
,

96 (Ë
surÁ˚
->
f‹m©
->
Gloss
);

97 
	`¥ötf
(" blue bits : 0x%08X mask, %d shift, %dÜoss\n",

98 (Ë
surÁ˚
->
f‹m©
->
Bmask
,

99 (Ë
surÁ˚
->
f‹m©
->
Bshi·
,

100 (Ë
surÁ˚
->
f‹m©
->
Bloss
);

101 
	`¥ötf
("álpha bits : 0x%08X mask, %d shift, %dÜoss\n",

102 (Ë
surÁ˚
->
f‹m©
->
Amask
,

103 (Ë
surÁ˚
->
f‹m©
->
Ashi·
,

104 (Ë
surÁ˚
->
f‹m©
->
Aloss
);

106 
f
[0] = '\0';

109 i‡((
surÁ˚
->
Êags
 & 
SDL_HWSURFACE
) == 0)

110 
	`c›y_åunc_°r
(
f
,  (f), " SDL_SWSURFACE");

112 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_HWSURFACE
);

113 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_ASYNCBLIT
);

114 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_ANYFORMAT
);

115 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_HWPALETTE
);

116 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_DOUBLEBUF
);

117 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_FULLSCREEN
);

118 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_OPENGL
);

119 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_OPENGLBLIT
);

120 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_RESIZABLE
);

121 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_NOFRAME
);

122 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_HWACCEL
);

123 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_SRCCOLORKEY
);

124 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_RLEACCELOK
);

125 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_RLEACCEL
);

126 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_SRCALPHA
);

127 
	`≠≥nd_sdl_surÁ˚_Êag
(
surÁ˚
, 
f
,  (f), 
SDL_PREALLOC
);

129 i‡(
f
[0] == '\0')

130 
	`°r˝y
(
f
, " (none)");

132 
	`¥ötf
(" fœg† :%s\n", 
f
);

135 
	`¥ötf
("\n");

136 
	}
}

138 
	$ouçut_dëaûs
()

140 
	`ouçut_videoöfo_dëaûs
();

141 
	`ouçut_surÁ˚_dëaûs
("Sour˚ SurÁ˚", 
§c
);

142 
	`ouçut_surÁ˚_dëaûs
("De°ö©i⁄ SurÁ˚", 
de°
);

143 
	}
}

145 
Uöt32
 
	$blô
(
SDL_SurÁ˚
 *
d°
, SDL_SurÁ˚ *
§c
, 
x
, 
y
)

147 
Uöt32
 
°¨t
 = 0;

148 
SDL_Re˘
 
§cRe˘
;

149 
SDL_Re˘
 
d°Re˘
;

151 
§cRe˘
.
x
 = 0;

152 
§cRe˘
.
y
 = 0;

153 
d°Re˘
.
x
 = x;

154 
d°Re˘
.
y
 = y;

155 
d°Re˘
.
w
 = 
§cRe˘
.w = 
§c
->w;

156 
d°Re˘
.
h
 = 
§cRe˘
.h = 
§c
->h;

158 
°¨t
 = 
	`SDL_GëTicks
();

159 
	`SDL_BlôSurÁ˚
(
§c
, &
§cRe˘
, 
d°
, &
d°Re˘
);

160 (
	`SDL_GëTicks
(Ë- 
°¨t
);

161 
	}
}

163 
	$blôCíãªd
(
SDL_SurÁ˚
 *
d°
, SDL_SurÁ˚ *
§c
)

165 
x
 = (
d°
->
w
 - 
§c
->w) / 2;

166 
y
 = (
d°
->
h
 - 
§c
->h) / 2;

167 
	`blô
(
d°
, 
§c
, 
x
, 
y
);

168 
	}
}

170 
	$©oi_hex
(c⁄° *
°r
)

172 i‡(
°r
 =
NULL
)

175 i‡(
	`°æí
(
°r
) > 2)

177 
ªtvÆ
 = 0;

178 i‡((
°r
[0] == '0') && (str[1] == 'x'))

179 
	`ssˇnf
(
°r
 + 2, "%X", &
ªtvÆ
);

180 (
ªtvÆ
);

183 (
	`©oi
(
°r
));

184 
	}
}

187 
	$£tup_ã°
(
¨gc
, **
¨gv
)

189 c⁄° *
dumpfûe
 = 
NULL
;

190 
SDL_SurÁ˚
 *
bmp
 = 
NULL
;

191 
Uöt32
 
d°bµ
 = 32;

192 
Uöt32
 
d°rmask
 = 0x00FF0000;

193 
Uöt32
 
d°gmask
 = 0x0000FF00;

194 
Uöt32
 
d°bmask
 = 0x000000FF;

195 
Uöt32
 
d°amask
 = 0x00000000;

196 
Uöt32
 
d°Êags
 = 0;

197 
d°w
 = 640;

198 
d°h
 = 480;

199 
Uöt32
 
§cbµ
 = 32;

200 
Uöt32
 
§¸mask
 = 0x00FF0000;

201 
Uöt32
 
§cgmask
 = 0x0000FF00;

202 
Uöt32
 
§cbmask
 = 0x000000FF;

203 
Uöt32
 
§ˇmask
 = 0x00000000;

204 
Uöt32
 
§cÊags
 = 0;

205 
§cw
 = 640;

206 
§ch
 = 480;

207 
Uöt32
 
‹ig§ˇÕhaÊags
 = 0;

208 
Uöt32
 
‹igd°ÆphaÊags
 = 0;

209 
Uöt32
 
§ˇÕhaÊags
 = 0;

210 
Uöt32
 
d°ÆphaÊags
 = 0;

211 
§ˇÕha
 = 255;

212 
d°Æpha
 = 255;

213 
s¸ìnSurÁ˚
 = 0;

214 
i
 = 0;

216 
i
 = 1; i < 
¨gc
; i++)

218 c⁄° *
¨g
 = 
¨gv
[
i
];

220 i‡(
	`°rcmp
(
¨g
, "--dstbpp") == 0)

221 
d°bµ
 = 
	`©oi
(
¨gv
[++
i
]);

222 i‡(
	`°rcmp
(
¨g
, "--dstrmask") == 0)

223 
d°rmask
 = 
	`©oi_hex
(
¨gv
[++
i
]);

224 i‡(
	`°rcmp
(
¨g
, "--dstgmask") == 0)

225 
d°gmask
 = 
	`©oi_hex
(
¨gv
[++
i
]);

226 i‡(
	`°rcmp
(
¨g
, "--dstbmask") == 0)

227 
d°bmask
 = 
	`©oi_hex
(
¨gv
[++
i
]);

228 i‡(
	`°rcmp
(
¨g
, "--dstamask") == 0)

229 
d°amask
 = 
	`©oi_hex
(
¨gv
[++
i
]);

230 i‡(
	`°rcmp
(
¨g
, "--dstwidth") == 0)

231 
d°w
 = 
	`©oi
(
¨gv
[++
i
]);

232 i‡(
	`°rcmp
(
¨g
, "--dstheight") == 0)

233 
d°h
 = 
	`©oi
(
¨gv
[++
i
]);

234 i‡(
	`°rcmp
(
¨g
, "--dsthwsurface") == 0)

235 
d°Êags
 |
SDL_HWSURFACE
;

236 i‡(
	`°rcmp
(
¨g
, "--srcbpp") == 0)

237 
§cbµ
 = 
	`©oi
(
¨gv
[++
i
]);

238 i‡(
	`°rcmp
(
¨g
, "--srcrmask") == 0)

239 
§¸mask
 = 
	`©oi_hex
(
¨gv
[++
i
]);

240 i‡(
	`°rcmp
(
¨g
, "--srcgmask") == 0)

241 
§cgmask
 = 
	`©oi_hex
(
¨gv
[++
i
]);

242 i‡(
	`°rcmp
(
¨g
, "--srcbmask") == 0)

243 
§cbmask
 = 
	`©oi_hex
(
¨gv
[++
i
]);

244 i‡(
	`°rcmp
(
¨g
, "--srcamask") == 0)

245 
§ˇmask
 = 
	`©oi_hex
(
¨gv
[++
i
]);

246 i‡(
	`°rcmp
(
¨g
, "--srcwidth") == 0)

247 
§cw
 = 
	`©oi
(
¨gv
[++
i
]);

248 i‡(
	`°rcmp
(
¨g
, "--srcheight") == 0)

249 
§ch
 = 
	`©oi
(
¨gv
[++
i
]);

250 i‡(
	`°rcmp
(
¨g
, "--srchwsurface") == 0)

251 
§cÊags
 |
SDL_HWSURFACE
;

252 i‡(
	`°rcmp
(
¨g
, "--seconds") == 0)

253 
ã°Sec⁄ds
 = 
	`©oi
(
¨gv
[++
i
]);

254 i‡(
	`°rcmp
(
¨g
, "--screen") == 0)

255 
s¸ìnSurÁ˚
 = 1;

256 i‡(
	`°rcmp
(
¨g
, "--dumpfile") == 0)

257 
dumpfûe
 = 
¨gv
[++
i
];

261 
	`Ârötf
(
°dîr
, "Unknow¿comm™dlöê›ti⁄: %s\n", 
¨g
);

266 i‡(
	`SDL_Inô
(
SDL_INIT_VIDEO
) == -1)

268 
	`Ârötf
(
°dîr
, "SDL_Inô faûed: %s\n", 
	`SDL_GëEº‹
());

272 
bmp
 = 
	`SDL_LﬂdBMP
("sample.bmp");

273 i‡(
bmp
 =
NULL
)

275 
	`Ârötf
(
°dîr
, "SDL_LﬂdBMP faûed: %s\n", 
	`SDL_GëEº‹
());

276 
	`SDL_Quô
();

280 i‡((
d°Êags
 & 
SDL_HWSURFACE
Ë=0Ëd°Êag†|
SDL_SWSURFACE
;

281 i‡((
§cÊags
 & 
SDL_HWSURFACE
Ë=0Ë§cÊag†|
SDL_SWSURFACE
;

283 i‡(
s¸ìnSurÁ˚
)

284 
de°
 = 
	`SDL_SëVideoMode
(
d°w
, 
d°h
, 
d°bµ
, 
d°Êags
);

287 
de°
 = 
	`SDL_Cª©eRGBSurÁ˚
(
d°Êags
, 
d°w
, 
d°h
, 
d°bµ
,

288 
d°rmask
, 
d°gmask
, 
d°bmask
, 
d°amask
);

291 i‡(
de°
 =
NULL
)

293 
	`Ârötf
(
°dîr
, "de° surÁ˚ cª©i⁄ faûed: %s\n", 
	`SDL_GëEº‹
());

294 
	`SDL_Quô
();

298 
§c
 = 
	`SDL_Cª©eRGBSurÁ˚
(
§cÊags
, 
§cw
, 
§ch
, 
§cbµ
,

299 
§¸mask
, 
§cgmask
, 
§cbmask
, 
§ˇmask
);

300 i‡(
§c
 =
NULL
)

302 
	`Ârötf
(
°dîr
, "§¯surÁ˚ cª©i⁄ faûed: %s\n", 
	`SDL_GëEº‹
());

303 
	`SDL_Quô
();

308 
§ˇÕhaÊags
 = (
§c
->
Êags
&
SDL_SRCALPHA
Ë| (§c->Êags&
SDL_RLEACCEL
);

309 
d°ÆphaÊags
 = (
de°
->
Êags
&
SDL_SRCALPHA
Ë| (de°->Êags&
SDL_RLEACCEL
);

310 
‹ig§ˇÕhaÊags
 = 
§ˇÕhaÊags
;

311 
‹igd°ÆphaÊags
 = 
d°ÆphaÊags
;

312 
§ˇÕha
 = 
§c
->
f‹m©
->
Æpha
;

313 
d°Æpha
 = 
de°
->
f‹m©
->
Æpha
;

314 
i
 = 1; i < 
¨gc
; i++)

316 c⁄° *
¨g
 = 
¨gv
[
i
];

318 i‡(
	`°rcmp
(
¨g
, "--srcalpha") == 0)

319 
§ˇÕha
 = 
	`©oi
(
¨gv
[++
i
]);

320 i‡(
	`°rcmp
(
¨g
, "--dstalpha") == 0)

321 
d°Æpha
 = 
	`©oi
(
¨gv
[++
i
]);

322 i‡(
	`°rcmp
(
¨g
, "--srcsrcalpha") == 0)

323 
§ˇÕhaÊags
 |
SDL_SRCALPHA
;

324 i‡(
	`°rcmp
(
¨g
, "--srcnosrcalpha") == 0)

325 
§ˇÕhaÊags
 &~
SDL_SRCALPHA
;

326 i‡(
	`°rcmp
(
¨g
, "--srcrleaccel") == 0)

327 
§ˇÕhaÊags
 |
SDL_RLEACCEL
;

328 i‡(
	`°rcmp
(
¨g
, "--srcnorleaccel") == 0)

329 
§ˇÕhaÊags
 &~
SDL_RLEACCEL
;

330 i‡(
	`°rcmp
(
¨g
, "--dstsrcalpha") == 0)

331 
d°ÆphaÊags
 |
SDL_SRCALPHA
;

332 i‡(
	`°rcmp
(
¨g
, "--dstnosrcalpha") == 0)

333 
d°ÆphaÊags
 &~
SDL_SRCALPHA
;

334 i‡(
	`°rcmp
(
¨g
, "--dstrleaccel") == 0)

335 
d°ÆphaÊags
 |
SDL_RLEACCEL
;

336 i‡(
	`°rcmp
(
¨g
, "--dstnorleaccel") == 0)

337 
d°ÆphaÊags
 &~
SDL_RLEACCEL
;

339 i‡((
d°ÆphaÊags
 !
‹igd°ÆphaÊags
Ë|| (
d°Æpha
 !
de°
->
f‹m©
->
Æpha
))

340 
	`SDL_SëAÕha
(
de°
, 
d°ÆphaÊags
, (
Uöt8
Ë
d°Æpha
);

341 i‡((
§ˇÕhaÊags
 !
‹ig§ˇÕhaÊags
Ë|| (
§ˇÕha
 !
§c
->
f‹m©
->
Æpha
))

342 
	`SDL_SëAÕha
(
§c
, 
§ˇÕhaÊags
, (
Uöt8
Ë
§ˇÕha
);

345 
	`SDL_FûlRe˘
(
de°
, 
NULL
, 
	`SDL_M≠RGB
(de°->
f‹m©
, 0, 0, 0));

346 
	`SDL_FûlRe˘
(
§c
, 
NULL
, 
	`SDL_M≠RGB
(§c->
f‹m©
, 0, 0, 0));

348 
	`blôCíãªd
(
§c
, 
bmp
);

349 
	`SDL_FªeSurÁ˚
(
bmp
);

351 i‡(
dumpfûe
)

352 
	`SDL_SaveBMP
(
§c
, 
dumpfûe
);

354 
	`ouçut_dëaûs
();

357 
	}
}

360 
	$ã°_blô_•ìd
()

362 
Uöt32
 
˛órCﬁ‹
 = 
	`SDL_M≠RGB
(
de°
->
f‹m©
, 0, 0, 0);

363 
Uöt32
 
ôî©i⁄s
 = 0;

364 
Uöt32
 
ña•ed
 = 0;

365 
Uöt32
 
íd
 = 0;

366 
Uöt32
 
now
 = 0;

367 
Uöt32
 
œ°
 = 0;

368 
ã°ms
 = 
ã°Sec⁄ds
 * 1000;

369 
wmax
 = (
de°
->
w
 - 
§c
->w);

370 
hmax
 = (
de°
->
h
 - 
§c
->h);

371 
isS¸ìn
 = (
	`SDL_GëVideoSurÁ˚
(Ë=
de°
);

372 
SDL_Evít
 
evít
;

374 
	`¥ötf
("Te°ög blô s≥ed f‹ %d sec⁄ds...\n", 
ã°Sec⁄ds
);

376 
now
 = 
	`SDL_GëTicks
();

377 
íd
 = 
now
 + 
ã°ms
;

382 i‡(
now
 - 
œ°
 > 1000)

384 
œ°
 = 
now
;

385 
	`SDL_PﬁlEvít
(&
evít
)) { }

388 
ôî©i⁄s
++;

389 
ña•ed
 +
	`blô
(
de°
, 
§c
, 
	`øndR™ge
(0, 
wmax
),Ñ™dR™ge(0, 
hmax
));

390 i‡(
isS¸ìn
)

392 
	`SDL_Flù
(
de°
);

393 
	`SDL_FûlRe˘
(
de°
, 
NULL
, 
˛órCﬁ‹
);

396 
now
 = 
	`SDL_GëTicks
();

397 } 
now
 < 
íd
);

399 
	`¥ötf
("Non-blitting crapáccounted for %dÖercent ofÅhisÑun.\n",

400 
	`≥r˚¡
(
ã°ms
 - 
ña•ed
,Åestms));

402 
	`¥ötf
("%d blitsÅook %d ms (%d fps).\n",

403 (Ë
ôî©i⁄s
,

404 (Ë
ña•ed
,

405 (Ë((()
ôî©i⁄s
Ë/ ((()
ña•ed
) / 1000.0f)));

406 
	}
}

408 
	$maö
(
¨gc
, **
¨gv
)

410 
öôülized
 = 
	`£tup_ã°
(
¨gc
, 
¨gv
);

411 i‡(
öôülized
)

413 
	`ã°_blô_•ìd
();

414 
	`SDL_Quô
();

416 (!
öôülized
);

417 
	}
}

	@SDL-win/test/testcdrom.c

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<°rög.h
>

7 
	~<˘y≥.h
>

9 
	~"SDL.h
"

12 
	$quô
(
rc
)

14 
	`SDL_Quô
();

15 
	`exô
(
rc
);

16 
	}
}

18 
	$PrötSètus
(
driveödex
, 
SDL_CD
 *
cdrom
)

20 
CD°©us
 
°©us
;

21 *
°©us_°r
;

23 
°©us
 = 
	`SDL_CDSètus
(
cdrom
);

24 
°©us
) {

25 
CD_TRAYEMPTY
:

26 
°©us_°r
 = "trayÉmpty";

28 
CD_STOPPED
:

29 
°©us_°r
 = "stopped";

31 
CD_PLAYING
:

32 
°©us_°r
 = "playing";

34 
CD_PAUSED
:

35 
°©us_°r
 = "paused";

37 
CD_ERROR
:

38 
°©us_°r
 = "error state";

41 
	`¥ötf
("Drivê%d sètus: %s\n", 
driveödex
, 
°©us_°r
);

42 i‡–
°©us
 >
CD_PLAYING
 ) {

43 
m
, 
s
, 
f
;

44 
	`FRAMES_TO_MSF
(
cdrom
->
cur_‰ame
, &
m
, &
s
, &
f
);

45 
	`¥ötf
("CurrentlyÖlayingÅrack %d, %d:%2.2d\n",

46 
cdrom
->
åack
[cdrom->
cur_åack
].
id
, 
m
, 
s
);

48 
	}
}

50 
	$Li°Tøcks
(
SDL_CD
 *
cdrom
)

52 
i
;

53 
m
, 
s
, 
f
;

54 * 
åty≥
;

56 
	`SDL_CDSètus
(
cdrom
);

57 
	`¥ötf
("Drivêåacks: %d\n", 
cdrom
->
numåacks
);

58  
i
=0; i<
cdrom
->
numåacks
; ++i ) {

59 
	`FRAMES_TO_MSF
(
cdrom
->
åack
[
i
].
Àngth
, &
m
, &
s
, &
f
);

60 i‡–
f
 > 0 )

61 ++
s
;

62 
cdrom
->
åack
[
i
].
ty≥
)

64 
SDL_AUDIO_TRACK
:

65 
åty≥
="audio";

67 
SDL_DATA_TRACK
:

68 
åty≥
="data";

71 
åty≥
="unknown";

74 
	`¥ötf
("\tTøck (ödex %dË%d: %d:%2.2d / %d [%†åack]\n", 
i
,

75 
cdrom
->
åack
[
i
].
id
, 
m
, 
s
, cdrom->åack[i].
Àngth
, 
åty≥
);

77 
	}
}

79 
	$PrötUßge
(*
¨gv0
)

81 
	`Ârötf
(
°dîr
, "Ußge: %†[drive#] [comm™d] [comm™d] ...\n", 
¨gv0
);

82 
	`Ârötf
(
°dîr
, "Where 'command' is one of:\n");

83 
	`Ârötf
(
°dîr
, " -status\n");

84 
	`Ârötf
(
°dîr
, " -list\n");

85 
	`Ârötf
(
°dîr
, " -play [first_track] [first_frame] [num_tracks] [num_frames]\n");

86 
	`Ârötf
(
°dîr
, " -pause\n");

87 
	`Ârötf
(
°dîr
, " -resume\n");

88 
	`Ârötf
(
°dîr
, " -stop\n");

89 
	`Ârötf
(
°dîr
, " -eject\n");

90 
	`Ârötf
(
°dîr
, " -sleep <milliseconds>\n");

91 
	}
}

93 
	$maö
(
¨gc
, *
¨gv
[])

95 
drive
;

96 
i
;

97 
SDL_CD
 *
cdrom
;

100 i‡–
	`SDL_Inô
(
SDL_INIT_CDROM
) < 0 ) {

101 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

106 i‡–
	`SDL_CDNumDrives
() == 0 ) {

107 
	`¥ötf
("No CD-ROM devices detected\n");

108 
	`quô
(0);

110 
	`¥ötf
("Drive†avaûabÀ: %d\n", 
	`SDL_CDNumDrives
());

111  
i
=0; i<
	`SDL_CDNumDrives
(); ++i ) {

112 
	`¥ötf
("Drivê%d: \"%s\"\n", 
i
, 
	`SDL_CDName
(i));

116 
drive
 = 0;

117 
i
=1;

118 i‡–
¨gv
[
i
] && 
	`isdigô
(argv[i][0]) ) {

119 
drive
 = 
	`©oi
(
¨gv
[
i
++]);

121 
cdrom
 = 
	`SDL_CDO≥n
(
drive
);

122 i‡–
cdrom
 =
NULL
 ) {

123 
	`Ârötf
(
°dîr
, "Couldn'à›í drivê%d: %s\n", 
drive
,

124 
	`SDL_GëEº‹
());

125 
	`quô
(2);

127 #ifde‡
TEST_NULLCD


128 
cdrom
 = 
NULL
;

132  ; 
¨gv
[
i
]; ++i ) {

133 i‡–
	`°rcmp
(
¨gv
[
i
], "-status") == 0 ) {

136 i‡–
	`°rcmp
(
¨gv
[
i
], "-list") == 0 ) {

137 
	`Li°Tøcks
(
cdrom
);

139 i‡–
	`°rcmp
(
¨gv
[
i
], "-play") == 0 ) {

140 
°øck
, 
s‰ame
;

141 
¡øck
, 
n‰ame
;

143 
°øck
 = 0;

144 i‡–
¨gv
[
i
+1] && 
	`isdigô
(argv[i+1][0]) ) {

145 
°øck
 = 
	`©oi
(
¨gv
[++
i
]);

147 
s‰ame
 = 0;

148 i‡–
¨gv
[
i
+1] && 
	`isdigô
(argv[i+1][0]) ) {

149 
s‰ame
 = 
	`©oi
(
¨gv
[++
i
]);

151 
¡øck
 = 0;

152 i‡–
¨gv
[
i
+1] && 
	`isdigô
(argv[i+1][0]) ) {

153 
¡øck
 = 
	`©oi
(
¨gv
[++
i
]);

155 
n‰ame
 = 0;

156 i‡–
¨gv
[
i
+1] && 
	`isdigô
(argv[i+1][0]) ) {

157 
n‰ame
 = 
	`©oi
(
¨gv
[++
i
]);

159 i‡–
	`CD_INDRIVE
(
	`SDL_CDSètus
(
cdrom
)) ) {

160 i‡–
	`SDL_CDPœyTøcks
(
cdrom
, 
°øck
, 
s‰ame
,

161 
¡øck
, 
n‰ame
) < 0 ) {

162 
	`Ârötf
(
°dîr
,

164 
°øck
, 
s‰ame
, 
¡øck
, 
n‰ame
, 
	`SDL_GëEº‹
());

167 
	`Ârötf
(
°dîr
, "No CD in drive!\n");

170 i‡–
	`°rcmp
(
¨gv
[
i
], "-pause") == 0 ) {

171 i‡–
	`SDL_CDPau£
(
cdrom
) < 0 ) {

172 
	`Ârötf
(
°dîr
, "Couldn'tÖause CD: %s\n",

173 
	`SDL_GëEº‹
());

176 i‡–
	`°rcmp
(
¨gv
[
i
], "-resume") == 0 ) {

177 i‡–
	`SDL_CDResume
(
cdrom
) < 0 ) {

178 
	`Ârötf
(
°dîr
, "Couldn'tÑesume CD: %s\n",

179 
	`SDL_GëEº‹
());

182 i‡–
	`°rcmp
(
¨gv
[
i
], "-stop") == 0 ) {

183 i‡–
	`SDL_CDSt›
(
cdrom
) < 0 ) {

184 
	`Ârötf
(
°dîr
, "Couldn'tÉject CD: %s\n",

185 
	`SDL_GëEº‹
());

188 i‡–
	`°rcmp
(
¨gv
[
i
], "-eject") == 0 ) {

189 i‡–
	`SDL_CDEje˘
(
cdrom
) < 0 ) {

190 
	`Ârötf
(
°dîr
, "Couldn'tÉject CD: %s\n",

191 
	`SDL_GëEº‹
());

194 i‡–(
	`°rcmp
(
¨gv
[
i
], "-sleep") == 0) &&

195 (
¨gv
[
i
+1] && 
	`isdigô
(argv[i+1][0])) ) {

196 
	`SDL_Dñay
(
	`©oi
(
¨gv
[++
i
]));

197 
	`¥ötf
("Dñayed %d mûli£c⁄ds\n", 
	`©oi
(
¨gv
[
i
]));

199 
	`PrötUßge
(
¨gv
[0]);

200 
	`SDL_CDClo£
(
cdrom
);

201 
	`quô
(1);

204 
	`PrötSètus
(
drive
, 
cdrom
);

205 
	`SDL_CDClo£
(
cdrom
);

206 
	`SDL_Quô
();

209 
	}
}

	@SDL-win/test/testcursor.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~"SDL.h
"

14 
Uöt16
 
	gcurs‹_d©a
[16]={

36 
Uöt16
 
	gcurs‹_mask
[16]={

60 
Uöt8
 
	gsmÆl_curs‹_d©a
[11] = { 0x00, 0x18, 0x08, 0x38, 0x44, 0x54, 0x44, 0x38, 0x20, 0x20, 0x00 };

61 
Uöt8
 
	gsmÆl_curs‹_mask
[11] = { 0x3C, 0x3C, 0x3C, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x78, 0x70, 0x70 };

64 c⁄° *
	g¨row
[] = {

107 
SDL_Curs‹
 *
	$¸óã_¨row_curs‹
()

109 
i
, 
row
, 
cﬁ
;

110 
Uöt8
 
d©a
[4*32];

111 
Uöt8
 
mask
[4*32];

112 
hŸ_x
, 
hŸ_y
;

114 
i
 = -1;

115  
row
=0;Ñow<32; ++row ) {

116  
cﬁ
=0; col<32; ++col ) {

117 i‡–
cﬁ
 % 8 ) {

118 
d©a
[
i
] <<= 1;

119 
mask
[
i
] <<= 1;

121 ++
i
;

122 
d©a
[
i
] = 
mask
[i] = 0;

124 
¨row
[4+
row
][
cﬁ
]) {

126 
d©a
[
i
] |= 0x01;

127 
mask
[
i
] |= 0x01;

130 
mask
[
i
] |= 0x01;

137 
	`ssˇnf
(
¨row
[4+
row
], "%d,%d", &
hŸ_x
, &
hŸ_y
);

138  
	`SDL_Cª©eCurs‹
(
d©a
, 
mask
, 32, 32, 
hŸ_x
, 
hŸ_y
);

139 
	}
}

142 
	$maö
(
¨gc
, *
¨gv
[])

144 
SDL_SurÁ˚
 *
s¸ìn
;

145 
SDL_boﬁ
 
quô
 = 
SDL_FALSE
, 
fú°_time
 = 
SDL_TRUE
;

146 
SDL_Curs‹
 *
curs‹
[3];

147 
cuºít
;

150 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 ) {

151 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

155 
s¸ìn
 = 
	`SDL_SëVideoMode
(320,200,8,
SDL_ANYFORMAT
);

156 i‡(
s¸ìn
==
NULL
) {

157 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêvideÿmode: %s\n",
	`SDL_GëEº‹
());

161 
	`SDL_FûlRe˘
(
s¸ìn
, 
NULL
, 0x664422);

163 
curs‹
[0] = 
	`SDL_Cª©eCurs‹
((
Uöt8
 *)
curs‹_d©a
, (Uöt8 *)
curs‹_mask
,

165 i‡(
curs‹
[0]==
NULL
) {

166 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêã° curs‹: %s\n",
	`SDL_GëEº‹
());

167 
	`SDL_Quô
();

170 
curs‹
[1] = 
	`¸óã_¨row_curs‹
();

171 i‡(
curs‹
[1]==
NULL
) {

172 
	`Ârötf
(
°dîr
, "Couldn'àöôülizê¨row curs‹: %s\n",
	`SDL_GëEº‹
());

173 
	`SDL_FªeCurs‹
(
curs‹
[0]);

174 
	`SDL_Quô
();

177 
curs‹
[2] = 
	`SDL_Cª©eCurs‹
(
smÆl_curs‹_d©a
, 
smÆl_curs‹_mask
,

179 i‡(
curs‹
[2]==
NULL
) {

180 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêã° curs‹: %s\n",
	`SDL_GëEº‹
());

181 
	`SDL_Quô
();

185 
cuºít
 = 0;

186 
	`SDL_SëCurs‹
(
curs‹
[
cuºít
]);

188 !
quô
) {

189 
SDL_Evít
 
evít
;

190 
	`SDL_PﬁlEvít
(&
evít
)) {

191 
evít
.
ty≥
) {

192 
SDL_MOUSEBUTTONDOWN
:

193 
cuºít
 = (current + 1)%3;

194 
	`SDL_SëCurs‹
(
curs‹
[
cuºít
]);

196 
SDL_KEYDOWN
:

197 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_ESCAPE
) {

198 
quô
 = 
SDL_TRUE
;

201 
SDL_QUIT
:

202 
quô
 = 
SDL_TRUE
;

206 
	`SDL_Flù
(
s¸ìn
);

207 
	`SDL_Dñay
(1);

210 
	`SDL_FªeCurs‹
(
curs‹
[0]);

211 
	`SDL_FªeCurs‹
(
curs‹
[1]);

212 
	`SDL_FªeCurs‹
(
curs‹
[2]);

214 
	`SDL_Quô
();

216 
	}
}

	@SDL-win/test/testdyngl.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

20 
	~"SDL.h
"

22 #ifde‡
__MACOS__


23 
	#HAVE_OPENGL


	)

26 #ifde‡
HAVE_OPENGL


28 
	~"SDL_›ígl.h
"

31 
	$quô
(
rc
)

33 
	`SDL_Quô
();

34 
	`exô
(
rc
);

35 
	}
}

37 * 
	$gë_funˇddr
(c⁄° * 
p
)

39 * 
f
=
	`SDL_GL_GëProcAddªss
(
p
);

40 i‡(
f
)

42  
f
;

46 
	`¥ötf
("U«bÀÅÿgë fun˘i⁄Öoöã∏f‹ %s\n",
p
);

47 
	`quô
(1);

49  
NULL
;

50 
	}
}

54 (
APIENTRY
*
	mglBegö
)(
	mGLíum
);

55 (
APIENTRY
*
	mglEnd
)();

56 (
APIENTRY
*
	mglVîãx3f
)(
	mGLÊﬂt
, GLfloat, GLfloat);

57 (
APIENTRY
*
	mglCÀ¨Cﬁ‹
)(
	mGLÊﬂt
, GLfloat, GLfloat, GLfloat);

58 (
APIENTRY
*
	mglCÀ¨
)(
	mGLbôfõld
);

59 (
APIENTRY
*
	mglDißbÀ
)(
	mGLíum
);

60 (
APIENTRY
*
	mglE«bÀ
)(
	mGLíum
);

61 (
APIENTRY
*
	mglCﬁ‹4ub
)(
	mGLubyã
,GLubyte,GLubyte,GLubyte);

62 (
APIENTRY
*
	mglPoötSize
)(
	mGLÊﬂt
);

63 (
APIENTRY
*
	mglHöt
)(
	mGLíum
,GLenum);

64 (
APIENTRY
*
	mglBÀndFunc
)(
	mGLíum
,GLenum);

65 (
APIENTRY
*
	mglM©rixMode
)(
	mGLíum
);

66 (
APIENTRY
*
	mglLﬂdIdítôy
)();

67 (
APIENTRY
*
	mglOπho
)(
	mGLdoubÀ
,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);

68 (
APIENTRY
*
	mglRŸ©ef
)(
	mGLÊﬂt
,GLfloat,GLfloat,GLfloat);

69 (
APIENTRY
*
	mglVõwp‹t
)(
	mGLöt
,GLöt,
	mGLsizei
,GLsizei);

70 (
APIENTRY
*
	mglFogf
)(
	mGLíum
,
	mGLÊﬂt
);

72 
	tglfuncs
;

74 
	$öô_glfuncs
(
glfuncs
* 
f
)

76 
f
->
glBegö
=
	`gë_funˇddr
("glBegin");

77 
f
->
glEnd
=
	`gë_funˇddr
("glEnd");

78 
f
->
glVîãx3f
=
	`gë_funˇddr
("glVertex3f");

79 
f
->
glCÀ¨Cﬁ‹
=
	`gë_funˇddr
("glClearColor");

80 
f
->
glCÀ¨
=
	`gë_funˇddr
("glClear");

81 
f
->
glDißbÀ
=
	`gë_funˇddr
("glDisable");

82 
f
->
glE«bÀ
=
	`gë_funˇddr
("glEnable");

83 
f
->
glCﬁ‹4ub
=
	`gë_funˇddr
("glColor4ub");

84 
f
->
glPoötSize
=
	`gë_funˇddr
("glPointSize");

85 
f
->
glHöt
=
	`gë_funˇddr
("glHint");

86 
f
->
glBÀndFunc
=
	`gë_funˇddr
("glBlendFunc");

87 
f
->
glM©rixMode
=
	`gë_funˇddr
("glMatrixMode");

88 
f
->
glLﬂdIdítôy
=
	`gë_funˇddr
("glLoadIdentity");

89 
f
->
glOπho
=
	`gë_funˇddr
("glOrtho");

90 
f
->
glRŸ©ef
=
	`gë_funˇddr
("glRotatef");

91 
f
->
glVõwp‹t
=
	`gë_funˇddr
("glViewport");

92 
f
->
glFogf
=
	`gë_funˇddr
("glFogf");

93 
	}
}

95 
	#NB_PIXELS
 1000

	)

97 
	$maö
(
¨gc
,*
¨gv
[])

99 
glfuncs
 
f
;

100 
i
;

101 
SDL_Evít
 
evít
;

102 
d⁄e
=0;

103 
GLÊﬂt
 
pixñs
[
NB_PIXELS
*3];

104 c⁄° *
gl_libøry
 = 
NULL
;

106 i‡(
¨gv
[1]) {

107 
gl_libøry
 = 
¨gv
[1];

110 i‡(
	`SDL_Inô
(
SDL_INIT_VIDEO
)<0)

112 
	`¥ötf
("U«bÀÅÿöô SDL : %s\n",
	`SDL_GëEº‹
());

116 i‡(
	`SDL_GL_SëAâribuã
(
SDL_GL_DOUBLEBUFFER
,1)<0)

118 
	`¥ötf
("U«bÀÅÿ£àGLáâribuã : %s\n",
	`SDL_GëEº‹
());

119 
	`quô
(1);

122 i‡(
	`SDL_GL_LﬂdLibøry
(
gl_libøry
)<0)

124 
	`¥ötf
("U«bÀÅÿdy«miˇŒy o≥¿GLÜib : %s\n",
	`SDL_GëEº‹
());

125 
	`quô
(1);

128 i‡(
	`SDL_SëVideoMode
(640,480,0,
SDL_OPENGL
)==
NULL
)

130 
	`¥ötf
("U«bÀÅÿ›í videÿmodê: %s\n",
	`SDL_GëEº‹
());

131 
	`quô
(1);

135 
	`SDL_WM_SëC≠ti⁄
( "SDL Dynamic OpenGL Loading Test", "testdyngl" );

137 
	`öô_glfuncs
(&
f
);

139 
i
=0;i<
NB_PIXELS
;i++)

141 
pixñs
[3*
i
]=
	`ønd
()%250-125;

142 
pixñs
[3*
i
+1]=
	`ønd
()%250-125;

143 
pixñs
[3*
i
+2]=
	`ønd
()%250-125;

146 
f
.
	`glVõwp‹t
(0,0,640,480);

148 
f
.
	`glM©rixMode
(
GL_PROJECTION
);

149 
f
.
	`glLﬂdIdítôy
();

150 
f
.
	`glOπho
(-100,100,-100,100,-500,500);

152 
f
.
	`glM©rixMode
(
GL_MODELVIEW
);

153 
f
.
	`glLﬂdIdítôy
();

155 
f
.
	`glE«bÀ
(
GL_DEPTH_TEST
);

156 
f
.
	`glDißbÀ
(
GL_TEXTURE_2D
);

157 
f
.
	`glE«bÀ
(
GL_BLEND
);

158 
f
.
	`glBÀndFunc
(
GL_SRC_ALPHA
, 
GL_ONE_MINUS_SRC_ALPHA
);

160 
f
.
	`glCÀ¨Cﬁ‹
(0.0f,0.0f,0.0f,0.0f);

161 
f
.
	`glCÀ¨
(
GL_COLOR_BUFFER_BIT
|
GL_DEPTH_BUFFER_BIT
);

163 
f
.
	`glE«bÀ
(
GL_POINT_SMOOTH
);

164 
f
.
	`glHöt
(
GL_POINT_SMOOTH_HINT
,
GL_NICEST
);

165 
f
.
	`glPoötSize
(5.0f);

166 
f
.
	`glE«bÀ
(
GL_FOG
);

167 
f
.
	`glFogf
(
GL_FOG_START
,-500);

168 
f
.
	`glFogf
(
GL_FOG_END
,500);

169 
f
.
	`glFogf
(
GL_FOG_DENSITY
,0.005);

173 
f
.
	`glCÀ¨
(
GL_COLOR_BUFFER_BIT
|
GL_DEPTH_BUFFER_BIT
);

175 
f
.
	`glRŸ©ef
(2.0,1.0,1.0,1.0);

176 
f
.
	`glRŸ©ef
(1.0,0.0,1.0,1.0);

178 
f
.
	`glCﬁ‹4ub
(255,255,255,255);

179 
f
.
	`glBegö
(
GL_POINTS
);

180 
i
=0;i<
NB_PIXELS
;i++)

182 
f
.
	`glVîãx3f
(
pixñs
[3*
i
],pixels[3*i+1],pixels[3*i+2]);

184 
f
.
	`glEnd
();

185 
	`SDL_GL_Sw≠Buf„rs
();

187 
	`SDL_PﬁlEvít
(&
evít
))

189 if(
evít
.
ty≥
 & 
SDL_KEYDOWN
)

190 
d⁄e
=1;

193 
	`SDL_Dñay
(20);

195 !
d⁄e
);

197 
	`SDL_Quô
();

199 
	}
}

203 
	$maö
(
¨gc
, *
¨gv
[])

205 
	`¥ötf
("No OpenGL support onÅhis system\n");

207 
	}
}

	@SDL-win/test/testerror.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<sig«l.h
>

8 
	~"SDL.h
"

9 
	~"SDL_thªad.h
"

11 
	gÆive
 = 0;

14 
	$quô
(
rc
)

16 
	`SDL_Quô
();

17 
	`exô
(
rc
);

18 
	}
}

20 
SDLCALL
 
	$ThªadFunc
(*
d©a
)

23 
	`SDL_SëEº‹
("Thread %s (%d) hadáÖroblem: %s",

24 (*)
d©a
, 
	`SDL_ThªadID
(), "nevermind");

25  
Æive
 ) {

26 
	`¥ötf
("Thªad '%s' i†Æive!\n", (*)
d©a
);

27 
	`SDL_Dñay
(1*1000);

29 
	`¥ötf
("ChûdÅhªadÉº‹ såög: %s\n", 
	`SDL_GëEº‹
());

31 
	}
}

33 
	$maö
(
¨gc
, *
¨gv
[])

35 
SDL_Thªad
 *
thªad
;

38 i‡–
	`SDL_Inô
(0) < 0 ) {

39 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

44 
	`SDL_SëEº‹
("No worries");

46 
Æive
 = 1;

47 
thªad
 = 
	`SDL_Cª©eThªad
(
ThªadFunc
, "#1");

48 i‡–
thªad
 =
NULL
 ) {

49 
	`Ârötf
(
°dîr
, "Couldn'à¸óãÅhªad: %s\n", 
	`SDL_GëEº‹
());

50 
	`quô
(1);

52 
	`SDL_Dñay
(5*1000);

53 
	`¥ötf
("Waiting forÅhread #1\n");

54 
Æive
 = 0;

55 
	`SDL_WaôThªad
(
thªad
, 
NULL
);

57 
	`¥ötf
("MaöÅhªadÉº‹ såög: %s\n", 
	`SDL_GëEº‹
());

59 
	`SDL_Quô
();

61 
	}
}

	@SDL-win/test/testfile.c

4 
	~<°dlib.h
>

6 #i‚de‡
_MSC_VER


7 
	~<uni°d.h
>

10 
	~"SDL.h
"

11 
	~"SDL_ídün.h
"

14 
	~<°dio.h
>

17 
	#FBASENAME1
 "sdld©a1"

	)

18 
	#FBASENAME2
 "sdld©a2"

	)

21 #i‚de‡
NULL


22 
	#NULL
 ((*)0)

	)

25 
	$˛ónup
( ) {

27 
	`u∆ök
(
FBASENAME1
);

28 
	`u∆ök
(
FBASENAME2
);

29 
	}
}

31 
	$rw›s_îr‹_quô
–
löe
, 
SDL_RW›s
 *
rw›s
) {

33 
	`¥ötf
("ã°fûe.c(%d): faûed\n",
löe
);

34 i‡(
rw›s
) {

35 
rw›s
->
	`˛o£
(rwops);

37 
	`˛ónup
();

38 
	`exô
(1);

39 
	}
}

41 
	#RWOP_ERR_QUIT
(
x
Ë
	`rw›s_îr‹_quô
–
__LINE__
, (xË)

	)

45 
	$maö
(
¨gc
, *
¨gv
[])

47 
SDL_RW›s
 *
rw›s
 = 
NULL
;

48 
ã°_buf
[30];

50 
	`˛ónup
();

54 
rw›s
 = 
	`SDL_RWFromFûe
(
NULL
,NULL);

55 i‡(
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

56 
rw›s
 = 
	`SDL_RWFromFûe
(
NULL
,"ab+");

57 i‡(
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

58 
rw›s
 = 
	`SDL_RWFromFûe
(
NULL
,"sldfkjsldkfj");

59 i‡(
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

60 
rw›s
 = 
	`SDL_RWFromFûe
("something","");

61 i‡(
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

62 
rw›s
 = 
	`SDL_RWFromFûe
("somëhög",
NULL
);

63 i‡(
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

64 
	`¥ötf
("test1 OK\n");

71 
rw›s
 = 
	`SDL_RWFromFûe
(
FBASENAME2
,"rb");

72 i‡(
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

73 
rw›s
 = 
	`SDL_RWFromFûe
(
FBASENAME2
,"rb+");

74 i‡(
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

75 
rw›s
 = 
	`SDL_RWFromFûe
(
FBASENAME2
,"wb");

76 i‡(!
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

77 
rw›s
->
	`˛o£
‘w›s); 
	`u∆ök
(
FBASENAME2
);

78 
rw›s
 = 
	`SDL_RWFromFûe
(
FBASENAME2
,"wb+");

79 i‡(!
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

80 
rw›s
->
	`˛o£
‘w›s); 
	`u∆ök
(
FBASENAME2
);

81 
rw›s
 = 
	`SDL_RWFromFûe
(
FBASENAME2
,"ab");

82 i‡(!
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

83 
rw›s
->
	`˛o£
‘w›s); 
	`u∆ök
(
FBASENAME2
);

84 
rw›s
 = 
	`SDL_RWFromFûe
(
FBASENAME2
,"ab+");

85 i‡(!
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

86 
rw›s
->
	`˛o£
‘w›s); 
	`u∆ök
(
FBASENAME2
);

87 
	`¥ötf
("test2 OK\n");

92 
rw›s
 = 
	`SDL_RWFromFûe
(
FBASENAME1
,"wb");

93 i‡(!
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

94 i‡(1 !
rw›s
->
	`wrôe
‘w›s,"1234567890",10,1ËË
	`RWOP_ERR_QUIT
(rwops);

95 i‡(10 !
rw›s
->
	`wrôe
‘w›s,"1234567890",1,10ËË
	`RWOP_ERR_QUIT
(rwops);

96 i‡(7 !
rw›s
->
	`wrôe
‘w›s,"1234567",1,7ËË
	`RWOP_ERR_QUIT
(rwops);

97 i‡(0!=
rw›s
->
	`£ek
‘w›s,0L,
RW_SEEK_SET
)Ë
	`RWOP_ERR_QUIT
(rwops);

98 i‡(0!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,1,1)Ë
	`RWOP_ERR_QUIT
(rwops);

99 
rw›s
->
	`˛o£
(rwops);

101 
rw›s
 = 
	`SDL_RWFromFûe
(
FBASENAME1
,"rb");

102 i‡(!
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

103 i‡(0!=
rw›s
->
	`£ek
‘w›s,0L,
RW_SEEK_SET
)Ë
	`RWOP_ERR_QUIT
(rwops);

104 i‡(20!=
rw›s
->
	`£ek
‘w›s,-7,
RW_SEEK_END
)Ë
	`RWOP_ERR_QUIT
(rwops);

105 i‡(7!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,1,7)Ë
	`RWOP_ERR_QUIT
(rwops);

106 i‡(
	`SDL_memcmp
(
ã°_buf
,"1234567",7)Ë
	`RWOP_ERR_QUIT
(
rw›s
);

107 i‡(0!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,1,1)Ë
	`RWOP_ERR_QUIT
(rwops);

108 i‡(0!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,10,100)Ë
	`RWOP_ERR_QUIT
(rwops);

109 i‡(0!=
rw›s
->
	`£ek
‘w›s,-27,
RW_SEEK_CUR
)Ë
	`RWOP_ERR_QUIT
(rwops);

110 i‡(2!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,10,3)Ë
	`RWOP_ERR_QUIT
(rwops);

111 i‡(
	`SDL_memcmp
(
ã°_buf
,"12345678901234567890",20)Ë
	`RWOP_ERR_QUIT
(
rw›s
);

112 i‡(0!=
rw›s
->
	`wrôe
‘w›s,
ã°_buf
,1,1)Ë
	`RWOP_ERR_QUIT
(rwops);

113 
rw›s
->
	`˛o£
(rwops);

116 
rw›s
 = 
	`SDL_RWFromFûe
(
FBASENAME1
,"wb+");

117 i‡(!
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

118 i‡(1 !
rw›s
->
	`wrôe
‘w›s,"1234567890",10,1ËË
	`RWOP_ERR_QUIT
(rwops);

119 i‡(10 !
rw›s
->
	`wrôe
‘w›s,"1234567890",1,10ËË
	`RWOP_ERR_QUIT
(rwops);

120 i‡(7 !
rw›s
->
	`wrôe
‘w›s,"1234567",1,7ËË
	`RWOP_ERR_QUIT
(rwops);

121 i‡(0!=
rw›s
->
	`£ek
‘w›s,0L,
RW_SEEK_SET
)Ë
	`RWOP_ERR_QUIT
(rwops);

122 i‡(1!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,1,1)Ë
	`RWOP_ERR_QUIT
(rwops);

123 i‡(0!=
rw›s
->
	`£ek
‘w›s,0L,
RW_SEEK_SET
)Ë
	`RWOP_ERR_QUIT
(rwops);

124 i‡(20!=
rw›s
->
	`£ek
‘w›s,-7,
RW_SEEK_END
)Ë
	`RWOP_ERR_QUIT
(rwops);

125 i‡(7!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,1,7)Ë
	`RWOP_ERR_QUIT
(rwops);

126 i‡(
	`SDL_memcmp
(
ã°_buf
,"1234567",7)Ë
	`RWOP_ERR_QUIT
(
rw›s
);

127 i‡(0!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,1,1)Ë
	`RWOP_ERR_QUIT
(rwops);

128 i‡(0!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,10,100)Ë
	`RWOP_ERR_QUIT
(rwops);

129 i‡(0!=
rw›s
->
	`£ek
‘w›s,-27,
RW_SEEK_CUR
)Ë
	`RWOP_ERR_QUIT
(rwops);

130 i‡(2!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,10,3)Ë
	`RWOP_ERR_QUIT
(rwops);

131 i‡(
	`SDL_memcmp
(
ã°_buf
,"12345678901234567890",20)Ë
	`RWOP_ERR_QUIT
(
rw›s
);

132 
rw›s
->
	`˛o£
(rwops);

133 
	`¥ötf
("test3 OK\n");

136 
rw›s
 = 
	`SDL_RWFromFûe
(
FBASENAME1
,"rb+");

137 i‡(!
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

138 i‡(1 !
rw›s
->
	`wrôe
‘w›s,"1234567890",10,1ËË
	`RWOP_ERR_QUIT
(rwops);

139 i‡(10 !
rw›s
->
	`wrôe
‘w›s,"1234567890",1,10ËË
	`RWOP_ERR_QUIT
(rwops);

140 i‡(7 !
rw›s
->
	`wrôe
‘w›s,"1234567",1,7ËË
	`RWOP_ERR_QUIT
(rwops);

141 i‡(0!=
rw›s
->
	`£ek
‘w›s,0L,
RW_SEEK_SET
)Ë
	`RWOP_ERR_QUIT
(rwops);

142 i‡(1!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,1,1)Ë
	`RWOP_ERR_QUIT
(rwops);

143 i‡(0!=
rw›s
->
	`£ek
‘w›s,0L,
RW_SEEK_SET
)Ë
	`RWOP_ERR_QUIT
(rwops);

144 i‡(20!=
rw›s
->
	`£ek
‘w›s,-7,
RW_SEEK_END
)Ë
	`RWOP_ERR_QUIT
(rwops);

145 i‡(7!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,1,7)Ë
	`RWOP_ERR_QUIT
(rwops);

146 i‡(
	`SDL_memcmp
(
ã°_buf
,"1234567",7)Ë
	`RWOP_ERR_QUIT
(
rw›s
);

147 i‡(0!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,1,1)Ë
	`RWOP_ERR_QUIT
(rwops);

148 i‡(0!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,10,100)Ë
	`RWOP_ERR_QUIT
(rwops);

149 i‡(0!=
rw›s
->
	`£ek
‘w›s,-27,
RW_SEEK_CUR
)Ë
	`RWOP_ERR_QUIT
(rwops);

150 i‡(2!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,10,3)Ë
	`RWOP_ERR_QUIT
(rwops);

151 i‡(
	`SDL_memcmp
(
ã°_buf
,"12345678901234567890",20)Ë
	`RWOP_ERR_QUIT
(
rw›s
);

152 
rw›s
->
	`˛o£
(rwops);

153 
	`¥ötf
("test4 OK\n");

156 
rw›s
 = 
	`SDL_RWFromFûe
(
FBASENAME1
,"ab+");

157 i‡(!
rw›s
Ë
	`RWOP_ERR_QUIT
(rwops);

158 i‡(1 !
rw›s
->
	`wrôe
‘w›s,"1234567890",10,1ËË
	`RWOP_ERR_QUIT
(rwops);

159 i‡(10 !
rw›s
->
	`wrôe
‘w›s,"1234567890",1,10ËË
	`RWOP_ERR_QUIT
(rwops);

160 i‡(7 !
rw›s
->
	`wrôe
‘w›s,"1234567",1,7ËË
	`RWOP_ERR_QUIT
(rwops);

161 i‡(0!=
rw›s
->
	`£ek
‘w›s,0L,
RW_SEEK_SET
)Ë
	`RWOP_ERR_QUIT
(rwops);

163 i‡(1!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,1,1)Ë
	`RWOP_ERR_QUIT
(rwops);

164 i‡(0!=
rw›s
->
	`£ek
‘w›s,0L,
RW_SEEK_SET
)Ë
	`RWOP_ERR_QUIT
(rwops);

166 i‡(20+27!=
rw›s
->
	`£ek
‘w›s,-7,
RW_SEEK_END
)Ë
	`RWOP_ERR_QUIT
(rwops);

167 i‡(7!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,1,7)Ë
	`RWOP_ERR_QUIT
(rwops);

168 i‡(
	`SDL_memcmp
(
ã°_buf
,"1234567",7)Ë
	`RWOP_ERR_QUIT
(
rw›s
);

169 i‡(0!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,1,1)Ë
	`RWOP_ERR_QUIT
(rwops);

170 i‡(0!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,10,100)Ë
	`RWOP_ERR_QUIT
(rwops);

172 i‡(27!=
rw›s
->
	`£ek
‘w›s,-27,
RW_SEEK_CUR
)Ë
	`RWOP_ERR_QUIT
(rwops);

174 i‡(0!=
rw›s
->
	`£ek
‘w›s,0L,
RW_SEEK_SET
)Ë
	`RWOP_ERR_QUIT
(rwops);

175 i‡(3!=
rw›s
->
	`ªad
‘w›s,
ã°_buf
,10,3)Ë
	`RWOP_ERR_QUIT
(rwops);

176 i‡(
	`SDL_memcmp
(
ã°_buf
,"123456789012345678901234567123",30))

177 
	`RWOP_ERR_QUIT
(
rw›s
);

178 
rw›s
->
	`˛o£
(rwops);

179 
	`¥ötf
("test5 OK\n");

180 
	`˛ónup
();

182 
	}
}

	@SDL-win/test/testgamma.c

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<°rög.h
>

7 
	~<m©h.h
>

9 
	~"SDL.h
"

12 
	$quô
(
rc
)

14 
	`SDL_Quô
();

15 
	`exô
(
rc
);

16 
	}
}

19 
	$CÆcuœãGamma
(
gamma
, 
Uöt16
 *
ømp
)

21 
i
, 
vÆue
;

23 
gamma
 = 1.0 / gamma;

24  
i
=0; i<256; ++i ) {

25 
vÆue
 = ()(
	`pow
(()
i
/256.0, 
gamma
)*65535.0 + 0.5);

26 i‡–
vÆue
 > 65535 ) {

27 
vÆue
 = 65535;

29 
ømp
[
i
] = (
Uöt16
)
vÆue
;

31 
	}
}

34 
	$gë_video_¨gs
(*
¨gv
[], *
w
, *
h
, *
bµ
, 
Uöt32
 *
Êags
)

36 
i
;

38 *
w
 = 640;

39 *
h
 = 480;

40 *
bµ
 = 0;

41 *
Êags
 = 
SDL_SWSURFACE
;

43  
i
=1; 
¨gv
[i]; ++i ) {

44 i‡–
	`°rcmp
(
¨gv
[
i
], "-width") == 0 ) {

45 i‡–
¨gv
[
i
+1] ) {

46 *
w
 = 
	`©oi
(
¨gv
[++
i
]);

49 i‡–
	`°rcmp
(
¨gv
[
i
], "-height") == 0 ) {

50 i‡–
¨gv
[
i
+1] ) {

51 *
h
 = 
	`©oi
(
¨gv
[++
i
]);

54 i‡–
	`°rcmp
(
¨gv
[
i
], "-bpp") == 0 ) {

55 i‡–
¨gv
[
i
+1] ) {

56 *
bµ
 = 
	`©oi
(
¨gv
[++
i
]);

59 i‡–
	`°rcmp
(
¨gv
[
i
], "-fullscreen") == 0 ) {

60 *
Êags
 |
SDL_FULLSCREEN
;

62 i‡–
	`°rcmp
(
¨gv
[
i
], "-hw") == 0 ) {

63 *
Êags
 |
SDL_HWSURFACE
;

65 i‡–
	`°rcmp
(
¨gv
[
i
], "-hwpalette") == 0 ) {

66 *
Êags
 |
SDL_HWPALETTE
;

70  
i
;

71 
	}
}

73 
	$maö
(
¨gc
, *
¨gv
[])

75 
SDL_SurÁ˚
 *
s¸ìn
;

76 
SDL_SurÁ˚
 *
image
;

77 
gamma
;

78 
i
;

79 
w
, 
h
, 
bµ
;

80 
Uöt32
 
Êags
;

81 
Uöt16
 
ømp
[256];

82 
Uöt16
 
ªd_ømp
[256];

83 
Uöt32
 
thí
, 
timeout
;

86 
¨gv
 +
	`gë_video_¨gs
◊rgv, &
w
, &
h
, &
bµ
, &
Êags
);

89 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 ) {

90 
	`Ârötf
(
°dîr
,

91 "Couldn'àöôülizêSDL: %s\n", 
	`SDL_GëEº‹
());

96 
s¸ìn
 = 
	`SDL_SëVideoMode
(
w
, 
h
, 
bµ
, 
Êags
 | 
SDL_HWPALETTE
);

97 i‡–
s¸ìn
 =
NULL
 ) {

98 
	`Ârötf
(
°dîr
, "Couldn't set %dx%d video mode: %s\n",

99 
w
, 
h
, 
	`SDL_GëEº‹
());

100 
	`quô
(1);

104 
	`SDL_WM_SëC≠ti⁄
("SDL gammaÅest", "testgamma");

107 
gamma
 = 1.0f;

108 i‡–*
¨gv
 ) {

109 
gamma
 = ()
	`©of
(*
¨gv
);

111 i‡–
	`SDL_SëGamma
(
gamma
, gamma, gamma) < 0 ) {

112 
	`Ârötf
(
°dîr
, "U«bÀÅÿ£àgamma: %s\n", 
	`SDL_GëEº‹
());

113 
	`quô
(1);

118 
ªÆ
[3];

119 i‡–
	`SDL_GëGamma
(&
ªÆ
[0], &real[1], &real[2]) < 0 ) {

120 
	`¥ötf
("Couldn'àgë gamma: %s\n", 
	`SDL_GëEº‹
());

122 
	`¥ötf
("Set gamma values: R=%2.2f, G=%2.2f, B=%2.2f\n",

123 
ªÆ
[0],Ñeal[1],Ñeal[2]);

128 
image
 = 
	`SDL_LﬂdBMP
("sample.bmp");

129 i‡–
image
 ) {

130 
SDL_Re˘
 
d°
;

132 
d°
.
x
 = (
s¸ìn
->
w
 - 
image
->w)/2;

133 
d°
.
y
 = (
s¸ìn
->
h
 - 
image
->h)/2;

134 
d°
.
w
 = 
image
->w;

135 
d°
.
h
 = 
image
->h;

136 
	`SDL_BlôSurÁ˚
(
image
, 
NULL
, 
s¸ìn
, &
d°
);

137 
	`SDL_Upd©eRe˘s
(
s¸ìn
, 1, &
d°
);

141 
thí
 = 
	`SDL_GëTicks
();

142 
timeout
 = (5*1000);

143  (
	`SDL_GëTicks
()-
thí
Ë< 
timeout
 ) {

144 
SDL_Evít
 
evít
;

146  
	`SDL_PﬁlEvít
(&
evít
) ) {

147 
evít
.
ty≥
) {

148 
SDL_QUIT
:

149 
timeout
 = 0;

151 
SDL_KEYDOWN
:

152 
evít
.
key
.
keysym
.
sym
) {

153 
SDLK_SPACE
:

154 
timeout
 += (5*1000);

156 
SDLK_UP
:

157 
gamma
 += 0.2f;

158 
	`SDL_SëGamma
(
gamma
, gamma, gamma);

160 
SDLK_DOWN
:

161 
gamma
 -= 0.2f;

162 
	`SDL_SëGamma
(
gamma
, gamma, gamma);

164 
SDLK_ESCAPE
:

165 
timeout
 = 0;

176  
gamma
 < 10.0 ) {

178 
gamma
 += 0.1f;

179 
	`CÆcuœãGamma
(
gamma
, 
ªd_ømp
);

180 
	`CÆcuœãGamma
(1.0/
gamma
, 
ømp
);

181 
	`SDL_SëGammaRamp
(
ªd_ømp
, 
ømp
,Ñamp);

184 
	`mem£t
(
ªd_ømp
, 255, (red_ramp));

185 
	`mem£t
(
ømp
, 0, (ramp));

186 
	`SDL_SëGammaRamp
(
ªd_ømp
, 
ømp
,Ñamp);

189  
i
=(
ªd_ømp
[0] >> 8); i >= 0; --i ) {

190 
	`mem£t
(
ªd_ømp
, 
i
, (red_ramp));

191 
	`SDL_SëGammaRamp
(
ªd_ømp
, 
NULL
, NULL);

193 
	`SDL_Dñay
(1*1000);

195 
	`SDL_Quô
();

197 
	}
}

	@SDL-win/test/testgl.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<m©h.h
>

6 
	~"SDL.h
"

8 #ifde‡
__MACOS__


9 
	#HAVE_OPENGL


	)

12 #ifde‡
HAVE_OPENGL


14 
	~"SDL_›ígl.h
"

17 
	#SHADED_CUBE


	)

20 
	#LOGO_FILE
 "ic⁄.bmp"

	)

26 
SDL_boﬁ
 
	gUSE_DEPRECATED_OPENGLBLIT
 = 
SDL_FALSE
;

28 
SDL_SurÁ˚
 *
	gglobÆ_image
 = 
NULL
;

29 
GLuöt
 
	gglobÆ_ãxtuª
 = 0;

30 
GLuöt
 
	gcurs‹_ãxtuª
 = 0;

34 
	$HŸKey_ToggÀFuŒS¸ìn
()

36 
SDL_SurÁ˚
 *
s¸ìn
;

38 
s¸ìn
 = 
	`SDL_GëVideoSurÁ˚
();

39 i‡–
	`SDL_WM_ToggÀFuŒS¸ìn
(
s¸ìn
) ) {

40 
	`¥ötf
("Toggled fullscreen mode -Çow %s\n",

41 (
s¸ìn
->
Êags
&
SDL_FULLSCREEN
) ? "fullscreen" : "windowed");

43 
	`¥ötf
("UnableÅoÅoggle fullscreen mode\n");

45 
	}
}

47 
	$HŸKey_ToggÀGøb
()

49 
SDL_GøbMode
 
mode
;

51 
	`¥ötf
("Ctrl-G:Åoggling input grab!\n");

52 
mode
 = 
	`SDL_WM_GøbI≈ut
(
SDL_GRAB_QUERY
);

53 i‡–
mode
 =
SDL_GRAB_ON
 ) {

54 
	`¥ötf
("Grab was on\n");

56 
	`¥ötf
("Grab was off\n");

58 
mode
 = 
	`SDL_WM_GøbI≈ut
(!mode);

59 i‡–
mode
 =
SDL_GRAB_ON
 ) {

60 
	`¥ötf
("Grab isÇow on\n");

62 
	`¥ötf
("Grab isÇow off\n");

64 
	}
}

66 
	$HŸKey_Ic⁄ify
()

68 
	`¥ötf
("Ctrl-Z: iconifying window!\n");

69 
	`SDL_WM_Ic⁄ifyWödow
();

70 
	}
}

72 
	$H™dÀEvít
(
SDL_Evít
 *
evít
)

74 
d⁄e
;

76 
d⁄e
 = 0;

77  
evít
->
ty≥
 ) {

78 
SDL_ACTIVEEVENT
:

80 
	`¥ötf
–"≠∞%†", 
evít
->
a˘ive
.
gaö
 ? "gained" : "lost" );

81 i‡–
evít
->
a˘ive
.
°©e
 & 
SDL_APPACTIVE
 ) {

82 
	`¥ötf
( "active " );

83 } i‡–
evít
->
a˘ive
.
°©e
 & 
SDL_APPMOUSEFOCUS
 ) {

84 
	`¥ötf
( "mouse " );

85 } i‡–
evít
->
a˘ive
.
°©e
 & 
SDL_APPINPUTFOCUS
 ) {

86 
	`¥ötf
( "input " );

88 
	`¥ötf
( "focus\n" );

92 
SDL_KEYDOWN
:

93 i‡–
evít
->
key
.
keysym
.
sym
 =
SDLK_ESCAPE
 ) {

94 
d⁄e
 = 1;

96 i‡–(
evít
->
key
.
keysym
.
sym
 =
SDLK_g
) &&

97 (
evít
->
key
.
keysym
.
mod
 & 
KMOD_CTRL
) ) {

98 
	`HŸKey_ToggÀGøb
();

100 i‡–(
evít
->
key
.
keysym
.
sym
 =
SDLK_z
) &&

101 (
evít
->
key
.
keysym
.
mod
 & 
KMOD_CTRL
) ) {

102 
	`HŸKey_Ic⁄ify
();

104 i‡–(
evít
->
key
.
keysym
.
sym
 =
SDLK_RETURN
) &&

105 (
evít
->
key
.
keysym
.
mod
 & 
KMOD_ALT
) ) {

106 
	`HŸKey_ToggÀFuŒS¸ìn
();

108 
	`¥ötf
("key '%s'Öressed\n",

109 
	`SDL_GëKeyName
(
evít
->
key
.
keysym
.
sym
));

111 
SDL_QUIT
:

112 
d⁄e
 = 1;

115 (
d⁄e
);

116 
	}
}

118 
	$SDL_GL_E¡î2DMode
()

120 
SDL_SurÁ˚
 *
s¸ìn
 = 
	`SDL_GëVideoSurÁ˚
();

125 
	`glPushAârib
(
GL_ENABLE_BIT
);

126 
	`glDißbÀ
(
GL_DEPTH_TEST
);

127 
	`glDißbÀ
(
GL_CULL_FACE
);

128 
	`glE«bÀ
(
GL_TEXTURE_2D
);

131 
	`glE«bÀ
(
GL_BLEND
);

132 
	`glBÀndFunc
(
GL_SRC_ALPHA
, 
GL_ONE_MINUS_SRC_ALPHA
);

134 
	`glVõwp‹t
(0, 0, 
s¸ìn
->
w
, s¸ìn->
h
);

136 
	`glM©rixMode
(
GL_PROJECTION
);

137 
	`glPushM©rix
();

138 
	`glLﬂdIdítôy
();

140 
	`glOπho
(0.0, (
GLdoubÀ
)
s¸ìn
->
w
, (GLdoubÀ)s¸ìn->
h
, 0.0, 0.0, 1.0);

142 
	`glM©rixMode
(
GL_MODELVIEW
);

143 
	`glPushM©rix
();

144 
	`glLﬂdIdítôy
();

146 
	`glTexEnvf
(
GL_TEXTURE_ENV
, 
GL_TEXTURE_ENV_MODE
, 
GL_DECAL
);

147 
	}
}

149 
	$SDL_GL_Lóve2DMode
()

151 
	`glM©rixMode
(
GL_MODELVIEW
);

152 
	`glP›M©rix
();

154 
	`glM©rixMode
(
GL_PROJECTION
);

155 
	`glP›M©rix
();

157 
	`glP›Aârib
();

158 
	}
}

161 
	$powî_of_two
(
öput
)

163 
vÆue
 = 1;

165  
vÆue
 < 
öput
 ) {

166 
vÆue
 <<= 1;

168  
vÆue
;

169 
	}
}

171 
GLuöt
 
	$SDL_GL_LﬂdTextuª
(
SDL_SurÁ˚
 *
surÁ˚
, 
GLÊﬂt
 *
ãxco‹d
)

173 
GLuöt
 
ãxtuª
;

174 
w
, 
h
;

175 
SDL_SurÁ˚
 *
image
;

176 
SDL_Re˘
 
¨ó
;

177 
Uöt32
 
ßved_Êags
;

178 
Uöt8
 
ßved_Æpha
;

181 
w
 = 
	`powî_of_two
(
surÁ˚
->w);

182 
h
 = 
	`powî_of_two
(
surÁ˚
->h);

183 
ãxco‹d
[0] = 0.0f;

184 
ãxco‹d
[1] = 0.0f;

185 
ãxco‹d
[2] = (
GLÊﬂt
)
surÁ˚
->
w
 / w;

186 
ãxco‹d
[3] = (
GLÊﬂt
)
surÁ˚
->
h
 / h;

188 
image
 = 
	`SDL_Cª©eRGBSurÁ˚
(

189 
SDL_SWSURFACE
,

190 
w
, 
h
,

192 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


204 i‡–
image
 =
NULL
 ) {

209 
ßved_Êags
 = 
surÁ˚
->
Êags
&(
SDL_SRCALPHA
|
SDL_RLEACCELOK
);

210 
ßved_Æpha
 = 
surÁ˚
->
f‹m©
->
Æpha
;

211 i‡–(
ßved_Êags
 & 
SDL_SRCALPHA
) == SDL_SRCALPHA ) {

212 
	`SDL_SëAÕha
(
surÁ˚
, 0, 0);

216 
¨ó
.
x
 = 0;

217 
¨ó
.
y
 = 0;

218 
¨ó
.
w
 = 
surÁ˚
->w;

219 
¨ó
.
h
 = 
surÁ˚
->h;

220 
	`SDL_BlôSurÁ˚
(
surÁ˚
, &
¨ó
, 
image
, &area);

223 i‡–(
ßved_Êags
 & 
SDL_SRCALPHA
) == SDL_SRCALPHA ) {

224 
	`SDL_SëAÕha
(
surÁ˚
, 
ßved_Êags
, 
ßved_Æpha
);

228 
	`glGíTextuªs
(1, &
ãxtuª
);

229 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª
);

230 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_NEAREST
);

231 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_NEAREST
);

232 
	`glTexImage2D
(
GL_TEXTURE_2D
,

234 
GL_RGBA
,

235 
w
, 
h
,

237 
GL_RGBA
,

238 
GL_UNSIGNED_BYTE
,

239 
image
->
pixñs
);

240 
	`SDL_FªeSurÁ˚
(
image
);

242  
ãxtuª
;

243 
	}
}

245 
	$DøwLogoCurs‹
()

247 
GLÊﬂt
 
ãxMöX
, 
ãxMöY
;

248 
GLÊﬂt
 
ãxMaxX
, 
ãxMaxY
;

249 
w
, 
h
;

250 
x
, 
y
;

252 i‡–! 
curs‹_ãxtuª
 ) {

253 
SDL_SurÁ˚
 *
image
;

254 
GLÊﬂt
 
ãxco‹d
[4];

257 
image
 = 
	`SDL_LﬂdBMP
(
LOGO_FILE
);

258 i‡–
image
 =
NULL
 ) {

261 
w
 = 
image
->w;

262 
h
 = 
image
->h;

265 
curs‹_ãxtuª
 = 
	`SDL_GL_LﬂdTextuª
(
image
, 
ãxco‹d
);

268 
ãxMöX
 = 
ãxco‹d
[0];

269 
ãxMöY
 = 
ãxco‹d
[1];

270 
ãxMaxX
 = 
ãxco‹d
[2];

271 
ãxMaxY
 = 
ãxco‹d
[3];

274 
	`SDL_FªeSurÁ˚
(
image
);

277 i‡–! 
curs‹_ãxtuª
 ) {

283 
	`SDL_GëMou£Sèã
(&
x
, &
y
);

284 
x
 -
w
/2;

285 
y
 -
h
/2;

288 
	`SDL_GL_E¡î2DMode
();

289 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
curs‹_ãxtuª
);

290 
	`glBegö
(
GL_TRIANGLE_STRIP
);

291 
	`glTexCo‹d2f
(
ãxMöX
, 
ãxMöY
); 
	`glVîãx2i
(
x
, 
y
 );

292 
	`glTexCo‹d2f
(
ãxMaxX
, 
ãxMöY
); 
	`glVîãx2i
(
x
+
w
, 
y
 );

293 
	`glTexCo‹d2f
(
ãxMöX
, 
ãxMaxY
); 
	`glVîãx2i
(
x
, 
y
+
h
);

294 
	`glTexCo‹d2f
(
ãxMaxX
, 
ãxMaxY
); 
	`glVîãx2i
(
x
+
w
, 
y
+
h
);

295 
	`glEnd
();

296 
	`SDL_GL_Lóve2DMode
();

297 
	}
}

299 
	$DøwLogoTextuª
()

301 
GLÊﬂt
 
ãxMöX
, 
ãxMöY
;

302 
GLÊﬂt
 
ãxMaxX
, 
ãxMaxY
;

303 
x
 = 0;

304 
y
 = 0;

305 
w
, 
h
;

306 
dñè_x
 = 1;

307 
dñè_y
 = 1;

309 
SDL_SurÁ˚
 *
s¸ìn
 = 
	`SDL_GëVideoSurÁ˚
();

311 i‡–! 
globÆ_ãxtuª
 ) {

312 
SDL_SurÁ˚
 *
image
;

313 
GLÊﬂt
 
ãxco‹d
[4];

316 
image
 = 
	`SDL_LﬂdBMP
(
LOGO_FILE
);

317 i‡–
image
 =
NULL
 ) {

320 
w
 = 
image
->w;

321 
h
 = 
image
->h;

324 
globÆ_ãxtuª
 = 
	`SDL_GL_LﬂdTextuª
(
image
, 
ãxco‹d
);

327 
ãxMöX
 = 
ãxco‹d
[0];

328 
ãxMöY
 = 
ãxco‹d
[1];

329 
ãxMaxX
 = 
ãxco‹d
[2];

330 
ãxMaxY
 = 
ãxco‹d
[3];

333 
	`SDL_FªeSurÁ˚
(
image
);

336 i‡–! 
globÆ_ãxtuª
 ) {

342 
x
 +
dñè_x
;

343 i‡–
x
 < 0 ) {

344 
x
 = 0;

345 
dñè_x
 = -delta_x;

347 i‡–(
x
+
w
Ë> 
s¸ìn
->w ) {

348 
x
 = 
s¸ìn
->
w
-w;

349 
dñè_x
 = -delta_x;

351 
y
 +
dñè_y
;

352 i‡–
y
 < 0 ) {

353 
y
 = 0;

354 
dñè_y
 = -delta_y;

356 i‡–(
y
+
h
Ë> 
s¸ìn
->h ) {

357 
y
 = 
s¸ìn
->
h
-h;

358 
dñè_y
 = -delta_y;

362 
	`SDL_GL_E¡î2DMode
();

363 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
globÆ_ãxtuª
);

364 
	`glBegö
(
GL_TRIANGLE_STRIP
);

365 
	`glTexCo‹d2f
(
ãxMöX
, 
ãxMöY
); 
	`glVîãx2i
(
x
, 
y
 );

366 
	`glTexCo‹d2f
(
ãxMaxX
, 
ãxMöY
); 
	`glVîãx2i
(
x
+
w
, 
y
 );

367 
	`glTexCo‹d2f
(
ãxMöX
, 
ãxMaxY
); 
	`glVîãx2i
(
x
, 
y
+
h
);

368 
	`glTexCo‹d2f
(
ãxMaxX
, 
ãxMaxY
); 
	`glVîãx2i
(
x
+
w
, 
y
+
h
);

369 
	`glEnd
();

370 
	`SDL_GL_Lóve2DMode
();

371 
	}
}

374 
	$DøwLogoBlô
()

376 
x
 = 0;

377 
y
 = 0;

378 
w
, 
h
;

379 
dñè_x
 = 1;

380 
dñè_y
 = 1;

382 
SDL_Re˘
 
d°
;

383 
SDL_SurÁ˚
 *
s¸ìn
 = 
	`SDL_GëVideoSurÁ˚
();

385 i‡–
globÆ_image
 =
NULL
 ) {

386 
SDL_SurÁ˚
 *
ãmp
;

389 
ãmp
 = 
	`SDL_LﬂdBMP
(
LOGO_FILE
);

390 i‡–
ãmp
 =
NULL
 ) {

393 
w
 = 
ãmp
->w;

394 
h
 = 
ãmp
->h;

397 
globÆ_image
 = 
	`SDL_Cª©eRGBSurÁ˚
(

398 
SDL_SWSURFACE
,

399 
w
, 
h
,

400 
s¸ìn
->
f‹m©
->
BôsPîPixñ
,

401 
s¸ìn
->
f‹m©
->
Rmask
,

402 
s¸ìn
->
f‹m©
->
Gmask
,

403 
s¸ìn
->
f‹m©
->
Bmask
,

404 
s¸ìn
->
f‹m©
->
Amask
);

405 i‡–
globÆ_image
 ) {

406 
	`SDL_BlôSurÁ˚
(
ãmp
, 
NULL
, 
globÆ_image
, NULL);

408 
	`SDL_FªeSurÁ˚
(
ãmp
);

411 i‡–! 
globÆ_image
 ) {

423 
x
 +
dñè_x
;

424 i‡–
x
 < 0 ) {

425 
x
 = 0;

426 
dñè_x
 = -delta_x;

428 i‡–(
x
+
w
Ë> 
s¸ìn
->w ) {

429 
x
 = 
s¸ìn
->
w
-w;

430 
dñè_x
 = -delta_x;

432 
y
 +
dñè_y
;

433 i‡–
y
 < 0 ) {

434 
y
 = 0;

435 
dñè_y
 = -delta_y;

437 i‡–(
y
+
h
Ë> 
s¸ìn
->h ) {

438 
y
 = 
s¸ìn
->
h
-h;

439 
dñè_y
 = -delta_y;

441 
d°
.
x
 = x;

442 
d°
.
y
 = y;

443 
d°
.
w
 = w;

444 
d°
.
h
 = h;

445 
	`SDL_BlôSurÁ˚
(
globÆ_image
, 
NULL
, 
s¸ìn
, &
d°
);

448 
	`SDL_Upd©eRe˘s
(
s¸ìn
, 1, &
d°
);

449 
	}
}

451 
	$RunGLTe°
–
¨gc
, * 
¨gv
[],

452 
logo
, 
logocurs‹
, 
¶owly
, 
bµ
, 
gamma
, 
no‰ame
, 
fßa
, 
sync
, 
ac˚l
 )

454 
i
;

455 
rgb_size
[3];

456 
w
 = 640;

457 
h
 = 480;

458 
d⁄e
 = 0;

459 
‰ames
;

460 
Uöt32
 
°¨t_time
, 
this_time
;

461 
cﬁ‹
[8][3]= {{ 1.0, 1.0, 0.0},

469 
cube
[8][3]= {{ 0.5, 0.5, -0.5},

477 
Uöt32
 
video_Êags
;

478 
vÆue
;

480 if–
	`SDL_Inô
–
SDL_INIT_VIDEO
 ) < 0 ) {

481 
	`Ârötf
(
°dîr
,"Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

482 
	`exô
( 1 );

486 i‡–
bµ
 == 0 ) {

487 i‡–
	`SDL_GëVideoInfo
()->
vfmt
->
BôsPîPixñ
 <= 8 ) {

488 
bµ
 = 8;

490 
bµ
 = 16;

495 i‡–
logo
 && 
USE_DEPRECATED_OPENGLBLIT
 ) {

496 
video_Êags
 = 
SDL_OPENGLBLIT
;

498 
video_Êags
 = 
SDL_OPENGL
;

500  
i
=1; 
¨gv
[i]; ++i ) {

501 i‡–
	`°rcmp
(
¨gv
[
i
], "-fullscreen") == 0 ) {

502 
video_Êags
 |
SDL_FULLSCREEN
;

506 i‡(
no‰ame
) {

507 
video_Êags
 |
SDL_NOFRAME
;

511 
bµ
) {

513 
rgb_size
[0] = 3;

514 
rgb_size
[1] = 3;

515 
rgb_size
[2] = 2;

519 
rgb_size
[0] = 5;

520 
rgb_size
[1] = 5;

521 
rgb_size
[2] = 5;

524 
rgb_size
[0] = 8;

525 
rgb_size
[1] = 8;

526 
rgb_size
[2] = 8;

529 
	`SDL_GL_SëAâribuã
–
SDL_GL_RED_SIZE
, 
rgb_size
[0] );

530 
	`SDL_GL_SëAâribuã
–
SDL_GL_GREEN_SIZE
, 
rgb_size
[1] );

531 
	`SDL_GL_SëAâribuã
–
SDL_GL_BLUE_SIZE
, 
rgb_size
[2] );

532 
	`SDL_GL_SëAâribuã
–
SDL_GL_DEPTH_SIZE
, 16 );

533 
	`SDL_GL_SëAâribuã
–
SDL_GL_DOUBLEBUFFER
, 1 );

534 i‡–
fßa
 ) {

535 
	`SDL_GL_SëAâribuã
–
SDL_GL_MULTISAMPLEBUFFERS
, 1 );

536 
	`SDL_GL_SëAâribuã
–
SDL_GL_MULTISAMPLESAMPLES
, 
fßa
 );

538 i‡–
ac˚l
 ) {

539 
	`SDL_GL_SëAâribuã
–
SDL_GL_ACCELERATED_VISUAL
, 1 );

541 i‡–
sync
 ) {

542 
	`SDL_GL_SëAâribuã
–
SDL_GL_SWAP_CONTROL
, 1 );

544 
	`SDL_GL_SëAâribuã
–
SDL_GL_SWAP_CONTROL
, 0 );

546 i‡–
	`SDL_SëVideoMode
–
w
, 
h
, 
bµ
, 
video_Êags
 ) =
NULL
 ) {

547 
	`Ârötf
(
°dîr
, "Couldn'à£àGL mode: %s\n", 
	`SDL_GëEº‹
());

548 
	`SDL_Quô
();

549 
	`exô
(1);

552 
	`¥ötf
("S¸ì¿BPP: %d\n", 
	`SDL_GëVideoSurÁ˚
()->
f‹m©
->
BôsPîPixñ
);

553 
	`¥ötf
("\n");

554 
	`¥ötf
–"Víd‹ : %s\n", 
	`glGëSåög
–
GL_VENDOR
 ) );

555 
	`¥ötf
–"Rídîî : %s\n", 
	`glGëSåög
–
GL_RENDERER
 ) );

556 
	`¥ötf
–"Vîsi⁄ : %s\n", 
	`glGëSåög
–
GL_VERSION
 ) );

557 
	`¥ötf
–"Exãnsi⁄†: %s\n", 
	`glGëSåög
–
GL_EXTENSIONS
 ) );

558 
	`¥ötf
("\n");

560 
	`SDL_GL_GëAâribuã
–
SDL_GL_RED_SIZE
, &
vÆue
 );

561 
	`¥ötf
–"SDL_GL_RED_SIZE:Ñeque°ed %d, gŸ %d\n", 
rgb_size
[0],
vÆue
);

562 
	`SDL_GL_GëAâribuã
–
SDL_GL_GREEN_SIZE
, &
vÆue
 );

563 
	`¥ötf
–"SDL_GL_GREEN_SIZE:Ñeque°ed %d, gŸ %d\n", 
rgb_size
[1],
vÆue
);

564 
	`SDL_GL_GëAâribuã
–
SDL_GL_BLUE_SIZE
, &
vÆue
 );

565 
	`¥ötf
–"SDL_GL_BLUE_SIZE:Ñeque°ed %d, gŸ %d\n", 
rgb_size
[2],
vÆue
);

566 
	`SDL_GL_GëAâribuã
–
SDL_GL_DEPTH_SIZE
, &
vÆue
 );

567 
	`¥ötf
–"SDL_GL_DEPTH_SIZE:Ñeque°ed %d, gŸ %d\n", 
bµ
, 
vÆue
 );

568 
	`SDL_GL_GëAâribuã
–
SDL_GL_DOUBLEBUFFER
, &
vÆue
 );

569 
	`¥ötf
–"SDL_GL_DOUBLEBUFFER:Ñeque°ed 1, gŸ %d\n", 
vÆue
 );

570 i‡–
fßa
 ) {

571 
	`SDL_GL_GëAâribuã
–
SDL_GL_MULTISAMPLEBUFFERS
, &
vÆue
 );

572 
	`¥ötf
("SDL_GL_MULTISAMPLEBUFFERS:Ñeque°ed 1, gŸ %d\n", 
vÆue
 );

573 
	`SDL_GL_GëAâribuã
–
SDL_GL_MULTISAMPLESAMPLES
, &
vÆue
 );

574 
	`¥ötf
("SDL_GL_MULTISAMPLESAMPLES:Ñeque°ed %d, gŸ %d\n", 
fßa
, 
vÆue
 );

576 i‡–
ac˚l
 ) {

577 
	`SDL_GL_GëAâribuã
–
SDL_GL_ACCELERATED_VISUAL
, &
vÆue
 );

578 
	`¥ötf
–"SDL_GL_ACCELERATED_VISUAL:Ñeque°ed 1, gŸ %d\n", 
vÆue
 );

580 i‡–
sync
 ) {

581 
	`SDL_GL_GëAâribuã
–
SDL_GL_SWAP_CONTROL
, &
vÆue
 );

582 
	`¥ötf
–"SDL_GL_SWAP_CONTROL:Ñeque°ed 1, gŸ %d\n", 
vÆue
 );

586 
	`SDL_WM_SëC≠ti⁄
( "SDL GLÅest", "testgl" );

589 i‡–
gamma
 != 0.0 ) {

590 
	`SDL_SëGamma
(
gamma
, gamma, gamma);

593 
	`glVõwp‹t
–0, 0, 
w
, 
h
 );

594 
	`glM©rixMode
–
GL_PROJECTION
 );

595 
	`glLﬂdIdítôy
( );

597 
	`glOπho
( -2.0, 2.0, -2.0, 2.0, -20.0, 20.0 );

599 
	`glM©rixMode
–
GL_MODELVIEW
 );

600 
	`glLﬂdIdítôy
( );

602 
	`glE«bÀ
(
GL_DEPTH_TEST
);

604 
	`glDïthFunc
(
GL_LESS
);

606 
	`glShadeModñ
(
GL_SMOOTH
);

609 
°¨t_time
 = 
	`SDL_GëTicks
();

610 
‰ames
 = 0;

611  !
d⁄e
 ) {

612 
GLíum
 
gl_îr‹
;

613 * 
sdl_îr‹
;

614 
SDL_Evít
 
evít
;

617 
	`glCÀ¨Cﬁ‹
( 0.0, 0.0, 0.0, 1.0 );

618 
	`glCÀ¨
–
GL_COLOR_BUFFER_BIT
 | 
GL_DEPTH_BUFFER_BIT
);

620 
	`glBegö
–
GL_QUADS
 );

622 #ifde‡
SHADED_CUBE


623 
	`glCﬁ‹3fv
(
cﬁ‹
[0]);

624 
	`glVîãx3fv
(
cube
[0]);

625 
	`glCﬁ‹3fv
(
cﬁ‹
[1]);

626 
	`glVîãx3fv
(
cube
[1]);

627 
	`glCﬁ‹3fv
(
cﬁ‹
[2]);

628 
	`glVîãx3fv
(
cube
[2]);

629 
	`glCﬁ‹3fv
(
cﬁ‹
[3]);

630 
	`glVîãx3fv
(
cube
[3]);

632 
	`glCﬁ‹3fv
(
cﬁ‹
[3]);

633 
	`glVîãx3fv
(
cube
[3]);

634 
	`glCﬁ‹3fv
(
cﬁ‹
[4]);

635 
	`glVîãx3fv
(
cube
[4]);

636 
	`glCﬁ‹3fv
(
cﬁ‹
[7]);

637 
	`glVîãx3fv
(
cube
[7]);

638 
	`glCﬁ‹3fv
(
cﬁ‹
[2]);

639 
	`glVîãx3fv
(
cube
[2]);

641 
	`glCﬁ‹3fv
(
cﬁ‹
[0]);

642 
	`glVîãx3fv
(
cube
[0]);

643 
	`glCﬁ‹3fv
(
cﬁ‹
[5]);

644 
	`glVîãx3fv
(
cube
[5]);

645 
	`glCﬁ‹3fv
(
cﬁ‹
[6]);

646 
	`glVîãx3fv
(
cube
[6]);

647 
	`glCﬁ‹3fv
(
cﬁ‹
[1]);

648 
	`glVîãx3fv
(
cube
[1]);

650 
	`glCﬁ‹3fv
(
cﬁ‹
[5]);

651 
	`glVîãx3fv
(
cube
[5]);

652 
	`glCﬁ‹3fv
(
cﬁ‹
[4]);

653 
	`glVîãx3fv
(
cube
[4]);

654 
	`glCﬁ‹3fv
(
cﬁ‹
[7]);

655 
	`glVîãx3fv
(
cube
[7]);

656 
	`glCﬁ‹3fv
(
cﬁ‹
[6]);

657 
	`glVîãx3fv
(
cube
[6]);

659 
	`glCﬁ‹3fv
(
cﬁ‹
[5]);

660 
	`glVîãx3fv
(
cube
[5]);

661 
	`glCﬁ‹3fv
(
cﬁ‹
[0]);

662 
	`glVîãx3fv
(
cube
[0]);

663 
	`glCﬁ‹3fv
(
cﬁ‹
[3]);

664 
	`glVîãx3fv
(
cube
[3]);

665 
	`glCﬁ‹3fv
(
cﬁ‹
[4]);

666 
	`glVîãx3fv
(
cube
[4]);

668 
	`glCﬁ‹3fv
(
cﬁ‹
[6]);

669 
	`glVîãx3fv
(
cube
[6]);

670 
	`glCﬁ‹3fv
(
cﬁ‹
[1]);

671 
	`glVîãx3fv
(
cube
[1]);

672 
	`glCﬁ‹3fv
(
cﬁ‹
[2]);

673 
	`glVîãx3fv
(
cube
[2]);

674 
	`glCﬁ‹3fv
(
cﬁ‹
[7]);

675 
	`glVîãx3fv
(
cube
[7]);

677 
	`glCﬁ‹3f
(1.0, 0.0, 0.0);

678 
	`glVîãx3fv
(
cube
[0]);

679 
	`glVîãx3fv
(
cube
[1]);

680 
	`glVîãx3fv
(
cube
[2]);

681 
	`glVîãx3fv
(
cube
[3]);

683 
	`glCﬁ‹3f
(0.0, 1.0, 0.0);

684 
	`glVîãx3fv
(
cube
[3]);

685 
	`glVîãx3fv
(
cube
[4]);

686 
	`glVîãx3fv
(
cube
[7]);

687 
	`glVîãx3fv
(
cube
[2]);

689 
	`glCﬁ‹3f
(0.0, 0.0, 1.0);

690 
	`glVîãx3fv
(
cube
[0]);

691 
	`glVîãx3fv
(
cube
[5]);

692 
	`glVîãx3fv
(
cube
[6]);

693 
	`glVîãx3fv
(
cube
[1]);

695 
	`glCﬁ‹3f
(0.0, 1.0, 1.0);

696 
	`glVîãx3fv
(
cube
[5]);

697 
	`glVîãx3fv
(
cube
[4]);

698 
	`glVîãx3fv
(
cube
[7]);

699 
	`glVîãx3fv
(
cube
[6]);

701 
	`glCﬁ‹3f
(1.0, 1.0, 0.0);

702 
	`glVîãx3fv
(
cube
[5]);

703 
	`glVîãx3fv
(
cube
[0]);

704 
	`glVîãx3fv
(
cube
[3]);

705 
	`glVîãx3fv
(
cube
[4]);

707 
	`glCﬁ‹3f
(1.0, 0.0, 1.0);

708 
	`glVîãx3fv
(
cube
[6]);

709 
	`glVîãx3fv
(
cube
[1]);

710 
	`glVîãx3fv
(
cube
[2]);

711 
	`glVîãx3fv
(
cube
[7]);

714 
	`glEnd
( );

716 
	`glM©rixMode
(
GL_MODELVIEW
);

717 
	`glRŸ©ef
(5.0, 1.0, 1.0, 1.0);

720 i‡–
logo
 ) {

721 i‡–
USE_DEPRECATED_OPENGLBLIT
 ) {

722 
	`DøwLogoBlô
();

724 
	`DøwLogoTextuª
();

727 i‡–
logocurs‹
 ) {

728 
	`DøwLogoCurs‹
();

731 
	`SDL_GL_Sw≠Buf„rs
( );

734 
gl_îr‹
 = 
	`glGëEº‹
( );

736 if–
gl_îr‹
 !
GL_NO_ERROR
 ) {

737 
	`Ârötf
–
°dîr
, "ã°gl: O≥nGLÉº‹: %d\n", 
gl_îr‹
 );

740 
sdl_îr‹
 = 
	`SDL_GëEº‹
( );

742 if–
sdl_îr‹
[0] != '\0' ) {

743 
	`Ârötf
(
°dîr
, "ã°gl: SDLÉº‹ '%s'\n", 
sdl_îr‹
);

744 
	`SDL_CÀ¨Eº‹
();

748 i‡–
¶owly
 ) {

749 
	`SDL_Dñay
( 20 );

753  
	`SDL_PﬁlEvít
–&
evít
 ) ) {

754 
d⁄e
 = 
	`H™dÀEvít
(&
evít
);

756 ++
‰ames
;

760 
this_time
 = 
	`SDL_GëTicks
();

761 i‡–
this_time
 !
°¨t_time
 ) {

762 
	`¥ötf
("%2.2f FPS\n",

763 (()
‰ames
/(
this_time
-
°¨t_time
))*1000.0);

766 i‡–
globÆ_image
 ) {

767 
	`SDL_FªeSurÁ˚
(
globÆ_image
);

768 
globÆ_image
 = 
NULL
;

770 i‡–
globÆ_ãxtuª
 ) {

771 
	`glDñëeTextuªs
–1, &
globÆ_ãxtuª
 );

772 
globÆ_ãxtuª
 = 0;

774 i‡–
curs‹_ãxtuª
 ) {

775 
	`glDñëeTextuªs
–1, &
curs‹_ãxtuª
 );

776 
curs‹_ãxtuª
 = 0;

780 
	`SDL_Quô
( );

782 
	}
}

784 
	$maö
(
¨gc
, *
¨gv
[])

786 
i
, 
logo
, 
logocurs‹
 = 0;

787 
numã°s
;

788 
bµ
 = 0;

789 
¶owly
;

790 
gamma
 = 0.0;

791 
no‰ame
 = 0;

792 
fßa
 = 0;

793 
ac˚l
 = 0;

794 
sync
 = 0;

796 
logo
 = 0;

797 
¶owly
 = 0;

798 
numã°s
 = 1;

799  
i
=1; 
¨gv
[i]; ++i ) {

800 i‡–
	`°rcmp
(
¨gv
[
i
], "-twice") == 0 ) {

801 ++
numã°s
;

803 i‡–
	`°rcmp
(
¨gv
[
i
], "-logo") == 0 ) {

804 
logo
 = 1;

805 
USE_DEPRECATED_OPENGLBLIT
 = 
SDL_FALSE
;

807 i‡–
	`°rcmp
(
¨gv
[
i
], "-logoblit") == 0 ) {

808 
logo
 = 1;

809 
USE_DEPRECATED_OPENGLBLIT
 = 
SDL_TRUE
;

811 i‡–
	`°rcmp
(
¨gv
[
i
], "-logocursor") == 0 ) {

812 
logocurs‹
 = 1;

814 i‡–
	`°rcmp
(
¨gv
[
i
], "-slow") == 0 ) {

815 
¶owly
 = 1;

817 i‡–
	`°rcmp
(
¨gv
[
i
], "-bpp") == 0 ) {

818 
bµ
 = 
	`©oi
(
¨gv
[++
i
]);

820 i‡–
	`°rcmp
(
¨gv
[
i
], "-gamma") == 0 ) {

821 
gamma
 = ()
	`©of
(
¨gv
[++
i
]);

823 i‡–
	`°rcmp
(
¨gv
[
i
], "-noframe") == 0 ) {

824 
no‰ame
 = 1;

826 i‡–
	`°rcmp
(
¨gv
[
i
], "-fsaa") == 0 ) {

827 ++
fßa
;

829 i‡–
	`°rcmp
(
¨gv
[
i
], "-accel") == 0 ) {

830 ++
ac˚l
;

832 i‡–
	`°rcmp
(
¨gv
[
i
], "-sync") == 0 ) {

833 ++
sync
;

835 i‡–
	`°∫cmp
(
¨gv
[
i
], "-h", 2) == 0 ) {

836 
	`¥ötf
(

838 
¨gv
[0]);

839 
	`exô
(0);

842  
i
=0; i<
numã°s
; ++i ) {

843 
	`RunGLTe°
(
¨gc
, 
¨gv
, 
logo
, 
logocurs‹
, 
¶owly
, 
bµ
, 
gamma
, 
no‰ame
, 
fßa
, 
sync
, 
ac˚l
);

846 
	}
}

850 
	$maö
(
¨gc
, *
¨gv
[])

852 
	`¥ötf
("No OpenGL support onÅhis system\n");

854 
	}
}

	@SDL-win/test/testhread.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<sig«l.h
>

8 
	~"SDL.h
"

9 
	~"SDL_thªad.h
"

11 
	gÆive
 = 0;

14 
	$quô
(
rc
)

16 
	`SDL_Quô
();

17 
	`exô
(
rc
);

18 
	}
}

20 
SDLCALL
 
	$ThªadFunc
(*
d©a
)

22 
	`¥ötf
("StartedÅhread %s: MyÅhread id is %u\n",

23 (*)
d©a
, 
	`SDL_ThªadID
());

24  
Æive
 ) {

25 
	`¥ötf
("Thªad '%s' i†Æive!\n", (*)
d©a
);

26 
	`SDL_Dñay
(1*1000);

28 
	`¥ötf
("Thªad '%s'Éxôög!\n", (*)
d©a
);

30 
	}
}

32 
	$kûÀd
(
sig
)

34 
	`¥ötf
("Killed with SIGTERM, waiting 5 secondsÅoÉxit\n");

35 
	`SDL_Dñay
(5*1000);

36 
Æive
 = 0;

37 
	`quô
(0);

38 
	}
}

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
SDL_Thªad
 *
thªad
;

45 i‡–
	`SDL_Inô
(0) < 0 ) {

46 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

50 
Æive
 = 1;

51 
thªad
 = 
	`SDL_Cª©eThªad
(
ThªadFunc
, "#1");

52 i‡–
thªad
 =
NULL
 ) {

53 
	`Ârötf
(
°dîr
, "Couldn'à¸óãÅhªad: %s\n", 
	`SDL_GëEº‹
());

54 
	`quô
(1);

56 
	`SDL_Dñay
(5*1000);

57 
	`¥ötf
("Waiting forÅhread #1\n");

58 
Æive
 = 0;

59 
	`SDL_WaôThªad
(
thªad
, 
NULL
);

61 
Æive
 = 1;

62 
thªad
 = 
	`SDL_Cª©eThªad
(
ThªadFunc
, "#2");

63 i‡–
thªad
 =
NULL
 ) {

64 
	`Ârötf
(
°dîr
, "Couldn'à¸óãÅhªad: %s\n", 
	`SDL_GëEº‹
());

65 
	`quô
(1);

67 
	`SDL_Dñay
(5*1000);

68 
	`¥ötf
("KillingÅhread #2\n");

69 
	`SDL_KûlThªad
(
thªad
);

71 
Æive
 = 1;

72 
	`sig«l
(
SIGTERM
, 
kûÀd
);

73 
thªad
 = 
	`SDL_Cª©eThªad
(
ThªadFunc
, "#3");

74 i‡–
thªad
 =
NULL
 ) {

75 
	`Ârötf
(
°dîr
, "Couldn'à¸óãÅhªad: %s\n", 
	`SDL_GëEº‹
());

76 
	`quô
(1);

78 
	`øi£
(
SIGTERM
);

80 
	`SDL_Quô
();

82 
	}
}

	@SDL-win/test/testiconv.c

2 
	~<°dio.h
>

4 
	~"SDL.h
"

6 
size_t
 
	$widñí
(*
d©a
)

8 
size_t
 
Àn
 = 0;

9 
Uöt32
 *
p
 = (Uöt32 *)
d©a
;

10 *
p
++) {

11 ++
Àn
;

13  
Àn
;

14 
	}
}

16 
	$maö
(
¨gc
, *
¨gv
[])

18 c⁄° * 
f‹m©s
[] = {

32 
buf„r
[
BUFSIZ
];

33 *
ucs4
;

34 *
ã°
[2];

35 
i
, 
ödex
 = 0;

36 
FILE
 *
fûe
;

37 
îr‹s
 = 0;

39 i‡–!
¨gv
[1] ) {

40 
¨gv
[1] = "utf8.txt";

42 
fûe
 = 
	`f›í
(
¨gv
[1], "rb");

43 i‡–!
fûe
 ) {

44 
	`Ârötf
(
°dîr
, "U«bÀÅÿ›í %s\n", 
¨gv
[1]);

48  
	`fgës
(
buf„r
, (buf„r), 
fûe
) ) {

50 
size_t
 
Àn
;

51 
ucs4
 = 
	`SDL_ic⁄v_°rög
("UCS-4", "UTF-8", 
buf„r
, 
	`SDL_°æí
(buffer)+1);

52 
Àn
 = (
	`widñí
(
ucs4
)+1)*4;

53  
i
 = 0; i < 
	`SDL_¨øysize
(
f‹m©s
); ++i ) {

54 
ã°
[0] = 
	`SDL_ic⁄v_°rög
(
f‹m©s
[
i
], "UCS-4", 
ucs4
, 
Àn
);

55 
ã°
[1] = 
	`SDL_ic⁄v_°rög
("UCS-4", 
f‹m©s
[
i
],Åe°[0], 
Àn
);

56 i‡–!
ã°
[1] || 
	`SDL_memcmp
—e°[1], 
ucs4
, 
Àn
) != 0 ) {

57 
	`Ârötf
(
°dîr
, "FAIL: %s\n", 
f‹m©s
[
i
]);

58 ++
îr‹s
;

60 i‡–
ã°
[0] ) {

61 
	`SDL_‰ì
(
ã°
[0]);

63 i‡–
ã°
[1] ) {

64 
	`SDL_‰ì
(
ã°
[1]);

67 
ã°
[0] = 
	`SDL_ic⁄v_°rög
("UTF-8", "UCS-4", 
ucs4
, 
Àn
);

68 
	`SDL_‰ì
(
ucs4
);

69 
	`Âuts
(
ã°
[0], 
°dout
);

70 
	`SDL_‰ì
(
ã°
[0]);

72  (
îr‹s
 ?Érrors + 1 : 0);

73 
	}
}

	@SDL-win/test/testjoystick.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

8 
	~"SDL.h
"

10 
	#SCREEN_WIDTH
 640

	)

11 
	#SCREEN_HEIGHT
 480

	)

13 
	$W©chJoy°ick
(
SDL_Joy°ick
 *
joy°ick
)

15 
SDL_SurÁ˚
 *
s¸ìn
;

16 c⁄° *
«me
;

17 
i
, 
d⁄e
;

18 
SDL_Evít
 
evít
;

19 
x
, 
y
, 
døw
;

20 
SDL_Re˘
 
axis_¨ó
[2];

23 
s¸ìn
 = 
	`SDL_SëVideoMode
(
SCREEN_WIDTH
, 
SCREEN_HEIGHT
, 16, 0);

24 i‡–
s¸ìn
 =
NULL
 ) {

25 
	`Ârötf
(
°dîr
, "Couldn'à£àvideÿmode: %s\n",
	`SDL_GëEº‹
());

30 
«me
 = 
	`SDL_Joy°ickName
(
	`SDL_Joy°ickIndex
(
joy°ick
));

31 
	`¥ötf
("W©chög joy°ick %d: (%s)\n", 
	`SDL_Joy°ickIndex
(
joy°ick
),

32 
«me
 ?Çame : "Unknown Joystick");

33 
	`¥ötf
("Joystick has %dáxes, %d hats, %d balls,ánd %d buttons\n",

34 
	`SDL_Joy°ickNumAxes
(
joy°ick
), 
	`SDL_Joy°ickNumH©s
(joystick),

35 
	`SDL_Joy°ickNumBÆls
(
joy°ick
),
	`SDL_Joy°ickNumBuâ⁄s
(joystick));

38 
	`mem£t
(
axis_¨ó
, 0, (áxis_area));

39 
døw
 = 0;

42 
d⁄e
 = 0;

43  ! 
d⁄e
 ) {

44  
	`SDL_PﬁlEvít
(&
evít
) ) {

45 
evít
.
ty≥
) {

46 
SDL_JOYAXISMOTION
:

47 
	`¥ötf
("Joystick %dáxis %d value: %d\n",

48 
evít
.
jaxis
.
which
,

49 
evít
.
jaxis
.
axis
,

50 
evít
.
jaxis
.
vÆue
);

52 
SDL_JOYHATMOTION
:

53 
	`¥ötf
("Joystick %d hat %d value:",

54 
evít
.
jh©
.
which
,

55 
evít
.
jh©
.
h©
);

56 i‡–
evít
.
jh©
.
vÆue
 =
SDL_HAT_CENTERED
 )

57 
	`¥ötf
(" centered");

58 i‡–
evít
.
jh©
.
vÆue
 & 
SDL_HAT_UP
 )

59 
	`¥ötf
(" up");

60 i‡–
evít
.
jh©
.
vÆue
 & 
SDL_HAT_RIGHT
 )

61 
	`¥ötf
("Ñight");

62 i‡–
evít
.
jh©
.
vÆue
 & 
SDL_HAT_DOWN
 )

63 
	`¥ötf
(" down");

64 i‡–
evít
.
jh©
.
vÆue
 & 
SDL_HAT_LEFT
 )

65 
	`¥ötf
("Üeft");

66 
	`¥ötf
("\n");

68 
SDL_JOYBALLMOTION
:

69 
	`¥ötf
("Joystick %d ball %d delta: (%d,%d)\n",

70 
evít
.
jbÆl
.
which
,

71 
evít
.
jbÆl
.
bÆl
,

72 
evít
.
jbÆl
.
xªl
,

73 
evít
.
jbÆl
.
yªl
);

75 
SDL_JOYBUTTONDOWN
:

76 
	`¥ötf
("Joystick %d button %d down\n",

77 
evít
.
jbuâ⁄
.
which
,

78 
evít
.
jbuâ⁄
.
buâ⁄
);

80 
SDL_JOYBUTTONUP
:

81 
	`¥ötf
("Joystick %d button %d up\n",

82 
evít
.
jbuâ⁄
.
which
,

83 
evít
.
jbuâ⁄
.
buâ⁄
);

85 
SDL_KEYDOWN
:

86 i‡–
evít
.
key
.
keysym
.
sym
 !
SDLK_ESCAPE
 ) {

90 
SDL_QUIT
:

91 
d⁄e
 = 1;

98  
i
=0; i<
	`SDL_Joy°ickNumBuâ⁄s
(
joy°ick
); ++i ) {

99 
SDL_Re˘
 
¨ó
;

101 
¨ó
.
x
 = 
i
*34;

102 
¨ó
.
y
 = 
SCREEN_HEIGHT
-34;

103 
¨ó
.
w
 = 32;

104 
¨ó
.
h
 = 32;

105 i‡(
	`SDL_Joy°ickGëBuâ⁄
(
joy°ick
, 
i
Ë=
SDL_PRESSED
) {

106 
	`SDL_FûlRe˘
(
s¸ìn
, &
¨ó
, 0xFFFF);

108 
	`SDL_FûlRe˘
(
s¸ìn
, &
¨ó
, 0x0000);

110 
	`SDL_Upd©eRe˘s
(
s¸ìn
, 1, &
¨ó
);

114 
	`SDL_FûlRe˘
(
s¸ìn
, &
axis_¨ó
[
døw
], 0x0000);

117 
døw
 = !draw;

118 
x
 = ((()
	`SDL_Joy°ickGëAxis
(
joy°ick
, 0))+32768);

119 
x
 *
SCREEN_WIDTH
;

120 
x
 /= 65535;

121 i‡–
x
 < 0 ) {

122 
x
 = 0;

124 i‡–
x
 > (
SCREEN_WIDTH
-16) ) {

125 
x
 = 
SCREEN_WIDTH
-16;

127 
y
 = ((()
	`SDL_Joy°ickGëAxis
(
joy°ick
, 1))+32768);

128 
y
 *
SCREEN_HEIGHT
;

129 
y
 /= 65535;

130 i‡–
y
 < 0 ) {

131 
y
 = 0;

133 i‡–
y
 > (
SCREEN_HEIGHT
-16) ) {

134 
y
 = 
SCREEN_HEIGHT
-16;

136 
axis_¨ó
[
døw
].
x
 = (
Söt16
)x;

137 
axis_¨ó
[
døw
].
y
 = (
Söt16
)y;

138 
axis_¨ó
[
døw
].
w
 = 16;

139 
axis_¨ó
[
døw
].
h
 = 16;

140 
	`SDL_FûlRe˘
(
s¸ìn
, &
axis_¨ó
[
døw
], 0xFFFF);

142 
	`SDL_Upd©eRe˘s
(
s¸ìn
, 2, 
axis_¨ó
);

144 
	}
}

146 
	$maö
(
¨gc
, *
¨gv
[])

148 c⁄° *
«me
;

149 
i
;

150 
SDL_Joy°ick
 *
joy°ick
;

153 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
|
SDL_INIT_JOYSTICK
) < 0 ) {

154 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

155 
	`exô
(1);

159 
	`¥ötf
("Thîê¨ê%d joy°ick†©èched\n", 
	`SDL_NumJoy°icks
());

160  
i
=0; i<
	`SDL_NumJoy°icks
(); ++i ) {

161 
«me
 = 
	`SDL_Joy°ickName
(
i
);

162 
	`¥ötf
("Joy°ick %d: %s\n",
i
,
«me
 ?Çame : "Unknown Joystick");

163 
joy°ick
 = 
	`SDL_Joy°ickO≥n
(
i
);

164 i‡(
joy°ick
 =
NULL
) {

165 
	`Ârötf
(
°dîr
, "SDL_Joy°ickO≥n(%dËÁûed: %s\n", 
i
, 
	`SDL_GëEº‹
());

167 
	`¥ötf
("áxes: %d\n", 
	`SDL_Joy°ickNumAxes
(
joy°ick
));

168 
	`¥ötf
(" bÆls: %d\n", 
	`SDL_Joy°ickNumBÆls
(
joy°ick
));

169 
	`¥ötf
(" h©s: %d\n", 
	`SDL_Joy°ickNumH©s
(
joy°ick
));

170 
	`¥ötf
(" buâ⁄s: %d\n", 
	`SDL_Joy°ickNumBuâ⁄s
(
joy°ick
));

171 
	`SDL_Joy°ickClo£
(
joy°ick
);

175 i‡–
¨gv
[1] ) {

176 
joy°ick
 = 
	`SDL_Joy°ickO≥n
(
	`©oi
(
¨gv
[1]));

177 i‡–
joy°ick
 =
NULL
 ) {

178 
	`¥ötf
("Couldn'à›í joy°ick %d: %s\n", 
	`©oi
(
¨gv
[1]),

179 
	`SDL_GëEº‹
());

181 
	`W©chJoy°ick
(
joy°ick
);

182 
	`SDL_Joy°ickClo£
(
joy°ick
);

185 
	`SDL_QuôSubSy°em
(
SDL_INIT_VIDEO
|
SDL_INIT_JOYSTICK
);

188 
	}
}

	@SDL-win/test/testkeys.c

4 
	~<°dio.h
>

5 
	~<˘y≥.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

9 
	~"SDL.h
"

11 
	$maö
(
¨gc
, *
¨gv
[])

13 
SDLKey
 
key
;

15 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 ) {

16 
	`Ârötf
(
°dîr
, "Couldn't initialize SDL: %s\n",

17 
	`SDL_GëEº‹
());

18 
	`exô
(1);

20  
key
=
SDLK_FIRST
; key<
SDLK_LAST
; ++key ) {

21 
	`¥ötf
("Key #%d, \"%s\"\n", 
key
, 
	`SDL_GëKeyName
(key));

23 
	`SDL_Quô
();

25 
	}
}

	@SDL-win/test/testloadso.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

8 
	~"SDL.h
"

10 (*
	t‚ty≥
)(const *);

12 
	$maö
(
¨gc
, *
¨gv
[])

14 
ªtvÆ
 = 0;

15 
hñlo
 = 0;

16 c⁄° *
lib«me
 = 
NULL
;

17 c⁄° *
sym«me
 = 
NULL
;

18 *
lib
 = 
NULL
;

19 
‚ty≥
 
‚
 = 
NULL
;

21 i‡(
¨gc
 != 3) {

22 c⁄° *
≠p
 = 
¨gv
[0];

23 
	`Ârötf
(
°dîr
, "USAGE: %†<libøry> <fun˘i⁄«me>\n", 
≠p
);

24 
	`Ârötf
(
°dîr
, " %†--hñlÿ<lib wôhÖuts()>\n", 
≠p
);

29 i‡–
	`SDL_Inô
(0) < 0 ) {

30 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

34 i‡(
	`°rcmp
(
¨gv
[1], "--hello") == 0) {

35 
hñlo
 = 1;

36 
lib«me
 = 
¨gv
[2];

37 
sym«me
 = "puts";

39 
lib«me
 = 
¨gv
[1];

40 
sym«me
 = 
¨gv
[2];

43 
lib
 = 
	`SDL_LﬂdObje˘
(
lib«me
);

44 i‡(
lib
 =
NULL
) {

45 
	`Ârötf
(
°dîr
, "SDL_LoadObject('%s') failed: %s\n",

46 
lib«me
, 
	`SDL_GëEº‹
());

47 
ªtvÆ
 = 3;

49 
‚
 = (
‚ty≥
Ë
	`SDL_LﬂdFun˘i⁄
(
lib
, 
sym«me
);

50 i‡(
‚
 =
NULL
) {

51 
	`Ârötf
(
°dîr
, "SDL_LoadFunction('%s') failed: %s\n",

52 
sym«me
, 
	`SDL_GëEº‹
());

53 
ªtvÆ
 = 4;

55 
	`¥ötf
("Found %†ö %†© %p\n", 
sym«me
, 
lib«me
, 
‚
);

56 i‡(
hñlo
) {

57 
	`¥ötf
("Calling function...\n");

58 
	`fÊush
(
°dout
);

59 
	`‚
(" HELLO, WORLD!\n");

60 
	`¥ötf
("...apparently, we survived. :)\n");

61 
	`¥ötf
("UnloadingÜibrary...\n");

62 
	`fÊush
(
°dout
);

65 
	`SDL_U∆ﬂdObje˘
(
lib
);

67 
	`SDL_Quô
();

69 
	}
}

	@SDL-win/test/testlock.c

6 
	~<sig«l.h
>

7 
	~<°dio.h
>

9 
	~"SDL.h
"

10 
	~"SDL_muãx.h
"

11 
	~"SDL_thªad.h
"

13 
SDL_muãx
 *
	gmuãx
 = 
NULL
;

14 
Uöt32
 
	gmaöthªad
;

15 
SDL_Thªad
 *
	gthªads
[6];

16 vﬁ©ûê
	gdŸîmö©e
 = 0;

22 
	$SDL_Quô_Wøµî
()

24 
	`SDL_Quô
();

25 
	}
}

27 
	$¥ötid
()

29 
	`¥ötf
("Pro˚s†%u:Éxôög\n", 
	`SDL_ThªadID
());

30 
	}
}

32 
	$ãrmö©e
(
sig
)

34 
	`sig«l
(
SIGINT
, 
ãrmö©e
);

35 
dŸîmö©e
 = 1;

36 
	}
}

37 
	$˛o£muãx
(
sig
)

39 
Uöt32
 
id
 = 
	`SDL_ThªadID
();

40 
i
;

41 
	`¥ötf
("Pro˚s†%u: CÀ™ög up...\n", 
id
 =
maöthªad
 ? 0 : id);

42  
i
=0; i<6; ++i )

43 
	`SDL_KûlThªad
(
thªads
[
i
]);

44 
	`SDL_De°royMuãx
(
muãx
);

45 
	`exô
(
sig
);

46 
	}
}

47 
SDLCALL
 
	$Run
(*
d©a
)

49 i‡–
	`SDL_ThªadID
(Ë=
maöthªad
 )

50 
	`sig«l
(
SIGTERM
, 
˛o£muãx
);

52 
	`¥ötf
("Pro˚s†%uÑódyÅÿw‹k\n", 
	`SDL_ThªadID
());

53 i‡–
	`SDL_muãxP
(
muãx
) < 0 ) {

54 
	`Ârötf
(
°dîr
, "Couldn'àlock muãx: %s", 
	`SDL_GëEº‹
());

55 
	`exô
(1);

57 
	`¥ötf
("Pro˚s†%u, w‹kög!\n", 
	`SDL_ThªadID
());

58 
	`SDL_Dñay
(1*1000);

59 
	`¥ötf
("Pro˚s†%u, d⁄e!\n", 
	`SDL_ThªadID
());

60 i‡–
	`SDL_muãxV
(
muãx
) < 0 ) {

61 
	`Ârötf
(
°dîr
, "Couldn'àu∆ock muãx: %s", 
	`SDL_GëEº‹
());

62 
	`exô
(1);

65 
	`SDL_Dñay
(10);

66 i‡(
	`SDL_ThªadID
(Ë=
maöthªad
 && 
dŸîmö©e
) {

67 
	`¥ötf
("Pro˚s†%u:Ñaisög SIGTERM\n", 
	`SDL_ThªadID
());

68 
	`øi£
(
SIGTERM
);

72 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

76 
i
;

77 
max¥oc
 = 6;

80 i‡–
	`SDL_Inô
(0) < 0 ) {

81 
	`Ârötf
(
°dîr
, "%s\n", 
	`SDL_GëEº‹
());

82 
	`exô
(1);

84 
	`©exô
(
SDL_Quô_Wøµî
);

86 i‡–(
muãx
=
	`SDL_Cª©eMuãx
()Ë=
NULL
 ) {

87 
	`Ârötf
(
°dîr
, "Couldn'à¸óã muãx: %s\n", 
	`SDL_GëEº‹
());

88 
	`exô
(1);

91 
maöthªad
 = 
	`SDL_ThªadID
();

92 
	`¥ötf
("MaöÅhªad: %u\n", 
maöthªad
);

93 
	`©exô
(
¥ötid
);

94  
i
=0; i<
max¥oc
; ++i ) {

95 i‡–(
thªads
[
i
]=
	`SDL_Cª©eThªad
(
Run
, 
NULL
)) == NULL )

96 
	`Ârötf
(
°dîr
, "Couldn't createÅhread!\n");

98 
	`sig«l
(
SIGINT
, 
ãrmö©e
);

99 
	`Run
(
NULL
);

102 
	}
}

	@SDL-win/test/testoverlay.c

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<°rög.h
>

8 
	#BENCHMARK_SDL


	)

10 
	#NOTICE
(
X
Ë
	`¥ötf
("%s", X);

	)

12 
	#WINDOW_WIDTH
 640

	)

13 
	#WINDOW_HEIGHT
 480

	)

15 
	~"SDL.h
"

17 
SDL_SurÁ˚
 *
	gs¸ìn
, *
	gpic
;

18 
SDL_Ovîœy
 *
	govîœy
;

19 
	gsˇÀ
;

20 
	gm⁄ochrome
;

21 
	glumö™˚
;

22 
	gw
, 
	gh
;

25 
	$quô
(
rc
)

27 
	`SDL_Quô
();

28 
	`exô
(
rc
);

29 
	}
}

35 
	$RGBtoYUV
(
Uöt8
 *
rgb
, *
yuv
, 
m⁄ochrome
, 
lumö™˚
)

37 i‡(
m⁄ochrome
)

40 
yuv
[0] = 0.299*
rgb
[0] + 0.587*rgb[1] + 0.114*rgb[2];

41 
yuv
[1] = 128;

42 
yuv
[2] = 128;

44 
yuv
[0] = (0.257 * 
rgb
[0]) + (0.504 *Ñgb[1]) + (0.098 *Ñgb[2]) + 16;

45 
yuv
[1] = 128;

46 
yuv
[2] = 128;

52 
yuv
[0] = 0.299*
rgb
[0] + 0.587*rgb[1] + 0.114*rgb[2];

53 
yuv
[1] = (
rgb
[2]-yuv[0])*0.565 + 128;

54 
yuv
[2] = (
rgb
[0]-yuv[0])*0.713 + 128;

56 
yuv
[0] = (0.257 * 
rgb
[0]) + (0.504 *Ñgb[1]) + (0.098 *Ñgb[2]) + 16;

57 
yuv
[1] = 128 - (0.148 * 
rgb
[0]) - (0.291 *Ñgb[1]) + (0.439 *Ñgb[2]);

58 
yuv
[2] = 128 + (0.439 * 
rgb
[0]) - (0.368 *Ñgb[1]) - (0.071 *Ñgb[2]);

62 i‡(
lumö™˚
!=100)

64 
yuv
[0]=yuv[0]*
lumö™˚
/100;

65 i‡(
yuv
[0]>255)

66 
yuv
[0]=255;

79 
	}
}

81 
	$C⁄vîtRGBtoYV12
(
SDL_SurÁ˚
 *
s
, 
SDL_Ovîœy
 *
o
, 
m⁄ochrome
, 
lumö™˚
)

83 
x
,
y
;

84 
yuv
[3];

85 
Uöt8
 *
p
,*
›
[3];

87 
	`SDL_LockSurÁ˚
(
s
);

88 
	`SDL_LockYUVOvîœy
(
o
);

98 
y
=0; y<
s
->
h
 && y<
o
->h; y++)

100 
p
=((
Uöt8
 *Ë
s
->
pixñs
)+s->
pôch
*
y
;

101 
›
[0]=
o
->
pixñs
[0]+o->
pôches
[0]*
y
;

102 
›
[1]=
o
->
pixñs
[1]+o->
pôches
[1]*(
y
/2);

103 
›
[2]=
o
->
pixñs
[2]+o->
pôches
[2]*(
y
/2);

104 
x
=0; x<
s
->
w
 && x<
o
->w; x++)

106 
	`RGBtoYUV
(
p
, 
yuv
, 
m⁄ochrome
, 
lumö™˚
);

107 *(
›
[0]++)=
yuv
[0];

108 if(
x
%2==0 && 
y
%2==0)

110 *(
›
[1]++)=
yuv
[2];

111 *(
›
[2]++)=
yuv
[1];

113 
p
+=
s
->
f‹m©
->
ByãsPîPixñ
;

117 
	`SDL_U∆ockYUVOvîœy
(
o
);

118 
	`SDL_U∆ockSurÁ˚
(
s
);

119 
	}
}

121 
	$C⁄vîtRGBtoIYUV
(
SDL_SurÁ˚
 *
s
, 
SDL_Ovîœy
 *
o
, 
m⁄ochrome
, 
lumö™˚
)

123 
x
,
y
;

124 
yuv
[3];

125 
Uöt8
 *
p
,*
›
[3];

127 
	`SDL_LockSurÁ˚
(
s
);

128 
	`SDL_LockYUVOvîœy
(
o
);

138 
y
=0; y<
s
->
h
 && y<
o
->h; y++)

140 
p
=((
Uöt8
 *Ë
s
->
pixñs
)+s->
pôch
*
y
;

141 
›
[0]=
o
->
pixñs
[0]+o->
pôches
[0]*
y
;

142 
›
[1]=
o
->
pixñs
[1]+o->
pôches
[1]*(
y
/2);

143 
›
[2]=
o
->
pixñs
[2]+o->
pôches
[2]*(
y
/2);

144 
x
=0; x<
s
->
w
 && x<
o
->w; x++)

146 
	`RGBtoYUV
(
p
,
yuv
, 
m⁄ochrome
, 
lumö™˚
);

147 *(
›
[0]++)=
yuv
[0];

148 if(
x
%2==0 && 
y
%2==0)

150 *(
›
[1]++)=
yuv
[1];

151 *(
›
[2]++)=
yuv
[2];

153 
p
+=
s
->
f‹m©
->
ByãsPîPixñ
;

157 
	`SDL_U∆ockYUVOvîœy
(
o
);

158 
	`SDL_U∆ockSurÁ˚
(
s
);

159 
	}
}

161 
	$C⁄vîtRGBtoUYVY
(
SDL_SurÁ˚
 *
s
, 
SDL_Ovîœy
 *
o
, 
m⁄ochrome
, 
lumö™˚
)

163 
x
,
y
;

164 
yuv
[3];

165 
Uöt8
 *
p
,*
›
;

167 
	`SDL_LockSurÁ˚
(
s
);

168 
	`SDL_LockYUVOvîœy
(
o
);

170 
y
=0; y<
s
->
h
 && y<
o
->h; y++)

172 
p
=((
Uöt8
 *Ë
s
->
pixñs
)+s->
pôch
*
y
;

173 
›
=
o
->
pixñs
[0]+o->
pôches
[0]*
y
;

174 
x
=0; x<
s
->
w
 && x<
o
->w; x++)

176 
	`RGBtoYUV
(
p
, 
yuv
, 
m⁄ochrome
, 
lumö™˚
);

177 if(
x
%2==0)

179 *(
›
++)=
yuv
[1];

180 *(
›
++)=
yuv
[0];

181 *(
›
++)=
yuv
[2];

184 *(
›
++)=
yuv
[0];

186 
p
+=
s
->
f‹m©
->
ByãsPîPixñ
;

190 
	`SDL_U∆ockYUVOvîœy
(
o
);

191 
	`SDL_U∆ockSurÁ˚
(
s
);

192 
	}
}

194 
	$C⁄vîtRGBtoYVYU
(
SDL_SurÁ˚
 *
s
, 
SDL_Ovîœy
 *
o
, 
m⁄ochrome
, 
lumö™˚
)

196 
x
,
y
;

197 
yuv
[3];

198 
Uöt8
 *
p
,*
›
;

200 
	`SDL_LockSurÁ˚
(
s
);

201 
	`SDL_LockYUVOvîœy
(
o
);

203 
y
=0; y<
s
->
h
 && y<
o
->h; y++)

205 
p
=((
Uöt8
 *Ë
s
->
pixñs
)+s->
pôch
*
y
;

206 
›
=
o
->
pixñs
[0]+o->
pôches
[0]*
y
;

207 
x
=0; x<
s
->
w
 && x<
o
->w; x++)

209 
	`RGBtoYUV
(
p
,
yuv
, 
m⁄ochrome
, 
lumö™˚
);

210 if(
x
%2==0)

212 *(
›
++)=
yuv
[0];

213 *(
›
++)=
yuv
[2];

214 
›
[1]=
yuv
[1];

218 *
›
=
yuv
[0];

219 
›
+=2;

222 
p
+=
s
->
f‹m©
->
ByãsPîPixñ
;

226 
	`SDL_U∆ockYUVOvîœy
(
o
);

227 
	`SDL_U∆ockSurÁ˚
(
s
);

228 
	}
}

230 
	$C⁄vîtRGBtoYUY2
(
SDL_SurÁ˚
 *
s
, 
SDL_Ovîœy
 *
o
, 
m⁄ochrome
, 
lumö™˚
)

232 
x
,
y
;

233 
yuv
[3];

234 
Uöt8
 *
p
,*
›
;

236 
	`SDL_LockSurÁ˚
(
s
);

237 
	`SDL_LockYUVOvîœy
(
o
);

239 
y
=0; y<
s
->
h
 && y<
o
->h; y++)

241 
p
=((
Uöt8
 *Ë
s
->
pixñs
)+s->
pôch
*
y
;

242 
›
=
o
->
pixñs
[0]+o->
pôches
[0]*
y
;

243 
x
=0; x<
s
->
w
 && x<
o
->w; x++)

245 
	`RGBtoYUV
(
p
,
yuv
, 
m⁄ochrome
, 
lumö™˚
);

246 if(
x
%2==0)

248 *(
›
++)=
yuv
[0];

249 *(
›
++)=
yuv
[1];

250 
›
[1]=
yuv
[2];

254 *
›
=
yuv
[0];

255 
›
+=2;

258 
p
+=
s
->
f‹m©
->
ByãsPîPixñ
;

262 
	`SDL_U∆ockYUVOvîœy
(
o
);

263 
	`SDL_U∆ockSurÁ˚
(
s
);

264 
	}
}

266 
	$Døw
()

268 
SDL_Re˘
 
ª˘
;

269 
i
;

270 
di•
;

272 if(!
sˇÀ
)

274 
ª˘
.
w
=
ovîœy
->w;

275 
ª˘
.
h
=
ovîœy
->h;

276 
i
=0; i<
h
-
ª˘
.h && i<
w
-rect.w; i++)

278 
ª˘
.
x
=
i
;

279 
ª˘
.
y
=
i
;

280 
	`SDL_Di•œyYUVOvîœy
(
ovîœy
,&
ª˘
);

285 
ª˘
.
w
=
ovîœy
->w/2;

286 
ª˘
.
h
=
ovîœy
->h/2;

287 
ª˘
.
x
=(
w
-rect.w)/2;

288 
ª˘
.
y
=(
h
-rect.h)/2;

289 
di•
=
ª˘
.
y
-1;

290 
i
=0; i<
di•
; i++)

292 
ª˘
.
w
+=2;

293 
ª˘
.
h
+=2;

294 
ª˘
.
x
--;

295 
ª˘
.
y
--;

296 
	`SDL_Di•œyYUVOvîœy
(
ovîœy
,&
ª˘
);

299 
	`¥ötf
("Di•œyed %dÅimes.\n",
i
);

300 
	}
}

302 
	$PrötUßge
(*
¨gv0
)

304 
	`Ârötf
(
°dîr
, "Ußge: %†[¨g] [¨g] [¨g] ...\n", 
¨gv0
);

305 
	`Ârötf
(
°dîr
, "Where 'arg' is one of:\n");

306 
	`Ârötf
(
°dîr
, " -delay <seconds>\n");

307 
	`Ârötf
(
°dîr
, " -width <pixels>\n");

308 
	`Ârötf
(
°dîr
, " -height <pixels>\n");

309 
	`Ârötf
(
°dîr
, " -bpp <bits>\n");

310 
	`Ârötf
(
°dîr
, " -format <fmt> (one ofÅhe: YV12, IYUV, YUY2, UYVY, YVYU)\n");

311 
	`Ârötf
(
°dîr
, " -hw\n");

312 
	`Ârötf
(
°dîr
, " -flip\n");

313 
	`Ârötf
(
°dîr
, " -scale (test scaling features, from 50%% upto window size)\n");

314 
	`Ârötf
(
°dîr
, " -mono (use monochromatic RGB2YUV conversion)\n");

315 
	`Ârötf
(
°dîr
, " -lum <perc> (useÜuminance correction during RGB2YUV conversion,\n");

316 
	`Ârötf
(
°dîr
, " from 0%%Åo unlimited,Çormal is 100%%)\n");

317 
	`Ârötf
(
°dîr
, " -help (showsÅhis help)\n");

318 
	`Ârötf
(
°dîr
, " -fullscreen (test overlay in fullscreen mode)\n");

319 
	}
}

321 
	$maö
(
¨gc
, **
¨gv
)

323 *
¨gv0
 = 
¨gv
[0];

324 
Êù
;

325 
dñay
;

326 
desúed_bµ
;

327 
Uöt32
 
video_Êags
, 
ovîœy_f‹m©
;

328 *
bmpfûe
;

329 #ifde‡
BENCHMARK_SDL


330 
Uöt32
 
thí
, 
now
;

332 
i
;

335 
Êù
 = 0;

336 
sˇÀ
=0;

337 
m⁄ochrome
=0;

338 
lumö™˚
=100;

339 
dñay
 = 1;

340 
w
 = 
WINDOW_WIDTH
;

341 
h
 = 
WINDOW_HEIGHT
;

342 
desúed_bµ
 = 0;

343 
video_Êags
 = 0;

344 
ovîœy_f‹m©
 = 
SDL_YV12_OVERLAY
;

346  
¨gc
 > 1 ) {

347 i‡–
	`°rcmp
(
¨gv
[1], "-delay") == 0 ) {

348 i‡–
¨gv
[2] ) {

349 
dñay
 = 
	`©oi
(
¨gv
[2]);

350 
¨gv
 += 2;

351 
¨gc
 -= 2;

353 
	`Ârötf
(
°dîr
,

358 i‡–
	`°rcmp
(
¨gv
[1], "-width") == 0 ) {

359 i‡–
¨gv
[2] && ((
w
 = 
	`©oi
(argv[2])) > 0) ) {

360 
¨gv
 += 2;

361 
¨gc
 -= 2;

363 
	`Ârötf
(
°dîr
,

368 i‡–
	`°rcmp
(
¨gv
[1], "-height") == 0 ) {

369 i‡–
¨gv
[2] && ((
h
 = 
	`©oi
(argv[2])) > 0) ) {

370 
¨gv
 += 2;

371 
¨gc
 -= 2;

373 
	`Ârötf
(
°dîr
,

378 i‡–
	`°rcmp
(
¨gv
[1], "-bpp") == 0 ) {

379 i‡–
¨gv
[2] ) {

380 
desúed_bµ
 = 
	`©oi
(
¨gv
[2]);

381 
¨gv
 += 2;

382 
¨gc
 -= 2;

384 
	`Ârötf
(
°dîr
,

389 i‡–
	`°rcmp
(
¨gv
[1], "-lum") == 0 ) {

390 i‡–
¨gv
[2] ) {

391 
lumö™˚
 = 
	`©oi
(
¨gv
[2]);

392 
¨gv
 += 2;

393 
¨gc
 -= 2;

395 
	`Ârötf
(
°dîr
,

400 i‡–
	`°rcmp
(
¨gv
[1], "-format") == 0 ) {

401 i‡–
¨gv
[2] ) {

402 if(!
	`°rcmp
(
¨gv
[2],"YV12"))

403 
ovîœy_f‹m©
 = 
SDL_YV12_OVERLAY
;

404 if(!
	`°rcmp
(
¨gv
[2],"IYUV"))

405 
ovîœy_f‹m©
 = 
SDL_IYUV_OVERLAY
;

406 if(!
	`°rcmp
(
¨gv
[2],"YUY2"))

407 
ovîœy_f‹m©
 = 
SDL_YUY2_OVERLAY
;

408 if(!
	`°rcmp
(
¨gv
[2],"UYVY"))

409 
ovîœy_f‹m©
 = 
SDL_UYVY_OVERLAY
;

410 if(!
	`°rcmp
(
¨gv
[2],"YVYU"))

411 
ovîœy_f‹m©
 = 
SDL_YVYU_OVERLAY
;

414 
	`Ârötf
(
°dîr
, "Thê-f‹m© o±i⁄ %†i†nŸÑecognized\n",
¨gv
[2]);

417 
¨gv
 += 2;

418 
¨gc
 -= 2;

420 
	`Ârötf
(
°dîr
,

425 i‡–
	`°rcmp
(
¨gv
[1], "-hw") == 0 ) {

426 
video_Êags
 |
SDL_HWSURFACE
;

427 
¨gv
 += 1;

428 
¨gc
 -= 1;

430 i‡–
	`°rcmp
(
¨gv
[1], "-flip") == 0 ) {

431 
video_Êags
 |
SDL_DOUBLEBUF
;

432 
¨gv
 += 1;

433 
¨gc
 -= 1;

435 i‡–
	`°rcmp
(
¨gv
[1], "-scale") == 0 ) {

436 
sˇÀ
 = 1;

437 
¨gv
 += 1;

438 
¨gc
 -= 1;

440 i‡–
	`°rcmp
(
¨gv
[1], "-mono") == 0 ) {

441 
m⁄ochrome
 = 1;

442 
¨gv
 += 1;

443 
¨gc
 -= 1;

445 i‡(–
	`°rcmp
(
¨gv
[1], "-help") == 0 ) || (strcmp(argv[1], "-h") == 0)) {

446 
	`PrötUßge
(
¨gv0
);

449 i‡–
	`°rcmp
(
¨gv
[1], "-fullscreen") == 0 ) {

450 
video_Êags
 |
SDL_FULLSCREEN
;

451 
¨gv
 += 1;

452 
¨gc
 -= 1;

456 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 ) {

457 
	`Ârötf
(
°dîr
,

458 "Couldn'àöôülizêSDL: %s\n", 
	`SDL_GëEº‹
());

463 
s¸ìn
 = 
	`SDL_SëVideoMode
(
w
, 
h
, 
desúed_bµ
, 
video_Êags
);

464 i‡–
s¸ìn
 =
NULL
 ) {

465 
	`Ârötf
(
°dîr
, "Couldn't set %dx%dx%d video mode: %s\n",

466 
w
, 
h
, 
desúed_bµ
, 
	`SDL_GëEº‹
());

467 
	`quô
(1);

469 
	`¥ötf
("Set%s %dx%dx%d mode\n",

470 
s¸ìn
->
Êags
 & 
SDL_FULLSCREEN
 ? " fullscreen" : "",

471 
s¸ìn
->
w
, s¸ìn->
h
, s¸ìn->
f‹m©
->
BôsPîPixñ
);

472 
	`¥ötf
("(video surfaceÜocated in %s memory)\n",

473 (
s¸ìn
->
Êags
&
SDL_HWSURFACE
) ? "video" : "system");

474 i‡–
s¸ìn
->
Êags
 & 
SDL_DOUBLEBUF
 ) {

475 
	`¥ötf
("Double-bufferingÉnabled\n");

476 
Êù
 = 1;

480 
	`SDL_WM_SëC≠ti⁄
("SDLÅest overlay", "testoverlay");

483 
bmpfûe
=(
¨gv
[1]?argv[1]:"sample.bmp");

484 
pic
 = 
	`SDL_LﬂdBMP
(
bmpfûe
);

485 i‡–
pic
 =
NULL
 ) {

486 
	`Ârötf
(
°dîr
, "Couldn'àlﬂd %s: %s\n", 
bmpfûe
,

487 
	`SDL_GëEº‹
());

488 
	`quô
(1);

493 
SDL_SurÁ˚
 *
√wsurf
;

494 
SDL_PixñF‹m©
 
f‹m©
;

496 
f‹m©
.
∑Àâe
=
NULL
;

497 
f‹m©
.
BôsPîPixñ
=32;

498 
f‹m©
.
ByãsPîPixñ
=4;

499 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


500 
f‹m©
.
Rshi·
=0;

501 
f‹m©
.
Gshi·
=8;

502 
f‹m©
.
Bshi·
=16;

504 
f‹m©
.
Rshi·
=24;

505 
f‹m©
.
Gshi·
=16;

506 
f‹m©
.
Bshi·
=8;

508 
f‹m©
.
Ashi·
=0;

509 
f‹m©
.
Rmask
=0xff<<f‹m©.
Rshi·
;

510 
f‹m©
.
Gmask
=0xff<<f‹m©.
Gshi·
;

511 
f‹m©
.
Bmask
=0xff<<f‹m©.
Bshi·
;

512 
f‹m©
.
Amask
=0;

513 
f‹m©
.
Rloss
=0;

514 
f‹m©
.
Gloss
=0;

515 
f‹m©
.
Bloss
=0;

516 
f‹m©
.
Aloss
=8;

517 
f‹m©
.
cﬁ‹key
=0;

518 
f‹m©
.
Æpha
=0;

520 
√wsurf
=
	`SDL_C⁄vîtSurÁ˚
(
pic
, &
f‹m©
, 
SDL_SWSURFACE
);

521 if(!
√wsurf
)

523 
	`Ârötf
(
°dîr
, "Couldn't convertÖictureÅo 32bits RGB: %s\n",

524 
	`SDL_GëEº‹
());

525 
	`quô
(1);

527 
	`SDL_FªeSurÁ˚
(
pic
);

528 
pic
=
√wsurf
;

532 
ovîœy
 = 
	`SDL_Cª©eYUVOvîœy
(
pic
->
w
,Öic->
h
, 
ovîœy_f‹m©
, 
s¸ìn
);

533 i‡–
ovîœy
 =
NULL
 ) {

534 
	`Ârötf
(
°dîr
, "Couldn'à¸óã ovîœy: %s\n", 
	`SDL_GëEº‹
());

535 
	`quô
(1);

537 
	`¥ötf
("Cª©ed %dx%dx%d %†%†ovîœy\n",
ovîœy
->
w
,ovîœy->
h
,ovîœy->
∂™es
,

538 
ovîœy
->
hw_ovîœy
?"hardware":"software",

539 
ovîœy
->
f‹m©
==
SDL_YV12_OVERLAY
?"YV12":

540 
ovîœy
->
f‹m©
==
SDL_IYUV_OVERLAY
?"IYUV":

541 
ovîœy
->
f‹m©
==
SDL_YUY2_OVERLAY
?"YUY2":

542 
ovîœy
->
f‹m©
==
SDL_UYVY_OVERLAY
?"UYVY":

543 
ovîœy
->
f‹m©
==
SDL_YVYU_OVERLAY
?"YVYU":

545 
i
=0; i<
ovîœy
->
∂™es
; i++)

547 
	`¥ötf
("Öœ√ %d:Öôch=%d\n", 
i
, 
ovîœy
->
pôches
[i]);

551 #ifde‡
BENCHMARK_SDL


552 
thí
 = 
	`SDL_GëTicks
();

554 
ovîœy
->
f‹m©
)

556 
SDL_YV12_OVERLAY
:

557 
	`C⁄vîtRGBtoYV12
(
pic
,
ovîœy
,
m⁄ochrome
,
lumö™˚
);

559 
SDL_UYVY_OVERLAY
:

560 
	`C⁄vîtRGBtoUYVY
(
pic
,
ovîœy
,
m⁄ochrome
,
lumö™˚
);

562 
SDL_YVYU_OVERLAY
:

563 
	`C⁄vîtRGBtoYVYU
(
pic
,
ovîœy
,
m⁄ochrome
,
lumö™˚
);

565 
SDL_YUY2_OVERLAY
:

566 
	`C⁄vîtRGBtoYUY2
(
pic
,
ovîœy
,
m⁄ochrome
,
lumö™˚
);

568 
SDL_IYUV_OVERLAY
:

569 
	`C⁄vîtRGBtoIYUV
(
pic
,
ovîœy
,
m⁄ochrome
,
lumö™˚
);

572 
	`¥ötf
("cannot convert RGBÖictureÅo obtained YUV format!\n");

573 
	`quô
(1);

576 #ifde‡
BENCHMARK_SDL


577 
now
 = 
	`SDL_GëTicks
();

578 
	`¥ötf
("C⁄vîsi⁄ Time: %d mûli£c⁄ds\n", 
now
-
thí
);

582 #ifde‡
BENCHMARK_SDL


583 
thí
 = 
	`SDL_GëTicks
();

585 
	`Døw
();

586 #ifde‡
BENCHMARK_SDL


587 
now
 = 
	`SDL_GëTicks
();

588 
	`¥ötf
("Time: %d mûli£c⁄ds\n", 
now
-
thí
);

590 
	`SDL_Dñay
(
dñay
*1000);

591 
	`SDL_Quô
();

593 
	}
}

	@SDL-win/test/testoverlay2.c

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<°rög.h
>

12 
	~"SDL.h
"

14 
	#MOOSEPIC_W
 64

	)

15 
	#MOOSEPIC_H
 88

	)

17 
	#MOOSEFRAME_SIZE
 (
MOOSEPIC_W
 * 
MOOSEPIC_H
)

	)

18 
	#MOOSEFRAMES_COUNT
 10

	)

20 
SDL_Cﬁ‹
 
	gMoo£Cﬁ‹s
[84]={

46 
	$quô
(
rc
)

48 
	`SDL_Quô
();

49 
	`exô
(
rc
);

50 
	}
}

58 
	$RGBtoYUV
(
Uöt8
 *
rgb
, *
yuv
, 
m⁄ochrome
, 
lumö™˚
)

60 i‡(
m⁄ochrome
)

63 
yuv
[0] = 0.299*
rgb
[0] + 0.587*rgb[1] + 0.114*rgb[2];

64 
yuv
[1] = 128;

65 
yuv
[2] = 128;

67 
yuv
[0] = (0.257 * 
rgb
[0]) + (0.504 *Ñgb[1]) + (0.098 *Ñgb[2]) + 16;

68 
yuv
[1] = 128;

69 
yuv
[2] = 128;

75 
yuv
[0] = 0.299*
rgb
[0] + 0.587*rgb[1] + 0.114*rgb[2];

76 
yuv
[1] = (
rgb
[2]-yuv[0])*0.565 + 128;

77 
yuv
[2] = (
rgb
[0]-yuv[0])*0.713 + 128;

79 
yuv
[0] = (0.257 * 
rgb
[0]) + (0.504 *Ñgb[1]) + (0.098 *Ñgb[2]) + 16;

80 
yuv
[1] = 128 - (0.148 * 
rgb
[0]) - (0.291 *Ñgb[1]) + (0.439 *Ñgb[2]);

81 
yuv
[2] = 128 + (0.439 * 
rgb
[0]) - (0.368 *Ñgb[1]) - (0.071 *Ñgb[2]);

85 i‡(
lumö™˚
!=100)

87 
yuv
[0]=yuv[0]*
lumö™˚
/100;

88 i‡(
yuv
[0]>255)

89 
yuv
[0]=255;

91 
	}
}

93 
	$C⁄vîtRGBtoYV12
(
SDL_SurÁ˚
 *
s
, 
SDL_Ovîœy
 *
o
, 
m⁄ochrome
, 
lumö™˚
)

95 
x
,
y
;

96 
yuv
[3];

97 
Uöt8
 *
p
,*
›
[3];

99 
	`SDL_LockSurÁ˚
(
s
);

100 
	`SDL_LockYUVOvîœy
(
o
);

103 
y
=0; y<
s
->
h
 && y<
o
->h; y++)

105 
p
=((
Uöt8
 *Ë
s
->
pixñs
)+s->
pôch
*
y
;

106 
›
[0]=
o
->
pixñs
[0]+o->
pôches
[0]*
y
;

107 
›
[1]=
o
->
pixñs
[1]+o->
pôches
[1]*(
y
/2);

108 
›
[2]=
o
->
pixñs
[2]+o->
pôches
[2]*(
y
/2);

109 
x
=0; x<
s
->
w
 && x<
o
->w; x++)

111 
	`RGBtoYUV
(
p
, 
yuv
, 
m⁄ochrome
, 
lumö™˚
);

112 *(
›
[0]++)=
yuv
[0];

113 if(
x
%2==0 && 
y
%2==0)

115 *(
›
[1]++)=
yuv
[2];

116 *(
›
[2]++)=
yuv
[1];

118 
p
+=
s
->
f‹m©
->
ByãsPîPixñ
;

122 
	`SDL_U∆ockYUVOvîœy
(
o
);

123 
	`SDL_U∆ockSurÁ˚
(
s
);

124 
	}
}

126 
	$C⁄vîtRGBtoIYUV
(
SDL_SurÁ˚
 *
s
, 
SDL_Ovîœy
 *
o
, 
m⁄ochrome
, 
lumö™˚
)

128 
x
,
y
;

129 
yuv
[3];

130 
Uöt8
 *
p
,*
›
[3];

132 
	`SDL_LockSurÁ˚
(
s
);

133 
	`SDL_LockYUVOvîœy
(
o
);

136 
y
=0; y<
s
->
h
 && y<
o
->h; y++)

138 
p
=((
Uöt8
 *Ë
s
->
pixñs
)+s->
pôch
*
y
;

139 
›
[0]=
o
->
pixñs
[0]+o->
pôches
[0]*
y
;

140 
›
[1]=
o
->
pixñs
[1]+o->
pôches
[1]*(
y
/2);

141 
›
[2]=
o
->
pixñs
[2]+o->
pôches
[2]*(
y
/2);

142 
x
=0; x<
s
->
w
 && x<
o
->w; x++)

144 
	`RGBtoYUV
(
p
,
yuv
, 
m⁄ochrome
, 
lumö™˚
);

145 *(
›
[0]++)=
yuv
[0];

146 if(
x
%2==0 && 
y
%2==0)

148 *(
›
[1]++)=
yuv
[1];

149 *(
›
[2]++)=
yuv
[2];

151 
p
+=
s
->
f‹m©
->
ByãsPîPixñ
;

155 
	`SDL_U∆ockYUVOvîœy
(
o
);

156 
	`SDL_U∆ockSurÁ˚
(
s
);

157 
	}
}

159 
	$C⁄vîtRGBtoUYVY
(
SDL_SurÁ˚
 *
s
, 
SDL_Ovîœy
 *
o
, 
m⁄ochrome
, 
lumö™˚
)

161 
x
,
y
;

162 
yuv
[3];

163 
Uöt8
 *
p
,*
›
;

165 
	`SDL_LockSurÁ˚
(
s
);

166 
	`SDL_LockYUVOvîœy
(
o
);

168 
y
=0; y<
s
->
h
 && y<
o
->h; y++)

170 
p
=((
Uöt8
 *Ë
s
->
pixñs
)+s->
pôch
*
y
;

171 
›
=
o
->
pixñs
[0]+o->
pôches
[0]*
y
;

172 
x
=0; x<
s
->
w
 && x<
o
->w; x++)

174 
	`RGBtoYUV
(
p
, 
yuv
, 
m⁄ochrome
, 
lumö™˚
);

175 if(
x
%2==0)

177 *(
›
++)=
yuv
[1];

178 *(
›
++)=
yuv
[0];

179 *(
›
++)=
yuv
[2];

182 *(
›
++)=
yuv
[0];

184 
p
+=
s
->
f‹m©
->
ByãsPîPixñ
;

188 
	`SDL_U∆ockYUVOvîœy
(
o
);

189 
	`SDL_U∆ockSurÁ˚
(
s
);

190 
	}
}

192 
	$C⁄vîtRGBtoYVYU
(
SDL_SurÁ˚
 *
s
, 
SDL_Ovîœy
 *
o
, 
m⁄ochrome
, 
lumö™˚
)

194 
x
,
y
;

195 
yuv
[3];

196 
Uöt8
 *
p
,*
›
;

198 
	`SDL_LockSurÁ˚
(
s
);

199 
	`SDL_LockYUVOvîœy
(
o
);

201 
y
=0; y<
s
->
h
 && y<
o
->h; y++)

203 
p
=((
Uöt8
 *Ë
s
->
pixñs
)+s->
pôch
*
y
;

204 
›
=
o
->
pixñs
[0]+o->
pôches
[0]*
y
;

205 
x
=0; x<
s
->
w
 && x<
o
->w; x++)

207 
	`RGBtoYUV
(
p
,
yuv
, 
m⁄ochrome
, 
lumö™˚
);

208 if(
x
%2==0)

210 *(
›
++)=
yuv
[0];

211 *(
›
++)=
yuv
[2];

212 
›
[1]=
yuv
[1];

216 *
›
=
yuv
[0];

217 
›
+=2;

220 
p
+=
s
->
f‹m©
->
ByãsPîPixñ
;

224 
	`SDL_U∆ockYUVOvîœy
(
o
);

225 
	`SDL_U∆ockSurÁ˚
(
s
);

226 
	}
}

228 
	$C⁄vîtRGBtoYUY2
(
SDL_SurÁ˚
 *
s
, 
SDL_Ovîœy
 *
o
, 
m⁄ochrome
, 
lumö™˚
)

230 
x
,
y
;

231 
yuv
[3];

232 
Uöt8
 *
p
,*
›
;

234 
	`SDL_LockSurÁ˚
(
s
);

235 
	`SDL_LockYUVOvîœy
(
o
);

237 
y
=0; y<
s
->
h
 && y<
o
->h; y++)

239 
p
=((
Uöt8
 *Ë
s
->
pixñs
)+s->
pôch
*
y
;

240 
›
=
o
->
pixñs
[0]+o->
pôches
[0]*
y
;

241 
x
=0; x<
s
->
w
 && x<
o
->w; x++)

243 
	`RGBtoYUV
(
p
,
yuv
, 
m⁄ochrome
, 
lumö™˚
);

244 if(
x
%2==0)

246 *(
›
++)=
yuv
[0];

247 *(
›
++)=
yuv
[1];

248 
›
[1]=
yuv
[2];

252 *
›
=
yuv
[0];

253 
›
+=2;

256 
p
+=
s
->
f‹m©
->
ByãsPîPixñ
;

260 
	`SDL_U∆ockYUVOvîœy
(
o
);

261 
	`SDL_U∆ockSurÁ˚
(
s
);

262 
	}
}

264 
	$PrötUßge
(*
¨gv0
)

266 
	`Ârötf
(
°dîr
, "Ußge: %†[¨g] [¨g] [¨g] ...\n", 
¨gv0
);

267 
	`Ârötf
(
°dîr
, "\n");

268 
	`Ârötf
(
°dîr
, "Where 'arg' isány ofÅhe following options:\n");

269 
	`Ârötf
(
°dîr
, "\n");

270 
	`Ârötf
(
°dîr
, " -fps <framesÖer second>\n");

271 
	`Ârötf
(
°dîr
, " -format <fmt> (one ofÅhe: YV12, IYUV, YUY2, UYVY, YVYU)\n");

272 
	`Ârötf
(
°dîr
, " -scale <scale factor> (initial scale ofÅhe overlay)\n");

273 
	`Ârötf
(
°dîr
, " -help (showsÅhis help)\n");

274 
	`Ârötf
(
°dîr
, "\n");

275 
	`Ârötf
(
°dîr
, "Press ESCÅoÉxit, or SPACEÅo freezeÅhe movie whileápplicationÑunning.\n");

276 
	`Ârötf
(
°dîr
, "\n");

277 
	}
}

279 
	$maö
(
¨gc
, **
¨gv
)

281 
Uöt8
* 
RawMoo£D©a
;

282 
SDL_RW›s
* 
h™dÀ
;

283 
SDL_SurÁ˚
* 
s¸ìn
;

284 
SDL_SurÁ˚
* 
Moo£Føme
[
MOOSEFRAMES_COUNT
];

285 
SDL_Ovîœy
* 
ovîœy
;

286 
SDL_Re˘
 
ovîœyª˘
;

287 
SDL_Evít
 
evít
;

288 
Uöt32
 
œ°·ick
;

289 
∑u£d
=0;

290 
ªsized
=0;

291 
i
;

292 
Âs
=12;

293 
Âsdñay
;

294 
ovîœy_f‹m©
=
SDL_YUY2_OVERLAY
;

295 
sˇÀ
=5;

297 i‡(
	`SDL_Inô
(
SDL_INIT_VIDEO
 | 
SDL_INIT_NOPARACHUTE
) < 0)

299 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n", 
	`SDL_GëEº‹
());

303  
¨gc
 > 1 )

305 i‡(
	`°rcmp
(
¨gv
[1], "-fps")== 0)

307 i‡(
¨gv
[2])

309 
Âs
 = 
	`©oi
(
¨gv
[2]);

310 i‡(
Âs
==0)

312 
	`Ârötf
(
°dîr
, "The -fps optionÑequiresánárgument [from 1Åo 1000], default is 12.\n");

313 
	`quô
(10);

315 i‡((
Âs
<0) || (fps>1000))

317 
	`Ârötf
(
°dîr
, "The -fps option must be inÑange from 1Åo 1000, default is 12.\n");

318 
	`quô
(10);

320 
¨gv
 += 2;

321 
¨gc
 -= 2;

325 
	`Ârötf
(
°dîr
, "The -fps optionÑequiresánárgument [from 1Åo 1000], default is 12.\n");

326 
	`quô
(10);

329 i‡(
	`°rcmp
(
¨gv
[1], "-format") == 0)

331 i‡(
¨gv
[2])

333 i‡(!
	`°rcmp
(
¨gv
[2],"YV12"))

334 
ovîœy_f‹m©
 = 
SDL_YV12_OVERLAY
;

335 if(!
	`°rcmp
(
¨gv
[2],"IYUV"))

336 
ovîœy_f‹m©
 = 
SDL_IYUV_OVERLAY
;

337 if(!
	`°rcmp
(
¨gv
[2],"YUY2"))

338 
ovîœy_f‹m©
 = 
SDL_YUY2_OVERLAY
;

339 if(!
	`°rcmp
(
¨gv
[2],"UYVY"))

340 
ovîœy_f‹m©
 = 
SDL_UYVY_OVERLAY
;

341 if(!
	`°rcmp
(
¨gv
[2],"YVYU"))

342 
ovîœy_f‹m©
 = 
SDL_YVYU_OVERLAY
;

345 
	`Ârötf
(
°dîr
, "Thê-f‹m© o±i⁄ %†i†nŸÑecognized, sì hñ∞f‹ info.\n", 
¨gv
[2]);

346 
	`quô
(10);

348 
¨gv
 += 2;

349 
¨gc
 -= 2;

353 
	`Ârötf
(
°dîr
, "The -format optionÑequiresánárgument, default is YUY2.\n");

354 
	`quô
(10);

357 i‡(
	`°rcmp
(
¨gv
[1], "-scale") == 0)

359 i‡(
¨gv
[2])

361 
sˇÀ
 = 
	`©oi
(
¨gv
[2]);

362 i‡(
sˇÀ
==0)

364 
	`Ârötf
(
°dîr
, "The -scale optionÑequiresánárgument [from 1Åo 50], default is 5.\n");

365 
	`quô
(10);

367 i‡((
sˇÀ
<0) || (scale>50))

369 
	`Ârötf
(
°dîr
, "The -scale option must be inÑange from 1Åo 50, default is 5.\n");

370 
	`quô
(10);

372 
¨gv
 += 2;

373 
¨gc
 -= 2;

377 
	`Ârötf
(
°dîr
, "The -fps optionÑequiresánárgument [from 1Åo 1000], default is 12.\n");

378 
	`quô
(10);

381 i‡((
	`°rcmp
(
¨gv
[1], "-help") == 0 ) || (strcmp(argv[1], "-h") == 0))

383 
	`PrötUßge
(
¨gv
[0]);

384 
	`quô
(0);

387 
	`Ârötf
(
°dîr
, "Uƒecognized o±i⁄: %s.\n", 
¨gv
[1]);

388 
	`quô
(10);

393 
RawMoo£D©a
=(
Uöt8
*)
	`mÆloc
(
MOOSEFRAME_SIZE
 * 
MOOSEFRAMES_COUNT
);

394 i‡(
RawMoo£D©a
==
NULL
)

396 
	`Ârötf
(
°dîr
, "Can'tállocate memory for movie !\n");

397 
	`‰ì
(
RawMoo£D©a
);

398 
	`quô
(1);

402 
h™dÀ
=
	`SDL_RWFromFûe
("moose.dat", "rb");

403 i‡(
h™dÀ
==
NULL
)

405 
	`Ârötf
(
°dîr
, "Can't findÅhe file moose.dat !\n");

406 
	`‰ì
(
RawMoo£D©a
);

407 
	`quô
(2);

410 
	`SDL_RWªad
(
h™dÀ
, 
RawMoo£D©a
, 
MOOSEFRAME_SIZE
, 
MOOSEFRAMES_COUNT
);

412 
	`SDL_RW˛o£
(
h™dÀ
);

415 i‡–(
s¸ìn
=
	`SDL_SëVideoMode
(
MOOSEPIC_W
*
sˇÀ
, 
MOOSEPIC_H
*sˇÀ, 0, 
SDL_RESIZABLE
 | 
SDL_SWSURFACE
)Ë=
NULL
 )

417 
	`Ârötf
(
°dîr
, "Couldn'à£àvideÿmode: %s\n", 
	`SDL_GëEº‹
());

418 
	`‰ì
(
RawMoo£D©a
);

419 
	`quô
(4);

423 
	`SDL_WM_SëC≠ti⁄
("SDLÅest overlay:Ñunning moose", "testoverlay2");

425 
i
=0; i<
MOOSEFRAMES_COUNT
; i++)

427 
Moo£Føme
[
i
]=
	`SDL_Cª©eRGBSurÁ˚From
(
RawMoo£D©a
+i*
MOOSEFRAME_SIZE
, 
MOOSEPIC_W
,

428 
MOOSEPIC_H
, 8, 
MOOSEPIC_W
, 0, 0, 0, 0);

429 i‡(
Moo£Føme
[
i
]==
NULL
)

431 
	`Ârötf
(
°dîr
, "Couldn'à¸óã SDL_SurÁ˚s:%s\n", 
	`SDL_GëEº‹
());

432 
	`‰ì
(
RawMoo£D©a
);

433 
	`quô
(5);

435 
	`SDL_SëCﬁ‹s
(
Moo£Føme
[
i
], 
Moo£Cﬁ‹s
, 0, 84);

438 
SDL_SurÁ˚
 *
√wsurf
;

439 
SDL_PixñF‹m©
 
f‹m©
;

441 
f‹m©
.
∑Àâe
=
NULL
;

442 
f‹m©
.
BôsPîPixñ
=32;

443 
f‹m©
.
ByãsPîPixñ
=4;

444 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


445 
f‹m©
.
Rshi·
=0;

446 
f‹m©
.
Gshi·
=8;

447 
f‹m©
.
Bshi·
=16;

449 
f‹m©
.
Rshi·
=24;

450 
f‹m©
.
Gshi·
=16;

451 
f‹m©
.
Bshi·
=8;

453 
f‹m©
.
Ashi·
=0;

454 
f‹m©
.
Rmask
=0xff<<f‹m©.
Rshi·
;

455 
f‹m©
.
Gmask
=0xff<<f‹m©.
Gshi·
;

456 
f‹m©
.
Bmask
=0xff<<f‹m©.
Bshi·
;

457 
f‹m©
.
Amask
=0;

458 
f‹m©
.
Rloss
=0;

459 
f‹m©
.
Gloss
=0;

460 
f‹m©
.
Bloss
=0;

461 
f‹m©
.
Aloss
=8;

462 
f‹m©
.
cﬁ‹key
=0;

463 
f‹m©
.
Æpha
=0;

465 
√wsurf
=
	`SDL_C⁄vîtSurÁ˚
(
Moo£Føme
[
i
], &
f‹m©
, 
SDL_SWSURFACE
);

466 if(!
√wsurf
)

468 
	`Ârötf
(
°dîr
, "Couldn'àc⁄vîàpi˘uªÅÿ32bô†RGB: %s\n", 
	`SDL_GëEº‹
());

469 
	`quô
(6);

471 
	`SDL_FªeSurÁ˚
(
Moo£Føme
[
i
]);

472 
Moo£Føme
[
i
]=
√wsurf
;

476 
	`‰ì
(
RawMoo£D©a
);

478 
ovîœy
=
	`SDL_Cª©eYUVOvîœy
(
MOOSEPIC_W
, 
MOOSEPIC_H
, 
ovîœy_f‹m©
, 
s¸ìn
);

479 i‡(!
ovîœy
)

481 
	`Ârötf
(
°dîr
, "Couldn'à¸óã ovîœy: %s\n", 
	`SDL_GëEº‹
());

482 
	`quô
(7);

485 
	`¥ötf
("Cª©ed %dx%dx%d %†%†ovîœy\n",
ovîœy
->
w
,ovîœy->
h
,ovîœy->
∂™es
,

486 
ovîœy
->
hw_ovîœy
?"hardware":"software",

487 
ovîœy
->
f‹m©
==
SDL_YV12_OVERLAY
?"YV12":

488 
ovîœy
->
f‹m©
==
SDL_IYUV_OVERLAY
?"IYUV":

489 
ovîœy
->
f‹m©
==
SDL_YUY2_OVERLAY
?"YUY2":

490 
ovîœy
->
f‹m©
==
SDL_UYVY_OVERLAY
?"UYVY":

491 
ovîœy
->
f‹m©
==
SDL_YVYU_OVERLAY
?"YVYU":

494 
i
=0; i<
ovîœy
->
∂™es
; i++)

496 
	`¥ötf
("Öœ√ %d:Öôch=%d\n", 
i
, 
ovîœy
->
pôches
[i]);

499 
ovîœyª˘
.
x
=0;

500 
ovîœyª˘
.
y
=0;

501 
ovîœyª˘
.
w
=
MOOSEPIC_W
*
sˇÀ
;

502 
ovîœyª˘
.
h
=
MOOSEPIC_H
*
sˇÀ
;

505 
i
=0;

506 
Âsdñay
=1000/
Âs
;

509 
	`SDL_EvítSèã
(
SDL_KEYUP
, 
SDL_IGNORE
);

511 
œ°·ick
=
	`SDL_GëTicks
();

516 i‡(
	`SDL_PﬁlEvít
(&
evít
))

518 
evít
.
ty≥
)

520 
SDL_VIDEORESIZE
:

521 
s¸ìn
=
	`SDL_SëVideoMode
(
evít
.
ªsize
.
w
,Évít.ªsize.
h
, 0, 
SDL_RESIZABLE
 | 
SDL_SWSURFACE
);

522 
ovîœyª˘
.
w
=
evít
.
ªsize
.w;

523 
ovîœyª˘
.
h
=
evít
.
ªsize
.h;

524 i‡(
∑u£d
)

526 
ªsized
=1;

529 
SDL_MOUSEBUTTONDOWN
:

530 
ovîœyª˘
.
x
 = 
evít
.
buâ⁄
.x - ovîœyª˘.
w
/2;

531 
ovîœyª˘
.
y
 = 
evít
.
buâ⁄
.y - ovîœyª˘.
h
/2;

533 
SDL_KEYDOWN
:

534 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_SPACE
)

536 
∑u£d
=!paused;

539 i‡(
evít
.
key
.
keysym
.
sym
 !
SDLK_ESCAPE
)

543 
SDL_QUIT
:

544 
	`SDL_FªeYUVOvîœy
(
ovîœy
);

545 
i
=0; i<
MOOSEFRAMES_COUNT
; i++)

547 
	`SDL_FªeSurÁ˚
(
Moo£Føme
[
i
]);

549 
	`quô
(0);

553 i‡((!
∑u£d
)||(
ªsized
))

555 i‡(((
	`SDL_GëTicks
()-
œ°·ick
)>
Âsdñay
)||(
ªsized
))

557 
œ°·ick
=
	`SDL_GëTicks
();

559 
ovîœy_f‹m©
)

561 
SDL_YUY2_OVERLAY
:

562 
	`C⁄vîtRGBtoYUY2
(
Moo£Føme
[
i
], 
ovîœy
, 0, 100);

564 
SDL_YV12_OVERLAY
:

565 
	`C⁄vîtRGBtoYV12
(
Moo£Føme
[
i
], 
ovîœy
, 0, 100);

567 
SDL_UYVY_OVERLAY
:

568 
	`C⁄vîtRGBtoUYVY
(
Moo£Føme
[
i
], 
ovîœy
, 0, 100);

570 
SDL_YVYU_OVERLAY
:

571 
	`C⁄vîtRGBtoYVYU
(
Moo£Føme
[
i
], 
ovîœy
, 0, 100);

573 
SDL_IYUV_OVERLAY
:

574 
	`C⁄vîtRGBtoIYUV
(
Moo£Føme
[
i
], 
ovîœy
, 0, 100);

578 
	`SDL_Di•œyYUVOvîœy
(
ovîœy
, &
ovîœyª˘
);

579 i‡(!
ªsized
)

581 
i
++;

582 i‡(
i
==10)

584 
i
=0;

589 
ªsized
=0;

594 
	`SDL_Dñay
(1);

597 
	`SDL_Quô
();

599 
	}
}

	@SDL-win/test/testpalette.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<m©h.h
>

14 #i‚de‡
M_PI


15 
	#M_PI
 3.14159265358979323846

	)

18 
	~"SDL.h
"

21 
	#SCRW
 640

	)

22 
	#SCRH
 480

	)

24 
	#NBOATS
 5

	)

25 
	#SPEED
 2

	)

27 #i‚de‡
MIN


28 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

30 #i‚de‡
MAX


31 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

38 
SDL_Cﬁ‹
 
	gwavem≠
[] = {

58 
	$quô
(
rc
)

60 
	`SDL_Quô
();

61 
	`exô
(
rc
);

62 
	}
}

64 
	$sdÀº
(*
whí
)

66 
	`Ârötf
(
°dîr
, "SDLÉº‹: %s: %s\n", 
whí
, 
	`SDL_GëEº‹
());

67 
	`quô
(1);

68 
	}
}

71 
SDL_SurÁ˚
 *
	$make_bg
(
SDL_SurÁ˚
 *
s¸ìn
, 
°¨tcﬁ
)

73 
i
;

74 
SDL_SurÁ˚
 *
bg
 = 
	`SDL_Cª©eRGBSurÁ˚
(
SDL_SWSURFACE
, 
s¸ìn
->
w
, s¸ìn->
h
,

76 if(!
bg
)

77 
	`sdÀº
("creating background surface");

81 
	`SDL_SëCﬁ‹s
(
bg
, 
s¸ìn
->
f‹m©
->
∑Àâe
->
cﬁ‹s
, 0, 256);

84 if(
	`SDL_LockSurÁ˚
(
bg
) < 0)

85 
	`sdÀº
("locking background");

86 
i
 = 0; i < 
SCRH
; i++) {

87 
Uöt8
 *
p
 = (Uöt8 *)
bg
->
pixñs
 + 
i
 * bg->
pôch
;

88 
j
, 
d
;

89 
d
 = 0;

90 
j
 = 0; j < 
SCRW
; j++) {

91 
v
 = 
	`MAX
(
d
, -2);

92 
v
 = 
	`MIN
(v, 2);

93 if(
i
 > 0)

94 
v
 +
p
[-
bg
->
pôch
] + 65 - 
°¨tcﬁ
;

95 
p
[
j
] = 
°¨tcﬁ
 + (
v
 & 63);

96 
d
 +((
	`ønd
() >> 3) % 3) - 1;

99 
	`SDL_U∆ockSurÁ˚
(
bg
);

100 (
bg
);

101 
	}
}

107 
SDL_SurÁ˚
 *
	$hÊù
(
SDL_SurÁ˚
 *
s
)

109 
i
;

110 
SDL_SurÁ˚
 *
z
 = 
	`SDL_Cª©eRGBSurÁ˚
(
SDL_SWSURFACE
, 
s
->
w
, s->
h
, 8,

113 
	`SDL_SëCﬁ‹s
(
z
, 
s
->
f‹m©
->
∑Àâe
->
cﬁ‹s
,

114 0, 
s
->
f‹m©
->
∑Àâe
->
ncﬁ‹s
);

115 if(
	`SDL_LockSurÁ˚
(
s
Ë< 0 || SDL_LockSurÁ˚(
z
) < 0)

116 
	`sdÀº
("locking flip images");

118 
i
 = 0; i < 
s
->
h
; i++) {

119 
j
;

120 
Uöt8
 *
‰om
 = (Uöt8 *)
s
->
pixñs
 + 
i
 * s->
pôch
;

121 
Uöt8
 *
to
 = (Uöt8 *)
z
->
pixñs
 + 
i
 * z->
pôch
 + 
s
->
w
 - 1;

122 
j
 = 0; j < 
s
->
w
; j++)

123 
to
[-
j
] = 
‰om
[j];

126 
	`SDL_U∆ockSurÁ˚
(
z
);

127 
	`SDL_U∆ockSurÁ˚
(
s
);

128  
z
;

129 
	}
}

131 
	$maö
(
¨gc
, **
¨gv
)

133 
SDL_Cﬁ‹
 
cm≠
[256];

134 
SDL_SurÁ˚
 *
s¸ìn
;

135 
SDL_SurÁ˚
 *
bg
;

136 
SDL_SurÁ˚
 *
bﬂt
[2];

137 
vidÊags
 = 0;

138 
°¨t
;

139 
Áde_max
 = 400;

140 
Áde_Àvñ
, 
Áde_dú
;

141 
bﬂtcﬁs
, 
‰ames
, 
i
, 
ªd
;

142 
bﬂtx
[
NBOATS
], 
bﬂty
[NBOATS], 
bﬂtdú
[NBOATS];

143 
gamma_Áde
 = 0;

144 
gamma_ømp
 = 0;

146 if(
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0)

147 
	`sdÀº
("initialising SDL");

149 --
¨gc
) {

150 ++
¨gv
;

151 if(
	`°rcmp
(*
¨gv
, "-hw") == 0)

152 
vidÊags
 |
SDL_HWSURFACE
;

153 if(
	`°rcmp
(*
¨gv
, "-fullscreen") == 0)

154 
vidÊags
 |
SDL_FULLSCREEN
;

155 if(
	`°rcmp
(*
¨gv
, "-nofade") == 0)

156 
Áde_max
 = 1;

157 if(
	`°rcmp
(*
¨gv
, "-gamma") == 0)

158 
gamma_Áde
 = 1;

159 if(
	`°rcmp
(*
¨gv
, "-gammaramp") == 0)

160 
gamma_ømp
 = 1;

162 
	`Ârötf
(
°dîr
,

165 
	`quô
(1);

170 if((
s¸ìn
 = 
	`SDL_SëVideoMode
(
SCRW
, 
SCRH
, 8, 
vidÊags
 | 
SDL_HWPALETTE
)Ë=
NULL
) {

171 
	`Ârötf
(
°dîr
, "error setting %dx%d 8bpp indexed mode: %s\n",

172 
SCRW
, 
SCRH
, 
	`SDL_GëEº‹
());

173 
	`quô
(1);

176 i‡(
vidÊags
 & 
SDL_FULLSCREEN
Ë
	`SDL_ShowCurs‹
 (
SDL_FALSE
);

178 if((
bﬂt
[0] = 
	`SDL_LﬂdBMP
("ßû.bmp")Ë=
NULL
)

179 
	`sdÀº
("loading sail.bmp");

181 
	`SDL_SëCﬁ‹Key
(
bﬂt
[0], 
SDL_SRCCOLORKEY
 | 
SDL_RLEACCEL
,

182 
	`SDL_M≠RGB
(
bﬂt
[0]->
f‹m©
, 0xff, 0x00, 0xff));

183 
bﬂtcﬁs
 = 
bﬂt
[0]->
f‹m©
->
∑Àâe
->
ncﬁ‹s
;

184 
bﬂt
[1] = 
	`hÊù
(boat[0]);

185 
	`SDL_SëCﬁ‹Key
(
bﬂt
[1], 
SDL_SRCCOLORKEY
 | 
SDL_RLEACCEL
,

186 
	`SDL_M≠RGB
(
bﬂt
[1]->
f‹m©
, 0xff, 0x00, 0xff));

192 
	`mem£t
(
cm≠
, 0, (cmap));

193 
	`SDL_SëPÆëã
(
s¸ìn
, 
SDL_PHYSPAL
, 
cm≠
, 0, 256);

202 
	`SDL_SëPÆëã
(
s¸ìn
, 
SDL_LOGPAL
,

203 
bﬂt
[0]->
f‹m©
->
∑Àâe
->
cﬁ‹s
, 0, 
bﬂtcﬁs
);

204 
	`SDL_SëPÆëã
(
s¸ìn
, 
SDL_LOGPAL
, 
wavem≠
, 
bﬂtcﬁs
, 64);

210 
	`mem˝y
(
cm≠
, 
s¸ìn
->
f‹m©
->
∑Àâe
->
cﬁ‹s
, 256 * (
SDL_Cﬁ‹
));

213 
ªd
 = 
	`SDL_M≠RGB
(
s¸ìn
->
f‹m©
, 0xff, 0x00, 0x00);

215 
bg
 = 
	`make_bg
(
s¸ìn
, 
bﬂtcﬁs
);

218 if(
	`SDL_BlôSurÁ˚
(
bg
, 
NULL
, 
s¸ìn
, NULL) < 0)

219 
	`sdÀº
("blitting backgroundÅo screen");

220 
	`SDL_Flù
(
s¸ìn
);

223 
i
 = 0; i < 
NBOATS
; i++) {

224 
bﬂtx
[
i
] = (
	`ønd
(Ë% (
SCRW
 + 
bﬂt
[0]->
w
)) - boat[0]->w;

225 
bﬂty
[
i
] = i * (
SCRH
 - 
bﬂt
[0]->
h
Ë/ (
NBOATS
 - 1);

226 
bﬂtdú
[
i
] = ((
	`ønd
() >> 5) & 1) * 2 - 1;

229 
°¨t
 = 
	`SDL_GëTicks
();

230 
‰ames
 = 0;

231 
Áde_dú
 = 1;

232 
Áde_Àvñ
 = 0;

234 
SDL_Evít
 
e
;

235 
SDL_Re˘
 
upd©es
[
NBOATS
];

236 
SDL_Re˘
 
r
;

237 
ªdpha£
;

240 
	`SDL_PﬁlEvít
(&
e
)) {

241 if(
e
.
ty≥
 =
SDL_KEYDOWN
 ||É.ty≥ =
SDL_QUIT


242 || 
e
.
ty≥
 =
SDL_MOUSEBUTTONDOWN
) {

243 if(
Áde_dú
 < 0)

244 
Áde_Àvñ
 = 0;

245 
Áde_dú
 = -1;

250 
i
 = 0; i < 
NBOATS
; i++) {

251 
ﬁd_x
 = 
bﬂtx
[
i
];

253 
bﬂtx
[
i
] +
bﬂtdú
[i] * 
SPEED
;

254 if(
bﬂtx
[
i
] <-
bﬂt
[0]->
w
 || bﬂtx[i] >
SCRW
)

255 
bﬂtdú
[
i
] = -boatdir[i];

258 
r
.
x
 = 
ﬁd_x
;

259 
r
.
y
 = 
bﬂty
[
i
];

260 
r
.
w
 = 
bﬂt
[0]->w;

261 
r
.
h
 = 
bﬂt
[0]->h;

262 if(
	`SDL_BlôSurÁ˚
(
bg
, &
r
, 
s¸ìn
, &r) < 0)

263 
	`sdÀº
("blitting background");

266 
upd©es
[
i
].
x
 = 
	`MIN
(
ﬁd_x
, 
bﬂtx
[i]);

267 
upd©es
[
i
].
y
 = 
bﬂty
[i];

268 
upd©es
[
i
].
w
 = 
bﬂt
[0]->w + 
SPEED
;

269 
upd©es
[
i
].
h
 = 
bﬂt
[0]->h;

271 if(
upd©es
[
i
].
x
 < 0) {

272 
upd©es
[
i
].
w
 +upd©es[i].
x
;

273 
upd©es
[
i
].
x
 = 0;

275 if(
upd©es
[
i
].
x
 + upd©es[i].
w
 > 
SCRW
)

276 
upd©es
[
i
].
w
 = 
SCRW
 - upd©es[i].
x
;

279 
i
 = 0; i < 
NBOATS
; i++) {

281 
r
.
x
 = 
bﬂtx
[
i
];

282 
r
.
y
 = 
bﬂty
[
i
];

283 if(
	`SDL_BlôSurÁ˚
(
bﬂt
[(
bﬂtdú
[
i
] + 1Ë/ 2], 
NULL
,

284 
s¸ìn
, &
r
) < 0)

285 
	`sdÀº
("blitting boat");

289 
i
 = 0; i < 64; i++)

290 
cm≠
[
bﬂtcﬁs
 + ((
i
 + 
‰ames
Ë& 63)] = 
wavem≠
[i];

292 if(
Áde_dú
) {

294 
Áde_Àvñ
 +
Áde_dú
;

296 if(
gamma_Áde
) {

298 
Àvñ
 = ()
Áde_Àvñ
 / 
Áde_max
;

299 if(
	`SDL_SëGamma
(
Àvñ
,Üevel,Üevel) < 0)

300 
	`sdÀº
("setting gamma");

302 } if(
gamma_ømp
) {

304 
Uöt16
 
ømp
[256];

305 
i
 = 0; i < 256; i++)

306 
ømp
[
i
] = (ò* 
Áde_Àvñ
 / 
Áde_max
) << 8;

307 if(
	`SDL_SëGammaRamp
(
ømp
,Ñamp,Ñamp) < 0)

308 
	`sdÀº
("setting gammaÑamp");

312 
	`mem˝y
(
cm≠
, 
s¸ìn
->
f‹m©
->
∑Àâe
->
cﬁ‹s
,

313 
bﬂtcﬁs
 * (
SDL_Cﬁ‹
));

314 
i
 = 0; i < 
bﬂtcﬁs
 + 64; i++) {

315 
cm≠
[
i
].
r
 = cm≠[i].∏* 
Áde_Àvñ
 / 
Áde_max
;

316 
cm≠
[
i
].
g
 = cm≠[i].g * 
Áde_Àvñ
 / 
Áde_max
;

317 
cm≠
[
i
].
b
 = cm≠[i].b * 
Áde_Àvñ
 / 
Áde_max
;

320 if(
Áde_Àvñ
 =
Áde_max
)

321 
Áde_dú
 = 0;

325 
ªdpha£
 = 
‰ames
 % 64;

326 
cm≠
[
ªd
].
r
 = ()(255 * 
	`sö
(
ªdpha£
 * 
M_PI
 / 63));

328 
	`SDL_SëPÆëã
(
s¸ìn
, 
SDL_PHYSPAL
, 
cm≠
, 0, 
bﬂtcﬁs
 + 64);

331 
	`SDL_Upd©eRe˘s
(
s¸ìn
, 
NBOATS
, 
upd©es
);

332 
‰ames
++;

333 } 
Áde_Àvñ
 > 0);

335 
	`¥ötf
("%d frames, %.2f fps\n",

336 
‰ames
, 1000.0 * føme†/ (
	`SDL_GëTicks
(Ë- 
°¨t
));

338 i‡(
vidÊags
 & 
SDL_FULLSCREEN
Ë
	`SDL_ShowCurs‹
 (
SDL_TRUE
);

339 
	`SDL_Quô
();

341 
	}
}

	@SDL-win/test/testplatform.c

2 
	~<°dio.h
>

4 
	~"SDL.h
"

5 
	~"SDL_ídün.h
"

6 
	~"SDL_˝uöfo.h
"

13 
	$badsize
(
size_t
 
sizeo·y≥
, size_à
h¨dcodëy≥
)

15  
sizeo·y≥
 !
h¨dcodëy≥
;

16 
	}
}

18 
	$Te°Ty≥s
(
SDL_boﬁ
 
vîbo£
)

20 
îr‹
 = 0;

22 i‡–
	`badsize
((
Uöt8
), 1) ) {

23 i‡–
vîbo£
 )

24 
	`¥ötf
("sizeof(Uint8) != 1, instead = %lu\n",

25 (Ë(
Uöt8
));

26 ++
îr‹
;

28 i‡–
	`badsize
((
Uöt16
), 2) ) {

29 i‡–
vîbo£
 )

30 
	`¥ötf
("sizeof(Uint16) != 2, instead = %lu\n",

31 (Ë(
Uöt16
));

32 ++
îr‹
;

34 i‡–
	`badsize
((
Uöt32
), 4) ) {

35 i‡–
vîbo£
 )

36 
	`¥ötf
("sizeof(Uint32) != 4, instead = %lu\n",

37 (Ë(
Uöt32
));

38 ++
îr‹
;

40 #ifde‡
SDL_HAS_64BIT_TYPE


41 i‡–
	`badsize
((
Uöt64
), 8) ) {

42 i‡–
vîbo£
 )

43 
	`¥ötf
("sizeof(Uint64) != 8, instead = %lu\n",

44 (Ë(
Uöt64
));

45 ++
îr‹
;

48 i‡–
vîbo£
 ) {

49 
	`¥ötf
("WARNING: No 64-bit datatype onÅhisÖlatform\n");

52 i‡–
vîbo£
 && !
îr‹
 )

53 
	`¥ötf
("All dataÅypesáreÅheÉxpected size.\n");

55 –
îr‹
 ? 1 : 0 );

56 
	}
}

58 
	$Te°Endün
(
SDL_boﬁ
 
vîbo£
)

60 
îr‹
 = 0;

61 
Uöt16
 
vÆue
 = 0x1234;

62 
ªÆ_byã‹dî
;

63 
Uöt16
 
vÆue16
 = 0xCDAB;

64 
Uöt16
 
sw≠≥d16
 = 0xABCD;

65 
Uöt32
 
vÆue32
 = 0xEFBEADDE;

66 
Uöt32
 
sw≠≥d32
 = 0xDEADBEEF;

67 #ifde‡
SDL_HAS_64BIT_TYPE


68 
Uöt64
 
vÆue64
, 
sw≠≥d64
;

69 
vÆue64
 = 0xEFBEADDE;

70 
vÆue64
 <<= 32;

71 
vÆue64
 |= 0xCDAB3412;

72 
sw≠≥d64
 = 0x1234ABCD;

73 
sw≠≥d64
 <<= 32;

74 
sw≠≥d64
 |= 0xDEADBEEF;

77 i‡–
vîbo£
 ) {

78 
	`¥ötf
("Detectedá %sÉndian machine.\n",

79 (
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN
) ? "little" : "big");

81 i‡–(*((*)&
vÆue
) >> 4) == 0x1 ) {

82 
ªÆ_byã‹dî
 = 
SDL_BIG_ENDIAN
;

84 
ªÆ_byã‹dî
 = 
SDL_LIL_ENDIAN
;

86 i‡–
ªÆ_byã‹dî
 !
SDL_BYTEORDER
 ) {

87 i‡–
vîbo£
 ) {

88 
	`¥ötf
("Actuallyá %sÉndian machine!\n",

89 (
ªÆ_byã‹dî
 =
SDL_LIL_ENDIAN
) ? "little" : "big");

91 ++
îr‹
;

93 i‡–
vîbo£
 ) {

94 
	`¥ötf
("VÆuê16 = 0x%X, sw≠≥d = 0x%X\n", 
vÆue16
, 
	`SDL_Sw≠16
(value16));

96 i‡–
	`SDL_Sw≠16
(
vÆue16
Ë!
sw≠≥d16
 ) {

97 i‡–
vîbo£
 ) {

98 
	`¥ötf
("16 bit value swapped incorrectly!\n");

100 ++
îr‹
;

102 i‡–
vîbo£
 ) {

103 
	`¥ötf
("VÆuê32 = 0x%X, sw≠≥d = 0x%X\n", 
vÆue32
, 
	`SDL_Sw≠32
(value32));

105 i‡–
	`SDL_Sw≠32
(
vÆue32
Ë!
sw≠≥d32
 ) {

106 i‡–
vîbo£
 ) {

107 
	`¥ötf
("32 bit value swapped incorrectly!\n");

109 ++
îr‹
;

111 #ifde‡
SDL_HAS_64BIT_TYPE


112 i‡–
vîbo£
 ) {

113 #ifde‡
_MSC_VER


114 
	`¥ötf
("VÆuê64 = 0x%I64X, sw≠≥d = 0x%I64X\n", 
vÆue64
, 
	`SDL_Sw≠64
(value64));

116 
	`¥ötf
("VÆuê64 = 0x%ŒX, sw≠≥d = 0x%ŒX\n", (Ë
vÆue64
, (Ë
	`SDL_Sw≠64
(value64));

119 i‡–
	`SDL_Sw≠64
(
vÆue64
Ë!
sw≠≥d64
 ) {

120 i‡–
vîbo£
 ) {

121 
	`¥ötf
("64 bit value swapped incorrectly!\n");

123 ++
îr‹
;

126 –
îr‹
 ? 1 : 0 );

127 
	}
}

130 
	$Te°CPUInfo
(
SDL_boﬁ
 
vîbo£
)

132 i‡–
vîbo£
 ) {

133 
	`¥ötf
("RDTSC %s\n", 
	`SDL_HasRDTSC
() ? "detected" : "not detected");

134 
	`¥ötf
("MMX %s\n", 
	`SDL_HasMMX
() ? "detected" : "not detected");

135 
	`¥ötf
("MMX Exà%s\n", 
	`SDL_HasMMXExt
() ? "detected" : "not detected");

136 
	`¥ötf
("3DNow %s\n", 
	`SDL_Has3DNow
() ? "detected" : "not detected");

137 
	`¥ötf
("3DNow Exà%s\n", 
	`SDL_Has3DNowExt
() ? "detected" : "not detected");

138 
	`¥ötf
("SSE %s\n", 
	`SDL_HasSSE
() ? "detected" : "not detected");

139 
	`¥ötf
("SSE2 %s\n", 
	`SDL_HasSSE2
() ? "detected" : "not detected");

140 
	`¥ötf
("A…iVe¯%s\n", 
	`SDL_HasA…iVec
() ? "detected" : "not detected");

143 
	}
}

145 
	$maö
(
¨gc
, *
¨gv
[])

147 
SDL_boﬁ
 
vîbo£
 = 
SDL_TRUE
;

148 
°©us
 = 0;

150 i‡–
¨gv
[1] && (
	`SDL_°rcmp
(argv[1], "-q") == 0) ) {

151 
vîbo£
 = 
SDL_FALSE
;

153 i‡–
vîbo£
 ) {

154 
	`¥ötf
("This system isÑunning %s\n",

155 #i‡
__AIX__


157 #ñi‡
__HAIKU__


160 #ñi‡
__BEOS__


162 #ñi‡
__BSDI__


164 #ñi‡
__DREAMCAST__


166 #ñi‡
__FREEBSD__


168 #ñi‡
__HPUX__


170 #ñi‡
__IRIX__


172 #ñi‡
__LINUX__


174 #ñi‡
__MINT__


176 #ñi‡
__MACOS__


178 #ñi‡
__MACOSX__


180 #ñi‡
__NETBSD__


182 #ñi‡
__OPENBSD__


184 #ñi‡
__OS2__


186 #ñi‡
__OSF__


188 #ñi‡
__QNXNTO__


190 #ñi‡
__RISCOS__


192 #ñi‡
__SOLARIS__


194 #ñi‡
__WIN32__


195 #ifde‡
_WIN32_WCE


206 
°©us
 +
	`Te°Ty≥s
(
vîbo£
);

207 
°©us
 +
	`Te°Endün
(
vîbo£
);

208 
°©us
 +
	`Te°CPUInfo
(
vîbo£
);

209  
°©us
;

210 
	}
}

	@SDL-win/test/testsem.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<sig«l.h
>

8 
	~"SDL.h
"

9 
	~"SDL_thªad.h
"

11 
	#NUM_THREADS
 10

	)

13 
SDL_£m
 *
	g£m
;

14 
	gÆive
 = 1;

16 
SDLCALL
 
	$ThªadFunc
(*
d©a
)

18 
thªadnum
 = ()(
uöçå_t
)
d©a
;

19  
Æive
 ) {

20 
	`SDL_SemWaô
(
£m
);

21 
	`Ârötf
(
°dîr
, "ThªadÇumbî %d ha†gŸÅhê£m≠h‹ê(vÆuê%d)!\n", 
thªadnum
, 
	`SDL_SemVÆue
(
£m
));

22 
	`SDL_Dñay
(200);

23 
	`SDL_SemPo°
(
£m
);

24 
	`Ârötf
(
°dîr
, "ThªadÇumbî %d ha†ªÀa£dÅhê£m≠h‹ê(vÆuê%d)!\n", 
thªadnum
, 
	`SDL_SemVÆue
(
£m
));

25 
	`SDL_Dñay
(1);

27 
	`¥ötf
("ThªadÇumbî %dÉxôög.\n", 
thªadnum
);

29 
	}
}

31 
	$kûÀd
(
sig
)

33 
Æive
 = 0;

34 
	}
}

36 
	$Te°WaôTimeout
()

38 
Uöt32
 
°¨t_ticks
;

39 
Uöt32
 
íd_ticks
;

40 
Uöt32
 
duøti⁄
;

42 
£m
 = 
	`SDL_Cª©eSem≠h‹e
(0);

43 
	`¥ötf
("Waiting 2 seconds on semaphore\n");

45 
°¨t_ticks
 = 
	`SDL_GëTicks
();

46 
	`SDL_SemWaôTimeout
(
£m
, 2000);

47 
íd_ticks
 = 
	`SDL_GëTicks
();

49 
duøti⁄
 = 
íd_ticks
 - 
°¨t_ticks
;

52 i‡(
duøti⁄
 > 1900 && duration < 2050)

53 
	`¥ötf
("Wait done.\n");

55 
	`Ârötf
(
°dîr
, "WaôÅook %d mûli£c⁄ds\n", 
duøti⁄
);

56 
	}
}

58 
	$maö
(
¨gc
, **
¨gv
)

60 
SDL_Thªad
 *
thªads
[
NUM_THREADS
];

61 
uöçå_t
 
i
;

62 
öô_£m
;

64 if(
¨gc
 < 2) {

65 
	`Ârötf
(
°dîr
,"Ußge: %†öô_vÆue\n", 
¨gv
[0]);

70 i‡–
	`SDL_Inô
(0) < 0 ) {

71 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

74 
	`sig«l
(
SIGTERM
, 
kûÀd
);

75 
	`sig«l
(
SIGINT
, 
kûÀd
);

77 
öô_£m
 = 
	`©oi
(
¨gv
[1]);

78 
£m
 = 
	`SDL_Cª©eSem≠h‹e
(
öô_£m
);

80 
	`¥ötf
("Ru¬ög %dÅhªads, sem≠h‹êvÆuê%d\n", 
NUM_THREADS
, 
öô_£m
);

82  
i
 = 0; i < 
NUM_THREADS
; ++i ) {

83 
thªads
[
i
] = 
	`SDL_Cª©eThªad
(
ThªadFunc
, (*)i);

87 
	`SDL_Dñay
(10 * 1000);

90 
	`¥ötf
("Waiting forÅhreadsÅo finish\n");

91 
Æive
 = 0;

92  
i
 = 0; i < 
NUM_THREADS
; ++i ) {

93 
	`SDL_WaôThªad
(
thªads
[
i
], 
NULL
);

95 
	`¥ötf
("Finished waiting forÅhreads\n");

97 
	`SDL_De°roySem≠h‹e
(
£m
);

99 
	`Te°WaôTimeout
();

101 
	`SDL_Quô
();

103 
	}
}

	@SDL-win/test/testsprite.c

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<˘y≥.h
>

7 
	~<m©h.h
>

8 
	~<time.h
>

10 
	~"SDL.h
"

12 
	#NUM_SPRITES
 100

	)

13 
	#MAX_SPEED
 1

	)

15 
SDL_SurÁ˚
 *
	g•rôe
;

16 
	gnum•rôes
;

17 
SDL_Re˘
 *
	g•rôe_ª˘s
;

18 
SDL_Re˘
 *
	gposôi⁄s
;

19 
SDL_Re˘
 *
	gvñocôõs
;

20 
	g•rôes_visibÀ
;

21 
	gdebug_Êù
;

22 
Uöt16
 
	g•rôe_w
, 
	g•rôe_h
;

25 
	$quô
(
rc
)

27 
	`SDL_Quô
();

28 
	`exô
(
rc
);

29 
	}
}

31 
	$LﬂdS¥ôe
(*
fûe
)

33 
SDL_SurÁ˚
 *
ãmp
;

36 
•rôe
 = 
	`SDL_LﬂdBMP
(
fûe
);

37 i‡–
•rôe
 =
NULL
 ) {

38 
	`Ârötf
(
°dîr
, "Couldn'àlﬂd %s: %s", 
fûe
, 
	`SDL_GëEº‹
());

43 i‡–
•rôe
->
f‹m©
->
∑Àâe
 ) {

44 
	`SDL_SëCﬁ‹Key
(
•rôe
, (
SDL_SRCCOLORKEY
|
SDL_RLEACCEL
),

45 *(
Uöt8
 *)
•rôe
->
pixñs
);

49 
ãmp
 = 
	`SDL_Di•œyF‹m©
(
•rôe
);

50 
	`SDL_FªeSurÁ˚
(
•rôe
);

51 i‡–
ãmp
 =
NULL
 ) {

52 
	`Ârötf
(
°dîr
, "Couldn't convert background: %s\n",

53 
	`SDL_GëEº‹
());

56 
•rôe
 = 
ãmp
;

60 
	}
}

62 
	$MoveS¥ôes
(
SDL_SurÁ˚
 *
s¸ìn
, 
Uöt32
 
background
)

64 
i
, 
nupd©es
;

65 
SDL_Re˘
 
¨ó
, *
posôi⁄
, *
vñocôy
;

67 
nupd©es
 = 0;

69 i‡–
•rôes_visibÀ
 ) {

70 
	`SDL_FûlRe˘
(
s¸ìn
, 
NULL
, 
background
);

74  
i
=0; i<
num•rôes
; ++i ) {

75 
posôi⁄
 = &
posôi⁄s
[
i
];

76 
vñocôy
 = &
vñocôõs
[
i
];

77 
posôi⁄
->
x
 +
vñocôy
->x;

78 i‡–(
posôi⁄
->
x
 < 0Ë|| (posôi⁄->x >(
s¸ìn
->
w
 - 
•rôe_w
)) ) {

79 
vñocôy
->
x
 = -velocity->x;

80 
posôi⁄
->
x
 +
vñocôy
->x;

82 
posôi⁄
->
y
 +
vñocôy
->y;

83 i‡–(
posôi⁄
->
y
 < 0Ë|| (posôi⁄->y >(
s¸ìn
->
h
 - 
•rôe_w
)) ) {

84 
vñocôy
->
y
 = -velocity->y;

85 
posôi⁄
->
y
 +
vñocôy
->y;

89 
¨ó
 = *
posôi⁄
;

90 
	`SDL_BlôSurÁ˚
(
•rôe
, 
NULL
, 
s¸ìn
, &
¨ó
);

91 
•rôe_ª˘s
[
nupd©es
++] = 
¨ó
;

94 i‡(
debug_Êù
) {

95 i‡–(
s¸ìn
->
Êags
 & 
SDL_DOUBLEBUF
) == SDL_DOUBLEBUF ) {

96 
t
 = 0;

98 
Uöt32
 
cﬁ‹
 = 
	`SDL_M≠RGB
 (
s¸ìn
->
f‹m©
, 255, 0, 0);

99 
SDL_Re˘
 
r
;

100 
r
.
x
 = (
	`sö
(()
t
 * 2 * 3.1459Ë+ 1.0Ë/ 2.0 * (
s¸ìn
->
w
-20);

101 
r
.
y
 = 0;

102 
r
.
w
 = 20;

103 
r
.
h
 = 
s¸ìn
->h;

105 
	`SDL_FûlRe˘
 (
s¸ìn
, &
r
, 
cﬁ‹
);

106 
t
+=2;

111 i‡–(
s¸ìn
->
Êags
 & 
SDL_DOUBLEBUF
) == SDL_DOUBLEBUF ) {

112 
	`SDL_Flù
(
s¸ìn
);

114 
	`SDL_Upd©eRe˘s
(
s¸ìn
, 
nupd©es
, 
•rôe_ª˘s
);

116 
•rôes_visibÀ
 = 1;

117 
	}
}

120 
Uöt32
 
	$Fa°e°Fœgs
(
Uöt32
 
Êags
, 
width
, 
height
, 
bµ
)

122 c⁄° 
SDL_VideoInfo
 *
öfo
;

125 
Êags
 |
SDL_FULLSCREEN
;

128 
öfo
 = 
	`SDL_GëVideoInfo
();

129 i‡–
öfo
->
blô_hw_CC
 && info->
blô_fûl
 ) {

131 
Êags
 |
SDL_HWSURFACE
;

136 i‡–(
Êags
 & 
SDL_HWSURFACE
) == SDL_HWSURFACE ) {

140 i‡–
öfo
->
video_mem
*1024 > (
height
*
width
*
bµ
/8) ) {

141 
Êags
 |
SDL_DOUBLEBUF
;

143 
Êags
 &~
SDL_HWSURFACE
;

148 (
Êags
);

149 
	}
}

151 
	$maö
(
¨gc
, *
¨gv
[])

153 
SDL_SurÁ˚
 *
s¸ìn
;

154 
Uöt8
 *
mem
;

155 
width
, 
height
;

156 
Uöt8
 
video_bµ
;

157 
Uöt32
 
videoÊags
;

158 
Uöt32
 
background
;

159 
i
, 
d⁄e
;

160 
SDL_Evít
 
evít
;

161 
Uöt32
 
thí
, 
now
, 
‰ames
;

164 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 ) {

165 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

169 
num•rôes
 = 
NUM_SPRITES
;

170 
videoÊags
 = 
SDL_SWSURFACE
|
SDL_ANYFORMAT
;

171 
width
 = 640;

172 
height
 = 480;

173 
video_bµ
 = 8;

174 
debug_Êù
 = 0;

175  
¨gc
 > 1 ) {

176 --
¨gc
;

177 i‡–
	`°rcmp
(
¨gv
[
¨gc
-1], "-width") == 0 ) {

178 
width
 = 
	`©oi
(
¨gv
[
¨gc
]);

179 --
¨gc
;

181 i‡–
	`°rcmp
(
¨gv
[
¨gc
-1], "-height") == 0 ) {

182 
height
 = 
	`©oi
(
¨gv
[
¨gc
]);

183 --
¨gc
;

185 i‡–
	`°rcmp
(
¨gv
[
¨gc
-1], "-bpp") == 0 ) {

186 
video_bµ
 = 
	`©oi
(
¨gv
[
¨gc
]);

187 
videoÊags
 &~
SDL_ANYFORMAT
;

188 --
¨gc
;

190 i‡–
	`°rcmp
(
¨gv
[
¨gc
], "-fast") == 0 ) {

191 
videoÊags
 = 
	`Fa°e°Fœgs
(videoÊags, 
width
, 
height
, 
video_bµ
);

193 i‡–
	`°rcmp
(
¨gv
[
¨gc
], "-hw") == 0 ) {

194 
videoÊags
 ^
SDL_HWSURFACE
;

196 i‡–
	`°rcmp
(
¨gv
[
¨gc
], "-flip") == 0 ) {

197 
videoÊags
 ^
SDL_DOUBLEBUF
;

199 i‡–
	`°rcmp
(
¨gv
[
¨gc
], "-debugflip") == 0 ) {

200 
debug_Êù
 ^= 1;

202 i‡–
	`°rcmp
(
¨gv
[
¨gc
], "-fullscreen") == 0 ) {

203 
videoÊags
 ^
SDL_FULLSCREEN
;

205 i‡–
	`isdigô
(
¨gv
[
¨gc
][0]) ) {

206 
num•rôes
 = 
	`©oi
(
¨gv
[
¨gc
]);

208 
	`Ârötf
(
°dîr
,

210 
¨gv
[0]);

211 
	`quô
(1);

216 
s¸ìn
 = 
	`SDL_SëVideoMode
(
width
, 
height
, 
video_bµ
, 
videoÊags
);

217 i‡–! 
s¸ìn
 ) {

218 
	`Ârötf
(
°dîr
, "Couldn't set %dx%d video mode: %s\n",

219 
width
, 
height
, 
	`SDL_GëEº‹
());

220 
	`quô
(2);

224 i‡–
	`LﬂdS¥ôe
("icon.bmp") < 0 ) {

225 
	`quô
(1);

229 
mem
 = (
Uöt8
 *)
	`mÆloc
(4*(
SDL_Re˘
)*
num•rôes
);

230 i‡–
mem
 =
NULL
 ) {

231 
	`SDL_FªeSurÁ˚
(
•rôe
);

232 
	`Ârötf
(
°dîr
, "Out of memory!\n");

233 
	`quô
(2);

235 
•rôe_ª˘s
 = (
SDL_Re˘
 *)
mem
;

236 
posôi⁄s
 = 
•rôe_ª˘s
;

237 
•rôe_ª˘s
 +
num•rôes
;

238 
vñocôõs
 = 
•rôe_ª˘s
;

239 
•rôe_ª˘s
 +
num•rôes
;

240 
•rôe_w
 = 
•rôe
->
w
;

241 
•rôe_h
 = 
•rôe
->
h
;

242 
	`§™d
(
	`time
(
NULL
));

243  
i
=0; i<
num•rôes
; ++i ) {

244 
posôi⁄s
[
i
].
x
 = 
	`ønd
()%(
s¸ìn
->
w
 - 
•rôe_w
);

245 
posôi⁄s
[
i
].
y
 = 
	`ønd
()%(
s¸ìn
->
h
 - 
•rôe_h
);

246 
posôi⁄s
[
i
].
w
 = 
•rôe
->w;

247 
posôi⁄s
[
i
].
h
 = 
•rôe
->h;

248 
vñocôõs
[
i
].
x
 = 0;

249 
vñocôõs
[
i
].
y
 = 0;

250  ! 
vñocôõs
[
i
].
x
 && ! vñocôõs[i].
y
 ) {

251 
vñocôõs
[
i
].
x
 = (
	`ønd
()%(
MAX_SPEED
*2+1))-MAX_SPEED;

252 
vñocôõs
[
i
].
y
 = (
	`ønd
()%(
MAX_SPEED
*2+1))-MAX_SPEED;

255 
background
 = 
	`SDL_M≠RGB
(
s¸ìn
->
f‹m©
, 0x00, 0x00, 0x00);

258 
	`¥ötf
("S¸ì¿i†© %d bô†≥∏pixñ\n",
s¸ìn
->
f‹m©
->
BôsPîPixñ
);

259 i‡–(
s¸ìn
->
Êags
 & 
SDL_HWSURFACE
) == SDL_HWSURFACE ) {

260 
	`¥ötf
("Screen is in video memory\n");

262 
	`¥ötf
("Screen is in system memory\n");

264 i‡–(
s¸ìn
->
Êags
 & 
SDL_DOUBLEBUF
) == SDL_DOUBLEBUF ) {

265 
	`¥ötf
("Screen has double-bufferingÉnabled\n");

267 i‡–(
•rôe
->
Êags
 & 
SDL_HWSURFACE
) == SDL_HWSURFACE ) {

268 
	`¥ötf
("Sprite is in video memory\n");

270 
	`¥ötf
("Sprite is in system memory\n");

273 { 
SDL_Re˘
 
d°
;

274 
d°
.
x
 = 0;

275 
d°
.
y
 = 0;

276 
d°
.
w
 = 
•rôe
->w;

277 
d°
.
h
 = 
•rôe
->h;

278 
	`SDL_BlôSurÁ˚
(
•rôe
, 
NULL
, 
s¸ìn
, &
d°
);

279 
	`SDL_FûlRe˘
(
s¸ìn
, &
d°
, 
background
);

281 i‡–(
•rôe
->
Êags
 & 
SDL_HWACCEL
) == SDL_HWACCEL ) {

282 
	`¥ötf
("Sprite blit uses hardwareácceleration\n");

284 i‡–(
•rôe
->
Êags
 & 
SDL_RLEACCEL
) == SDL_RLEACCEL ) {

285 
	`¥ötf
("Sprite blit uses RLEácceleration\n");

289 
‰ames
 = 0;

290 
thí
 = 
	`SDL_GëTicks
();

291 
d⁄e
 = 0;

292 
•rôes_visibÀ
 = 0;

293  !
d⁄e
 ) {

295 ++
‰ames
;

296  
	`SDL_PﬁlEvít
(&
evít
) ) {

297 
evít
.
ty≥
) {

298 
SDL_MOUSEBUTTONDOWN
:

299 
	`SDL_W¨pMou£
(
s¸ìn
->
w
/2, s¸ìn->
h
/2);

301 
SDL_KEYDOWN
:

303 
SDL_QUIT
:

304 
d⁄e
 = 1;

310 
	`MoveS¥ôes
(
s¸ìn
, 
background
);

312 
	`SDL_FªeSurÁ˚
(
•rôe
);

313 
	`‰ì
(
mem
);

316 
now
 = 
	`SDL_GëTicks
();

317 i‡–
now
 > 
thí
 ) {

318 
	`¥ötf
("%2.2f framesÖer second\n",

319 (()
‰ames
*1000)/(
now
-
thí
));

321 
	`SDL_Quô
();

323 
	}
}

	@SDL-win/test/testtimer.c

6 
	~<°dlib.h
>

7 
	~<°dio.h
>

9 
	~"SDL.h
"

11 
	#DEFAULT_RESOLUTION
 1

	)

13 
	gticks
 = 0;

15 
Uöt32
 
SDLCALL
 
	$ticktock
(
Uöt32
 
öãrvÆ
)

17 ++
ticks
;

18 (
öãrvÆ
);

19 
	}
}

21 
Uöt32
 
SDLCALL
 
	$ˇŒback
(
Uöt32
 
öãrvÆ
, *
∑øm
)

23 
	`¥ötf
("Timî %d :Ö¨am = %d\n", 
öãrvÆ
, ()(
uöçå_t
)
∑øm
);

24  
öãrvÆ
;

25 
	}
}

27 
	$maö
(
¨gc
, *
¨gv
[])

29 
desúed
;

30 
SDL_TimîID
 
t1
, 
t2
, 
t3
;

32 i‡–
	`SDL_Inô
(
SDL_INIT_TIMER
) < 0 ) {

33 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n", 
	`SDL_GëEº‹
());

38 
desúed
 = 0;

39 i‡–
¨gv
[1] ) {

40 
desúed
 = 
	`©oi
(
¨gv
[1]);

42 i‡–
desúed
 == 0 ) {

43 
desúed
 = 
DEFAULT_RESOLUTION
;

45 
	`SDL_SëTimî
(
desúed
, 
ticktock
);

48 
	`¥ötf
("Waiting 10 seconds\n");

49 
	`SDL_Dñay
(10*1000);

52 
	`SDL_SëTimî
(0, 
NULL
);

55 i‡–
ticks
 ) {

56 
	`Ârötf
(
°dîr
,

58 
desúed
, ()(10*1000)/
ticks
);

62 
	`¥ötf
("Testing multipleÅimers...\n");

63 
t1
 = 
	`SDL_AddTimî
(100, 
ˇŒback
, (*)1);

64 if(!
t1
)

65 
	`Ârötf
(
°dîr
,"CouldÇŸ cª©êtimî 1: %s\n", 
	`SDL_GëEº‹
());

66 
t2
 = 
	`SDL_AddTimî
(50, 
ˇŒback
, (*)2);

67 if(!
t2
)

68 
	`Ârötf
(
°dîr
,"CouldÇŸ cª©êtimî 2: %s\n", 
	`SDL_GëEº‹
());

69 
t3
 = 
	`SDL_AddTimî
(233, 
ˇŒback
, (*)3);

70 if(!
t3
)

71 
	`Ârötf
(
°dîr
,"CouldÇŸ cª©êtimî 3: %s\n", 
	`SDL_GëEº‹
());

74 
	`¥ötf
("Waiting 10 seconds\n");

75 
	`SDL_Dñay
(10*1000);

77 
	`¥ötf
("RemovingÅimer 1ánd waiting 5 more seconds\n");

78 
	`SDL_RemoveTimî
(
t1
);

80 
	`SDL_Dñay
(5*1000);

82 
	`SDL_RemoveTimî
(
t2
);

83 
	`SDL_RemoveTimî
(
t3
);

85 
	`SDL_Quô
();

87 
	}
}

	@SDL-win/test/testver.c

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

9 
	~"SDL.h
"

11 
	$maö
(
¨gc
, *
¨gv
[])

13 
SDL_vîsi⁄
 
compûed
;

16 i‡–
	`SDL_Inô
(0) < 0 ) {

17 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

18 
	`exô
(1);

20 #ifde‡
DEBUG


21 
	`Ârötf
(
°dîr
, "SDL initialized\n");

23 #i‡
	`SDL_VERSION_ATLEAST
(1, 2, 0)

24 
	`¥ötf
("Compiled with SDL 1.2 orÇewer\n");

26 
	`¥ötf
("Compiled with SDL olderÅhan 1.2\n");

28 
	`SDL_VERSION
(&
compûed
);

29 
	`¥ötf
("Compiled version: %d.%d.%d\n",

30 
compûed
.
maj‹
, compûed.
mö‹
, compûed.
∑tch
);

31 
	`¥ötf
("Linked version: %d.%d.%d\n",

32 
	`SDL_Löked_Vîsi⁄
()->
maj‹
,

33 
	`SDL_Löked_Vîsi⁄
()->
mö‹
,

34 
	`SDL_Löked_Vîsi⁄
()->
∑tch
);

35 
	`SDL_Quô
();

37 
	}
}

	@SDL-win/test/testvidinfo.c

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

9 
	~"SDL.h
"

11 
	#NUM_BLITS
 10

	)

12 
	#NUM_UPDATES
 500

	)

14 
	#FLAG_MASK
 (
SDL_HWSURFACE
 | 
SDL_FULLSCREEN
 | 
SDL_DOUBLEBUF
 | \

15 
SDL_SRCCOLORKEY
 | 
SDL_SRCALPHA
 | 
SDL_RLEACCEL
 | \

16 
SDL_RLEACCELOK
)

	)

18 
	$PrötFœgs
(
Uöt32
 
Êags
)

20 
	`¥ötf
("0x%8.8x", (
Êags
 & 
FLAG_MASK
));

21 i‡–
Êags
 & 
SDL_HWSURFACE
 ) {

22 
	`¥ötf
(" SDL_HWSURFACE");

24 
	`¥ötf
(" SDL_SWSURFACE");

26 i‡–
Êags
 & 
SDL_FULLSCREEN
 ) {

27 
	`¥ötf
(" | SDL_FULLSCREEN");

29 i‡–
Êags
 & 
SDL_DOUBLEBUF
 ) {

30 
	`¥ötf
(" | SDL_DOUBLEBUF");

32 i‡–
Êags
 & 
SDL_SRCCOLORKEY
 ) {

33 
	`¥ötf
(" | SDL_SRCCOLORKEY");

35 i‡–
Êags
 & 
SDL_SRCALPHA
 ) {

36 
	`¥ötf
(" | SDL_SRCALPHA");

38 i‡–
Êags
 & 
SDL_RLEACCEL
 ) {

39 
	`¥ötf
(" | SDL_RLEACCEL");

41 i‡–
Êags
 & 
SDL_RLEACCELOK
 ) {

42 
	`¥ötf
(" | SDL_RLEACCELOK");

44 
	}
}

46 
	$RunBlôTe°s
(
SDL_SurÁ˚
 *
s¸ìn
, SDL_SurÁ˚ *
bmp
, 
blôcou¡
)

48 
i
, 
j
;

49 
maxx
;

50 
maxy
;

51 
SDL_Re˘
 
d°
;

53 
maxx
 = ()
s¸ìn
->
w
 - 
bmp
->w + 1;

54 
maxy
 = ()
s¸ìn
->
h
 - 
bmp
->h + 1;

55  
i
 = 0; i < 
NUM_UPDATES
; ++i ) {

56  
j
 = 0; j < 
blôcou¡
; ++j ) {

57 i‡–
maxx
 ) {

58 
d°
.
x
 = 
	`ønd
(Ë% 
maxx
;

60 
d°
.
x
 = 0;

62 i‡–
maxy
 ) {

63 
d°
.
y
 = 
	`ønd
(Ë% 
maxy
;

65 
d°
.
y
 = 0;

67 
d°
.
w
 = 
bmp
->w;

68 
d°
.
h
 = 
bmp
->h;

69 
	`SDL_BlôSurÁ˚
(
bmp
, 
NULL
, 
s¸ìn
, &
d°
);

71 
	`SDL_Flù
(
s¸ìn
);

74  
i
;

75 
	}
}

77 
	$RunModeTe°s
(
SDL_SurÁ˚
 *
s¸ìn
)

79 
Uöt32
 
thí
, 
now
;

80 
Uöt32
 
‰ames
;

81 
£c⁄ds
;

82 
i
;

83 
Uöt8
 
r
, 
g
, 
b
;

84 
SDL_SurÁ˚
 *
bmp
, *
bmpcc
, *
tmp
;

85 
SDL_Evít
 
evít
;

87  
	`SDL_PﬁlEvít
(&
evít
) ) {

88 i‡–
evít
.
ty≥
 =
SDL_KEYDOWN
 )

93 
	`¥ötf
("Running color fillánd fullscreen updateÅest\n");

94 
thí
 = 
	`SDL_GëTicks
();

95 
‰ames
 = 0;

96  
i
 = 0; i < 256; ++i ) {

97 
r
 = 
i
;

98 
g
 = 0;

99 
b
 = 0;

100 
	`SDL_FûlRe˘
(
s¸ìn
, 
NULL
, 
	`SDL_M≠RGB
(s¸ìn->
f‹m©
, 
r
, 
g
, 
b
));

101 
	`SDL_Flù
(
s¸ìn
);

102 ++
‰ames
;

104  
i
 = 0; i < 256; ++i ) {

105 
r
 = 0;

106 
g
 = 
i
;

107 
b
 = 0;

108 
	`SDL_FûlRe˘
(
s¸ìn
, 
NULL
, 
	`SDL_M≠RGB
(s¸ìn->
f‹m©
, 
r
, 
g
, 
b
));

109 
	`SDL_Flù
(
s¸ìn
);

110 ++
‰ames
;

112  
i
 = 0; i < 256; ++i ) {

113 
r
 = 0;

114 
g
 = 0;

115 
b
 = 
i
;

116 
	`SDL_FûlRe˘
(
s¸ìn
, 
NULL
, 
	`SDL_M≠RGB
(s¸ìn->
f‹m©
, 
r
, 
g
, 
b
));

117 
	`SDL_Flù
(
s¸ìn
);

118 ++
‰ames
;

120 
now
 = 
	`SDL_GëTicks
();

121 
£c⁄ds
 = ()(
now
 - 
thí
) / 1000.0f;

122 i‡–
£c⁄ds
 > 0.0f ) {

123 
	`¥ötf
("%d fûl†™d flù†ö %2.2‡£c⁄ds, %2.2‡FPS\n", 
‰ames
, 
£c⁄ds
, ()frames / seconds);

125 
	`¥ötf
("%d fûl†™d flù†ö zîÿ£c⁄ds!n", 
‰ames
);

129 
	`SDL_FûlRe˘
(
s¸ìn
, 
NULL
, 
	`SDL_M≠RGB
(s¸ìn->
f‹m©
, 0, 0, 0));

130 
	`SDL_Flù
(
s¸ìn
);

132  
	`SDL_PﬁlEvít
(&
evít
) ) {

133 i‡–
evít
.
ty≥
 =
SDL_KEYDOWN
 )

138 
bmp
 = 
	`SDL_LﬂdBMP
("sample.bmp");

139 i‡–! 
bmp
 ) {

140 
	`¥ötf
("Couldn'àlﬂd sam∂e.bmp: %s\n", 
	`SDL_GëEº‹
());

143 
	`¥ötf
("Running freshlyÜoaded blitÅest: %dx%dát %d bpp, flags: ",

144 
bmp
->
w
, bmp->
h
, bmp->
f‹m©
->
BôsPîPixñ
);

145 
	`PrötFœgs
(
bmp
->
Êags
);

146 
	`¥ötf
("\n");

147 
thí
 = 
	`SDL_GëTicks
();

148 
‰ames
 = 
	`RunBlôTe°s
(
s¸ìn
, 
bmp
, 
NUM_BLITS
);

149 
now
 = 
	`SDL_GëTicks
();

150 
£c⁄ds
 = ()(
now
 - 
thí
) / 1000.0f;

151 i‡–
£c⁄ds
 > 0.0f ) {

152 
	`¥ötf
("%d blô†/ %d upd©e†ö %2.2‡£c⁄ds, %2.2‡FPS\n", 
NUM_BLITS
*
‰ames
, fømes, 
£c⁄ds
, ()frames / seconds);

154 
	`¥ötf
("%d blô†/ %d upd©e†ö zîÿ£c⁄ds!\n", 
NUM_BLITS
*
‰ames
, frames);

158 
	`SDL_FûlRe˘
(
s¸ìn
, 
NULL
, 
	`SDL_M≠RGB
(s¸ìn->
f‹m©
, 0, 0, 0));

159 
	`SDL_Flù
(
s¸ìn
);

161  
	`SDL_PﬁlEvít
(&
evít
) ) {

162 i‡–
evít
.
ty≥
 =
SDL_KEYDOWN
 )

167 
bmpcc
 = 
	`SDL_LﬂdBMP
("sample.bmp");

168 i‡–! 
bmpcc
 ) {

169 
	`¥ötf
("Couldn'àlﬂd sam∂e.bmp: %s\n", 
	`SDL_GëEº‹
());

172 
	`¥ötf
("Running freshlyÜoaded cc blitÅest: %dx%dát %d bpp, flags: ",

173 
bmpcc
->
w
, bmpcc->
h
, bmpcc->
f‹m©
->
BôsPîPixñ
);

174 
	`SDL_SëCﬁ‹Key
(
bmpcc
, 
SDL_SRCCOLORKEY
 | 
SDL_RLEACCEL
, *(
Uöt8
 *)bmpcc->
pixñs
);

176 
	`PrötFœgs
(
bmpcc
->
Êags
);

177 
	`¥ötf
("\n");

178 
thí
 = 
	`SDL_GëTicks
();

179 
‰ames
 = 
	`RunBlôTe°s
(
s¸ìn
, 
bmpcc
, 
NUM_BLITS
);

180 
now
 = 
	`SDL_GëTicks
();

181 
£c⁄ds
 = ()(
now
 - 
thí
) / 1000.0f;

182 i‡–
£c⁄ds
 > 0.0f ) {

183 
	`¥ötf
("%d c¯blô†/ %d upd©e†ö %2.2‡£c⁄ds, %2.2‡FPS\n", 
NUM_BLITS
*
‰ames
, fømes, 
£c⁄ds
, ()frames / seconds);

185 
	`¥ötf
("%d c¯blô†/ %d upd©e†ö zîÿ£c⁄ds!\n", 
NUM_BLITS
*
‰ames
, frames);

189 
	`SDL_FûlRe˘
(
s¸ìn
, 
NULL
, 
	`SDL_M≠RGB
(s¸ìn->
f‹m©
, 0, 0, 0));

190 
	`SDL_Flù
(
s¸ìn
);

192  
	`SDL_PﬁlEvít
(&
evít
) ) {

193 i‡–
evít
.
ty≥
 =
SDL_KEYDOWN
 )

198 
tmp
 = 
bmp
;

199 
bmp
 = 
	`SDL_Di•œyF‹m©
(bmp);

200 
	`SDL_FªeSurÁ˚
(
tmp
);

201 i‡–! 
bmp
 ) {

202 
	`¥ötf
("Couldn'àc⁄vîàßm∂e.bmp: %s\n", 
	`SDL_GëEº‹
());

205 
	`¥ötf
("Running display format blitÅest: %dx%dát %d bpp, flags: ",

206 
bmp
->
w
, bmp->
h
, bmp->
f‹m©
->
BôsPîPixñ
);

207 
	`PrötFœgs
(
bmp
->
Êags
);

208 
	`¥ötf
("\n");

209 
thí
 = 
	`SDL_GëTicks
();

210 
‰ames
 = 
	`RunBlôTe°s
(
s¸ìn
, 
bmp
, 
NUM_BLITS
);

211 
now
 = 
	`SDL_GëTicks
();

212 
£c⁄ds
 = ()(
now
 - 
thí
) / 1000.0f;

213 i‡–
£c⁄ds
 > 0.0f ) {

214 
	`¥ötf
("%d blô†/ %d upd©e†ö %2.2‡£c⁄ds, %2.2‡FPS\n", 
NUM_BLITS
*
‰ames
, fømes, 
£c⁄ds
, ()frames / seconds);

216 
	`¥ötf
("%d blô†/ %d upd©e†ö zîÿ£c⁄ds!\n", 
NUM_BLITS
*
‰ames
, frames);

220 
	`SDL_FûlRe˘
(
s¸ìn
, 
NULL
, 
	`SDL_M≠RGB
(s¸ìn->
f‹m©
, 0, 0, 0));

221 
	`SDL_Flù
(
s¸ìn
);

223  
	`SDL_PﬁlEvít
(&
evít
) ) {

224 i‡–
evít
.
ty≥
 =
SDL_KEYDOWN
 )

229 
tmp
 = 
bmpcc
;

230 
bmpcc
 = 
	`SDL_Di•œyF‹m©
(bmpcc);

231 
	`SDL_FªeSurÁ˚
(
tmp
);

232 i‡–! 
bmpcc
 ) {

233 
	`¥ötf
("Couldn'àc⁄vîàßm∂e.bmp: %s\n", 
	`SDL_GëEº‹
());

236 
	`¥ötf
("Running display format cc blitÅest: %dx%dát %d bpp, flags: ",

237 
bmpcc
->
w
, bmpcc->
h
, bmpcc->
f‹m©
->
BôsPîPixñ
);

238 
	`PrötFœgs
(
bmpcc
->
Êags
);

239 
	`¥ötf
("\n");

240 
thí
 = 
	`SDL_GëTicks
();

241 
‰ames
 = 
	`RunBlôTe°s
(
s¸ìn
, 
bmpcc
, 
NUM_BLITS
);

242 
now
 = 
	`SDL_GëTicks
();

243 
£c⁄ds
 = ()(
now
 - 
thí
) / 1000.0f;

244 i‡–
£c⁄ds
 > 0.0f ) {

245 
	`¥ötf
("%d c¯blô†/ %d upd©e†ö %2.2‡£c⁄ds, %2.2‡FPS\n", 
NUM_BLITS
*
‰ames
, fømes, 
£c⁄ds
, ()frames / seconds);

247 
	`¥ötf
("%d c¯blô†/ %d upd©e†ö zîÿ£c⁄ds!\n", 
NUM_BLITS
*
‰ames
, frames);

251 
	`SDL_FûlRe˘
(
s¸ìn
, 
NULL
, 
	`SDL_M≠RGB
(s¸ìn->
f‹m©
, 0, 0, 0));

252 
	`SDL_Flù
(
s¸ìn
);

254  
	`SDL_PﬁlEvít
(&
evít
) ) {

255 i‡–
evít
.
ty≥
 =
SDL_KEYDOWN
 )

260 i‡(
bmp
->
f‹m©
->
BôsPîPixñ
>8)

262 
	`SDL_FªeSurÁ˚
(
bmp
);

263 
bmp
 = 
	`SDL_LﬂdBMP
("sample.bmp");

264 
	`SDL_SëAÕha
(
bmp
, 
SDL_SRCALPHA
, 85);

265 
tmp
 = 
bmp
;

266 
bmp
 = 
	`SDL_Di•œyF‹m©
(bmp);

267 
	`SDL_FªeSurÁ˚
(
tmp
);

268 i‡–! 
bmp
 ) {

269 
	`¥ötf
("Couldn'àc⁄vîàßm∂e.bmp: %s\n", 
	`SDL_GëEº‹
());

272 
	`¥ötf
("Running display formatálpha blitÅest: %dx%dát %d bpp, flags: ",

273 
bmp
->
w
, bmp->
h
, bmp->
f‹m©
->
BôsPîPixñ
);

274 
	`PrötFœgs
(
bmp
->
Êags
);

275 
	`¥ötf
("\n");

276 
thí
 = 
	`SDL_GëTicks
();

277 
‰ames
 = 
	`RunBlôTe°s
(
s¸ìn
, 
bmp
, 
NUM_BLITS
);

278 
now
 = 
	`SDL_GëTicks
();

279 
£c⁄ds
 = ()(
now
 - 
thí
) / 1000.0f;

280 i‡–
£c⁄ds
 > 0.0f ) {

281 
	`¥ötf
("%dáÕh®blô†/ %d upd©e†ö %2.2‡£c⁄ds, %2.2‡FPS\n", 
NUM_BLITS
*
‰ames
, fømes, 
£c⁄ds
, ()frames / seconds);

283 
	`¥ötf
("%dáÕh®blô†/ %d upd©e†ö zîÿ£c⁄ds!\n", 
NUM_BLITS
*
‰ames
, frames);

288 
	`SDL_FûlRe˘
(
s¸ìn
, 
NULL
, 
	`SDL_M≠RGB
(s¸ìn->
f‹m©
, 0, 0, 0));

289 
	`SDL_Flù
(
s¸ìn
);

291  
	`SDL_PﬁlEvít
(&
evít
) ) {

292 i‡–
evít
.
ty≥
 =
SDL_KEYDOWN
 )

297 i‡(
bmp
->
f‹m©
->
BôsPîPixñ
>8)

299 
	`SDL_FªeSurÁ˚
(
bmpcc
);

300 
bmpcc
 = 
	`SDL_LﬂdBMP
("sample.bmp");

301 
	`SDL_SëAÕha
(
bmpcc
, 
SDL_SRCALPHA
, 85);

302 
	`SDL_SëCﬁ‹Key
(
bmpcc
, 
SDL_SRCCOLORKEY
 | 
SDL_RLEACCEL
, *(
Uöt8
 *)bmpcc->
pixñs
);

303 
tmp
 = 
bmpcc
;

304 
bmpcc
 = 
	`SDL_Di•œyF‹m©
(bmpcc);

305 
	`SDL_FªeSurÁ˚
(
tmp
);

306 i‡–! 
bmpcc
 ) {

307 
	`¥ötf
("Couldn'àc⁄vîàßm∂e.bmp: %s\n", 
	`SDL_GëEº‹
());

310 
	`¥ötf
("Running display format cc+alpha blitÅest: %dx%dát %d bpp, flags: ",

311 
bmpcc
->
w
, bmpcc->
h
, bmpcc->
f‹m©
->
BôsPîPixñ
);

312 
	`PrötFœgs
(
bmpcc
->
Êags
);

313 
	`¥ötf
("\n");

314 
thí
 = 
	`SDL_GëTicks
();

315 
‰ames
 = 
	`RunBlôTe°s
(
s¸ìn
, 
bmpcc
, 
NUM_BLITS
);

316 
now
 = 
	`SDL_GëTicks
();

317 
£c⁄ds
 = ()(
now
 - 
thí
) / 1000.0f;

318 i‡–
£c⁄ds
 > 0.0f ) {

319 
	`¥ötf
("%d cc+Æph®blô†/ %d upd©e†ö %2.2‡£c⁄ds, %2.2‡FPS\n", 
NUM_BLITS
*
‰ames
, fømes, 
£c⁄ds
, ()frames / seconds);

321 
	`¥ötf
("%d cc+Æph®blô†/ %d upd©e†ö zîÿ£c⁄ds!\n", 
NUM_BLITS
*
‰ames
, frames);

325 
	`SDL_FªeSurÁ˚
(
bmpcc
);

326 
	`SDL_FªeSurÁ˚
(
bmp
);

328  
	`SDL_PﬁlEvít
(&
evít
) ) {

329 i‡–
evít
.
ty≥
 =
SDL_KEYDOWN
 )

333 
	}
}

335 
	$RunVideoTe°s
()

338 
w
, 
h
, 
bµ
;

339 } 
mode_li°
[] = {

344 c⁄° 
Uöt32
 
Êags
[] = {

345 (
SDL_SWSURFACE
),

346 (
SDL_SWSURFACE
 | 
SDL_FULLSCREEN
),

347 (
SDL_HWSURFACE
 | 
SDL_FULLSCREEN
),

348 (
SDL_HWSURFACE
 | 
SDL_FULLSCREEN
 | 
SDL_DOUBLEBUF
)

350 
i
, 
j
;

351 
SDL_SurÁ˚
 *
s¸ìn
;

354 
	`SDL_WM_SëC≠ti⁄
("SDL Video Benchmark", "vidtest");

355 
	`SDL_ShowCurs‹
(0);

356  
i
 = 0; i < 
	`SDL_TABLESIZE
(
mode_li°
); ++i ) {

357  
j
 = 0; j < 
	`SDL_TABLESIZE
(
Êags
); ++j ) {

358 
	`¥ötf
("===================================\n");

359 
	`¥ötf
("Setting video mode: %dx%dát %d bpp, flags: ",

360 
mode_li°
[
i
].
w
,

361 
mode_li°
[
i
].
h
,

362 
mode_li°
[
i
].
bµ
);

363 
	`PrötFœgs
(
Êags
[
j
]);

364 
	`¥ötf
("\n");

365 
s¸ìn
 = 
	`SDL_SëVideoMode
(
mode_li°
[
i
].
w
,

366 
mode_li°
[
i
].
h
,

367 
mode_li°
[
i
].
bµ
,

368 
Êags
[
j
]);

369 i‡–! 
s¸ìn
 ) {

370 
	`¥ötf
("Sëtög videÿmodêÁûed: %s\n", 
	`SDL_GëEº‹
());

373 i‡–(
s¸ìn
->
Êags
 & 
FLAG_MASK
Ë!Êags[
j
] ) {

374 
	`¥ötf
("Flags didn't match: ");

375 
	`PrötFœgs
(
s¸ìn
->
Êags
);

376 
	`¥ötf
("\n");

379 i‡–! 
	`RunModeTe°s
(
s¸ìn
) ) {

384 
	}
}

386 
	$maö
(
¨gc
, *
¨gv
[])

388 c⁄° 
SDL_VideoInfo
 *
öfo
;

389 
i
;

390 
SDL_Re˘
 **
modes
;

391 
drivî
[128];

393 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 ) {

394 
	`Ârötf
(
°dîr
,

395 "Couldn'àöôülizêSDL: %s\n", 
	`SDL_GëEº‹
());

396 
	`exô
(1);

398 i‡–
	`SDL_VideoDrivîName
(
drivî
, (driver)) ) {

399 
	`¥ötf
("Videÿdrivî: %s\n", 
drivî
);

401 
öfo
 = 
	`SDL_GëVideoInfo
();

402 
	`¥ötf
(

404 
öfo
->
cuºít_w
, info->
cuºít_h
, info->
vfmt
->
BôsPîPixñ
);

405 i‡–
öfo
->
vfmt
->
∑Àâe
 =
NULL
 ) {

406 
	`¥ötf
(" Red Mask = 0x%.8x\n", 
öfo
->
vfmt
->
Rmask
);

407 
	`¥ötf
(" Gªí Mask = 0x%.8x\n", 
öfo
->
vfmt
->
Gmask
);

408 
	`¥ötf
(" BluêMask = 0x%.8x\n", 
öfo
->
vfmt
->
Bmask
);

411 
modes
 = 
	`SDL_Li°Modes
(
NULL
, 
SDL_FULLSCREEN
);

412 i‡–
modes
 =(
SDL_Re˘
 **)0 ) {

413 
	`¥ötf
("Noávailable fullscreen video modes\n");

415 i‡–
modes
 =(
SDL_Re˘
 **)-1 ) {

416 
	`¥ötf
("No special fullscreen video modes\n");

418 
	`¥ötf
("Fullscreen video modes:\n");

419  
i
=0; 
modes
[i]; ++i ) {

420 
	`¥ötf
("\t%dx%dx%d\n", 
modes
[
i
]->
w
, modes[i]->
h
, 
öfo
->
vfmt
->
BôsPîPixñ
);

423 i‡–
öfo
->
wm_avaûabÀ
 ) {

424 
	`¥ötf
("A window manager isávailable\n");

426 i‡–
öfo
->
hw_avaûabÀ
 ) {

427 
	`¥ötf
("Hardware surfacesáreávailable (%dK video memory)\n",

428 
öfo
->
video_mem
);

430 i‡–
öfo
->
blô_hw
 ) {

431 
	`¥ötf
(

434 i‡–
öfo
->
blô_hw_CC
 ) {

435 
	`¥ötf
(

438 i‡–
öfo
->
blô_hw_A
 ) {

439 
	`¥ötf
(

442 i‡–
öfo
->
blô_sw
 ) {

443 
	`¥ötf
(

446 i‡–
öfo
->
blô_sw_CC
 ) {

447 
	`¥ötf
(

450 i‡–
öfo
->
blô_sw_A
 ) {

451 
	`¥ötf
(

454 i‡–
öfo
->
blô_fûl
 ) {

455 
	`¥ötf
(

459 i‡–
¨gv
[1] && (
	`°rcmp
(argv[1], "-benchmark") == 0) ) {

460 
	`RunVideoTe°s
();

463 
	`SDL_Quô
();

465 
	}
}

	@SDL-win/test/testwin.c

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<°rög.h
>

8 
	#BENCHMARK_SDL


	)

10 
	#NOTICE
(
X
Ë
	`¥ötf
("%s", X);

	)

12 
	~"SDL.h
"

15 
	$quô
(
rc
)

17 
	`SDL_Quô
();

18 
	`exô
(
rc
);

19 
	}
}

21 
	$DøwPi˘
(
SDL_SurÁ˚
 *
s¸ìn
, *
bmpfûe
,

22 
•ìdy
, 
Êù
, 
noÁde
)

24 
SDL_SurÁ˚
 *
pi˘uª
;

25 
SDL_Re˘
 
de°
, 
upd©e
;

26 
i
, 
˚¡îed
;

27 
ncﬁ‹s
;

28 
SDL_Cﬁ‹
 *
cﬁ‹s
, *
cm≠
;

31 i‡–
bmpfûe
 =
NULL
 ) {

32 
bmpfûe
 = "sample.bmp";

34 
	`Ârötf
(
°dîr
, "LﬂdögÖi˘uª: %s\n", 
bmpfûe
);

35 
pi˘uª
 = 
	`SDL_LﬂdBMP
(
bmpfûe
);

36 i‡–
pi˘uª
 =
NULL
 ) {

37 
	`Ârötf
(
°dîr
, "Couldn'àlﬂd %s: %s\n", 
bmpfûe
,

38 
	`SDL_GëEº‹
());

43 i‡–
pi˘uª
->
f‹m©
->
∑Àâe
 ) {

44 
ncﬁ‹s
 = 
pi˘uª
->
f‹m©
->
∑Àâe
->ncolors;

45 
cﬁ‹s
 = (
SDL_Cﬁ‹
 *)
	`mÆloc
(
ncﬁ‹s
*(SDL_Color));

46 
cm≠
 = (
SDL_Cﬁ‹
 *)
	`mÆloc
(
ncﬁ‹s
*(SDL_Color));

47 
	`mem˝y
(
cﬁ‹s
, 
pi˘uª
->
f‹m©
->
∑Àâe
->colors,

48 
ncﬁ‹s
*(
SDL_Cﬁ‹
));

50 
r
, 
g
, 
b
;

53 
ncﬁ‹s
 = 256;

54 
cﬁ‹s
 = (
SDL_Cﬁ‹
 *)
	`mÆloc
(
ncﬁ‹s
*(SDL_Color));

55 
cm≠
 = (
SDL_Cﬁ‹
 *)
	`mÆloc
(
ncﬁ‹s
*(SDL_Color));

58  
r
=0;Ñ<8; ++r ) {

59  
g
=0; g<8; ++g ) {

60  
b
=0; b<4; ++b ) {

61 
i
 = ((
r
<<5)|(
g
<<2)|
b
);

62 
cﬁ‹s
[
i
].
r
 =Ñ<<5;

63 
cﬁ‹s
[
i
].
g
 = g<<5;

64 
cﬁ‹s
[
i
].
b
 = b<<6;

69 
	`NOTICE
("testwin: setting colors\n");

70 i‡–! 
	`SDL_SëCﬁ‹s
(
s¸ìn
, 
cﬁ‹s
, 0, 
ncﬁ‹s
) &&

71 (
s¸ìn
->
f‹m©
->
∑Àâe
 !
NULL
) ) {

72 
	`Ârötf
(
°dîr
,

79 i‡–
	`SDL_LockSurÁ˚
(
s¸ìn
) == 0 ) {

80 
Uöt32
 
bœck
;

81 
Uöt8
 *
pixñs
;

83 
bœck
 = 
	`SDL_M≠RGB
(
s¸ìn
->
f‹m©
, 0, 0, 0);

84 
pixñs
 = (
Uöt8
 *)
s¸ìn
->pixels;

85  
i
=0; i<
s¸ìn
->
h
; ++i ) {

86 
	`mem£t
(
pixñs
, 
bœck
,

87 
s¸ìn
->
w
*s¸ìn->
f‹m©
->
ByãsPîPixñ
);

88 
pixñs
 +
s¸ìn
->
pôch
;

90 
	`SDL_U∆ockSurÁ˚
(
s¸ìn
);

91 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0, 0, 0, 0);

95 i‡–
•ìdy
 ) {

96 
SDL_SurÁ˚
 *
di•œyfmt
;

98 
	`Ârötf
(
°dîr
, "ConvertingÖicture\n");

99 
di•œyfmt
 = 
	`SDL_Di•œyF‹m©
(
pi˘uª
);

100 i‡–
di•œyfmt
 =
NULL
 ) {

101 
	`Ârötf
(
°dîr
,

102 "Couldn'àc⁄vîàimage: %s\n", 
	`SDL_GëEº‹
());

103 
d⁄e
;

105 
	`SDL_FªeSurÁ˚
(
pi˘uª
);

106 
pi˘uª
 = 
di•œyfmt
;

108 
	`¥ötf
("(image surfaceÜocated in %s memory)\n",

109 (
pi˘uª
->
Êags
&
SDL_HWSURFACE
) ? "video" : "system");

110 
˚¡îed
 = (
s¸ìn
->
w
 - 
pi˘uª
->w)/2;

111 i‡–
˚¡îed
 < 0 ) {

112 
˚¡îed
 = 0;

114 
de°
.
y
 = (
s¸ìn
->
h
 - 
pi˘uª
->h)/2;

115 
de°
.
w
 = 
pi˘uª
->w;

116 
de°
.
h
 = 
pi˘uª
->h;

117 
	`NOTICE
("testwin: moving image\n");

118  
i
=0; i<=
˚¡îed
; ++i ) {

119 
de°
.
x
 = 
i
;

120 
upd©e
 = 
de°
;

121 i‡–
	`SDL_BlôSurÁ˚
(
pi˘uª
, 
NULL
, 
s¸ìn
, &
upd©e
) < 0 ) {

122 
	`Ârötf
(
°dîr
, "Blô faûed: %s\n", 
	`SDL_GëEº‹
());

125 i‡–
Êù
 ) {

126 
	`SDL_Flù
(
s¸ìn
);

128 
	`SDL_Upd©eRe˘s
(
s¸ìn
, 1, &
upd©e
);

132 #ifde‡
SCREENSHOT


133 i‡–
	`SDL_SaveBMP
(
s¸ìn
, "screen.bmp") < 0 )

134 
	`¥ötf
("Couldn'àßvês¸ìn: %s\n", 
	`SDL_GëEº‹
());

137 #i‚de‡
BENCHMARK_SDL


139 
	`SDL_Dñay
(5*1000);

142 i‡–! 
noÁde
 ) {

143 
max°ï
;

144 
SDL_Cﬁ‹
 
föÆ
;

145 
SDL_Cﬁ‹
 
∑lcﬁ‹s
[256];

147 
Söt16
 
r
, 
g
, 
b
;

148 } 
cdi°
[256];

150 
	`NOTICE
("testwin: fading out...\n");

151 
	`mem˝y
(
cm≠
, 
cﬁ‹s
, 
ncﬁ‹s
*(
SDL_Cﬁ‹
));

152 
max°ï
 = 32-1;

153 
föÆ
.
r
 = 0xFF;

154 
föÆ
.
g
 = 0x00;

155 
föÆ
.
b
 = 0x00;

156 
	`mem˝y
(
∑lcﬁ‹s
, 
cﬁ‹s
, 
ncﬁ‹s
*(
SDL_Cﬁ‹
));

157  
i
=0; i<
ncﬁ‹s
; ++i ) {

158 
cdi°
[
i
].
r
 = 
föÆ
.r-
∑lcﬁ‹s
[i].r;

159 
cdi°
[
i
].
g
 = 
föÆ
.g-
∑lcﬁ‹s
[i].g;

160 
cdi°
[
i
].
b
 = 
föÆ
.b-
∑lcﬁ‹s
[i].b;

162  
i
=0; i<=
max°ï
/2; ++i ) {

163 
c
;

164  
c
=0; c<
ncﬁ‹s
; ++c ) {

165 
cﬁ‹s
[
c
].
r
 =

166 
∑lcﬁ‹s
[
c
].
r
+((
cdi°
[c].r*
i
))/
max°ï
;

167 
cﬁ‹s
[
c
].
g
 =

168 
∑lcﬁ‹s
[
c
].
g
+((
cdi°
[c].g*
i
))/
max°ï
;

169 
cﬁ‹s
[
c
].
b
 =

170 
∑lcﬁ‹s
[
c
].
b
+((
cdi°
[c].b*
i
))/
max°ï
;

172 
	`SDL_SëCﬁ‹s
(
s¸ìn
, 
cﬁ‹s
, 0, 
ncﬁ‹s
);

173 
	`SDL_Dñay
(1);

175 
föÆ
.
r
 = 0x00;

176 
föÆ
.
g
 = 0x00;

177 
föÆ
.
b
 = 0x00;

178 
	`mem˝y
(
∑lcﬁ‹s
, 
cﬁ‹s
, 
ncﬁ‹s
*(
SDL_Cﬁ‹
));

179  
i
=0; i<
ncﬁ‹s
; ++i ) {

180 
cdi°
[
i
].
r
 = 
föÆ
.r-
∑lcﬁ‹s
[i].r;

181 
cdi°
[
i
].
g
 = 
föÆ
.g-
∑lcﬁ‹s
[i].g;

182 
cdi°
[
i
].
b
 = 
föÆ
.b-
∑lcﬁ‹s
[i].b;

184 
max°ï
 /= 2;

185  
i
=0; i<=
max°ï
; ++i ) {

186 
c
;

187  
c
=0; c<
ncﬁ‹s
; ++c ) {

188 
cﬁ‹s
[
c
].
r
 =

189 
∑lcﬁ‹s
[
c
].
r
+((
cdi°
[c].r*
i
))/
max°ï
;

190 
cﬁ‹s
[
c
].
g
 =

191 
∑lcﬁ‹s
[
c
].
g
+((
cdi°
[c].g*
i
))/
max°ï
;

192 
cﬁ‹s
[
c
].
b
 =

193 
∑lcﬁ‹s
[
c
].
b
+((
cdi°
[c].b*
i
))/
max°ï
;

195 
	`SDL_SëCﬁ‹s
(
s¸ìn
, 
cﬁ‹s
, 0, 
ncﬁ‹s
);

196 
	`SDL_Dñay
(1);

198  
i
=0; i<
ncﬁ‹s
; ++i ) {

199 
cﬁ‹s
[
i
].
r
 = 
föÆ
.r;

200 
cﬁ‹s
[
i
].
g
 = 
föÆ
.g;

201 
cﬁ‹s
[
i
].
b
 = 
föÆ
.b;

203 
	`SDL_SëCﬁ‹s
(
s¸ìn
, 
cﬁ‹s
, 0, 
ncﬁ‹s
);

204 
	`NOTICE
("testwin: fading in...\n");

205 
	`mem˝y
(
∑lcﬁ‹s
, 
cﬁ‹s
, 
ncﬁ‹s
*(
SDL_Cﬁ‹
));

206  
i
=0; i<
ncﬁ‹s
; ++i ) {

207 
cdi°
[
i
].
r
 = 
cm≠
[i].r-
∑lcﬁ‹s
[i].r;

208 
cdi°
[
i
].
g
 = 
cm≠
[i].g-
∑lcﬁ‹s
[i].g;

209 
cdi°
[
i
].
b
 = 
cm≠
[i].b-
∑lcﬁ‹s
[i].b;

211  
i
=0; i<=
max°ï
; ++i ) {

212 
c
;

213  
c
=0; c<
ncﬁ‹s
; ++c ) {

214 
cﬁ‹s
[
c
].
r
 =

215 
∑lcﬁ‹s
[
c
].
r
+((
cdi°
[c].r*
i
))/
max°ï
;

216 
cﬁ‹s
[
c
].
g
 =

217 
∑lcﬁ‹s
[
c
].
g
+((
cdi°
[c].g*
i
))/
max°ï
;

218 
cﬁ‹s
[
c
].
b
 =

219 
∑lcﬁ‹s
[
c
].
b
+((
cdi°
[c].b*
i
))/
max°ï
;

221 
	`SDL_SëCﬁ‹s
(
s¸ìn
, 
cﬁ‹s
, 0, 
ncﬁ‹s
);

222 
	`SDL_Dñay
(1);

224 
	`NOTICE
("testwin: fading over\n");

227 
d⁄e
:

229 
	`SDL_FªeSurÁ˚
(
pi˘uª
);

230 
	`‰ì
(
cﬁ‹s
); fªe(
cm≠
);

232 
	}
}

234 
	$maö
(
¨gc
, *
¨gv
[])

236 
SDL_SurÁ˚
 *
s¸ìn
;

238 
•ìdy
, 
Êù
, 
noÁde
;

239 
dñay
;

240 
w
, 
h
;

241 
desúed_bµ
;

242 
Uöt32
 
video_Êags
;

243 #ifde‡
BENCHMARK_SDL


244 
Uöt32
 
thí
, 
now
;

247 
•ìdy
 = 0;

248 
Êù
 = 0;

249 
noÁde
 = 0;

250 
dñay
 = 1;

252 #ifde‡
_WIN32_WCE


253 
w
 = 240;

254 
h
 = 320;

255 
desúed_bµ
 = 8;

256 
video_Êags
 = 
SDL_FULLSCREEN
;

258 
w
 = 640;

259 
h
 = 480;

260 
desúed_bµ
 = 0;

261 
video_Êags
 = 0;

263 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 ) {

264 
	`Ârötf
(
°dîr
,

265 "Couldn'àöôülizêSDL: %s\n", 
	`SDL_GëEº‹
());

269  
¨gc
 > 1 ) {

270 i‡–
	`°rcmp
(
¨gv
[1], "-speedy") == 0 ) {

271 
•ìdy
 = 1;

272 
¨gv
 += 1;

273 
¨gc
 -= 1;

275 i‡–
	`°rcmp
(
¨gv
[1], "-nofade") == 0 ) {

276 
noÁde
 = 1;

277 
¨gv
 += 1;

278 
¨gc
 -= 1;

280 i‡–
	`°rcmp
(
¨gv
[1], "-delay") == 0 ) {

281 i‡–
¨gv
[2] ) {

282 
dñay
 = 
	`©oi
(
¨gv
[2]);

283 
¨gv
 += 2;

284 
¨gc
 -= 2;

286 
	`Ârötf
(
°dîr
,

288 
	`quô
(1);

291 i‡–
	`°rcmp
(
¨gv
[1], "-width") == 0 ) {

292 i‡–
¨gv
[2] && ((
w
 = 
	`©oi
(argv[2])) > 0) ) {

293 
¨gv
 += 2;

294 
¨gc
 -= 2;

296 
	`Ârötf
(
°dîr
,

298 
	`quô
(1);

301 i‡–
	`°rcmp
(
¨gv
[1], "-height") == 0 ) {

302 i‡–
¨gv
[2] && ((
h
 = 
	`©oi
(argv[2])) > 0) ) {

303 
¨gv
 += 2;

304 
¨gc
 -= 2;

306 
	`Ârötf
(
°dîr
,

308 
	`quô
(1);

311 i‡–
	`°rcmp
(
¨gv
[1], "-bpp") == 0 ) {

312 i‡–
¨gv
[2] ) {

313 
desúed_bµ
 = 
	`©oi
(
¨gv
[2]);

314 
¨gv
 += 2;

315 
¨gc
 -= 2;

317 
	`Ârötf
(
°dîr
,

319 
	`quô
(1);

322 i‡–
	`°rcmp
(
¨gv
[1], "-warp") == 0 ) {

323 
video_Êags
 |
SDL_HWPALETTE
;

324 
¨gv
 += 1;

325 
¨gc
 -= 1;

327 i‡–
	`°rcmp
(
¨gv
[1], "-hw") == 0 ) {

328 
video_Êags
 |
SDL_HWSURFACE
;

329 
¨gv
 += 1;

330 
¨gc
 -= 1;

332 i‡–
	`°rcmp
(
¨gv
[1], "-flip") == 0 ) {

333 
video_Êags
 |
SDL_DOUBLEBUF
;

334 
¨gv
 += 1;

335 
¨gc
 -= 1;

337 i‡–
	`°rcmp
(
¨gv
[1], "-fullscreen") == 0 ) {

338 
video_Êags
 |
SDL_FULLSCREEN
;

339 
¨gv
 += 1;

340 
¨gc
 -= 1;

346 
s¸ìn
 = 
	`SDL_SëVideoMode
(
w
, 
h
, 
desúed_bµ
, 
video_Êags
);

347 i‡–
s¸ìn
 =
NULL
 ) {

348 
	`Ârötf
(
°dîr
, "Couldn't set %dx%dx%d video mode: %s\n",

349 
w
, 
h
, 
desúed_bµ
, 
	`SDL_GëEº‹
());

350 
	`quô
(1);

352 
	`¥ötf
("Set%s %dx%dx%d mode\n",

353 
s¸ìn
->
Êags
 & 
SDL_FULLSCREEN
 ? " fullscreen" : "",

354 
s¸ìn
->
w
, s¸ìn->
h
, s¸ìn->
f‹m©
->
BôsPîPixñ
);

355 
	`¥ötf
("(video surfaceÜocated in %s memory)\n",

356 (
s¸ìn
->
Êags
&
SDL_HWSURFACE
) ? "video" : "system");

357 i‡–
s¸ìn
->
Êags
 & 
SDL_DOUBLEBUF
 ) {

358 
	`¥ötf
("Double-bufferingÉnabled\n");

359 
Êù
 = 1;

363 
	`SDL_WM_SëC≠ti⁄
("SDLÅest window", "testwin");

366 #ifde‡
BENCHMARK_SDL


367 
thí
 = 
	`SDL_GëTicks
();

368 
	`DøwPi˘
(
s¸ìn
, 
¨gv
[1], 
•ìdy
, 
Êù
, 
noÁde
);

369 
now
 = 
	`SDL_GëTicks
();

370 
	`¥ötf
("Time: %d mûli£c⁄ds\n", 
now
-
thí
);

372 
	`DøwPi˘
(
s¸ìn
, 
¨gv
[1], 
•ìdy
, 
Êù
, 
noÁde
);

374 
	`SDL_Dñay
(
dñay
*1000);

375 
	`SDL_Quô
();

377 
	}
}

	@SDL-win/test/testwm.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

8 
	~"SDL.h
"

11 
	gvisibÀ
 = 1;

13 
Uöt8
 
	gvideo_bµ
;

14 
Uöt32
 
	gvideo_Êags
;

17 
	$quô
(
rc
)

19 
	`SDL_Quô
();

20 
	`exô
(
rc
);

21 
	}
}

23 
	$SëVideoMode
(
w
, 
h
)

25 
SDL_SurÁ˚
 *
s¸ìn
;

26 
i
;

27 
Uöt8
 *
buf„r
;

28 
SDL_Cﬁ‹
 
∑Àâe
[256];

30 
s¸ìn
 = 
	`SDL_SëVideoMode
(
w
, 
h
, 
video_bµ
, 
video_Êags
);

31 i‡–
s¸ìn
 =
NULL
 ) {

32 
	`Ârötf
(
°dîr
, "Couldn't set %dx%dx%d video mode: %s\n",

33 
w
, 
h
, 
video_bµ
, 
	`SDL_GëEº‹
());

36 
	`¥ötf
("Ru¬ög i¿%†mode\n", 
s¸ìn
->
Êags
 & 
SDL_FULLSCREEN
 ?

40  
i
=0; i<256; ++i ) {

41 
∑Àâe
[
i
].
r
 = 255-i;

42 
∑Àâe
[
i
].
g
 = 255-i;

43 
∑Àâe
[
i
].
b
 = 255-i;

45 
	`SDL_SëCﬁ‹s
(
s¸ìn
, 
∑Àâe
, 0, 256);

46 i‡–
	`SDL_LockSurÁ˚
(
s¸ìn
) < 0 ) {

47 
	`Ârötf
(
°dîr
, "Couldn'tÜock display surface: %s\n",

48 
	`SDL_GëEº‹
());

51 
buf„r
 = (
Uöt8
 *)
s¸ìn
->
pixñs
;

52  
i
=0; i<
s¸ìn
->
h
; ++i ) {

53 
	`mem£t
(
buf„r
,(
i
*255)/
s¸ìn
->
h
,

54 
s¸ìn
->
w
*s¸ìn->
f‹m©
->
ByãsPîPixñ
);

55 
buf„r
 +
s¸ìn
->
pôch
;

57 
	`SDL_U∆ockSurÁ˚
(
s¸ìn
);

58 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0, 0, 0, 0);

61 
	}
}

63 
SDL_SurÁ˚
 *
	$LﬂdIc⁄SurÁ˚
(*
fûe
, 
Uöt8
 **
maskp
)

65 
SDL_SurÁ˚
 *
ic⁄
;

66 
Uöt8
 *
pixñs
;

67 
Uöt8
 *
mask
;

68 
mÀn
, 
i
, 
j
;

70 *
maskp
 = 
NULL
;

73 
ic⁄
 = 
	`SDL_LﬂdBMP
(
fûe
);

74 i‡–
ic⁄
 =
NULL
 ) {

75 
	`Ârötf
(
°dîr
, "Couldn'àlﬂd %s: %s\n", 
fûe
, 
	`SDL_GëEº‹
());

76 (
NULL
);

88 i‡–
ic⁄
->
f‹m©
->
∑Àâe
 =
NULL
 ) {

89 
	`Ârötf
(
°dîr
, "Icon must haveáÖalette!\n");

90 
	`SDL_FªeSurÁ˚
(
ic⁄
);

91 (
NULL
);

95 
	`SDL_SëCﬁ‹Key
(
ic⁄
, 
SDL_SRCCOLORKEY
, *((
Uöt8
 *)ic⁄->
pixñs
));

98 
pixñs
 = (
Uöt8
 *)
ic⁄
->pixels;

99 
	`¥ötf
("TransparentÖixel: (%d,%d,%d)\n",

100 
ic⁄
->
f‹m©
->
∑Àâe
->
cﬁ‹s
[*
pixñs
].
r
,

101 
ic⁄
->
f‹m©
->
∑Àâe
->
cﬁ‹s
[*
pixñs
].
g
,

102 
ic⁄
->
f‹m©
->
∑Àâe
->
cﬁ‹s
[*
pixñs
].
b
);

103 
mÀn
 = (
ic⁄
->
w
*ic⁄->
h
 + 7) / 8;

104 
mask
 = (
Uöt8
 *)
	`mÆloc
(
mÀn
);

105 i‡–
mask
 =
NULL
 ) {

106 
	`Ârötf
(
°dîr
, "Out of memory!\n");

107 
	`SDL_FªeSurÁ˚
(
ic⁄
);

108 (
NULL
);

110 
	`mem£t
(
mask
, 0, 
mÀn
);

111  
i
=0; i < 
ic⁄
->
h
; i++)

112 
j
=0; j < 
ic⁄
->
w
; j++) {

113 
pödex
 = 
i
 * 
ic⁄
->
pôch
 + 
j
;

114 
mödex
 = 
i
 * 
ic⁄
->
w
 + 
j
;

115 i‡–
pixñs
[
pödex
] != *pixels )

116 
mask
[
mödex
>>3] |= 1 << (7 - (mindex & 7));

118 *
maskp
 = 
mask
;

119 (
ic⁄
);

120 
	}
}

122 
	$HŸKey_ToggÀFuŒS¸ìn
()

124 
SDL_SurÁ˚
 *
s¸ìn
;

126 
s¸ìn
 = 
	`SDL_GëVideoSurÁ˚
();

127 i‡–
	`SDL_WM_ToggÀFuŒS¸ìn
(
s¸ìn
) ) {

128 
	`¥ötf
("Toggled fullscreen mode -Çow %s\n",

129 (
s¸ìn
->
Êags
&
SDL_FULLSCREEN
) ? "fullscreen" : "windowed");

131 
	`¥ötf
("UnableÅoÅoggle fullscreen mode\n");

132 
video_Êags
 ^
SDL_FULLSCREEN
;

133 
	`SëVideoMode
(
s¸ìn
->
w
, s¸ìn->
h
);

135 
	}
}

137 
	$HŸKey_ToggÀGøb
()

139 
SDL_GøbMode
 
mode
;

141 
	`¥ötf
("Ctrl-G:Åoggling input grab!\n");

142 
mode
 = 
	`SDL_WM_GøbI≈ut
(
SDL_GRAB_QUERY
);

143 i‡–
mode
 =
SDL_GRAB_ON
 ) {

144 
	`¥ötf
("Grab was on\n");

146 
	`¥ötf
("Grab was off\n");

148 
mode
 = 
	`SDL_WM_GøbI≈ut
(modê? 
SDL_GRAB_OFF
 : 
SDL_GRAB_ON
);

149 i‡–
mode
 =
SDL_GRAB_ON
 ) {

150 
	`¥ötf
("Grab isÇow on\n");

152 
	`¥ötf
("Grab isÇow off\n");

154 
	}
}

156 
	$HŸKey_Ic⁄ify
()

158 
	`¥ötf
("Ctrl-Z: iconifying window!\n");

159 
	`SDL_WM_Ic⁄ifyWödow
();

160 
	}
}

162 
	$HŸKey_Quô
()

164 
SDL_Evít
 
evít
;

166 
	`¥ötf
("Posting internal quitÑequest\n");

167 
evít
.
ty≥
 = 
SDL_USEREVENT
;

168 
	`SDL_PushEvít
(&
evít
);

169 
	}
}

171 
	$¥öt_modifõrs
()

173 
mod
;

174 
	`¥ötf
(" modifiers:");

175 
mod
 = 
	`SDL_GëModSèã
();

176 if(!
mod
) {

177 
	`¥ötf
(" (none)");

180 if(
mod
 & 
KMOD_LSHIFT
)

181 
	`¥ötf
(" LSHIFT");

182 if(
mod
 & 
KMOD_RSHIFT
)

183 
	`¥ötf
(" RSHIFT");

184 if(
mod
 & 
KMOD_LCTRL
)

185 
	`¥ötf
(" LCTRL");

186 if(
mod
 & 
KMOD_RCTRL
)

187 
	`¥ötf
(" RCTRL");

188 if(
mod
 & 
KMOD_LALT
)

189 
	`¥ötf
(" LALT");

190 if(
mod
 & 
KMOD_RALT
)

191 
	`¥ötf
(" RALT");

192 if(
mod
 & 
KMOD_LMETA
)

193 
	`¥ötf
(" LMETA");

194 if(
mod
 & 
KMOD_RMETA
)

195 
	`¥ötf
(" RMETA");

196 if(
mod
 & 
KMOD_NUM
)

197 
	`¥ötf
(" NUM");

198 if(
mod
 & 
KMOD_CAPS
)

199 
	`¥ötf
(" CAPS");

200 if(
mod
 & 
KMOD_MODE
)

201 
	`¥ötf
(" MODE");

202 
	}
}

204 
	$PrötKey
(c⁄° 
SDL_keysym
 *
sym
, 
¥es£d
)

207 i‡–
sym
->sym ) {

208 
	`¥ötf
("Key %s: %d-%†", 
¥es£d
 ? "pressed" : "released",

209 
sym
->sym, 
	`SDL_GëKeyName
(sym->sym));

211 
	`¥ötf
("Unknow¿Key (sˇncodê%dË%†", 
sym
->
sˇncode
,

212 
¥es£d
 ? "pressed" : "released");

216 i‡–
sym
->
unicode
 ) {

218 i‡–
sym
->
unicode
 < ' ' ) {

219 
	`¥ötf
(" (^%c)", 
sym
->
unicode
+'@');

221 #ifde‡
UNICODE


222 
	`¥ötf
(" (%c)", 
sym
->
unicode
);

225 i‡–!(
sym
->
unicode
 & 0xFF00) )

226 
	`¥ötf
(" (%c)", 
sym
->
unicode
);

228 
	`¥ötf
(" (0x%X)", 
sym
->
unicode
);

232 
	`¥öt_modifõrs
();

233 
	`¥ötf
("\n");

234 
	}
}

236 
SDLCALL
 
	$FûãrEvíts
(c⁄° 
SDL_Evít
 *
evít
)

238 
ªÆlyquô
 = 0;

240 
evít
->
ty≥
) {

242 
SDL_ACTIVEEVENT
:

244 
	`¥ötf
("App %s ",

245 
evít
->
a˘ive
.
gaö
 ? "gained" : "lost");

246 i‡–
evít
->
a˘ive
.
°©e
 & 
SDL_APPACTIVE
 )

247 
	`¥ötf
("active ");

248 i‡–
evít
->
a˘ive
.
°©e
 & 
SDL_APPINPUTFOCUS
 )

249 
	`¥ötf
("input ");

250 i‡–
evít
->
a˘ive
.
°©e
 & 
SDL_APPMOUSEFOCUS
 )

251 
	`¥ötf
("mouse ");

252 
	`¥ötf
("focus\n");

255 i‡–
evít
->
a˘ive
.
°©e
 & 
SDL_APPACTIVE
 ) {

256 
	`¥ötf
("App has been %s\n",

257 
evít
->
a˘ive
.
gaö
 ?

263 
SDL_MOUSEBUTTONDOWN
:

264 
SDL_MOUSEBUTTONUP
:

265 i‡–
evít
->
buâ⁄
.
°©e
 =
SDL_PRESSED
 ) {

266 
visibÀ
 = !visible;

267 
	`SDL_ShowCurs‹
(
visibÀ
);

269 
	`¥ötf
("Mouse button %d has been %s\n",

270 
evít
->
buâ⁄
.button,

271 (
evít
->
buâ⁄
.
°©e
 =
SDL_PRESSED
) ?

276 
SDL_MOUSEMOTION
:

278 
	`¥ötf
("Mouse motion: {%d,%d} (%d,%d)\n",

279 
evít
->
mŸi⁄
.
x
,Évít->mŸi⁄.
y
,

280 
evít
->
mŸi⁄
.
xªl
,Évít->mŸi⁄.
yªl
);

284 
SDL_KEYDOWN
:

285 
	`PrötKey
(&
evít
->
key
.
keysym
, 1);

286 i‡–
evít
->
key
.
keysym
.
sym
 =
SDLK_ESCAPE
 ) {

287 
	`HŸKey_Quô
();

289 i‡–(
evít
->
key
.
keysym
.
sym
 =
SDLK_g
) &&

290 (
evít
->
key
.
keysym
.
mod
 & 
KMOD_CTRL
) ) {

291 
	`HŸKey_ToggÀGøb
();

293 i‡–(
evít
->
key
.
keysym
.
sym
 =
SDLK_z
) &&

294 (
evít
->
key
.
keysym
.
mod
 & 
KMOD_CTRL
) ) {

295 
	`HŸKey_Ic⁄ify
();

297 i‡–(
evít
->
key
.
keysym
.
sym
 =
SDLK_RETURN
) &&

298 (
evít
->
key
.
keysym
.
mod
 & 
KMOD_ALT
) ) {

299 
	`HŸKey_ToggÀFuŒS¸ìn
();

303 
SDL_KEYUP
:

304 
	`PrötKey
(&
evít
->
key
.
keysym
, 0);

308 
SDL_VIDEORESIZE
:

312 
SDL_QUIT
:

313 i‡–! 
ªÆlyquô
 ) {

314 
ªÆlyquô
 = 1;

315 
	`¥ötf
("QuitÑequested\n");

318 
	`¥ötf
("Quit demanded\n");

324 
SDL_USEREVENT
:

331 
	}
}

333 
	$maö
(
¨gc
, *
¨gv
[])

335 
SDL_Evít
 
evít
;

336 *
tôÀ
;

337 
SDL_SurÁ˚
 *
ic⁄
;

338 
Uöt8
 *
ic⁄_mask
;

339 
∑r£d
;

340 
w
, 
h
;

342 i‡–
	`SDL_Inô
(
SDL_INIT_VIDEO
) < 0 ) {

343 
	`Ârötf
(
°dîr
,

344 "Couldn'àöôülizêSDL: %s\n", 
	`SDL_GëEº‹
());

349 
w
 = 640;

350 
h
 = 480;

351 
video_bµ
 = 8;

352 
video_Êags
 = 
SDL_SWSURFACE
;

353 
∑r£d
 = 1;

354  
∑r£d
 ) {

355 i‡–(
¨gc
 >2Ë&& (
	`°rcmp
(
¨gv
[1], "-fullscreen") == 0) ) {

356 
video_Êags
 |
SDL_FULLSCREEN
;

357 
¨gc
 -= 1;

358 
¨gv
 += 1;

360 i‡–(
¨gc
 >2Ë&& (
	`°rcmp
(
¨gv
[1], "-resize") == 0) ) {

361 
video_Êags
 |
SDL_RESIZABLE
;

362 
¨gc
 -= 1;

363 
¨gv
 += 1;

365 i‡–(
¨gc
 >2Ë&& (
	`°rcmp
(
¨gv
[1], "-noframe") == 0) ) {

366 
video_Êags
 |
SDL_NOFRAME
;

367 
¨gc
 -= 1;

368 
¨gv
 += 1;

370 i‡–(
¨gc
 >3Ë&& (
	`°rcmp
(
¨gv
[1], "-width") == 0) ) {

371 
w
 = 
	`©oi
(
¨gv
[2]);

372 
¨gc
 -= 2;

373 
¨gv
 += 2;

375 i‡–(
¨gc
 >3Ë&& (
	`°rcmp
(
¨gv
[1], "-height") == 0) ) {

376 
h
 = 
	`©oi
(
¨gv
[2]);

377 
¨gc
 -= 2;

378 
¨gv
 += 2;

380 i‡–(
¨gc
 >3Ë&& (
	`°rcmp
(
¨gv
[1], "-bpp") == 0) ) {

381 
video_bµ
 = 
	`©oi
(
¨gv
[2]);

382 
¨gc
 -= 2;

383 
¨gv
 += 2;

385 
∑r£d
 = 0;

390 
ic⁄
 = 
	`LﬂdIc⁄SurÁ˚
("ic⁄.bmp", &
ic⁄_mask
);

391 i‡–
ic⁄
 !
NULL
 ) {

392 
	`SDL_WM_SëIc⁄
(
ic⁄
, 
ic⁄_mask
);

394 i‡–
ic⁄_mask
 !
NULL
 )

395 
	`‰ì
(
ic⁄_mask
);

398 i‡–
¨gv
[1] =
NULL
 )

399 
tôÀ
 = "Testing 1.. 2.. 3...";

401 
tôÀ
 = 
¨gv
[1];

402 
	`SDL_WM_SëC≠ti⁄
(
tôÀ
, "testwm");

405 
	`SDL_WM_GëC≠ti⁄
(&
tôÀ
, 
NULL
);

406 i‡–
tôÀ
 )

407 
	`¥ötf
("TôÀ wa†£àto: %s\n", 
tôÀ
);

409 
	`¥ötf
("No windowÅitle was set!\n");

412 i‡–
	`SëVideoMode
(
w
, 
h
) < 0 ) {

413 
	`quô
(1);

417 
	`SDL_SëEvítFûãr
(
FûãrEvíts
);

420  
	`SDL_WaôEvít
(&
evít
) ) {

421 
evít
.
ty≥
) {

422 
SDL_VIDEORESIZE
:

423 
	`¥ötf
("GotáÑesizeÉvent: %dx%d\n",

424 
evít
.
ªsize
.
w
,Évít.ªsize.
h
);

425 
	`SëVideoMode
(
evít
.
ªsize
.
w
,Évít.ªsize.
h
);

427 
SDL_USEREVENT
:

428 
	`¥ötf
("Handling internal quitÑequest\n");

430 
SDL_QUIT
:

431 
	`¥ötf
("Bye bye..\n");

432 
	`quô
(0);

435 
	`¥ötf
("Warning: Event %d wasn't filtered\n",

436 
evít
.
ty≥
);

440 
	`¥ötf
("SDL_WaôEvít(Ëîr‹: %s\n", 
	`SDL_GëEº‹
());

441 
	`SDL_Quô
();

443 
	}
}

	@SDL-win/test/threadwin.c

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<°rög.h
>

8 
	~"SDL.h
"

9 
	~"SDL_thªad.h
"

12 
	gd⁄e
 = 0;

15 
	gvisibÀ
 = 1;

18 
	$quô
(
rc
)

20 
	`SDL_Quô
();

21 
	`exô
(
rc
);

22 
	}
}

24 
SDL_SurÁ˚
 *
	$LﬂdIc⁄SurÁ˚
(*
fûe
, 
Uöt8
 **
maskp
)

26 
SDL_SurÁ˚
 *
ic⁄
;

27 
Uöt8
 *
pixñs
;

28 
Uöt8
 *
mask
;

29 
mÀn
, 
i
;

31 *
maskp
 = 
NULL
;

34 
ic⁄
 = 
	`SDL_LﬂdBMP
(
fûe
);

35 i‡–
ic⁄
 =
NULL
 ) {

36 
	`Ârötf
(
°dîr
, "Couldn'àlﬂd %s: %s\n", 
fûe
, 
	`SDL_GëEº‹
());

37 (
NULL
);

41 i‡–(
ic⁄
->
w
%8) != 0 ) {

42 
	`Ârötf
(
°dîr
, "Icon width must beá multiple of 8!\n");

43 
	`SDL_FªeSurÁ˚
(
ic⁄
);

44 (
NULL
);

46 i‡–
ic⁄
->
f‹m©
->
∑Àâe
 =
NULL
 ) {

47 
	`Ârötf
(
°dîr
, "Icon must haveáÖalette!\n");

48 
	`SDL_FªeSurÁ˚
(
ic⁄
);

49 (
NULL
);

53 
	`SDL_SëCﬁ‹Key
(
ic⁄
, 
SDL_SRCCOLORKEY
, *((
Uöt8
 *)ic⁄->
pixñs
));

56 
pixñs
 = (
Uöt8
 *)
ic⁄
->pixels;

57 
	`¥ötf
("TransparentÖixel: (%d,%d,%d)\n",

58 
ic⁄
->
f‹m©
->
∑Àâe
->
cﬁ‹s
[*
pixñs
].
r
,

59 
ic⁄
->
f‹m©
->
∑Àâe
->
cﬁ‹s
[*
pixñs
].
g
,

60 
ic⁄
->
f‹m©
->
∑Àâe
->
cﬁ‹s
[*
pixñs
].
b
);

61 
mÀn
 = 
ic⁄
->
w
*ic⁄->
h
;

62 
mask
 = (
Uöt8
 *)
	`mÆloc
(
mÀn
/8);

63 i‡–
mask
 =
NULL
 ) {

64 
	`Ârötf
(
°dîr
, "Out of memory!\n");

65 
	`SDL_FªeSurÁ˚
(
ic⁄
);

66 (
NULL
);

68 
	`mem£t
(
mask
, 0, 
mÀn
/8);

69  
i
=0; i<
mÀn
; ) {

70 i‡–
pixñs
[
i
] != *pixels )

71 
mask
[
i
/8] |= 0x01;

72 ++
i
;

73 i‡–(
i
%8) != 0 )

74 
mask
[
i
/8] <<= 1;

76 *
maskp
 = 
mask
;

77 (
ic⁄
);

78 
	}
}

80 
SDLCALL
 
	$FûãrEvíts
(c⁄° 
SDL_Evít
 *
evít
)

82 
ªÆlyquô
 = 0;

84 
evít
->
ty≥
) {

86 
SDL_ACTIVEEVENT
:

88 
	`¥ötf
("App %s ",

89 
evít
->
a˘ive
.
gaö
 ? "gained" : "lost");

90 i‡–
evít
->
a˘ive
.
°©e
 & 
SDL_APPACTIVE
 )

91 
	`¥ötf
("active ");

92 i‡–
evít
->
a˘ive
.
°©e
 & 
SDL_APPMOUSEFOCUS
 )

93 
	`¥ötf
("mouse ");

94 i‡–
evít
->
a˘ive
.
°©e
 & 
SDL_APPINPUTFOCUS
 )

95 
	`¥ötf
("input ");

96 
	`¥ötf
("focus\n");

99 i‡–
evít
->
a˘ive
.
°©e
 & 
SDL_APPACTIVE
 ) {

100 
	`¥ötf
("App has been %s\n",

101 
evít
->
a˘ive
.
gaö
 ?

107 
SDL_QUIT
:

108 i‡–! 
ªÆlyquô
 ) {

109 
ªÆlyquô
 = 1;

110 
	`¥ötf
("QuitÑequested\n");

113 
	`¥ötf
("Quit demanded\n");

117 
SDL_MOUSEMOTION
:

118 
SDL_MOUSEBUTTONDOWN
:

119 
SDL_MOUSEBUTTONUP
:

120 
SDL_KEYDOWN
:

121 
SDL_KEYUP
:

128 
	}
}

130 
SDLCALL
 
	$H™dÀMou£
(*
unu£d
)

132 
SDL_Evít
 
evíts
[10];

133 
i
, 
found
;

134 
Uöt32
 
mask
;

137 
mask
 = (
SDL_MOUSEMOTIONMASK
|
SDL_MOUSEBUTTONDOWNMASK
|
SDL_MOUSEBUTTONUPMASK
);

138  ! 
d⁄e
 ) {

139 
found
 = 
	`SDL_PìpEvíts
(
evíts
, 10, 
SDL_GETEVENT
, 
mask
);

140  
i
=0; i<
found
; ++i ) {

141 
evíts
[
i
].
ty≥
) {

143 
SDL_MOUSEBUTTONDOWN
:

144 
SDL_MOUSEBUTTONUP
:

145 i‡–
evíts
[
i
].
buâ⁄
.
°©e
 =
SDL_PRESSED
 ) {

146 
visibÀ
 = !visible;

147 
	`SDL_ShowCurs‹
(
visibÀ
);

149 
	`¥ötf
("Mouse button %d has been %s\n",

150 
evíts
[
i
].
buâ⁄
.button,

151 (
evíts
[
i
].
buâ⁄
.
°©e
 =
SDL_PRESSED
) ?

155 
SDL_MOUSEMOTION
:

156 
	`¥ötf
("MouseÑelative motion: {%d,%d}\n",

157 
evíts
[
i
].
mŸi⁄
.
xªl
,Évíts[i].mŸi⁄.
yªl
);

162 
	`SDL_Dñay
(20);

165 
	}
}

167 
SDLCALL
 
	$H™dÀKeybﬂrd
(*
unu£d
)

169 
SDL_Evít
 
evíts
[10];

170 
i
, 
found
;

171 
Uöt32
 
mask
;

174 
mask
 = (
SDL_KEYDOWNMASK
|
SDL_KEYUPMASK
);

175  ! 
d⁄e
 ) {

176 
found
 = 
	`SDL_PìpEvíts
(
evíts
, 10, 
SDL_GETEVENT
, 
mask
);

177  
i
=0; i<
found
; ++i ) {

178 
evíts
[
i
].
ty≥
) {

180 
SDL_KEYDOWN
:

181 
SDL_KEYUP
:

182 
	`¥ötf
("Key '%c' (keysym==%d) has been %s\n",

183 
evíts
[
i
].
key
.
keysym
.
unicode
,

184 (Ë
evíts
[
i
].
key
.
keysym
.
sym
,

185 (
evíts
[
i
].
key
.
°©e
 =
SDL_PRESSED
) ?

189 i‡–
evíts
[
i
].
key
.
keysym
.
sym
 =
SDLK_ESCAPE
 ) {

190 
d⁄e
 = 1;

194 i‡(
evíts
[
i
].
key
.
°©e
 =
SDL_PRESSED
)

197 i‡–
evíts
[
i
].
key
.
keysym
.
sym
 =
SDLK_f
 ) {

198 
rc
 = 0;

199 
	`¥ötf
("attemptingÅoÅoggle fullscreen...\n");

200 
rc
 = 
	`SDL_WM_ToggÀFuŒS¸ìn
(
	`SDL_GëVideoSurÁ˚
());

201 
	`¥ötf
("SDL_WM_ToggÀFuŒS¸ì¿ªtu∫ed %d.\n", 
rc
);

204 i‡–
evíts
[
i
].
key
.
keysym
.
sym
 =
SDLK_g
 ) {

205 
SDL_GøbMode
 
m
;

206 
m
 = 
	`SDL_WM_GøbI≈ut
(
SDL_GRAB_QUERY
Ë=
SDL_GRAB_ON
 ?

207 
SDL_GRAB_OFF
 : 
SDL_GRAB_ON
;

208 
	`¥ötf
("attemptingÅoÅoggle input grabÅo %s...\n",

209 
m
 =
SDL_GRAB_ON
 ? "ON" : "OFF");

210 
	`SDL_WM_GøbI≈ut
(
m
);

211 
	`¥ötf
("attempt finished.\n");

218 
	`SDL_Dñay
(20);

221 
	}
}

223 
	$maö
(
¨gc
, *
¨gv
[])

225 
SDL_SurÁ˚
 *
s¸ìn
;

226 
SDL_SurÁ˚
 *
ic⁄
;

227 
Uöt8
 *
ic⁄_mask
;

228 
i
, 
∑r£d
;

229 
Uöt8
 *
buf„r
;

230 
SDL_Cﬁ‹
 
∑Àâe
[256];

231 
Uöt32
 
öô_Êags
;

232 
Uöt8
 
video_bµ
;

233 
Uöt32
 
video_Êags
;

234 
SDL_Thªad
 *
mou£_thªad
;

235 
SDL_Thªad
 *
keybd_thªad
;

238 
öô_Êags
 = 
SDL_INIT_VIDEO
;

239 
video_bµ
 = 8;

240 
video_Êags
 = 
SDL_SWSURFACE
;

241 
∑r£d
 = 1;

242  
∑r£d
 ) {

247 i‡–(
¨gc
 >2Ë&& (
	`°rcmp
(
¨gv
[1], "-threaded") == 0) ) {

248 
öô_Êags
 |
SDL_INIT_EVENTTHREAD
;

249 
¨gc
 -= 1;

250 
¨gv
 += 1;

251 
	`¥ötf
("Running withÅhreadedÉvents\n");

253 i‡–(
¨gc
 >2Ë&& (
	`°rcmp
(
¨gv
[1], "-fullscreen") == 0) ) {

254 
video_Êags
 |
SDL_FULLSCREEN
;

255 
¨gc
 -= 1;

256 
¨gv
 += 1;

258 i‡–(
¨gc
 >3Ë&& (
	`°rcmp
(
¨gv
[1], "-bpp") == 0) ) {

259 
video_bµ
 = 
	`©oi
(
¨gv
[2]);

260 
¨gc
 -= 2;

261 
¨gv
 += 2;

263 
∑r£d
 = 0;

268 i‡–
	`SDL_Inô
(
öô_Êags
) < 0 ) {

269 
	`Ârötf
(
°dîr
,

270 "Couldn'àöôülizêSDL: %s\n", 
	`SDL_GëEº‹
());

275 
ic⁄
 = 
	`LﬂdIc⁄SurÁ˚
("ic⁄.bmp", &
ic⁄_mask
);

276 i‡–
ic⁄
 !
NULL
 ) {

277 
	`SDL_WM_SëIc⁄
(
ic⁄
, 
ic⁄_mask
);

279 i‡–
ic⁄_mask
 !
NULL
 )

280 
	`‰ì
(
ic⁄_mask
);

283 
s¸ìn
 = 
	`SDL_SëVideoMode
(640, 480, 
video_bµ
, 
video_Êags
);

284 i‡–
s¸ìn
 =
NULL
 ) {

285 
	`Ârötf
(
°dîr
, "Couldn't set 640x480x%d video mode: %s\n",

286 
video_bµ
, 
	`SDL_GëEº‹
());

287 
	`quô
(1);

289 
	`¥ötf
("Ru¬ög i¿%†mode\n", 
s¸ìn
->
Êags
 & 
SDL_FULLSCREEN
 ?

293 
	`SDL_E«bÀUNICODE
(1);

296 
	`SDL_SëEvítFûãr
(
FûãrEvíts
);

299 
mou£_thªad
 = 
	`SDL_Cª©eThªad
(
H™dÀMou£
, 
NULL
);

300 
keybd_thªad
 = 
	`SDL_Cª©eThªad
(
H™dÀKeybﬂrd
, 
NULL
);

303  
i
=0; i<256; ++i ) {

304 
∑Àâe
[
i
].
r
 = 255-i;

305 
∑Àâe
[
i
].
g
 = 255-i;

306 
∑Àâe
[
i
].
b
 = 255-i;

308 
	`SDL_SëCﬁ‹s
(
s¸ìn
, 
∑Àâe
, 0, 256);

309 i‡–
	`SDL_LockSurÁ˚
(
s¸ìn
) < 0 ) {

310 
	`Ârötf
(
°dîr
, "Couldn'tÜock display surface: %s\n",

311 
	`SDL_GëEº‹
());

312 
	`quô
(2);

314 
buf„r
 = (
Uöt8
 *)
s¸ìn
->
pixñs
;

315  
i
=0; i<
s¸ìn
->
h
; ++i ) {

316 
	`mem£t
(
buf„r
,(
i
*255)/
s¸ìn
->
h
,

317 
s¸ìn
->
w
*s¸ìn->
f‹m©
->
ByãsPîPixñ
);

318 
buf„r
 +
s¸ìn
->
pôch
;

320 
	`SDL_U∆ockSurÁ˚
(
s¸ìn
);

321 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0, 0, 0, 0);

324  ! 
d⁄e
 ) {

325 i‡–! (
öô_Êags
 & 
SDL_INIT_EVENTTHREAD
) ) {

326 
	`SDL_PumpEvíts
();

328 i‡–
	`SDL_PìpEvíts
(
NULL
, 0, 
SDL_PEEKEVENT
, 
SDL_QUITMASK
) ) {

329 
d⁄e
 = 1;

332 
	`SDL_Dñay
(20);

334 
	`SDL_WaôThªad
(
mou£_thªad
, 
NULL
);

335 
	`SDL_WaôThªad
(
keybd_thªad
, 
NULL
);

336 
	`SDL_Quô
();

338 
	}
}

	@SDL-win/test/torturethread.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<sig«l.h
>

7 
	~<°rög.h
>

9 
	~"SDL.h
"

10 
	~"SDL_thªad.h
"

12 
	#NUMTHREADS
 10

	)

14 vﬁ©ûê
	gtime_f‹_thªads_to_dõ
[
NUMTHREADS
];

17 
	$quô
(
rc
)

19 
	`SDL_Quô
();

20 
	`exô
(
rc
);

21 
	}
}

23 
SDLCALL
 
	$SubThªadFunc
(*
d©a
) {

24 ! *(vﬁ©ûê*)
d©a
) {

28 
	}
}

30 
SDLCALL
 
	$ThªadFunc
(*
d©a
) {

31 
SDL_Thªad
 *
sub_thªads
[
NUMTHREADS
];

32 
Êags
[
NUMTHREADS
];

33 
i
;

34 
tid
 = ()(
uöçå_t
)
d©a
;

36 
	`Ârötf
(
°dîr
, "Cª©ög Thªad %d\n", 
tid
);

38 
i
 = 0; i < 
NUMTHREADS
; i++) {

39 
Êags
[
i
] = 0;

40 
sub_thªads
[
i
] = 
	`SDL_Cª©eThªad
(
SubThªadFunc
, &
Êags
[i]);

43 
	`¥ötf
("Thªad '%d' waôög f‹ sig«l\n", 
tid
);

44 
time_f‹_thªads_to_dõ
[
tid
] != 1) {

48 
	`¥ötf
("Thªad '%d' sídög sig«l†tÿsubthªads\n", 
tid
);

49 
i
 = 0; i < 
NUMTHREADS
; i++) {

50 
Êags
[
i
] = 1;

51 
	`SDL_WaôThªad
(
sub_thªads
[
i
], 
NULL
);

54 
	`¥ötf
("Thªad '%d'Éxôög!\n", 
tid
);

57 
	}
}

59 
	$maö
(
¨gc
, *
¨gv
[])

61 
SDL_Thªad
 *
thªads
[
NUMTHREADS
];

62 
i
;

65 i‡–
	`SDL_Inô
(0) < 0 ) {

66 
	`Ârötf
(
°dîr
, "Couldn'àöôülizêSDL: %s\n",
	`SDL_GëEº‹
());

70 
	`sig«l
(
SIGSEGV
, 
SIG_DFL
);

71 
i
 = 0; i < 
NUMTHREADS
; i++) {

72 
time_f‹_thªads_to_dõ
[
i
] = 0;

73 
thªads
[
i
] = 
	`SDL_Cª©eThªad
(
ThªadFunc
, (*)(
uöçå_t
)i);

75 i‡–
thªads
[
i
] =
NULL
 ) {

76 
	`Ârötf
(
°dîr
,

77 "Couldn'à¸óãÅhªad: %s\n", 
	`SDL_GëEº‹
());

78 
	`quô
(1);

82 
i
 = 0; i < 
NUMTHREADS
; i++) {

83 
time_f‹_thªads_to_dõ
[
i
] = 1;

86 
i
 = 0; i < 
NUMTHREADS
; i++) {

87 
	`SDL_WaôThªad
(
thªads
[
i
], 
NULL
);

89 
	`SDL_Quô
();

91 
	}
}

	@SDL/include/SDL.h

27 #i‚de‡
_SDL_H


28 
	#_SDL_H


	)

30 
	~"SDL_maö.h
"

31 
	~"SDL_°döc.h
"

32 
	~"SDL_audio.h
"

33 
	~"SDL_cdrom.h
"

34 
	~"SDL_˝uöfo.h
"

35 
	~"SDL_ídün.h
"

36 
	~"SDL_îr‹.h
"

37 
	~"SDL_evíts.h
"

38 
	~"SDL_lﬂdso.h
"

39 
	~"SDL_muãx.h
"

40 
	~"SDL_rw›s.h
"

41 
	~"SDL_thªad.h
"

42 
	~"SDL_timî.h
"

43 
	~"SDL_video.h
"

44 
	~"SDL_vîsi⁄.h
"

46 
	~"begö_code.h
"

48 #ifde‡
__˝lu•lus


61 
	#SDL_INIT_TIMER
 0x00000001

	)

62 
	#SDL_INIT_AUDIO
 0x00000010

	)

63 
	#SDL_INIT_VIDEO
 0x00000020

	)

64 
	#SDL_INIT_CDROM
 0x00000100

	)

65 
	#SDL_INIT_JOYSTICK
 0x00000200

	)

66 
	#SDL_INIT_NOPARACHUTE
 0x00100000

	)

67 
	#SDL_INIT_EVENTTHREAD
 0x01000000

	)

68 
	#SDL_INIT_EVERYTHING
 0x0000FFFF

	)

76 
DECLSPEC
 
SDLCALL
 
SDL_Inô
(
Uöt32
 
Êags
);

79 
DECLSPEC
 
SDLCALL
 
SDL_InôSubSy°em
(
Uöt32
 
Êags
);

82 
DECLSPEC
 
SDLCALL
 
SDL_QuôSubSy°em
(
Uöt32
 
Êags
);

88 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_WasInô
(Uöt32 
Êags
);

93 
DECLSPEC
 
SDLCALL
 
SDL_Quô
();

96 #ifde‡
__˝lu•lus


99 
	~"˛o£_code.h
"

	@SDL/include/SDL_active.h

28 #i‚de‡
_SDL_a˘ive_h


29 
	#_SDL_a˘ive_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


42 
	#SDL_APPMOUSEFOCUS
 0x01

	)

43 
	#SDL_APPINPUTFOCUS
 0x02

	)

44 
	#SDL_APPACTIVE
 0x04

	)

54 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_GëAµSèã
();

58 #ifde‡
__˝lu•lus


61 
	~"˛o£_code.h
"

	@SDL/include/SDL_audio.h

28 #i‚de‡
_SDL_audio_h


29 
	#_SDL_audio_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_ídün.h
"

34 
	~"SDL_muãx.h
"

35 
	~"SDL_thªad.h
"

36 
	~"SDL_rw›s.h
"

38 
	~"begö_code.h
"

40 #ifde‡
__˝lu•lus


74 
	sSDL_AudioS≥c
 {

75 
‰eq
;

76 
Uöt16
 
f‹m©
;

77 
Uöt8
 
ch™√ls
;

78 
Uöt8
 
sûí˚
;

79 
Uöt16
 
ßm∂es
;

80 
Uöt16
 
∑ddög
;

81 
Uöt32
 
size
;

91 (
SDLCALL
 *
ˇŒback
)(*
u£rd©a
, 
Uöt8
 *
°ªam
, 
Àn
);

92 *
u£rd©a
;

93 } 
	tSDL_AudioS≥c
;

100 
	#AUDIO_U8
 0x0008

	)

101 
	#AUDIO_S8
 0x8008

	)

102 
	#AUDIO_U16LSB
 0x0010

	)

103 
	#AUDIO_S16LSB
 0x8010

	)

104 
	#AUDIO_U16MSB
 0x1010

	)

105 
	#AUDIO_S16MSB
 0x9010

	)

106 
	#AUDIO_U16
 
AUDIO_U16LSB


	)

107 
	#AUDIO_S16
 
AUDIO_S16LSB


	)

113 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


114 
	#AUDIO_U16SYS
 
AUDIO_U16LSB


	)

115 
	#AUDIO_S16SYS
 
AUDIO_S16LSB


	)

117 
	#AUDIO_U16SYS
 
AUDIO_U16MSB


	)

118 
	#AUDIO_S16SYS
 
AUDIO_S16MSB


	)

126 
	sSDL_AudioCVT
 {

127 
√eded
;

128 
Uöt16
 
§c_f‹m©
;

129 
Uöt16
 
d°_f‹m©
;

130 
øã_ö¸
;

131 
Uöt8
 *
buf
;

132 
Àn
;

133 
Àn_cvt
;

134 
Àn_mu…
;

135 
Àn_øtio
;

136 (
SDLCALL
 *
fûãrs
[10])(
SDL_AudioCVT
 *
cvt
, 
Uöt16
 
f‹m©
);

137 
fûãr_ödex
;

138 } 
	tSDL_AudioCVT
;

150 
DECLSPEC
 
SDLCALL
 
SDL_AudioInô
(c⁄° *
drivî_«me
);

151 
DECLSPEC
 
SDLCALL
 
SDL_AudioQuô
();

159 
DECLSPEC
 * 
SDLCALL
 
SDL_AudioDrivîName
(*
«mebuf
, 
maxÀn
);

178 
DECLSPEC
 
SDLCALL
 
SDL_O≥nAudio
(
SDL_AudioS≥c
 *
desúed
, SDL_AudioS≥¯*
obèöed
);

181 
	gSDL_AUDIO_STOPPED
 = 0,

182 
	gSDL_AUDIO_PLAYING
,

183 
	gSDL_AUDIO_PAUSED


184 } 
	tSDL_audio°©us
;

187 
DECLSPEC
 
SDL_audio°©us
 
SDLCALL
 
SDL_GëAudioSètus
();

196 
DECLSPEC
 
SDLCALL
 
SDL_Pau£Audio
(
∑u£_⁄
);

215 
DECLSPEC
 
SDL_AudioS≥c
 * 
SDLCALL
 
SDL_LﬂdWAV_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
, SDL_AudioS≥¯*
•ec
, 
Uöt8
 **
audio_buf
, 
Uöt32
 *
audio_Àn
);

218 
	#SDL_LﬂdWAV
(
fûe
, 
•ec
, 
audio_buf
, 
audio_Àn
) \

219 
	`SDL_LﬂdWAV_RW
(
	`SDL_RWFromFûe
(
fûe
, "rb"),1, 
•ec
,
audio_buf
,
audio_Àn
)

	)

224 
DECLSPEC
 
SDLCALL
 
SDL_FªeWAV
(
Uöt8
 *
audio_buf
);

234 
DECLSPEC
 
SDLCALL
 
SDL_BuûdAudioCVT
(
SDL_AudioCVT
 *
cvt
,

235 
Uöt16
 
§c_f‹m©
, 
Uöt8
 
§c_ch™√ls
, 
§c_øã
,

236 
Uöt16
 
d°_f‹m©
, 
Uöt8
 
d°_ch™√ls
, 
d°_øã
);

247 
DECLSPEC
 
SDLCALL
 
SDL_C⁄vîtAudio
(
SDL_AudioCVT
 *
cvt
);

250 
	#SDL_MIX_MAXVOLUME
 128

	)

258 
DECLSPEC
 
SDLCALL
 
SDL_MixAudio
(
Uöt8
 *
d°
, c⁄° Uöt8 *
§c
, 
Uöt32
 
Àn
, 
vﬁume
);

268 
DECLSPEC
 
SDLCALL
 
SDL_LockAudio
();

269 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockAudio
();

275 
DECLSPEC
 
SDLCALL
 
SDL_Clo£Audio
();

279 #ifde‡
__˝lu•lus


282 
	~"˛o£_code.h
"

	@SDL/include/SDL_byteorder.h

29 
	~"SDL_ídün.h
"

	@SDL/include/SDL_cdrom.h

28 #i‚de‡
_SDL_cdrom_h


29 
	#_SDL_cdrom_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


48 
	#SDL_MAX_TRACKS
 99

	)

54 
	#SDL_AUDIO_TRACK
 0x00

	)

55 
	#SDL_DATA_TRACK
 0x04

	)

60 
CD_TRAYEMPTY
,

61 
CD_STOPPED
,

62 
CD_PLAYING
,

63 
CD_PAUSED
,

64 
CD_ERROR
 = -1

65 } 
	tCD°©us
;

68 
	#CD_INDRIVE
(
°©us
Ë(()(°©usË> 0)

	)

70 
	sSDL_CDåack
 {

71 
Uöt8
 
id
;

72 
Uöt8
 
ty≥
;

73 
Uöt16
 
unu£d
;

74 
Uöt32
 
Àngth
;

75 
Uöt32
 
off£t
;

76 } 
	tSDL_CDåack
;

79 
	sSDL_CD
 {

80 
id
;

81 
CD°©us
 
°©us
;

85 
numåacks
;

86 
cur_åack
;

87 
cur_‰ame
;

88 
SDL_CDåack
 
åack
[
SDL_MAX_TRACKS
+1];

90 } 
	tSDL_CD
;

96 
	#CD_FPS
 75

	)

97 
	#FRAMES_TO_MSF
(
f
, 
M
,
S
,
F
) { \

98 
vÆue
 = 
f
; \

99 *(
F
Ë
vÆue
%
CD_FPS
; \

100 
vÆue
 /
CD_FPS
; \

101 *(
S
Ë
vÆue
%60; \

102 
vÆue
 /= 60; \

103 *(
M
Ë
vÆue
; \

104 }

	)

105 
	#MSF_TO_FRAMES
(
M
, 
S
, 
F
Ë((M)*60*
CD_FPS
+(S)*CD_FPS+(F))

	)

114 
DECLSPEC
 
SDLCALL
 
SDL_CDNumDrives
();

123 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDL_CDName
(
drive
);

132 
DECLSPEC
 
SDL_CD
 * 
SDLCALL
 
SDL_CDO≥n
(
drive
);

139 
DECLSPEC
 
CD°©us
 
SDLCALL
 
SDL_CDSètus
(
SDL_CD
 *
cdrom
);

163 
DECLSPEC
 
SDLCALL
 
SDL_CDPœyTøcks
(
SDL_CD
 *
cdrom
,

164 
°¨t_åack
, 
°¨t_‰ame
, 
¡øcks
, 
n‰ames
);

170 
DECLSPEC
 
SDLCALL
 
SDL_CDPœy
(
SDL_CD
 *
cdrom
, 
°¨t
, 
Àngth
);

175 
DECLSPEC
 
SDLCALL
 
SDL_CDPau£
(
SDL_CD
 *
cdrom
);

180 
DECLSPEC
 
SDLCALL
 
SDL_CDResume
(
SDL_CD
 *
cdrom
);

185 
DECLSPEC
 
SDLCALL
 
SDL_CDSt›
(
SDL_CD
 *
cdrom
);

190 
DECLSPEC
 
SDLCALL
 
SDL_CDEje˘
(
SDL_CD
 *
cdrom
);

193 
DECLSPEC
 
SDLCALL
 
SDL_CDClo£
(
SDL_CD
 *
cdrom
);

197 #ifde‡
__˝lu•lus


200 
	~"˛o£_code.h
"

	@SDL/include/SDL_config.h

24 #i‚de‡
_SDL_c⁄fig_h


25 
	#_SDL_c⁄fig_h


	)

30 
	~"SDL_∂©f‹m.h
"

33 #ifde‡
_MSC_VER


34 #îr‹ 
You
 
should
 
c›y
 
ö˛ude
/
SDL_c⁄fig
.
h
. 
to
 include/SDL_config.h

53 
	#SDL_HAS_64BIT_TYPE
 1

	)

56 
	#SDL_BYTEORDER
 1234

	)

59 
	#HAVE_LIBC
 1

	)

60 #i‡
HAVE_LIBC


63 
	#HAVE_ALLOCA_H
 1

	)

64 
	#HAVE_SYS_TYPES_H
 1

	)

65 
	#HAVE_STDIO_H
 1

	)

66 
	#STDC_HEADERS
 1

	)

67 
	#HAVE_STDLIB_H
 1

	)

68 
	#HAVE_STDARG_H
 1

	)

69 
	#HAVE_MALLOC_H
 1

	)

70 
	#HAVE_MEMORY_H
 1

	)

71 
	#HAVE_STRING_H
 1

	)

72 
	#HAVE_STRINGS_H
 1

	)

73 
	#HAVE_INTTYPES_H
 1

	)

74 
	#HAVE_STDINT_H
 1

	)

75 
	#HAVE_CTYPE_H
 1

	)

76 
	#HAVE_MATH_H
 1

	)

77 
	#HAVE_ICONV_H
 1

	)

78 
	#HAVE_SIGNAL_H
 1

	)

82 
	#HAVE_MALLOC
 1

	)

83 
	#HAVE_CALLOC
 1

	)

84 
	#HAVE_REALLOC
 1

	)

85 
	#HAVE_FREE
 1

	)

86 
	#HAVE_ALLOCA
 1

	)

87 #i‚de‡
_WIN32


88 
	#HAVE_GETENV
 1

	)

89 
	#HAVE_PUTENV
 1

	)

90 
	#HAVE_UNSETENV
 1

	)

92 
	#HAVE_QSORT
 1

	)

93 
	#HAVE_ABS
 1

	)

94 
	#HAVE_BCOPY
 1

	)

95 
	#HAVE_MEMSET
 1

	)

96 
	#HAVE_MEMCPY
 1

	)

97 
	#HAVE_MEMMOVE
 1

	)

98 
	#HAVE_MEMCMP
 1

	)

99 
	#HAVE_STRLEN
 1

	)

102 
	#HAVE_STRDUP
 1

	)

108 
	#HAVE_STRCHR
 1

	)

109 
	#HAVE_STRRCHR
 1

	)

110 
	#HAVE_STRSTR
 1

	)

115 
	#HAVE_STRTOL
 1

	)

116 
	#HAVE_STRTOUL
 1

	)

119 
	#HAVE_STRTOLL
 1

	)

120 
	#HAVE_STRTOULL
 1

	)

121 
	#HAVE_STRTOD
 1

	)

122 
	#HAVE_ATOI
 1

	)

123 
	#HAVE_ATOF
 1

	)

124 
	#HAVE_STRCMP
 1

	)

125 
	#HAVE_STRNCMP
 1

	)

127 
	#HAVE_STRCASECMP
 1

	)

129 
	#HAVE_STRNCASECMP
 1

	)

130 
	#HAVE_SSCANF
 1

	)

131 
	#HAVE_SNPRINTF
 1

	)

132 
	#HAVE_VSNPRINTF
 1

	)

133 
	#HAVE_ICONV
 1

	)

134 
	#HAVE_SIGACTION
 1

	)

135 
	#HAVE_SA_SIGACTION
 1

	)

136 
	#HAVE_SETJMP
 1

	)

137 
	#HAVE_NANOSLEEP
 1

	)

139 
	#HAVE_GETPAGESIZE
 1

	)

140 
	#HAVE_MPROTECT
 1

	)

141 
	#HAVE_SEM_TIMEDWAIT
 1

	)

145 
	~<°d¨g.h
>

161 
	#SDL_AUDIO_DRIVER_ALSA
 1

	)

162 
	#SDL_AUDIO_DRIVER_ALSA_DYNAMIC
 "libasound.so.2"

	)

170 
	#SDL_AUDIO_DRIVER_DISK
 1

	)

171 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

174 
	#SDL_AUDIO_DRIVER_PULSE
 1

	)

175 
	#SDL_AUDIO_DRIVER_PULSE_DYNAMIC
 "libpul£-sim∂e.so.0"

	)

182 
	#SDL_AUDIO_DRIVER_OSS
 1

	)

197 
	#SDL_CDROM_LINUX
 1

	)

208 
	#SDL_INPUT_LINUXEV
 1

	)

214 
	#SDL_JOYSTICK_LINUX
 1

	)

226 
	#SDL_LOADSO_DLOPEN
 1

	)

238 
	#SDL_THREAD_PTHREAD
 1

	)

239 
	#SDL_THREAD_PTHREAD_RECURSIVE_MUTEX
 1

	)

252 
	#SDL_TIMER_UNIX
 1

	)

262 
	#SDL_VIDEO_DRIVER_DGA
 1

	)

265 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

266 
	#SDL_VIDEO_DRIVER_FBCON
 1

	)

285 
	#SDL_VIDEO_DRIVER_X11
 1

	)

286 
	#SDL_VIDEO_DRIVER_X11_DGAMOUSE
 1

	)

287 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC
 "libX11.so.6"

	)

288 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT
 "libXext.so.6"

	)

289 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR
 "libXøndr.so.2"

	)

290 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XRENDER
 "libXªndî.so.1"

	)

291 
	#SDL_VIDEO_DRIVER_X11_VIDMODE
 1

	)

292 
	#SDL_VIDEO_DRIVER_X11_XINERAMA
 1

	)

293 
	#SDL_VIDEO_DRIVER_X11_XME
 1

	)

294 
	#SDL_VIDEO_DRIVER_X11_XRANDR
 1

	)

295 
	#SDL_VIDEO_DRIVER_X11_XV
 1

	)

299 
	#SDL_VIDEO_OPENGL
 1

	)

300 
	#SDL_VIDEO_OPENGL_GLX
 1

	)

306 
	#SDL_VIDEO_DISABLE_SCREENSAVER
 1

	)

309 
	#SDL_ASSEMBLY_ROUTINES
 1

	)

	@SDL/include/SDL_config_dreamcast.h

23 #i‚de‡
_SDL_c⁄fig_dªamˇ°_h


24 
	#_SDL_c⁄fig_dªamˇ°_h


	)

26 
	~"SDL_∂©f‹m.h
"

30 sig√d 
	töt8_t
;

31 
	tuöt8_t
;

32 sig√d 
	töt16_t
;

33 
	tuöt16_t
;

34 sig√d 
	töt32_t
;

35 
	tuöt32_t
;

36 sig√d 
	töt64_t
;

37 
	tuöt64_t
;

38 
	tuöçå_t
;

39 
	#SDL_HAS_64BIT_TYPE
 1

	)

42 
	#HAVE_SYS_TYPES_H
 1

	)

43 
	#HAVE_STDIO_H
 1

	)

44 
	#STDC_HEADERS
 1

	)

45 
	#HAVE_STRING_H
 1

	)

46 
	#HAVE_CTYPE_H
 1

	)

49 
	#HAVE_MALLOC
 1

	)

50 
	#HAVE_CALLOC
 1

	)

51 
	#HAVE_REALLOC
 1

	)

52 
	#HAVE_FREE
 1

	)

53 
	#HAVE_ALLOCA
 1

	)

54 
	#HAVE_GETENV
 1

	)

55 
	#HAVE_PUTENV
 1

	)

56 
	#HAVE_QSORT
 1

	)

57 
	#HAVE_ABS
 1

	)

58 
	#HAVE_BCOPY
 1

	)

59 
	#HAVE_MEMSET
 1

	)

60 
	#HAVE_MEMCPY
 1

	)

61 
	#HAVE_MEMMOVE
 1

	)

62 
	#HAVE_MEMCMP
 1

	)

63 
	#HAVE_STRLEN
 1

	)

64 
	#HAVE_STRDUP
 1

	)

65 
	#HAVE_INDEX
 1

	)

66 
	#HAVE_RINDEX
 1

	)

67 
	#HAVE_STRCHR
 1

	)

68 
	#HAVE_STRRCHR
 1

	)

69 
	#HAVE_STRSTR
 1

	)

70 
	#HAVE_STRTOL
 1

	)

71 
	#HAVE_STRTOD
 1

	)

72 
	#HAVE_ATOI
 1

	)

73 
	#HAVE_ATOF
 1

	)

74 
	#HAVE_STRCMP
 1

	)

75 
	#HAVE_STRNCMP
 1

	)

76 
	#HAVE_STRICMP
 1

	)

77 
	#HAVE_STRCASECMP
 1

	)

78 
	#HAVE_SSCANF
 1

	)

79 
	#HAVE_SNPRINTF
 1

	)

80 
	#HAVE_VSNPRINTF
 1

	)

83 
	#SDL_AUDIO_DRIVER_DC
 1

	)

84 
	#SDL_AUDIO_DRIVER_DISK
 1

	)

85 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

88 
	#SDL_CDROM_DC
 1

	)

91 
	#SDL_JOYSTICK_DC
 1

	)

94 
	#SDL_LOADSO_DUMMY
 1

	)

97 
	#SDL_THREAD_DC
 1

	)

100 
	#SDL_TIMER_DC
 1

	)

103 
	#SDL_VIDEO_DRIVER_DC
 1

	)

104 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

	@SDL/include/SDL_config_macos.h

23 #i‚de‡
_SDL_c⁄fig_macos_h


24 
	#_SDL_c⁄fig_macos_h


	)

26 
	~"SDL_∂©f‹m.h
"

30 
	~<MacTy≥s.h
>

32 
SI¡8
 
	töt8_t
;

33 
UI¡8
 
	tuöt8_t
;

34 
SI¡16
 
	töt16_t
;

35 
UI¡16
 
	tuöt16_t
;

36 
SI¡32
 
	töt32_t
;

37 
UI¡32
 
	tuöt32_t
;

38 
SI¡64
 
	töt64_t
;

39 
UI¡64
 
	tuöt64_t
;

40 
	tuöçå_t
;

42 
	#SDL_HAS_64BIT_TYPE
 1

	)

45 
	#HAVE_STDIO_H
 1

	)

46 
	#STDC_HEADERS
 1

	)

47 
	#HAVE_STRING_H
 1

	)

48 
	#HAVE_CTYPE_H
 1

	)

49 
	#HAVE_MATH_H
 1

	)

50 
	#HAVE_SIGNAL_H
 1

	)

53 
	#HAVE_MALLOC
 1

	)

54 
	#HAVE_CALLOC
 1

	)

55 
	#HAVE_REALLOC
 1

	)

56 
	#HAVE_FREE
 1

	)

57 
	#HAVE_ALLOCA
 1

	)

58 
	#HAVE_ABS
 1

	)

59 
	#HAVE_MEMSET
 1

	)

60 
	#HAVE_MEMCPY
 1

	)

61 
	#HAVE_MEMMOVE
 1

	)

62 
	#HAVE_MEMCMP
 1

	)

63 
	#HAVE_STRLEN
 1

	)

64 
	#HAVE_STRCHR
 1

	)

65 
	#HAVE_STRRCHR
 1

	)

66 
	#HAVE_STRSTR
 1

	)

67 
	#HAVE_ITOA
 1

	)

68 
	#HAVE_STRTOL
 1

	)

69 
	#HAVE_STRTOD
 1

	)

70 
	#HAVE_ATOI
 1

	)

71 
	#HAVE_ATOF
 1

	)

72 
	#HAVE_STRCMP
 1

	)

73 
	#HAVE_STRNCMP
 1

	)

74 
	#HAVE_SSCANF
 1

	)

77 
	#SDL_AUDIO_DRIVER_SNDMGR
 1

	)

78 
	#SDL_AUDIO_DRIVER_DISK
 1

	)

79 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

82 #i‡
TARGET_API_MAC_CARBON


83 
	#SDL_CDROM_DUMMY
 1

	)

85 
	#SDL_CDROM_MACOS
 1

	)

89 #i‡
TARGET_API_MAC_CARBON


90 
	#SDL_JOYSTICK_DUMMY
 1

	)

92 
	#SDL_JOYSTICK_MACOS
 1

	)

96 
	#SDL_LOADSO_MACOS
 1

	)

99 
	#SDL_THREADS_DISABLED
 1

	)

102 
	#SDL_TIMER_MACOS
 1

	)

105 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

106 
	#SDL_VIDEO_DRIVER_DRAWSPROCKET
 1

	)

107 
	#SDL_VIDEO_DRIVER_TOOLBOX
 1

	)

110 
	#SDL_VIDEO_OPENGL
 1

	)

	@SDL/include/SDL_config_macosx.h

23 #i‚de‡
_SDL_c⁄fig_macosx_h


24 
	#_SDL_c⁄fig_macosx_h


	)

26 
	~"SDL_∂©f‹m.h
"

29 
	~<AvaûabûôyMa¸os.h
>

33 
	#SDL_HAS_64BIT_TYPE
 1

	)

37 #i‡–(
MAC_OS_X_VERSION_MIN_REQUIRED
 >1030Ë|| (!
deföed
(
__POWERPC__
)) )

38 
	#HAVE_ALLOCA_H
 1

	)

40 
	#HAVE_SYS_TYPES_H
 1

	)

41 
	#HAVE_STDIO_H
 1

	)

42 
	#STDC_HEADERS
 1

	)

43 
	#HAVE_STRING_H
 1

	)

44 
	#HAVE_INTTYPES_H
 1

	)

45 
	#HAVE_STDINT_H
 1

	)

46 
	#HAVE_CTYPE_H
 1

	)

47 
	#HAVE_MATH_H
 1

	)

48 
	#HAVE_SIGNAL_H
 1

	)

51 
	#HAVE_MALLOC
 1

	)

52 
	#HAVE_CALLOC
 1

	)

53 
	#HAVE_REALLOC
 1

	)

54 
	#HAVE_FREE
 1

	)

55 
	#HAVE_ALLOCA
 1

	)

56 
	#HAVE_GETENV
 1

	)

57 
	#HAVE_PUTENV
 1

	)

58 
	#HAVE_UNSETENV
 1

	)

59 
	#HAVE_QSORT
 1

	)

60 
	#HAVE_ABS
 1

	)

61 
	#HAVE_BCOPY
 1

	)

62 
	#HAVE_MEMSET
 1

	)

63 
	#HAVE_MEMCPY
 1

	)

64 
	#HAVE_MEMMOVE
 1

	)

65 
	#HAVE_MEMCMP
 1

	)

66 
	#HAVE_STRLEN
 1

	)

67 
	#HAVE_STRLCPY
 1

	)

68 
	#HAVE_STRLCAT
 1

	)

69 
	#HAVE_STRDUP
 1

	)

70 
	#HAVE_STRCHR
 1

	)

71 
	#HAVE_STRRCHR
 1

	)

72 
	#HAVE_STRSTR
 1

	)

73 
	#HAVE_STRTOL
 1

	)

74 
	#HAVE_STRTOUL
 1

	)

75 
	#HAVE_STRTOLL
 1

	)

76 
	#HAVE_STRTOULL
 1

	)

77 
	#HAVE_STRTOD
 1

	)

78 
	#HAVE_ATOI
 1

	)

79 
	#HAVE_ATOF
 1

	)

80 
	#HAVE_STRCMP
 1

	)

81 
	#HAVE_STRNCMP
 1

	)

82 
	#HAVE_STRCASECMP
 1

	)

83 
	#HAVE_STRNCASECMP
 1

	)

84 
	#HAVE_SSCANF
 1

	)

85 
	#HAVE_SNPRINTF
 1

	)

86 
	#HAVE_VSNPRINTF
 1

	)

87 
	#HAVE_SIGACTION
 1

	)

88 
	#HAVE_SETJMP
 1

	)

89 
	#HAVE_NANOSLEEP
 1

	)

92 
	#SDL_AUDIO_DRIVER_COREAUDIO
 1

	)

93 
	#SDL_AUDIO_DRIVER_DISK
 1

	)

94 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

97 
	#SDL_CDROM_MACOSX
 1

	)

100 
	#SDL_JOYSTICK_IOKIT
 1

	)

103 #ifde‡
__µc__


105 
	#SDL_LOADSO_DLCOMPAT
 1

	)

107 
	#SDL_LOADSO_DLOPEN
 1

	)

111 
	#SDL_THREAD_PTHREAD
 1

	)

112 
	#SDL_THREAD_PTHREAD_RECURSIVE_MUTEX
 1

	)

115 
	#SDL_TIMER_UNIX
 1

	)

118 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

119 #i‡((
deföed
 
TARGET_API_MAC_CARBON
) && (TARGET_API_MAC_CARBON))

120 
	#SDL_VIDEO_DRIVER_TOOLBOX
 1

	)

122 
	#SDL_VIDEO_DRIVER_QUARTZ
 1

	)

124 
	#SDL_VIDEO_DRIVER_DGA
 1

	)

125 
	#SDL_VIDEO_DRIVER_X11
 1

	)

126 
	#SDL_VIDEO_DRIVER_X11_DGAMOUSE
 1

	)

127 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC
 "/u§/X11R6/lib/libX11.6.dylib"

	)

128 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT
 "/u§/X11R6/lib/libXext.6.dylib"

	)

129 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR
 "/u§/X11R6/lib/libXøndr.2.dylib"

	)

130 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XRENDER
 "/u§/X11R6/lib/libXªndî.1.dylib"

	)

131 
	#SDL_VIDEO_DRIVER_X11_VIDMODE
 1

	)

132 
	#SDL_VIDEO_DRIVER_X11_XINERAMA
 1

	)

133 
	#SDL_VIDEO_DRIVER_X11_XME
 1

	)

134 
	#SDL_VIDEO_DRIVER_X11_XRANDR
 1

	)

135 
	#SDL_VIDEO_DRIVER_X11_XV
 1

	)

138 
	#SDL_VIDEO_OPENGL
 1

	)

139 
	#SDL_VIDEO_OPENGL_GLX
 1

	)

142 
	#SDL_VIDEO_DISABLE_SCREENSAVER
 1

	)

145 
	#SDL_ASSEMBLY_ROUTINES
 1

	)

146 #ifde‡
__µc__


147 
	#SDL_ALTIVEC_BLITTERS
 1

	)

	@SDL/include/SDL_config_minimal.h

23 #i‚de‡
_SDL_c⁄fig_möimÆ_h


24 
	#_SDL_c⁄fig_möimÆ_h


	)

26 
	~"SDL_∂©f‹m.h
"

30 
	~<°d¨g.h
>

32 sig√d 
	töt8_t
;

33 
	tuöt8_t
;

34 sig√d 
	töt16_t
;

35 
	tuöt16_t
;

36 sig√d 
	töt32_t
;

37 
	tuöt32_t
;

38 
	tsize_t
;

39 
	tuöçå_t
;

42 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

45 
	#SDL_CDROM_DISABLED
 1

	)

48 
	#SDL_JOYSTICK_DISABLED
 1

	)

51 
	#SDL_LOADSO_DISABLED
 1

	)

54 
	#SDL_THREADS_DISABLED
 1

	)

57 
	#SDL_TIMERS_DISABLED
 1

	)

60 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

	@SDL/include/SDL_config_nds.h

23 #i‚de‡
_SDL_c⁄fig_nds_h


24 
	#_SDL_c⁄fig_nds_h


	)

26 
	~"SDL_∂©f‹m.h
"

31 
	~"SDL_∂©f‹m.h
"

34 
	#SDL_HAS_64BIT_TYPE
 1

	)

37 
	#SDL_BYTEORDER
 1234

	)

40 
	#HAVE_ALLOCA_H
 1

	)

41 
	#HAVE_SYS_TYPES_H
 1

	)

42 
	#HAVE_STDIO_H
 1

	)

43 
	#STDC_HEADERS
 1

	)

44 
	#HAVE_STDLIB_H
 1

	)

45 
	#HAVE_STDARG_H
 1

	)

46 
	#HAVE_MALLOC_H
 1

	)

47 
	#HAVE_STRING_H
 1

	)

48 
	#HAVE_INTTYPES_H
 1

	)

49 
	#HAVE_STDINT_H
 1

	)

50 
	#HAVE_CTYPE_H
 1

	)

51 
	#HAVE_MATH_H
 1

	)

52 
	#HAVE_ICONV_H
 1

	)

53 
	#HAVE_SIGNAL_H
 1

	)

56 
	#HAVE_MALLOC
 1

	)

57 
	#HAVE_CALLOC
 1

	)

58 
	#HAVE_REALLOC
 1

	)

59 
	#HAVE_FREE
 1

	)

60 
	#HAVE_ALLOCA
 1

	)

61 
	#HAVE_GETENV
 1

	)

62 
	#HAVE_PUTENV
 1

	)

63 
	#HAVE_UNSETENV
 1

	)

64 
	#HAVE_QSORT
 1

	)

65 
	#HAVE_ABS
 1

	)

66 
	#HAVE_BCOPY
 1

	)

67 
	#HAVE_MEMSET
 1

	)

68 
	#HAVE_MEMCPY
 1

	)

69 
	#HAVE_MEMMOVE
 1

	)

70 
	#HAVE_STRLEN
 1

	)

71 
	#HAVE_STRLCPY
 1

	)

72 
	#HAVE_STRLCAT
 1

	)

73 
	#HAVE_STRDUP
 1

	)

74 
	#HAVE_STRCHR
 1

	)

75 
	#HAVE_STRRCHR
 1

	)

76 
	#HAVE_STRSTR
 1

	)

77 
	#HAVE_STRTOL
 1

	)

78 
	#HAVE_STRTOUL
 1

	)

79 
	#HAVE_STRTOLL
 1

	)

80 
	#HAVE_STRTOULL
 1

	)

81 
	#HAVE_ATOI
 1

	)

82 
	#HAVE_ATOF
 1

	)

83 
	#HAVE_STRCMP
 1

	)

84 
	#HAVE_STRNCMP
 1

	)

85 
	#HAVE_STRCASECMP
 1

	)

86 
	#HAVE_STRNCASECMP
 1

	)

87 
	#HAVE_SSCANF
 1

	)

88 
	#HAVE_SNPRINTF
 1

	)

89 
	#HAVE_VSNPRINTF
 1

	)

90 
	#HAVE_SETJMP
 1

	)

93 
	#SDL_AUDIO_DRIVER_NDS
 1

	)

94 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

97 
	#SDL_CDROM_DISABLED
 1

	)

100 
	#SDL_JOYSTICK_NDS
 1

	)

103 
	#SDL_LOADSO_DISABLED
 1

	)

106 
	#SDL_THREADS_DISABLED
 1

	)

109 
	#SDL_TIMER_NDS
 1

	)

112 
	#SDL_VIDEO_DRIVER_NDS
 1

	)

113 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

	@SDL/include/SDL_config_os2.h

23 #i‚de‡
_SDL_c⁄fig_os2_h


24 
	#_SDL_c⁄fig_os2_h


	)

26 
	~"SDL_∂©f‹m.h
"

30 sig√d 
	töt8_t
;

31 
	tuöt8_t
;

32 sig√d 
	töt16_t
;

33 
	tuöt16_t
;

34 sig√d 
	töt32_t
;

35 
	tuöt32_t
;

36 
	tsize_t
;

37 
	tuöçå_t
;

38 sig√d 
	töt64_t
;

39 
	tuöt64_t
;

41 
	#SDL_HAS_64BIT_TYPE
 1

	)

44 
	#HAVE_LIBC
 1

	)

47 
	#HAVE_SYS_TYPES_H
 1

	)

48 
	#HAVE_STDIO_H
 1

	)

49 
	#STDC_HEADERS
 1

	)

50 
	#HAVE_STDLIB_H
 1

	)

51 
	#HAVE_STDARG_H
 1

	)

52 
	#HAVE_MALLOC_H
 1

	)

53 
	#HAVE_MEMORY_H
 1

	)

54 
	#HAVE_STRING_H
 1

	)

55 
	#HAVE_STRINGS_H
 1

	)

56 
	#HAVE_INTTYPES_H
 1

	)

57 
	#HAVE_STDINT_H
 1

	)

58 
	#HAVE_CTYPE_H
 1

	)

59 
	#HAVE_MATH_H
 1

	)

60 
	#HAVE_SIGNAL_H
 1

	)

63 
	#HAVE_MALLOC
 1

	)

64 
	#HAVE_CALLOC
 1

	)

65 
	#HAVE_REALLOC
 1

	)

66 
	#HAVE_FREE
 1

	)

67 
	#HAVE_ALLOCA
 1

	)

68 
	#HAVE_GETENV
 1

	)

69 
	#HAVE_PUTENV
 1

	)

70 
	#HAVE_UNSETENV
 1

	)

71 
	#HAVE_QSORT
 1

	)

72 
	#HAVE_ABS
 1

	)

73 
	#HAVE_BCOPY
 1

	)

74 
	#HAVE_MEMSET
 1

	)

75 
	#HAVE_MEMCPY
 1

	)

76 
	#HAVE_MEMMOVE
 1

	)

77 
	#HAVE_MEMCMP
 1

	)

78 
	#HAVE_STRLEN
 1

	)

79 
	#HAVE_STRLCPY
 1

	)

80 
	#HAVE_STRLCAT
 1

	)

81 
	#HAVE_STRDUP
 1

	)

82 
	#HAVE__STRREV
 1

	)

83 
	#HAVE__STRUPR
 1

	)

84 
	#HAVE__STRLWR
 1

	)

85 
	#HAVE_INDEX
 1

	)

86 
	#HAVE_RINDEX
 1

	)

87 
	#HAVE_STRCHR
 1

	)

88 
	#HAVE_STRRCHR
 1

	)

89 
	#HAVE_STRSTR
 1

	)

90 
	#HAVE_ITOA
 1

	)

91 
	#HAVE__LTOA
 1

	)

92 
	#HAVE__UITOA
 1

	)

93 
	#HAVE__ULTOA
 1

	)

94 
	#HAVE_STRTOL
 1

	)

95 
	#HAVE__I64TOA
 1

	)

96 
	#HAVE__UI64TOA
 1

	)

97 
	#HAVE_STRTOLL
 1

	)

98 
	#HAVE_STRTOD
 1

	)

99 
	#HAVE_ATOI
 1

	)

100 
	#HAVE_ATOF
 1

	)

101 
	#HAVE_STRCMP
 1

	)

102 
	#HAVE_STRNCMP
 1

	)

103 
	#HAVE_STRICMP
 1

	)

104 
	#HAVE_STRCASECMP
 1

	)

105 
	#HAVE_SSCANF
 1

	)

106 
	#HAVE_SNPRINTF
 1

	)

107 
	#HAVE_VSNPRINTF
 1

	)

108 
	#HAVE_SETJMP
 1

	)

109 
	#HAVE_CLOCK_GETTIME
 1

	)

112 
	#SDL_AUDIO_DRIVER_DART
 1

	)

113 
	#SDL_AUDIO_DRIVER_DISK
 1

	)

114 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

117 
	#SDL_CDROM_OS2
 1

	)

120 
	#SDL_JOYSTICK_OS2
 1

	)

123 
	#SDL_LOADSO_OS2
 1

	)

126 
	#SDL_THREAD_OS2
 1

	)

129 
	#SDL_TIMER_OS2
 1

	)

132 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

133 
	#SDL_VIDEO_DRIVER_OS2FS
 1

	)

139 
	#SDL_ASSEMBLY_ROUTINES
 1

	)

	@SDL/include/SDL_config_symbian.h

30 #i‚de‡
_SDL_CONFIG_SYMBIAN_H


31 
	#_SDL_CONFIG_SYMBIAN_H


	)

33 
	~"SDL_∂©f‹m.h
"

38 
	~<°d¨g.h
>

39 
	~<°ddef.h
>

42 #ifde‡
__GCCE__


43 
	#SYMBIAN32_GCCE


	)

46 #i‚de‡
_SIZE_T_DEFINED


47 
	tsize_t
;

50 #i‚de‡
_INTPTR_T_DECLARED


51 
	tuöçå_t
;

54 #i‚de‡
_INT8_T_DECLARED


55 sig√d 
	töt8_t
;

58 #i‚de‡
_UINT8_T_DECLARED


59 
	tuöt8_t
;

62 #i‚de‡
_INT16_T_DECLARED


63 sig√d 
	töt16_t
;

66 #i‚de‡
_UINT16_T_DECLARED


67 
	tuöt16_t
;

70 #i‚de‡
_INT32_T_DECLARED


71 sig√d 
	töt32_t
;

74 #i‚de‡
_UINT32_T_DECLARED


75 
	tuöt32_t
;

78 #i‚de‡
_INT64_T_DECLARED


79 sig√d 
	töt64_t
;

82 #i‚de‡
_UINT64_T_DECLARED


83 
	tuöt64_t
;

86 
	#SDL_AUDIO_DRIVER_EPOCAUDIO
 1

	)

90 
	#SDL_CDROM_DISABLED
 1

	)

93 
	#SDL_JOYSTICK_DISABLED
 1

	)

96 
	#SDL_LOADSO_DISABLED
 1

	)

98 
	#SDL_THREAD_SYMBIAN
 1

	)

100 
	#SDL_VIDEO_DRIVER_EPOC
 1

	)

102 
	#SDL_VIDEO_OPENGL
 0

	)

104 
	#SDL_HAS_64BIT_TYPE
 1

	)

106 
	#HAVE_LIBC
 1

	)

107 
	#HAVE_STDIO_H
 1

	)

108 
	#STDC_HEADERS
 1

	)

109 
	#HAVE_STRING_H
 1

	)

110 
	#HAVE_CTYPE_H
 1

	)

111 
	#HAVE_MATH_H
 1

	)

113 
	#HAVE_MALLOC
 1

	)

114 
	#HAVE_CALLOC
 1

	)

115 
	#HAVE_REALLOC
 1

	)

116 
	#HAVE_FREE
 1

	)

118 
	#HAVE_QSORT
 1

	)

119 
	#HAVE_ABS
 1

	)

120 
	#HAVE_MEMSET
 1

	)

121 
	#HAVE_MEMCPY
 1

	)

122 
	#HAVE_MEMMOVE
 1

	)

123 
	#HAVE_MEMCMP
 1

	)

124 
	#HAVE_STRLEN
 1

	)

125 
	#HAVE__STRUPR
 1

	)

126 
	#HAVE_STRCHR
 1

	)

127 
	#HAVE_STRRCHR
 1

	)

128 
	#HAVE_STRSTR
 1

	)

129 
	#HAVE_ITOA
 1

	)

130 
	#HAVE_STRTOL
 1

	)

131 
	#HAVE_STRTOUL
 1

	)

132 
	#HAVE_STRTOLL
 1

	)

133 
	#HAVE_STRTOD
 1

	)

134 
	#HAVE_ATOI
 1

	)

135 
	#HAVE_ATOF
 1

	)

136 
	#HAVE_STRCMP
 1

	)

137 
	#HAVE_STRNCMP
 1

	)

139 
	#HAVE__STRNICMP
 1

	)

140 
	#HAVE_SSCANF
 1

	)

141 
	#HAVE_STDARG_H
 1

	)

142 
	#HAVE_STDDEF_H
 1

	)

	@SDL/include/SDL_config_win32.h

23 #i‚de‡
_SDL_c⁄fig_wö32_h


24 
	#_SDL_c⁄fig_wö32_h


	)

26 
	~"SDL_∂©f‹m.h
"

30 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__DMC__
)

31 
	#HAVE_STDINT_H
 1

	)

32 #ñi‡
deföed
(
_MSC_VER
)

33 sig√d 
	t__öt8
 
	töt8_t
;

34 
	t__öt8
 
	tuöt8_t
;

35 sig√d 
	t__öt16
 
	töt16_t
;

36 
	t__öt16
 
	tuöt16_t
;

37 sig√d 
	t__öt32
 
	töt32_t
;

38 
	t__öt32
 
	tuöt32_t
;

39 sig√d 
	t__öt64
 
	töt64_t
;

40 
	t__öt64
 
	tuöt64_t
;

41 #i‚de‡
_UINTPTR_T_DEFINED


42 #ifde‡ 
_WIN64


43 
	t__öt64
 
	tuöçå_t
;

45 
	tuöçå_t
;

47 
	#_UINTPTR_T_DEFINED


	)

50 #i‡((
_MSC_VER
 <1200Ë&& (!
deföed
(
DWORD_PTR
)))

51 
	#DWORD_PTR
 
DWORD


	)

53 #i‡((
_MSC_VER
 <1200Ë&& (!
deföed
(
LONG_PTR
)))

54 
	#LONG_PTR
 
LONG


	)

57 sig√d 
	töt8_t
;

58 
	tuöt8_t
;

59 sig√d 
	töt16_t
;

60 
	tuöt16_t
;

61 sig√d 
	töt32_t
;

62 
	tuöt32_t
;

63 sig√d 
	töt64_t
;

64 
	tuöt64_t
;

65 #i‚de‡
_SIZE_T_DEFINED_


66 
	#_SIZE_T_DEFINED_


	)

67 
	tsize_t
;

69 
	tuöçå_t
;

71 
	#SDL_HAS_64BIT_TYPE
 1

	)

74 
	#HAVE_LIBC
 1

	)

75 #ifde‡
HAVE_LIBC


77 
	#HAVE_STDIO_H
 1

	)

78 
	#STDC_HEADERS
 1

	)

79 
	#HAVE_STRING_H
 1

	)

80 
	#HAVE_CTYPE_H
 1

	)

81 
	#HAVE_MATH_H
 1

	)

82 #i‚de‡
_WIN32_WCE


83 
	#HAVE_SIGNAL_H
 1

	)

87 
	#HAVE_MALLOC
 1

	)

88 
	#HAVE_CALLOC
 1

	)

89 
	#HAVE_REALLOC
 1

	)

90 
	#HAVE_FREE
 1

	)

91 
	#HAVE_ALLOCA
 1

	)

92 
	#HAVE_QSORT
 1

	)

93 
	#HAVE_ABS
 1

	)

94 
	#HAVE_MEMSET
 1

	)

95 
	#HAVE_MEMCPY
 1

	)

96 
	#HAVE_MEMMOVE
 1

	)

97 
	#HAVE_MEMCMP
 1

	)

98 
	#HAVE_STRLEN
 1

	)

99 
	#HAVE__STRREV
 1

	)

100 
	#HAVE__STRUPR
 1

	)

101 
	#HAVE__STRLWR
 1

	)

102 
	#HAVE_STRCHR
 1

	)

103 
	#HAVE_STRRCHR
 1

	)

104 
	#HAVE_STRSTR
 1

	)

105 
	#HAVE_ITOA
 1

	)

106 
	#HAVE__LTOA
 1

	)

107 
	#HAVE__ULTOA
 1

	)

108 
	#HAVE_STRTOL
 1

	)

109 
	#HAVE_STRTOUL
 1

	)

110 
	#HAVE_STRTOLL
 1

	)

111 
	#HAVE_STRTOD
 1

	)

112 
	#HAVE_ATOI
 1

	)

113 
	#HAVE_ATOF
 1

	)

114 
	#HAVE_STRCMP
 1

	)

115 
	#HAVE_STRNCMP
 1

	)

116 
	#HAVE__STRICMP
 1

	)

117 
	#HAVE__STRNICMP
 1

	)

118 
	#HAVE_SSCANF
 1

	)

120 
	#HAVE_STDARG_H
 1

	)

121 
	#HAVE_STDDEF_H
 1

	)

125 #i‚de‡
_WIN32_WCE


126 
	#SDL_AUDIO_DRIVER_DSOUND
 1

	)

128 
	#SDL_AUDIO_DRIVER_WAVEOUT
 1

	)

129 
	#SDL_AUDIO_DRIVER_DISK
 1

	)

130 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

133 #ifde‡
_WIN32_WCE


134 
	#SDL_CDROM_DISABLED
 1

	)

136 
	#SDL_CDROM_WIN32
 1

	)

140 #ifde‡
_WIN32_WCE


141 
	#SDL_JOYSTICK_DISABLED
 1

	)

143 
	#SDL_JOYSTICK_WINMM
 1

	)

147 
	#SDL_LOADSO_WIN32
 1

	)

150 
	#SDL_THREAD_WIN32
 1

	)

153 #ifde‡
_WIN32_WCE


154 
	#SDL_TIMER_WINCE
 1

	)

156 
	#SDL_TIMER_WIN32
 1

	)

160 #ifde‡
_WIN32_WCE


161 
	#SDL_VIDEO_DRIVER_GAPI
 1

	)

163 #i‚de‡
_WIN32_WCE


164 
	#SDL_VIDEO_DRIVER_DDRAW
 1

	)

166 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

167 
	#SDL_VIDEO_DRIVER_WINDIB
 1

	)

170 #i‚de‡
_WIN32_WCE


171 
	#SDL_VIDEO_OPENGL
 1

	)

172 
	#SDL_VIDEO_OPENGL_WGL
 1

	)

176 
	#SDL_VIDEO_DISABLE_SCREENSAVER
 1

	)

179 #i‚de‡
_WIN64


180 
	#SDL_ASSEMBLY_ROUTINES
 1

	)

	@SDL/include/SDL_copying.h

	@SDL/include/SDL_cpuinfo.h

28 #i‚de‡
_SDL_˝uöfo_h


29 
	#_SDL_˝uöfo_h


	)

31 
	~"SDL_°döc.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


40 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasRDTSC
();

43 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasMMX
();

46 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasMMXExt
();

49 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_Has3DNow
();

52 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_Has3DNowExt
();

55 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasSSE
();

58 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasSSE2
();

61 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasA…iVec
();

64 #ifde‡
__˝lu•lus


67 
	~"˛o£_code.h
"

	@SDL/include/SDL_endian.h

28 #i‚de‡
_SDL_ídün_h


29 
	#_SDL_ídün_h


	)

31 
	~"SDL_°döc.h
"

37 
	#SDL_LIL_ENDIAN
 1234

	)

38 
	#SDL_BIG_ENDIAN
 4321

	)

41 #i‚de‡
SDL_BYTEORDER


42 #ifde‡
__löux__


43 
	~<ídün.h
>

44 
	#SDL_BYTEORDER
 
__BYTE_ORDER


	)

46 #i‡
deföed
(
__hµa__
) || \

47 
deföed
(
__m68k__
Ë|| deföed(
mc68000
Ë|| deföed(
_M_M68K
) || \

48 (
deföed
(
__MIPS__
Ë&& deföed(
__MISPEB__
)) || \

49 
deföed
(
__µc__
Ë|| deföed(
__POWERPC__
Ë|| deföed(
_M_PPC
) || \

50 
	$deföed
(
__•¨c__
)

51 
	#SDL_BYTEORDER
 
SDL_BIG_ENDIAN


	)

53 
	#SDL_BYTEORDER
 
SDL_LIL_ENDIAN


	)

59 
	~"begö_code.h
"

61 #ifde‡
__˝lu•lus


73 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__i386__
) && \

74 !(
__GNUC__
 =2 && 
__GNUC_MINOR__
 <= 95 )

75 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
)

77 
	`__asm__
("xchgb %b0,%h0" : "=q" (
x
) : "0" (x));

78  
x
;

79 
	}
}

80 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
)

81 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
)

83 
	`__asm__
("xchgb %b0,%h0" : "=Q" (
x
) : "0" (x));

84  
x
;

85 
	}
}

86 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__powîpc__
Ë|| deföed(
__µc__
))

87 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
)

89 
ªsu…
;

91 
	`__asm__
("æwimò%0,%2,8,16,23" : "=&r" (
ªsu…
Ë: "0" (
x
 >> 8), "r" (x));

92  (
Uöt16
)
ªsu…
;

93 
	}
}

94 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__m68k__
Ë&& !deföed(
__mcﬁdfúe__
))

95 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
)

97 
	`__asm__
("r‹w #8,%0" : "=d" (
x
) : "0" (x) : "cc");

98  
x
;

99 
	}
}

101 
__ölöe__
 
Uöt16
 
	$SDL_Sw≠16
(
Uöt16
 
x
) {

102  
	`SDL_°©ic_ˇ°
(
Uöt16
, ((
x
<<8)|(x>>8)));

103 
	}
}

106 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__i386__
) && \

107 !(
__GNUC__
 =2 && 
__GNUC_MINOR__
 <= 95 )

108 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
)

110 
__asm__
("bsw≠ %0" : "Ù" (
x
) : "0" (x));

111  
x
;

113 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
)

114 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
)

116 
__asm__
("bsw≠»%0" : "Ù" (
x
) : "0" (x));

117  
x
;

119 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__powîpc__
Ë|| deföed(
__µc__
))

120 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
)

122 
Uöt32
 
ªsu…
;

124 
__asm__
("æwimò%0,%2,24,16,23" : "=&r" (
ªsu…
Ë: "0" (
x
>>24), "r" (x));

125 
__asm__
("æwimò%0,%2,8,8,15" : "=&r" (
ªsu…
Ë: "0" (ªsu…), "r" (
x
));

126 
__asm__
("æwimò%0,%2,24,0,7" : "=&r" (
ªsu…
Ë: "0" (ªsu…), "r" (
x
));

127  
ªsu…
;

129 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__m68k__
Ë&& !deföed(
__mcﬁdfúe__
))

130 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
)

132 
__asm__
("r‹w #8,%0\n\tsw≠ %0\n\å‹w #8,%0" : "=d" (
x
) : "0" (x) : "cc");

133  
x
;

136 
__ölöe__
 
Uöt32
 
SDL_Sw≠32
(Uöt32 
x
) {

137  
SDL_°©ic_ˇ°
(
Uöt32
, ((
x
<<24)|((x<<8)&0x00FF0000)|((x>>8)&0x0000FF00)|(x>>24)));

141 #ifde‡
SDL_HAS_64BIT_TYPE


142 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__i386__
) && \

143 !(
__GNUC__
 =2 && 
__GNUC_MINOR__
 <= 95 )

144 
__ölöe__
 
Uöt64
 
SDL_Sw≠64
(Uöt64 
x
)

147 °ru˘ { 
Uöt32
 
a
,
b
; } 
s
;

148 
Uöt64
 
u
;

149 } 
v
;

150 
v
.
u
 = 
x
;

151 
__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

152 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

153 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

154  
v
.
u
;

156 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
)

157 
__ölöe__
 
Uöt64
 
SDL_Sw≠64
(Uöt64 
x
)

159 
__asm__
("bsw≠q %0" : "Ù" (
x
) : "0" (x));

160  
x
;

163 
__ölöe__
 
Uöt64
 
SDL_Sw≠64
(Uöt64 
x
)

165 
Uöt32
 
hi
, 
lo
;

168 
lo
 = 
SDL_°©ic_ˇ°
(
Uöt32
, 
x
 & 0xFFFFFFFF);

169 
x
 >>= 32;

170 
hi
 = 
SDL_°©ic_ˇ°
(
Uöt32
, 
x
 & 0xFFFFFFFF);

171 
x
 = 
SDL_Sw≠32
(
lo
);

172 
x
 <<= 32;

173 
x
 |
SDL_Sw≠32
(
hi
);

174  (
x
);

182 
	#SDL_Sw≠64
(
X
Ë(X)

	)

191 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


192 
	#SDL_Sw≠LE16
(
X
Ë(X)

	)

193 
	#SDL_Sw≠LE32
(
X
Ë(X)

	)

194 
	#SDL_Sw≠LE64
(
X
Ë(X)

	)

195 
	#SDL_Sw≠BE16
(
X
Ë
	`SDL_Sw≠16
(X)

	)

196 
	#SDL_Sw≠BE32
(
X
Ë
	`SDL_Sw≠32
(X)

	)

197 
	#SDL_Sw≠BE64
(
X
Ë
	`SDL_Sw≠64
(X)

	)

199 
	#SDL_Sw≠LE16
(
X
Ë
	`SDL_Sw≠16
(X)

	)

200 
	#SDL_Sw≠LE32
(
X
Ë
	`SDL_Sw≠32
(X)

	)

201 
	#SDL_Sw≠LE64
(
X
Ë
	`SDL_Sw≠64
(X)

	)

202 
	#SDL_Sw≠BE16
(
X
Ë(X)

	)

203 
	#SDL_Sw≠BE32
(
X
Ë(X)

	)

204 
	#SDL_Sw≠BE64
(
X
Ë(X)

	)

209 #ifde‡
__˝lu•lus


212 
	~"˛o£_code.h
"

	@SDL/include/SDL_error.h

28 #i‚de‡
_SDL_îr‹_h


29 
	#_SDL_îr‹_h


	)

31 
	~"SDL_°döc.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


43 
DECLSPEC
 
SDLCALL
 
SDL_SëEº‹
(c⁄° *
fmt
, ...);

44 
DECLSPEC
 * 
SDLCALL
 
SDL_GëEº‹
();

45 
DECLSPEC
 
SDLCALL
 
SDL_CÀ¨Eº‹
();

53 
	#SDL_OutOfMem‹y
(Ë
	`SDL_Eº‹
(
SDL_ENOMEM
)

	)

54 
	#SDL_Unsuµ‹ãd
(Ë
	`SDL_Eº‹
(
SDL_UNSUPPORTED
)

	)

56 
	gSDL_ENOMEM
,

57 
	gSDL_EFREAD
,

58 
	gSDL_EFWRITE
,

59 
	gSDL_EFSEEK
,

60 
	gSDL_UNSUPPORTED
,

61 
	gSDL_LASTERROR


62 } 
	tSDL_îr‹code
;

63 
DECLSPEC
 
SDLCALL
 
SDL_Eº‹
(
SDL_îr‹code
 
code
);

67 #ifde‡
__˝lu•lus


70 
	~"˛o£_code.h
"

	@SDL/include/SDL_events.h

28 #i‚de‡
_SDL_evíts_h


29 
	#_SDL_evíts_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_a˘ive.h
"

34 
	~"SDL_keybﬂrd.h
"

35 
	~"SDL_mou£.h
"

36 
	~"SDL_joy°ick.h
"

37 
	~"SDL_quô.h
"

39 
	~"begö_code.h
"

41 #ifde‡
__˝lu•lus


47 
	#SDL_RELEASED
 0

	)

48 
	#SDL_PRESSED
 1

	)

53 
SDL_NOEVENT
 = 0,

54 
SDL_ACTIVEEVENT
,

55 
SDL_KEYDOWN
,

56 
SDL_KEYUP
,

57 
SDL_MOUSEMOTION
,

58 
SDL_MOUSEBUTTONDOWN
,

59 
SDL_MOUSEBUTTONUP
,

60 
SDL_JOYAXISMOTION
,

61 
SDL_JOYBALLMOTION
,

62 
SDL_JOYHATMOTION
,

63 
SDL_JOYBUTTONDOWN
,

64 
SDL_JOYBUTTONUP
,

65 
SDL_QUIT
,

66 
SDL_SYSWMEVENT
,

67 
SDL_EVENT_RESERVEDA
,

68 
SDL_EVENT_RESERVEDB
,

69 
SDL_VIDEORESIZE
,

70 
SDL_VIDEOEXPOSE
,

71 
SDL_EVENT_RESERVED2
,

72 
SDL_EVENT_RESERVED3
,

73 
SDL_EVENT_RESERVED4
,

74 
SDL_EVENT_RESERVED5
,

75 
SDL_EVENT_RESERVED6
,

76 
SDL_EVENT_RESERVED7
,

78 
SDL_USEREVENT
 = 24,

82 
SDL_NUMEVENTS
 = 32

83 } 
	tSDL_EvítTy≥
;

87 
	#SDL_EVENTMASK
(
X
Ë(1<<(X))

	)

89 
SDL_ACTIVEEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_ACTIVEEVENT
),

90 
SDL_KEYDOWNMASK
 = 
SDL_EVENTMASK
(
SDL_KEYDOWN
),

91 
SDL_KEYUPMASK
 = 
SDL_EVENTMASK
(
SDL_KEYUP
),

92 
SDL_KEYEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_KEYDOWN
)|

93 
SDL_EVENTMASK
(
SDL_KEYUP
),

94 
SDL_MOUSEMOTIONMASK
 = 
SDL_EVENTMASK
(
SDL_MOUSEMOTION
),

95 
SDL_MOUSEBUTTONDOWNMASK
 = 
SDL_EVENTMASK
(
SDL_MOUSEBUTTONDOWN
),

96 
SDL_MOUSEBUTTONUPMASK
 = 
SDL_EVENTMASK
(
SDL_MOUSEBUTTONUP
),

97 
SDL_MOUSEEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_MOUSEMOTION
)|

98 
SDL_EVENTMASK
(
SDL_MOUSEBUTTONDOWN
)|

99 
SDL_EVENTMASK
(
SDL_MOUSEBUTTONUP
),

100 
SDL_JOYAXISMOTIONMASK
 = 
SDL_EVENTMASK
(
SDL_JOYAXISMOTION
),

101 
SDL_JOYBALLMOTIONMASK
 = 
SDL_EVENTMASK
(
SDL_JOYBALLMOTION
),

102 
SDL_JOYHATMOTIONMASK
 = 
SDL_EVENTMASK
(
SDL_JOYHATMOTION
),

103 
SDL_JOYBUTTONDOWNMASK
 = 
SDL_EVENTMASK
(
SDL_JOYBUTTONDOWN
),

104 
SDL_JOYBUTTONUPMASK
 = 
SDL_EVENTMASK
(
SDL_JOYBUTTONUP
),

105 
SDL_JOYEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_JOYAXISMOTION
)|

106 
SDL_EVENTMASK
(
SDL_JOYBALLMOTION
)|

107 
SDL_EVENTMASK
(
SDL_JOYHATMOTION
)|

108 
SDL_EVENTMASK
(
SDL_JOYBUTTONDOWN
)|

109 
SDL_EVENTMASK
(
SDL_JOYBUTTONUP
),

110 
SDL_VIDEORESIZEMASK
 = 
SDL_EVENTMASK
(
SDL_VIDEORESIZE
),

111 
SDL_VIDEOEXPOSEMASK
 = 
SDL_EVENTMASK
(
SDL_VIDEOEXPOSE
),

112 
SDL_QUITMASK
 = 
SDL_EVENTMASK
(
SDL_QUIT
),

113 
SDL_SYSWMEVENTMASK
 = 
SDL_EVENTMASK
(
SDL_SYSWMEVENT
)

114 } 
	tSDL_EvítMask
 ;

115 
	#SDL_ALLEVENTS
 0xFFFFFFFF

	)

119 
	sSDL_A˘iveEvít
 {

120 
Uöt8
 
ty≥
;

121 
Uöt8
 
gaö
;

122 
Uöt8
 
°©e
;

123 } 
	tSDL_A˘iveEvít
;

126 
	sSDL_KeybﬂrdEvít
 {

127 
Uöt8
 
ty≥
;

128 
Uöt8
 
which
;

129 
Uöt8
 
°©e
;

130 
SDL_keysym
 
keysym
;

131 } 
	tSDL_KeybﬂrdEvít
;

134 
	sSDL_Mou£MŸi⁄Evít
 {

135 
Uöt8
 
ty≥
;

136 
Uöt8
 
which
;

137 
Uöt8
 
°©e
;

138 
Uöt16
 
x
, 
y
;

139 
Söt16
 
xªl
;

140 
Söt16
 
yªl
;

141 } 
	tSDL_Mou£MŸi⁄Evít
;

144 
	sSDL_Mou£Buâ⁄Evít
 {

145 
Uöt8
 
ty≥
;

146 
Uöt8
 
which
;

147 
Uöt8
 
buâ⁄
;

148 
Uöt8
 
°©e
;

149 
Uöt16
 
x
, 
y
;

150 } 
	tSDL_Mou£Buâ⁄Evít
;

153 
	sSDL_JoyAxisEvít
 {

154 
Uöt8
 
ty≥
;

155 
Uöt8
 
which
;

156 
Uöt8
 
axis
;

157 
Söt16
 
vÆue
;

158 } 
	tSDL_JoyAxisEvít
;

161 
	sSDL_JoyBÆlEvít
 {

162 
Uöt8
 
ty≥
;

163 
Uöt8
 
which
;

164 
Uöt8
 
bÆl
;

165 
Söt16
 
xªl
;

166 
Söt16
 
yªl
;

167 } 
	tSDL_JoyBÆlEvít
;

170 
	sSDL_JoyH©Evít
 {

171 
Uöt8
 
ty≥
;

172 
Uöt8
 
which
;

173 
Uöt8
 
h©
;

174 
Uöt8
 
vÆue
;

180 } 
	tSDL_JoyH©Evít
;

183 
	sSDL_JoyBuâ⁄Evít
 {

184 
Uöt8
 
ty≥
;

185 
Uöt8
 
which
;

186 
Uöt8
 
buâ⁄
;

187 
Uöt8
 
°©e
;

188 } 
	tSDL_JoyBuâ⁄Evít
;

194 
	sSDL_ResizeEvít
 {

195 
Uöt8
 
ty≥
;

196 
w
;

197 
h
;

198 } 
	tSDL_ResizeEvít
;

201 
	sSDL_Expo£Evít
 {

202 
Uöt8
 
ty≥
;

203 } 
	tSDL_Expo£Evít
;

206 
	sSDL_QuôEvít
 {

207 
Uöt8
 
ty≥
;

208 } 
	tSDL_QuôEvít
;

211 
	sSDL_U£rEvít
 {

212 
Uöt8
 
ty≥
;

213 
code
;

214 *
d©a1
;

215 *
d©a2
;

216 } 
	tSDL_U£rEvít
;

219 
SDL_SysWMmsg
;

220 
SDL_SysWMmsg
 
	tSDL_SysWMmsg
;

221 
	sSDL_SysWMEvít
 {

222 
Uöt8
 
ty≥
;

223 
SDL_SysWMmsg
 *
msg
;

224 } 
	tSDL_SysWMEvít
;

227 
	uSDL_Evít
 {

228 
Uöt8
 
ty≥
;

229 
SDL_A˘iveEvít
 
a˘ive
;

230 
SDL_KeybﬂrdEvít
 
key
;

231 
SDL_Mou£MŸi⁄Evít
 
mŸi⁄
;

232 
SDL_Mou£Buâ⁄Evít
 
buâ⁄
;

233 
SDL_JoyAxisEvít
 
jaxis
;

234 
SDL_JoyBÆlEvít
 
jbÆl
;

235 
SDL_JoyH©Evít
 
jh©
;

236 
SDL_JoyBuâ⁄Evít
 
jbuâ⁄
;

237 
SDL_ResizeEvít
 
ªsize
;

238 
SDL_Expo£Evít
 
expo£
;

239 
SDL_QuôEvít
 
quô
;

240 
SDL_U£rEvít
 
u£r
;

241 
SDL_SysWMEvít
 
syswm
;

242 } 
	tSDL_Evít
;

251 
DECLSPEC
 
SDLCALL
 
SDL_PumpEvíts
();

254 
	gSDL_ADDEVENT
,

255 
	gSDL_PEEKEVENT
,

256 
	gSDL_GETEVENT


257 } 
	tSDL_evíè˘i⁄
;

277 
DECLSPEC
 
SDLCALL
 
SDL_PìpEvíts
(
SDL_Evít
 *
evíts
, 
numevíts
,

278 
SDL_evíè˘i⁄
 
a˘i⁄
, 
Uöt32
 
mask
);

284 
DECLSPEC
 
SDLCALL
 
SDL_PﬁlEvít
(
SDL_Evít
 *
evít
);

290 
DECLSPEC
 
SDLCALL
 
SDL_WaôEvít
(
SDL_Evít
 *
evít
);

296 
DECLSPEC
 
SDLCALL
 
SDL_PushEvít
(
SDL_Evít
 *
evít
);

300 (
SDLCALL
 *
	tSDL_EvítFûãr
)(c⁄° 
	tSDL_Evít
 *
	tevít
);

323 
DECLSPEC
 
SDLCALL
 
SDL_SëEvítFûãr
(
SDL_EvítFûãr
 
fûãr
);

329 
DECLSPEC
 
SDL_EvítFûãr
 
SDLCALL
 
SDL_GëEvítFûãr
();

334 
	#SDL_QUERY
 -1

	)

335 
	#SDL_IGNORE
 0

	)

336 
	#SDL_DISABLE
 0

	)

337 
	#SDL_ENABLE
 1

	)

348 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_EvítSèã
(Uöt8 
ty≥
, 
°©e
);

351 #ifde‡
__˝lu•lus


354 
	~"˛o£_code.h
"

	@SDL/include/SDL_getenv.h

28 
	~"SDL_°döc.h
"

	@SDL/include/SDL_joystick.h

27 #i‚de‡
_SDL_joy°ick_h


28 
	#_SDL_joy°ick_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


46 
_SDL_Joy°ick
;

47 
_SDL_Joy°ick
 
	tSDL_Joy°ick
;

53 
DECLSPEC
 
SDLCALL
 
SDL_NumJoy°icks
();

61 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDL_Joy°ickName
(
devi˚_ödex
);

73 
DECLSPEC
 
SDL_Joy°ick
 * 
SDLCALL
 
SDL_Joy°ickO≥n
(
devi˚_ödex
);

78 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickO≥√d
(
devi˚_ödex
);

83 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickIndex
(
SDL_Joy°ick
 *
joy°ick
);

88 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumAxes
(
SDL_Joy°ick
 *
joy°ick
);

96 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumBÆls
(
SDL_Joy°ick
 *
joy°ick
);

101 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumH©s
(
SDL_Joy°ick
 *
joy°ick
);

106 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumBuâ⁄s
(
SDL_Joy°ick
 *
joy°ick
);

114 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickUpd©e
();

125 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickEvítSèã
(
°©e
);

134 
DECLSPEC
 
Söt16
 
SDLCALL
 
SDL_Joy°ickGëAxis
(
SDL_Joy°ick
 *
joy°ick
, 
axis
);

141 
	#SDL_HAT_CENTERED
 0x00

	)

142 
	#SDL_HAT_UP
 0x01

	)

143 
	#SDL_HAT_RIGHT
 0x02

	)

144 
	#SDL_HAT_DOWN
 0x04

	)

145 
	#SDL_HAT_LEFT
 0x08

	)

146 
	#SDL_HAT_RIGHTUP
 (
SDL_HAT_RIGHT
|
SDL_HAT_UP
)

	)

147 
	#SDL_HAT_RIGHTDOWN
 (
SDL_HAT_RIGHT
|
SDL_HAT_DOWN
)

	)

148 
	#SDL_HAT_LEFTUP
 (
SDL_HAT_LEFT
|
SDL_HAT_UP
)

	)

149 
	#SDL_HAT_LEFTDOWN
 (
SDL_HAT_LEFT
|
SDL_HAT_DOWN
)

	)

157 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_Joy°ickGëH©
(
SDL_Joy°ick
 *
joy°ick
, 
h©
);

166 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickGëBÆl
(
SDL_Joy°ick
 *
joy°ick
, 
bÆl
, *
dx
, *
dy
);

173 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_Joy°ickGëBuâ⁄
(
SDL_Joy°ick
 *
joy°ick
, 
buâ⁄
);

178 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickClo£
(
SDL_Joy°ick
 *
joy°ick
);

182 #ifde‡
__˝lu•lus


185 
	~"˛o£_code.h
"

	@SDL/include/SDL_keyboard.h

27 #i‚de‡
_SDL_keybﬂrd_h


28 
	#_SDL_keybﬂrd_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

32 
	~"SDL_keysym.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


59 
	sSDL_keysym
 {

60 
Uöt8
 
sˇncode
;

61 
SDLKey
 
sym
;

62 
SDLMod
 
mod
;

63 
Uöt16
 
unicode
;

64 } 
	tSDL_keysym
;

67 
	#SDL_ALL_HOTKEYS
 0xFFFFFFFF

	)

82 
DECLSPEC
 
SDLCALL
 
SDL_E«bÀUNICODE
(
íabÀ
);

84 
	#SDL_DEFAULT_REPEAT_DELAY
 500

	)

85 
	#SDL_DEFAULT_REPEAT_INTERVAL
 30

	)

98 
DECLSPEC
 
SDLCALL
 
SDL_E«bÀKeyRïót
(
dñay
, 
öãrvÆ
);

99 
DECLSPEC
 
SDLCALL
 
SDL_GëKeyRïót
(*
dñay
, *
öãrvÆ
);

110 
DECLSPEC
 
Uöt8
 * 
SDLCALL
 
SDL_GëKeySèã
(*
numkeys
);

115 
DECLSPEC
 
SDLMod
 
SDLCALL
 
SDL_GëModSèã
();

121 
DECLSPEC
 
SDLCALL
 
SDL_SëModSèã
(
SDLMod
 
mod°©e
);

126 
DECLSPEC
 * 
SDLCALL
 
SDL_GëKeyName
(
SDLKey
 
key
);

130 #ifde‡
__˝lu•lus


133 
	~"˛o£_code.h
"

	@SDL/include/SDL_keysym.h

23 #i‚de‡
_SDL_keysym_h


24 
	#_SDL_keysym_h


	)

36 
	mSDLK_UNKNOWN
 = 0,

37 
	mSDLK_FIRST
 = 0,

38 
	mSDLK_BACKSPACE
 = 8,

39 
	mSDLK_TAB
 = 9,

40 
	mSDLK_CLEAR
 = 12,

41 
	mSDLK_RETURN
 = 13,

42 
	mSDLK_PAUSE
 = 19,

43 
	mSDLK_ESCAPE
 = 27,

44 
	mSDLK_SPACE
 = 32,

45 
	mSDLK_EXCLAIM
 = 33,

46 
	mSDLK_QUOTEDBL
 = 34,

47 
	mSDLK_HASH
 = 35,

48 
	mSDLK_DOLLAR
 = 36,

49 
	mSDLK_AMPERSAND
 = 38,

50 
	mSDLK_QUOTE
 = 39,

51 
	mSDLK_LEFTPAREN
 = 40,

52 
	mSDLK_RIGHTPAREN
 = 41,

53 
	mSDLK_ASTERISK
 = 42,

54 
	mSDLK_PLUS
 = 43,

55 
	mSDLK_COMMA
 = 44,

56 
	mSDLK_MINUS
 = 45,

57 
	mSDLK_PERIOD
 = 46,

58 
	mSDLK_SLASH
 = 47,

59 
	mSDLK_0
 = 48,

60 
	mSDLK_1
 = 49,

61 
	mSDLK_2
 = 50,

62 
	mSDLK_3
 = 51,

63 
	mSDLK_4
 = 52,

64 
	mSDLK_5
 = 53,

65 
	mSDLK_6
 = 54,

66 
	mSDLK_7
 = 55,

67 
	mSDLK_8
 = 56,

68 
	mSDLK_9
 = 57,

69 
	mSDLK_COLON
 = 58,

70 
	mSDLK_SEMICOLON
 = 59,

71 
	mSDLK_LESS
 = 60,

72 
	mSDLK_EQUALS
 = 61,

73 
	mSDLK_GREATER
 = 62,

74 
	mSDLK_QUESTION
 = 63,

75 
	mSDLK_AT
 = 64,

79 
	mSDLK_LEFTBRACKET
 = 91,

80 
	mSDLK_BACKSLASH
 = 92,

81 
	mSDLK_RIGHTBRACKET
 = 93,

82 
	mSDLK_CARET
 = 94,

83 
	mSDLK_UNDERSCORE
 = 95,

84 
	mSDLK_BACKQUOTE
 = 96,

85 
	mSDLK_a
 = 97,

86 
	mSDLK_b
 = 98,

87 
	mSDLK_c
 = 99,

88 
	mSDLK_d
 = 100,

89 
	mSDLK_e
 = 101,

90 
	mSDLK_f
 = 102,

91 
	mSDLK_g
 = 103,

92 
	mSDLK_h
 = 104,

93 
	mSDLK_i
 = 105,

94 
	mSDLK_j
 = 106,

95 
	mSDLK_k
 = 107,

96 
	mSDLK_l
 = 108,

97 
	mSDLK_m
 = 109,

98 
	mSDLK_n
 = 110,

99 
	mSDLK_o
 = 111,

100 
	mSDLK_p
 = 112,

101 
	mSDLK_q
 = 113,

102 
	mSDLK_r
 = 114,

103 
	mSDLK_s
 = 115,

104 
	mSDLK_t
 = 116,

105 
	mSDLK_u
 = 117,

106 
	mSDLK_v
 = 118,

107 
	mSDLK_w
 = 119,

108 
	mSDLK_x
 = 120,

109 
	mSDLK_y
 = 121,

110 
	mSDLK_z
 = 122,

111 
	mSDLK_DELETE
 = 127,

117 
	mSDLK_WORLD_0
 = 160,

118 
	mSDLK_WORLD_1
 = 161,

119 
	mSDLK_WORLD_2
 = 162,

120 
	mSDLK_WORLD_3
 = 163,

121 
	mSDLK_WORLD_4
 = 164,

122 
	mSDLK_WORLD_5
 = 165,

123 
	mSDLK_WORLD_6
 = 166,

124 
	mSDLK_WORLD_7
 = 167,

125 
	mSDLK_WORLD_8
 = 168,

126 
	mSDLK_WORLD_9
 = 169,

127 
	mSDLK_WORLD_10
 = 170,

128 
	mSDLK_WORLD_11
 = 171,

129 
	mSDLK_WORLD_12
 = 172,

130 
	mSDLK_WORLD_13
 = 173,

131 
	mSDLK_WORLD_14
 = 174,

132 
	mSDLK_WORLD_15
 = 175,

133 
	mSDLK_WORLD_16
 = 176,

134 
	mSDLK_WORLD_17
 = 177,

135 
	mSDLK_WORLD_18
 = 178,

136 
	mSDLK_WORLD_19
 = 179,

137 
	mSDLK_WORLD_20
 = 180,

138 
	mSDLK_WORLD_21
 = 181,

139 
	mSDLK_WORLD_22
 = 182,

140 
	mSDLK_WORLD_23
 = 183,

141 
	mSDLK_WORLD_24
 = 184,

142 
	mSDLK_WORLD_25
 = 185,

143 
	mSDLK_WORLD_26
 = 186,

144 
	mSDLK_WORLD_27
 = 187,

145 
	mSDLK_WORLD_28
 = 188,

146 
	mSDLK_WORLD_29
 = 189,

147 
	mSDLK_WORLD_30
 = 190,

148 
	mSDLK_WORLD_31
 = 191,

149 
	mSDLK_WORLD_32
 = 192,

150 
	mSDLK_WORLD_33
 = 193,

151 
	mSDLK_WORLD_34
 = 194,

152 
	mSDLK_WORLD_35
 = 195,

153 
	mSDLK_WORLD_36
 = 196,

154 
	mSDLK_WORLD_37
 = 197,

155 
	mSDLK_WORLD_38
 = 198,

156 
	mSDLK_WORLD_39
 = 199,

157 
	mSDLK_WORLD_40
 = 200,

158 
	mSDLK_WORLD_41
 = 201,

159 
	mSDLK_WORLD_42
 = 202,

160 
	mSDLK_WORLD_43
 = 203,

161 
	mSDLK_WORLD_44
 = 204,

162 
	mSDLK_WORLD_45
 = 205,

163 
	mSDLK_WORLD_46
 = 206,

164 
	mSDLK_WORLD_47
 = 207,

165 
	mSDLK_WORLD_48
 = 208,

166 
	mSDLK_WORLD_49
 = 209,

167 
	mSDLK_WORLD_50
 = 210,

168 
	mSDLK_WORLD_51
 = 211,

169 
	mSDLK_WORLD_52
 = 212,

170 
	mSDLK_WORLD_53
 = 213,

171 
	mSDLK_WORLD_54
 = 214,

172 
	mSDLK_WORLD_55
 = 215,

173 
	mSDLK_WORLD_56
 = 216,

174 
	mSDLK_WORLD_57
 = 217,

175 
	mSDLK_WORLD_58
 = 218,

176 
	mSDLK_WORLD_59
 = 219,

177 
	mSDLK_WORLD_60
 = 220,

178 
	mSDLK_WORLD_61
 = 221,

179 
	mSDLK_WORLD_62
 = 222,

180 
	mSDLK_WORLD_63
 = 223,

181 
	mSDLK_WORLD_64
 = 224,

182 
	mSDLK_WORLD_65
 = 225,

183 
	mSDLK_WORLD_66
 = 226,

184 
	mSDLK_WORLD_67
 = 227,

185 
	mSDLK_WORLD_68
 = 228,

186 
	mSDLK_WORLD_69
 = 229,

187 
	mSDLK_WORLD_70
 = 230,

188 
	mSDLK_WORLD_71
 = 231,

189 
	mSDLK_WORLD_72
 = 232,

190 
	mSDLK_WORLD_73
 = 233,

191 
	mSDLK_WORLD_74
 = 234,

192 
	mSDLK_WORLD_75
 = 235,

193 
	mSDLK_WORLD_76
 = 236,

194 
	mSDLK_WORLD_77
 = 237,

195 
	mSDLK_WORLD_78
 = 238,

196 
	mSDLK_WORLD_79
 = 239,

197 
	mSDLK_WORLD_80
 = 240,

198 
	mSDLK_WORLD_81
 = 241,

199 
	mSDLK_WORLD_82
 = 242,

200 
	mSDLK_WORLD_83
 = 243,

201 
	mSDLK_WORLD_84
 = 244,

202 
	mSDLK_WORLD_85
 = 245,

203 
	mSDLK_WORLD_86
 = 246,

204 
	mSDLK_WORLD_87
 = 247,

205 
	mSDLK_WORLD_88
 = 248,

206 
	mSDLK_WORLD_89
 = 249,

207 
	mSDLK_WORLD_90
 = 250,

208 
	mSDLK_WORLD_91
 = 251,

209 
	mSDLK_WORLD_92
 = 252,

210 
	mSDLK_WORLD_93
 = 253,

211 
	mSDLK_WORLD_94
 = 254,

212 
	mSDLK_WORLD_95
 = 255,

217 
	mSDLK_KP0
 = 256,

218 
	mSDLK_KP1
 = 257,

219 
	mSDLK_KP2
 = 258,

220 
	mSDLK_KP3
 = 259,

221 
	mSDLK_KP4
 = 260,

222 
	mSDLK_KP5
 = 261,

223 
	mSDLK_KP6
 = 262,

224 
	mSDLK_KP7
 = 263,

225 
	mSDLK_KP8
 = 264,

226 
	mSDLK_KP9
 = 265,

227 
	mSDLK_KP_PERIOD
 = 266,

228 
	mSDLK_KP_DIVIDE
 = 267,

229 
	mSDLK_KP_MULTIPLY
 = 268,

230 
	mSDLK_KP_MINUS
 = 269,

231 
	mSDLK_KP_PLUS
 = 270,

232 
	mSDLK_KP_ENTER
 = 271,

233 
	mSDLK_KP_EQUALS
 = 272,

238 
	mSDLK_UP
 = 273,

239 
	mSDLK_DOWN
 = 274,

240 
	mSDLK_RIGHT
 = 275,

241 
	mSDLK_LEFT
 = 276,

242 
	mSDLK_INSERT
 = 277,

243 
	mSDLK_HOME
 = 278,

244 
	mSDLK_END
 = 279,

245 
	mSDLK_PAGEUP
 = 280,

246 
	mSDLK_PAGEDOWN
 = 281,

251 
	mSDLK_F1
 = 282,

252 
	mSDLK_F2
 = 283,

253 
	mSDLK_F3
 = 284,

254 
	mSDLK_F4
 = 285,

255 
	mSDLK_F5
 = 286,

256 
	mSDLK_F6
 = 287,

257 
	mSDLK_F7
 = 288,

258 
	mSDLK_F8
 = 289,

259 
	mSDLK_F9
 = 290,

260 
	mSDLK_F10
 = 291,

261 
	mSDLK_F11
 = 292,

262 
	mSDLK_F12
 = 293,

263 
	mSDLK_F13
 = 294,

264 
	mSDLK_F14
 = 295,

265 
	mSDLK_F15
 = 296,

270 
	mSDLK_NUMLOCK
 = 300,

271 
	mSDLK_CAPSLOCK
 = 301,

272 
	mSDLK_SCROLLOCK
 = 302,

273 
	mSDLK_RSHIFT
 = 303,

274 
	mSDLK_LSHIFT
 = 304,

275 
	mSDLK_RCTRL
 = 305,

276 
	mSDLK_LCTRL
 = 306,

277 
	mSDLK_RALT
 = 307,

278 
	mSDLK_LALT
 = 308,

279 
	mSDLK_RMETA
 = 309,

280 
	mSDLK_LMETA
 = 310,

281 
	mSDLK_LSUPER
 = 311,

282 
	mSDLK_RSUPER
 = 312,

283 
	mSDLK_MODE
 = 313,

284 
	mSDLK_COMPOSE
 = 314,

289 
	mSDLK_HELP
 = 315,

290 
	mSDLK_PRINT
 = 316,

291 
	mSDLK_SYSREQ
 = 317,

292 
	mSDLK_BREAK
 = 318,

293 
	mSDLK_MENU
 = 319,

294 
	mSDLK_POWER
 = 320,

295 
	mSDLK_EURO
 = 321,

296 
	mSDLK_UNDO
 = 322,

301 
	mSDLK_LAST


302 } 
	tSDLKey
;

306 
	mKMOD_NONE
 = 0x0000,

307 
	mKMOD_LSHIFT
= 0x0001,

308 
	mKMOD_RSHIFT
= 0x0002,

309 
	mKMOD_LCTRL
 = 0x0040,

310 
	mKMOD_RCTRL
 = 0x0080,

311 
	mKMOD_LALT
 = 0x0100,

312 
	mKMOD_RALT
 = 0x0200,

313 
	mKMOD_LMETA
 = 0x0400,

314 
	mKMOD_RMETA
 = 0x0800,

315 
	mKMOD_NUM
 = 0x1000,

316 
	mKMOD_CAPS
 = 0x2000,

317 
	mKMOD_MODE
 = 0x4000,

318 
	mKMOD_RESERVED
 = 0x8000

319 } 
	tSDLMod
;

321 
	#KMOD_CTRL
 (
KMOD_LCTRL
|
KMOD_RCTRL
)

	)

322 
	#KMOD_SHIFT
 (
KMOD_LSHIFT
|
KMOD_RSHIFT
)

	)

323 
	#KMOD_ALT
 (
KMOD_LALT
|
KMOD_RALT
)

	)

324 
	#KMOD_META
 (
KMOD_LMETA
|
KMOD_RMETA
)

	)

	@SDL/include/SDL_loadso.h

43 #i‚de‡
_SDL_lﬂdso_h


44 
	#_SDL_lﬂdso_h


	)

46 
	~"SDL_°döc.h
"

47 
	~"SDL_îr‹.h
"

49 
	~"begö_code.h
"

51 #ifde‡
__˝lu•lus


60 
DECLSPEC
 * 
SDLCALL
 
SDL_LﬂdObje˘
(c⁄° *
sofûe
);

67 
DECLSPEC
 * 
SDLCALL
 
SDL_LﬂdFun˘i⁄
(*
h™dÀ
, c⁄° *
«me
);

70 
DECLSPEC
 
SDLCALL
 
SDL_U∆ﬂdObje˘
(*
h™dÀ
);

73 #ifde‡
__˝lu•lus


76 
	~"˛o£_code.h
"

	@SDL/include/SDL_main.h

23 #i‚de‡
_SDL_maö_h


24 
	#_SDL_maö_h


	)

26 
	~"SDL_°döc.h
"

32 #i‡
deföed
(
__WIN32__
) || \

33 (
deföed
(
__MWERKS__
Ë&& !deföed(
__BEOS__
)) || \

34 
deföed
(
__MACOS__
Ë|| deföed(
__MACOSX__
) || \

35 
deföed
(
__SYMBIAN32__
Ë|| 
	$deföed
(
QWS
)

37 #ifde‡
__˝lu•lus


38 
	#C_LINKAGE
 "C"

	)

40 
	#C_LINKAGE


	)

54 
	#maö
 
SDL_maö


	)

57 
C_LINKAGE
 
	`SDL_maö
(
¨gc
, *
¨gv
[]);

62 #ifde‡
__WIN32__


64 
	~"begö_code.h
"

65 #ifde‡
__˝lu•lus


70 
DECLSPEC
 
SDLCALL
 
	`SDL_SëModuÀH™dÀ
(*
hIn°
);

72 
DECLSPEC
 
SDLCALL
 
	`SDL_Regi°îAµ
(*
«me
, 
Uöt32
 
°yÀ
, *
hIn°
);

74 
DECLSPEC
 
SDLCALL
 
	`SDL_Uƒegi°îAµ
();

75 #ifde‡
__˝lu•lus


76 
	}
}

78 
	~"˛o£_code.h
"

84 #i‡
deföed
(
__MACOS__
)

86 
	~"begö_code.h
"

87 #ifde‡
__˝lu•lus


92 
QDGlobÆs
;

95 
DECLSPEC
 
SDLCALL
 
SDL_InôQuickDøw
(
QDGlobÆs
 *
the_qd
);

97 #ifde‡
__˝lu•lus


100 
	~"˛o£_code.h
"

	@SDL/include/SDL_mouse.h

27 #i‚de‡
_SDL_mou£_h


28 
	#_SDL_mou£_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

32 
	~"SDL_video.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


40 
WMcurs‹
 
	tWMcurs‹
;

41 
	sSDL_Curs‹
 {

42 
SDL_Re˘
 
¨ó
;

43 
Söt16
 
hŸ_x
, 
hŸ_y
;

44 
Uöt8
 *
d©a
;

45 
Uöt8
 *
mask
;

46 
Uöt8
 *
ßve
[2];

47 
WMcurs‹
 *
wm_curs‹
;

48 } 
	tSDL_Curs‹
;

57 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_GëMou£Sèã
(*
x
, *
y
);

65 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_GëRñ©iveMou£Sèã
(*
x
, *
y
);

70 
DECLSPEC
 
SDLCALL
 
SDL_W¨pMou£
(
Uöt16
 
x
, Uöt16 
y
);

85 
DECLSPEC
 
SDL_Curs‹
 * 
SDLCALL
 
SDL_Cª©eCurs‹


86 (
Uöt8
 *
d©a
, Uöt8 *
mask
, 
w
, 
h
, 
hŸ_x
, 
hŸ_y
);

93 
DECLSPEC
 
SDLCALL
 
SDL_SëCurs‹
(
SDL_Curs‹
 *
curs‹
);

98 
DECLSPEC
 
SDL_Curs‹
 * 
SDLCALL
 
SDL_GëCurs‹
();

103 
DECLSPEC
 
SDLCALL
 
SDL_FªeCurs‹
(
SDL_Curs‹
 *
curs‹
);

112 
DECLSPEC
 
SDLCALL
 
SDL_ShowCurs‹
(
toggÀ
);

122 
	#SDL_BUTTON
(
X
Ë(1 << ((X)-1))

	)

123 
	#SDL_BUTTON_LEFT
 1

	)

124 
	#SDL_BUTTON_MIDDLE
 2

	)

125 
	#SDL_BUTTON_RIGHT
 3

	)

126 
	#SDL_BUTTON_WHEELUP
 4

	)

127 
	#SDL_BUTTON_WHEELDOWN
 5

	)

128 
	#SDL_BUTTON_X1
 6

	)

129 
	#SDL_BUTTON_X2
 7

	)

130 
	#SDL_BUTTON_LMASK
 
	`SDL_BUTTON
(
SDL_BUTTON_LEFT
)

	)

131 
	#SDL_BUTTON_MMASK
 
	`SDL_BUTTON
(
SDL_BUTTON_MIDDLE
)

	)

132 
	#SDL_BUTTON_RMASK
 
	`SDL_BUTTON
(
SDL_BUTTON_RIGHT
)

	)

133 
	#SDL_BUTTON_X1MASK
 
	`SDL_BUTTON
(
SDL_BUTTON_X1
)

	)

134 
	#SDL_BUTTON_X2MASK
 
	`SDL_BUTTON
(
SDL_BUTTON_X2
)

	)

138 #ifde‡
__˝lu•lus


141 
	~"˛o£_code.h
"

	@SDL/include/SDL_mutex.h

23 #i‚de‡
_SDL_muãx_h


24 
	#_SDL_muãx_h


	)

32 
	~"SDL_°döc.h
"

33 
	~"SDL_îr‹.h
"

35 
	~"begö_code.h
"

37 #ifde‡
__˝lu•lus


44 
	#SDL_MUTEX_TIMEDOUT
 1

	)

47 
	#SDL_MUTEX_MAXWAIT
 (~(
Uöt32
)0)

	)

55 
SDL_muãx
;

56 
SDL_muãx
 
	tSDL_muãx
;

59 
DECLSPEC
 
SDL_muãx
 * 
SDLCALL
 
SDL_Cª©eMuãx
();

61 
	#SDL_LockMuãx
(
m
Ë
	`SDL_muãxP
(m)

	)

65 
DECLSPEC
 
SDLCALL
 
SDL_muãxP
(
SDL_muãx
 *
muãx
);

67 
	#SDL_U∆ockMuãx
(
m
Ë
	`SDL_muãxV
(m)

	)

74 
DECLSPEC
 
SDLCALL
 
SDL_muãxV
(
SDL_muãx
 *
muãx
);

77 
DECLSPEC
 
SDLCALL
 
SDL_De°royMuãx
(
SDL_muãx
 *
muãx
);

86 
	gSDL_£m≠h‹e
;

87 
SDL_£m≠h‹e
 
	tSDL_£m
;

90 
DECLSPEC
 
SDL_£m
 * 
SDLCALL
 
SDL_Cª©eSem≠h‹e
(
Uöt32
 
öôül_vÆue
);

93 
DECLSPEC
 
SDLCALL
 
SDL_De°roySem≠h‹e
(
SDL_£m
 *
£m
);

100 
DECLSPEC
 
SDLCALL
 
SDL_SemWaô
(
SDL_£m
 *
£m
);

106 
DECLSPEC
 
SDLCALL
 
SDL_SemTryWaô
(
SDL_£m
 *
£m
);

115 
DECLSPEC
 
SDLCALL
 
SDL_SemWaôTimeout
(
SDL_£m
 *
£m
, 
Uöt32
 
ms
);

120 
DECLSPEC
 
SDLCALL
 
SDL_SemPo°
(
SDL_£m
 *
£m
);

123 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_SemVÆue
(
SDL_£m
 *
£m
);

133 
	gSDL_c⁄d
;

134 
SDL_c⁄d
 
	tSDL_c⁄d
;

138 
DECLSPEC
 
SDL_c⁄d
 * 
SDLCALL
 
SDL_Cª©eC⁄d
();

141 
DECLSPEC
 
SDLCALL
 
SDL_De°royC⁄d
(
SDL_c⁄d
 *
c⁄d
);

146 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dSig«l
(
SDL_c⁄d
 *
c⁄d
);

151 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dBrﬂdˇ°
(
SDL_c⁄d
 *
c⁄d
);

158 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dWaô
(
SDL_c⁄d
 *
c⁄d
, 
SDL_muãx
 *
mut
);

166 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dWaôTimeout
(
SDL_c⁄d
 *
c⁄d
, 
SDL_muãx
 *
muãx
, 
Uöt32
 
ms
);

171 #ifde‡
__˝lu•lus


174 
	~"˛o£_code.h
"

	@SDL/include/SDL_name.h

2 #i‚de‡
_SDL«me_h_


3 
	#_SDL«me_h_


	)

5 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

6 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

9 
	#SDL_NAME
(
X
Ë
SDL_
##
	)
X

	@SDL/include/SDL_opengl.h

27 
	~"SDL_c⁄fig.h
"

29 #ifde‡
__WIN32__


30 
	#WIN32_LEAN_AND_MEAN


	)

31 #i‚de‡
NOMINMAX


32 
	#NOMINMAX


	)

34 
	~<wödows.h
>

36 #i‚de‡
NO_SDL_GLEXT


37 
	#__gÀxt_h_


	)

39 #i‡
deföed
(
__MACOSX__
)

40 
	~<O≥nGL/gl.h
>

41 
	~<O≥nGL/glu.h
>

42 #ñi‡
deföed
(
__MACOS__
)

43 
	~<gl.h
>

44 
	~<glu.h
>

46 
	~<GL/gl.h
>

47 
	~<GL/glu.h
>

49 #i‚de‡
NO_SDL_GLEXT


50 #unde‡
__gÀxt_h_


59 #i‚de‡
NO_SDL_GLEXT


60 #i‡!
deföed
(
__gÀxt_h_
Ë&& !deföed(
GL_GLEXT_LEGACY
)

61 
	#__gÀxt_h_


	)

63 #ifde‡
__˝lu•lus


96 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

97 
	#WIN32_LEAN_AND_MEAN
 1

	)

98 
	~<wödows.h
>

101 #i‚de‡
APIENTRY


102 
	#APIENTRY


	)

104 #i‚de‡
APIENTRYP


105 
	#APIENTRYP
 
APIENTRY
 *

	)

107 #i‚de‡
GLAPI


108 
	#GLAPI
 

	)

116 
	#GL_GLEXT_VERSION
 29

	)

118 #i‚de‡
GL_VERSION_1_2


119 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

120 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

121 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

122 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

123 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

124 
	#GL_RESCALE_NORMAL
 0x803A

	)

125 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

126 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

127 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

128 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

129 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

130 
	#GL_TEXTURE_3D
 0x806F

	)

131 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

132 
	#GL_TEXTURE_DEPTH
 0x8071

	)

133 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

134 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

135 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

136 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

137 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

138 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

139 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

140 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

141 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

142 
	#GL_BGR
 0x80E0

	)

143 
	#GL_BGRA
 0x80E1

	)

144 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

145 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

146 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

147 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

148 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

149 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

150 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

151 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

152 
	#GL_SINGLE_COLOR
 0x81F9

	)

153 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

154 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

155 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

156 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

157 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

158 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

159 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

162 #i‚de‡
GL_ARB_imagög


163 
	#GL_CONSTANT_COLOR
 0x8001

	)

164 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

165 
	#GL_CONSTANT_ALPHA
 0x8003

	)

166 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

167 
	#GL_BLEND_COLOR
 0x8005

	)

168 
	#GL_FUNC_ADD
 0x8006

	)

169 
	#GL_MIN
 0x8007

	)

170 
	#GL_MAX
 0x8008

	)

171 
	#GL_BLEND_EQUATION
 0x8009

	)

172 
	#GL_FUNC_SUBTRACT
 0x800A

	)

173 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

174 
	#GL_CONVOLUTION_1D
 0x8010

	)

175 
	#GL_CONVOLUTION_2D
 0x8011

	)

176 
	#GL_SEPARABLE_2D
 0x8012

	)

177 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

178 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

179 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

180 
	#GL_REDUCE
 0x8016

	)

181 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

182 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

183 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

184 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

185 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

186 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

187 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

188 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

189 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

190 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

191 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

192 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

193 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

194 
	#GL_HISTOGRAM
 0x8024

	)

195 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

196 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

197 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

198 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

199 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

200 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

201 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

202 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

203 
	#GL_HISTOGRAM_SINK
 0x802D

	)

204 
	#GL_MINMAX
 0x802E

	)

205 
	#GL_MINMAX_FORMAT
 0x802F

	)

206 
	#GL_MINMAX_SINK
 0x8030

	)

207 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

208 
	#GL_COLOR_MATRIX
 0x80B1

	)

209 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

210 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

211 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

212 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

213 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

214 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

215 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

216 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

217 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

218 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

219 
	#GL_COLOR_TABLE
 0x80D0

	)

220 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

221 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

222 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

223 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

224 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

225 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

226 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

227 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

228 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

229 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

230 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

231 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

232 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

233 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

234 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

235 
	#GL_CONSTANT_BORDER
 0x8151

	)

236 
	#GL_REPLICATE_BORDER
 0x8153

	)

237 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

240 #i‚de‡
GL_VERSION_1_3


241 
	#GL_TEXTURE0
 0x84C0

	)

242 
	#GL_TEXTURE1
 0x84C1

	)

243 
	#GL_TEXTURE2
 0x84C2

	)

244 
	#GL_TEXTURE3
 0x84C3

	)

245 
	#GL_TEXTURE4
 0x84C4

	)

246 
	#GL_TEXTURE5
 0x84C5

	)

247 
	#GL_TEXTURE6
 0x84C6

	)

248 
	#GL_TEXTURE7
 0x84C7

	)

249 
	#GL_TEXTURE8
 0x84C8

	)

250 
	#GL_TEXTURE9
 0x84C9

	)

251 
	#GL_TEXTURE10
 0x84CA

	)

252 
	#GL_TEXTURE11
 0x84CB

	)

253 
	#GL_TEXTURE12
 0x84CC

	)

254 
	#GL_TEXTURE13
 0x84CD

	)

255 
	#GL_TEXTURE14
 0x84CE

	)

256 
	#GL_TEXTURE15
 0x84CF

	)

257 
	#GL_TEXTURE16
 0x84D0

	)

258 
	#GL_TEXTURE17
 0x84D1

	)

259 
	#GL_TEXTURE18
 0x84D2

	)

260 
	#GL_TEXTURE19
 0x84D3

	)

261 
	#GL_TEXTURE20
 0x84D4

	)

262 
	#GL_TEXTURE21
 0x84D5

	)

263 
	#GL_TEXTURE22
 0x84D6

	)

264 
	#GL_TEXTURE23
 0x84D7

	)

265 
	#GL_TEXTURE24
 0x84D8

	)

266 
	#GL_TEXTURE25
 0x84D9

	)

267 
	#GL_TEXTURE26
 0x84DA

	)

268 
	#GL_TEXTURE27
 0x84DB

	)

269 
	#GL_TEXTURE28
 0x84DC

	)

270 
	#GL_TEXTURE29
 0x84DD

	)

271 
	#GL_TEXTURE30
 0x84DE

	)

272 
	#GL_TEXTURE31
 0x84DF

	)

273 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

274 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

275 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

276 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

277 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

278 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

279 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

280 
	#GL_MULTISAMPLE
 0x809D

	)

281 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

282 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

283 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

284 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

285 
	#GL_SAMPLES
 0x80A9

	)

286 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

287 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

288 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

289 
	#GL_NORMAL_MAP
 0x8511

	)

290 
	#GL_REFLECTION_MAP
 0x8512

	)

291 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

292 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

293 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

294 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

295 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

296 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

297 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

298 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

299 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

300 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

301 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

302 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

303 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

304 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

305 
	#GL_COMPRESSED_RGB
 0x84ED

	)

306 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

307 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

308 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

309 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

310 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

311 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

312 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

313 
	#GL_COMBINE
 0x8570

	)

314 
	#GL_COMBINE_RGB
 0x8571

	)

315 
	#GL_COMBINE_ALPHA
 0x8572

	)

316 
	#GL_SOURCE0_RGB
 0x8580

	)

317 
	#GL_SOURCE1_RGB
 0x8581

	)

318 
	#GL_SOURCE2_RGB
 0x8582

	)

319 
	#GL_SOURCE0_ALPHA
 0x8588

	)

320 
	#GL_SOURCE1_ALPHA
 0x8589

	)

321 
	#GL_SOURCE2_ALPHA
 0x858A

	)

322 
	#GL_OPERAND0_RGB
 0x8590

	)

323 
	#GL_OPERAND1_RGB
 0x8591

	)

324 
	#GL_OPERAND2_RGB
 0x8592

	)

325 
	#GL_OPERAND0_ALPHA
 0x8598

	)

326 
	#GL_OPERAND1_ALPHA
 0x8599

	)

327 
	#GL_OPERAND2_ALPHA
 0x859A

	)

328 
	#GL_RGB_SCALE
 0x8573

	)

329 
	#GL_ADD_SIGNED
 0x8574

	)

330 
	#GL_INTERPOLATE
 0x8575

	)

331 
	#GL_SUBTRACT
 0x84E7

	)

332 
	#GL_CONSTANT
 0x8576

	)

333 
	#GL_PRIMARY_COLOR
 0x8577

	)

334 
	#GL_PREVIOUS
 0x8578

	)

335 
	#GL_DOT3_RGB
 0x86AE

	)

336 
	#GL_DOT3_RGBA
 0x86AF

	)

339 #i‚de‡
GL_VERSION_1_4


340 
	#GL_BLEND_DST_RGB
 0x80C8

	)

341 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

342 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

343 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

344 
	#GL_POINT_SIZE_MIN
 0x8126

	)

345 
	#GL_POINT_SIZE_MAX
 0x8127

	)

346 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

347 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

348 
	#GL_GENERATE_MIPMAP
 0x8191

	)

349 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

350 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

351 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

352 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

353 
	#GL_MIRRORED_REPEAT
 0x8370

	)

354 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

355 
	#GL_FOG_COORDINATE
 0x8451

	)

356 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

357 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

358 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

359 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

360 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

361 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

362 
	#GL_COLOR_SUM
 0x8458

	)

363 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

364 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

365 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

366 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

367 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

368 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

369 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

370 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

371 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

372 
	#GL_INCR_WRAP
 0x8507

	)

373 
	#GL_DECR_WRAP
 0x8508

	)

374 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

375 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

376 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

377 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

378 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

381 #i‚de‡
GL_VERSION_1_5


382 
	#GL_BUFFER_SIZE
 0x8764

	)

383 
	#GL_BUFFER_USAGE
 0x8765

	)

384 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

385 
	#GL_CURRENT_QUERY
 0x8865

	)

386 
	#GL_QUERY_RESULT
 0x8866

	)

387 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

388 
	#GL_ARRAY_BUFFER
 0x8892

	)

389 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

390 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

391 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

392 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

393 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

394 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

395 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

396 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

397 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

398 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

399 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

400 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

401 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

402 
	#GL_READ_ONLY
 0x88B8

	)

403 
	#GL_WRITE_ONLY
 0x88B9

	)

404 
	#GL_READ_WRITE
 0x88BA

	)

405 
	#GL_BUFFER_ACCESS
 0x88BB

	)

406 
	#GL_BUFFER_MAPPED
 0x88BC

	)

407 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

408 
	#GL_STREAM_DRAW
 0x88E0

	)

409 
	#GL_STREAM_READ
 0x88E1

	)

410 
	#GL_STREAM_COPY
 0x88E2

	)

411 
	#GL_STATIC_DRAW
 0x88E4

	)

412 
	#GL_STATIC_READ
 0x88E5

	)

413 
	#GL_STATIC_COPY
 0x88E6

	)

414 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

415 
	#GL_DYNAMIC_READ
 0x88E9

	)

416 
	#GL_DYNAMIC_COPY
 0x88EA

	)

417 
	#GL_SAMPLES_PASSED
 0x8914

	)

418 
	#GL_FOG_COORD_SRC
 
GL_FOG_COORDINATE_SOURCE


	)

419 
	#GL_FOG_COORD
 
GL_FOG_COORDINATE


	)

420 
	#GL_CURRENT_FOG_COORD
 
GL_CURRENT_FOG_COORDINATE


	)

421 
	#GL_FOG_COORD_ARRAY_TYPE
 
GL_FOG_COORDINATE_ARRAY_TYPE


	)

422 
	#GL_FOG_COORD_ARRAY_STRIDE
 
GL_FOG_COORDINATE_ARRAY_STRIDE


	)

423 
	#GL_FOG_COORD_ARRAY_POINTER
 
GL_FOG_COORDINATE_ARRAY_POINTER


	)

424 
	#GL_FOG_COORD_ARRAY
 
GL_FOG_COORDINATE_ARRAY


	)

425 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING


	)

426 
	#GL_SRC0_RGB
 
GL_SOURCE0_RGB


	)

427 
	#GL_SRC1_RGB
 
GL_SOURCE1_RGB


	)

428 
	#GL_SRC2_RGB
 
GL_SOURCE2_RGB


	)

429 
	#GL_SRC0_ALPHA
 
GL_SOURCE0_ALPHA


	)

430 
	#GL_SRC1_ALPHA
 
GL_SOURCE1_ALPHA


	)

431 
	#GL_SRC2_ALPHA
 
GL_SOURCE2_ALPHA


	)

434 #i‚de‡
GL_VERSION_2_0


435 
	#GL_BLEND_EQUATION_RGB
 
GL_BLEND_EQUATION


	)

436 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

437 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

438 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

439 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

440 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

441 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

442 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

443 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

444 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

445 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

446 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

447 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

448 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

449 
	#GL_DRAW_BUFFER0
 0x8825

	)

450 
	#GL_DRAW_BUFFER1
 0x8826

	)

451 
	#GL_DRAW_BUFFER2
 0x8827

	)

452 
	#GL_DRAW_BUFFER3
 0x8828

	)

453 
	#GL_DRAW_BUFFER4
 0x8829

	)

454 
	#GL_DRAW_BUFFER5
 0x882A

	)

455 
	#GL_DRAW_BUFFER6
 0x882B

	)

456 
	#GL_DRAW_BUFFER7
 0x882C

	)

457 
	#GL_DRAW_BUFFER8
 0x882D

	)

458 
	#GL_DRAW_BUFFER9
 0x882E

	)

459 
	#GL_DRAW_BUFFER10
 0x882F

	)

460 
	#GL_DRAW_BUFFER11
 0x8830

	)

461 
	#GL_DRAW_BUFFER12
 0x8831

	)

462 
	#GL_DRAW_BUFFER13
 0x8832

	)

463 
	#GL_DRAW_BUFFER14
 0x8833

	)

464 
	#GL_DRAW_BUFFER15
 0x8834

	)

465 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

466 
	#GL_POINT_SPRITE
 0x8861

	)

467 
	#GL_COORD_REPLACE
 0x8862

	)

468 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

469 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

470 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

471 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

472 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

473 
	#GL_VERTEX_SHADER
 0x8B31

	)

474 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

475 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

476 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

477 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

478 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

479 
	#GL_SHADER_TYPE
 0x8B4F

	)

480 
	#GL_FLOAT_VEC2
 0x8B50

	)

481 
	#GL_FLOAT_VEC3
 0x8B51

	)

482 
	#GL_FLOAT_VEC4
 0x8B52

	)

483 
	#GL_INT_VEC2
 0x8B53

	)

484 
	#GL_INT_VEC3
 0x8B54

	)

485 
	#GL_INT_VEC4
 0x8B55

	)

486 
	#GL_BOOL
 0x8B56

	)

487 
	#GL_BOOL_VEC2
 0x8B57

	)

488 
	#GL_BOOL_VEC3
 0x8B58

	)

489 
	#GL_BOOL_VEC4
 0x8B59

	)

490 
	#GL_FLOAT_MAT2
 0x8B5A

	)

491 
	#GL_FLOAT_MAT3
 0x8B5B

	)

492 
	#GL_FLOAT_MAT4
 0x8B5C

	)

493 
	#GL_SAMPLER_1D
 0x8B5D

	)

494 
	#GL_SAMPLER_2D
 0x8B5E

	)

495 
	#GL_SAMPLER_3D
 0x8B5F

	)

496 
	#GL_SAMPLER_CUBE
 0x8B60

	)

497 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

498 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

499 
	#GL_DELETE_STATUS
 0x8B80

	)

500 
	#GL_COMPILE_STATUS
 0x8B81

	)

501 
	#GL_LINK_STATUS
 0x8B82

	)

502 
	#GL_VALIDATE_STATUS
 0x8B83

	)

503 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

504 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

505 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

506 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

507 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

508 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

509 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

510 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

511 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

512 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

513 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

514 
	#GL_LOWER_LEFT
 0x8CA1

	)

515 
	#GL_UPPER_LEFT
 0x8CA2

	)

516 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

517 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

518 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

521 #i‚de‡
GL_ARB_mu…ôextuª


522 
	#GL_TEXTURE0_ARB
 0x84C0

	)

523 
	#GL_TEXTURE1_ARB
 0x84C1

	)

524 
	#GL_TEXTURE2_ARB
 0x84C2

	)

525 
	#GL_TEXTURE3_ARB
 0x84C3

	)

526 
	#GL_TEXTURE4_ARB
 0x84C4

	)

527 
	#GL_TEXTURE5_ARB
 0x84C5

	)

528 
	#GL_TEXTURE6_ARB
 0x84C6

	)

529 
	#GL_TEXTURE7_ARB
 0x84C7

	)

530 
	#GL_TEXTURE8_ARB
 0x84C8

	)

531 
	#GL_TEXTURE9_ARB
 0x84C9

	)

532 
	#GL_TEXTURE10_ARB
 0x84CA

	)

533 
	#GL_TEXTURE11_ARB
 0x84CB

	)

534 
	#GL_TEXTURE12_ARB
 0x84CC

	)

535 
	#GL_TEXTURE13_ARB
 0x84CD

	)

536 
	#GL_TEXTURE14_ARB
 0x84CE

	)

537 
	#GL_TEXTURE15_ARB
 0x84CF

	)

538 
	#GL_TEXTURE16_ARB
 0x84D0

	)

539 
	#GL_TEXTURE17_ARB
 0x84D1

	)

540 
	#GL_TEXTURE18_ARB
 0x84D2

	)

541 
	#GL_TEXTURE19_ARB
 0x84D3

	)

542 
	#GL_TEXTURE20_ARB
 0x84D4

	)

543 
	#GL_TEXTURE21_ARB
 0x84D5

	)

544 
	#GL_TEXTURE22_ARB
 0x84D6

	)

545 
	#GL_TEXTURE23_ARB
 0x84D7

	)

546 
	#GL_TEXTURE24_ARB
 0x84D8

	)

547 
	#GL_TEXTURE25_ARB
 0x84D9

	)

548 
	#GL_TEXTURE26_ARB
 0x84DA

	)

549 
	#GL_TEXTURE27_ARB
 0x84DB

	)

550 
	#GL_TEXTURE28_ARB
 0x84DC

	)

551 
	#GL_TEXTURE29_ARB
 0x84DD

	)

552 
	#GL_TEXTURE30_ARB
 0x84DE

	)

553 
	#GL_TEXTURE31_ARB
 0x84DF

	)

554 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

555 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

556 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

559 #i‚de‡
GL_ARB_å™•o£_m©rix


560 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

561 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

562 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

563 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

566 #i‚de‡
GL_ARB_mu…ißm∂e


567 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

568 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

569 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

570 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

571 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

572 
	#GL_SAMPLES_ARB
 0x80A9

	)

573 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

574 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

575 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

578 #i‚de‡
GL_ARB_ãxtuª_ív_add


581 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


582 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

583 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

584 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

585 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

586 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

587 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

588 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

589 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

590 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

591 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

592 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

593 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

596 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


597 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

598 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

599 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

600 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

601 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

602 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

603 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

604 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

605 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

606 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

607 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

610 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


611 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

614 #i‚de‡
GL_ARB_poöt_∑ømëîs


615 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

616 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

617 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

618 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

621 #i‚de‡
GL_ARB_vîãx_bÀnd


622 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

623 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

624 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

625 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

626 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

627 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

628 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

629 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

630 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

631 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

632 
	#GL_MODELVIEW0_ARB
 0x1700

	)

633 
	#GL_MODELVIEW1_ARB
 0x850A

	)

634 
	#GL_MODELVIEW2_ARB
 0x8722

	)

635 
	#GL_MODELVIEW3_ARB
 0x8723

	)

636 
	#GL_MODELVIEW4_ARB
 0x8724

	)

637 
	#GL_MODELVIEW5_ARB
 0x8725

	)

638 
	#GL_MODELVIEW6_ARB
 0x8726

	)

639 
	#GL_MODELVIEW7_ARB
 0x8727

	)

640 
	#GL_MODELVIEW8_ARB
 0x8728

	)

641 
	#GL_MODELVIEW9_ARB
 0x8729

	)

642 
	#GL_MODELVIEW10_ARB
 0x872A

	)

643 
	#GL_MODELVIEW11_ARB
 0x872B

	)

644 
	#GL_MODELVIEW12_ARB
 0x872C

	)

645 
	#GL_MODELVIEW13_ARB
 0x872D

	)

646 
	#GL_MODELVIEW14_ARB
 0x872E

	)

647 
	#GL_MODELVIEW15_ARB
 0x872F

	)

648 
	#GL_MODELVIEW16_ARB
 0x8730

	)

649 
	#GL_MODELVIEW17_ARB
 0x8731

	)

650 
	#GL_MODELVIEW18_ARB
 0x8732

	)

651 
	#GL_MODELVIEW19_ARB
 0x8733

	)

652 
	#GL_MODELVIEW20_ARB
 0x8734

	)

653 
	#GL_MODELVIEW21_ARB
 0x8735

	)

654 
	#GL_MODELVIEW22_ARB
 0x8736

	)

655 
	#GL_MODELVIEW23_ARB
 0x8737

	)

656 
	#GL_MODELVIEW24_ARB
 0x8738

	)

657 
	#GL_MODELVIEW25_ARB
 0x8739

	)

658 
	#GL_MODELVIEW26_ARB
 0x873A

	)

659 
	#GL_MODELVIEW27_ARB
 0x873B

	)

660 
	#GL_MODELVIEW28_ARB
 0x873C

	)

661 
	#GL_MODELVIEW29_ARB
 0x873D

	)

662 
	#GL_MODELVIEW30_ARB
 0x873E

	)

663 
	#GL_MODELVIEW31_ARB
 0x873F

	)

666 #i‚de‡
GL_ARB_m©rix_∑Àâe


667 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

668 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

669 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

670 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

671 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

672 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

673 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

674 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

675 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

676 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

679 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


680 
	#GL_COMBINE_ARB
 0x8570

	)

681 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

682 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

683 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

684 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

685 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

686 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

687 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

688 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

689 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

690 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

691 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

692 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

693 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

694 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

695 
	#GL_RGB_SCALE_ARB
 0x8573

	)

696 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

697 
	#GL_INTERPOLATE_ARB
 0x8575

	)

698 
	#GL_SUBTRACT_ARB
 0x84E7

	)

699 
	#GL_CONSTANT_ARB
 0x8576

	)

700 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

701 
	#GL_PREVIOUS_ARB
 0x8578

	)

704 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


707 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


708 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

709 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

712 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


713 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

716 #i‚de‡
GL_ARB_dïth_ãxtuª


717 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

718 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

719 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

720 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

721 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

724 #i‚de‡
GL_ARB_shadow


725 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

726 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

727 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

730 #i‚de‡
GL_ARB_shadow_ambõ¡


731 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

734 #i‚de‡
GL_ARB_wödow_pos


737 #i‚de‡
GL_ARB_vîãx_¥ogøm


738 
	#GL_COLOR_SUM_ARB
 0x8458

	)

739 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

740 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

741 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

742 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

743 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

744 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

745 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

746 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

747 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

748 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

749 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

750 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

751 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

752 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

753 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

754 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

755 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

756 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

757 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

758 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

759 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

760 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

761 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

762 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

763 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

764 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

765 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

766 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

767 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

768 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

769 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

770 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

771 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

772 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

773 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

774 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

775 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

776 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

777 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

778 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

779 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

780 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

781 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

782 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

783 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

784 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

785 
	#GL_MATRIX0_ARB
 0x88C0

	)

786 
	#GL_MATRIX1_ARB
 0x88C1

	)

787 
	#GL_MATRIX2_ARB
 0x88C2

	)

788 
	#GL_MATRIX3_ARB
 0x88C3

	)

789 
	#GL_MATRIX4_ARB
 0x88C4

	)

790 
	#GL_MATRIX5_ARB
 0x88C5

	)

791 
	#GL_MATRIX6_ARB
 0x88C6

	)

792 
	#GL_MATRIX7_ARB
 0x88C7

	)

793 
	#GL_MATRIX8_ARB
 0x88C8

	)

794 
	#GL_MATRIX9_ARB
 0x88C9

	)

795 
	#GL_MATRIX10_ARB
 0x88CA

	)

796 
	#GL_MATRIX11_ARB
 0x88CB

	)

797 
	#GL_MATRIX12_ARB
 0x88CC

	)

798 
	#GL_MATRIX13_ARB
 0x88CD

	)

799 
	#GL_MATRIX14_ARB
 0x88CE

	)

800 
	#GL_MATRIX15_ARB
 0x88CF

	)

801 
	#GL_MATRIX16_ARB
 0x88D0

	)

802 
	#GL_MATRIX17_ARB
 0x88D1

	)

803 
	#GL_MATRIX18_ARB
 0x88D2

	)

804 
	#GL_MATRIX19_ARB
 0x88D3

	)

805 
	#GL_MATRIX20_ARB
 0x88D4

	)

806 
	#GL_MATRIX21_ARB
 0x88D5

	)

807 
	#GL_MATRIX22_ARB
 0x88D6

	)

808 
	#GL_MATRIX23_ARB
 0x88D7

	)

809 
	#GL_MATRIX24_ARB
 0x88D8

	)

810 
	#GL_MATRIX25_ARB
 0x88D9

	)

811 
	#GL_MATRIX26_ARB
 0x88DA

	)

812 
	#GL_MATRIX27_ARB
 0x88DB

	)

813 
	#GL_MATRIX28_ARB
 0x88DC

	)

814 
	#GL_MATRIX29_ARB
 0x88DD

	)

815 
	#GL_MATRIX30_ARB
 0x88DE

	)

816 
	#GL_MATRIX31_ARB
 0x88DF

	)

819 #i‚de‡
GL_ARB_‰agmít_¥ogøm


820 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

821 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

822 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

823 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

824 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

825 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

826 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

827 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

828 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

829 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

830 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

831 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

832 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

833 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

834 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

837 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


838 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

839 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

840 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

841 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

842 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

843 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

844 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

845 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

846 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

847 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

848 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

849 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

850 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

851 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

852 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

853 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

854 
	#GL_READ_ONLY_ARB
 0x88B8

	)

855 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

856 
	#GL_READ_WRITE_ARB
 0x88BA

	)

857 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

858 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

859 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

860 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

861 
	#GL_STREAM_READ_ARB
 0x88E1

	)

862 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

863 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

864 
	#GL_STATIC_READ_ARB
 0x88E5

	)

865 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

866 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

867 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

868 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

871 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


872 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

873 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

874 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

875 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

876 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

879 #i‚de‡
GL_ARB_shadî_obje˘s


880 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

881 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

882 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

883 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

884 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

885 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

886 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

887 
	#GL_INT_VEC2_ARB
 0x8B53

	)

888 
	#GL_INT_VEC3_ARB
 0x8B54

	)

889 
	#GL_INT_VEC4_ARB
 0x8B55

	)

890 
	#GL_BOOL_ARB
 0x8B56

	)

891 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

892 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

893 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

894 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

895 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

896 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

897 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

898 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

899 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

900 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

901 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

902 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

903 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

904 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

905 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

906 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

907 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

908 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

909 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

910 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

911 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

912 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

913 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

916 #i‚de‡
GL_ARB_vîãx_shadî


917 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

918 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

919 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

920 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

921 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

922 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

923 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

926 #i‚de‡
GL_ARB_‰agmít_shadî


927 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

928 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

929 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

932 #i‚de‡
GL_ARB_shadög_œnguage_100


933 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

936 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


939 #i‚de‡
GL_ARB_poöt_•rôe


940 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

941 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

944 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


947 #i‚de‡
GL_ARB_døw_buf„rs


948 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

949 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

950 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

951 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

952 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

953 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

954 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

955 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

956 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

957 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

958 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

959 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

960 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

961 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

962 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

963 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

964 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

967 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


968 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

969 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

970 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

971 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

974 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


975 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

976 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

977 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

978 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

979 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

982 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


983 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

986 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


987 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

988 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

989 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

990 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

991 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

992 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

993 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

994 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

995 
	#GL_RGBA32F_ARB
 0x8814

	)

996 
	#GL_RGB32F_ARB
 0x8815

	)

997 
	#GL_ALPHA32F_ARB
 0x8816

	)

998 
	#GL_INTENSITY32F_ARB
 0x8817

	)

999 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

1000 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

1001 
	#GL_RGBA16F_ARB
 0x881A

	)

1002 
	#GL_RGB16F_ARB
 0x881B

	)

1003 
	#GL_ALPHA16F_ARB
 0x881C

	)

1004 
	#GL_INTENSITY16F_ARB
 0x881D

	)

1005 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

1006 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

1009 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


1010 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

1011 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

1012 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

1013 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

1016 #i‚de‡
GL_EXT_abgr


1017 
	#GL_ABGR_EXT
 0x8000

	)

1020 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


1021 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

1022 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

1023 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

1024 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

1025 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

1028 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


1029 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

1030 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

1031 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

1034 #i‚de‡
GL_EXT_ãxtuª


1035 
	#GL_ALPHA4_EXT
 0x803B

	)

1036 
	#GL_ALPHA8_EXT
 0x803C

	)

1037 
	#GL_ALPHA12_EXT
 0x803D

	)

1038 
	#GL_ALPHA16_EXT
 0x803E

	)

1039 
	#GL_LUMINANCE4_EXT
 0x803F

	)

1040 
	#GL_LUMINANCE8_EXT
 0x8040

	)

1041 
	#GL_LUMINANCE12_EXT
 0x8041

	)

1042 
	#GL_LUMINANCE16_EXT
 0x8042

	)

1043 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

1044 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

1045 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

1046 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

1047 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

1048 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

1049 
	#GL_INTENSITY_EXT
 0x8049

	)

1050 
	#GL_INTENSITY4_EXT
 0x804A

	)

1051 
	#GL_INTENSITY8_EXT
 0x804B

	)

1052 
	#GL_INTENSITY12_EXT
 0x804C

	)

1053 
	#GL_INTENSITY16_EXT
 0x804D

	)

1054 
	#GL_RGB2_EXT
 0x804E

	)

1055 
	#GL_RGB4_EXT
 0x804F

	)

1056 
	#GL_RGB5_EXT
 0x8050

	)

1057 
	#GL_RGB8_EXT
 0x8051

	)

1058 
	#GL_RGB10_EXT
 0x8052

	)

1059 
	#GL_RGB12_EXT
 0x8053

	)

1060 
	#GL_RGB16_EXT
 0x8054

	)

1061 
	#GL_RGBA2_EXT
 0x8055

	)

1062 
	#GL_RGBA4_EXT
 0x8056

	)

1063 
	#GL_RGB5_A1_EXT
 0x8057

	)

1064 
	#GL_RGBA8_EXT
 0x8058

	)

1065 
	#GL_RGB10_A2_EXT
 0x8059

	)

1066 
	#GL_RGBA12_EXT
 0x805A

	)

1067 
	#GL_RGBA16_EXT
 0x805B

	)

1068 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

1069 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

1070 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

1071 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

1072 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

1073 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

1074 
	#GL_REPLACE_EXT
 0x8062

	)

1075 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

1076 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

1077 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

1080 #i‚de‡
GL_EXT_ãxtuª3D


1081 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

1082 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

1083 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

1084 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

1085 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

1086 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

1087 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

1088 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

1089 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

1092 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


1093 
	#GL_FILTER4_SGIS
 0x8146

	)

1094 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

1097 #i‚de‡
GL_EXT_subãxtuª


1100 #i‚de‡
GL_EXT_c›y_ãxtuª


1103 #i‚de‡
GL_EXT_hi°ogøm


1104 
	#GL_HISTOGRAM_EXT
 0x8024

	)

1105 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

1106 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

1107 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

1108 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

1109 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

1110 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

1111 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

1112 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

1113 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

1114 
	#GL_MINMAX_EXT
 0x802E

	)

1115 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

1116 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

1117 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

1120 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


1121 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

1122 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

1123 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

1124 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

1125 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

1126 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

1127 
	#GL_REDUCE_EXT
 0x8016

	)

1128 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

1129 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

1130 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

1131 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

1132 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

1133 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

1134 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

1135 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

1136 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

1137 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

1138 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

1139 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

1140 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

1143 #i‚de‡
GL_SGI_cﬁ‹_m©rix


1144 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

1145 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

1146 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

1147 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

1148 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

1149 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

1150 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

1151 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

1152 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

1153 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

1154 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

1157 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


1158 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

1159 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

1160 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

1161 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

1162 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

1163 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

1164 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

1165 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

1166 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

1167 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

1168 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

1169 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

1170 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

1171 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

1172 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

1173 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

1176 #i‚de‡
GL_SGIS_pixñ_ãxtuª


1177 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

1178 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

1179 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

1180 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

1183 #i‚de‡
GL_SGIX_pixñ_ãxtuª


1184 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

1185 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

1188 #i‚de‡
GL_SGIS_ãxtuª4D


1189 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

1190 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

1191 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

1192 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

1193 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

1194 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

1195 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

1196 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

1197 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

1198 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

1201 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


1202 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

1203 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

1206 #i‚de‡
GL_EXT_cmyka


1207 
	#GL_CMYK_EXT
 0x800C

	)

1208 
	#GL_CMYKA_EXT
 0x800D

	)

1209 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

1210 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

1213 #i‚de‡
GL_EXT_ãxtuª_obje˘


1214 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

1215 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

1216 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

1217 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

1218 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

1221 #i‚de‡
GL_SGIS_dëaû_ãxtuª


1222 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

1223 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

1224 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

1225 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

1226 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

1227 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

1228 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

1229 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

1232 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


1233 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

1234 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

1235 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

1236 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

1239 #i‚de‡
GL_EXT_∑cked_pixñs


1240 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

1241 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

1242 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

1243 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

1244 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

1247 #i‚de‡
GL_SGIS_ãxtuª_lod


1248 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

1249 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

1250 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

1251 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

1254 #i‚de‡
GL_SGIS_mu…ißm∂e


1255 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

1256 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

1257 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

1258 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

1259 
	#GL_1PASS_SGIS
 0x80A1

	)

1260 
	#GL_2PASS_0_SGIS
 0x80A2

	)

1261 
	#GL_2PASS_1_SGIS
 0x80A3

	)

1262 
	#GL_4PASS_0_SGIS
 0x80A4

	)

1263 
	#GL_4PASS_1_SGIS
 0x80A5

	)

1264 
	#GL_4PASS_2_SGIS
 0x80A6

	)

1265 
	#GL_4PASS_3_SGIS
 0x80A7

	)

1266 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

1267 
	#GL_SAMPLES_SGIS
 0x80A9

	)

1268 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

1269 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

1270 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

1273 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


1274 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

1277 #i‚de‡
GL_EXT_vîãx_¨øy


1278 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

1279 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

1280 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

1281 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

1282 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

1283 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

1284 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

1285 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

1286 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

1287 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

1288 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

1289 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

1290 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

1291 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

1292 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

1293 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

1294 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

1295 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

1296 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

1297 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

1298 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

1299 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

1300 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

1301 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

1302 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

1303 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

1304 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

1305 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

1306 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

1307 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

1308 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

1309 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

1312 #i‚de‡
GL_EXT_misc_©åibuã


1315 #i‚de‡
GL_SGIS_gíî©e_mùm≠


1316 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

1317 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

1320 #i‚de‡
GL_SGIX_˛ùm≠


1321 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

1322 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

1323 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

1324 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

1325 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

1326 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

1327 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

1328 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

1329 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

1330 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

1331 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

1332 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

1335 #i‚de‡
GL_SGIX_shadow


1336 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

1337 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

1338 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

1339 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

1342 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


1343 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

1346 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


1347 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

1350 #i‚de‡
GL_EXT_bÀnd_mömax


1351 
	#GL_FUNC_ADD_EXT
 0x8006

	)

1352 
	#GL_MIN_EXT
 0x8007

	)

1353 
	#GL_MAX_EXT
 0x8008

	)

1354 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

1357 #i‚de‡
GL_EXT_bÀnd_subåa˘


1358 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

1359 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

1362 #i‚de‡
GL_EXT_bÀnd_logic_›


1365 #i‚de‡
GL_SGIX_öãæa˚


1366 
	#GL_INTERLACE_SGIX
 0x8094

	)

1369 #i‚de‡
GL_SGIX_pixñ_tûes


1370 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

1371 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

1372 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

1373 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

1374 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

1375 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

1376 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

1377 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

1380 #i‚de‡
GL_SGIS_ãxtuª_£À˘


1381 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

1382 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

1383 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

1384 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

1385 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

1386 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

1387 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

1388 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

1389 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

1390 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

1391 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

1392 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

1393 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

1394 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

1395 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

1396 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

1397 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

1398 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

1399 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

1400 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

1401 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

1402 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

1405 #i‚de‡
GL_SGIX_•rôe


1406 
	#GL_SPRITE_SGIX
 0x8148

	)

1407 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

1408 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

1409 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

1410 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

1411 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

1412 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

1415 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


1416 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

1419 #i‚de‡
GL_EXT_poöt_∑ømëîs


1420 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

1421 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

1422 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

1423 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

1426 #i‚de‡
GL_SGIS_poöt_∑ømëîs


1427 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

1428 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

1429 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

1430 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

1433 #i‚de‡
GL_SGIX_ö°rumíts


1434 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

1435 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

1438 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


1439 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

1440 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

1441 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

1442 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

1445 #i‚de‡
GL_SGIX_‰amezoom


1446 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

1447 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

1448 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

1451 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


1454 #i‚de‡
GL_FfdMaskSGIX


1455 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

1456 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

1459 #i‚de‡
GL_SGIX_pﬁynomül_ffd


1460 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

1461 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

1462 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

1463 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

1466 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


1467 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

1468 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

1471 #i‚de‡
GL_SGIX_Êush_ø°î


1474 #i‚de‡
GL_SGIX_dïth_ãxtuª


1475 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

1476 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

1477 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

1480 #i‚de‡
GL_SGIS_fog_fun˘i⁄


1481 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

1482 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

1483 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

1486 #i‚de‡
GL_SGIX_fog_off£t


1487 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

1488 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

1491 #i‚de‡
GL_HP_image_å™sf‹m


1492 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

1493 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

1494 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

1495 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

1496 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

1497 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

1498 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

1499 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

1500 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

1501 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

1502 
	#GL_CUBIC_HP
 0x815F

	)

1503 
	#GL_AVERAGE_HP
 0x8160

	)

1504 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

1505 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

1506 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

1509 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


1510 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

1511 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

1512 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

1513 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

1516 #i‚de‡
GL_INGR_∑Àâe_buf„r


1519 #i‚de‡
GL_SGIX_ãxtuª_add_ív


1520 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

1523 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


1526 #i‚de‡
GL_PGI_vîãx_höts


1527 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

1528 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

1529 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

1530 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

1531 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

1532 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

1533 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

1534 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

1535 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

1536 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

1537 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

1538 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

1539 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

1540 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

1541 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

1542 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

1543 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

1544 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

1545 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

1546 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

1547 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

1548 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

1551 #i‚de‡
GL_PGI_misc_höts


1552 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

1553 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

1554 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

1555 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

1556 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

1557 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

1558 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

1559 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

1560 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

1561 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

1562 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

1563 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

1564 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

1565 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

1566 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

1567 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

1568 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

1569 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

1570 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

1571 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

1574 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


1575 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

1576 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

1577 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

1578 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

1579 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

1580 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

1581 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

1584 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


1585 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

1588 #i‚de‡
GL_SGIX_li°_¥i‹ôy


1589 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

1592 #i‚de‡
GL_SGIX_ú_ö°rumít1


1593 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

1596 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


1597 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

1600 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


1601 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

1602 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

1603 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

1606 #i‚de‡
GL_SGIX_shadow_ambõ¡


1607 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

1610 #i‚de‡
GL_EXT_ödex_ãxtuª


1613 #i‚de‡
GL_EXT_ödex_m©îül


1614 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

1615 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

1616 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

1619 #i‚de‡
GL_EXT_ödex_func


1620 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

1621 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

1622 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

1625 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


1626 
	#GL_IUI_V2F_EXT
 0x81AD

	)

1627 
	#GL_IUI_V3F_EXT
 0x81AE

	)

1628 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

1629 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

1630 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

1631 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

1632 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

1633 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

1636 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


1637 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

1638 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

1641 #i‚de‡
GL_EXT_cuŒ_vîãx


1642 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

1643 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

1644 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

1647 #i‚de‡
GL_SGIX_y¸cb


1648 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

1649 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

1652 #i‚de‡
GL_SGIX_‰agmít_lightög


1653 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

1654 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

1655 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

1656 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

1657 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

1658 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

1659 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

1660 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

1661 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

1662 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

1663 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

1664 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

1665 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

1666 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

1667 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

1668 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

1669 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

1670 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

1671 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

1672 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

1675 #i‚de‡
GL_IBM_ø°îpos_˛ù


1676 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

1679 #i‚de‡
GL_HP_ãxtuª_lightög


1680 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

1681 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

1682 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

1685 #i‚de‡
GL_EXT_døw_ønge_ñemíts


1686 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

1687 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

1690 #i‚de‡
GL_WIN_ph⁄g_shadög


1691 
	#GL_PHONG_WIN
 0x80EA

	)

1692 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

1695 #i‚de‡
GL_WIN_•ecuœr_fog


1696 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

1699 #i‚de‡
GL_EXT_light_ãxtuª


1700 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

1701 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

1702 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

1703 
	#GL_ATTENUATION_EXT
 0x834D

	)

1704 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

1705 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

1706 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

1707 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

1708 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

1712 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


1713 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

1714 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

1717 #i‚de‡
GL_SGIX_im∑˘_pixñ_ãxtuª


1718 
	#GL_PIXEL_TEX_GEN_Q_CEILING_SGIX
 0x8184

	)

1719 
	#GL_PIXEL_TEX_GEN_Q_ROUND_SGIX
 0x8185

	)

1720 
	#GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX
 0x8186

	)

1721 
	#GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX
 0x8187

	)

1722 
	#GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX
 0x8188

	)

1723 
	#GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX
 0x8189

	)

1724 
	#GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX
 0x818A

	)

1727 #i‚de‡
GL_EXT_bgø


1728 
	#GL_BGR_EXT
 0x80E0

	)

1729 
	#GL_BGRA_EXT
 0x80E1

	)

1732 #i‚de‡
GL_SGIX_async


1733 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

1736 #i‚de‡
GL_SGIX_async_pixñ


1737 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

1738 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

1739 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

1740 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

1741 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

1742 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

1745 #i‚de‡
GL_SGIX_async_hi°ogøm


1746 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

1747 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

1750 #i‚de‡
GL_INTEL_ãxtuª_sciss‹


1753 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


1754 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

1755 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

1756 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

1757 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

1758 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

1761 #i‚de‡
GL_HP_oc˛usi⁄_ã°


1762 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

1763 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

1766 #i‚de‡
GL_EXT_pixñ_å™sf‹m


1767 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

1768 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

1769 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

1770 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

1771 
	#GL_CUBIC_EXT
 0x8334

	)

1772 
	#GL_AVERAGE_EXT
 0x8335

	)

1773 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

1774 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

1775 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

1778 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


1781 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


1782 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

1785 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


1786 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

1787 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

1788 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

1791 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


1792 
	#GL_COLOR_SUM_EXT
 0x8458

	)

1793 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

1794 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

1795 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

1796 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

1797 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

1798 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

1801 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


1802 
	#GL_PERTURB_EXT
 0x85AE

	)

1803 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

1806 #i‚de‡
GL_EXT_mu…i_døw_¨øys


1809 #i‚de‡
GL_EXT_fog_co‹d


1810 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

1811 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

1812 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

1813 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

1814 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

1815 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

1816 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

1817 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

1820 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


1821 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

1822 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

1825 #i‚de‡
GL_EXT_co‹dö©e_‰ame


1826 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

1827 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

1828 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

1829 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

1830 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

1831 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

1832 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

1833 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

1834 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

1835 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

1836 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

1837 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

1838 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

1839 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

1842 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


1843 
	#GL_COMBINE_EXT
 0x8570

	)

1844 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

1845 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

1846 
	#GL_RGB_SCALE_EXT
 0x8573

	)

1847 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

1848 
	#GL_INTERPOLATE_EXT
 0x8575

	)

1849 
	#GL_CONSTANT_EXT
 0x8576

	)

1850 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

1851 
	#GL_PREVIOUS_EXT
 0x8578

	)

1852 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

1853 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

1854 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

1855 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

1856 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

1857 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

1858 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

1859 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

1860 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

1861 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

1862 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

1863 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

1866 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


1867 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

1870 #i‚de‡
GL_APPLE_å™sf‹m_höt


1871 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

1874 #i‚de‡
GL_SGIX_fog_sˇÀ


1875 
	#GL_FOG_SCALE_SGIX
 0x81FC

	)

1876 
	#GL_FOG_SCALE_VALUE_SGIX
 0x81FD

	)

1879 #i‚de‡
GL_SUNX_c⁄°™t_d©a


1880 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

1881 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

1884 #i‚de‡
GL_SUN_globÆ_Æpha


1885 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

1886 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

1889 #i‚de‡
GL_SUN_åüngÀ_li°


1890 
	#GL_RESTART_SUN
 0x0001

	)

1891 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

1892 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

1893 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

1894 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

1895 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

1896 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

1897 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

1898 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

1899 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

1900 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

1901 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

1902 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

1903 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

1904 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

1905 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

1906 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

1909 #i‚de‡
GL_SUN_vîãx


1912 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


1913 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

1914 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

1915 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

1916 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

1919 #i‚de‡
GL_INGR_cﬁ‹_˛amp


1920 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

1921 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

1922 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

1923 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

1924 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

1925 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

1926 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

1927 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

1930 #i‚de‡
GL_INGR_öãæa˚_ªad


1931 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

1934 #i‚de‡
GL_EXT_°ícû_wøp


1935 
	#GL_INCR_WRAP_EXT
 0x8507

	)

1936 
	#GL_DECR_WRAP_EXT
 0x8508

	)

1939 #i‚de‡
GL_EXT_422_pixñs


1940 
	#GL_422_EXT
 0x80CC

	)

1941 
	#GL_422_REV_EXT
 0x80CD

	)

1942 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

1943 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

1946 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


1947 
	#GL_NORMAL_MAP_NV
 0x8511

	)

1948 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

1951 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


1952 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

1953 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

1954 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

1955 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

1956 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

1957 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

1958 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

1959 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

1960 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

1961 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

1962 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

1963 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

1966 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


1967 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

1970 #i‚de‡
GL_EXT_ãxtuª_ív_add


1973 #i‚de‡
GL_EXT_ãxtuª_lod_büs


1974 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

1975 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

1976 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

1979 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


1980 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

1981 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

1984 #i‚de‡
GL_EXT_vîãx_weightög


1985 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 
GL_MODELVIEW_STACK_DEPTH


	)

1986 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

1987 
	#GL_MODELVIEW0_MATRIX_EXT
 
GL_MODELVIEW_MATRIX


	)

1988 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

1989 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

1990 
	#GL_MODELVIEW0_EXT
 
GL_MODELVIEW


	)

1991 
	#GL_MODELVIEW1_EXT
 0x850A

	)

1992 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

1993 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

1994 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

1995 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

1996 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

1997 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

2000 #i‚de‡
GL_NV_light_max_exp⁄ít


2001 
	#GL_MAX_SHININESS_NV
 0x8504

	)

2002 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

2005 #i‚de‡
GL_NV_vîãx_¨øy_ønge


2006 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

2007 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

2008 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

2009 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

2010 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

2013 #i‚de‡
GL_NV_ªgi°î_comböîs


2014 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

2015 
	#GL_VARIABLE_A_NV
 0x8523

	)

2016 
	#GL_VARIABLE_B_NV
 0x8524

	)

2017 
	#GL_VARIABLE_C_NV
 0x8525

	)

2018 
	#GL_VARIABLE_D_NV
 0x8526

	)

2019 
	#GL_VARIABLE_E_NV
 0x8527

	)

2020 
	#GL_VARIABLE_F_NV
 0x8528

	)

2021 
	#GL_VARIABLE_G_NV
 0x8529

	)

2022 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

2023 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

2024 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

2025 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

2026 
	#GL_SPARE0_NV
 0x852E

	)

2027 
	#GL_SPARE1_NV
 0x852F

	)

2028 
	#GL_DISCARD_NV
 0x8530

	)

2029 
	#GL_E_TIMES_F_NV
 0x8531

	)

2030 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

2031 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

2032 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

2033 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

2034 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

2035 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

2036 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

2037 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

2038 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

2039 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

2040 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

2041 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

2042 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

2043 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

2044 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

2045 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

2046 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

2047 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

2048 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

2049 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

2050 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

2051 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

2052 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

2053 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

2054 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

2055 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

2056 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

2057 
	#GL_COMBINER0_NV
 0x8550

	)

2058 
	#GL_COMBINER1_NV
 0x8551

	)

2059 
	#GL_COMBINER2_NV
 0x8552

	)

2060 
	#GL_COMBINER3_NV
 0x8553

	)

2061 
	#GL_COMBINER4_NV
 0x8554

	)

2062 
	#GL_COMBINER5_NV
 0x8555

	)

2063 
	#GL_COMBINER6_NV
 0x8556

	)

2064 
	#GL_COMBINER7_NV
 0x8557

	)

2072 #i‚de‡
GL_NV_fog_di°™˚


2073 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

2074 
	#GL_EYE_RADIAL_NV
 0x855B

	)

2075 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

2079 #i‚de‡
GL_NV_ãxgí_emboss


2080 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

2081 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

2082 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

2085 #i‚de‡
GL_NV_bÀnd_squ¨e


2088 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


2089 
	#GL_COMBINE4_NV
 0x8503

	)

2090 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

2091 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

2092 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

2093 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

2096 #i‚de‡
GL_MESA_ªsize_buf„rs


2099 #i‚de‡
GL_MESA_wödow_pos


2102 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


2103 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

2104 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

2105 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

2106 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

2109 #i‚de‡
GL_IBM_cuŒ_vîãx


2110 
	#GL_CULL_VERTEX_IBM
 103050

	)

2113 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


2116 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


2117 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

2118 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

2119 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

2120 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

2121 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

2122 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

2123 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

2124 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

2125 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

2126 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

2127 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

2128 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

2129 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

2130 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

2131 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

2132 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

2135 #i‚de‡
GL_SGIX_subßm∂e


2136 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

2137 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

2138 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

2139 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

2140 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

2143 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


2146 #i‚de‡
GL_SGIX_y¸cba


2147 
	#GL_YCRCB_SGIX
 0x8318

	)

2148 
	#GL_YCRCBA_SGIX
 0x8319

	)

2151 #i‚de‡
GL_SGI_dïth_∑ss_ö°rumít


2152 
	#GL_DEPTH_PASS_INSTRUMENT_SGIX
 0x8310

	)

2153 
	#GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX
 0x8311

	)

2154 
	#GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX
 0x8312

	)

2157 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


2158 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

2159 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

2162 #i‚de‡
GL_3DFX_mu…ißm∂e


2163 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

2164 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

2165 
	#GL_SAMPLES_3DFX
 0x86B4

	)

2166 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

2169 #i‚de‡
GL_3DFX_tbuf„r


2172 #i‚de‡
GL_EXT_mu…ißm∂e


2173 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

2174 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

2175 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

2176 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

2177 
	#GL_1PASS_EXT
 0x80A1

	)

2178 
	#GL_2PASS_0_EXT
 0x80A2

	)

2179 
	#GL_2PASS_1_EXT
 0x80A3

	)

2180 
	#GL_4PASS_0_EXT
 0x80A4

	)

2181 
	#GL_4PASS_1_EXT
 0x80A5

	)

2182 
	#GL_4PASS_2_EXT
 0x80A6

	)

2183 
	#GL_4PASS_3_EXT
 0x80A7

	)

2184 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

2185 
	#GL_SAMPLES_EXT
 0x80A9

	)

2186 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

2187 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

2188 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

2189 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

2192 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


2193 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

2194 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

2197 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


2198 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

2201 #i‚de‡
GL_SGIX_ªßm∂e


2202 
	#GL_PACK_RESAMPLE_SGIX
 0x842C

	)

2203 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842D

	)

2204 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x842E

	)

2205 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x842F

	)

2206 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

2209 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


2210 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

2211 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

2212 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

2213 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

2214 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

2215 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

2216 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

2217 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

2220 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


2221 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

2224 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


2225 
	#GL_DOT3_RGB_EXT
 0x8740

	)

2226 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

2229 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


2230 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

2231 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

2234 #i‚de‡
GL_NV_„n˚


2235 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

2236 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

2237 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

2240 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


2241 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

2244 #i‚de‡
GL_NV_evÆu©‹s


2245 
	#GL_EVAL_2D_NV
 0x86C0

	)

2246 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

2247 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

2248 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

2249 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

2250 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

2251 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

2252 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

2253 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

2254 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

2255 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

2256 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

2257 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

2258 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

2259 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

2260 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

2261 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

2262 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

2263 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

2264 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

2265 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

2266 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

2267 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

2268 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

2271 #i‚de‡
GL_NV_∑cked_dïth_°ícû


2272 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

2273 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

2276 #i‚de‡
GL_NV_ªgi°î_comböîs2


2277 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

2280 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


2283 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


2284 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

2285 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

2286 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

2287 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

2290 #i‚de‡
GL_NV_ãxtuª_shadî


2291 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

2292 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

2293 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

2294 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

2295 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

2296 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

2297 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

2298 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

2299 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

2300 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

2301 
	#GL_CULL_MODES_NV
 0x86E0

	)

2302 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

2303 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

2304 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

2305 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 
GL_OFFSET_TEXTURE_MATRIX_NV


	)

2306 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 
GL_OFFSET_TEXTURE_SCALE_NV


	)

2307 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 
GL_OFFSET_TEXTURE_BIAS_NV


	)

2308 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

2309 
	#GL_CONST_EYE_NV
 0x86E5

	)

2310 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

2311 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

2312 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

2313 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

2314 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

2315 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

2316 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

2317 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

2318 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

2319 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

2320 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

2321 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

2322 
	#GL_HILO_NV
 0x86F4

	)

2323 
	#GL_DSDT_NV
 0x86F5

	)

2324 
	#GL_DSDT_MAG_NV
 0x86F6

	)

2325 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

2326 
	#GL_HILO16_NV
 0x86F8

	)

2327 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

2328 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

2329 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

2330 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

2331 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

2332 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

2333 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

2334 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

2335 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

2336 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

2337 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

2338 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

2339 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

2340 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

2341 
	#GL_DSDT8_NV
 0x8709

	)

2342 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

2343 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

2344 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

2345 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

2346 
	#GL_HI_SCALE_NV
 0x870E

	)

2347 
	#GL_LO_SCALE_NV
 0x870F

	)

2348 
	#GL_DS_SCALE_NV
 0x8710

	)

2349 
	#GL_DT_SCALE_NV
 0x8711

	)

2350 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

2351 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

2352 
	#GL_HI_BIAS_NV
 0x8714

	)

2353 
	#GL_LO_BIAS_NV
 0x8715

	)

2354 
	#GL_DS_BIAS_NV
 0x8716

	)

2355 
	#GL_DT_BIAS_NV
 0x8717

	)

2356 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

2357 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

2358 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

2359 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

2360 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

2361 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

2362 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

2363 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

2366 #i‚de‡
GL_NV_ãxtuª_shadî2


2367 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

2370 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


2371 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

2374 #i‚de‡
GL_NV_vîãx_¥ogøm


2375 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

2376 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

2377 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

2378 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

2379 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

2380 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

2381 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

2382 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

2383 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

2384 
	#GL_IDENTITY_NV
 0x862A

	)

2385 
	#GL_INVERSE_NV
 0x862B

	)

2386 
	#GL_TRANSPOSE_NV
 0x862C

	)

2387 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

2388 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

2389 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

2390 
	#GL_MATRIX0_NV
 0x8630

	)

2391 
	#GL_MATRIX1_NV
 0x8631

	)

2392 
	#GL_MATRIX2_NV
 0x8632

	)

2393 
	#GL_MATRIX3_NV
 0x8633

	)

2394 
	#GL_MATRIX4_NV
 0x8634

	)

2395 
	#GL_MATRIX5_NV
 0x8635

	)

2396 
	#GL_MATRIX6_NV
 0x8636

	)

2397 
	#GL_MATRIX7_NV
 0x8637

	)

2398 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

2399 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

2400 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

2401 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

2402 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

2403 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

2404 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

2405 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

2406 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

2407 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

2408 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

2409 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

2410 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

2411 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

2412 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

2413 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

2414 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

2415 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

2416 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

2417 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

2418 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

2419 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

2420 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

2421 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

2422 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

2423 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

2424 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

2425 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

2426 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

2427 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

2428 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

2429 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

2430 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

2431 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

2432 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

2433 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

2434 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

2435 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

2436 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

2437 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

2438 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

2439 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

2440 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

2441 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

2442 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

2443 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

2444 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

2445 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

2446 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

2447 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

2448 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

2449 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

2450 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

2451 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

2452 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

2453 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

2454 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

2455 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

2456 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

2457 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

2460 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


2461 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

2462 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

2463 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

2466 #i‚de‡
GL_SGIX_sˇÀbüs_höt


2467 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

2470 #i‚de‡
GL_OML_öãæa˚


2471 
	#GL_INTERLACE_OML
 0x8980

	)

2472 
	#GL_INTERLACE_READ_OML
 0x8981

	)

2475 #i‚de‡
GL_OML_subßm∂e


2476 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

2477 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

2480 #i‚de‡
GL_OML_ªßm∂e


2481 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

2482 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

2483 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

2484 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

2485 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

2486 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

2489 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


2490 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

2491 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

2494 #i‚de‡
GL_ATI_ívm≠_bumpm≠


2495 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

2496 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

2497 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

2498 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

2499 
	#GL_DUDV_ATI
 0x8779

	)

2500 
	#GL_DU8DV8_ATI
 0x877A

	)

2501 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

2502 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

2505 #i‚de‡
GL_ATI_‰agmít_shadî


2506 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

2507 
	#GL_REG_0_ATI
 0x8921

	)

2508 
	#GL_REG_1_ATI
 0x8922

	)

2509 
	#GL_REG_2_ATI
 0x8923

	)

2510 
	#GL_REG_3_ATI
 0x8924

	)

2511 
	#GL_REG_4_ATI
 0x8925

	)

2512 
	#GL_REG_5_ATI
 0x8926

	)

2513 
	#GL_REG_6_ATI
 0x8927

	)

2514 
	#GL_REG_7_ATI
 0x8928

	)

2515 
	#GL_REG_8_ATI
 0x8929

	)

2516 
	#GL_REG_9_ATI
 0x892A

	)

2517 
	#GL_REG_10_ATI
 0x892B

	)

2518 
	#GL_REG_11_ATI
 0x892C

	)

2519 
	#GL_REG_12_ATI
 0x892D

	)

2520 
	#GL_REG_13_ATI
 0x892E

	)

2521 
	#GL_REG_14_ATI
 0x892F

	)

2522 
	#GL_REG_15_ATI
 0x8930

	)

2523 
	#GL_REG_16_ATI
 0x8931

	)

2524 
	#GL_REG_17_ATI
 0x8932

	)

2525 
	#GL_REG_18_ATI
 0x8933

	)

2526 
	#GL_REG_19_ATI
 0x8934

	)

2527 
	#GL_REG_20_ATI
 0x8935

	)

2528 
	#GL_REG_21_ATI
 0x8936

	)

2529 
	#GL_REG_22_ATI
 0x8937

	)

2530 
	#GL_REG_23_ATI
 0x8938

	)

2531 
	#GL_REG_24_ATI
 0x8939

	)

2532 
	#GL_REG_25_ATI
 0x893A

	)

2533 
	#GL_REG_26_ATI
 0x893B

	)

2534 
	#GL_REG_27_ATI
 0x893C

	)

2535 
	#GL_REG_28_ATI
 0x893D

	)

2536 
	#GL_REG_29_ATI
 0x893E

	)

2537 
	#GL_REG_30_ATI
 0x893F

	)

2538 
	#GL_REG_31_ATI
 0x8940

	)

2539 
	#GL_CON_0_ATI
 0x8941

	)

2540 
	#GL_CON_1_ATI
 0x8942

	)

2541 
	#GL_CON_2_ATI
 0x8943

	)

2542 
	#GL_CON_3_ATI
 0x8944

	)

2543 
	#GL_CON_4_ATI
 0x8945

	)

2544 
	#GL_CON_5_ATI
 0x8946

	)

2545 
	#GL_CON_6_ATI
 0x8947

	)

2546 
	#GL_CON_7_ATI
 0x8948

	)

2547 
	#GL_CON_8_ATI
 0x8949

	)

2548 
	#GL_CON_9_ATI
 0x894A

	)

2549 
	#GL_CON_10_ATI
 0x894B

	)

2550 
	#GL_CON_11_ATI
 0x894C

	)

2551 
	#GL_CON_12_ATI
 0x894D

	)

2552 
	#GL_CON_13_ATI
 0x894E

	)

2553 
	#GL_CON_14_ATI
 0x894F

	)

2554 
	#GL_CON_15_ATI
 0x8950

	)

2555 
	#GL_CON_16_ATI
 0x8951

	)

2556 
	#GL_CON_17_ATI
 0x8952

	)

2557 
	#GL_CON_18_ATI
 0x8953

	)

2558 
	#GL_CON_19_ATI
 0x8954

	)

2559 
	#GL_CON_20_ATI
 0x8955

	)

2560 
	#GL_CON_21_ATI
 0x8956

	)

2561 
	#GL_CON_22_ATI
 0x8957

	)

2562 
	#GL_CON_23_ATI
 0x8958

	)

2563 
	#GL_CON_24_ATI
 0x8959

	)

2564 
	#GL_CON_25_ATI
 0x895A

	)

2565 
	#GL_CON_26_ATI
 0x895B

	)

2566 
	#GL_CON_27_ATI
 0x895C

	)

2567 
	#GL_CON_28_ATI
 0x895D

	)

2568 
	#GL_CON_29_ATI
 0x895E

	)

2569 
	#GL_CON_30_ATI
 0x895F

	)

2570 
	#GL_CON_31_ATI
 0x8960

	)

2571 
	#GL_MOV_ATI
 0x8961

	)

2572 
	#GL_ADD_ATI
 0x8963

	)

2573 
	#GL_MUL_ATI
 0x8964

	)

2574 
	#GL_SUB_ATI
 0x8965

	)

2575 
	#GL_DOT3_ATI
 0x8966

	)

2576 
	#GL_DOT4_ATI
 0x8967

	)

2577 
	#GL_MAD_ATI
 0x8968

	)

2578 
	#GL_LERP_ATI
 0x8969

	)

2579 
	#GL_CND_ATI
 0x896A

	)

2580 
	#GL_CND0_ATI
 0x896B

	)

2581 
	#GL_DOT2_ADD_ATI
 0x896C

	)

2582 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

2583 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

2584 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

2585 
	#GL_NUM_PASSES_ATI
 0x8970

	)

2586 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

2587 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

2588 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

2589 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

2590 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

2591 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

2592 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

2593 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

2594 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

2595 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

2596 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

2597 
	#GL_RED_BIT_ATI
 0x00000001

	)

2598 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

2599 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

2600 
	#GL_2X_BIT_ATI
 0x00000001

	)

2601 
	#GL_4X_BIT_ATI
 0x00000002

	)

2602 
	#GL_8X_BIT_ATI
 0x00000004

	)

2603 
	#GL_HALF_BIT_ATI
 0x00000008

	)

2604 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

2605 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

2606 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

2607 
	#GL_COMP_BIT_ATI
 0x00000002

	)

2608 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

2609 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

2612 #i‚de‡
GL_ATI_≤_åüngÀs


2613 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

2614 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

2615 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

2616 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

2617 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

2618 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

2619 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

2620 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

2621 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

2624 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


2625 
	#GL_STATIC_ATI
 0x8760

	)

2626 
	#GL_DYNAMIC_ATI
 0x8761

	)

2627 
	#GL_PRESERVE_ATI
 0x8762

	)

2628 
	#GL_DISCARD_ATI
 0x8763

	)

2629 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

2630 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

2631 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

2632 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

2635 #i‚de‡
GL_EXT_vîãx_shadî


2636 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

2637 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

2638 
	#GL_OP_INDEX_EXT
 0x8782

	)

2639 
	#GL_OP_NEGATE_EXT
 0x8783

	)

2640 
	#GL_OP_DOT3_EXT
 0x8784

	)

2641 
	#GL_OP_DOT4_EXT
 0x8785

	)

2642 
	#GL_OP_MUL_EXT
 0x8786

	)

2643 
	#GL_OP_ADD_EXT
 0x8787

	)

2644 
	#GL_OP_MADD_EXT
 0x8788

	)

2645 
	#GL_OP_FRAC_EXT
 0x8789

	)

2646 
	#GL_OP_MAX_EXT
 0x878A

	)

2647 
	#GL_OP_MIN_EXT
 0x878B

	)

2648 
	#GL_OP_SET_GE_EXT
 0x878C

	)

2649 
	#GL_OP_SET_LT_EXT
 0x878D

	)

2650 
	#GL_OP_CLAMP_EXT
 0x878E

	)

2651 
	#GL_OP_FLOOR_EXT
 0x878F

	)

2652 
	#GL_OP_ROUND_EXT
 0x8790

	)

2653 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

2654 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

2655 
	#GL_OP_POWER_EXT
 0x8793

	)

2656 
	#GL_OP_RECIP_EXT
 0x8794

	)

2657 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

2658 
	#GL_OP_SUB_EXT
 0x8796

	)

2659 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

2660 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

2661 
	#GL_OP_MOV_EXT
 0x8799

	)

2662 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

2663 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

2664 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

2665 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

2666 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

2667 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

2668 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

2669 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

2670 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

2671 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

2672 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

2673 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

2674 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

2675 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

2676 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

2677 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

2678 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

2679 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

2680 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

2681 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

2682 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

2683 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

2684 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

2685 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

2686 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

2687 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

2688 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

2689 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

2690 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

2691 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

2692 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

2693 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

2694 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

2695 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

2696 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

2697 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

2698 
	#GL_SCALAR_EXT
 0x87BE

	)

2699 
	#GL_VECTOR_EXT
 0x87BF

	)

2700 
	#GL_MATRIX_EXT
 0x87C0

	)

2701 
	#GL_VARIANT_EXT
 0x87C1

	)

2702 
	#GL_INVARIANT_EXT
 0x87C2

	)

2703 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

2704 
	#GL_LOCAL_EXT
 0x87C4

	)

2705 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

2706 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

2707 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

2708 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

2709 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

2710 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

2711 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

2712 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

2713 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

2714 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

2715 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

2716 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

2717 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

2718 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

2719 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

2720 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

2721 
	#GL_X_EXT
 0x87D5

	)

2722 
	#GL_Y_EXT
 0x87D6

	)

2723 
	#GL_Z_EXT
 0x87D7

	)

2724 
	#GL_W_EXT
 0x87D8

	)

2725 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

2726 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

2727 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

2728 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

2729 
	#GL_ZERO_EXT
 0x87DD

	)

2730 
	#GL_ONE_EXT
 0x87DE

	)

2731 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

2732 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

2733 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

2734 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

2735 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

2736 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

2737 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

2738 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

2739 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

2740 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

2741 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

2742 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

2743 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

2744 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

2745 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

2748 #i‚de‡
GL_ATI_vîãx_°ªams


2749 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

2750 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

2751 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

2752 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

2753 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

2754 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

2755 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

2756 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

2757 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

2758 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

2761 #i‚de‡
GL_ATI_ñemít_¨øy


2762 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

2763 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

2764 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

2767 #i‚de‡
GL_SUN_mesh_¨øy


2768 
	#GL_QUAD_MESH_SUN
 0x8614

	)

2769 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

2772 #i‚de‡
GL_SUN_¶i˚_accum


2773 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

2776 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


2777 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

2780 #i‚de‡
GL_NV_dïth_˛amp


2781 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

2784 #i‚de‡
GL_NV_oc˛usi⁄_quîy


2785 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

2786 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

2787 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

2788 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

2791 #i‚de‡
GL_NV_poöt_•rôe


2792 
	#GL_POINT_SPRITE_NV
 0x8861

	)

2793 
	#GL_COORD_REPLACE_NV
 0x8862

	)

2794 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

2797 #i‚de‡
GL_NV_ãxtuª_shadî3


2798 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

2799 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

2800 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

2801 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

2802 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

2803 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

2804 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

2805 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

2806 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

2807 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

2808 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

2809 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

2810 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

2811 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

2812 
	#GL_HILO8_NV
 0x885E

	)

2813 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

2814 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

2817 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


2820 #i‚de‡
GL_EXT_shadow_funcs


2823 #i‚de‡
GL_EXT_°ícû_two_side


2824 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

2825 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

2828 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


2829 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

2832 #i‚de‡
GL_APPLE_˛õ¡_°‹age


2833 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

2836 #i‚de‡
GL_APPLE_ñemít_¨øy


2837 
	#GL_ELEMENT_ARRAY_APPLE
 0x8768

	)

2838 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8769

	)

2839 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x876A

	)

2842 #i‚de‡
GL_APPLE_„n˚


2843 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

2844 
	#GL_FENCE_APPLE
 0x8A0B

	)

2847 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


2848 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

2851 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


2852 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

2853 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

2854 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

2855 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

2856 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

2857 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

2860 #i‚de‡
GL_APPLE_ycb¸_422


2861 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

2862 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

2863 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

2866 #i‚de‡
GL_S3_s3tc


2867 
	#GL_RGB_S3TC
 0x83A0

	)

2868 
	#GL_RGB4_S3TC
 0x83A1

	)

2869 
	#GL_RGBA_S3TC
 0x83A2

	)

2870 
	#GL_RGBA4_S3TC
 0x83A3

	)

2873 #i‚de‡
GL_ATI_døw_buf„rs


2874 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

2875 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

2876 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

2877 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

2878 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

2879 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

2880 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

2881 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

2882 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

2883 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

2884 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

2885 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

2886 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

2887 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

2888 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

2889 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

2890 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

2893 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


2894 
	#GL_TYPE_RGBA_FLOAT_ATI
 0x8820

	)

2895 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

2898 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


2899 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

2900 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

2901 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

2904 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


2905 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

2906 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

2907 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

2908 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

2909 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

2910 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

2911 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

2912 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

2913 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

2914 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

2915 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

2916 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

2919 #i‚de‡
GL_NV_Êﬂt_buf„r


2920 
	#GL_FLOAT_R_NV
 0x8880

	)

2921 
	#GL_FLOAT_RG_NV
 0x8881

	)

2922 
	#GL_FLOAT_RGB_NV
 0x8882

	)

2923 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

2924 
	#GL_FLOAT_R16_NV
 0x8884

	)

2925 
	#GL_FLOAT_R32_NV
 0x8885

	)

2926 
	#GL_FLOAT_RG16_NV
 0x8886

	)

2927 
	#GL_FLOAT_RG32_NV
 0x8887

	)

2928 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

2929 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

2930 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

2931 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

2932 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

2933 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

2934 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

2937 #i‚de‡
GL_NV_‰agmít_¥ogøm


2938 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

2939 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

2940 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

2941 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

2942 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

2943 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

2946 #i‚de‡
GL_NV_hÆf_Êﬂt


2947 
	#GL_HALF_FLOAT_NV
 0x140B

	)

2950 #i‚de‡
GL_NV_pixñ_d©a_ønge


2951 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

2952 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

2953 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

2954 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

2955 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

2956 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

2959 #i‚de‡
GL_NV_¥imôive_ª°¨t


2960 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

2961 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

2964 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


2965 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

2968 #i‚de‡
GL_NV_vîãx_¥ogøm2


2971 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


2974 #i‚de‡
GL_ATI_£∑øã_°ícû


2975 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

2976 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

2977 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

2978 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

2981 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


2984 #i‚de‡
GL_OES_ªad_f‹m©


2985 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

2986 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

2989 #i‚de‡
GL_EXT_dïth_bounds_ã°


2990 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

2991 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

2994 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


2995 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

2996 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

2997 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

3000 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


3001 
	#GL_BLEND_EQUATION_RGB_EXT
 
GL_BLEND_EQUATION


	)

3002 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

3005 #i‚de‡
GL_MESA_∑ck_övît


3006 
	#GL_PACK_INVERT_MESA
 0x8758

	)

3009 #i‚de‡
GL_MESA_ycb¸_ãxtuª


3010 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

3011 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

3012 
	#GL_YCBCR_MESA
 0x8757

	)

3015 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


3016 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

3017 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

3018 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

3019 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

3022 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


3025 #i‚de‡
GL_NV_‰agmít_¥ogøm2


3026 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

3027 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

3028 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

3029 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

3030 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

3033 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


3038 #i‚de‡
GL_NV_vîãx_¥ogøm3


3042 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


3043 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

3044 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

3045 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

3046 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

3047 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

3048 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

3049 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

3050 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

3051 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

3052 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

3053 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

3054 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

3055 
	#GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT
 0x8CD8

	)

3056 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

3057 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

3058 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

3059 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

3060 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

3061 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

3062 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

3063 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

3064 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

3065 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

3066 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

3067 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

3068 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

3069 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

3070 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

3071 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

3072 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

3073 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

3074 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

3075 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

3076 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

3077 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

3078 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

3079 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

3080 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

3081 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

3082 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

3083 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

3084 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

3085 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

3086 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

3087 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

3088 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

3089 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

3090 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

3091 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

3092 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

3093 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

3094 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

3097 #i‚de‡
GL_GREMEDY_°rög_m¨kî


3103 
	~<°ddef.h
>

3104 #i‚de‡
GL_VERSION_2_0


3106 
	tGLch¨
;

3109 #i‚de‡
GL_VERSION_1_5


3111 #ifde‡
__APPLE__


3112 
	tGLöçå
;

3113 
	tGLsizeùå
;

3115 
±rdiff_t
 
	tGLöçå
;

3116 
±rdiff_t
 
	tGLsizeùå
;

3120 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


3122 #ifde‡
__APPLE__


3123 
	tGLöçåARB
;

3124 
	tGLsizeùåARB
;

3126 
±rdiff_t
 
	tGLöçåARB
;

3127 
±rdiff_t
 
	tGLsizeùåARB
;

3131 #i‚de‡
GL_ARB_shadî_obje˘s


3133 
	tGLch¨ARB
;

3134 #i‡
deföed
(
__APPLE__
)

3135 *
	tGLh™dÀARB
;

3137 
	tGLh™dÀARB
;

3142 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


3143 
	tGLhÆfARB
;

3146 #i‚de‡
GL_NV_hÆf_Êﬂt


3147 
	tGLhÆfNV
;

3150 #i‚de‡
GL_VERSION_1_2


3151 
	#GL_VERSION_1_2
 1

	)

3152 #ifde‡
GL_GLEXT_PROTOTYPES


3153 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GL˛ampf
, GLclampf, GLclampf, GLclampf);

3154 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
);

3155 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *);

3156 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

3157 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

3158 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

3159 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

3160 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

3161 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3162 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3163 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

3164 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
, 
GLsizei
, 
GLöt
, GLint, GLsizei);

3165 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

3166 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

3167 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
, GLíum, 
GLÊﬂt
);

3168 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

3169 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
, GLíum, 
GLöt
);

3170 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

3171 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

3172 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
, GLsizei);

3173 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

3174 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3175 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3176 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *, GLvoid *, GLvoid *);

3177 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *, const GLvoid *);

3178 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

3179 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3180 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3181 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

3182 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

3183 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3184 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
, 
GLsizei
, GLíum, 
GLboﬁón
);

3185 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
, GLíum, 
GLboﬁón
);

3186 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
);

3187 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
);

3188 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

3189 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

3190 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

3192 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

3193 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

3194 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

3195 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

3196 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3197 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3198 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3199 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

3200 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3201 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3202 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

3203 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

3204 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

3205 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

3206 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

3207 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3208 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

3209 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3210 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3211 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3212 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

3213 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3214 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3215 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

3216 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

3217 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

3218 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3219 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3220 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

3221 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3222 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3223 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3224 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3225 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

3226 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

3227 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

3228 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

3229 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3232 #i‚de‡
GL_VERSION_1_3


3233 
	#GL_VERSION_1_3
 1

	)

3234 #ifde‡
GL_GLEXT_PROTOTYPES


3235 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
);

3236 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
);

3237 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
, 
GLdoubÀ
);

3238 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3239 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
, 
GLÊﬂt
);

3240 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3241 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
, 
GLöt
);

3242 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
, c⁄° 
GLöt
 *);

3243 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
, 
GLsh‹t
);

3244 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3245 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
, 
GLdoubÀ
, GLdouble);

3246 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3247 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
, 
GLÊﬂt
, GLfloat);

3248 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3249 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
, 
GLöt
, GLint);

3250 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
, c⁄° 
GLöt
 *);

3251 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
, 
GLsh‹t
, GLshort);

3252 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3253 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

3254 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3255 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

3256 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3257 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
, 
GLöt
, GLint, GLint);

3258 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
, c⁄° 
GLöt
 *);

3259 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

3260 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3261 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3262 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3263 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3264 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3265 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

3266 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
, c⁄° 
GLöt
 *);

3267 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3268 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3269 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *);

3270 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *);

3271 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *);

3272 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *);

3273 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GL˛ampf
, 
GLboﬁón
);

3274 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3275 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3276 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3277 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3278 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3279 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3280 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
, 
GLöt
, 
GLvoid
 *);

3282 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

3283 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

3284 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3285 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3286 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3287 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3288 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3289 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3290 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3291 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3292 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3293 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3294 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3295 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3296 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3297 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3298 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3299 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3300 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3301 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3302 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3303 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3304 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3305 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3306 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3307 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3308 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3309 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3310 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3311 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3312 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3313 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3314 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3315 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3316 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3317 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3318 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3319 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3320 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3321 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3322 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3323 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3324 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3325 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3326 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3327 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

3330 #i‚de‡
GL_VERSION_1_4


3331 
	#GL_VERSION_1_4
 1

	)

3332 #ifde‡
GL_GLEXT_PROTOTYPES


3333 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
, GLenum, GLenum, GLenum);

3334 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
);

3335 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *);

3336 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
);

3337 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *);

3338 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3339 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
, 
GLöt
 *, 
GLsizei
 *, GLsizei);

3340 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* *, GLsizei);

3341 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
, 
GLÊﬂt
);

3342 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3343 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
, 
GLöt
);

3344 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
, c⁄° 
GLöt
 *);

3345 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
, GLbyte, GLbyte);

3346 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *);

3347 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
, GLdouble, GLdouble);

3348 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *);

3349 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
, GLfloat, GLfloat);

3350 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *);

3351 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
, GLint, GLint);

3352 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *);

3353 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
, GLshort, GLshort);

3354 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *);

3355 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
, GLubyte, GLubyte);

3356 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *);

3357 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
, GLuint, GLuint);

3358 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *);

3359 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
, GLushort, GLushort);

3360 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *);

3361 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3362 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
, GLdouble);

3363 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *);

3364 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
, GLfloat);

3365 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *);

3366 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
, GLint);

3367 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *);

3368 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
, GLshort);

3369 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *);

3370 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
, GLdouble, GLdouble);

3371 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *);

3372 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
, GLfloat, GLfloat);

3373 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *);

3374 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
, GLint, GLint);

3375 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *);

3376 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
, GLshort, GLshort);

3377 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *);

3379 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

3380 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

3381 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

3382 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

3383 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

3384 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3385 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

3386 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

3387 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

3388 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3389 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

3390 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3391 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

3392 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

3393 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

3394 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3395 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

3396 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3397 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

3398 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3399 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

3400 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3401 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

3402 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

3403 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

3404 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

3405 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

3406 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

3407 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3408 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3409 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3410 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

3411 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3412 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

3413 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3414 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

3415 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3416 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3417 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3418 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

3419 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3420 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

3421 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3422 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

3423 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3426 #i‚de‡
GL_VERSION_1_5


3427 
	#GL_VERSION_1_5
 1

	)

3428 #ifde‡
GL_GLEXT_PROTOTYPES


3429 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
, 
GLuöt
 *);

3430 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
, c⁄° 
GLuöt
 *);

3431 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
);

3432 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
, 
GLuöt
);

3433 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
);

3434 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
, GLíum, 
GLöt
 *);

3435 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3436 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
, 
GLíum
, GLuint *);

3437 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
, 
GLuöt
);

3438 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
, c⁄° 
GLuöt
 *);

3439 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
, 
GLuöt
 *);

3440 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
);

3441 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
, 
GLsizeùå
, c⁄° 
GLvoid
 *, GLenum);

3442 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
, 
GLöçå
, 
GLsizeùå
, c⁄° 
GLvoid
 *);

3443 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
, 
GLöçå
, 
GLsizeùå
, 
GLvoid
 *);

3444 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„r
 (
GLíum
, GLenum);

3445 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
);

3446 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

3447 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
, GLíum, 
GLvoid
* *);

3449 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

3450 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

3451 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

3452 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

3453 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

3454 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3455 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3456 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

3457 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

3458 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

3459 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

3460 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

3461 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

3462 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

3463 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

3464 
GLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

3465 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

3466 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3467 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

3470 #i‚de‡
GL_VERSION_2_0


3471 
	#GL_VERSION_2_0
 1

	)

3472 #ifde‡
GL_GLEXT_PROTOTYPES


3473 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
, GLenum);

3474 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
, c⁄° 
GLíum
 *);

3475 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
, GLenum, GLenum, GLenum);

3476 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
, GLíum, 
GLöt
, 
GLuöt
);

3477 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
, 
GLuöt
);

3478 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
, GLuint);

3479 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
, GLuöt, c⁄° 
GLch¨
 *);

3480 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
);

3481 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

3482 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
);

3483 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
);

3484 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
);

3485 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
, GLuint);

3486 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
);

3487 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
);

3488 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨
 *);

3489 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨
 *);

3490 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
, 
GLsizei
, GLsizei *, GLuint *);

3491 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
, c⁄° 
GLch¨
 *);

3492 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3493 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

3494 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3495 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

3496 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

3497 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
, c⁄° 
GLch¨
 *);

3498 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
, 
GLöt
, 
GLÊﬂt
 *);

3499 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
, 
GLöt
, GLint *);

3500 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

3501 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

3502 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3503 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

3504 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
);

3505 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
);

3506 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
);

3507 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
, 
GLsizei
, c⁄° 
GLch¨
* *, c⁄° 
GLöt
 *);

3508 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
);

3509 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
, 
GLÊﬂt
);

3510 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
, 
GLÊﬂt
, GLfloat);

3511 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat);

3512 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3513 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
, GLint);

3514 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
, GLint, GLint);

3515 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
, GLint, GLint, GLint);

3516 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
, GLint, GLint, GLint, GLint);

3517 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

3518 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

3519 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

3520 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

3521 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
, 
GLsizei
, const GLint *);

3522 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
, 
GLsizei
, const GLint *);

3523 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
, 
GLsizei
, const GLint *);

3524 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
, 
GLsizei
, const GLint *);

3525 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

3526 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

3527 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

3528 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
);

3529 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
, 
GLdoubÀ
);

3530 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3531 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
, 
GLÊﬂt
);

3532 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3533 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
, 
GLsh‹t
);

3534 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3535 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

3536 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3537 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

3538 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3539 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
, 
GLsh‹t
, GLshort);

3540 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3541 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

3542 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3543 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

3544 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3545 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

3546 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3547 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
, c⁄° 
GLbyã
 *);

3548 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
, c⁄° 
GLöt
 *);

3549 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3550 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

3551 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
, c⁄° 
GLubyã
 *);

3552 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
, const GLuint *);

3553 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
, c⁄° 
GLush‹t
 *);

3554 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
, c⁄° 
GLbyã
 *);

3555 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3556 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3557 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3558 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3559 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
, c⁄° 
GLöt
 *);

3560 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3561 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3562 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
, c⁄° 
GLubyã
 *);

3563 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
, const GLuint *);

3564 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
, c⁄° 
GLush‹t
 *);

3565 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, c⁄° 
GLvoid
 *);

3567 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

3568 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

3569 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

3570 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

3571 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

3572 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

3573 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

3574 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

3575 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

3576 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

3577 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3578 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

3579 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

3580 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

3581 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

3582 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

3583 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

3584 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tobj
);

3585 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

3586 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3587 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

3588 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3589 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

3590 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

3591 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

3592 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

3593 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

3594 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

3595 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3596 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3597 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

3598 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3599 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

3600 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3601 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

3602 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3603 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

3604 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

3605 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

3606 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

3607 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

3608 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

3609 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

3610 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

3611 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3612 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3613 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3614 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3615 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3616 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3617 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3618 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3619 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3620 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3621 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3622 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3623 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

3624 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3625 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

3626 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3627 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

3628 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3629 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3630 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3631 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

3632 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3633 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

3634 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3635 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3636 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3637 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

3638 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3639 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

3640 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3641 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

3642 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

3643 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3644 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

3645 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

3646 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

3647 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

3648 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

3649 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

3650 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3651 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

3652 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3653 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

3654 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

3655 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3656 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

3657 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

3658 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

3659 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3662 #i‚de‡
GL_ARB_mu…ôextuª


3663 
	#GL_ARB_mu…ôextuª
 1

	)

3664 #ifde‡
GL_GLEXT_PROTOTYPES


3665 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
);

3666 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
);

3667 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
, 
GLdoubÀ
);

3668 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3669 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
, 
GLÊﬂt
);

3670 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3671 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
, 
GLöt
);

3672 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

3673 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
, 
GLsh‹t
);

3674 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3675 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble);

3676 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3677 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat);

3678 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3679 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
, 
GLöt
, GLint);

3680 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

3681 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
, 
GLsh‹t
, GLshort);

3682 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3683 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

3684 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3685 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

3686 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3687 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
, 
GLöt
, GLint, GLint);

3688 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

3689 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

3690 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3691 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3692 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

3693 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3694 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3695 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

3696 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

3697 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3698 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

3700 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3701 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3702 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3703 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3704 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3705 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3706 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3707 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3708 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3709 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3710 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3711 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3712 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3713 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3714 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3715 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3716 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3717 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3718 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3719 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3720 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3721 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3722 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3723 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3724 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3725 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3726 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3727 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3728 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3729 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3730 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3731 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3732 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3733 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3736 #i‚de‡
GL_ARB_å™•o£_m©rix


3737 
	#GL_ARB_å™•o£_m©rix
 1

	)

3738 #ifde‡
GL_GLEXT_PROTOTYPES


3739 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *);

3740 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *);

3741 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *);

3742 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *);

3744 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3745 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3746 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

3747 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

3750 #i‚de‡
GL_ARB_mu…ißm∂e


3751 
	#GL_ARB_mu…ißm∂e
 1

	)

3752 #ifde‡
GL_GLEXT_PROTOTYPES


3753 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GL˛ampf
, 
GLboﬁón
);

3755 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3758 #i‚de‡
GL_ARB_ãxtuª_ív_add


3759 
	#GL_ARB_ãxtuª_ív_add
 1

	)

3762 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


3763 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

3766 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


3767 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

3768 #ifde‡
GL_GLEXT_PROTOTYPES


3769 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3770 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3771 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLsizei, c⁄° 
GLvoid
 *);

3772 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3773 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3774 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLsizei, c⁄° 
GLvoid
 *);

3775 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
, 
GLöt
, 
GLvoid
 *);

3777 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3778 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3779 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3780 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3781 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3782 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

3783 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

3786 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


3787 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

3790 #i‚de‡
GL_ARB_poöt_∑ømëîs


3791 
	#GL_ARB_poöt_∑ømëîs
 1

	)

3792 #ifde‡
GL_GLEXT_PROTOTYPES


3793 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
, 
GLÊﬂt
);

3794 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

3796 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

3797 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3800 #i‚de‡
GL_ARB_vîãx_bÀnd


3801 
	#GL_ARB_vîãx_bÀnd
 1

	)

3802 #ifde‡
GL_GLEXT_PROTOTYPES


3803 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
, c⁄° 
GLbyã
 *);

3804 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
, c⁄° 
GLsh‹t
 *);

3805 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
, const GLint *);

3806 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
, c⁄° 
GLÊﬂt
 *);

3807 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
, c⁄° 
GLdoubÀ
 *);

3808 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
, c⁄° 
GLubyã
 *);

3809 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
, c⁄° 
GLush‹t
 *);

3810 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
, c⁄° 
GLuöt
 *);

3811 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3812 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
);

3814 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

3815 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

3816 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

3817 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

3818 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

3819 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

3820 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

3821 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

3822 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3823 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

3826 #i‚de‡
GL_ARB_m©rix_∑Àâe


3827 
	#GL_ARB_m©rix_∑Àâe
 1

	)

3828 #ifde‡
GL_GLEXT_PROTOTYPES


3829 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
);

3830 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
, c⁄° 
GLubyã
 *);

3831 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
, c⁄° 
GLush‹t
 *);

3832 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
, c⁄° 
GLuöt
 *);

3833 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

3835 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

3836 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

3837 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

3838 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

3839 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3842 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


3843 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

3846 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


3847 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

3850 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


3851 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

3854 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


3855 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

3858 #i‚de‡
GL_ARB_dïth_ãxtuª


3859 
	#GL_ARB_dïth_ãxtuª
 1

	)

3862 #i‚de‡
GL_ARB_shadow


3863 
	#GL_ARB_shadow
 1

	)

3866 #i‚de‡
GL_ARB_shadow_ambõ¡


3867 
	#GL_ARB_shadow_ambõ¡
 1

	)

3870 #i‚de‡
GL_ARB_wödow_pos


3871 
	#GL_ARB_wödow_pos
 1

	)

3872 #ifde‡
GL_GLEXT_PROTOTYPES


3873 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
, GLdouble);

3874 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *);

3875 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
, GLfloat);

3876 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *);

3877 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
, GLint);

3878 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *);

3879 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
, GLshort);

3880 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *);

3881 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
, GLdouble, GLdouble);

3882 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *);

3883 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
, GLfloat, GLfloat);

3884 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *);

3885 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
, GLint, GLint);

3886 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *);

3887 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
, GLshort, GLshort);

3888 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *);

3890 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3891 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3892 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

3893 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3894 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

3895 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3896 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

3897 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3898 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3899 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

3900 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

3901 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

3902 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

3903 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

3904 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

3905 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

3908 #i‚de‡
GL_ARB_vîãx_¥ogøm


3909 
	#GL_ARB_vîãx_¥ogøm
 1

	)

3910 #ifde‡
GL_GLEXT_PROTOTYPES


3911 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
, 
GLdoubÀ
);

3912 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3913 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
, 
GLÊﬂt
);

3914 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3915 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
, 
GLsh‹t
);

3916 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3917 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

3918 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3919 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

3920 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3921 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
, 
GLsh‹t
, GLshort);

3922 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3923 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

3924 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3925 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

3926 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3927 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

3928 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3929 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
, c⁄° 
GLbyã
 *);

3930 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
, c⁄° 
GLöt
 *);

3931 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3932 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

3933 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
, c⁄° 
GLubyã
 *);

3934 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
, const GLuint *);

3935 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
, c⁄° 
GLush‹t
 *);

3936 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
, c⁄° 
GLbyã
 *);

3937 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3938 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

3939 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3940 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

3941 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
, c⁄° 
GLöt
 *);

3942 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

3943 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

3944 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
, c⁄° 
GLubyã
 *);

3945 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
, const GLuint *);

3946 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
, c⁄° 
GLush‹t
 *);

3947 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, c⁄° 
GLvoid
 *);

3948 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
);

3949 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
);

3950 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
, GLíum, 
GLsizei
, c⁄° 
GLvoid
 *);

3951 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
, 
GLuöt
);

3952 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

3953 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
, 
GLuöt
 *);

3954 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3955 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

3956 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3957 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

3958 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

3959 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

3960 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

3961 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

3962 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
 *);

3963 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

3964 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
 *);

3965 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

3966 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
, GLíum, 
GLöt
 *);

3967 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
, GLíum, 
GLvoid
 *);

3968 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

3969 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

3970 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

3971 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

3972 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
);

3974 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

3975 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3976 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

3977 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3978 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

3979 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3980 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

3981 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3982 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

3983 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3984 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

3985 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3986 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

3987 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3988 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

3989 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3990 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

3991 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3992 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

3993 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

3994 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

3995 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

3996 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

3997 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

3998 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

3999 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4000 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4001 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4002 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4003 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4004 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4005 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

4006 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4007 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4008 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4009 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4010 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4011 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4012 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4013 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

4014 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

4015 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

4016 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

4017 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4018 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

4019 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4020 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4021 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4022 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

4023 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4024 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4025 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

4026 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

4027 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

4028 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

4029 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4030 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

4031 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4032 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4033 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4034 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

4035 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4038 #i‚de‡
GL_ARB_‰agmít_¥ogøm


4039 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

4043 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


4044 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

4045 #ifde‡
GL_GLEXT_PROTOTYPES


4046 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
, 
GLuöt
);

4047 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

4048 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
, 
GLuöt
 *);

4049 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
);

4050 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
, 
GLsizeùåARB
, c⁄° 
GLvoid
 *, GLenum);

4051 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
, 
GLöçåARB
, 
GLsizeùåARB
, c⁄° 
GLvoid
 *);

4052 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
, 
GLöçåARB
, 
GLsizeùåARB
, 
GLvoid
 *);

4053 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
, GLenum);

4054 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
);

4055 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
, GLíum, 
GLöt
 *);

4056 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
, GLíum, 
GLvoid
* *);

4058 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

4059 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

4060 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

4061 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4062 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

4063 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

4064 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, 
	tGLvoid
 *
	td©a
);

4065 
GLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

4066 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4067 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4068 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

4071 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


4072 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

4073 #ifde‡
GL_GLEXT_PROTOTYPES


4074 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
, 
GLuöt
 *);

4075 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

4076 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
);

4077 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
, 
GLuöt
);

4078 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
);

4079 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
, GLíum, 
GLöt
 *);

4080 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4081 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
, 
GLíum
, GLuint *);

4083 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

4084 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

4085 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

4086 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

4087 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4088 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4089 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4090 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

4093 #i‚de‡
GL_ARB_shadî_obje˘s


4094 
	#GL_ARB_shadî_obje˘s
 1

	)

4095 #ifde‡
GL_GLEXT_PROTOTYPES


4096 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
);

4097 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
);

4098 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
, GLhandleARB);

4099 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
);

4100 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
, 
GLsizei
, c⁄° 
GLch¨ARB
* *, c⁄° 
GLöt
 *);

4101 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
);

4102 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

4103 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
, GLhandleARB);

4104 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
);

4105 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
);

4106 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
);

4107 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
, 
GLÊﬂt
);

4108 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat);

4109 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat);

4110 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4111 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
, GLint);

4112 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
, GLint, GLint);

4113 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
, GLint, GLint, GLint);

4114 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
, GLint, GLint, GLint, GLint);

4115 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4116 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4117 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4118 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4119 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4120 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4121 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4122 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

4123 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4124 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4125 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4126 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
, 
GLíum
, 
GLÊﬂt
 *);

4127 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
, 
GLíum
, 
GLöt
 *);

4128 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizeò*, 
GLch¨ARB
 *);

4129 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizei *, GLhandleARB *);

4130 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
, c⁄° 
GLch¨ARB
 *);

4131 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
, 
GLuöt
, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨ARB
 *);

4132 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
, 
GLöt
, 
GLÊﬂt
 *);

4133 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
, 
GLöt
, GLint *);

4134 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizeò*, 
GLch¨ARB
 *);

4136 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

4137 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

4138 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

4139 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

4140 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

4141 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

4142 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

4143 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

4144 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4145 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4146 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4147 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

4148 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

4149 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

4150 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

4151 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

4152 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

4153 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

4154 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

4155 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4156 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4157 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4158 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4159 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4160 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4161 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4162 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4163 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4164 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4165 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4166 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4167 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4168 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

4169 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

4170 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4171 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4172 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

4173 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

4174 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

4177 #i‚de‡
GL_ARB_vîãx_shadî


4178 
	#GL_ARB_vîãx_shadî
 1

	)

4179 #ifde‡
GL_GLEXT_PROTOTYPES


4180 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
, 
GLuöt
, c⁄° 
GLch¨ARB
 *);

4181 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
, 
GLuöt
, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨ARB
 *);

4182 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
, c⁄° 
GLch¨ARB
 *);

4184 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4185 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4186 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4189 #i‚de‡
GL_ARB_‰agmít_shadî


4190 
	#GL_ARB_‰agmít_shadî
 1

	)

4193 #i‚de‡
GL_ARB_shadög_œnguage_100


4194 
	#GL_ARB_shadög_œnguage_100
 1

	)

4197 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


4198 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

4201 #i‚de‡
GL_ARB_poöt_•rôe


4202 
	#GL_ARB_poöt_•rôe
 1

	)

4205 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


4206 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

4209 #i‚de‡
GL_ARB_døw_buf„rs


4210 
	#GL_ARB_døw_buf„rs
 1

	)

4211 #ifde‡
GL_GLEXT_PROTOTYPES


4212 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
, c⁄° 
GLíum
 *);

4214 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

4217 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


4218 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

4221 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


4222 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

4223 #ifde‡
GL_GLEXT_PROTOTYPES


4224 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
, GLenum);

4226 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

4229 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


4230 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

4233 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


4234 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

4237 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


4238 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

4241 #i‚de‡
GL_EXT_abgr


4242 
	#GL_EXT_abgr
 1

	)

4245 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


4246 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

4247 #ifde‡
GL_GLEXT_PROTOTYPES


4248 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GL˛ampf
, GLclampf, GLclampf, GLclampf);

4250 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

4253 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


4254 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

4255 #ifde‡
GL_GLEXT_PROTOTYPES


4256 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
, GLfloat);

4258 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

4261 #i‚de‡
GL_EXT_ãxtuª


4262 
	#GL_EXT_ãxtuª
 1

	)

4265 #i‚de‡
GL_EXT_ãxtuª3D


4266 
	#GL_EXT_ãxtuª3D
 1

	)

4267 #ifde‡
GL_GLEXT_PROTOTYPES


4268 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

4269 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4271 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4272 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4275 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


4276 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

4277 #ifde‡
GL_GLEXT_PROTOTYPES


4278 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4279 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
, GLíum, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4281 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

4282 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

4285 #i‚de‡
GL_EXT_subãxtuª


4286 
	#GL_EXT_subãxtuª
 1

	)

4287 #ifde‡
GL_GLEXT_PROTOTYPES


4288 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4289 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4291 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4292 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4295 #i‚de‡
GL_EXT_c›y_ãxtuª


4296 
	#GL_EXT_c›y_ãxtuª
 1

	)

4297 #ifde‡
GL_GLEXT_PROTOTYPES


4298 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLint);

4299 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLsizei, GLint);

4300 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
);

4301 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

4302 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

4304 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

4305 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

4306 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4307 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4308 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4311 #i‚de‡
GL_EXT_hi°ogøm


4312 
	#GL_EXT_hi°ogøm
 1

	)

4313 #ifde‡
GL_GLEXT_PROTOTYPES


4314 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

4315 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4316 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

4317 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

4318 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4319 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

4320 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
, 
GLsizei
, GLíum, 
GLboﬁón
);

4321 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
, GLíum, 
GLboﬁón
);

4322 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
);

4323 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
);

4325 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

4326 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4327 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4328 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

4329 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4330 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4331 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

4332 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

4333 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

4334 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

4337 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


4338 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

4339 #ifde‡
GL_GLEXT_PROTOTYPES


4340 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4341 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4342 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
, GLíum, 
GLÊﬂt
);

4343 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4344 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
, GLíum, 
GLöt
);

4345 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4346 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

4347 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
, GLsizei);

4348 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

4349 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4350 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

4351 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *, GLvoid *, GLvoid *);

4352 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *, const GLvoid *);

4354 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

4355 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

4356 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

4357 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4358 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

4359 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4360 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4361 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4362 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

4363 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4364 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4365 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

4366 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

4369 #i‚de‡
GL_EXT_cﬁ‹_m©rix


4370 
	#GL_EXT_cﬁ‹_m©rix
 1

	)

4373 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


4374 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

4375 #ifde‡
GL_GLEXT_PROTOTYPES


4376 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4377 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4378 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4379 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

4380 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

4381 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4382 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
, GLíum, 
GLöt
 *);

4384 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

4385 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4386 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4387 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4388 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

4389 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4390 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4393 #i‚de‡
GL_SGIX_pixñ_ãxtuª


4394 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

4395 #ifde‡
GL_GLEXT_PROTOTYPES


4396 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
);

4398 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

4401 #i‚de‡
GL_SGIS_pixñ_ãxtuª


4402 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

4403 #ifde‡
GL_GLEXT_PROTOTYPES


4404 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
, 
GLöt
);

4405 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
, c⁄° 
GLöt
 *);

4406 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
, 
GLÊﬂt
);

4407 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4408 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
, 
GLöt
 *);

4409 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
, 
GLÊﬂt
 *);

4411 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4412 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4413 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4414 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4415 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4416 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4419 #i‚de‡
GL_SGIS_ãxtuª4D


4420 
	#GL_SGIS_ãxtuª4D
 1

	)

4421 #ifde‡
GL_GLEXT_PROTOTYPES


4422 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

4423 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4425 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4426 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4429 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


4430 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

4433 #i‚de‡
GL_EXT_cmyka


4434 
	#GL_EXT_cmyka
 1

	)

4437 #i‚de‡
GL_EXT_ãxtuª_obje˘


4438 
	#GL_EXT_ãxtuª_obje˘
 1

	)

4439 #ifde‡
GL_GLEXT_PROTOTYPES


4440 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
, c⁄° 
GLuöt
 *, GLboolean *);

4441 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
, 
GLuöt
);

4442 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

4443 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
, 
GLuöt
 *);

4444 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
);

4445 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *, c⁄° 
GL˛ampf
 *);

4447 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

4448 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

4449 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

4450 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

4451 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

4452 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

4455 #i‚de‡
GL_SGIS_dëaû_ãxtuª


4456 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

4457 #ifde‡
GL_GLEXT_PROTOTYPES


4458 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4459 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
, 
GLÊﬂt
 *);

4461 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

4462 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

4465 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


4466 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

4467 #ifde‡
GL_GLEXT_PROTOTYPES


4468 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4469 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
, 
GLÊﬂt
 *);

4471 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

4472 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

4475 #i‚de‡
GL_EXT_∑cked_pixñs


4476 
	#GL_EXT_∑cked_pixñs
 1

	)

4479 #i‚de‡
GL_SGIS_ãxtuª_lod


4480 
	#GL_SGIS_ãxtuª_lod
 1

	)

4483 #i‚de‡
GL_SGIS_mu…ißm∂e


4484 
	#GL_SGIS_mu…ißm∂e
 1

	)

4485 #ifde‡
GL_GLEXT_PROTOTYPES


4486 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
, 
GLboﬁón
);

4487 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
);

4489 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

4490 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

4493 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


4494 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

4497 #i‚de‡
GL_EXT_vîãx_¨øy


4498 
	#GL_EXT_vîãx_¨øy
 1

	)

4499 #ifde‡
GL_GLEXT_PROTOTYPES


4500 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
);

4501 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4502 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
, 
GLöt
, 
GLsizei
);

4503 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
, GLsizei, c⁄° 
GLboﬁón
 *);

4504 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
, 
GLvoid
* *);

4505 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4506 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4507 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4508 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

4510 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

4511 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4512 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

4513 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

4514 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

4515 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4516 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4517 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4518 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4521 #i‚de‡
GL_EXT_misc_©åibuã


4522 
	#GL_EXT_misc_©åibuã
 1

	)

4525 #i‚de‡
GL_SGIS_gíî©e_mùm≠


4526 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

4529 #i‚de‡
GL_SGIX_˛ùm≠


4530 
	#GL_SGIX_˛ùm≠
 1

	)

4533 #i‚de‡
GL_SGIX_shadow


4534 
	#GL_SGIX_shadow
 1

	)

4537 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


4538 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

4541 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


4542 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

4545 #i‚de‡
GL_EXT_bÀnd_mömax


4546 
	#GL_EXT_bÀnd_mömax
 1

	)

4547 #ifde‡
GL_GLEXT_PROTOTYPES


4548 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
);

4550 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

4553 #i‚de‡
GL_EXT_bÀnd_subåa˘


4554 
	#GL_EXT_bÀnd_subåa˘
 1

	)

4557 #i‚de‡
GL_EXT_bÀnd_logic_›


4558 
	#GL_EXT_bÀnd_logic_›
 1

	)

4561 #i‚de‡
GL_SGIX_öãæa˚


4562 
	#GL_SGIX_öãæa˚
 1

	)

4565 #i‚de‡
GL_SGIX_pixñ_tûes


4566 
	#GL_SGIX_pixñ_tûes
 1

	)

4569 #i‚de‡
GL_SGIX_ãxtuª_£À˘


4570 
	#GL_SGIX_ãxtuª_£À˘
 1

	)

4573 #i‚de‡
GL_SGIX_•rôe


4574 
	#GL_SGIX_•rôe
 1

	)

4575 #ifde‡
GL_GLEXT_PROTOTYPES


4576 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
, 
GLÊﬂt
);

4577 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4578 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
, 
GLöt
);

4579 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
, c⁄° 
GLöt
 *);

4581 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4582 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4583 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4584 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4587 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


4588 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

4591 #i‚de‡
GL_EXT_poöt_∑ømëîs


4592 
	#GL_EXT_poöt_∑ømëîs
 1

	)

4593 #ifde‡
GL_GLEXT_PROTOTYPES


4594 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
, 
GLÊﬂt
);

4595 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4597 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4598 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4601 #i‚de‡
GL_SGIS_poöt_∑ømëîs


4602 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

4603 #ifde‡
GL_GLEXT_PROTOTYPES


4604 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
, 
GLÊﬂt
);

4605 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4607 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4608 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4611 #i‚de‡
GL_SGIX_ö°rumíts


4612 
	#GL_SGIX_ö°rumíts
 1

	)

4613 #ifde‡
GL_GLEXT_PROTOTYPES


4614 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

4615 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
, 
GLöt
 *);

4616 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLint *);

4617 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
);

4618 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

4619 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
);

4621 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

4622 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

4623 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

4624 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

4625 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

4626 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

4629 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


4630 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

4633 #i‚de‡
GL_SGIX_‰amezoom


4634 
	#GL_SGIX_‰amezoom
 1

	)

4635 #ifde‡
GL_GLEXT_PROTOTYPES


4636 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
);

4638 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

4641 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


4642 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

4643 #ifde‡
GL_GLEXT_PROTOTYPES


4644 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

4646 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

4649 #i‚de‡
GL_SGIX_pﬁynomül_ffd


4650 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

4651 #ifde‡
GL_GLEXT_PROTOTYPES


4652 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
, 
GLdoubÀ
, GLdoubÀ, 
GLöt
, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);

4653 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
, 
GLÊﬂt
, GLÊﬂt, 
GLöt
, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);

4654 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
);

4655 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
);

4657 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

4658 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

4659 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

4660 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

4663 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


4664 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

4665 #ifde‡
GL_GLEXT_PROTOTYPES


4666 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *);

4668 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

4671 #i‚de‡
GL_SGIX_Êush_ø°î


4672 
	#GL_SGIX_Êush_ø°î
 1

	)

4673 #ifde‡
GL_GLEXT_PROTOTYPES


4674 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

4676 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

4679 #i‚de‡
GL_SGIX_dïth_ãxtuª


4680 
	#GL_SGIX_dïth_ãxtuª
 1

	)

4683 #i‚de‡
GL_SGIS_fog_fun˘i⁄


4684 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

4685 #ifde‡
GL_GLEXT_PROTOTYPES


4686 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
, c⁄° 
GLÊﬂt
 *);

4687 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *);

4689 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

4690 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

4693 #i‚de‡
GL_SGIX_fog_off£t


4694 
	#GL_SGIX_fog_off£t
 1

	)

4697 #i‚de‡
GL_HP_image_å™sf‹m


4698 
	#GL_HP_image_å™sf‹m
 1

	)

4699 #ifde‡
GL_GLEXT_PROTOTYPES


4700 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
, GLíum, 
GLöt
);

4701 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
, GLíum, 
GLÊﬂt
);

4702 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4703 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4704 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
, GLíum, 
GLöt
 *);

4705 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4707 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4708 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4709 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4710 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4711 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4712 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4715 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


4716 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

4719 #i‚de‡
GL_SGIX_ãxtuª_add_ív


4720 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

4723 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


4724 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

4725 #ifde‡
GL_GLEXT_PROTOTYPES


4726 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4727 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
, 
GLsizei
, 
GLöt
, GLint, GLsizei);

4729 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

4730 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

4733 #i‚de‡
GL_PGI_vîãx_höts


4734 
	#GL_PGI_vîãx_höts
 1

	)

4737 #i‚de‡
GL_PGI_misc_höts


4738 
	#GL_PGI_misc_höts
 1

	)

4739 #ifde‡
GL_GLEXT_PROTOTYPES


4740 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
, 
GLöt
);

4742 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

4745 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


4746 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

4747 #ifde‡
GL_GLEXT_PROTOTYPES


4748 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4749 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

4750 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

4751 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4753 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

4754 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	td©a
);

4755 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4756 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4759 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


4760 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

4763 #i‚de‡
GL_SGIX_li°_¥i‹ôy


4764 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

4765 #ifde‡
GL_GLEXT_PROTOTYPES


4766 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

4767 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4768 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
);

4769 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
, 
GLíum
, c⁄° 
GLÊﬂt
 *);

4770 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
, 
GLíum
, 
GLöt
);

4771 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
, 
GLíum
, c⁄° 
GLöt
 *);

4773 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4774 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4775 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4776 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4777 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4778 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4781 #i‚de‡
GL_SGIX_ú_ö°rumít1


4782 
	#GL_SGIX_ú_ö°rumít1
 1

	)

4785 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


4786 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

4789 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


4790 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

4793 #i‚de‡
GL_SGIX_shadow_ambõ¡


4794 
	#GL_SGIX_shadow_ambõ¡
 1

	)

4797 #i‚de‡
GL_EXT_ödex_ãxtuª


4798 
	#GL_EXT_ödex_ãxtuª
 1

	)

4801 #i‚de‡
GL_EXT_ödex_m©îül


4802 
	#GL_EXT_ödex_m©îül
 1

	)

4803 #ifde‡
GL_GLEXT_PROTOTYPES


4804 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
, GLenum);

4806 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

4809 #i‚de‡
GL_EXT_ödex_func


4810 
	#GL_EXT_ödex_func
 1

	)

4811 #ifde‡
GL_GLEXT_PROTOTYPES


4812 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
, 
GL˛ampf
);

4814 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

4817 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


4818 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

4821 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


4822 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

4823 #ifde‡
GL_GLEXT_PROTOTYPES


4824 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
, 
GLsizei
);

4825 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

4827 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

4828 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

4831 #i‚de‡
GL_EXT_cuŒ_vîãx


4832 
	#GL_EXT_cuŒ_vîãx
 1

	)

4833 #ifde‡
GL_GLEXT_PROTOTYPES


4834 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
, 
GLdoubÀ
 *);

4835 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
, 
GLÊﬂt
 *);

4837 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4838 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4841 #i‚de‡
GL_SGIX_y¸cb


4842 
	#GL_SGIX_y¸cb
 1

	)

4845 #i‚de‡
GL_SGIX_‰agmít_lightög


4846 
	#GL_SGIX_‰agmít_lightög
 1

	)

4847 #ifde‡
GL_GLEXT_PROTOTYPES


4848 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
, GLenum);

4849 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
);

4850 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4851 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
, GLíum, 
GLöt
);

4852 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4853 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
, 
GLÊﬂt
);

4854 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4855 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
, 
GLöt
);

4856 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
, c⁄° 
GLöt
 *);

4857 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
);

4858 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4859 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
, GLíum, 
GLöt
);

4860 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4861 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4862 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
, GLíum, 
GLöt
 *);

4863 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4864 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
, GLíum, 
GLöt
 *);

4865 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
, 
GLöt
);

4867 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

4868 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4869 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4870 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4871 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4872 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4873 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4874 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4875 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4876 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4877 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4878 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4879 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4880 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4881 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4882 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4883 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4884 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4887 #i‚de‡
GL_IBM_ø°îpos_˛ù


4888 
	#GL_IBM_ø°îpos_˛ù
 1

	)

4891 #i‚de‡
GL_HP_ãxtuª_lightög


4892 
	#GL_HP_ãxtuª_lightög
 1

	)

4895 #i‚de‡
GL_EXT_døw_ønge_ñemíts


4896 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

4897 #ifde‡
GL_GLEXT_PROTOTYPES


4898 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *);

4900 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

4903 #i‚de‡
GL_WIN_ph⁄g_shadög


4904 
	#GL_WIN_ph⁄g_shadög
 1

	)

4907 #i‚de‡
GL_WIN_•ecuœr_fog


4908 
	#GL_WIN_•ecuœr_fog
 1

	)

4911 #i‚de‡
GL_EXT_light_ãxtuª


4912 
	#GL_EXT_light_ãxtuª
 1

	)

4913 #ifde‡
GL_GLEXT_PROTOTYPES


4914 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
);

4915 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
);

4916 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
, GLenum);

4918 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

4919 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

4920 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

4923 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


4924 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

4927 #i‚de‡
GL_EXT_bgø


4928 
	#GL_EXT_bgø
 1

	)

4931 #i‚de‡
GL_SGIX_async


4932 
	#GL_SGIX_async
 1

	)

4933 #ifde‡
GL_GLEXT_PROTOTYPES


4934 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
);

4935 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *);

4936 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *);

4937 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
);

4938 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
, 
GLsizei
);

4939 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
);

4941 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

4942 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

4943 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

4944 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

4945 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

4946 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

4949 #i‚de‡
GL_SGIX_async_pixñ


4950 
	#GL_SGIX_async_pixñ
 1

	)

4953 #i‚de‡
GL_SGIX_async_hi°ogøm


4954 
	#GL_SGIX_async_hi°ogøm
 1

	)

4957 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


4958 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

4959 #ifde‡
GL_GLEXT_PROTOTYPES


4960 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

4961 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
, c⁄° 
GLvoid
* *);

4962 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

4963 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

4965 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

4966 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

4967 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

4968 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

4971 #i‚de‡
GL_HP_oc˛usi⁄_ã°


4972 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

4975 #i‚de‡
GL_EXT_pixñ_å™sf‹m


4976 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

4977 #ifde‡
GL_GLEXT_PROTOTYPES


4978 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
, GLíum, 
GLöt
);

4979 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
, GLíum, 
GLÊﬂt
);

4980 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4981 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4983 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4984 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4985 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4986 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4989 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


4990 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

4993 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


4994 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

4997 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


4998 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

5001 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


5002 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

5003 #ifde‡
GL_GLEXT_PROTOTYPES


5004 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
, GLbyte, GLbyte);

5005 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *);

5006 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

5007 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *);

5008 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

5009 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *);

5010 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
, GLint, GLint);

5011 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *);

5012 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
, GLshort, GLshort);

5013 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *);

5014 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
, GLubyte, GLubyte);

5015 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *);

5016 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
, GLuint, GLuint);

5017 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *);

5018 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
, GLushort, GLushort);

5019 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *);

5020 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5022 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

5023 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5024 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

5025 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5026 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

5027 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5028 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

5029 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5030 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

5031 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5032 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

5033 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

5034 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

5035 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

5036 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

5037 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

5038 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5041 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


5042 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

5043 #ifde‡
GL_GLEXT_PROTOTYPES


5044 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
);

5046 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

5049 #i‚de‡
GL_EXT_mu…i_døw_¨øys


5050 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

5051 #ifde‡
GL_GLEXT_PROTOTYPES


5052 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
, 
GLöt
 *, 
GLsizei
 *, GLsizei);

5053 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* *, GLsizei);

5055 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5056 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

5059 #i‚de‡
GL_EXT_fog_co‹d


5060 
	#GL_EXT_fog_co‹d
 1

	)

5061 #ifde‡
GL_GLEXT_PROTOTYPES


5062 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
);

5063 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *);

5064 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
);

5065 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *);

5066 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5068 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

5069 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

5070 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

5071 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

5072 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5075 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


5076 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

5079 #i‚de‡
GL_EXT_co‹dö©e_‰ame


5080 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

5081 #ifde‡
GL_GLEXT_PROTOTYPES


5082 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
, GLbyte, GLbyte);

5083 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *);

5084 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

5085 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *);

5086 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

5087 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *);

5088 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
, GLint, GLint);

5089 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *);

5090 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
, GLshort, GLshort);

5091 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *);

5092 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
, GLbyte, GLbyte);

5093 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *);

5094 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

5095 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *);

5096 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

5097 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *);

5098 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
, GLint, GLint);

5099 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *);

5100 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
, GLshort, GLshort);

5101 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *);

5102 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5103 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5105 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

5106 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5107 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

5108 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5109 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

5110 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5111 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

5112 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5113 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

5114 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5115 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

5116 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5117 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

5118 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5119 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

5120 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5121 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

5122 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5123 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

5124 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5125 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5126 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5129 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


5130 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

5133 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


5134 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

5137 #i‚de‡
GL_APPLE_å™sf‹m_höt


5138 
	#GL_APPLE_å™sf‹m_höt
 1

	)

5141 #i‚de‡
GL_SGIX_fog_sˇÀ


5142 
	#GL_SGIX_fog_sˇÀ
 1

	)

5145 #i‚de‡
GL_SUNX_c⁄°™t_d©a


5146 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

5147 #ifde‡
GL_GLEXT_PROTOTYPES


5148 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

5150 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

5153 #i‚de‡
GL_SUN_globÆ_Æpha


5154 
	#GL_SUN_globÆ_Æpha
 1

	)

5155 #ifde‡
GL_GLEXT_PROTOTYPES


5156 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
);

5157 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
);

5158 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
);

5159 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
);

5160 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
);

5161 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
);

5162 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
);

5163 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
);

5165 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

5166 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

5167 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

5168 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

5169 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

5170 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

5171 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

5172 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

5175 #i‚de‡
GL_SUN_åüngÀ_li°


5176 
	#GL_SUN_åüngÀ_li°
 1

	)

5177 #ifde‡
GL_GLEXT_PROTOTYPES


5178 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
);

5179 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
);

5180 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
);

5181 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *);

5182 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *);

5183 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *);

5184 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
* *);

5186 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

5187 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

5188 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

5189 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

5190 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

5191 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

5192 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

5195 #i‚de‡
GL_SUN_vîãx


5196 
	#GL_SUN_vîãx
 1

	)

5197 #ifde‡
GL_GLEXT_PROTOTYPES


5198 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat);

5199 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

5200 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat, GLfloat);

5201 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

5202 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5203 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5204 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5205 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5206 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5207 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5208 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat);

5209 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5210 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5211 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

5212 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
, GLÊﬂt, 
GLubyã
, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);

5213 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, c⁄° 
GLubyã
 *, const GLfloat *);

5214 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5215 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5216 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5217 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5218 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5219 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

5220 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5221 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

5222 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

5223 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *);

5224 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
, 
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat, GLfloat);

5225 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

5226 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5227 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

5228 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5229 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

5230 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5231 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5232 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat);

5233 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

5234 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5235 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

5236 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

5237 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

5239 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5240 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5241 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5242 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5243 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5244 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

5245 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5246 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

5247 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5248 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5249 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5250 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

5251 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5252 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

5253 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5254 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

5255 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5256 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

5257 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5258 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5259 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5260 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5261 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5262 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5263 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5264 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5265 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5266 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5267 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5268 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

5269 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5270 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

5271 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5272 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5273 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5274 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

5275 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5276 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5277 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5278 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

5281 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


5282 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

5283 #ifde‡
GL_GLEXT_PROTOTYPES


5284 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
, GLenum, GLenum, GLenum);

5286 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

5289 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


5290 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

5291 #ifde‡
GL_GLEXT_PROTOTYPES


5292 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
, GLenum, GLenum, GLenum);

5294 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

5297 #i‚de‡
GL_INGR_cﬁ‹_˛amp


5298 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

5301 #i‚de‡
GL_INGR_öãæa˚_ªad


5302 
	#GL_INGR_öãæa˚_ªad
 1

	)

5305 #i‚de‡
GL_EXT_°ícû_wøp


5306 
	#GL_EXT_°ícû_wøp
 1

	)

5309 #i‚de‡
GL_EXT_422_pixñs


5310 
	#GL_EXT_422_pixñs
 1

	)

5313 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


5314 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

5317 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


5318 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

5321 #i‚de‡
GL_EXT_ãxtuª_ív_add


5322 
	#GL_EXT_ãxtuª_ív_add
 1

	)

5325 #i‚de‡
GL_EXT_ãxtuª_lod_büs


5326 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

5329 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


5330 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

5333 #i‚de‡
GL_EXT_vîãx_weightög


5334 
	#GL_EXT_vîãx_weightög
 1

	)

5335 #ifde‡
GL_GLEXT_PROTOTYPES


5336 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
);

5337 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *);

5338 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLsizei
, 
GLíum
, GLsizei, c⁄° 
GLvoid
 *);

5340 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

5341 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

5342 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLíum
 
	tty≥
, GLsizeò
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5345 #i‚de‡
GL_NV_light_max_exp⁄ít


5346 
	#GL_NV_light_max_exp⁄ít
 1

	)

5349 #i‚de‡
GL_NV_vîãx_¨øy_ønge


5350 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

5351 #ifde‡
GL_GLEXT_PROTOTYPES


5352 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

5353 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
, c⁄° 
GLvoid
 *);

5355 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

5356 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5359 #i‚de‡
GL_NV_ªgi°î_comböîs


5360 
	#GL_NV_ªgi°î_comböîs
 1

	)

5361 #ifde‡
GL_GLEXT_PROTOTYPES


5362 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5363 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
, 
GLÊﬂt
);

5364 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
, c⁄° 
GLöt
 *);

5365 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
, 
GLöt
);

5366 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
, GLenum, GLenum, GLenum, GLenum, GLenum);

5367 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
, GLíum, GLíum, GLíum, GLíum, GLíum, GLíum, 
GLboﬁón
, GLboolean, GLboolean);

5368 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
, GLenum, GLenum, GLenum);

5369 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
, GLíum, GLíum, GLíum, 
GLÊﬂt
 *);

5370 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
, GLíum, GLíum, GLíum, 
GLöt
 *);

5371 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
, GLíum, GLíum, 
GLÊﬂt
 *);

5372 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

5373 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5374 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
, GLíum, 
GLöt
 *);

5376 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5377 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5378 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5379 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5380 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

5381 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

5382 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

5383 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5384 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5385 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5386 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5387 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5388 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5391 #i‚de‡
GL_NV_fog_di°™˚


5392 
	#GL_NV_fog_di°™˚
 1

	)

5395 #i‚de‡
GL_NV_ãxgí_emboss


5396 
	#GL_NV_ãxgí_emboss
 1

	)

5399 #i‚de‡
GL_NV_bÀnd_squ¨e


5400 
	#GL_NV_bÀnd_squ¨e
 1

	)

5403 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


5404 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

5407 #i‚de‡
GL_MESA_ªsize_buf„rs


5408 
	#GL_MESA_ªsize_buf„rs
 1

	)

5409 #ifde‡
GL_GLEXT_PROTOTYPES


5410 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

5412 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

5415 #i‚de‡
GL_MESA_wödow_pos


5416 
	#GL_MESA_wödow_pos
 1

	)

5417 #ifde‡
GL_GLEXT_PROTOTYPES


5418 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
, GLdouble);

5419 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *);

5420 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
, GLfloat);

5421 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *);

5422 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
, GLint);

5423 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *);

5424 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
, GLshort);

5425 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *);

5426 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
, GLdouble, GLdouble);

5427 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *);

5428 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
, GLfloat, GLfloat);

5429 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *);

5430 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
, GLint, GLint);

5431 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *);

5432 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
, GLshort, GLshort);

5433 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *);

5434 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5435 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *);

5436 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5437 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *);

5438 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
, GLint, GLint, GLint);

5439 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *);

5440 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
, GLshort, GLshort, GLshort);

5441 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *);

5443 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

5444 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5445 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5446 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5447 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

5448 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5449 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

5450 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5451 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5452 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5453 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5454 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5455 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

5456 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5457 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

5458 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5459 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5460 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5461 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5462 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5463 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

5464 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5465 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

5466 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5469 #i‚de‡
GL_IBM_cuŒ_vîãx


5470 
	#GL_IBM_cuŒ_vîãx
 1

	)

5473 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


5474 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

5475 #ifde‡
GL_GLEXT_PROTOTYPES


5476 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei, GLint);

5477 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* c⁄° *, GLsizei, 
GLöt
);

5479 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

5480 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

5483 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


5484 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

5485 #ifde‡
GL_GLEXT_PROTOTYPES


5486 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

5487 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

5488 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
, c⁄° 
GLboﬁón
* *, GLint);

5489 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

5490 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

5491 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

5492 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

5493 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

5495 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5496 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5497 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
* *
	tpoöãr
, GLöà
	t±r°ride
);

5498 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5499 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5500 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5501 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5502 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

5505 #i‚de‡
GL_SGIX_subßm∂e


5506 
	#GL_SGIX_subßm∂e
 1

	)

5509 #i‚de‡
GL_SGIX_y¸cba


5510 
	#GL_SGIX_y¸cba
 1

	)

5513 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


5514 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

5517 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


5518 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

5521 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


5522 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

5525 #i‚de‡
GL_3DFX_mu…ißm∂e


5526 
	#GL_3DFX_mu…ißm∂e
 1

	)

5529 #i‚de‡
GL_3DFX_tbuf„r


5530 
	#GL_3DFX_tbuf„r
 1

	)

5531 #ifde‡
GL_GLEXT_PROTOTYPES


5532 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
);

5534 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

5537 #i‚de‡
GL_EXT_mu…ißm∂e


5538 
	#GL_EXT_mu…ißm∂e
 1

	)

5539 #ifde‡
GL_GLEXT_PROTOTYPES


5540 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
, 
GLboﬁón
);

5541 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
);

5543 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

5544 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

5547 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


5548 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

5551 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


5552 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

5555 #i‚de‡
GL_SGIX_ªßm∂e


5556 
	#GL_SGIX_ªßm∂e
 1

	)

5559 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


5560 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

5563 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


5564 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

5565 #ifde‡
GL_GLEXT_PROTOTYPES


5566 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
, GLboolean, GLboolean, GLboolean);

5568 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

5571 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


5572 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

5573 #ifde‡
GL_GLEXT_PROTOTYPES


5574 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
, c⁄° 
GLvoid
 *);

5576 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLvoid
 *
	t∑øms
);

5579 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


5580 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

5583 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


5584 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

5587 #i‚de‡
GL_NV_„n˚


5588 
	#GL_NV_„n˚
 1

	)

5589 #ifde‡
GL_GLEXT_PROTOTYPES


5590 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

5591 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
, 
GLuöt
 *);

5592 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
);

5593 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
);

5594 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5595 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
);

5596 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
, 
GLíum
);

5598 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

5599 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

5600 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

5601 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

5602 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5603 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

5604 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

5607 #i‚de‡
GL_NV_evÆu©‹s


5608 
	#GL_NV_evÆu©‹s
 1

	)

5609 #ifde‡
GL_GLEXT_PROTOTYPES


5610 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLsizei
, GLsizei, 
GLöt
, GLöt, 
GLboﬁón
, c⁄° 
GLvoid
 *);

5611 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

5612 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

5613 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLsizei
, GLsizei, 
GLboﬁón
, 
GLvoid
 *);

5614 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
, GLíum, 
GLöt
 *);

5615 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5616 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLöt
 *);

5617 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLÊﬂt
 *);

5618 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
, GLenum);

5620 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° 
	tGLvoid
 *
	tpoöts
);

5621 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5622 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5623 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, 
	tGLvoid
 *
	tpoöts
);

5624 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5625 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5626 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5627 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5628 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

5631 #i‚de‡
GL_NV_∑cked_dïth_°ícû


5632 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

5635 #i‚de‡
GL_NV_ªgi°î_comböîs2


5636 
	#GL_NV_ªgi°î_comböîs2
 1

	)

5637 #ifde‡
GL_GLEXT_PROTOTYPES


5638 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

5639 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5641 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5642 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5645 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


5646 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

5649 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


5650 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

5653 #i‚de‡
GL_NV_ãxtuª_shadî


5654 
	#GL_NV_ãxtuª_shadî
 1

	)

5657 #i‚de‡
GL_NV_ãxtuª_shadî2


5658 
	#GL_NV_ãxtuª_shadî2
 1

	)

5661 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


5662 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

5665 #i‚de‡
GL_NV_vîãx_¥ogøm


5666 
	#GL_NV_vîãx_¥ogøm
 1

	)

5667 #ifde‡
GL_GLEXT_PROTOTYPES


5668 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
, c⁄° 
GLuöt
 *, GLboolean *);

5669 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
, 
GLuöt
);

5670 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

5671 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

5672 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
, 
GLuöt
 *);

5673 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLdoubÀ
 *);

5674 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLÊﬂt
 *);

5675 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5676 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
, 
GLíum
, 
GLubyã
 *);

5677 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLöt
 *);

5678 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

5679 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5680 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5681 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

5682 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
);

5683 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *);

5684 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5685 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

5686 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5687 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

5688 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLdoubÀ
 *);

5689 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLÊﬂt
 *);

5690 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

5691 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
, 
GLuöt
, GLenum, GLenum);

5692 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5693 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
, 
GLdoubÀ
);

5694 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5695 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
, 
GLÊﬂt
);

5696 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5697 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
, 
GLsh‹t
);

5698 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5699 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

5700 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5701 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

5702 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5703 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
, 
GLsh‹t
, GLshort);

5704 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5705 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

5706 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5707 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

5708 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5709 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

5710 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5711 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5712 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5713 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5714 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5715 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

5716 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5717 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

5718 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
, c⁄° 
GLubyã
 *);

5719 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

5720 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5721 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

5722 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

5723 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5724 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

5725 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

5726 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5727 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

5728 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

5729 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5730 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

5731 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *);

5733 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

5734 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

5735 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

5736 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5737 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

5738 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

5739 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5740 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5741 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

5742 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5743 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

5744 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5745 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5746 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

5747 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

5748 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

5749 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5750 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5751 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5752 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5753 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5754 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5755 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

5756 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

5757 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5758 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

5759 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5760 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

5761 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5762 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

5763 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5764 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

5765 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5766 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5767 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5768 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

5769 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5770 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5771 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5772 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5773 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5774 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

5775 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5776 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5777 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5778 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5779 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5780 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

5781 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5782 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

5783 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

5784 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5785 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5786 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

5787 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5788 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5789 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

5790 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5791 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5792 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

5793 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5794 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5795 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

5796 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

5799 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


5800 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

5803 #i‚de‡
GL_SGIX_sˇÀbüs_höt


5804 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

5807 #i‚de‡
GL_OML_öãæa˚


5808 
	#GL_OML_öãæa˚
 1

	)

5811 #i‚de‡
GL_OML_subßm∂e


5812 
	#GL_OML_subßm∂e
 1

	)

5815 #i‚de‡
GL_OML_ªßm∂e


5816 
	#GL_OML_ªßm∂e
 1

	)

5819 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


5820 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

5823 #i‚de‡
GL_ATI_ívm≠_bumpm≠


5824 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

5825 #ifde‡
GL_GLEXT_PROTOTYPES


5826 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
, c⁄° 
GLöt
 *);

5827 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5828 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
, 
GLöt
 *);

5829 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
, 
GLÊﬂt
 *);

5831 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

5832 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

5833 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

5834 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

5837 #i‚de‡
GL_ATI_‰agmít_shadî


5838 
	#GL_ATI_‰agmít_shadî
 1

	)

5839 #ifde‡
GL_GLEXT_PROTOTYPES


5840 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuint);

5841 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
);

5842 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
);

5843 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

5844 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

5845 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
, GLuöt, 
GLíum
);

5846 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
, GLuöt, 
GLíum
);

5847 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint);

5848 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

5849 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

5850 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint);

5851 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

5852 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

5853 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5855 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

5856 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

5857 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

5858 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

5859 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

5860 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

5861 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

5862 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

5863 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

5864 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

5865 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

5866 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

5867 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

5868 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5871 #i‚de‡
GL_ATI_≤_åüngÀs


5872 
	#GL_ATI_≤_åüngÀs
 1

	)

5873 #ifde‡
GL_GLEXT_PROTOTYPES


5874 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
, 
GLöt
);

5875 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
, 
GLÊﬂt
);

5877 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5878 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5881 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


5882 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

5883 #ifde‡
GL_GLEXT_PROTOTYPES


5884 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
, c⁄° 
GLvoid
 *, 
GLíum
);

5885 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
);

5886 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
, GLuöt, 
GLsizei
, c⁄° 
GLvoid
 *, 
GLíum
);

5887 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5888 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5889 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
);

5890 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, 
GLuöt
, GLuint);

5891 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

5892 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
, GLíum, 
GLöt
 *);

5893 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
, 
GLíum
, 
GLsizei
, GLuint, GLuint);

5894 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5895 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5897 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	tußge
);

5898 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5899 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

5900 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5901 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5902 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5903 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

5904 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5905 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5906 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

5907 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5908 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5911 #i‚de‡
GL_EXT_vîãx_shadî


5912 
	#GL_EXT_vîãx_shadî
 1

	)

5913 #ifde‡
GL_GLEXT_PROTOTYPES


5914 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

5915 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

5916 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
);

5917 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuint);

5918 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
);

5919 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
, 
GLuöt
, GLuint);

5920 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
, 
GLuöt
, GLuint, GLuint);

5921 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint);

5922 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
, GLuöt, 
GLíum
, GLenum, GLenum, GLenum);

5923 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
, GLuöt, 
GLíum
, GLenum, GLenum, GLenum);

5924 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
, GLuint, GLuint);

5925 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
, GLuint, GLuint);

5926 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
, GLenum, GLenum, GLuint);

5927 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
, 
GLíum
, c⁄° 
GLvoid
 *);

5928 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
, 
GLíum
, c⁄° 
GLvoid
 *);

5929 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
, c⁄° 
GLbyã
 *);

5930 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5931 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

5932 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5933 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5934 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
, c⁄° 
GLubyã
 *);

5935 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
, c⁄° 
GLush‹t
 *);

5936 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
, const GLuint *);

5937 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
, 
GLíum
, GLuöt, c⁄° 
GLvoid
 *);

5938 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
);

5939 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
);

5940 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
, GLenum);

5941 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
, GLenum);

5942 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
, GLenum, GLenum);

5943 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
, GLenum);

5944 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
);

5945 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
, 
GLíum
);

5946 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

5947 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5948 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5949 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

5950 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

5951 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5952 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5953 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

5954 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5955 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5957 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

5958 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

5959 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

5960 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

5961 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

5962 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

5963 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

5964 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

5965 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

5966 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

5967 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

5968 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

5969 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

5970 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

5971 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

5972 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

5973 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

5974 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

5975 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

5976 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

5977 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

5978 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

5979 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

5980 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° 
	tGLvoid
 *
	taddr
);

5981 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

5982 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

5983 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

5984 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

5985 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

5986 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

5987 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

5988 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

5989 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

5990 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

5991 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

5992 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLvoid
* *
	td©a
);

5993 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

5994 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

5995 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

5996 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

5997 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

5998 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

6001 #i‚de‡
GL_ATI_vîãx_°ªams


6002 
	#GL_ATI_vîãx_°ªams
 1

	)

6003 #ifde‡
GL_GLEXT_PROTOTYPES


6004 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
, 
GLsh‹t
);

6005 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6006 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
, 
GLöt
);

6007 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6008 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
, 
GLÊﬂt
);

6009 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6010 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
, 
GLdoubÀ
);

6011 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6012 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
, 
GLsh‹t
, GLshort);

6013 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6014 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
, 
GLöt
, GLint);

6015 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6016 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat);

6017 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6018 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble);

6019 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6020 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

6021 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6022 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
, 
GLöt
, GLint, GLint);

6023 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6024 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

6025 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6026 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

6027 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6028 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

6029 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6030 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

6031 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6032 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

6033 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6034 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

6035 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6036 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
, 
GLbyã
, GLbyte, GLbyte);

6037 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
, c⁄° 
GLbyã
 *);

6038 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

6039 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

6040 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
, 
GLöt
, GLint, GLint);

6041 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

6042 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

6043 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6044 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

6045 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

6046 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
);

6047 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
, 
GLöt
);

6048 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
, 
GLÊﬂt
);

6050 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

6051 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6052 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

6053 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6054 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

6055 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6056 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

6057 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6058 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6059 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6060 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

6061 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6062 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6063 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6064 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6065 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6066 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6067 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6068 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6069 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6070 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6071 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6072 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6073 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6074 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6075 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6076 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6077 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6078 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6079 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6080 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6081 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6082 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

6083 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

6084 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

6085 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6086 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

6087 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6088 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

6089 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6090 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

6091 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6092 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

6093 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6094 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6097 #i‚de‡
GL_ATI_ñemít_¨øy


6098 
	#GL_ATI_ñemít_¨øy
 1

	)

6099 #ifde‡
GL_GLEXT_PROTOTYPES


6100 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
, c⁄° 
GLvoid
 *);

6101 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
, 
GLsizei
);

6102 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
);

6104 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6105 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

6106 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

6109 #i‚de‡
GL_SUN_mesh_¨øy


6110 
	#GL_SUN_mesh_¨øy
 1

	)

6111 #ifde‡
GL_GLEXT_PROTOTYPES


6112 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
, 
GLöt
, 
GLsizei
, GLsizei);

6114 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

6117 #i‚de‡
GL_SUN_¶i˚_accum


6118 
	#GL_SUN_¶i˚_accum
 1

	)

6121 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


6122 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

6125 #i‚de‡
GL_NV_dïth_˛amp


6126 
	#GL_NV_dïth_˛amp
 1

	)

6129 #i‚de‡
GL_NV_oc˛usi⁄_quîy


6130 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

6131 #ifde‡
GL_GLEXT_PROTOTYPES


6132 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
, 
GLuöt
 *);

6133 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

6134 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
);

6135 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
);

6136 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

6137 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6138 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
, 
GLíum
, GLuint *);

6140 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

6141 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

6142 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

6143 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

6144 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

6145 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6146 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

6149 #i‚de‡
GL_NV_poöt_•rôe


6150 
	#GL_NV_poöt_•rôe
 1

	)

6151 #ifde‡
GL_GLEXT_PROTOTYPES


6152 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
, 
GLöt
);

6153 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
, c⁄° 
GLöt
 *);

6155 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6156 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6159 #i‚de‡
GL_NV_ãxtuª_shadî3


6160 
	#GL_NV_ãxtuª_shadî3
 1

	)

6163 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


6164 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

6167 #i‚de‡
GL_EXT_shadow_funcs


6168 
	#GL_EXT_shadow_funcs
 1

	)

6171 #i‚de‡
GL_EXT_°ícû_two_side


6172 
	#GL_EXT_°ícû_two_side
 1

	)

6173 #ifde‡
GL_GLEXT_PROTOTYPES


6174 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
);

6176 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

6179 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


6180 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

6183 #i‚de‡
GL_APPLE_˛õ¡_°‹age


6184 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

6187 #i‚de‡
GL_APPLE_ñemít_¨øy


6188 
	#GL_APPLE_ñemít_¨øy
 1

	)

6189 #ifde‡
GL_GLEXT_PROTOTYPES


6190 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
, c⁄° 
GLvoid
 *);

6191 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
, 
GLöt
, 
GLsizei
);

6192 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
, 
GLuöt
, GLuöt, 
GLöt
, 
GLsizei
);

6193 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei);

6194 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei);

6196 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6197 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6198 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6199 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

6200 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

6203 #i‚de‡
GL_APPLE_„n˚


6204 
	#GL_APPLE_„n˚
 1

	)

6205 #ifde‡
GL_GLEXT_PROTOTYPES


6206 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
, 
GLuöt
 *);

6207 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

6208 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
);

6209 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
);

6210 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
);

6211 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
);

6212 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
, 
GLuöt
);

6213 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
, 
GLöt
);

6215 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

6216 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

6217 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6218 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6219 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6220 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

6221 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

6222 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

6225 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


6226 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

6227 #ifde‡
GL_GLEXT_PROTOTYPES


6228 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
);

6229 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

6230 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

6231 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
);

6233 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

6234 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

6235 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

6236 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

6239 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


6240 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

6241 #ifde‡
GL_GLEXT_PROTOTYPES


6242 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
, 
GLvoid
 *);

6243 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
, 
GLvoid
 *);

6244 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
, 
GLöt
);

6246 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

6247 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

6248 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6251 #i‚de‡
GL_APPLE_ycb¸_422


6252 
	#GL_APPLE_ycb¸_422
 1

	)

6255 #i‚de‡
GL_S3_s3tc


6256 
	#GL_S3_s3tc
 1

	)

6259 #i‚de‡
GL_ATI_døw_buf„rs


6260 
	#GL_ATI_døw_buf„rs
 1

	)

6261 #ifde‡
GL_GLEXT_PROTOTYPES


6262 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
, c⁄° 
GLíum
 *);

6264 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6267 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


6268 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

6274 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


6275 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

6278 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


6279 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

6282 #i‚de‡
GL_NV_Êﬂt_buf„r


6283 
	#GL_NV_Êﬂt_buf„r
 1

	)

6286 #i‚de‡
GL_NV_‰agmít_¥ogøm


6287 
	#GL_NV_‰agmít_¥ogøm
 1

	)

6289 #ifde‡
GL_GLEXT_PROTOTYPES


6290 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

6291 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

6292 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

6293 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, c⁄° 
GLdoubÀ
 *);

6294 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLÊﬂt
 *);

6295 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLdoubÀ
 *);

6297 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6298 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6299 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

6300 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

6301 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

6302 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

6305 #i‚de‡
GL_NV_hÆf_Êﬂt


6306 
	#GL_NV_hÆf_Êﬂt
 1

	)

6307 #ifde‡
GL_GLEXT_PROTOTYPES


6308 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
, GLhalfNV);

6309 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *);

6310 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6311 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *);

6312 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6313 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *);

6314 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6315 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *);

6316 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6317 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *);

6318 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6319 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *);

6320 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
);

6321 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *);

6322 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
, GLhalfNV);

6323 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *);

6324 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6325 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *);

6326 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6327 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *);

6328 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
, 
GLhÆfNV
);

6329 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

6330 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV);

6331 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

6332 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV, GLhalfNV);

6333 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

6334 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6335 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

6336 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
);

6337 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *);

6338 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

6339 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *);

6340 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
);

6341 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *);

6342 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
, 
GLhÆfNV
);

6343 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

6344 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV);

6345 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

6346 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV, GLhalfNV);

6347 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

6348 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

6349 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

6350 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

6351 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

6352 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

6353 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

6355 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

6356 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6357 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

6358 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6359 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

6360 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6361 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

6362 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6363 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

6364 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6365 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

6366 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6367 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

6368 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6369 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

6370 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6371 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

6372 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6373 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

6374 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6375 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

6376 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6377 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

6378 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6379 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

6380 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6381 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

6382 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6383 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

6384 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

6385 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

6386 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

6387 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

6388 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

6389 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

6390 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6391 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

6392 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6393 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

6394 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6395 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

6396 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6397 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6398 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6399 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6400 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

6403 #i‚de‡
GL_NV_pixñ_d©a_ønge


6404 
	#GL_NV_pixñ_d©a_ønge
 1

	)

6405 #ifde‡
GL_GLEXT_PROTOTYPES


6406 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
, 
GLsizei
, 
GLvoid
 *);

6407 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
);

6409 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

6410 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

6413 #i‚de‡
GL_NV_¥imôive_ª°¨t


6414 
	#GL_NV_¥imôive_ª°¨t
 1

	)

6415 #ifde‡
GL_GLEXT_PROTOTYPES


6416 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

6417 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
);

6419 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

6420 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

6423 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


6424 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

6427 #i‚de‡
GL_NV_vîãx_¥ogøm2


6428 
	#GL_NV_vîãx_¥ogøm2
 1

	)

6431 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


6432 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

6433 #ifde‡
GL_GLEXT_PROTOTYPES


6434 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
);

6435 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
);

6437 
GLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6438 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6441 #i‚de‡
GL_ATI_£∑øã_°ícû


6442 
	#GL_ATI_£∑øã_°ícû
 1

	)

6443 #ifde‡
GL_GLEXT_PROTOTYPES


6444 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
, GLenum, GLenum, GLenum);

6445 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
, GLíum, 
GLöt
, 
GLuöt
);

6447 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

6448 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

6451 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


6452 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

6453 #ifde‡
GL_GLEXT_PROTOTYPES


6454 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, GLuint, GLuint);

6455 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

6456 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6458 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

6459 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6460 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6463 #i‚de‡
GL_OES_ªad_f‹m©


6464 
	#GL_OES_ªad_f‹m©
 1

	)

6467 #i‚de‡
GL_EXT_dïth_bounds_ã°


6468 
	#GL_EXT_dïth_bounds_ã°
 1

	)

6469 #ifde‡
GL_GLEXT_PROTOTYPES


6470 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
, GLclampd);

6472 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

6475 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


6476 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

6479 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


6480 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

6481 #ifde‡
GL_GLEXT_PROTOTYPES


6482 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
, GLenum);

6484 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6487 #i‚de‡
GL_MESA_∑ck_övît


6488 
	#GL_MESA_∑ck_övît
 1

	)

6491 #i‚de‡
GL_MESA_ycb¸_ãxtuª


6492 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

6495 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


6496 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

6499 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


6500 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

6503 #i‚de‡
GL_NV_‰agmít_¥ogøm2


6504 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

6507 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


6508 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

6511 #i‚de‡
GL_NV_vîãx_¥ogøm3


6512 
	#GL_NV_vîãx_¥ogøm3
 1

	)

6515 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


6516 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

6517 #ifde‡
GL_GLEXT_PROTOTYPES


6518 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
);

6519 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
, 
GLuöt
);

6520 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

6521 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
, 
GLuöt
 *);

6522 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei);

6523 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

6524 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
);

6525 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
, 
GLuöt
);

6526 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

6527 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
, 
GLuöt
 *);

6528 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLenum);

6529 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
);

6530 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
);

6531 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
, GLint);

6532 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
);

6533 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

6534 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
);

6536 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

6537 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

6538 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

6539 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

6540 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6541 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6542 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

6543 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

6544 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

6545 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

6546 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6547 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6548 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6549 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

6550 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

6551 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6552 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6555 #i‚de‡
GL_GREMEDY_°rög_m¨kî


6556 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

6557 #ifde‡
GL_GLEXT_PROTOTYPES


6558 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
, c⁄° 
GLvoid
 *);

6560 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

6564 #ifde‡
__˝lu•lus


	@SDL/include/SDL_platform.h

27 #i‚de‡
_SDL_∂©f‹m_h


28 
	#_SDL_∂©f‹m_h


	)

30 #i‡
deföed
(
_AIX
)

31 #unde‡
__AIX__


32 
	#__AIX__
 1

	)

34 #i‡
deföed
(
__BEOS__
)

35 #unde‡
__BEOS__


36 
	#__BEOS__
 1

	)

38 #i‡
deföed
(
__HAIKU__
)

39 #unde‡
__HAIKU__


40 
	#__HAIKU__
 1

	)

42 #i‡
deföed
(
bsdi
Ë|| deföed(
__bsdi
Ë|| deföed(
__bsdi__
)

43 #unde‡
__BSDI__


44 
	#__BSDI__
 1

	)

46 #i‡
deföed
(
_¨ch_dªamˇ°
)

47 #unde‡
__DREAMCAST__


48 
	#__DREAMCAST__
 1

	)

50 #i‡
deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD_kî√l__
Ë|| deföed(
__Døg⁄Fly__
)

51 #unde‡
__FREEBSD__


52 
	#__FREEBSD__
 1

	)

54 #i‡
deföed
(
__HAIKU__
)

55 #unde‡
__HAIKU__


56 
	#__HAIKU__
 1

	)

58 #i‡
deföed
(
hpux
Ë|| deföed(
__hpux
Ë|| deföed(
__hpux__
)

59 #unde‡
__HPUX__


60 
	#__HPUX__
 1

	)

62 #i‡
deföed
(
sgi
Ë|| deföed(
__sgi
Ë|| deföed(
__sgi__
Ë|| deföed(
_SGI_SOURCE
)

63 #unde‡
__IRIX__


64 
	#__IRIX__
 1

	)

66 #i‡
deföed
(
löux
Ë|| deföed(
__löux
Ë|| deföed(
__löux__
)

67 #unde‡
__LINUX__


68 
	#__LINUX__
 1

	)

70 #i‡
deföed
(
__APPLE__
)

71 #unde‡
__MACOSX__


72 
	#__MACOSX__
 1

	)

73 #ñi‡
deföed
(
macötosh
)

74 #unde‡
__MACOS__


75 
	#__MACOS__
 1

	)

77 #i‡
deföed
(
__NëBSD__
)

78 #unde‡
__NETBSD__


79 
	#__NETBSD__
 1

	)

81 #i‡
deföed
(
__O≥nBSD__
)

82 #unde‡
__OPENBSD__


83 
	#__OPENBSD__
 1

	)

85 #i‡
deföed
(
__OS2__
)

86 #unde‡
__OS2__


87 
	#__OS2__
 1

	)

89 #i‡
deföed
(
osf
Ë|| deföed(
__osf
Ë|| deföed(
__osf__
Ë|| deföed(
_OSF_SOURCE
)

90 #unde‡
__OSF__


91 
	#__OSF__
 1

	)

93 #i‡
deföed
(
__QNXNTO__
)

94 #unde‡
__QNXNTO__


95 
	#__QNXNTO__
 1

	)

97 #i‡
deföed
(
riscos
Ë|| deföed(
__riscos
Ë|| deföed(
__riscos__
)

98 #unde‡
__RISCOS__


99 
	#__RISCOS__
 1

	)

101 #i‡
deföed
(
__SVR4
)

102 #unde‡
__SOLARIS__


103 
	#__SOLARIS__
 1

	)

105 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN32
)

106 #unde‡
__WIN32__


107 
	#__WIN32__
 1

	)

	@SDL/include/SDL_quit.h

27 #i‚de‡
_SDL_quô_h


28 
	#_SDL_quô_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

52 
	#SDL_QuôReque°ed
() \

53 (
	`SDL_PumpEvíts
(), 
	`SDL_PìpEvíts
(
NULL
,0,
SDL_PEEKEVENT
,
SDL_QUITMASK
))

	)

	@SDL/include/SDL_rwops.h

28 #i‚de‡
_SDL_rw›s_h


29 
	#_SDL_rw›s_h


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


42 
	sSDL_RW›s
 {

47 (
SDLCALL
 *
£ek
)(
SDL_RW›s
 *
c⁄ãxt
, 
off£t
, 
whí˚
);

53 (
SDLCALL
 *
ªad
)(
SDL_RW›s
 *
c⁄ãxt
, *
±r
, 
size
, 
maxnum
);

59 (
SDLCALL
 *
wrôe
)(
SDL_RW›s
 *
c⁄ãxt
, c⁄° *
±r
, 
size
, 
num
);

62 (
SDLCALL
 *
˛o£
)(
SDL_RW›s
 *
c⁄ãxt
);

64 
Uöt32
 
ty≥
;

66 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__SYMBIAN32__
)

68 
≠≥nd
;

69 *
h
;

71 *
d©a
;

72 
size
;

73 
À·
;

74 } 
buf„r
;

75 } 
wö32io
;

77 #ifde‡
HAVE_STDIO_H


79 
auto˛o£
;

80 
FILE
 *
Â
;

81 } 
°dio
;

84 
Uöt8
 *
ba£
;

85 
Uöt8
 *
hîe
;

86 
Uöt8
 *
°›
;

87 } 
mem
;

89 *
d©a1
;

90 } 
unknown
;

91 } 
hiddí
;

93 } 
	tSDL_RW›s
;

99 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_RWFromFûe
(c⁄° *
fûe
, c⁄° *
mode
);

101 #ifde‡
HAVE_STDIO_H


102 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_RWFromFP
(
FILE
 *
Â
, 
auto˛o£
);

105 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_RWFromMem
(*
mem
, 
size
);

106 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_RWFromC⁄°Mem
(c⁄° *
mem
, 
size
);

108 
DECLSPEC
 
SDL_RW›s
 * 
SDLCALL
 
SDL_AŒocRW
();

109 
DECLSPEC
 
SDLCALL
 
SDL_FªeRW
(
SDL_RW›s
 *
¨ó
);

115 
	#RW_SEEK_SET
 0

	)

116 
	#RW_SEEK_CUR
 1

	)

117 
	#RW_SEEK_END
 2

	)

122 
	#SDL_RW£ek
(
˘x
, 
off£t
, 
whí˚
Ë(˘x)->
	`£ek
(˘x, off£t, whí˚)

	)

123 
	#SDL_RWãŒ
(
˘x
Ë(˘x)->
	`£ek
(˘x, 0, 
RW_SEEK_CUR
)

	)

124 
	#SDL_RWªad
(
˘x
, 
±r
, 
size
, 
n
Ë(˘x)->
	`ªad
(˘x,Öå, size,Ç)

	)

125 
	#SDL_RWwrôe
(
˘x
, 
±r
, 
size
, 
n
Ë(˘x)->
	`wrôe
(˘x,Öå, size,Ç)

	)

126 
	#SDL_RW˛o£
(
˘x
Ë(˘x)->
	`˛o£
(˘x)

	)

131 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_RódLE16
(
SDL_RW›s
 *
§c
);

132 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_RódBE16
(
SDL_RW›s
 *
§c
);

133 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_RódLE32
(
SDL_RW›s
 *
§c
);

134 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_RódBE32
(
SDL_RW›s
 *
§c
);

135 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_RódLE64
(
SDL_RW›s
 *
§c
);

136 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_RódBE64
(
SDL_RW›s
 *
§c
);

141 
DECLSPEC
 
SDLCALL
 
SDL_WrôeLE16
(
SDL_RW›s
 *
d°
, 
Uöt16
 
vÆue
);

142 
DECLSPEC
 
SDLCALL
 
SDL_WrôeBE16
(
SDL_RW›s
 *
d°
, 
Uöt16
 
vÆue
);

143 
DECLSPEC
 
SDLCALL
 
SDL_WrôeLE32
(
SDL_RW›s
 *
d°
, 
Uöt32
 
vÆue
);

144 
DECLSPEC
 
SDLCALL
 
SDL_WrôeBE32
(
SDL_RW›s
 *
d°
, 
Uöt32
 
vÆue
);

145 
DECLSPEC
 
SDLCALL
 
SDL_WrôeLE64
(
SDL_RW›s
 *
d°
, 
Uöt64
 
vÆue
);

146 
DECLSPEC
 
SDLCALL
 
SDL_WrôeBE64
(
SDL_RW›s
 *
d°
, 
Uöt64
 
vÆue
);

150 #ifde‡
__˝lu•lus


153 
	~"˛o£_code.h
"

	@SDL/include/SDL_stdinc.h

27 #i‚de‡
_SDL_°döc_h


28 
	#_SDL_°döc_h


	)

30 
	~"SDL_c⁄fig.h
"

33 #ifde‡
HAVE_SYS_TYPES_H


34 
	~<sys/ty≥s.h
>

36 #ifde‡
HAVE_STDIO_H


37 
	~<°dio.h
>

39 #i‡
deföed
(
STDC_HEADERS
)

40 
	~<°dlib.h
>

41 
	~<°ddef.h
>

42 
	~<°d¨g.h
>

44 #i‡
deföed
(
HAVE_STDLIB_H
)

45 
	~<°dlib.h
>

46 #ñi‡
deföed
(
HAVE_MALLOC_H
)

47 
	~<mÆloc.h
>

49 #i‡
deföed
(
HAVE_STDDEF_H
)

50 
	~<°ddef.h
>

52 #i‡
deföed
(
HAVE_STDARG_H
)

53 
	~<°d¨g.h
>

56 #ifde‡
HAVE_STRING_H


57 #i‡!
deföed
(
STDC_HEADERS
Ë&& deföed(
HAVE_MEMORY_H
)

58 
	~<mem‹y.h
>

60 
	~<°rög.h
>

62 #ifde‡
HAVE_STRINGS_H


63 
	~<°rögs.h
>

65 #i‡
deföed
(
HAVE_INTTYPES_H
)

66 
	~<öây≥s.h
>

67 #ñi‡
deföed
(
HAVE_STDINT_H
)

68 
	~<°döt.h
>

70 #ifde‡
HAVE_CTYPE_H


71 
	~<˘y≥.h
>

73 #i‡
deföed
(
HAVE_ICONV
Ë&& deföed(
HAVE_ICONV_H
)

74 
	~<ic⁄v.h
>

78 
	#SDL_¨øysize
(
¨øy
Ë(◊ºay)/◊ºay[0]))

	)

79 
	#SDL_TABLESIZE
(
èbÀ
Ë
	`SDL_¨øysize
—abÀ)

	)

83 #ifde‡
__˝lu•lus


84 
	#SDL_ªöãΩªt_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë
ªöãΩªt_ˇ°
<ty≥>”x¥essi⁄)

	)

85 
	#SDL_°©ic_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë
°©ic_ˇ°
<ty≥>”x¥essi⁄)

	)

87 
	#SDL_ªöãΩªt_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë(—y≥)”x¥essi⁄))

	)

88 
	#SDL_°©ic_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë(—y≥)”x¥essi⁄))

	)

94 
	mSDL_FALSE
 = 0,

95 
	mSDL_TRUE
 = 1

96 } 
	tSDL_boﬁ
;

98 
öt8_t
 
	tSöt8
;

99 
uöt8_t
 
	tUöt8
;

100 
öt16_t
 
	tSöt16
;

101 
uöt16_t
 
	tUöt16
;

102 
öt32_t
 
	tSöt32
;

103 
uöt32_t
 
	tUöt32
;

105 #ifde‡
SDL_HAS_64BIT_TYPE


106 
öt64_t
 
	tSöt64
;

107 #i‚de‡
SYMBIAN32_GCCE


108 
uöt64_t
 
	tUöt64
;

113 
Uöt32
 
	mhi
;

114 
Uöt32
 
	mlo
;

115 } 
	tUöt64
, 
	tSöt64
;

122 
	#SDL_COMPILE_TIME_ASSERT
(
«me
, 
x
) \

123 
	tSDL_dummy_
 ## 
	t«me
[(
x
Ë* 2 - 1]

	)

125 
	tSDL_COMPILE_TIME_ASSERT
(
	tuöt8
, (
	tUöt8
) == 1);

126 
SDL_COMPILE_TIME_ASSERT
(
söt8
, (
Söt8
) == 1);

127 
SDL_COMPILE_TIME_ASSERT
(
uöt16
, (
Uöt16
) == 2);

128 
SDL_COMPILE_TIME_ASSERT
(
söt16
, (
Söt16
) == 2);

129 
SDL_COMPILE_TIME_ASSERT
(
uöt32
, (
Uöt32
) == 4);

130 
SDL_COMPILE_TIME_ASSERT
(
söt32
, (
Söt32
) == 4);

131 
SDL_COMPILE_TIME_ASSERT
(
uöt64
, (
Uöt64
) == 8);

132 
SDL_COMPILE_TIME_ASSERT
(
söt64
, (
Söt64
) == 8);

142 #ifde‡
__MWERKS__


143 #¥agm®
íumßlwaysöt
 
⁄


147 
	mDUMMY_ENUM_VALUE


148 } 
	tSDL_DUMMY_ENUM
;

150 #i‚de‡
__NDS__


151 
SDL_COMPILE_TIME_ASSERT
(, (
SDL_DUMMY_ENUM
) == ());

155 
	~"begö_code.h
"

157 #ifde‡
__˝lu•lus


161 #ifde‡
HAVE_MALLOC


162 
	#SDL_mÆloc
 
mÆloc


	)

164 
DECLSPEC
 * 
SDLCALL
 
SDL_mÆloc
(
size_t
 
size
);

167 #ifde‡
HAVE_CALLOC


168 
	#SDL_ˇŒoc
 
ˇŒoc


	)

170 
DECLSPEC
 * 
SDLCALL
 
SDL_ˇŒoc
(
size_t
 
nmemb
, size_à
size
);

173 #ifde‡
HAVE_REALLOC


174 
	#SDL_ªÆloc
 
ªÆloc


	)

176 
DECLSPEC
 * 
SDLCALL
 
SDL_ªÆloc
(*
mem
, 
size_t
 
size
);

179 #ifde‡
HAVE_FREE


180 
	#SDL_‰ì
 
‰ì


	)

182 
DECLSPEC
 
SDLCALL
 
SDL_‰ì
(*
mem
);

185 #i‡
deföed
(
HAVE_ALLOCA
Ë&& !deföed(
Æloˇ
)

186 #i‡
deföed
(
HAVE_ALLOCA_H
)

187 
	~<Æloˇ.h
>

188 #ñi‡
deföed
(
__GNUC__
)

189 
	#Æloˇ
 
__buûtö_Æloˇ


	)

190 #ñi‡
deföed
(
_MSC_VER
)

191 
	~<mÆloc.h
>

192 
	#Æloˇ
 
_Æloˇ


	)

193 #ñi‡
deföed
(
__WATCOMC__
)

194 
	~<mÆloc.h
>

195 #ñi‡
deföed
(
__BORLANDC__
)

196 
	~<mÆloc.h
>

197 #ñi‡
deföed
(
__DMC__
)

198 
	~<°dlib.h
>

199 #ñi‡
deföed
(
__AIX__
)

200 #¥agm®
Æloˇ


201 #ñi‡
deföed
(
__MRC__
)

202 *
Æloˇ
 ();

204 *
Æloˇ
 ();

207 #ifde‡
HAVE_ALLOCA


208 
	#SDL_°ack_Æloc
(
ty≥
, 
cou¡
Ë—y≥*)
	`Æloˇ
(—y≥)*(cou¡))

	)

209 
	#SDL_°ack_‰ì
(
d©a
)

	)

211 
	#SDL_°ack_Æloc
(
ty≥
, 
cou¡
Ë—y≥*)
	`SDL_mÆloc
(—y≥)*(cou¡))

	)

212 
	#SDL_°ack_‰ì
(
d©a
Ë
	`SDL_‰ì
(d©a)

	)

215 #ifde‡
HAVE_GETENV


216 
	#SDL_gëív
 
gëív


	)

218 
DECLSPEC
 * 
SDLCALL
 
SDL_gëív
(c⁄° *
«me
);

221 #ifde‡
HAVE_PUTENV


222 
	#SDL_puãnv
 
puãnv


	)

224 
DECLSPEC
 
SDLCALL
 
SDL_puãnv
(c⁄° *
v¨übÀ
);

227 #ifde‡
HAVE_QSORT


228 
	#SDL_qs‹t
 
qs‹t


	)

230 
DECLSPEC
 
SDLCALL
 
SDL_qs‹t
(*
ba£
, 
size_t
 
nmemb
, size_à
size
,

231 (*
com∑ª
)(const *, const *));

234 #ifde‡
HAVE_ABS


235 
	#SDL_abs
 
abs


	)

237 
	#SDL_abs
(
X
Ë((XË< 0 ? -(XË: (X))

	)

240 
	#SDL_mö
(
x
, 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

241 
	#SDL_max
(
x
, 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

243 #ifde‡
HAVE_CTYPE_H


244 
	#SDL_isdigô
(
X
Ë
	`isdigô
(X)

	)

245 
	#SDL_is•a˚
(
X
Ë
	`is•a˚
(X)

	)

246 
	#SDL_touµî
(
X
Ë
	`touµî
(X)

	)

247 
	#SDL_tﬁowî
(
X
Ë
	`tﬁowî
(X)

	)

249 
	#SDL_isdigô
(
X
Ë(((XË>'0'Ë&& ((XË<'9'))

	)

250 
	#SDL_is•a˚
(
X
Ë(((XË=' 'Ë|| ((XË='\t'Ë|| ((XË='\r'Ë|| ((XË='\n'))

	)

251 
	#SDL_touµî
(
X
Ë(((XË>'a'Ë&& ((XË<'z'Ë? ('A'+((X)-'a')Ë: (X))

	)

252 
	#SDL_tﬁowî
(
X
Ë(((XË>'A'Ë&& ((XË<'Z'Ë? ('a'+((X)-'A')Ë: (X))

	)

255 #ifde‡
HAVE_MEMSET


256 
	#SDL_mem£t
 
mem£t


	)

258 
DECLSPEC
 * 
SDLCALL
 
SDL_mem£t
(*
d°
, 
c
, 
size_t
 
Àn
);

261 #i‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

262 
	#SDL_mem£t4
(
d°
, 
vÆ
, 
Àn
) \

264 
u0
, 
u1
, 
u2
; \

265 
__asm__
 
	`__vﬁ©ûe__
 ( \

268 : "=&D" (
u0
), "=&a" (
u1
), "=&c" (
u2
) \

269 : "0" (
d°
), "1" (
vÆ
), "2" (
	`SDL_°©ic_ˇ°
(
Uöt32
, 
Àn
)) \

271 } 0)

	)

273 #i‚de‡
SDL_mem£t4


274 
	#SDL_mem£t4
(
d°
, 
vÆ
, 
Àn
) \

276 
_cou¡
 = (
Àn
); \

277 
_n
 = (
_cou¡
 + 3) / 4; \

278 
Uöt32
 *
_p
 = 
	`SDL_°©ic_ˇ°
(Uöt32 *, 
d°
); \

279 
Uöt32
 
_vÆ
 = (
vÆ
); \

280 i‡(
Àn
 == 0) ; \

281 
_cou¡
 % 4) { \

282 0: dÿ{ *
_p
++ = 
_vÆ
; \

283 3: *
_p
++ = 
_vÆ
; \

284 2: *
_p
++ = 
_vÆ
; \

285 1: *
_p
++ = 
_vÆ
; \

286 }  --
_n
 ); \

288 } 0)

	)

292 #i‡
deföed
(
__MACH__
Ë&& deföed(
__APPLE__
)

293 
	#SDL_mem˝y
(
d°
, 
§c
, 
Àn
Ë
	`mem˝y
(d°, src,Üí)

	)

294 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

295 
	#SDL_mem˝y
(
d°
, 
§c
, 
Àn
) \

297 
u0
, 
u1
, 
u2
; \

298 
__asm__
 
	`__vﬁ©ûe__
 ( \

308 : "=&c" (
u0
), "=&D" (
u1
), "=&S" (
u2
) \

309 : "0" (
	`SDL_°©ic_ˇ°
(, 
Àn
)/4), "q" (Àn), "1" (
d°
),"2" (
§c
) \

311 } 0)

	)

313 #i‚de‡
SDL_mem˝y


314 #ifde‡
HAVE_MEMCPY


315 
	#SDL_mem˝y
 
mem˝y


	)

316 #ñi‡
deföed
(
HAVE_BCOPY
)

317 
	#SDL_mem˝y
(
d
, 
s
, 
n
Ë
	`bc›y
((s), (d), (n))

	)

319 
DECLSPEC
 * 
SDLCALL
 
SDL_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

324 #i‡
deföed
(
__MACH__
Ë&& deföed(
__APPLE__
)

325 
	#SDL_mem˝y4
(
d°
, 
§c
, 
Àn
Ë
	`mem˝y
(d°, src, (Àn)*4)

	)

326 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

327 
	#SDL_mem˝y4
(
d°
, 
§c
, 
Àn
) \

329 
ecx
, 
edi
, 
esi
; \

330 
__asm__
 
	`__vﬁ©ûe__
 ( \

333 : "=&c" (
ecx
), "=&D" (
edi
), "=&S" (
esi
) \

334 : "0" (
	`SDL_°©ic_ˇ°
(, 
Àn
)), "1" (
d°
), "2" (
§c
) \

336 } 0)

	)

338 #i‚de‡
SDL_mem˝y4


339 
	#SDL_mem˝y4
(
d°
, 
§c
, 
Àn
Ë
	`SDL_mem˝y
(d°, src, (ÀnË<< 2)

	)

342 #i‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

343 
	#SDL_ªv˝y
(
d°
, 
§c
, 
Àn
) \

345 
u0
, 
u1
, 
u2
; \

346 *
d°p
 = 
	`SDL_°©ic_ˇ°
(*, 
d°
); \

347 *
§˝
 = 
	`SDL_°©ic_ˇ°
(*, 
§c
); \

348 
n
 = (
Àn
); \

349 i‡–
n
 >= 4 ) { \

350 
__asm__
 
	`__vﬁ©ûe__
 ( \

354 : "=&c" (
u0
), "=&D" (
u1
), "=&S" (
u2
) \

355 : "0" (
n
 >> 2), \

356 "1" (
d°p
+(
n
-4)), "2" (
§˝
+(n-4)) \

359 
n
 & 3) { \

360 3: 
d°p
[2] = 
§˝
[2]; \

361 2: 
d°p
[1] = 
§˝
[1]; \

362 1: 
d°p
[0] = 
§˝
[0]; \

367 } 0)

	)

369 #i‚de‡
SDL_ªv˝y


370 
DECLSPEC
 * 
SDLCALL
 
SDL_ªv˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

373 #ifde‡
HAVE_MEMMOVE


374 
	#SDL_memmove
 
memmove


	)

375 #ñi‡
deföed
(
HAVE_BCOPY
)

376 
	#SDL_memmove
(
d
, 
s
, 
n
Ë
	`bc›y
((s), (d), (n))

	)

378 
	#SDL_memmove
(
d°
, 
§c
, 
Àn
) \

380 i‡–
d°
 < 
§c
 ) { \

381 
	`SDL_mem˝y
(
d°
, 
§c
, 
Àn
); \

383 
	`SDL_ªv˝y
(
d°
, 
§c
, 
Àn
); \

385 } 0)

	)

388 #ifde‡
HAVE_MEMCMP


389 
	#SDL_memcmp
 
memcmp


	)

391 
DECLSPEC
 
SDLCALL
 
SDL_memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

394 #ifde‡
HAVE_STRLEN


395 
	#SDL_°æí
 
°æí


	)

397 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_°æí
(c⁄° *
°rög
);

400 #ifde‡
HAVE_STRLCPY


401 
	#SDL_°æ˝y
 
°æ˝y


	)

403 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
maxÀn
);

406 #ifde‡
HAVE_STRLCAT


407 
	#SDL_°æˇt
 
°æˇt


	)

409 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_°æˇt
(*
d°
, c⁄° *
§c
, size_à
maxÀn
);

412 #ifde‡
HAVE_STRDUP


413 
	#SDL_°rdup
 
°rdup


	)

415 
DECLSPEC
 * 
SDLCALL
 
SDL_°rdup
(c⁄° *
°rög
);

418 #ifde‡
HAVE__STRREV


419 
	#SDL_°ºev
 
_°ºev


	)

421 
DECLSPEC
 * 
SDLCALL
 
SDL_°ºev
(*
°rög
);

424 #ifde‡
HAVE__STRUPR


425 
	#SDL_°ru¥
 
_°ru¥


	)

427 
DECLSPEC
 * 
SDLCALL
 
SDL_°ru¥
(*
°rög
);

430 #ifde‡
HAVE__STRLWR


431 
	#SDL_°æwr
 
_°æwr


	)

433 
DECLSPEC
 * 
SDLCALL
 
SDL_°æwr
(*
°rög
);

436 #ifde‡
HAVE_STRCHR


437 
	#SDL_°rchr
 
°rchr


	)

438 #ñi‡
deföed
(
HAVE_INDEX
)

439 
	#SDL_°rchr
 
ödex


	)

441 
DECLSPEC
 * 
SDLCALL
 
SDL_°rchr
(c⁄° *
°rög
, 
c
);

444 #ifde‡
HAVE_STRRCHR


445 
	#SDL_°ºchr
 
°ºchr


	)

446 #ñi‡
deföed
(
HAVE_RINDEX
)

447 
	#SDL_°ºchr
 
rödex


	)

449 
DECLSPEC
 * 
SDLCALL
 
SDL_°ºchr
(c⁄° *
°rög
, 
c
);

452 #ifde‡
HAVE_STRSTR


453 
	#SDL_°r°r
 
°r°r


	)

455 
DECLSPEC
 * 
SDLCALL
 
SDL_°r°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

458 #ifde‡
HAVE_ITOA


459 
	#SDL_ôﬂ
 
ôﬂ


	)

461 
	#SDL_ôﬂ
(
vÆue
, 
°rög
, 
ødix
Ë
	`SDL_…ﬂ
(()vÆue, såög,Ñadix)

	)

464 #ifde‡
HAVE__LTOA


465 
	#SDL_…ﬂ
 
_…ﬂ


	)

467 
DECLSPEC
 * 
SDLCALL
 
SDL_…ﬂ
(
vÆue
, *
°rög
, 
ødix
);

470 #ifde‡
HAVE__UITOA


471 
	#SDL_uôﬂ
 
_uôﬂ


	)

473 
	#SDL_uôﬂ
(
vÆue
, 
°rög
, 
ødix
Ë
	`SDL_u…ﬂ
(()vÆue, såög,Ñadix)

	)

476 #ifde‡
HAVE__ULTOA


477 
	#SDL_u…ﬂ
 
_u…ﬂ


	)

479 
DECLSPEC
 * 
SDLCALL
 
SDL_u…ﬂ
(
vÆue
, *
°rög
, 
ødix
);

482 #ifde‡
HAVE_STRTOL


483 
	#SDL_°πﬁ
 
°πﬁ


	)

485 
DECLSPEC
 
SDLCALL
 
SDL_°πﬁ
(c⁄° *
°rög
, **
ídp
, 
ba£
);

488 #ifde‡
HAVE_STRTOUL


489 
	#SDL_°πoul
 
°πoul


	)

491 
DECLSPEC
 
SDLCALL
 
SDL_°πoul
(c⁄° *
°rög
, **
ídp
, 
ba£
);

494 #ifde‡
SDL_HAS_64BIT_TYPE


496 #ifde‡
HAVE__I64TOA


497 
	#SDL_Œtﬂ
 
_i64tﬂ


	)

499 
DECLSPEC
 * 
SDLCALL
 
SDL_Œtﬂ
(
Söt64
 
vÆue
, *
°rög
, 
ødix
);

502 #ifde‡
HAVE__UI64TOA


503 
	#SDL_uŒtﬂ
 
_ui64tﬂ


	)

505 
DECLSPEC
 * 
SDLCALL
 
SDL_uŒtﬂ
(
Uöt64
 
vÆue
, *
°rög
, 
ødix
);

508 #ifde‡
HAVE_STRTOLL


509 
	#SDL_°πﬁl
 
°πﬁl


	)

511 
DECLSPEC
 
Söt64
 
SDLCALL
 
SDL_°πﬁl
(c⁄° *
°rög
, **
ídp
, 
ba£
);

514 #ifde‡
HAVE_STRTOULL


515 
	#SDL_°πouŒ
 
°πouŒ


	)

517 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_°πouŒ
(c⁄° *
°rög
, **
ídp
, 
ba£
);

522 #ifde‡
HAVE_STRTOD


523 
	#SDL_°πod
 
°πod


	)

525 
DECLSPEC
 
SDLCALL
 
SDL_°πod
(c⁄° *
°rög
, **
ídp
);

528 #ifde‡
HAVE_ATOI


529 
	#SDL_©oi
 
©oi


	)

531 
	#SDL_©oi
(
X
Ë
	`SDL_°πﬁ
(X, 
NULL
, 0)

	)

534 #ifde‡
HAVE_ATOF


535 
	#SDL_©of
 
©of


	)

537 
	#SDL_©of
(
X
Ë
	`SDL_°πod
(X, 
NULL
)

	)

540 #ifde‡
HAVE_STRCMP


541 
	#SDL_°rcmp
 
°rcmp


	)

543 
DECLSPEC
 
SDLCALL
 
SDL_°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

546 #ifde‡
HAVE_STRNCMP


547 
	#SDL_°∫cmp
 
°∫cmp


	)

549 
DECLSPEC
 
SDLCALL
 
SDL_°∫cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
size_t
 
maxÀn
);

552 #ifde‡
HAVE_STRCASECMP


553 
	#SDL_°rˇ£cmp
 
°rˇ£cmp


	)

554 #ñi‡
deföed
(
HAVE__STRICMP
)

555 
	#SDL_°rˇ£cmp
 
_°ricmp


	)

557 
DECLSPEC
 
SDLCALL
 
SDL_°rˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
);

560 #ifde‡
HAVE_STRNCASECMP


561 
	#SDL_°∫ˇ£cmp
 
°∫ˇ£cmp


	)

562 #ñi‡
deföed
(
HAVE__STRNICMP
)

563 
	#SDL_°∫ˇ£cmp
 
_°∫icmp


	)

565 
DECLSPEC
 
SDLCALL
 
SDL_°∫ˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
size_t
 
maxÀn
);

568 #ifde‡
HAVE_SSCANF


569 
	#SDL_ssˇnf
 
ssˇnf


	)

571 
DECLSPEC
 
SDLCALL
 
SDL_ssˇnf
(c⁄° *
ãxt
, c⁄° *
fmt
, ...);

574 #ifde‡
HAVE_SNPRINTF


575 
	#SDL_¢¥ötf
 
¢¥ötf


	)

577 
DECLSPEC
 
SDLCALL
 
SDL_¢¥ötf
(*
ãxt
, 
size_t
 
maxÀn
, c⁄° *
fmt
, ...);

580 #ifde‡
HAVE_VSNPRINTF


581 
	#SDL_v¢¥ötf
 
v¢¥ötf


	)

583 
DECLSPEC
 
SDLCALL
 
SDL_v¢¥ötf
(*
ãxt
, 
size_t
 
maxÀn
, c⁄° *
fmt
, 
va_li°
 
≠
);

590 
	#SDL_ICONV_ERROR
 (
size_t
)-1

	)

591 
	#SDL_ICONV_E2BIG
 (
size_t
)-2

	)

592 
	#SDL_ICONV_EILSEQ
 (
size_t
)-3

	)

593 
	#SDL_ICONV_EINVAL
 (
size_t
)-4

	)

596 #i‡
deföed
(
HAVE_ICONV
Ë&& deföed(
HAVE_ICONV_H
)

597 
	#SDL_ic⁄v_t
 
ic⁄v_t


	)

598 
	#SDL_ic⁄v_›í
 
ic⁄v_›í


	)

599 
	#SDL_ic⁄v_˛o£
 
ic⁄v_˛o£


	)

601 
_SDL_ic⁄v_t
 *
	tSDL_ic⁄v_t
;

602 
DECLSPEC
 
SDL_ic⁄v_t
 
SDLCALL
 
SDL_ic⁄v_›í
(c⁄° *
tocode
, c⁄° *
‰omcode
);

603 
DECLSPEC
 
SDLCALL
 
SDL_ic⁄v_˛o£
(
SDL_ic⁄v_t
 
cd
);

605 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_ic⁄v
(
SDL_ic⁄v_t
 
cd
, c⁄° **
öbuf
, size_à*
öbyã¶e·
, **
outbuf
, size_à*
outbyã¶e·
);

609 
DECLSPEC
 * 
SDLCALL
 
SDL_ic⁄v_°rög
(c⁄° *
tocode
, c⁄° *
‰omcode
, c⁄° *
öbuf
, 
size_t
 
öbyã¶e·
);

610 
	#SDL_ic⁄v_utf8_loˇÀ
(
S
Ë
	`SDL_ic⁄v_°rög
("", "UTF-8", S, 
	`SDL_°æí
(S)+1)

	)

611 
	#SDL_ic⁄v_utf8_ucs2
(
S
Ë(
Uöt16
 *)
	`SDL_ic⁄v_°rög
("UCS-2", "UTF-8", S, 
	`SDL_°æí
(S)+1)

	)

612 
	#SDL_ic⁄v_utf8_ucs4
(
S
Ë(
Uöt32
 *)
	`SDL_ic⁄v_°rög
("UCS-4", "UTF-8", S, 
	`SDL_°æí
(S)+1)

	)

615 #ifde‡
__˝lu•lus


618 
	~"˛o£_code.h
"

	@SDL/include/SDL_syswm.h

27 #i‚de‡
_SDL_syswm_h


28 
	#_SDL_syswm_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

32 
	~"SDL_vîsi⁄.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


46 #ifde‡
SDL_PROTOTYPES_ONLY


47 
SDL_SysWMöfo
;

48 
SDL_SysWMöfo
 
	tSDL_SysWMöfo
;

52 #i‡
deföed
(
SDL_VIDEO_DRIVER_X11
)

53 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

55 
	#Curs‹
 
X11Curs‹


	)

58 
	~<X11/Xlib.h
>

59 
	~<X11/X©om.h
>

61 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

63 #unde‡
Curs‹


68 
	mSDL_SYSWM_X11


69 } 
	tSDL_SYSWM_TYPE
;

72 
	sSDL_SysWMmsg
 {

73 
SDL_vîsi⁄
 
	mvîsi⁄
;

74 
SDL_SYSWM_TYPE
 
	msubsy°em
;

76 
XEvít
 
	mxevít
;

77 } 
	mevít
;

84 
	sSDL_SysWMöfo
 {

85 
SDL_vîsi⁄
 
	mvîsi⁄
;

86 
SDL_SYSWM_TYPE
 
	msubsy°em
;

89 
Di•œy
 *
	mdi•œy
;

90 
Wödow
 
	mwödow
;

98 (*
	mlock_func
)();

99 (*
	mu∆ock_func
)();

104 
Wödow
 
	mfswödow
;

105 
Wödow
 
	mwmwödow
;

110 
Di•œy
 *
	mgfxdi•œy
;

112 } 
	mx11
;

113 } 
	möfo
;

114 } 
	tSDL_SysWMöfo
;

116 #ñi‡
deföed
(
SDL_VIDEO_DRIVER_NANOX
)

117 
	~<mi¸owö/«no-X.h
>

120 
	sSDL_SysWMmsg
 {

121 
SDL_vîsi⁄
 
	mvîsi⁄
;

122 
	md©a
;

126 
	sSDL_SysWMöfo
 {

127 
SDL_vîsi⁄
 
	mvîsi⁄
 ;

128 
GR_WINDOW_ID
 
	mwödow
 ;

129 } 
	tSDL_SysWMöfo
;

131 #ñi‡
deföed
(
SDL_VIDEO_DRIVER_WINDIB
Ë|| deföed(
SDL_VIDEO_DRIVER_DDRAW
Ë|| deföed(
SDL_VIDEO_DRIVER_GAPI
)

132 
	#WIN32_LEAN_AND_MEAN


	)

133 
	~<wödows.h
>

136 
	sSDL_SysWMmsg
 {

137 
SDL_vîsi⁄
 
	mvîsi⁄
;

138 
HWND
 
	mhwnd
;

139 
UINT
 
	mmsg
;

140 
WPARAM
 
	mwP¨am
;

141 
LPARAM
 
	mlP¨am
;

145 
	sSDL_SysWMöfo
 {

146 
SDL_vîsi⁄
 
	mvîsi⁄
;

147 
HWND
 
	mwödow
;

148 
HGLRC
 
	mhgÃc
;

149 } 
	tSDL_SysWMöfo
;

151 #ñi‡
deföed
(
SDL_VIDEO_DRIVER_RISCOS
)

154 
	sSDL_SysWMmsg
 {

155 
SDL_vîsi⁄
 
	mvîsi⁄
;

156 
	mevítCode
;

157 
	mpﬁlBlock
[64];

161 
	sSDL_SysWMöfo
 {

162 
SDL_vîsi⁄
 
	mvîsi⁄
;

163 
	mwimpVîsi⁄
;

164 
	mèskH™dÀ
;

165 
	mwödow
;

166 } 
	tSDL_SysWMöfo
;

168 #ñi‡
deföed
(
SDL_VIDEO_DRIVER_PHOTON
)

169 
	~<sys/√uåöo.h
>

170 
	~<Ph.h
>

173 
	sSDL_SysWMmsg
 {

174 
SDL_vîsi⁄
 
	mvîsi⁄
;

175 
	md©a
;

179 
	sSDL_SysWMöfo
 {

180 
SDL_vîsi⁄
 
	mvîsi⁄
;

181 
	md©a
;

182 } 
	tSDL_SysWMöfo
;

187 
	sSDL_SysWMmsg
 {

188 
SDL_vîsi⁄
 
	mvîsi⁄
;

189 
	md©a
;

193 
	sSDL_SysWMöfo
 {

194 
SDL_vîsi⁄
 
	mvîsi⁄
;

195 
	md©a
;

196 } 
	tSDL_SysWMöfo
;

217 
DECLSPEC
 
SDLCALL
 
SDL_GëWMInfo
(
SDL_SysWMöfo
 *
öfo
);

221 #ifde‡
__˝lu•lus


224 
	~"˛o£_code.h
"

	@SDL/include/SDL_thread.h

23 #i‚de‡
_SDL_thªad_h


24 
	#_SDL_thªad_h


	)

32 
	~"SDL_°döc.h
"

33 
	~"SDL_îr‹.h
"

36 
	~"SDL_muãx.h
"

38 
	~"begö_code.h
"

40 #ifde‡
__˝lu•lus


45 
SDL_Thªad
;

46 
SDL_Thªad
 
	tSDL_Thªad
;

49 #i‡((
deföed
(
__WIN32__
Ë&& !deföed(
HAVE_LIBC
)Ë|| deföed(
__OS2__
)Ë&& !deföed(
__SYMBIAN32__
)

63 
	#SDL_PASSED_BEGINTHREAD_ENDTHREAD


	)

64 #i‚de‡
_WIN32_WCE


65 
	~<¥o˚ss.h
>

68 #ifde‡
__OS2__


69 (*
p‚SDL_CuºítBegöThªad
)((*
	tfunc
)(*), *, , *
	t¨g
);

70 (*
p‚SDL_CuºítEndThªad
)();

72 
uöçå_t
 (
	t__cde˛
 *
	tp‚SDL_CuºítBegöThªad
) (*, ,

73 (
	t__°dˇŒ
 *
	tfunc
)(*), *
	t¨g
,

74 , *
	tthªadID
);

75 (
__cde˛
 *
	tp‚SDL_CuºítEndThªad
)(
	tcode
);

78 
DECLSPEC
 
SDL_Thªad
 * 
SDLCALL
 
SDL_Cª©eThªad
((SDLCALL *
‚
)(*), *
d©a
, 
p‚SDL_CuºítBegöThªad
 
p‚BegöThªad
, 
p‚SDL_CuºítEndThªad
 
p‚EndThªad
);

80 #ifde‡
__OS2__


81 
	#SDL_Cª©eThªad
(
‚
, 
d©a
Ë
	`SDL_Cª©eThªad
(‚, d©a, 
_begöthªad
, 
_ídthªad
)

	)

82 #ñi‡
deföed
(
_WIN32_WCE
)

83 
	#SDL_Cª©eThªad
(
‚
, 
d©a
Ë
	`SDL_Cª©eThªad
(‚, d©a, 
NULL
, NULL)

	)

85 
	#SDL_Cª©eThªad
(
‚
, 
d©a
Ë
	`SDL_Cª©eThªad
(‚, d©a, 
_begöthªadex
, 
_ídthªadex
)

	)

88 
DECLSPEC
 
SDL_Thªad
 * 
SDLCALL
 
SDL_Cª©eThªad
((SDLCALL *
‚
)(*), *
d©a
);

92 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_ThªadID
();

97 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëThªadID
(
SDL_Thªad
 *
thªad
);

103 
DECLSPEC
 
SDLCALL
 
SDL_WaôThªad
(
SDL_Thªad
 *
thªad
, *
°©us
);

106 
DECLSPEC
 
SDLCALL
 
SDL_KûlThªad
(
SDL_Thªad
 *
thªad
);

110 #ifde‡
__˝lu•lus


113 
	~"˛o£_code.h
"

	@SDL/include/SDL_timer.h

23 #i‚de‡
_SDL_timî_h


24 
	#_SDL_timî_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


40 
	#SDL_TIMESLICE
 10

	)

43 
	#TIMER_RESOLUTION
 10

	)

49 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëTicks
();

52 
DECLSPEC
 
SDLCALL
 
SDL_Dñay
(
Uöt32
 
ms
);

55 
Uöt32
 (
	tSDLCALL
 *
	tSDL_TimîCÆlback
)(
	tUöt32
 
	töãrvÆ
);

86 
DECLSPEC
 
SDLCALL
 
SDL_SëTimî
(
Uöt32
 
öãrvÆ
, 
SDL_TimîCÆlback
 
ˇŒback
);

101 
Uöt32
 (
	tSDLCALL
 *
	tSDL_NewTimîCÆlback
)(
	tUöt32
 
	töãrvÆ
, *
	t∑øm
);

104 
_SDL_TimîID
 *
	tSDL_TimîID
;

109 
DECLSPEC
 
SDL_TimîID
 
SDLCALL
 
SDL_AddTimî
(
Uöt32
 
öãrvÆ
, 
SDL_NewTimîCÆlback
 
ˇŒback
, *
∑øm
);

115 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_RemoveTimî
(
SDL_TimîID
 
t
);

120 #ifde‡
__˝lu•lus


123 
	~"˛o£_code.h
"

	@SDL/include/SDL_types.h

28 
	~"SDL_°döc.h
"

	@SDL/include/SDL_version.h

27 #i‚de‡
_SDL_vîsi⁄_h


28 
	#_SDL_vîsi⁄_h


	)

30 
	~"SDL_°döc.h
"

32 
	~"begö_code.h
"

34 #ifde‡
__˝lu•lus


42 
	#SDL_MAJOR_VERSION
 1

	)

43 
	#SDL_MINOR_VERSION
 2

	)

44 
	#SDL_PATCHLEVEL
 15

	)

47 
	sSDL_vîsi⁄
 {

48 
Uöt8
 
maj‹
;

49 
Uöt8
 
mö‹
;

50 
Uöt8
 
∑tch
;

51 } 
	tSDL_vîsi⁄
;

57 
	#SDL_VERSION
(
X
) \

59 (
X
)->
maj‹
 = 
SDL_MAJOR_VERSION
; \

60 (
X
)->
mö‹
 = 
SDL_MINOR_VERSION
; \

61 (
X
)->
∑tch
 = 
SDL_PATCHLEVEL
; \

62 }

	)

68 
	#SDL_VERSIONNUM
(
X
, 
Y
, 
Z
) \

69 ((
X
)*1000 + (
Y
)*100 + (
Z
))

	)

72 
	#SDL_COMPILEDVERSION
 \

73 
	`SDL_VERSIONNUM
(
SDL_MAJOR_VERSION
, 
SDL_MINOR_VERSION
, 
SDL_PATCHLEVEL
)

	)

76 
	#SDL_VERSION_ATLEAST
(
X
, 
Y
, 
Z
) \

77 (
SDL_COMPILEDVERSION
 >
	`SDL_VERSIONNUM
(
X
, 
Y
, 
Z
))

	)

83 
DECLSPEC
 c⁄° 
SDL_vîsi⁄
 * 
SDLCALL
 
SDL_Löked_Vîsi⁄
();

86 #ifde‡
__˝lu•lus


89 
	~"˛o£_code.h
"

	@SDL/include/SDL_video.h

27 #i‚de‡
_SDL_video_h


28 
	#_SDL_video_h


	)

30 
	~"SDL_°döc.h
"

31 
	~"SDL_îr‹.h
"

32 
	~"SDL_rw›s.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


44 
	#SDL_ALPHA_OPAQUE
 255

	)

45 
	#SDL_ALPHA_TRANSPARENT
 0

	)

50 
	sSDL_Re˘
 {

51 
Söt16
 
x
, 
y
;

52 
Uöt16
 
w
, 
h
;

53 } 
	tSDL_Re˘
;

55 
	sSDL_Cﬁ‹
 {

56 
Uöt8
 
r
;

57 
Uöt8
 
g
;

58 
Uöt8
 
b
;

59 
Uöt8
 
unu£d
;

60 } 
	tSDL_Cﬁ‹
;

61 
	#SDL_Cﬁour
 
SDL_Cﬁ‹


	)

63 
	sSDL_PÆëã
 {

64 
ncﬁ‹s
;

65 
SDL_Cﬁ‹
 *
cﬁ‹s
;

66 } 
	tSDL_PÆëã
;

70 
	sSDL_PixñF‹m©
 {

71 
SDL_PÆëã
 *
∑Àâe
;

72 
Uöt8
 
BôsPîPixñ
;

73 
Uöt8
 
ByãsPîPixñ
;

74 
Uöt8
 
Rloss
;

75 
Uöt8
 
Gloss
;

76 
Uöt8
 
Bloss
;

77 
Uöt8
 
Aloss
;

78 
Uöt8
 
Rshi·
;

79 
Uöt8
 
Gshi·
;

80 
Uöt8
 
Bshi·
;

81 
Uöt8
 
Ashi·
;

82 
Uöt32
 
Rmask
;

83 
Uöt32
 
Gmask
;

84 
Uöt32
 
Bmask
;

85 
Uöt32
 
Amask
;

88 
Uöt32
 
cﬁ‹key
;

90 
Uöt8
 
Æpha
;

91 } 
	tSDL_PixñF‹m©
;

96 
	sSDL_SurÁ˚
 {

97 
Uöt32
 
Êags
;

98 
SDL_PixñF‹m©
 *
f‹m©
;

99 
w
, 
h
;

100 
Uöt16
 
pôch
;

101 *
pixñs
;

102 
off£t
;

105 
¥iv©e_hwd©a
 *
hwd©a
;

108 
SDL_Re˘
 
˛ù_ª˘
;

109 
Uöt32
 
unu£d1
;

112 
Uöt32
 
locked
;

115 
SDL_BlôM≠
 *
m≠
;

118 
f‹m©_vîsi⁄
;

121 
ªfcou¡
;

122 } 
	tSDL_SurÁ˚
;

131 
	#SDL_SWSURFACE
 0x00000000

	)

132 
	#SDL_HWSURFACE
 0x00000001

	)

133 
	#SDL_ASYNCBLIT
 0x00000004

	)

138 
	#SDL_ANYFORMAT
 0x10000000

	)

139 
	#SDL_HWPALETTE
 0x20000000

	)

140 
	#SDL_DOUBLEBUF
 0x40000000

	)

141 
	#SDL_FULLSCREEN
 0x80000000

	)

142 
	#SDL_OPENGL
 0x00000002

	)

143 
	#SDL_OPENGLBLIT
 0x0000000A

	)

144 
	#SDL_RESIZABLE
 0x00000010

	)

145 
	#SDL_NOFRAME
 0x00000020

	)

150 
	#SDL_HWACCEL
 0x00000100

	)

151 
	#SDL_SRCCOLORKEY
 0x00001000

	)

152 
	#SDL_RLEACCELOK
 0x00002000

	)

153 
	#SDL_RLEACCEL
 0x00004000

	)

154 
	#SDL_SRCALPHA
 0x00010000

	)

155 
	#SDL_PREALLOC
 0x01000000

	)

161 
	#SDL_MUSTLOCK
(
surÁ˚
) \

162 (
surÁ˚
->
off£t
 || \

163 ((
surÁ˚
->
Êags
 & (
SDL_HWSURFACE
|
SDL_ASYNCBLIT
|
SDL_RLEACCEL
)Ë!0))

	)

166 (*
SDL_blô
)(
	tSDL_SurÁ˚
 *
	t§c
, 
	tSDL_Re˘
 *
	t§¸e˘
,

167 
	tSDL_SurÁ˚
 *
	td°
, 
	tSDL_Re˘
 *
	td°ª˘
);

171 
	sSDL_VideoInfo
 {

172 
Uöt32
 
hw_avaûabÀ
 :1;

173 
Uöt32
 
wm_avaûabÀ
 :1;

174 
Uöt32
 
Unu£dBôs1
 :6;

175 
Uöt32
 
Unu£dBôs2
 :1;

176 
Uöt32
 
blô_hw
 :1;

177 
Uöt32
 
blô_hw_CC
 :1;

178 
Uöt32
 
blô_hw_A
 :1;

179 
Uöt32
 
blô_sw
 :1;

180 
Uöt32
 
blô_sw_CC
 :1;

181 
Uöt32
 
blô_sw_A
 :1;

182 
Uöt32
 
blô_fûl
 :1;

183 
Uöt32
 
Unu£dBôs3
 :16;

184 
Uöt32
 
video_mem
;

185 
SDL_PixñF‹m©
 *
vfmt
;

186 
cuºít_w
;

187 
cuºít_h
;

188 } 
	tSDL_VideoInfo
;

200 
	#SDL_YV12_OVERLAY
 0x32315659

	)

201 
	#SDL_IYUV_OVERLAY
 0x56555949

	)

202 
	#SDL_YUY2_OVERLAY
 0x32595559

	)

203 
	#SDL_UYVY_OVERLAY
 0x59565955

	)

204 
	#SDL_YVYU_OVERLAY
 0x55595659

	)

208 
	sSDL_Ovîœy
 {

209 
Uöt32
 
f‹m©
;

210 
w
, 
h
;

211 
∂™es
;

212 
Uöt16
 *
pôches
;

213 
Uöt8
 **
pixñs
;

217 
¥iv©e_yuvhwfuncs
 *
hwfuncs
;

218 
¥iv©e_yuvhwd©a
 *
hwd©a
;

223 
Uöt32
 
hw_ovîœy
 :1;

224 
Uöt32
 
Unu£dBôs
 :31;

226 } 
	tSDL_Ovîœy
;

231 
SDL_GL_RED_SIZE
,

232 
SDL_GL_GREEN_SIZE
,

233 
SDL_GL_BLUE_SIZE
,

234 
SDL_GL_ALPHA_SIZE
,

235 
SDL_GL_BUFFER_SIZE
,

236 
SDL_GL_DOUBLEBUFFER
,

237 
SDL_GL_DEPTH_SIZE
,

238 
SDL_GL_STENCIL_SIZE
,

239 
SDL_GL_ACCUM_RED_SIZE
,

240 
SDL_GL_ACCUM_GREEN_SIZE
,

241 
SDL_GL_ACCUM_BLUE_SIZE
,

242 
SDL_GL_ACCUM_ALPHA_SIZE
,

243 
SDL_GL_STEREO
,

244 
SDL_GL_MULTISAMPLEBUFFERS
,

245 
SDL_GL_MULTISAMPLESAMPLES
,

246 
SDL_GL_ACCELERATED_VISUAL
,

247 
SDL_GL_SWAP_CONTROL


248 } 
	tSDL_GL©å
;

252 
	#SDL_LOGPAL
 0x01

	)

253 
	#SDL_PHYSPAL
 0x02

	)

275 
DECLSPEC
 
SDLCALL
 
SDL_VideoInô
(c⁄° *
drivî_«me
, 
Uöt32
 
Êags
);

276 
DECLSPEC
 
SDLCALL
 
SDL_VideoQuô
();

284 
DECLSPEC
 * 
SDLCALL
 
SDL_VideoDrivîName
(*
«mebuf
, 
maxÀn
);

292 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_GëVideoSurÁ˚
();

300 
DECLSPEC
 c⁄° 
SDL_VideoInfo
 * 
SDLCALL
 
SDL_GëVideoInfo
();

313 
DECLSPEC
 
SDLCALL
 
SDL_VideoModeOK
(
width
, 
height
, 
bµ
, 
Uöt32
 
Êags
);

324 
DECLSPEC
 
SDL_Re˘
 ** 
SDLCALL
 
SDL_Li°Modes
(
SDL_PixñF‹m©
 *
f‹m©
, 
Uöt32
 
Êags
);

384 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_SëVideoMode


385 (
width
, 
height
, 
bµ
, 
Uöt32
 
Êags
);

394 
DECLSPEC
 
SDLCALL
 
SDL_Upd©eRe˘s


395 (
SDL_SurÁ˚
 *
s¸ìn
, 
numª˘s
, 
SDL_Re˘
 *
ª˘s
);

400 
DECLSPEC
 
SDLCALL
 
SDL_Upd©eRe˘


401 (
SDL_SurÁ˚
 *
s¸ìn
, 
Söt32
 
x
, Söt32 
y
, 
Uöt32
 
w
, Uöt32 
h
);

414 
DECLSPEC
 
SDLCALL
 
SDL_Flù
(
SDL_SurÁ˚
 *
s¸ìn
);

424 
DECLSPEC
 
SDLCALL
 
SDL_SëGamma
(
ªd
, 
gªí
, 
blue
);

438 
DECLSPEC
 
SDLCALL
 
SDL_SëGammaRamp
(c⁄° 
Uöt16
 *
ªd
, c⁄° Uöt16 *
gªí
, c⁄° Uöt16 *
blue
);

449 
DECLSPEC
 
SDLCALL
 
SDL_GëGammaRamp
(
Uöt16
 *
ªd
, Uöt16 *
gªí
, Uöt16 *
blue
);

466 
DECLSPEC
 
SDLCALL
 
SDL_SëCﬁ‹s
(
SDL_SurÁ˚
 *
surÁ˚
,

467 
SDL_Cﬁ‹
 *
cﬁ‹s
, 
fú°cﬁ‹
, 
ncﬁ‹s
);

485 
DECLSPEC
 
SDLCALL
 
SDL_SëPÆëã
(
SDL_SurÁ˚
 *
surÁ˚
, 
Êags
,

486 
SDL_Cﬁ‹
 *
cﬁ‹s
, 
fú°cﬁ‹
,

487 
ncﬁ‹s
);

492 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_M≠RGB


493 (c⁄° 
SDL_PixñF‹m©
 * c⁄° 
f‹m©
,

494 c⁄° 
Uöt8
 
r
, c⁄° Uöt8 
g
, c⁄° Uöt8 
b
);

499 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_M≠RGBA


500 (c⁄° 
SDL_PixñF‹m©
 * c⁄° 
f‹m©
,

501 c⁄° 
Uöt8
 
r
, c⁄° Uöt8 
g
, c⁄° Uöt8 
b
, c⁄° Uöt8 
a
);

506 
DECLSPEC
 
SDLCALL
 
SDL_GëRGB
(
Uöt32
 
pixñ
,

507 c⁄° 
SDL_PixñF‹m©
 * c⁄° 
fmt
,

508 
Uöt8
 *
r
, Uöt8 *
g
, Uöt8 *
b
);

513 
DECLSPEC
 
SDLCALL
 
SDL_GëRGBA
(
Uöt32
 
pixñ
,

514 c⁄° 
SDL_PixñF‹m©
 * c⁄° 
fmt
,

515 
Uöt8
 *
r
, Uöt8 *
g
, Uöt8 *
b
, Uöt8 *
a
);

518 
	#SDL_AŒocSurÁ˚
 
SDL_Cª©eRGBSurÁ˚


	)

553 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_Cª©eRGBSurÁ˚


554 (
Uöt32
 
Êags
, 
width
, 
height
, 
dïth
,

555 
Uöt32
 
Rmask
, Uöt32 
Gmask
, Uöt32 
Bmask
, Uöt32 
Amask
);

557 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_Cª©eRGBSurÁ˚From
(*
pixñs
,

558 
width
, 
height
, 
dïth
, 
pôch
,

559 
Uöt32
 
Rmask
, Uöt32 
Gmask
, Uöt32 
Bmask
, Uöt32 
Amask
);

560 
DECLSPEC
 
SDLCALL
 
SDL_FªeSurÁ˚
(
SDL_SurÁ˚
 *
surÁ˚
);

580 
DECLSPEC
 
SDLCALL
 
SDL_LockSurÁ˚
(
SDL_SurÁ˚
 *
surÁ˚
);

581 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockSurÁ˚
(
SDL_SurÁ˚
 *
surÁ˚
);

589 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_LﬂdBMP_RW
(
SDL_RW›s
 *
§c
, 
‰ì§c
);

592 
	#SDL_LﬂdBMP
(
fûe
Ë
	`SDL_LﬂdBMP_RW
(
	`SDL_RWFromFûe
(fûe, "rb"), 1)

	)

599 
DECLSPEC
 
SDLCALL
 
SDL_SaveBMP_RW


600 (
SDL_SurÁ˚
 *
surÁ˚
, 
SDL_RW›s
 *
d°
, 
‰ìd°
);

603 
	#SDL_SaveBMP
(
surÁ˚
, 
fûe
) \

604 
	`SDL_SaveBMP_RW
(
surÁ˚
, 
	`SDL_RWFromFûe
(
fûe
, "wb"), 1)

	)

615 
DECLSPEC
 
SDLCALL
 
SDL_SëCﬁ‹Key


616 (
SDL_SurÁ˚
 *
surÁ˚
, 
Uöt32
 
Êag
, Uöt32 
key
);

633 
DECLSPEC
 
SDLCALL
 
SDL_SëAÕha
(
SDL_SurÁ˚
 *
surÁ˚
, 
Uöt32
 
Êag
, 
Uöt8
 
Æpha
);

647 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_SëClùRe˘
(
SDL_SurÁ˚
 *
surÁ˚
, c⁄° 
SDL_Re˘
 *
ª˘
);

654 
DECLSPEC
 
SDLCALL
 
SDL_GëClùRe˘
(
SDL_SurÁ˚
 *
surÁ˚
, 
SDL_Re˘
 *
ª˘
);

668 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_C⁄vîtSurÁ˚


669 (
SDL_SurÁ˚
 *
§c
, 
SDL_PixñF‹m©
 *
fmt
, 
Uöt32
 
Êags
);

743 
	#SDL_BlôSurÁ˚
 
SDL_UµîBlô


	)

748 
DECLSPEC
 
SDLCALL
 
SDL_UµîBlô


749 (
SDL_SurÁ˚
 *
§c
, 
SDL_Re˘
 *
§¸e˘
,

750 
SDL_SurÁ˚
 *
d°
, 
SDL_Re˘
 *
d°ª˘
);

754 
DECLSPEC
 
SDLCALL
 
SDL_LowîBlô


755 (
SDL_SurÁ˚
 *
§c
, 
SDL_Re˘
 *
§¸e˘
,

756 
SDL_SurÁ˚
 *
d°
, 
SDL_Re˘
 *
d°ª˘
);

767 
DECLSPEC
 
SDLCALL
 
SDL_FûlRe˘


768 (
SDL_SurÁ˚
 *
d°
, 
SDL_Re˘
 *
d°ª˘
, 
Uöt32
 
cﬁ‹
);

781 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_Di•œyF‹m©
(SDL_SurÁ˚ *
surÁ˚
);

795 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_Di•œyF‹m©AÕha
(SDL_SurÁ˚ *
surÁ˚
);

807 
DECLSPEC
 
SDL_Ovîœy
 * 
SDLCALL
 
SDL_Cª©eYUVOvîœy
(
width
, 
height
,

808 
Uöt32
 
f‹m©
, 
SDL_SurÁ˚
 *
di•œy
);

811 
DECLSPEC
 
SDLCALL
 
SDL_LockYUVOvîœy
(
SDL_Ovîœy
 *
ovîœy
);

812 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockYUVOvîœy
(
SDL_Ovîœy
 *
ovîœy
);

820 
DECLSPEC
 
SDLCALL
 
SDL_Di•œyYUVOvîœy
(
SDL_Ovîœy
 *
ovîœy
, 
SDL_Re˘
 *
d°ª˘
);

823 
DECLSPEC
 
SDLCALL
 
SDL_FªeYUVOvîœy
(
SDL_Ovîœy
 *
ovîœy
);

837 
DECLSPEC
 
SDLCALL
 
SDL_GL_LﬂdLibøry
(c⁄° *
∑th
);

842 
DECLSPEC
 * 
SDLCALL
 
SDL_GL_GëProcAddªss
(c⁄° * 
¥oc
);

847 
DECLSPEC
 
SDLCALL
 
SDL_GL_SëAâribuã
(
SDL_GL©å
 
©å
, 
vÆue
);

858 
DECLSPEC
 
SDLCALL
 
SDL_GL_GëAâribuã
(
SDL_GL©å
 
©å
, * 
vÆue
);

863 
DECLSPEC
 
SDLCALL
 
SDL_GL_Sw≠Buf„rs
();

870 
DECLSPEC
 
SDLCALL
 
SDL_GL_Upd©eRe˘s
(
numª˘s
, 
SDL_Re˘
* 
ª˘s
);

871 
DECLSPEC
 
SDLCALL
 
SDL_GL_Lock
();

872 
DECLSPEC
 
SDLCALL
 
SDL_GL_U∆ock
();

885 
DECLSPEC
 
SDLCALL
 
SDL_WM_SëC≠ti⁄
(c⁄° *
tôÀ
, c⁄° *
ic⁄
);

889 
DECLSPEC
 
SDLCALL
 
SDL_WM_GëC≠ti⁄
(**
tôÀ
, **
ic⁄
);

897 
DECLSPEC
 
SDLCALL
 
SDL_WM_SëIc⁄
(
SDL_SurÁ˚
 *
ic⁄
, 
Uöt8
 *
mask
);

904 
DECLSPEC
 
SDLCALL
 
SDL_WM_Ic⁄ifyWödow
();

921 
DECLSPEC
 
SDLCALL
 
SDL_WM_ToggÀFuŒS¸ìn
(
SDL_SurÁ˚
 *
surÁ˚
);

924 
	gSDL_GRAB_QUERY
 = -1,

925 
	gSDL_GRAB_OFF
 = 0,

926 
	gSDL_GRAB_ON
 = 1,

927 
	gSDL_GRAB_FULLSCREEN


928 } 
	tSDL_GøbMode
;

937 
DECLSPEC
 
SDL_GøbMode
 
SDLCALL
 
SDL_WM_GøbI≈ut
(SDL_GøbModê
mode
);

942 
DECLSPEC
 
SDLCALL
 
SDL_So·Såëch
(
SDL_SurÁ˚
 *
§c
, 
SDL_Re˘
 *
§¸e˘
,

943 
SDL_SurÁ˚
 *
d°
, 
SDL_Re˘
 *
d°ª˘
);

946 #ifde‡
__˝lu•lus


949 
	~"˛o£_code.h
"

	@SDL/include/begin_code.h

34 #ifde‡
_begö_code_h


35 #îr‹ 
Ne°ed
 
ö˛usi⁄
 
of
 
begö_code
.
h


37 
	#_begö_code_h


	)

43 #i‚de‡
DECLSPEC


44 #i‡
deföed
(
__BEOS__
Ë|| deföed(
__HAIKU__
)

45 #i‡
deföed
(
__GNUC__
)

46 
	#DECLSPEC


	)

48 
	#DECLSPEC
 
	`__de˛•ec
(
exp‹t
)

	)

50 #ñi‡
deföed
(
__WIN32__
)

51 #ifde‡
__BORLANDC__


52 #ifde‡
BUILD_SDL


53 
	#DECLSPEC


	)

55 
	#DECLSPEC
 
	`__de˛•ec
(
dŒimp‹t
)

	)

58 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

60 #ñi‡
deföed
(
__OS2__
)

61 #ifde‡
__WATCOMC__


62 #ifde‡
BUILD_SDL


63 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

65 
	#DECLSPEC


	)

67 #ñi‡
deföed
 (
__GNUC__
) && __GNUC__ < 4

68 #/* 
Added
 
suµ‹t
 
GCC
-
EMX
 <
v4
.
x
 */

69 #/* 
this
 
is
 
√eded
 
XFªe86
/
OS2
 
devñ›emít
 */

70 #/* 
F
. 
Ambachî
(
™ak‹
@
¢afu
.
de
) 05.2008 */

71 #ifde‡
BUILD_SDL


72 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

74 
	#DECLSPEC


	)

77 
	#DECLSPEC


	)

80 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 4

81 
	#DECLSPEC
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

83 
	#DECLSPEC


	)

92 #i‚de‡
SDLCALL


93 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__GNUC__
)

94 
	#SDLCALL
 
__cde˛


	)

95 #ñi‡
deföed
(
__OS2__
)

96 #i‡
deföed
 (
__GNUC__
) && __GNUC__ < 4

97 #/* 
Added
 
suµ‹t
 
GCC
-
EMX
 <
v4
.
x
 */

98 #/* 
this
 
is
 
√eded
 
XFªe86
/
OS2
 
devñ›emít
 */

99 #/* 
F
. 
Ambachî
(
™ak‹
@
¢afu
.
de
) 05.2008 */

100 
	#SDLCALL
 
_cde˛


	)

102 #/* 
On
 
Ÿhî
 
compûîs
 
⁄
 
OS
/2, 
we
 
u£
 
the
 
_Sy°em
 
ˇŒög
 
c⁄víti⁄
 */

103 #/* 
to
 
be
 
com∑tibÀ
 
wôh
 
evîy
 
compûî
 */

104 
	#SDLCALL
 
_Sy°em


	)

107 
	#SDLCALL


	)

111 #ifde‡
__SYMBIAN32__


112 #i‚de‡
EKA2


113 #unde‡
DECLSPEC


114 
	#DECLSPEC


	)

115 #ñi‡!
deföed
(
__WINS__
)

116 #unde‡
DECLSPEC


117 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

128 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MWERKS__
Ë|| deföed(
__BORLANDC__
)

129 #ifde‡
_MSC_VER


130 #¥agm®
w¨nög
(
dißbÀ
: 4103)

132 #ifde‡
__BORLANDC__


133 #¥agm®
n›ackw¨nög


135 #ifde‡
_M_X64


137 #¥agm®
∑ck
(
push
,8)

139 #¥agm®
∑ck
(
push
,4)

141 #ñi‡(
deföed
(
__MWERKS__
Ë&& deföed(
__MACOS__
))

142 #¥agm®
›ti⁄s
 
Æign
=
mac68k4byã


143 #¥agm®
íumßlwaysöt
 
⁄


150 #i‚de‡
SDL_INLINE_OKAY


151 #ifde‡
__GNUC__


152 
	#SDL_INLINE_OKAY


	)

155 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
) || \

156 
deföed
(
__DMC__
Ë|| deföed(
__SC__
) || \

157 
deföed
(
__WATCOMC__
Ë|| deföed(
__LCC__
) || \

158 
deföed
(
__DECC
Ë|| 
	$deföed
(
__EABI__
)

159 #i‚de‡
__ölöe__


160 
	#__ölöe__
 
__ölöe


	)

162 
	#SDL_INLINE_OKAY


	)

164 #i‡!
	`deföed
(
__MRC__
Ë&& !deföed(
_SGI_SOURCE
)

165 #i‚de‡
__ölöe__


166 
	#__ölöe__
 
ölöe


	)

168 
	#SDL_INLINE_OKAY


	)

180 #i‚de‡
SDL_INLINE_OKAY


181 
	#__ölöe__


	)

188 #i‡!
	`deföed
(
__MACH__
)

189 #i‚de‡
NULL


190 #ifde‡
__˝lu•lus


191 
	#NULL
 0

	)

193 
	#NULL
 ((*)0)

	)

	@SDL/include/close_code.h

29 #unde‡
_begö_code_h


35 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MWERKS__
Ë|| deföed(
__WATCOMC__
Ë|| deföed(
__BORLANDC__
)

36 #ifde‡
__BORLANDC__


37 #¥agm®
n›ackw¨nög


39 #i‡(
deföed
(
__MWERKS__
Ë&& deföed(
__MACOS__
))

40 #¥agm®
›ti⁄s
 
Æign
=
ª£t


41 #¥agm®
íumßlwaysöt
 
ª£t


43 #¥agm®
∑ck
(
p›
)

	@glm/glm/common.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/func_comm⁄.hµ
"

	@glm/glm/detail/_features.hpp

4 #¥agm®
⁄˚


252 #if(
GLM_COMPILER
 & 
GLM_COMPILER_GCC
)

254 #if(
GLM_COMPILER
 >
GLM_COMPILER_GCC43
)

255 
	#GLM_CXX11_STATIC_ASSERT


	)

258 #ñif(
GLM_COMPILER
 & 
GLM_COMPILER_CLANG
)

259 #if(
__has_„©uª
(
cxx_ex˚±i⁄s
))

260 
	#GLM_CXX98_EXCEPTIONS


	)

263 #if(
__has_„©uª
(
cxx_πti
))

264 
	#GLM_CXX98_RTTI


	)

267 #if(
__has_„©uª
(
cxx_ac˚ss_c⁄åﬁ_sfö´
))

268 
	#GLM_CXX11_ACCESS_CONTROL_SFINAE


	)

271 #if(
__has_„©uª
(
cxx_Æüs_ãm∂©es
))

272 
	#GLM_CXX11_ALIAS_TEMPLATE


	)

275 #if(
__has_„©uª
(
cxx_Æig«s
))

276 
	#GLM_CXX11_ALIGNAS


	)

279 #if(
__has_„©uª
(
cxx_©åibuãs
))

280 
	#GLM_CXX11_ATTRIBUTES


	)

283 #if(
__has_„©uª
(
cxx_c⁄°ex¥
))

284 
	#GLM_CXX11_CONSTEXPR


	)

287 #if(
__has_„©uª
(
cxx_de˛ty≥
))

288 
	#GLM_CXX11_DECLTYPE


	)

291 #if(
__has_„©uª
(
cxx_deÁu…_fun˘i⁄_ãm∂©e_¨gs
))

292 
	#GLM_CXX11_DEFAULT_FUNCTION_TEMPLATE_ARGS


	)

295 #if(
__has_„©uª
(
cxx_deÁu…ed_fun˘i⁄s
))

296 
	#GLM_CXX11_DEFAULTED_FUNCTIONS


	)

299 #if(
__has_„©uª
(
cxx_dñeg©ög_c⁄°ru˘‹s
))

300 
	#GLM_CXX11_DELEGATING_CONSTRUCTORS


	)

303 #if(
__has_„©uª
(
cxx_dñëed_fun˘i⁄s
))

304 
	#GLM_CXX11_DELETED_FUNCTIONS


	)

307 #if(
__has_„©uª
(
cxx_ex∂icô_c⁄vîsi⁄s
))

308 
	#GLM_CXX11_EXPLICIT_CONVERSIONS


	)

311 #if(
__has_„©uª
(
cxx_gíîÆized_öôülizîs
))

312 
	#GLM_CXX11_GENERALIZED_INITIALIZERS


	)

315 #if(
__has_„©uª
(
cxx_im∂icô_moves
))

316 
	#GLM_CXX11_IMPLICIT_MOVES


	)

319 #if(
__has_„©uª
(
cxx_öhîôög_c⁄°ru˘‹s
))

320 
	#GLM_CXX11_INHERITING_CONSTRUCTORS


	)

323 #if(
__has_„©uª
(
cxx_ölöe_«me•a˚s
))

324 
	#GLM_CXX11_INLINE_NAMESPACES


	)

327 #if(
__has_„©uª
(
cxx_œmbdas
))

328 
	#GLM_CXX11_LAMBDAS


	)

331 #if(
__has_„©uª
(
cxx_loˇl_ty≥_ãm∂©e_¨gs
))

332 
	#GLM_CXX11_LOCAL_TYPE_TEMPLATE_ARGS


	)

335 #if(
__has_„©uª
(
cxx_n€x˚±
))

336 
	#GLM_CXX11_NOEXCEPT


	)

339 #if(
__has_„©uª
(
cxx_n⁄°©ic_membî_öô
))

340 
	#GLM_CXX11_NONSTATIC_MEMBER_INIT


	)

343 #if(
__has_„©uª
(
cxx_nuŒ±r
))

344 
	#GLM_CXX11_NULLPTR


	)

347 #if(
__has_„©uª
(
cxx_ovîride_c⁄åﬁ
))

348 
	#GLM_CXX11_OVERRIDE_CONTROL


	)

351 #if(
__has_„©uª
(
cxx_ª„ªn˚_quÆifõd_fun˘i⁄s
))

352 
	#GLM_CXX11_REFERENCE_QUALIFIED_FUNCTIONS


	)

355 #if(
__has_„©uª
(
cxx_ønge_f‹
))

356 
	#GLM_CXX11_RANGE_FOR


	)

359 #if(
__has_„©uª
(
cxx_øw_°rög_lôîÆs
))

360 
	#GLM_CXX11_RAW_STRING_LITERALS


	)

363 #if(
__has_„©uª
(
cxx_rvÆue_ª„ªn˚s
))

364 
	#GLM_CXX11_RVALUE_REFERENCES


	)

367 #if(
__has_„©uª
(
cxx_°©ic_as£π
))

368 
	#GLM_CXX11_STATIC_ASSERT


	)

371 #if(
__has_„©uª
(
cxx_auto_ty≥
))

372 
	#GLM_CXX11_AUTO_TYPE


	)

375 #if(
__has_„©uª
(
cxx_°r⁄g_íums
))

376 
	#GLM_CXX11_STRONG_ENUMS


	)

379 #if(
__has_„©uª
(
cxx_åaûög_ªtu∫
))

380 
	#GLM_CXX11_TRAILING_RETURN


	)

383 #if(
__has_„©uª
(
cxx_unicode_lôîÆs
))

384 
	#GLM_CXX11_UNICODE_LITERALS


	)

387 #if(
__has_„©uª
(
cxx_uƒe°ri˘ed_uni⁄s
))

388 
	#GLM_CXX11_UNRESTRICTED_UNIONS


	)

391 #if(
__has_„©uª
(
cxx_u£r_lôîÆs
))

392 
	#GLM_CXX11_USER_LITERALS


	)

395 #if(
__has_„©uª
(
cxx_v¨üdic_ãm∂©es
))

396 
	#GLM_CXX11_VARIADIC_TEMPLATES


	)

	@glm/glm/detail/_fixes.hpp

4 
	~<cm©h
>

7 #ifde‡
max


8 #unde‡
max


12 #ifde‡
mö


13 #unde‡
mö


17 #ifde‡
i¢™


18 #unde‡
i¢™


22 #ifde‡
isöf


23 #unde‡
isöf


27 #ifde‡
log2


28 #unde‡
log2


	@glm/glm/detail/_noise.hpp

4 #¥agm®
⁄˚


6 
	~"../vec2.hµ
"

7 
	~"../vec3.hµ
"

8 
	~"../vec4.hµ
"

9 
	~"../comm⁄.hµ
"

11 
«me•a˚
 
	gglm
{

12 
«me•a˚
 
	gdëaû


14 
	gãm∂©e
 <
ty≥«me
 
	gT
>

15 
GLM_FUNC_QUALIFIER
 
T
 
mod289
(T c⁄° & 
x
)

17  
	gx
 - 
Êo‹
(
x
 * 
°©ic_ˇ°
<
T
>(1.0Ë/ sètic_ˇ°<T>(289.0)Ë* 
	g°©ic_ˇ°
<
	gT
>(289.0);

20 
	gãm∂©e
 <
ty≥«me
 
	gT
>

21 
GLM_FUNC_QUALIFIER
 
T
 
≥rmuã
(T c⁄° & 
x
)

23  
mod289
(((
x
 * 
°©ic_ˇ°
<
T
>(34)) + static_cast<T>(1)) * x);

26 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

27 
GLM_FUNC_QUALIFIER
 
	gtvec2
<
	gT
, 
	gP
> 
≥rmuã
(
tvec2
<
T
, 
P
> c⁄° & 
x
)

29  
mod289
(((
x
 * 
°©ic_ˇ°
<
T
>(34)) + static_cast<T>(1)) * x);

32 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

33 
GLM_FUNC_QUALIFIER
 
	gtvec3
<
	gT
, 
	gP
> 
≥rmuã
(
tvec3
<
T
, 
P
> c⁄° & 
x
)

35  
mod289
(((
x
 * 
°©ic_ˇ°
<
T
>(34)) + static_cast<T>(1)) * x);

38 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

39 
GLM_FUNC_QUALIFIER
 
	gtvec4
<
	gT
, 
	gP
> 
≥rmuã
(
tvec4
<
T
, 
P
> c⁄° & 
x
)

41  
mod289
(((
x
 * 
°©ic_ˇ°
<
T
>(34)) + static_cast<T>(1)) * x);

50 
	gãm∂©e
 <
ty≥«me
 
	gT
>

51 
GLM_FUNC_QUALIFIER
 
T
 
èyl‹InvSqπ
(T c⁄° & 
r
)

53  
T
(1.79284291400159Ë- T(0.85373472095314Ë* 
	gr
;

56 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

57 
GLM_FUNC_QUALIFIER
 
	gtvec2
<
	gT
, 
	gP
> 
èyl‹InvSqπ
(
tvec2
<
T
, 
P
> c⁄° & 
r
)

59  
T
(1.79284291400159Ë- T(0.85373472095314Ë* 
	gr
;

62 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

63 
GLM_FUNC_QUALIFIER
 
	gtvec3
<
	gT
, 
	gP
> 
èyl‹InvSqπ
(
tvec3
<
T
, 
P
> c⁄° & 
r
)

65  
T
(1.79284291400159Ë- T(0.85373472095314Ë* 
	gr
;

68 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

69 
GLM_FUNC_QUALIFIER
 
	gtvec4
<
	gT
, 
	gP
> 
èyl‹InvSqπ
(
tvec4
<
T
, 
P
> c⁄° & 
r
)

71  
T
(1.79284291400159Ë- T(0.85373472095314Ë* 
	gr
;

81 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

82 
GLM_FUNC_QUALIFIER
 
	gtvec2
<
	gT
, 
	gP
> 
Áde
(
tvec2
<
T
, 
P
> c⁄° & 
t
)

84  (
t
 *Å * 
	gt
Ë* (à* (à* 
T
(6) - T(15)) + T(10));

87 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

88 
GLM_FUNC_QUALIFIER
 
	gtvec3
<
	gT
, 
	gP
> 
Áde
(
tvec3
<
T
, 
P
> c⁄° & 
t
)

90  (
t
 *Å * 
	gt
Ë* (à* (à* 
T
(6) - T(15)) + T(10));

93 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

94 
GLM_FUNC_QUALIFIER
 
	gtvec4
<
	gT
, 
	gP
> 
Áde
(
tvec4
<
T
, 
P
> c⁄° & 
t
)

96  (
t
 *Å * 
	gt
Ë* (à* (à* 
T
(6) - T(15)) + T(10));

	@glm/glm/detail/_swizzle.hpp

4 #¥agm®
⁄˚


6 
«me•a˚
 
	gglm
{

7 
«me•a˚
 
	gdëaû


10 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gN
>

11 
	s_swizzÀ_ba£0


13 
	g¥Ÿe˘ed
:

14 
GLM_FUNC_QUALIFIER
 
T
& 
ñem
(
size_t
 
i
){  (
ªöãΩªt_ˇ°
<T*>(
_buf„r
))[i]; }

15 
GLM_FUNC_QUALIFIER
 
T
 c⁄°& 
ñem
(
size_t
 
i
Ëc⁄°{  (
	gªöãΩªt_ˇ°
<c⁄° 
	gT
*>(
	g_buf„r
))[i]; }

20 
	g_buf„r
[1];

23 
	gãm∂©e
 <
	gN
, 
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
	gE0
, 
	gE1
, 
	gE2
, 
	gE3
, 
boﬁ
 
	gAlig√d
>

24 
	g_swizzÀ_ba£1
 : 
public
 
_swizzÀ_ba£0
<
T
, 
	gN
>

28 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
	gE0
, 
	gE1
, 
boﬁ
 
	gAlig√d
>

29 
	g_swizzÀ_ba£1
<2, 
	gT
, 
	gP
, 
	gvecTy≥
, 
	gE0
,
	gE1
,-1,-2, 
	gAlig√d
> : 
public
 
_swizzÀ_ba£0
<
T
, 2>

31 
GLM_FUNC_QUALIFIER
 
	gvecTy≥
<
	gT
, 
	gP
> 
›î©‹
 ()(Ëc⁄° {  vecTy≥<T, P>(
	gthis
->
ñem
(
E0
),Åhis->ñem(
E1
)); }

34 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
	gE0
, 
	gE1
, 
	gE2
, 
boﬁ
 
	gAlig√d
>

35 
	g_swizzÀ_ba£1
<3, 
	gT
, 
	gP
, 
	gvecTy≥
, 
	gE0
,
	gE1
,
	gE2
,-1, 
	gAlig√d
> : 
public
 
_swizzÀ_ba£0
<
T
, 3>

37 
GLM_FUNC_QUALIFIER
 
	gvecTy≥
<
	gT
, 
	gP
> 
›î©‹
 ()(Ëc⁄° {  vecTy≥<T, P>(
	gthis
->
ñem
(
E0
),Åhis->ñem(
E1
),Åhis->ñem(
E2
)); }

40 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
	gE0
, 
	gE1
, 
	gE2
, 
	gE3
, 
boﬁ
 
	gAlig√d
>

41 
	g_swizzÀ_ba£1
<4, 
	gT
, 
	gP
, 
	gvecTy≥
, 
	gE0
,
	gE1
,
	gE2
,
	gE3
, 
	gAlig√d
> : 
public
 
_swizzÀ_ba£0
<
T
, 4>

43 
GLM_FUNC_QUALIFIER
 
	gvecTy≥
<
	gT
, 
	gP
> 
›î©‹
 ()(Ëc⁄° {  vecTy≥<T, P>(
	gthis
->
ñem
(
E0
),Åhis->ñem(
E1
),Åhis->ñem(
E2
),Åhis->ñem(
E3
)); }

58 
	gãm∂©e
 <
	gN
, 
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
	gE0
, 
	gE1
, 
	gE2
, 
	gE3
, 
	gDUPLICATE_ELEMENTS
>

59 
	g_swizzÀ_ba£2
 : 
public
 
_swizzÀ_ba£1
<
N
, 
	gT
, 
	gP
, 
	gvecTy≥
, 
	gE0
,
	gE1
,
	gE2
,
	gE3
, 
	gdëaû
::
is_Æig√d
<
P
>::
vÆue
>

61 
GLM_FUNC_QUALIFIER
 
_swizzÀ_ba£2
& 
›î©‹
(c⁄° 
T
& 
t
)

63 
i
 = 0; 
	gi
 < 
	gN
; ++i)

64 (*
	gthis
)[
i
] = 
t
;

65  *
	gthis
;

68 
GLM_FUNC_QUALIFIER
 
	g_swizzÀ_ba£2
& 
	g›î©‹
(
vecTy≥
<
T
, 
	gP
> c⁄°& 
	gth©
)

70 
	s›
 {

71 
GLM_FUNC_QUALIFIER
 
›î©‹
(Ë(
	gT
& 
	ge
, T& 
	gt
Ë{É = 
t
; }

73 
_≠∂y_›
(
th©
, 
›
());

74  *
	gthis
;

77 
GLM_FUNC_QUALIFIER
 
	g›î©‹
 -(
vecTy≥
<
T
, 
	gP
> c⁄°& 
	gth©
)

79 
	s›
 {

80 
GLM_FUNC_QUALIFIER
 
›î©‹
(Ë(
	gT
& 
	ge
, T& 
	gt
Ë{É -
t
; }

82 
_≠∂y_›
(
th©
, 
›
());

85 
GLM_FUNC_QUALIFIER
 
	g›î©‹
 +(
vecTy≥
<
T
, 
	gP
> c⁄°& 
	gth©
)

87 
	s›
 {

88 
GLM_FUNC_QUALIFIER
 
›î©‹
(Ë(
	gT
& 
	ge
, T& 
	gt
Ë{É +
t
; }

90 
_≠∂y_›
(
th©
, 
›
());

93 
GLM_FUNC_QUALIFIER
 
	g›î©‹
 *(
vecTy≥
<
T
, 
	gP
> c⁄°& 
	gth©
)

95 
	s›
 {

96 
GLM_FUNC_QUALIFIER
 
›î©‹
(Ë(
	gT
& 
	ge
, T& 
	gt
Ë{É *
t
; }

98 
_≠∂y_›
(
th©
, 
›
());

101 
GLM_FUNC_QUALIFIER
 
	g›î©‹
 /(
vecTy≥
<
T
, 
	gP
> c⁄°& 
	gth©
)

103 
	s›
 {

104 
GLM_FUNC_QUALIFIER
 
›î©‹
(Ë(
	gT
& 
	ge
, T& 
	gt
Ë{É /
t
; }

106 
_≠∂y_›
(
th©
, 
›
());

109 
GLM_FUNC_QUALIFIER
 
	gT
& 
	g›î©‹
[](
size_t
 
	gi
)

111 c⁄° 
	goff£t_d°
[4] = { 
E0
, 
E1
, 
E2
, 
E3
 };

112  
	gthis
->
ñem
(
off£t_d°
[
i
]);

114 
GLM_FUNC_QUALIFIER
 
T
 
	g›î©‹
[](
size_t
 
	gi
) const

116 c⁄° 
	goff£t_d°
[4] = { 
E0
, 
E1
, 
E2
, 
E3
 };

117  
	gthis
->
ñem
(
off£t_d°
[
i
]);

120 
	g¥Ÿe˘ed
:

121 
ãm∂©e
 <
ty≥«me
 
U
>

122 
GLM_FUNC_QUALIFIER
 
_≠∂y_›
(
vecTy≥
<
T
, 
P
> c⁄°& 
th©
, 
U
 
›
)

127 
T
 
	gt
[
N
];

128 
	gi
 = 0; i < 
	gN
; ++i)

129 
	gt
[
i
] = 
th©
[i];

130 
	gi
 = 0; i < 
	gN
; ++i)

131 
›
–(*
this
)[
i
], 
t
[i] );

136 
	gãm∂©e
 <
	gN
, 
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
	gE0
, 
	gE1
, 
	gE2
, 
	gE3
>

137 
	g_swizzÀ_ba£2
<
	gN
, 
	gT
, 
	gP
, 
	gvecTy≥
, 
	gE0
,
	gE1
,
	gE2
,
	gE3
, 1> : 
public
 
_swizzÀ_ba£1
<
N
, T, P, vecTy≥, E0,E1,E2,E3, 
	gdëaû
::
is_Æig√d
<
P
>::
vÆue
>

139 
	sStub
 {};

141 
GLM_FUNC_QUALIFIER
 
	g_swizzÀ_ba£2
& 
	g›î©‹
(
Stub
 c⁄° &Ë{  *
this
; }

143 
GLM_FUNC_QUALIFIER
 
T
 
	g›î©‹
[] (
size_t
 
	gi
) const

145 c⁄° 
	goff£t_d°
[4] = { 
E0
, 
E1
, 
E2
, 
E3
 };

146  
	gthis
->
ñem
(
off£t_d°
[
i
]);

150 
	gãm∂©e
 <
	gN
, 
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
	gE0
, 
	gE1
, 
	gE2
, 
	gE3
>

151 
	g_swizzÀ
 : 
public
 
_swizzÀ_ba£2
<
N
, 
	gT
, 
	gP
, 
	gvecTy≥
, 
	gE0
, 
	gE1
, 
	gE2
, 
	gE3
, (E0 =
E1
 || 
E0
 =
E2
 || E0 =
E3
 || E1 == E2 || E1 == E3 || E2 == E3)>

153 
_swizzÀ_ba£2
<
	tN
, 
	tT
, 
	tP
, 
	tvecTy≥
, 
	tE0
, 
	tE1
, 
	tE2
, 
	tE3
, (E0 =E1 || E0 =E2 || E0 =E3 || E1 =E2 || E1 =E3 || E2 =E3)> 
	tba£_ty≥
;

155 
usög
 
	gba£_ty≥
::
›î©‹
=;

157 
GLM_FUNC_QUALIFIER
 
›î©‹
 
	gvecTy≥
<
	gT
, 
	gP
> (Ëc⁄° {  (*
	gthis
)(); }

163 
	#_GLM_SWIZZLE_TEMPLATE1
 
ãm∂©e
 <
N
, 
ty≥«me
 
T
, 
¥ecisi⁄
 
P
,Åem∂©ê<ty≥«me,Öªcisi⁄> 
˛ass
 
vecTy≥
, 
E0
, 
E1
, 
E2
, 
E3
>

	)

164 
	#_GLM_SWIZZLE_TEMPLATE2
 
ãm∂©e
 <
N
, 
ty≥«me
 
T
, 
¥ecisi⁄
 
P
,Åem∂©ê<ty≥«me,Öªcisi⁄> 
˛ass
 
vecTy≥
, 
E0
, 
E1
, 
E2
, 
E3
, 
F0
, 
F1
, 
F2
, 
F3
>

	)

165 
	#_GLM_SWIZZLE_TYPE1
 
_swizzÀ
<
N
, 
T
, 
P
, 
vecTy≥
, 
E0
, 
E1
, 
E2
, 
E3
>

	)

166 
	#_GLM_SWIZZLE_TYPE2
 
_swizzÀ
<
N
, 
T
, 
P
, 
vecTy≥
, 
F0
, 
F1
, 
F2
, 
F3
>

	)

171 
	#_GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION
(
OPERAND
) \

172 
_GLM_SWIZZLE_TEMPLATE2
 \

173 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
P
> 
›î©‹
 
	`OPERAND
 ( c⁄° 
_GLM_SWIZZLE_TYPE1
& 
a
, c⁄° 
_GLM_SWIZZLE_TYPE2
& 
b
) \

175  
	`a
(Ë
OPERAND
 
	`b
(); \

177 
_GLM_SWIZZLE_TEMPLATE1
 \

178 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
P
> 
›î©‹
 
	`OPERAND
 ( c⁄° 
_GLM_SWIZZLE_TYPE1
& 
a
, c⁄° vecTy≥<T, P>& 
b
) \

180  
	`a
(Ë
OPERAND
 
b
; \

182 
_GLM_SWIZZLE_TEMPLATE1
 \

183 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
P
> 
›î©‹
 
	`OPERAND
 ( c⁄° vecTy≥<T, P>& 
a
, c⁄° 
_GLM_SWIZZLE_TYPE1
& 
b
) \

185  
a
 
OPERAND
 
	`b
(); \

186 }

	)

191 
	#_GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION
(
OPERAND
) \

192 
_GLM_SWIZZLE_TEMPLATE1
 \

193 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
P
> 
›î©‹
 
	`OPERAND
 ( c⁄° 
_GLM_SWIZZLE_TYPE1
& 
a
, c⁄° T& 
b
) \

195  
	`a
(Ë
OPERAND
 
b
; \

197 
_GLM_SWIZZLE_TEMPLATE1
 \

198 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
P
> 
›î©‹
 
	`OPERAND
 ( c⁄° T& 
a
, c⁄° 
_GLM_SWIZZLE_TYPE1
& 
b
) \

200  
a
 
OPERAND
 
	`b
(); \

201 }

	)

206 
	#_GLM_SWIZZLE_FUNCTION_1_ARGS
(
RETURN_TYPE
,
FUNCTION
) \

207 
_GLM_SWIZZLE_TEMPLATE1
 \

208 
GLM_FUNC_QUALIFIER
 
ty≥«me
 
_GLM_SWIZZLE_TYPE1
::
RETURN_TYPE
 
	`FUNCTION
(c⁄° _GLM_SWIZZLE_TYPE1& 
a
) \

210  
	`FUNCTION
(
	`a
()); \

211 }

	)

216 
	#_GLM_SWIZZLE_FUNCTION_2_ARGS
(
RETURN_TYPE
,
FUNCTION
) \

217 
_GLM_SWIZZLE_TEMPLATE2
 \

218 
GLM_FUNC_QUALIFIER
 
ty≥«me
 
_GLM_SWIZZLE_TYPE1
::
RETURN_TYPE
 
	`FUNCTION
(c⁄° _GLM_SWIZZLE_TYPE1& 
a
, c⁄° 
_GLM_SWIZZLE_TYPE2
& 
b
) \

220  
	`FUNCTION
(
	`a
(), 
	`b
()); \

222 
_GLM_SWIZZLE_TEMPLATE1
 \

223 
GLM_FUNC_QUALIFIER
 
ty≥«me
 
_GLM_SWIZZLE_TYPE1
::
RETURN_TYPE
 
	`FUNCTION
(c⁄° _GLM_SWIZZLE_TYPE1& 
a
, c⁄° _GLM_SWIZZLE_TYPE1& 
b
) \

225  
	`FUNCTION
(
	`a
(), 
	`b
()); \

227 
_GLM_SWIZZLE_TEMPLATE1
 \

228 
GLM_FUNC_QUALIFIER
 
ty≥«me
 
_GLM_SWIZZLE_TYPE1
::
RETURN_TYPE
 
	`FUNCTION
(c⁄° _GLM_SWIZZLE_TYPE1& 
a
, c⁄°Åy≥«mê
V
& 
b
) \

230  
	`FUNCTION
(
	`a
(), 
b
); \

232 
_GLM_SWIZZLE_TEMPLATE1
 \

233 
GLM_FUNC_QUALIFIER
 
ty≥«me
 
_GLM_SWIZZLE_TYPE1
::
RETURN_TYPE
 
	`FUNCTION
(c⁄° 
V
& 
a
, c⁄° _GLM_SWIZZLE_TYPE1& 
b
) \

235  
	`FUNCTION
(
a
, 
	`b
()); \

236 }

	)

241 
	#_GLM_SWIZZLE_FUNCTION_2_ARGS_SCALAR
(
RETURN_TYPE
,
FUNCTION
) \

242 
_GLM_SWIZZLE_TEMPLATE2
 \

243 
GLM_FUNC_QUALIFIER
 
ty≥«me
 
_GLM_SWIZZLE_TYPE1
::
RETURN_TYPE
 
	`FUNCTION
(c⁄° _GLM_SWIZZLE_TYPE1& 
a
, c⁄° 
_GLM_SWIZZLE_TYPE2
& 
b
, c⁄° 
T
& 
c
) \

245  
	`FUNCTION
(
	`a
(), 
	`b
(), 
c
); \

247 
_GLM_SWIZZLE_TEMPLATE1
 \

248 
GLM_FUNC_QUALIFIER
 
ty≥«me
 
_GLM_SWIZZLE_TYPE1
::
RETURN_TYPE
 
	`FUNCTION
(c⁄° _GLM_SWIZZLE_TYPE1& 
a
, c⁄° _GLM_SWIZZLE_TYPE1& 
b
, c⁄° 
T
& 
c
) \

250  
	`FUNCTION
(
	`a
(), 
	`b
(), 
c
); \

252 
_GLM_SWIZZLE_TEMPLATE1
 \

253 
GLM_FUNC_QUALIFIER
 
ty≥«me
 
_GLM_SWIZZLE_TYPE1
::
RETURN_TYPE
 
	`FUNCTION
(c⁄° _GLM_SWIZZLE_TYPE1& 
a
, c⁄°Åy≥«mê
S0
::
vec_ty≥
& 
b
, c⁄° 
T
& 
c
)\

255  
	`FUNCTION
(
	`a
(), 
b
, 
c
); \

257 
_GLM_SWIZZLE_TEMPLATE1
 \

258 
GLM_FUNC_QUALIFIER
 
ty≥«me
 
_GLM_SWIZZLE_TYPE1
::
RETURN_TYPE
 
	`FUNCTION
(c⁄°Åy≥«mê
V
& 
a
, c⁄° _GLM_SWIZZLE_TYPE1& 
b
, c⁄° 
T
& 
c
) \

260  
	`FUNCTION
(
a
, 
	`b
(), 
c
); \

261 }

	)

266 
«me•a˚
 
	gglm


268 
«me•a˚
 
	gdëaû


270 
_GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION
(-)

271 
_GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION
(*)

272 
_GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION
(+)

273 
_GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION
(-)

274 
_GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION
(*)

275 
_GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION
(/)

300 
	#_GLM_SWIZZLE2_2_MEMBERS
(
T
, 
P
, 
V
, 
E0
,
E1
) \

301 °ru˘ { 
dëaû
::
_swizzÀ
<2, 
T
, 
P
, 
V
, 0,0,-1,-2> 
E0
 ## E0; }; \

302 °ru˘ { 
dëaû
::
_swizzÀ
<2, 
T
, 
P
, 
V
, 0,1,-1,-2> 
E0
 ## 
E1
; }; \

303 °ru˘ { 
dëaû
::
_swizzÀ
<2, 
T
, 
P
, 
V
, 1,0,-1,-2> 
E1
 ## 
E0
; }; \

304 °ru˘ { 
dëaû
::
_swizzÀ
<2, 
T
, 
P
, 
V
, 1,1,-1,-2> 
E1
 ## E1; };

	)

306 
	#_GLM_SWIZZLE2_3_MEMBERS
(
T
, 
P
, 
V
, 
E0
,
E1
) \

307 °ru˘ { 
dëaû
::
_swizzÀ
<3,
T
, 
P
, 
V
, 0,0,0,-1> 
E0
 ## E0 ## E0; }; \

308 °ru˘ { 
dëaû
::
_swizzÀ
<3,
T
, 
P
, 
V
, 0,0,1,-1> 
E0
 ## E0 ## 
E1
; }; \

309 °ru˘ { 
dëaû
::
_swizzÀ
<3,
T
, 
P
, 
V
, 0,1,0,-1> 
E0
 ## 
E1
 ## E0; }; \

310 °ru˘ { 
dëaû
::
_swizzÀ
<3,
T
, 
P
, 
V
, 0,1,1,-1> 
E0
 ## 
E1
 ## E1; }; \

311 °ru˘ { 
dëaû
::
_swizzÀ
<3,
T
, 
P
, 
V
, 1,0,0,-1> 
E1
 ## 
E0
 ## E0; }; \

312 °ru˘ { 
dëaû
::
_swizzÀ
<3,
T
, 
P
, 
V
, 1,0,1,-1> 
E1
 ## 
E0
 ## E1; }; \

313 °ru˘ { 
dëaû
::
_swizzÀ
<3,
T
, 
P
, 
V
, 1,1,0,-1> 
E1
 ## E1 ## 
E0
; }; \

314 °ru˘ { 
dëaû
::
_swizzÀ
<3,
T
, 
P
, 
V
, 1,1,1,-1> 
E1
 ## E1 ## E1; };

	)

316 
	#_GLM_SWIZZLE2_4_MEMBERS
(
T
, 
P
, 
V
, 
E0
,
E1
) \

317 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,0,0> 
E0
 ## E0 ## E0 ## E0; }; \

318 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,0,1> 
E0
 ## E0 ## E0 ## 
E1
; }; \

319 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,1,0> 
E0
 ## E0 ## 
E1
 ## E0; }; \

320 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,1,1> 
E0
 ## E0 ## 
E1
 ## E1; }; \

321 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,0,0> 
E0
 ## 
E1
 ## E0 ## E0; }; \

322 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,0,1> 
E0
 ## 
E1
 ## E0 ## E1; }; \

323 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,1,0> 
E0
 ## 
E1
 ## E1 ## E0; }; \

324 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,1,1> 
E0
 ## 
E1
 ## E1 ## E1; }; \

325 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,0,0> 
E1
 ## 
E0
 ## E0 ## E0; }; \

326 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,0,1> 
E1
 ## 
E0
 ## E0 ## E1; }; \

327 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,1,0> 
E1
 ## 
E0
 ## E1 ## E0; }; \

328 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,1,1> 
E1
 ## 
E0
 ## E1 ## E1; }; \

329 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,0,0> 
E1
 ## E1 ## 
E0
 ## E0; }; \

330 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,0,1> 
E1
 ## E1 ## 
E0
 ## E1; }; \

331 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,1,0> 
E1
 ## E1 ## E1 ## 
E0
; }; \

332 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,1,1> 
E1
 ## E1 ## E1 ## E1; };

	)

334 
	#_GLM_SWIZZLE3_2_MEMBERS
(
T
, 
P
, 
V
, 
E0
,
E1
,
E2
) \

335 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 0,0,-1,-2> 
E0
 ## E0; }; \

336 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 0,1,-1,-2> 
E0
 ## 
E1
; }; \

337 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 0,2,-1,-2> 
E0
 ## 
E2
; }; \

338 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 1,0,-1,-2> 
E1
 ## 
E0
; }; \

339 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 1,1,-1,-2> 
E1
 ## E1; }; \

340 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 1,2,-1,-2> 
E1
 ## 
E2
; }; \

341 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 2,0,-1,-2> 
E2
 ## 
E0
; }; \

342 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 2,1,-1,-2> 
E2
 ## 
E1
; }; \

343 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 2,2,-1,-2> 
E2
 ## E2; };

	)

345 
	#_GLM_SWIZZLE3_3_MEMBERS
(
T
, 
P
, 
V
 ,
E0
,
E1
,
E2
) \

346 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,0,0,-1> 
E0
 ## E0 ## E0; }; \

347 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,0,1,-1> 
E0
 ## E0 ## 
E1
; }; \

348 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,0,2,-1> 
E0
 ## E0 ## 
E2
; }; \

349 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,1,0,-1> 
E0
 ## 
E1
 ## E0; }; \

350 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,1,1,-1> 
E0
 ## 
E1
 ## E1; }; \

351 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,1,2,-1> 
E0
 ## 
E1
 ## 
E2
; }; \

352 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,2,0,-1> 
E0
 ## 
E2
 ## E0; }; \

353 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,2,1,-1> 
E0
 ## 
E2
 ## 
E1
; }; \

354 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,2,2,-1> 
E0
 ## 
E2
 ## E2; }; \

355 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,0,0,-1> 
E1
 ## 
E0
 ## E0; }; \

356 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,0,1,-1> 
E1
 ## 
E0
 ## E1; }; \

357 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,0,2,-1> 
E1
 ## 
E0
 ## 
E2
; }; \

358 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,1,0,-1> 
E1
 ## E1 ## 
E0
; }; \

359 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,1,1,-1> 
E1
 ## E1 ## E1; }; \

360 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,1,2,-1> 
E1
 ## E1 ## 
E2
; }; \

361 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,2,0,-1> 
E1
 ## 
E2
 ## 
E0
; }; \

362 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,2,1,-1> 
E1
 ## 
E2
 ## E1; }; \

363 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,2,2,-1> 
E1
 ## 
E2
 ## E2; }; \

364 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,0,0,-1> 
E2
 ## 
E0
 ## E0; }; \

365 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,0,1,-1> 
E2
 ## 
E0
 ## 
E1
; }; \

366 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,0,2,-1> 
E2
 ## 
E0
 ## E2; }; \

367 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,1,0,-1> 
E2
 ## 
E1
 ## 
E0
; }; \

368 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,1,1,-1> 
E2
 ## 
E1
 ## E1; }; \

369 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,1,2,-1> 
E2
 ## 
E1
 ## E2; }; \

370 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,2,0,-1> 
E2
 ## E2 ## 
E0
; }; \

371 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,2,1,-1> 
E2
 ## E2 ## 
E1
; }; \

372 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,2,2,-1> 
E2
 ## E2 ## E2; };

	)

374 
	#_GLM_SWIZZLE3_4_MEMBERS
(
T
, 
P
, 
V
, 
E0
,
E1
,
E2
) \

375 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,0,0> 
E0
 ## E0 ## E0 ## E0; }; \

376 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,0,1> 
E0
 ## E0 ## E0 ## 
E1
; }; \

377 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,0,2> 
E0
 ## E0 ## E0 ## 
E2
; }; \

378 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,1,0> 
E0
 ## E0 ## 
E1
 ## E0; }; \

379 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,1,1> 
E0
 ## E0 ## 
E1
 ## E1; }; \

380 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,1,2> 
E0
 ## E0 ## 
E1
 ## 
E2
; }; \

381 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,2,0> 
E0
 ## E0 ## 
E2
 ## E0; }; \

382 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,2,1> 
E0
 ## E0 ## 
E2
 ## 
E1
; }; \

383 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,0,2,2> 
E0
 ## E0 ## 
E2
 ## E2; }; \

384 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,0,0> 
E0
 ## 
E1
 ## E0 ## E0; }; \

385 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,0,1> 
E0
 ## 
E1
 ## E0 ## E1; }; \

386 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,0,2> 
E0
 ## 
E1
 ## E0 ## 
E2
; }; \

387 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,1,0> 
E0
 ## 
E1
 ## E1 ## E0; }; \

388 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,1,1> 
E0
 ## 
E1
 ## E1 ## E1; }; \

389 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,1,2> 
E0
 ## 
E1
 ## E1 ## 
E2
; }; \

390 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,2,0> 
E0
 ## 
E1
 ## 
E2
 ## E0; }; \

391 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,2,1> 
E0
 ## 
E1
 ## 
E2
 ## E1; }; \

392 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,1,2,2> 
E0
 ## 
E1
 ## 
E2
 ## E2; }; \

393 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,2,0,0> 
E0
 ## 
E2
 ## E0 ## E0; }; \

394 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,2,0,1> 
E0
 ## 
E2
 ## E0 ## 
E1
; }; \

395 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,2,0,2> 
E0
 ## 
E2
 ## E0 ## E2; }; \

396 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,2,1,0> 
E0
 ## 
E2
 ## 
E1
 ## E0; }; \

397 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,2,1,1> 
E0
 ## 
E2
 ## 
E1
 ## E1; }; \

398 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,2,1,2> 
E0
 ## 
E2
 ## 
E1
 ## E2; }; \

399 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,2,2,0> 
E0
 ## 
E2
 ## E2 ## E0; }; \

400 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,2,2,1> 
E0
 ## 
E2
 ## E2 ## 
E1
; }; \

401 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 0,2,2,2> 
E0
 ## 
E2
 ## E2 ## E2; }; \

402 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,0,0> 
E1
 ## 
E0
 ## E0 ## E0; }; \

403 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,0,1> 
E1
 ## 
E0
 ## E0 ## E1; }; \

404 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,0,2> 
E1
 ## 
E0
 ## E0 ## 
E2
; }; \

405 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,1,0> 
E1
 ## 
E0
 ## E1 ## E0; }; \

406 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,1,1> 
E1
 ## 
E0
 ## E1 ## E1; }; \

407 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,1,2> 
E1
 ## 
E0
 ## E1 ## 
E2
; }; \

408 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,2,0> 
E1
 ## 
E0
 ## 
E2
 ## E0; }; \

409 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,2,1> 
E1
 ## 
E0
 ## 
E2
 ## E1; }; \

410 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,0,2,2> 
E1
 ## 
E0
 ## 
E2
 ## E2; }; \

411 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,0,0> 
E1
 ## E1 ## 
E0
 ## E0; }; \

412 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,0,1> 
E1
 ## E1 ## 
E0
 ## E1; }; \

413 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,0,2> 
E1
 ## E1 ## 
E0
 ## 
E2
; }; \

414 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,1,0> 
E1
 ## E1 ## E1 ## 
E0
; }; \

415 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,1,1> 
E1
 ## E1 ## E1 ## E1; }; \

416 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,1,2> 
E1
 ## E1 ## E1 ## 
E2
; }; \

417 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,2,0> 
E1
 ## E1 ## 
E2
 ## 
E0
; }; \

418 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,2,1> 
E1
 ## E1 ## 
E2
 ## E1; }; \

419 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,1,2,2> 
E1
 ## E1 ## 
E2
 ## E2; }; \

420 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,2,0,0> 
E1
 ## 
E2
 ## 
E0
 ## E0; }; \

421 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,2,0,1> 
E1
 ## 
E2
 ## 
E0
 ## E1; }; \

422 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,2,0,2> 
E1
 ## 
E2
 ## 
E0
 ## E2; }; \

423 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,2,1,0> 
E1
 ## 
E2
 ## E1 ## 
E0
; }; \

424 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,2,1,1> 
E1
 ## 
E2
 ## E1 ## E1; }; \

425 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,2,1,2> 
E1
 ## 
E2
 ## E1 ## E2; }; \

426 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,2,2,0> 
E1
 ## 
E2
 ## E2 ## 
E0
; }; \

427 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,2,2,1> 
E1
 ## 
E2
 ## E2 ## E1; }; \

428 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 1,2,2,2> 
E1
 ## 
E2
 ## E2 ## E2; }; \

429 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,0,0,0> 
E2
 ## 
E0
 ## E0 ## E0; }; \

430 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,0,0,1> 
E2
 ## 
E0
 ## E0 ## 
E1
; }; \

431 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,0,0,2> 
E2
 ## 
E0
 ## E0 ## E2; }; \

432 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,0,1,0> 
E2
 ## 
E0
 ## 
E1
 ## E0; }; \

433 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,0,1,1> 
E2
 ## 
E0
 ## 
E1
 ## E1; }; \

434 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,0,1,2> 
E2
 ## 
E0
 ## 
E1
 ## E2; }; \

435 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,0,2,0> 
E2
 ## 
E0
 ## E2 ## E0; }; \

436 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,0,2,1> 
E2
 ## 
E0
 ## E2 ## 
E1
; }; \

437 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,0,2,2> 
E2
 ## 
E0
 ## E2 ## E2; }; \

438 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,1,0,0> 
E2
 ## 
E1
 ## 
E0
 ## E0; }; \

439 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,1,0,1> 
E2
 ## 
E1
 ## 
E0
 ## E1; }; \

440 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,1,0,2> 
E2
 ## 
E1
 ## 
E0
 ## E2; }; \

441 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,1,1,0> 
E2
 ## 
E1
 ## E1 ## 
E0
; }; \

442 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,1,1,1> 
E2
 ## 
E1
 ## E1 ## E1; }; \

443 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,1,1,2> 
E2
 ## 
E1
 ## E1 ## E2; }; \

444 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,1,2,0> 
E2
 ## 
E1
 ## E2 ## 
E0
; }; \

445 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,1,2,1> 
E2
 ## 
E1
 ## E2 ## E1; }; \

446 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,1,2,2> 
E2
 ## 
E1
 ## E2 ## E2; }; \

447 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,2,0,0> 
E2
 ## E2 ## 
E0
 ## E0; }; \

448 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,2,0,1> 
E2
 ## E2 ## 
E0
 ## 
E1
; }; \

449 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,2,0,2> 
E2
 ## E2 ## 
E0
 ## E2; }; \

450 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,2,1,0> 
E2
 ## E2 ## 
E1
 ## 
E0
; }; \

451 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,2,1,1> 
E2
 ## E2 ## 
E1
 ## E1; }; \

452 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,2,1,2> 
E2
 ## E2 ## 
E1
 ## E2; }; \

453 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,2,2,0> 
E2
 ## E2 ## E2 ## 
E0
; }; \

454 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,2,2,1> 
E2
 ## E2 ## E2 ## 
E1
; }; \

455 °ru˘ { 
dëaû
::
_swizzÀ
<4,
T
, 
P
, 
V
, 2,2,2,2> 
E2
 ## E2 ## E2 ## E2; };

	)

457 
	#_GLM_SWIZZLE4_2_MEMBERS
(
T
, 
P
, 
V
, 
E0
,
E1
,
E2
,
E3
) \

458 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 0,0,-1,-2> 
E0
 ## E0; }; \

459 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 0,1,-1,-2> 
E0
 ## 
E1
; }; \

460 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 0,2,-1,-2> 
E0
 ## 
E2
; }; \

461 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 0,3,-1,-2> 
E0
 ## 
E3
; }; \

462 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 1,0,-1,-2> 
E1
 ## 
E0
; }; \

463 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 1,1,-1,-2> 
E1
 ## E1; }; \

464 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 1,2,-1,-2> 
E1
 ## 
E2
; }; \

465 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 1,3,-1,-2> 
E1
 ## 
E3
; }; \

466 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 2,0,-1,-2> 
E2
 ## 
E0
; }; \

467 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 2,1,-1,-2> 
E2
 ## 
E1
; }; \

468 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 2,2,-1,-2> 
E2
 ## E2; }; \

469 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 2,3,-1,-2> 
E2
 ## 
E3
; }; \

470 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 3,0,-1,-2> 
E3
 ## 
E0
; }; \

471 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 3,1,-1,-2> 
E3
 ## 
E1
; }; \

472 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 3,2,-1,-2> 
E3
 ## 
E2
; }; \

473 °ru˘ { 
dëaû
::
_swizzÀ
<2,
T
, 
P
, 
V
, 3,3,-1,-2> 
E3
 ## E3; };

	)

475 
	#_GLM_SWIZZLE4_3_MEMBERS
(
T
, 
P
, 
V
, 
E0
,
E1
,
E2
,
E3
) \

476 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,0,0,-1> 
E0
 ## E0 ## E0; }; \

477 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,0,1,-1> 
E0
 ## E0 ## 
E1
; }; \

478 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,0,2,-1> 
E0
 ## E0 ## 
E2
; }; \

479 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,0,3,-1> 
E0
 ## E0 ## 
E3
; }; \

480 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,1,0,-1> 
E0
 ## 
E1
 ## E0; }; \

481 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,1,1,-1> 
E0
 ## 
E1
 ## E1; }; \

482 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,1,2,-1> 
E0
 ## 
E1
 ## 
E2
; }; \

483 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,1,3,-1> 
E0
 ## 
E1
 ## 
E3
; }; \

484 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,2,0,-1> 
E0
 ## 
E2
 ## E0; }; \

485 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,2,1,-1> 
E0
 ## 
E2
 ## 
E1
; }; \

486 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,2,2,-1> 
E0
 ## 
E2
 ## E2; }; \

487 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,2,3,-1> 
E0
 ## 
E2
 ## 
E3
; }; \

488 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,3,0,-1> 
E0
 ## 
E3
 ## E0; }; \

489 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,3,1,-1> 
E0
 ## 
E3
 ## 
E1
; }; \

490 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,3,2,-1> 
E0
 ## 
E3
 ## 
E2
; }; \

491 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 0,3,3,-1> 
E0
 ## 
E3
 ## E3; }; \

492 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,0,0,-1> 
E1
 ## 
E0
 ## E0; }; \

493 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,0,1,-1> 
E1
 ## 
E0
 ## E1; }; \

494 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,0,2,-1> 
E1
 ## 
E0
 ## 
E2
; }; \

495 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,0,3,-1> 
E1
 ## 
E0
 ## 
E3
; }; \

496 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,1,0,-1> 
E1
 ## E1 ## 
E0
; }; \

497 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,1,1,-1> 
E1
 ## E1 ## E1; }; \

498 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,1,2,-1> 
E1
 ## E1 ## 
E2
; }; \

499 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,1,3,-1> 
E1
 ## E1 ## 
E3
; }; \

500 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,2,0,-1> 
E1
 ## 
E2
 ## 
E0
; }; \

501 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,2,1,-1> 
E1
 ## 
E2
 ## E1; }; \

502 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,2,2,-1> 
E1
 ## 
E2
 ## E2; }; \

503 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,2,3,-1> 
E1
 ## 
E2
 ## 
E3
; }; \

504 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,3,0,-1> 
E1
 ## 
E3
 ## 
E0
; }; \

505 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,3,1,-1> 
E1
 ## 
E3
 ## E1; }; \

506 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,3,2,-1> 
E1
 ## 
E3
 ## 
E2
; }; \

507 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 1,3,3,-1> 
E1
 ## 
E3
 ## E3; }; \

508 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,0,0,-1> 
E2
 ## 
E0
 ## E0; }; \

509 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,0,1,-1> 
E2
 ## 
E0
 ## 
E1
; }; \

510 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,0,2,-1> 
E2
 ## 
E0
 ## E2; }; \

511 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,0,3,-1> 
E2
 ## 
E0
 ## 
E3
; }; \

512 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,1,0,-1> 
E2
 ## 
E1
 ## 
E0
; }; \

513 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,1,1,-1> 
E2
 ## 
E1
 ## E1; }; \

514 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,1,2,-1> 
E2
 ## 
E1
 ## E2; }; \

515 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,1,3,-1> 
E2
 ## 
E1
 ## 
E3
; }; \

516 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,2,0,-1> 
E2
 ## E2 ## 
E0
; }; \

517 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,2,1,-1> 
E2
 ## E2 ## 
E1
; }; \

518 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,2,2,-1> 
E2
 ## E2 ## E2; }; \

519 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,2,3,-1> 
E2
 ## E2 ## 
E3
; }; \

520 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,3,0,-1> 
E2
 ## 
E3
 ## 
E0
; }; \

521 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,3,1,-1> 
E2
 ## 
E3
 ## 
E1
; }; \

522 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,3,2,-1> 
E2
 ## 
E3
 ## E2; }; \

523 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 2,3,3,-1> 
E2
 ## 
E3
 ## E3; }; \

524 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,0,0,-1> 
E3
 ## 
E0
 ## E0; }; \

525 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,0,1,-1> 
E3
 ## 
E0
 ## 
E1
; }; \

526 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,0,2,-1> 
E3
 ## 
E0
 ## 
E2
; }; \

527 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,0,3,-1> 
E3
 ## 
E0
 ## E3; }; \

528 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,1,0,-1> 
E3
 ## 
E1
 ## 
E0
; }; \

529 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,1,1,-1> 
E3
 ## 
E1
 ## E1; }; \

530 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,1,2,-1> 
E3
 ## 
E1
 ## 
E2
; }; \

531 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,1,3,-1> 
E3
 ## 
E1
 ## E3; }; \

532 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,2,0,-1> 
E3
 ## 
E2
 ## 
E0
; }; \

533 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,2,1,-1> 
E3
 ## 
E2
 ## 
E1
; }; \

534 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,2,2,-1> 
E3
 ## 
E2
 ## E2; }; \

535 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,2,3,-1> 
E3
 ## 
E2
 ## E3; }; \

536 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,3,0,-1> 
E3
 ## E3 ## 
E0
; }; \

537 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,3,1,-1> 
E3
 ## E3 ## 
E1
; }; \

538 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,3,2,-1> 
E3
 ## E3 ## 
E2
; }; \

539 °ru˘ { 
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
V
, 3,3,3,-1> 
E3
 ## E3 ## E3; };

	)

541 
	#_GLM_SWIZZLE4_4_MEMBERS
(
T
, 
P
, 
V
, 
E0
,
E1
,
E2
,
E3
) \

542 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,0,0> 
E0
 ## E0 ## E0 ## E0; }; \

543 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,0,1> 
E0
 ## E0 ## E0 ## 
E1
; }; \

544 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,0,2> 
E0
 ## E0 ## E0 ## 
E2
; }; \

545 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,0,3> 
E0
 ## E0 ## E0 ## 
E3
; }; \

546 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,1,0> 
E0
 ## E0 ## 
E1
 ## E0; }; \

547 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,1,1> 
E0
 ## E0 ## 
E1
 ## E1; }; \

548 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,1,2> 
E0
 ## E0 ## 
E1
 ## 
E2
; }; \

549 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,1,3> 
E0
 ## E0 ## 
E1
 ## 
E3
; }; \

550 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,2,0> 
E0
 ## E0 ## 
E2
 ## E0; }; \

551 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,2,1> 
E0
 ## E0 ## 
E2
 ## 
E1
; }; \

552 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,2,2> 
E0
 ## E0 ## 
E2
 ## E2; }; \

553 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,2,3> 
E0
 ## E0 ## 
E2
 ## 
E3
; }; \

554 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,3,0> 
E0
 ## E0 ## 
E3
 ## E0; }; \

555 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,3,1> 
E0
 ## E0 ## 
E3
 ## 
E1
; }; \

556 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,3,2> 
E0
 ## E0 ## 
E3
 ## 
E2
; }; \

557 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,0,3,3> 
E0
 ## E0 ## 
E3
 ## E3; }; \

558 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,0,0> 
E0
 ## 
E1
 ## E0 ## E0; }; \

559 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,0,1> 
E0
 ## 
E1
 ## E0 ## E1; }; \

560 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,0,2> 
E0
 ## 
E1
 ## E0 ## 
E2
; }; \

561 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,0,3> 
E0
 ## 
E1
 ## E0 ## 
E3
; }; \

562 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,1,0> 
E0
 ## 
E1
 ## E1 ## E0; }; \

563 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,1,1> 
E0
 ## 
E1
 ## E1 ## E1; }; \

564 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,1,2> 
E0
 ## 
E1
 ## E1 ## 
E2
; }; \

565 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,1,3> 
E0
 ## 
E1
 ## E1 ## 
E3
; }; \

566 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,2,0> 
E0
 ## 
E1
 ## 
E2
 ## E0; }; \

567 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,2,1> 
E0
 ## 
E1
 ## 
E2
 ## E1; }; \

568 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,2,2> 
E0
 ## 
E1
 ## 
E2
 ## E2; }; \

569 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,2,3> 
E0
 ## 
E1
 ## 
E2
 ## 
E3
; }; \

570 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,3,0> 
E0
 ## 
E1
 ## 
E3
 ## E0; }; \

571 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,3,1> 
E0
 ## 
E1
 ## 
E3
 ## E1; }; \

572 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,3,2> 
E0
 ## 
E1
 ## 
E3
 ## 
E2
; }; \

573 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,1,3,3> 
E0
 ## 
E1
 ## 
E3
 ## E3; }; \

574 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,0,0> 
E0
 ## 
E2
 ## E0 ## E0; }; \

575 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,0,1> 
E0
 ## 
E2
 ## E0 ## 
E1
; }; \

576 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,0,2> 
E0
 ## 
E2
 ## E0 ## E2; }; \

577 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,0,3> 
E0
 ## 
E2
 ## E0 ## 
E3
; }; \

578 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,1,0> 
E0
 ## 
E2
 ## 
E1
 ## E0; }; \

579 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,1,1> 
E0
 ## 
E2
 ## 
E1
 ## E1; }; \

580 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,1,2> 
E0
 ## 
E2
 ## 
E1
 ## E2; }; \

581 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,1,3> 
E0
 ## 
E2
 ## 
E1
 ## 
E3
; }; \

582 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,2,0> 
E0
 ## 
E2
 ## E2 ## E0; }; \

583 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,2,1> 
E0
 ## 
E2
 ## E2 ## 
E1
; }; \

584 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,2,2> 
E0
 ## 
E2
 ## E2 ## E2; }; \

585 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,2,3> 
E0
 ## 
E2
 ## E2 ## 
E3
; }; \

586 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,3,0> 
E0
 ## 
E2
 ## 
E3
 ## E0; }; \

587 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,3,1> 
E0
 ## 
E2
 ## 
E3
 ## 
E1
; }; \

588 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,3,2> 
E0
 ## 
E2
 ## 
E3
 ## E2; }; \

589 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,2,3,3> 
E0
 ## 
E2
 ## 
E3
 ## E3; }; \

590 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,0,0> 
E0
 ## 
E3
 ## E0 ## E0; }; \

591 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,0,1> 
E0
 ## 
E3
 ## E0 ## 
E1
; }; \

592 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,0,2> 
E0
 ## 
E3
 ## E0 ## 
E2
; }; \

593 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,0,3> 
E0
 ## 
E3
 ## E0 ## E3; }; \

594 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,1,0> 
E0
 ## 
E3
 ## 
E1
 ## E0; }; \

595 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,1,1> 
E0
 ## 
E3
 ## 
E1
 ## E1; }; \

596 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,1,2> 
E0
 ## 
E3
 ## 
E1
 ## 
E2
; }; \

597 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,1,3> 
E0
 ## 
E3
 ## 
E1
 ## E3; }; \

598 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,2,0> 
E0
 ## 
E3
 ## 
E2
 ## E0; }; \

599 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,2,1> 
E0
 ## 
E3
 ## 
E2
 ## 
E1
; }; \

600 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,2,2> 
E0
 ## 
E3
 ## 
E2
 ## E2; }; \

601 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,2,3> 
E0
 ## 
E3
 ## 
E2
 ## E3; }; \

602 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,3,0> 
E0
 ## 
E3
 ## E3 ## E0; }; \

603 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,3,1> 
E0
 ## 
E3
 ## E3 ## 
E1
; }; \

604 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,3,2> 
E0
 ## 
E3
 ## E3 ## 
E2
; }; \

605 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 0,3,3,3> 
E0
 ## 
E3
 ## E3 ## E3; }; \

606 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,0,0> 
E1
 ## 
E0
 ## E0 ## E0; }; \

607 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,0,1> 
E1
 ## 
E0
 ## E0 ## E1; }; \

608 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,0,2> 
E1
 ## 
E0
 ## E0 ## 
E2
; }; \

609 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,0,3> 
E1
 ## 
E0
 ## E0 ## 
E3
; }; \

610 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,1,0> 
E1
 ## 
E0
 ## E1 ## E0; }; \

611 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,1,1> 
E1
 ## 
E0
 ## E1 ## E1; }; \

612 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,1,2> 
E1
 ## 
E0
 ## E1 ## 
E2
; }; \

613 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,1,3> 
E1
 ## 
E0
 ## E1 ## 
E3
; }; \

614 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,2,0> 
E1
 ## 
E0
 ## 
E2
 ## E0; }; \

615 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,2,1> 
E1
 ## 
E0
 ## 
E2
 ## E1; }; \

616 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,2,2> 
E1
 ## 
E0
 ## 
E2
 ## E2; }; \

617 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,2,3> 
E1
 ## 
E0
 ## 
E2
 ## 
E3
; }; \

618 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,3,0> 
E1
 ## 
E0
 ## 
E3
 ## E0; }; \

619 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,3,1> 
E1
 ## 
E0
 ## 
E3
 ## E1; }; \

620 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,3,2> 
E1
 ## 
E0
 ## 
E3
 ## 
E2
; }; \

621 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,0,3,3> 
E1
 ## 
E0
 ## 
E3
 ## E3; }; \

622 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,0,0> 
E1
 ## E1 ## 
E0
 ## E0; }; \

623 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,0,1> 
E1
 ## E1 ## 
E0
 ## E1; }; \

624 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,0,2> 
E1
 ## E1 ## 
E0
 ## 
E2
; }; \

625 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,0,3> 
E1
 ## E1 ## 
E0
 ## 
E3
; }; \

626 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,1,0> 
E1
 ## E1 ## E1 ## 
E0
; }; \

627 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,1,1> 
E1
 ## E1 ## E1 ## E1; }; \

628 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,1,2> 
E1
 ## E1 ## E1 ## 
E2
; }; \

629 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,1,3> 
E1
 ## E1 ## E1 ## 
E3
; }; \

630 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,2,0> 
E1
 ## E1 ## 
E2
 ## 
E0
; }; \

631 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,2,1> 
E1
 ## E1 ## 
E2
 ## E1; }; \

632 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,2,2> 
E1
 ## E1 ## 
E2
 ## E2; }; \

633 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,2,3> 
E1
 ## E1 ## 
E2
 ## 
E3
; }; \

634 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,3,0> 
E1
 ## E1 ## 
E3
 ## 
E0
; }; \

635 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,3,1> 
E1
 ## E1 ## 
E3
 ## E1; }; \

636 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,3,2> 
E1
 ## E1 ## 
E3
 ## 
E2
; }; \

637 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,1,3,3> 
E1
 ## E1 ## 
E3
 ## E3; }; \

638 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,0,0> 
E1
 ## 
E2
 ## 
E0
 ## E0; }; \

639 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,0,1> 
E1
 ## 
E2
 ## 
E0
 ## E1; }; \

640 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,0,2> 
E1
 ## 
E2
 ## 
E0
 ## E2; }; \

641 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,0,3> 
E1
 ## 
E2
 ## 
E0
 ## 
E3
; }; \

642 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,1,0> 
E1
 ## 
E2
 ## E1 ## 
E0
; }; \

643 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,1,1> 
E1
 ## 
E2
 ## E1 ## E1; }; \

644 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,1,2> 
E1
 ## 
E2
 ## E1 ## E2; }; \

645 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,1,3> 
E1
 ## 
E2
 ## E1 ## 
E3
; }; \

646 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,2,0> 
E1
 ## 
E2
 ## E2 ## 
E0
; }; \

647 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,2,1> 
E1
 ## 
E2
 ## E2 ## E1; }; \

648 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,2,2> 
E1
 ## 
E2
 ## E2 ## E2; }; \

649 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,2,3> 
E1
 ## 
E2
 ## E2 ## 
E3
; }; \

650 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,3,0> 
E1
 ## 
E2
 ## 
E3
 ## 
E0
; }; \

651 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,3,1> 
E1
 ## 
E2
 ## 
E3
 ## E1; }; \

652 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,3,2> 
E1
 ## 
E2
 ## 
E3
 ## E2; }; \

653 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,2,3,3> 
E1
 ## 
E2
 ## 
E3
 ## E3; }; \

654 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,0,0> 
E1
 ## 
E3
 ## 
E0
 ## E0; }; \

655 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,0,1> 
E1
 ## 
E3
 ## 
E0
 ## E1; }; \

656 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,0,2> 
E1
 ## 
E3
 ## 
E0
 ## 
E2
; }; \

657 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,0,3> 
E1
 ## 
E3
 ## 
E0
 ## E3; }; \

658 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,1,0> 
E1
 ## 
E3
 ## E1 ## 
E0
; }; \

659 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,1,1> 
E1
 ## 
E3
 ## E1 ## E1; }; \

660 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,1,2> 
E1
 ## 
E3
 ## E1 ## 
E2
; }; \

661 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,1,3> 
E1
 ## 
E3
 ## E1 ## E3; }; \

662 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,2,0> 
E1
 ## 
E3
 ## 
E2
 ## 
E0
; }; \

663 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,2,1> 
E1
 ## 
E3
 ## 
E2
 ## E1; }; \

664 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,2,2> 
E1
 ## 
E3
 ## 
E2
 ## E2; }; \

665 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,2,3> 
E1
 ## 
E3
 ## 
E2
 ## E3; }; \

666 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,3,0> 
E1
 ## 
E3
 ## E3 ## 
E0
; }; \

667 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,3,1> 
E1
 ## 
E3
 ## E3 ## E1; }; \

668 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,3,2> 
E1
 ## 
E3
 ## E3 ## 
E2
; }; \

669 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 1,3,3,3> 
E1
 ## 
E3
 ## E3 ## E3; }; \

670 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,0,0> 
E2
 ## 
E0
 ## E0 ## E0; }; \

671 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,0,1> 
E2
 ## 
E0
 ## E0 ## 
E1
; }; \

672 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,0,2> 
E2
 ## 
E0
 ## E0 ## E2; }; \

673 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,0,3> 
E2
 ## 
E0
 ## E0 ## 
E3
; }; \

674 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,1,0> 
E2
 ## 
E0
 ## 
E1
 ## E0; }; \

675 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,1,1> 
E2
 ## 
E0
 ## 
E1
 ## E1; }; \

676 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,1,2> 
E2
 ## 
E0
 ## 
E1
 ## E2; }; \

677 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,1,3> 
E2
 ## 
E0
 ## 
E1
 ## 
E3
; }; \

678 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,2,0> 
E2
 ## 
E0
 ## E2 ## E0; }; \

679 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,2,1> 
E2
 ## 
E0
 ## E2 ## 
E1
; }; \

680 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,2,2> 
E2
 ## 
E0
 ## E2 ## E2; }; \

681 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,2,3> 
E2
 ## 
E0
 ## E2 ## 
E3
; }; \

682 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,3,0> 
E2
 ## 
E0
 ## 
E3
 ## E0; }; \

683 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,3,1> 
E2
 ## 
E0
 ## 
E3
 ## 
E1
; }; \

684 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,3,2> 
E2
 ## 
E0
 ## 
E3
 ## E2; }; \

685 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,0,3,3> 
E2
 ## 
E0
 ## 
E3
 ## E3; }; \

686 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,0,0> 
E2
 ## 
E1
 ## 
E0
 ## E0; }; \

687 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,0,1> 
E2
 ## 
E1
 ## 
E0
 ## E1; }; \

688 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,0,2> 
E2
 ## 
E1
 ## 
E0
 ## E2; }; \

689 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,0,3> 
E2
 ## 
E1
 ## 
E0
 ## 
E3
; }; \

690 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,1,0> 
E2
 ## 
E1
 ## E1 ## 
E0
; }; \

691 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,1,1> 
E2
 ## 
E1
 ## E1 ## E1; }; \

692 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,1,2> 
E2
 ## 
E1
 ## E1 ## E2; }; \

693 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,1,3> 
E2
 ## 
E1
 ## E1 ## 
E3
; }; \

694 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,2,0> 
E2
 ## 
E1
 ## E2 ## 
E0
; }; \

695 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,2,1> 
E2
 ## 
E1
 ## E2 ## E1; }; \

696 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,2,2> 
E2
 ## 
E1
 ## E2 ## E2; }; \

697 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,2,3> 
E2
 ## 
E1
 ## E2 ## 
E3
; }; \

698 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,3,0> 
E2
 ## 
E1
 ## 
E3
 ## 
E0
; }; \

699 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,3,1> 
E2
 ## 
E1
 ## 
E3
 ## E1; }; \

700 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,3,2> 
E2
 ## 
E1
 ## 
E3
 ## E2; }; \

701 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,1,3,3> 
E2
 ## 
E1
 ## 
E3
 ## E3; }; \

702 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,0,0> 
E2
 ## E2 ## 
E0
 ## E0; }; \

703 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,0,1> 
E2
 ## E2 ## 
E0
 ## 
E1
; }; \

704 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,0,2> 
E2
 ## E2 ## 
E0
 ## E2; }; \

705 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,0,3> 
E2
 ## E2 ## 
E0
 ## 
E3
; }; \

706 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,1,0> 
E2
 ## E2 ## 
E1
 ## 
E0
; }; \

707 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,1,1> 
E2
 ## E2 ## 
E1
 ## E1; }; \

708 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,1,2> 
E2
 ## E2 ## 
E1
 ## E2; }; \

709 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,1,3> 
E2
 ## E2 ## 
E1
 ## 
E3
; }; \

710 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,2,0> 
E2
 ## E2 ## E2 ## 
E0
; }; \

711 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,2,1> 
E2
 ## E2 ## E2 ## 
E1
; }; \

712 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,2,2> 
E2
 ## E2 ## E2 ## E2; }; \

713 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,2,3> 
E2
 ## E2 ## E2 ## 
E3
; }; \

714 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,3,0> 
E2
 ## E2 ## 
E3
 ## 
E0
; }; \

715 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,3,1> 
E2
 ## E2 ## 
E3
 ## 
E1
; }; \

716 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,3,2> 
E2
 ## E2 ## 
E3
 ## E2; }; \

717 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,2,3,3> 
E2
 ## E2 ## 
E3
 ## E3; }; \

718 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,0,0> 
E2
 ## 
E3
 ## 
E0
 ## E0; }; \

719 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,0,1> 
E2
 ## 
E3
 ## 
E0
 ## 
E1
; }; \

720 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,0,2> 
E2
 ## 
E3
 ## 
E0
 ## E2; }; \

721 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,0,3> 
E2
 ## 
E3
 ## 
E0
 ## E3; }; \

722 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,1,0> 
E2
 ## 
E3
 ## 
E1
 ## 
E0
; }; \

723 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,1,1> 
E2
 ## 
E3
 ## 
E1
 ## E1; }; \

724 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,1,2> 
E2
 ## 
E3
 ## 
E1
 ## E2; }; \

725 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,1,3> 
E2
 ## 
E3
 ## 
E1
 ## E3; }; \

726 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,2,0> 
E2
 ## 
E3
 ## E2 ## 
E0
; }; \

727 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,2,1> 
E2
 ## 
E3
 ## E2 ## 
E1
; }; \

728 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,2,2> 
E2
 ## 
E3
 ## E2 ## E2; }; \

729 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,2,3> 
E2
 ## 
E3
 ## E2 ## E3; }; \

730 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,3,0> 
E2
 ## 
E3
 ## E3 ## 
E0
; }; \

731 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,3,1> 
E2
 ## 
E3
 ## E3 ## 
E1
; }; \

732 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,3,2> 
E2
 ## 
E3
 ## E3 ## E2; }; \

733 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 2,3,3,3> 
E2
 ## 
E3
 ## E3 ## E3; }; \

734 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,0,0> 
E3
 ## 
E0
 ## E0 ## E0; }; \

735 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,0,1> 
E3
 ## 
E0
 ## E0 ## 
E1
; }; \

736 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,0,2> 
E3
 ## 
E0
 ## E0 ## 
E2
; }; \

737 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,0,3> 
E3
 ## 
E0
 ## E0 ## E3; }; \

738 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,1,0> 
E3
 ## 
E0
 ## 
E1
 ## E0; }; \

739 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,1,1> 
E3
 ## 
E0
 ## 
E1
 ## E1; }; \

740 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,1,2> 
E3
 ## 
E0
 ## 
E1
 ## 
E2
; }; \

741 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,1,3> 
E3
 ## 
E0
 ## 
E1
 ## E3; }; \

742 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,2,0> 
E3
 ## 
E0
 ## 
E2
 ## E0; }; \

743 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,2,1> 
E3
 ## 
E0
 ## 
E2
 ## 
E1
; }; \

744 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,2,2> 
E3
 ## 
E0
 ## 
E2
 ## E2; }; \

745 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,2,3> 
E3
 ## 
E0
 ## 
E2
 ## E3; }; \

746 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,3,0> 
E3
 ## 
E0
 ## E3 ## E0; }; \

747 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,3,1> 
E3
 ## 
E0
 ## E3 ## 
E1
; }; \

748 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,3,2> 
E3
 ## 
E0
 ## E3 ## 
E2
; }; \

749 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,0,3,3> 
E3
 ## 
E0
 ## E3 ## E3; }; \

750 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,0,0> 
E3
 ## 
E1
 ## 
E0
 ## E0; }; \

751 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,0,1> 
E3
 ## 
E1
 ## 
E0
 ## E1; }; \

752 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,0,2> 
E3
 ## 
E1
 ## 
E0
 ## 
E2
; }; \

753 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,0,3> 
E3
 ## 
E1
 ## 
E0
 ## E3; }; \

754 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,1,0> 
E3
 ## 
E1
 ## E1 ## 
E0
; }; \

755 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,1,1> 
E3
 ## 
E1
 ## E1 ## E1; }; \

756 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,1,2> 
E3
 ## 
E1
 ## E1 ## 
E2
; }; \

757 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,1,3> 
E3
 ## 
E1
 ## E1 ## E3; }; \

758 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,2,0> 
E3
 ## 
E1
 ## 
E2
 ## 
E0
; }; \

759 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,2,1> 
E3
 ## 
E1
 ## 
E2
 ## E1; }; \

760 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,2,2> 
E3
 ## 
E1
 ## 
E2
 ## E2; }; \

761 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,2,3> 
E3
 ## 
E1
 ## 
E2
 ## E3; }; \

762 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,3,0> 
E3
 ## 
E1
 ## E3 ## 
E0
; }; \

763 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,3,1> 
E3
 ## 
E1
 ## E3 ## E1; }; \

764 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,3,2> 
E3
 ## 
E1
 ## E3 ## 
E2
; }; \

765 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,1,3,3> 
E3
 ## 
E1
 ## E3 ## E3; }; \

766 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,0,0> 
E3
 ## 
E2
 ## 
E0
 ## E0; }; \

767 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,0,1> 
E3
 ## 
E2
 ## 
E0
 ## 
E1
; }; \

768 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,0,2> 
E3
 ## 
E2
 ## 
E0
 ## E2; }; \

769 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,0,3> 
E3
 ## 
E2
 ## 
E0
 ## E3; }; \

770 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,1,0> 
E3
 ## 
E2
 ## 
E1
 ## 
E0
; }; \

771 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,1,1> 
E3
 ## 
E2
 ## 
E1
 ## E1; }; \

772 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,1,2> 
E3
 ## 
E2
 ## 
E1
 ## E2; }; \

773 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,1,3> 
E3
 ## 
E2
 ## 
E1
 ## E3; }; \

774 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,2,0> 
E3
 ## 
E2
 ## E2 ## 
E0
; }; \

775 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,2,1> 
E3
 ## 
E2
 ## E2 ## 
E1
; }; \

776 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,2,2> 
E3
 ## 
E2
 ## E2 ## E2; }; \

777 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,2,3> 
E3
 ## 
E2
 ## E2 ## E3; }; \

778 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,3,0> 
E3
 ## 
E2
 ## E3 ## 
E0
; }; \

779 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,3,1> 
E3
 ## 
E2
 ## E3 ## 
E1
; }; \

780 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,3,2> 
E3
 ## 
E2
 ## E3 ## E2; }; \

781 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,2,3,3> 
E3
 ## 
E2
 ## E3 ## E3; }; \

782 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,0,0> 
E3
 ## E3 ## 
E0
 ## E0; }; \

783 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,0,1> 
E3
 ## E3 ## 
E0
 ## 
E1
; }; \

784 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,0,2> 
E3
 ## E3 ## 
E0
 ## 
E2
; }; \

785 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,0,3> 
E3
 ## E3 ## 
E0
 ## E3; }; \

786 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,1,0> 
E3
 ## E3 ## 
E1
 ## 
E0
; }; \

787 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,1,1> 
E3
 ## E3 ## 
E1
 ## E1; }; \

788 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,1,2> 
E3
 ## E3 ## 
E1
 ## 
E2
; }; \

789 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,1,3> 
E3
 ## E3 ## 
E1
 ## E3; }; \

790 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,2,0> 
E3
 ## E3 ## 
E2
 ## 
E0
; }; \

791 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,2,1> 
E3
 ## E3 ## 
E2
 ## 
E1
; }; \

792 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,2,2> 
E3
 ## E3 ## 
E2
 ## E2; }; \

793 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,2,3> 
E3
 ## E3 ## 
E2
 ## E3; }; \

794 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,3,0> 
E3
 ## E3 ## E3 ## 
E0
; }; \

795 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,3,1> 
E3
 ## E3 ## E3 ## 
E1
; }; \

796 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,3,2> 
E3
 ## E3 ## E3 ## 
E2
; }; \

797 °ru˘ { 
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
V
, 3,3,3,3> 
E3
 ## E3 ## E3 ## E3; };

	)

	@glm/glm/detail/_swizzle_func.hpp

4 #¥agm®
⁄˚


6 
	#GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
CONST
, 
A
, 
B
) \

7 
SWIZZLED_TYPE
<
TMPL_TYPE
, 
PRECISION
> 
A
 ## 
	`B
(Ë
CONST
 \

9  
SWIZZLED_TYPE
<
TMPL_TYPE
, 
PRECISION
>(
this
->
A
,Åhis->
B
); \

10 }

	)

12 
	#GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
CONST
, 
A
, 
B
, 
C
) \

13 
SWIZZLED_TYPE
<
TMPL_TYPE
, 
PRECISION
> 
A
 ## 
B
 ## 
	`C
(Ë
CONST
 \

15  
SWIZZLED_TYPE
<
TMPL_TYPE
, 
PRECISION
>(
this
->
A
,Åhis->
B
,Åhis->
C
); \

16 }

	)

18 
	#GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
CONST
, 
A
, 
B
, 
C
, 
D
) \

19 
SWIZZLED_TYPE
<
TMPL_TYPE
, 
PRECISION
> 
A
 ## 
B
 ## 
C
 ## 
	`D
(Ë
CONST
 \

21  
SWIZZLED_TYPE
<
TMPL_TYPE
, 
PRECISION
>(
this
->
A
,Åhis->
B
,Åhis->
C
,Åhis->
D
); \

22 }

	)

24 
	#GLM_SWIZZLE_GEN_VEC2_ENTRY_DEF
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
CONST
, 
A
, 
B
) \

25 
ãm∂©e
 <
ty≥«me
 
TMPL_TYPE
> \

26 
SWIZZLED_TYPE
<
TMPL_TYPE
> 
CLASS_TYPE
<TMPL_TYPE, 
PRECISION
>::
A
 ## 
	`B
(Ë
CONST
 \

28  
SWIZZLED_TYPE
<
TMPL_TYPE
, 
PRECISION
>(
this
->
A
,Åhis->
B
); \

29 }

	)

31 
	#GLM_SWIZZLE_GEN_VEC3_ENTRY_DEF
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
CONST
, 
A
, 
B
, 
C
) \

32 
ãm∂©e
 <
ty≥«me
 
TMPL_TYPE
> \

33 
SWIZZLED_TYPE
<
TMPL_TYPE
> 
CLASS_TYPE
<TMPL_TYPE, 
PRECISION
>::
A
 ## 
B
 ## 
	`C
(Ë
CONST
 \

35  
SWIZZLED_TYPE
<
TMPL_TYPE
, 
PRECISION
>(
this
->
A
,Åhis->
B
,Åhis->
C
); \

36 }

	)

38 
	#GLM_SWIZZLE_GEN_VEC4_ENTRY_DEF
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
CONST
, 
A
, 
B
, 
C
, 
D
) \

39 
ãm∂©e
 <
ty≥«me
 
TMPL_TYPE
> \

40 
SWIZZLED_TYPE
<
TMPL_TYPE
> 
CLASS_TYPE
<TMPL_TYPE, 
PRECISION
>::
A
 ## 
B
 ## 
C
 ## 
	`D
(Ë
CONST
 \

42  
SWIZZLED_TYPE
<
TMPL_TYPE
, 
PRECISION
>(
this
->
A
,Åhis->
B
,Åhis->
C
,Åhis->
D
); \

43 }

	)

45 
	#GLM_MUTABLE


	)

47 
	#GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
) \

48 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
A
, 
B
) \

49 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
B
, 
A
)

	)

51 
	#GLM_SWIZZLE_GEN_REF_FROM_VEC2
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
) \

52 
	`GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
x
, 
y
) \

53 
	`GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
r
, 
g
) \

54 
	`GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
s
, 
t
)

	)

58 
	#GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
, 
C
) \

59 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
A
, 
B
) \

60 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
A
, 
C
) \

61 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
B
, 
A
) \

62 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
B
, 
C
) \

63 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
C
, 
A
) \

64 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
C
, 
B
)

	)

66 
	#GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
, 
C
) \

67 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
A
, 
B
, 
C
) \

68 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
A
, 
C
, 
B
) \

69 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
B
, 
A
, 
C
) \

70 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
B
, 
C
, 
A
) \

71 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
C
, 
A
, 
B
) \

72 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
C
, 
B
, 
A
)

	)

74 
	#GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
A
, 
B
, 
C
) \

75 
	`GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
A
, 
B
, 
C
) \

76 
	`GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
A
, 
B
, 
C
)

	)

78 
	#GLM_SWIZZLE_GEN_REF_FROM_VEC3
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
) \

79 
	`GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
x
, 
y
, 
z
) \

80 
	`GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
r
, 
g
, 
b
) \

81 
	`GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
s
, 
t
, 
p
)

	)

85 
	#GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
, 
C
, 
D
) \

86 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
A
, 
B
) \

87 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
A
, 
C
) \

88 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
A
, 
D
) \

89 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
B
, 
A
) \

90 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
B
, 
C
) \

91 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
B
, 
D
) \

92 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
C
, 
A
) \

93 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
C
, 
B
) \

94 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
C
, 
D
) \

95 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
D
, 
A
) \

96 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
D
, 
B
) \

97 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
GLM_MUTABLE
, 
D
, 
C
)

	)

99 
	#GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
, 
C
, 
D
) \

100 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
A
, 
B
, 
C
) \

101 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
A
, 
B
, 
D
) \

102 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
A
, 
C
, 
B
) \

103 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
A
, 
C
, 
D
) \

104 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
A
, 
D
, 
B
) \

105 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
A
, 
D
, 
C
) \

106 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
B
, 
A
, 
C
) \

107 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
B
, 
A
, 
D
) \

108 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
B
, 
C
, 
A
) \

109 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
B
, 
C
, 
D
) \

110 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
B
, 
D
, 
A
) \

111 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
B
, 
D
, 
C
) \

112 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
C
, 
A
, 
B
) \

113 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
C
, 
A
, 
D
) \

114 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
C
, 
B
, 
A
) \

115 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
C
, 
B
, 
D
) \

116 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
C
, 
D
, 
A
) \

117 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
C
, 
D
, 
B
) \

118 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
D
, 
A
, 
B
) \

119 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
D
, 
A
, 
C
) \

120 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
D
, 
B
, 
A
) \

121 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
D
, 
B
, 
C
) \

122 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
D
, 
C
, 
A
) \

123 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
D
, 
C
, 
B
)

	)

125 
	#GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
, 
C
, 
D
) \

126 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
A
, 
C
, 
B
, 
D
) \

127 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
A
, 
C
, 
D
, 
B
) \

128 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
A
, 
D
, 
B
, 
C
) \

129 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
A
, 
D
, 
C
, 
B
) \

130 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
A
, 
B
, 
D
, 
C
) \

131 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
A
, 
B
, 
C
, 
D
) \

132 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
B
, 
C
, 
A
, 
D
) \

133 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
B
, 
C
, 
D
, 
A
) \

134 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
B
, 
D
, 
A
, 
C
) \

135 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
B
, 
D
, 
C
, 
A
) \

136 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
B
, 
A
, 
D
, 
C
) \

137 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
B
, 
A
, 
C
, 
D
) \

138 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
C
, 
B
, 
A
, 
D
) \

139 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
C
, 
B
, 
D
, 
A
) \

140 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
C
, 
D
, 
A
, 
B
) \

141 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
C
, 
D
, 
B
, 
A
) \

142 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
C
, 
A
, 
D
, 
B
) \

143 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
C
, 
A
, 
B
, 
D
) \

144 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
D
, 
C
, 
B
, 
A
) \

145 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
D
, 
C
, 
A
, 
B
) \

146 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
D
, 
A
, 
B
, 
C
) \

147 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
D
, 
A
, 
C
, 
B
) \

148 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
D
, 
B
, 
A
, 
C
) \

149 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, , 
D
, 
B
, 
C
, 
A
)

	)

151 
	#GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
A
, 
B
, 
C
, 
D
) \

152 
	`GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
A
, 
B
, 
C
, 
D
) \

153 
	`GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
A
, 
B
, 
C
, 
D
) \

154 
	`GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
A
, 
B
, 
C
, 
D
)

	)

156 
	#GLM_SWIZZLE_GEN_REF_FROM_VEC4
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
) \

157 
	`GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
x
, 
y
, 
z
, 
w
) \

158 
	`GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
r
, 
g
, 
b
, 
a
) \

159 
	`GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
s
, 
t
, 
p
, 
q
)

	)

163 
	#GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
) \

164 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A) \

165 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
) \

166 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
) \

167 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B)

	)

169 
	#GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
) \

170 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, A) \

171 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
B
) \

172 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, A) \

173 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, B) \

174 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, A) \

175 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, B) \

176 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
A
) \

177 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, B)

	)

179 
	#GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
) \

180 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, A, A) \

181 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, A, 
B
) \

182 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
B
, A) \

183 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
B
, B) \

184 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, A, A) \

185 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, A, B) \

186 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, B, A) \

187 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, B, B) \

188 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, A, A) \

189 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, A, B) \

190 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, B, A) \

191 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, B, B) \

192 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
A
, A) \

193 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
A
, B) \

194 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, B, 
A
) \

195 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, B, B)

	)

197 
	#GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
A
, 
B
) \

198 
	`GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
A
, 
B
) \

199 
	`GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
A
, 
B
) \

200 
	`GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
A
, 
B
)

	)

202 
	#GLM_SWIZZLE_GEN_VEC_FROM_VEC2
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
) \

203 
	`GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
x
, 
y
) \

204 
	`GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
r
, 
g
) \

205 
	`GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
s
, 
t
)

	)

209 
	#GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
, 
C
) \

210 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A) \

211 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
) \

212 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
) \

213 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
) \

214 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B) \

215 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
) \

216 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
) \

217 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
) \

218 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C)

	)

220 
	#GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
, 
C
) \

221 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, A) \

222 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
B
) \

223 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
C
) \

224 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, A) \

225 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, B) \

226 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
C
) \

227 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, A) \

228 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
B
) \

229 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, C) \

230 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, A) \

231 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, B) \

232 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
C
) \

233 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
A
) \

234 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, B) \

235 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
C
) \

236 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
A
) \

237 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, B) \

238 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, C) \

239 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, A) \

240 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
B
) \

241 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, C) \

242 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
A
) \

243 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, B) \

244 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, C) \

245 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
A
) \

246 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
B
) \

247 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, C)

	)

249 
	#GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
, 
C
) \

250 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, A, A) \

251 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, A, 
B
) \

252 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, A, 
C
) \

253 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
B
, A) \

254 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
B
, B) \

255 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
B
, 
C
) \

256 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
C
, A) \

257 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
C
, 
B
) \

258 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
C
, C) \

259 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, A, A) \

260 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, A, B) \

261 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, A, 
C
) \

262 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, B, A) \

263 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, B, B) \

264 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, B, 
C
) \

265 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
C
, A) \

266 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
C
, B) \

267 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
C
, C) \

268 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, A, A) \

269 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, A, 
B
) \

270 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, A, C) \

271 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
B
, A) \

272 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
B
, B) \

273 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
B
, C) \

274 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, C, A) \

275 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, C, 
B
) \

276 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, C, C) \

277 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, A, A) \

278 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, A, B) \

279 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, A, 
C
) \

280 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, B, A) \

281 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, B, B) \

282 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, B, 
C
) \

283 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
C
, A) \

284 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
C
, B) \

285 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
C
, C) \

286 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
A
, A) \

287 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
A
, B) \

288 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
A
, 
C
) \

289 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, B, 
A
) \

290 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, B, B) \

291 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, B, 
C
) \

292 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
C
, 
A
) \

293 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
C
, B) \

294 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
C
, C) \

295 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
A
, A) \

296 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
A
, B) \

297 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
A
, C) \

298 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, B, 
A
) \

299 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, B, B) \

300 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, B, C) \

301 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, C, 
A
) \

302 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, C, B) \

303 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, C, C) \

304 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, A, A) \

305 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, A, 
B
) \

306 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, A, C) \

307 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
B
, A) \

308 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
B
, B) \

309 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
B
, C) \

310 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, C, A) \

311 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, C, 
B
) \

312 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, C, C) \

313 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
A
, A) \

314 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
A
, B) \

315 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
A
, C) \

316 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, B, 
A
) \

317 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, B, B) \

318 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, B, C) \

319 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, C, 
A
) \

320 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, C, B) \

321 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, C, C) \

322 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
A
, A) \

323 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
A
, 
B
) \

324 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
A
, C) \

325 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
B
, 
A
) \

326 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
B
, B) \

327 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
B
, C) \

328 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, C, 
A
) \

329 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, C, 
B
) \

330 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, C, C)

	)

332 
	#GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
A
, 
B
, 
C
) \

333 
	`GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
A
, 
B
, 
C
) \

334 
	`GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
A
, 
B
, 
C
) \

335 
	`GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
A
, 
B
, 
C
)

	)

337 
	#GLM_SWIZZLE_GEN_VEC_FROM_VEC3
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
) \

338 
	`GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
x
, 
y
, 
z
) \

339 
	`GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
r
, 
g
, 
b
) \

340 
	`GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
s
, 
t
, 
p
)

	)

344 
	#GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
, 
C
, 
D
) \

345 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A) \

346 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
) \

347 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
) \

348 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
) \

349 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
) \

350 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B) \

351 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
) \

352 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
) \

353 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
) \

354 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
) \

355 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C) \

356 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
) \

357 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
) \

358 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
) \

359 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
) \

360 
	`GLM_SWIZZLE_GEN_VEC2_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D)

	)

362 
	#GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
, 
C
, 
D
) \

363 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, A) \

364 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
B
) \

365 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
C
) \

366 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
D
) \

367 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, A) \

368 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, B) \

369 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
C
) \

370 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
D
) \

371 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, A) \

372 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
B
) \

373 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, C) \

374 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
D
) \

375 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, A) \

376 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, 
B
) \

377 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, 
C
) \

378 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, D) \

379 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, A) \

380 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, B) \

381 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
C
) \

382 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
D
) \

383 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
A
) \

384 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, B) \

385 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
C
) \

386 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
D
) \

387 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
A
) \

388 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, B) \

389 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, C) \

390 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
D
) \

391 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, 
A
) \

392 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, B) \

393 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, 
C
) \

394 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, D) \

395 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, A) \

396 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
B
) \

397 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, C) \

398 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
D
) \

399 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
A
) \

400 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, B) \

401 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, C) \

402 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
D
) \

403 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
A
) \

404 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
B
) \

405 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, C) \

406 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
D
) \

407 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, 
A
) \

408 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, 
B
) \

409 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, C) \

410 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, D) \

411 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, A) \

412 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, 
B
) \

413 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, 
C
) \

414 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, D) \

415 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, 
A
) \

416 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, B) \

417 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, 
C
) \

418 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, D) \

419 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, 
A
) \

420 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, 
B
) \

421 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, C) \

422 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, D) \

423 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
A
) \

424 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
B
) \

425 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
C
) \

426 
	`GLM_SWIZZLE_GEN_VEC3_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, D)

	)

428 
	#GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, 
A
, 
B
, 
C
, 
D
) \

429 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, A, A) \

430 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, A, 
B
) \

431 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, A, 
C
) \

432 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, A, 
D
) \

433 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
B
, A) \

434 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
B
, B) \

435 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
B
, 
C
) \

436 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
B
, 
D
) \

437 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
C
, A) \

438 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
C
, 
B
) \

439 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
C
, C) \

440 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
C
, 
D
) \

441 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
D
, A) \

442 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
D
, 
B
) \

443 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
D
, 
C
) \

444 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, A, 
D
, D) \

445 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, A, A) \

446 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, A, B) \

447 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, A, 
C
) \

448 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, A, 
D
) \

449 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, B, A) \

450 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, B, B) \

451 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, B, 
C
) \

452 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, B, 
D
) \

453 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
C
, A) \

454 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
C
, B) \

455 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
C
, C) \

456 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
C
, 
D
) \

457 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
D
, A) \

458 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
D
, B) \

459 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
D
, 
C
) \

460 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
B
, 
D
, D) \

461 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, A, A) \

462 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, A, 
B
) \

463 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, A, C) \

464 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, A, 
D
) \

465 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
B
, A) \

466 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
B
, B) \

467 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
B
, C) \

468 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
B
, 
D
) \

469 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, C, A) \

470 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, C, 
B
) \

471 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, C, C) \

472 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, C, 
D
) \

473 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
D
, A) \

474 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
D
, 
B
) \

475 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
D
, C) \

476 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
C
, 
D
, D) \

477 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, A, A) \

478 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, A, 
B
) \

479 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, A, 
C
) \

480 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, A, D) \

481 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, 
B
, A) \

482 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, 
B
, B) \

483 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, 
B
, 
C
) \

484 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, 
B
, D) \

485 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, 
C
, A) \

486 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, 
C
, 
B
) \

487 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, 
C
, C) \

488 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, 
C
, D) \

489 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, D, A) \

490 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, D, 
B
) \

491 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, D, 
C
) \

492 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
A
, 
D
, D, D) \

493 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, A, A) \

494 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, A, B) \

495 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, A, 
C
) \

496 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, A, 
D
) \

497 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, B, A) \

498 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, B, B) \

499 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, B, 
C
) \

500 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, B, 
D
) \

501 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
C
, A) \

502 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
C
, B) \

503 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
C
, C) \

504 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
C
, 
D
) \

505 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
D
, A) \

506 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
D
, B) \

507 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
D
, 
C
) \

508 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
A
, 
D
, D) \

509 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
A
, A) \

510 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
A
, B) \

511 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
A
, 
C
) \

512 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
A
, 
D
) \

513 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, B, 
A
) \

514 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, B, B) \

515 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, B, 
C
) \

516 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, B, 
D
) \

517 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
C
, 
A
) \

518 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
C
, B) \

519 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
C
, C) \

520 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
C
, 
D
) \

521 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
D
, 
A
) \

522 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
D
, B) \

523 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
D
, 
C
) \

524 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, B, 
D
, D) \

525 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
A
, A) \

526 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
A
, B) \

527 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
A
, C) \

528 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
A
, 
D
) \

529 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, B, 
A
) \

530 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, B, B) \

531 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, B, C) \

532 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, B, 
D
) \

533 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, C, 
A
) \

534 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, C, B) \

535 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, C, C) \

536 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, C, 
D
) \

537 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
D
, 
A
) \

538 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
D
, B) \

539 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
D
, C) \

540 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
C
, 
D
, D) \

541 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, 
A
, A) \

542 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, 
A
, B) \

543 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, 
A
, 
C
) \

544 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, 
A
, D) \

545 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, B, 
A
) \

546 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, B, B) \

547 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, B, 
C
) \

548 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, B, D) \

549 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, 
C
, 
A
) \

550 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, 
C
, B) \

551 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, 
C
, C) \

552 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, 
C
, D) \

553 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, D, 
A
) \

554 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, D, B) \

555 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, D, 
C
) \

556 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
B
, 
D
, D, D) \

557 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, A, A) \

558 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, A, 
B
) \

559 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, A, C) \

560 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, A, 
D
) \

561 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
B
, A) \

562 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
B
, B) \

563 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
B
, C) \

564 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
B
, 
D
) \

565 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, C, A) \

566 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, C, 
B
) \

567 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, C, C) \

568 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, C, 
D
) \

569 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
D
, A) \

570 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
D
, 
B
) \

571 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
D
, C) \

572 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
A
, 
D
, D) \

573 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
A
, A) \

574 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
A
, B) \

575 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
A
, C) \

576 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
A
, 
D
) \

577 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, B, 
A
) \

578 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, B, B) \

579 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, B, C) \

580 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, B, 
D
) \

581 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, C, 
A
) \

582 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, C, B) \

583 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, C, C) \

584 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, C, 
D
) \

585 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
D
, 
A
) \

586 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
D
, B) \

587 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
D
, C) \

588 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
B
, 
D
, D) \

589 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
A
, A) \

590 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
A
, 
B
) \

591 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
A
, C) \

592 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
A
, 
D
) \

593 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
B
, 
A
) \

594 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
B
, B) \

595 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
B
, C) \

596 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
B
, 
D
) \

597 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, C, 
A
) \

598 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, C, 
B
) \

599 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, C, C) \

600 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, C, 
D
) \

601 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
D
, 
A
) \

602 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
D
, 
B
) \

603 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
D
, C) \

604 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, C, 
D
, D) \

605 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, 
A
, A) \

606 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, 
A
, 
B
) \

607 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, 
A
, C) \

608 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, 
A
, D) \

609 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, 
B
, 
A
) \

610 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, 
B
, B) \

611 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, 
B
, C) \

612 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, 
B
, D) \

613 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, C, 
A
) \

614 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, C, 
B
) \

615 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, C, C) \

616 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, C, D) \

617 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, D, 
A
) \

618 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, D, 
B
) \

619 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, D, C) \

620 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
C
, 
D
, D, D) \

621 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, A, A) \

622 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, A, 
B
) \

623 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, A, 
C
) \

624 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, A, D) \

625 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, 
B
, A) \

626 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, 
B
, B) \

627 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, 
B
, 
C
) \

628 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, 
B
, D) \

629 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, 
C
, A) \

630 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, 
C
, 
B
) \

631 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, 
C
, C) \

632 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, 
C
, D) \

633 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, D, A) \

634 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, D, 
B
) \

635 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, D, 
C
) \

636 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
A
, D, D) \

637 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, 
A
, A) \

638 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, 
A
, B) \

639 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, 
A
, 
C
) \

640 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, 
A
, D) \

641 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, B, 
A
) \

642 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, B, B) \

643 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, B, 
C
) \

644 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, B, D) \

645 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, 
C
, 
A
) \

646 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, 
C
, B) \

647 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, 
C
, C) \

648 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, 
C
, D) \

649 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, D, 
A
) \

650 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, D, B) \

651 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, D, 
C
) \

652 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
B
, D, D) \

653 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, 
A
, A) \

654 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, 
A
, 
B
) \

655 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, 
A
, C) \

656 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, 
A
, D) \

657 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, 
B
, 
A
) \

658 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, 
B
, B) \

659 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, 
B
, C) \

660 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, 
B
, D) \

661 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, C, 
A
) \

662 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, C, 
B
) \

663 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, C, C) \

664 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, C, D) \

665 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, D, 
A
) \

666 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, D, 
B
) \

667 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, D, C) \

668 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, 
C
, D, D) \

669 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
A
, A) \

670 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
A
, 
B
) \

671 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
A
, 
C
) \

672 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
A
, D) \

673 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
B
, 
A
) \

674 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
B
, B) \

675 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
B
, 
C
) \

676 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
B
, D) \

677 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
C
, 
A
) \

678 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
C
, 
B
) \

679 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
C
, C) \

680 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, 
C
, D) \

681 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, D, 
A
) \

682 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, D, 
B
) \

683 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, D, 
C
) \

684 
	`GLM_SWIZZLE_GEN_VEC4_ENTRY
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_TYPE
, c⁄°, 
D
, D, D, D)

	)

686 
	#GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
A
, 
B
, 
C
, 
D
) \

687 
	`GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
A
, 
B
, 
C
, 
D
) \

688 
	`GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
A
, 
B
, 
C
, 
D
) \

689 
	`GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
A
, 
B
, 
C
, 
D
)

	)

691 
	#GLM_SWIZZLE_GEN_VEC_FROM_VEC4
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
) \

692 
	`GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
x
, 
y
, 
z
, 
w
) \

693 
	`GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
r
, 
g
, 
b
, 
a
) \

694 
	`GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP
(
TMPL_TYPE
, 
PRECISION
, 
CLASS_TYPE
, 
SWIZZLED_VEC2_TYPE
, 
SWIZZLED_VEC3_TYPE
, 
SWIZZLED_VEC4_TYPE
, 
s
, 
t
, 
p
, 
q
)

	)

	@glm/glm/detail/_vectorize.hpp

4 #¥agm®
⁄˚


6 
	~"ty≥_vec1.hµ
"

7 
	~"ty≥_vec2.hµ
"

8 
	~"ty≥_vec3.hµ
"

9 
	~"ty≥_vec4.hµ
"

11 
«me•a˚
 
	gglm
{

12 
«me•a˚
 
	gdëaû


14 
	gãm∂©e
 <
ty≥«me
 
	gR
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

15 
	sfun˘‹1
{};

17 
	gãm∂©e
 <
ty≥«me
 
	gR
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

18 
	gfun˘‹1
<
	gR
, 
	gT
, 
	gP
, 
	gtvec1
>

20 
GLM_FUNC_QUALIFIER
 
	gtvec1
<
	gR
, 
	gP
> 
ˇŒ
(
R
 (*
Func
Ë(
T
 
x
), 
tvec1
<T, 
P
> c⁄° & 
v
)

22  
	gtvec1
<
	gR
, 
	gP
>(
Func
(
v
.
x
));

26 
	gãm∂©e
 <
ty≥«me
 
	gR
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

27 
	gfun˘‹1
<
	gR
, 
	gT
, 
	gP
, 
	gtvec2
>

29 
GLM_FUNC_QUALIFIER
 
	gtvec2
<
	gR
, 
	gP
> 
ˇŒ
(
R
 (*
Func
Ë(
T
 
x
), 
tvec2
<T, 
P
> c⁄° & 
v
)

31  
	gtvec2
<
	gR
, 
	gP
>(
Func
(
v
.
x
), Func(v.
y
));

35 
	gãm∂©e
 <
ty≥«me
 
	gR
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

36 
	gfun˘‹1
<
	gR
, 
	gT
, 
	gP
, 
	gtvec3
>

38 
GLM_FUNC_QUALIFIER
 
	gtvec3
<
	gR
, 
	gP
> 
ˇŒ
(
R
 (*
Func
Ë(
T
 
x
), 
tvec3
<T, 
P
> c⁄° & 
v
)

40  
	gtvec3
<
	gR
, 
	gP
>(
Func
(
v
.
x
), Func(v.
y
), Func(v.
z
));

44 
	gãm∂©e
 <
ty≥«me
 
	gR
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

45 
	gfun˘‹1
<
	gR
, 
	gT
, 
	gP
, 
	gtvec4
>

47 
GLM_FUNC_QUALIFIER
 
	gtvec4
<
	gR
, 
	gP
> 
ˇŒ
(
R
 (*
Func
Ë(
T
 
x
), 
tvec4
<T, 
P
> c⁄° & 
v
)

49  
	gtvec4
<
	gR
, 
	gP
>(
Func
(
v
.
x
), Func(v.
y
), Func(v.
z
), Func(v.
w
));

53 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

54 
	sfun˘‹2
{};

56 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

57 
	gfun˘‹2
<
	gT
, 
	gP
, 
	gtvec1
>

59 
GLM_FUNC_QUALIFIER
 
	gtvec1
<
	gT
, 
	gP
> 
ˇŒ
(
T
 (*
Func
Ë(T 
x
, T 
y
), 
tvec1
<T, 
P
> c⁄° & 
a
,Åvec1<T, P> c⁄° & 
b
)

61  
	gtvec1
<
	gT
, 
	gP
>(
Func
(
a
.
x
, 
b
.x));

65 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

66 
	gfun˘‹2
<
	gT
, 
	gP
, 
	gtvec2
>

68 
GLM_FUNC_QUALIFIER
 
	gtvec2
<
	gT
, 
	gP
> 
ˇŒ
(
T
 (*
Func
Ë(T 
x
, T 
y
), 
tvec2
<T, 
P
> c⁄° & 
a
,Åvec2<T, P> c⁄° & 
b
)

70  
	gtvec2
<
	gT
, 
	gP
>(
Func
(
a
.
x
, 
b
.x), Func◊.
y
, b.y));

74 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

75 
	gfun˘‹2
<
	gT
, 
	gP
, 
	gtvec3
>

77 
GLM_FUNC_QUALIFIER
 
	gtvec3
<
	gT
, 
	gP
> 
ˇŒ
(
T
 (*
Func
Ë(T 
x
, T 
y
), 
tvec3
<T, 
P
> c⁄° & 
a
,Åvec3<T, P> c⁄° & 
b
)

79  
	gtvec3
<
	gT
, 
	gP
>(
Func
(
a
.
x
, 
b
.x), Func◊.
y
, b.y), Func◊.
z
, b.z));

83 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

84 
	gfun˘‹2
<
	gT
, 
	gP
, 
	gtvec4
>

86 
GLM_FUNC_QUALIFIER
 
	gtvec4
<
	gT
, 
	gP
> 
ˇŒ
(
T
 (*
Func
Ë(T 
x
, T 
y
), 
tvec4
<T, 
P
> c⁄° & 
a
,Åvec4<T, P> c⁄° & 
b
)

88  
	gtvec4
<
	gT
, 
	gP
>(
Func
(
a
.
x
, 
b
.x), Func◊.
y
, b.y), Func◊.
z
, b.z), Func◊.
w
, b.w));

92 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

93 
	sfun˘‹2_vec_sˇ
{};

95 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

96 
	gfun˘‹2_vec_sˇ
<
	gT
, 
	gP
, 
	gtvec1
>

98 
GLM_FUNC_QUALIFIER
 
	gtvec1
<
	gT
, 
	gP
> 
ˇŒ
(
T
 (*
Func
Ë(T 
x
, T 
y
), 
tvec1
<T, 
P
> c⁄° & 
a
, T 
b
)

100  
	gtvec1
<
	gT
, 
	gP
>(
Func
(
a
.
x
, 
b
));

104 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

105 
	gfun˘‹2_vec_sˇ
<
	gT
, 
	gP
, 
	gtvec2
>

107 
GLM_FUNC_QUALIFIER
 
	gtvec2
<
	gT
, 
	gP
> 
ˇŒ
(
T
 (*
Func
Ë(T 
x
, T 
y
), 
tvec2
<T, 
P
> c⁄° & 
a
, T 
b
)

109  
	gtvec2
<
	gT
, 
	gP
>(
Func
(
a
.
x
, 
b
), Func◊.
y
, b));

113 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

114 
	gfun˘‹2_vec_sˇ
<
	gT
, 
	gP
, 
	gtvec3
>

116 
GLM_FUNC_QUALIFIER
 
	gtvec3
<
	gT
, 
	gP
> 
ˇŒ
(
T
 (*
Func
Ë(T 
x
, T 
y
), 
tvec3
<T, 
P
> c⁄° & 
a
, T 
b
)

118  
	gtvec3
<
	gT
, 
	gP
>(
Func
(
a
.
x
, 
b
), Func◊.
y
, b), Func◊.
z
, b));

122 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

123 
	gfun˘‹2_vec_sˇ
<
	gT
, 
	gP
, 
	gtvec4
>

125 
GLM_FUNC_QUALIFIER
 
	gtvec4
<
	gT
, 
	gP
> 
ˇŒ
(
T
 (*
Func
Ë(T 
x
, T 
y
), 
tvec4
<T, 
P
> c⁄° & 
a
, T 
b
)

127  
	gtvec4
<
	gT
, 
	gP
>(
Func
(
a
.
x
, 
b
), Func◊.
y
, b), Func◊.
z
, b), Func◊.
w
, b));

	@glm/glm/detail/dummy.cpp

189 
	$maö
()

207 
	}
}

	@glm/glm/detail/func_common.hpp

11 #¥agm®
⁄˚


13 
	~"£tup.hµ
"

14 
	~"¥ecisi⁄.hµ
"

15 
	~"ty≥_öt.hµ
"

16 
	~"_fixes.hµ
"

18 
«me•a˚
 
	gglm


29 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

30 
GLM_FUNC_DECL
 
gíTy≥
 
abs
(gíTy≥ 
x
);

32 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

33 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
abs
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

41 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

42 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
sign
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

50 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

51 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
Êo‹
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

60 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

61 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
åunc
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

73 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

74 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
round
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

85 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

86 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
roundEví
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

95 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

96 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
˚û
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

104 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

105 
GLM_FUNC_DECL
 
gíTy≥
 
‰a˘
(gíTy≥ 
x
);

107 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

108 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
‰a˘
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

117 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

118 
GLM_FUNC_DECL
 
gíTy≥
 
mod
(gíTy≥ 
x
, gíTy≥ 
y
);

120 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

121 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
mod
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, T 
y
);

123 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

124 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
mod
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

135 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

136 
GLM_FUNC_DECL
 
gíTy≥
 
modf
(gíTy≥ 
x
, gíTy≥ & 
i
);

144 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

145 
GLM_FUNC_DECL
 
gíTy≥
 
mö
(gíTy≥ 
x
, gíTy≥ 
y
);

147 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

148 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
mö
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, T 
y
);

150 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

151 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
mö
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

159 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

160 
GLM_FUNC_DECL
 
gíTy≥
 
max
(gíTy≥ 
x
, gíTy≥ 
y
);

162 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

163 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
max
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, T 
y
);

165 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

166 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
max
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

175 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

176 
GLM_FUNC_DECL
 
gíTy≥
 
˛amp
(gíTy≥ 
x
, gíTy≥ 
möVÆ
, gíTy≥ 
maxVÆ
);

178 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

179 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
˛amp
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, T 
möVÆ
, T 
maxVÆ
);

181 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

182 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
˛amp
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
möVÆ
, vecTy≥<T, P> c⁄° & 
maxVÆ
);

226 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

227 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
mix
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
, vecTy≥<
U
, P> c⁄° & 
a
);

229 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

230 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
mix
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
, 
U
 
a
);

232 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥T
,Åy≥«mê
	ggíTy≥U
>

233 
GLM_FUNC_DECL
 
gíTy≥T
 
mix
(gíTy≥T 
x
, gíTy≥T 
y
, 
gíTy≥U
 
a
);

239 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

240 
GLM_FUNC_DECL
 
gíTy≥
 
°ï
(gíTy≥ 
edge
, gíTy≥ 
x
);

246 
	gãm∂©e
 <ãm∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

247 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
°ï
(
T
 
edge
, 
vecTy≥
<T, 
P
> c⁄° & 
x
);

253 
	gãm∂©e
 <ãm∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

254 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
°ï
(
vecTy≥
<
T
, 
P
> c⁄° & 
edge
, vecTy≥<T, P> c⁄° & 
x
);

270 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

271 
GLM_FUNC_DECL
 
gíTy≥
 
smoŸh°ï
(gíTy≥ 
edge0
, gíTy≥ 
edge1
, gíTy≥ 
x
);

273 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

274 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
smoŸh°ï
(
T
 
edge0
, T 
edge1
, 
vecTy≥
<T, 
P
> c⁄° & 
x
);

276 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

277 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
smoŸh°ï
(
vecTy≥
<
T
, 
P
> c⁄° & 
edge0
, vecTy≥<T, P> c⁄° & 
edge1
, vecTy≥<T, P> c⁄° & 
x
);

291 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

292 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
i¢™
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

304 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

305 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
isöf
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

313 
GLM_FUNC_DECL
 
ÊﬂtBôsToI¡
(c⁄° & 
v
);

321 
	gãm∂©e
 <ãm∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
¥ecisi⁄
 
	gP
>

322 
GLM_FUNC_DECL
 
	gvecTy≥
<, 
	gP
> 
ÊﬂtBôsToI¡
(
vecTy≥
<, 
P
> c⁄° & 
v
);

330 
GLM_FUNC_DECL
 
uöt
 
ÊﬂtBôsToUöt
(c⁄° & 
v
);

338 
	gãm∂©e
 <ãm∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
¥ecisi⁄
 
	gP
>

339 
GLM_FUNC_DECL
 
	gvecTy≥
<
	guöt
, 
	gP
> 
ÊﬂtBôsToUöt
(
vecTy≥
<, 
P
> c⁄° & 
v
);

349 
GLM_FUNC_DECL
 
ötBôsToFlﬂt
(c⁄° & 
v
);

359 
	gãm∂©e
 <ãm∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
¥ecisi⁄
 
	gP
>

360 
GLM_FUNC_DECL
 
	gvecTy≥
<, 
	gP
> 
ötBôsToFlﬂt
(
vecTy≥
<, 
P
> c⁄° & 
v
);

370 
GLM_FUNC_DECL
 
uötBôsToFlﬂt
(
uöt
 c⁄° & 
v
);

380 
	gãm∂©e
 <ãm∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
, 
¥ecisi⁄
 
	gP
>

381 
GLM_FUNC_DECL
 
	gvecTy≥
<, 
	gP
> 
uötBôsToFlﬂt
(
vecTy≥
<
uöt
, 
P
> c⁄° & 
v
);

389 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

390 
GLM_FUNC_DECL
 
gíTy≥
 
fma
(gíTy≥ c⁄° & 
a
, gíTy≥ c⁄° & 
b
, gíTy≥ c⁄° & 
c
);

406 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
,Åy≥«mê
	ggíITy≥
>

407 
GLM_FUNC_DECL
 
gíTy≥
 
‰exp
(gíTy≥ c⁄° & 
x
, 
gíITy≥
 & 
exp
);

420 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
,Åy≥«mê
	ggíITy≥
>

421 
GLM_FUNC_DECL
 
gíTy≥
 
ldexp
(gíTy≥ c⁄° & 
x
, 
gíITy≥
 c⁄° & 
exp
);

426 
	~"func_comm⁄.öl
"

	@glm/glm/detail/func_exponential.hpp

11 #¥agm®
⁄˚


13 
	~"ty≥_vec1.hµ
"

14 
	~"ty≥_vec2.hµ
"

15 
	~"ty≥_vec3.hµ
"

16 
	~"ty≥_vec4.hµ
"

17 
	~<cm©h
>

19 
«me•a˚
 
	gglm


32 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

33 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
pow
(
vecTy≥
<
T
, 
P
> c⁄° & 
ba£
, vecTy≥<T, P> c⁄° & 
exp⁄ít
);

42 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

43 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
exp
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
);

54 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

55 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
log
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
);

64 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

65 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
exp2
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
);

75 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

76 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
log2
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
);

87 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

88 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
sqπ
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
);

97 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

98 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
övî£sqπ
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
);

103 
	~"func_exp⁄ítül.öl
"

	@glm/glm/detail/func_geometric.hpp

11 #¥agm®
⁄˚


13 
	~"ty≥_vec3.hµ
"

15 
«me•a˚
 
	gglm


26 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

27 
GLM_FUNC_DECL
 
T
 
Àngth
(

28 
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

36 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

37 
GLM_FUNC_DECL
 
T
 
di°™˚
(

38 
vecTy≥
<
T
, 
P
> c⁄° & 
p0
,

39 
vecTy≥
<
T
, 
P
> c⁄° & 
p1
);

47 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

48 
GLM_FUNC_DECL
 
T
 
dŸ
(

49 
vecTy≥
<
T
, 
P
> c⁄° & 
x
,

50 
vecTy≥
<
T
, 
P
> c⁄° & 
y
);

58 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

59 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
¸oss
(

60 
tvec3
<
T
, 
P
> c⁄° & 
x
,

61 
tvec3
<
T
, 
P
> c⁄° & 
y
);

68 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

69 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
n‹mÆize
(

70 
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

78 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

79 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
Á˚f‹w¨d
(

80 
vecTy≥
<
T
, 
P
> c⁄° & 
N
,

81 
vecTy≥
<
T
, 
P
> c⁄° & 
I
,

82 
vecTy≥
<
T
, 
P
> c⁄° & 
Nªf
);

91 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

92 
GLM_FUNC_DECL
 
gíTy≥
 
ªÊe˘
(

93 
gíTy≥
 c⁄° & 
I
,

94 
gíTy≥
 c⁄° & 
N
);

104 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

105 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
ª‰a˘
(

106 
vecTy≥
<
T
, 
P
> c⁄° & 
I
,

107 
vecTy≥
<
T
, 
P
> c⁄° & 
N
,

108 
T
 
ëa
);

113 
	~"func_geomëric.öl
"

	@glm/glm/detail/func_integer.hpp

13 #¥agm®
⁄˚


15 
	~"£tup.hµ
"

16 
	~"¥ecisi⁄.hµ
"

17 
	~"func_comm⁄.hµ
"

18 
	~"func_ve˘‹_ªœti⁄Æ.hµ
"

20 
«me•a˚
 
	gglm


33 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

34 
GLM_FUNC_DECL
 
	gvecTy≥
<
	guöt
, 
	gP
> 
uaddC¨ry
(

35 
vecTy≥
<
uöt
, 
P
> c⁄° & 
x
,

36 
vecTy≥
<
uöt
, 
P
> c⁄° & 
y
,

37 
vecTy≥
<
uöt
, 
P
> & 
ˇºy
);

47 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

48 
GLM_FUNC_DECL
 
	gvecTy≥
<
	guöt
, 
	gP
> 
usubB‹row
(

49 
vecTy≥
<
uöt
, 
P
> c⁄° & 
x
,

50 
vecTy≥
<
uöt
, 
P
> c⁄° & 
y
,

51 
vecTy≥
<
uöt
, 
P
> & 
b‹row
);

61 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

62 
GLM_FUNC_DECL
 
umulExãnded
(

63 
vecTy≥
<
uöt
, 
P
> c⁄° & 
x
,

64 
vecTy≥
<
uöt
, 
P
> c⁄° & 
y
,

65 
vecTy≥
<
uöt
, 
P
> & 
msb
,

66 
vecTy≥
<
uöt
, 
P
> & 
lsb
);

76 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

77 
GLM_FUNC_DECL
 
imulExãnded
(

78 
vecTy≥
<, 
P
> c⁄° & 
x
,

79 
vecTy≥
<, 
P
> c⁄° & 
y
,

80 
vecTy≥
<, 
P
> & 
msb
,

81 
vecTy≥
<, 
P
> & 
lsb
);

98 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

99 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
bôfõldExåa˘
(

100 
vecTy≥
<
T
, 
P
> c⁄° & 
VÆue
,

101 
Off£t
,

102 
Bôs
);

118 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

119 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
bôfõldIn£π
(

120 
vecTy≥
<
T
, 
P
> c⁄° & 
Ba£
,

121 
vecTy≥
<
T
, 
P
> c⁄° & 
In£π
,

122 
Off£t
,

123 
Bôs
);

133 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

134 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
bôfõldRevî£
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
);

142 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

143 
GLM_FUNC_DECL
 
bôCou¡
(
gíTy≥
 
v
);

151 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

152 
GLM_FUNC_DECL
 
	gvecTy≥
<, 
	gP
> 
bôCou¡
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
);

162 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

163 
GLM_FUNC_DECL
 
födLSB
(
gíIUTy≥
 
x
);

173 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

174 
GLM_FUNC_DECL
 
	gvecTy≥
<, 
	gP
> 
födLSB
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
);

185 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

186 
GLM_FUNC_DECL
 
födMSB
(
gíIUTy≥
 
x
);

197 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

198 
GLM_FUNC_DECL
 
	gvecTy≥
<, 
	gP
> 
födMSB
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
);

203 
	~"func_öãgî.öl
"

	@glm/glm/detail/func_matrix.hpp

15 #¥agm®
⁄˚


18 
	~"../dëaû/¥ecisi⁄.hµ
"

19 
	~"../dëaû/£tup.hµ
"

20 
	~"../dëaû/ty≥_m©.hµ
"

21 
	~"../vec2.hµ
"

22 
	~"../vec3.hµ
"

23 
	~"../vec4.hµ
"

24 
	~"../m©2x2.hµ
"

25 
	~"../m©2x3.hµ
"

26 
	~"../m©2x4.hµ
"

27 
	~"../m©3x2.hµ
"

28 
	~"../m©3x3.hµ
"

29 
	~"../m©3x4.hµ
"

30 
	~"../m©4x2.hµ
"

31 
	~"../m©4x3.hµ
"

32 
	~"../m©4x4.hµ
"

34 
«me•a˚
 
	gglm
{

35 
«me•a˚
 
	gdëaû


37 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

38 
	gouãrProdu˘_åaô
<
	gT
, 
	gP
, 
	gtvec2
,Åvec2>

40 
	gtm©2x2
<
	tT
, 
	tP
> 
	tty≥
;

43 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

44 
	gouãrProdu˘_åaô
<
	gT
, 
	gP
, 
	gtvec2
, 
	gtvec3
>

46 
	gtm©3x2
<
	tT
, 
	tP
> 
	tty≥
;

49 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

50 
	gouãrProdu˘_åaô
<
	gT
, 
	gP
, 
	gtvec2
, 
	gtvec4
>

52 
	gtm©4x2
<
	tT
, 
	tP
> 
	tty≥
;

55 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

56 
	gouãrProdu˘_åaô
<
	gT
, 
	gP
, 
	gtvec3
, 
	gtvec2
>

58 
	gtm©2x3
<
	tT
, 
	tP
> 
	tty≥
;

61 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

62 
	gouãrProdu˘_åaô
<
	gT
, 
	gP
, 
	gtvec3
,Åvec3>

64 
	gtm©3x3
<
	tT
, 
	tP
> 
	tty≥
;

67 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

68 
	gouãrProdu˘_åaô
<
	gT
, 
	gP
, 
	gtvec3
, 
	gtvec4
>

70 
	gtm©4x3
<
	tT
, 
	tP
> 
	tty≥
;

73 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

74 
	gouãrProdu˘_åaô
<
	gT
, 
	gP
, 
	gtvec4
, 
	gtvec2
>

76 
	gtm©2x4
<
	tT
, 
	tP
> 
	tty≥
;

79 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

80 
	gouãrProdu˘_åaô
<
	gT
, 
	gP
, 
	gtvec4
, 
	gtvec3
>

82 
	gtm©3x4
<
	tT
, 
	tP
> 
	tty≥
;

85 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

86 
	gouãrProdu˘_åaô
<
	gT
, 
	gP
, 
	gtvec4
,Åvec4>

88 
	gtm©4x4
<
	tT
, 
	tP
> 
	tty≥
;

103 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gm©Ty≥
>

104 
GLM_FUNC_DECL
 
	gm©Ty≥
<
	gT
, 
	gP
> 
m©rixCompMu…
(
m©Ty≥
<
T
, 
P
> c⁄° & 
x
, m©Ty≥<T, P> c⁄° & 
y
);

114 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥A
,Åem∂©ê<ty≥«me,Öªcisi⁄> cœs†
	gvecTy≥B
>

115 
GLM_FUNC_DECL
 
ty≥«me
 
	gdëaû
::
ouãrProdu˘_åaô
<
T
, 
	gP
, 
	gvecTy≥A
, 
	gvecTy≥B
>::
ty≥
 
ouãrProdu˘
(
vecTy≥A
<T, 
P
> c⁄° & 
c
, 
vecTy≥B
<T, P> c⁄° & 
r
);

123 #if((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC11
))

124 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gm©Ty≥
>

125 
GLM_FUNC_DECL
 
ty≥«me
 
	gm©Ty≥
<
	gT
, 
	gP
>::
å™•o£_ty≥
 
å™•o£
(
m©Ty≥
<
T
, 
P
> c⁄° & 
x
);

134 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gm©Ty≥
>

135 
GLM_FUNC_DECL
 
T
 
dëîmö™t
(
m©Ty≥
<T, 
P
> c⁄° & 
m
);

143 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gm©Ty≥
>

144 
GLM_FUNC_DECL
 
	gm©Ty≥
<
	gT
, 
	gP
> 
övî£
(
m©Ty≥
<
T
, 
P
> c⁄° & 
m
);

149 
	~"func_m©rix.öl
"

	@glm/glm/detail/func_packing.hpp

12 #¥agm®
⁄˚


14 
	~"ty≥_vec2.hµ
"

15 
	~"ty≥_vec4.hµ
"

17 
«me•a˚
 
	gglm


33 
GLM_FUNC_DECL
 
uöt
 
∑ckUn‹m2x16
(
vec2
 c⁄° & 
v
);

46 
GLM_FUNC_DECL
 
uöt
 
∑ckSn‹m2x16
(
vec2
 c⁄° & 
v
);

59 
GLM_FUNC_DECL
 
uöt
 
∑ckUn‹m4x8
(
vec4
 c⁄° & 
v
);

72 
GLM_FUNC_DECL
 
uöt
 
∑ckSn‹m4x8
(
vec4
 c⁄° & 
v
);

85 
GLM_FUNC_DECL
 
vec2
 
u≈ackUn‹m2x16
(
uöt
 
p
);

98 
GLM_FUNC_DECL
 
vec2
 
u≈ackSn‹m2x16
(
uöt
 
p
);

111 
GLM_FUNC_DECL
 
vec4
 
u≈ackUn‹m4x8
(
uöt
 
p
);

124 
GLM_FUNC_DECL
 
vec4
 
u≈ackSn‹m4x8
(
uöt
 
p
);

134 
GLM_FUNC_DECL
 
∑ckDoubÀ2x32
(
uvec2
 c⁄° & 
v
);

143 
GLM_FUNC_DECL
 
uvec2
 
u≈ackDoubÀ2x32
(
v
);

153 
GLM_FUNC_DECL
 
uöt
 
∑ckHÆf2x16
(
vec2
 c⁄° & 
v
);

163 
GLM_FUNC_DECL
 
vec2
 
u≈ackHÆf2x16
(
uöt
 
v
);

168 
	~"func_∑ckög.öl
"

	@glm/glm/detail/func_trigonometric.hpp

15 #¥agm®
⁄˚


17 
	~"£tup.hµ
"

18 
	~"¥ecisi⁄.hµ
"

20 
«me•a˚
 
	gglm


31 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

32 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
	gvecTy≥
<
	gT
, 
	gP
> 
ødüns
(
vecTy≥
<
T
, 
P
> c⁄° & 
degªes
);

40 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

41 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
	gvecTy≥
<
	gT
, 
	gP
> 
degªes
(
vecTy≥
<
T
, 
P
> c⁄° & 
ødüns
);

50 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

51 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
sö
(
vecTy≥
<
T
, 
P
> c⁄° & 
™gÀ
);

60 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

61 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
cos
(
vecTy≥
<
T
, 
P
> c⁄° & 
™gÀ
);

69 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

70 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
èn
(
vecTy≥
<
T
, 
P
> c⁄° & 
™gÀ
);

80 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

81 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
asö
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

91 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

92 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
acos
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

104 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

105 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
©™
(
vecTy≥
<
T
, 
P
> c⁄° & 
y
, vecTy≥<T, P> c⁄° & 
x
);

114 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

115 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
©™
(
vecTy≥
<
T
, 
P
> c⁄° & 
y_ovî_x
);

123 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

124 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
söh
(
vecTy≥
<
T
, 
P
> c⁄° & 
™gÀ
);

132 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

133 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
cosh
(
vecTy≥
<
T
, 
P
> c⁄° & 
™gÀ
);

141 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

142 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
ènh
(
vecTy≥
<
T
, 
P
> c⁄° & 
™gÀ
);

150 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

151 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
asöh
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

160 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

161 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
acosh
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

170 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

171 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
©™h
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

176 
	~"func_åig⁄omëric.öl
"

	@glm/glm/detail/func_vector_relational.hpp

16 #¥agm®
⁄˚


18 
	~"¥ecisi⁄.hµ
"

19 
	~"£tup.hµ
"

21 
«me•a˚
 
	gglm


32 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

33 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
ÀssTh™
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

41 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

42 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
ÀssTh™EquÆ
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

50 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

51 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
gª©îTh™
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

59 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

60 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
gª©îTh™EquÆ
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

68 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

69 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
equÆ
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

77 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

78 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
nŸEquÆ
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

86 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

87 
GLM_FUNC_DECL
 
boﬁ
 
™y
(
vecTy≥
<boﬁ, 
P
> c⁄° & 
v
);

95 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

96 
GLM_FUNC_DECL
 
boﬁ
 
Æl
(
vecTy≥
<boﬁ, 
P
> c⁄° & 
v
);

105 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

106 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
nŸ_
(
vecTy≥
<
boﬁ
, 
P
> c⁄° & 
v
);

111 
	~"func_ve˘‹_ªœti⁄Æ.öl
"

	@glm/glm/detail/glm.cpp

4 
	~<glm/glm.hµ
>

5 
	~<glm/gtc/qu©îni⁄.hµ
>

6 
	~<glm/gtx/duÆ_qu©îni⁄.hµ
>

8 
«me•a˚
 
	gglm


11 
ãm∂©e
 
	gtvec1
<
	guöt8
, 
	glowp
>;

12 
ãm∂©e
 
	gtvec1
<
	guöt16
, 
	glowp
>;

13 
ãm∂©e
 
	gtvec1
<
	guöt32
, 
	glowp
>;

14 
ãm∂©e
 
	gtvec1
<
	guöt64
, 
	glowp
>;

15 
ãm∂©e
 
	gtvec1
<
	göt8
, 
	glowp
>;

16 
ãm∂©e
 
	gtvec1
<
	göt16
, 
	glowp
>;

17 
ãm∂©e
 
	gtvec1
<
	göt32
, 
	glowp
>;

18 
ãm∂©e
 
	gtvec1
<
	göt64
, 
	glowp
>;

19 
ãm∂©e
 
	gtvec1
<
	gÊﬂt32
, 
	glowp
>;

20 
ãm∂©e
 
	gtvec1
<
	gÊﬂt64
, 
	glowp
>;

22 
ãm∂©e
 
	gtvec1
<
	guöt8
, 
	gmediump
>;

23 
ãm∂©e
 
	gtvec1
<
	guöt16
, 
	gmediump
>;

24 
ãm∂©e
 
	gtvec1
<
	guöt32
, 
	gmediump
>;

25 
ãm∂©e
 
	gtvec1
<
	guöt64
, 
	gmediump
>;

26 
ãm∂©e
 
	gtvec1
<
	göt8
, 
	gmediump
>;

27 
ãm∂©e
 
	gtvec1
<
	göt16
, 
	gmediump
>;

28 
ãm∂©e
 
	gtvec1
<
	göt32
, 
	gmediump
>;

29 
ãm∂©e
 
	gtvec1
<
	göt64
, 
	gmediump
>;

30 
ãm∂©e
 
	gtvec1
<
	gÊﬂt32
, 
	gmediump
>;

31 
ãm∂©e
 
	gtvec1
<
	gÊﬂt64
, 
	gmediump
>;

33 
ãm∂©e
 
	gtvec1
<
	guöt8
, 
	ghighp
>;

34 
ãm∂©e
 
	gtvec1
<
	guöt16
, 
	ghighp
>;

35 
ãm∂©e
 
	gtvec1
<
	guöt32
, 
	ghighp
>;

36 
ãm∂©e
 
	gtvec1
<
	guöt64
, 
	ghighp
>;

37 
ãm∂©e
 
	gtvec1
<
	göt8
, 
	ghighp
>;

38 
ãm∂©e
 
	gtvec1
<
	göt16
, 
	ghighp
>;

39 
ãm∂©e
 
	gtvec1
<
	göt32
, 
	ghighp
>;

40 
ãm∂©e
 
	gtvec1
<
	göt64
, 
	ghighp
>;

41 
ãm∂©e
 
	gtvec1
<
	gÊﬂt32
, 
	ghighp
>;

42 
ãm∂©e
 
	gtvec1
<
	gÊﬂt64
, 
	ghighp
>;

45 
ãm∂©e
 
	gtvec2
<
	guöt8
, 
	glowp
>;

46 
ãm∂©e
 
	gtvec2
<
	guöt16
, 
	glowp
>;

47 
ãm∂©e
 
	gtvec2
<
	guöt32
, 
	glowp
>;

48 
ãm∂©e
 
	gtvec2
<
	guöt64
, 
	glowp
>;

49 
ãm∂©e
 
	gtvec2
<
	göt8
, 
	glowp
>;

50 
ãm∂©e
 
	gtvec2
<
	göt16
, 
	glowp
>;

51 
ãm∂©e
 
	gtvec2
<
	göt32
, 
	glowp
>;

52 
ãm∂©e
 
	gtvec2
<
	göt64
, 
	glowp
>;

53 
ãm∂©e
 
	gtvec2
<
	gÊﬂt32
, 
	glowp
>;

54 
ãm∂©e
 
	gtvec2
<
	gÊﬂt64
, 
	glowp
>;

56 
ãm∂©e
 
	gtvec2
<
	guöt8
, 
	gmediump
>;

57 
ãm∂©e
 
	gtvec2
<
	guöt16
, 
	gmediump
>;

58 
ãm∂©e
 
	gtvec2
<
	guöt32
, 
	gmediump
>;

59 
ãm∂©e
 
	gtvec2
<
	guöt64
, 
	gmediump
>;

60 
ãm∂©e
 
	gtvec2
<
	göt8
, 
	gmediump
>;

61 
ãm∂©e
 
	gtvec2
<
	göt16
, 
	gmediump
>;

62 
ãm∂©e
 
	gtvec2
<
	göt32
, 
	gmediump
>;

63 
ãm∂©e
 
	gtvec2
<
	göt64
, 
	gmediump
>;

64 
ãm∂©e
 
	gtvec2
<
	gÊﬂt32
, 
	gmediump
>;

65 
ãm∂©e
 
	gtvec2
<
	gÊﬂt64
, 
	gmediump
>;

67 
ãm∂©e
 
	gtvec2
<
	guöt8
, 
	ghighp
>;

68 
ãm∂©e
 
	gtvec2
<
	guöt16
, 
	ghighp
>;

69 
ãm∂©e
 
	gtvec2
<
	guöt32
, 
	ghighp
>;

70 
ãm∂©e
 
	gtvec2
<
	guöt64
, 
	ghighp
>;

71 
ãm∂©e
 
	gtvec2
<
	göt8
, 
	ghighp
>;

72 
ãm∂©e
 
	gtvec2
<
	göt16
, 
	ghighp
>;

73 
ãm∂©e
 
	gtvec2
<
	göt32
, 
	ghighp
>;

74 
ãm∂©e
 
	gtvec2
<
	göt64
, 
	ghighp
>;

75 
ãm∂©e
 
	gtvec2
<
	gÊﬂt32
, 
	ghighp
>;

76 
ãm∂©e
 
	gtvec2
<
	gÊﬂt64
, 
	ghighp
>;

79 
ãm∂©e
 
	gtvec3
<
	guöt8
, 
	glowp
>;

80 
ãm∂©e
 
	gtvec3
<
	guöt16
, 
	glowp
>;

81 
ãm∂©e
 
	gtvec3
<
	guöt32
, 
	glowp
>;

82 
ãm∂©e
 
	gtvec3
<
	guöt64
, 
	glowp
>;

83 
ãm∂©e
 
	gtvec3
<
	göt8
, 
	glowp
>;

84 
ãm∂©e
 
	gtvec3
<
	göt16
, 
	glowp
>;

85 
ãm∂©e
 
	gtvec3
<
	göt32
, 
	glowp
>;

86 
ãm∂©e
 
	gtvec3
<
	göt64
, 
	glowp
>;

87 
ãm∂©e
 
	gtvec3
<
	gÊﬂt32
, 
	glowp
>;

88 
ãm∂©e
 
	gtvec3
<
	gÊﬂt64
, 
	glowp
>;

90 
ãm∂©e
 
	gtvec3
<
	guöt8
, 
	gmediump
>;

91 
ãm∂©e
 
	gtvec3
<
	guöt16
, 
	gmediump
>;

92 
ãm∂©e
 
	gtvec3
<
	guöt32
, 
	gmediump
>;

93 
ãm∂©e
 
	gtvec3
<
	guöt64
, 
	gmediump
>;

94 
ãm∂©e
 
	gtvec3
<
	göt8
, 
	gmediump
>;

95 
ãm∂©e
 
	gtvec3
<
	göt16
, 
	gmediump
>;

96 
ãm∂©e
 
	gtvec3
<
	göt32
, 
	gmediump
>;

97 
ãm∂©e
 
	gtvec3
<
	göt64
, 
	gmediump
>;

98 
ãm∂©e
 
	gtvec3
<
	gÊﬂt32
, 
	gmediump
>;

99 
ãm∂©e
 
	gtvec3
<
	gÊﬂt64
, 
	gmediump
>;

101 
ãm∂©e
 
	gtvec3
<
	guöt8
, 
	ghighp
>;

102 
ãm∂©e
 
	gtvec3
<
	guöt16
, 
	ghighp
>;

103 
ãm∂©e
 
	gtvec3
<
	guöt32
, 
	ghighp
>;

104 
ãm∂©e
 
	gtvec3
<
	guöt64
, 
	ghighp
>;

105 
ãm∂©e
 
	gtvec3
<
	göt8
, 
	ghighp
>;

106 
ãm∂©e
 
	gtvec3
<
	göt16
, 
	ghighp
>;

107 
ãm∂©e
 
	gtvec3
<
	göt32
, 
	ghighp
>;

108 
ãm∂©e
 
	gtvec3
<
	göt64
, 
	ghighp
>;

109 
ãm∂©e
 
	gtvec3
<
	gÊﬂt32
, 
	ghighp
>;

110 
ãm∂©e
 
	gtvec3
<
	gÊﬂt64
, 
	ghighp
>;

113 
ãm∂©e
 
	gtvec4
<
	guöt8
, 
	glowp
>;

114 
ãm∂©e
 
	gtvec4
<
	guöt16
, 
	glowp
>;

115 
ãm∂©e
 
	gtvec4
<
	guöt32
, 
	glowp
>;

116 
ãm∂©e
 
	gtvec4
<
	guöt64
, 
	glowp
>;

117 
ãm∂©e
 
	gtvec4
<
	göt8
, 
	glowp
>;

118 
ãm∂©e
 
	gtvec4
<
	göt16
, 
	glowp
>;

119 
ãm∂©e
 
	gtvec4
<
	göt32
, 
	glowp
>;

120 
ãm∂©e
 
	gtvec4
<
	göt64
, 
	glowp
>;

121 
ãm∂©e
 
	gtvec4
<
	gÊﬂt32
, 
	glowp
>;

122 
ãm∂©e
 
	gtvec4
<
	gÊﬂt64
, 
	glowp
>;

124 
ãm∂©e
 
	gtvec4
<
	guöt8
, 
	gmediump
>;

125 
ãm∂©e
 
	gtvec4
<
	guöt16
, 
	gmediump
>;

126 
ãm∂©e
 
	gtvec4
<
	guöt32
, 
	gmediump
>;

127 
ãm∂©e
 
	gtvec4
<
	guöt64
, 
	gmediump
>;

128 
ãm∂©e
 
	gtvec4
<
	göt8
, 
	gmediump
>;

129 
ãm∂©e
 
	gtvec4
<
	göt16
, 
	gmediump
>;

130 
ãm∂©e
 
	gtvec4
<
	göt32
, 
	gmediump
>;

131 
ãm∂©e
 
	gtvec4
<
	göt64
, 
	gmediump
>;

132 
ãm∂©e
 
	gtvec4
<
	gÊﬂt32
, 
	gmediump
>;

133 
ãm∂©e
 
	gtvec4
<
	gÊﬂt64
, 
	gmediump
>;

135 
ãm∂©e
 
	gtvec4
<
	guöt8
, 
	ghighp
>;

136 
ãm∂©e
 
	gtvec4
<
	guöt16
, 
	ghighp
>;

137 
ãm∂©e
 
	gtvec4
<
	guöt32
, 
	ghighp
>;

138 
ãm∂©e
 
	gtvec4
<
	guöt64
, 
	ghighp
>;

139 
ãm∂©e
 
	gtvec4
<
	göt8
, 
	ghighp
>;

140 
ãm∂©e
 
	gtvec4
<
	göt16
, 
	ghighp
>;

141 
ãm∂©e
 
	gtvec4
<
	göt32
, 
	ghighp
>;

142 
ãm∂©e
 
	gtvec4
<
	göt64
, 
	ghighp
>;

143 
ãm∂©e
 
	gtvec4
<
	gÊﬂt32
, 
	ghighp
>;

144 
ãm∂©e
 
	gtvec4
<
	gÊﬂt64
, 
	ghighp
>;

147 
ãm∂©e
 
	gtm©2x2
<
	gÊﬂt32
, 
	glowp
>;

148 
ãm∂©e
 
	gtm©2x2
<
	gÊﬂt64
, 
	glowp
>;

150 
ãm∂©e
 
	gtm©2x2
<
	gÊﬂt32
, 
	gmediump
>;

151 
ãm∂©e
 
	gtm©2x2
<
	gÊﬂt64
, 
	gmediump
>;

153 
ãm∂©e
 
	gtm©2x2
<
	gÊﬂt32
, 
	ghighp
>;

154 
ãm∂©e
 
	gtm©2x2
<
	gÊﬂt64
, 
	ghighp
>;

157 
ãm∂©e
 
	gtm©2x3
<
	gÊﬂt32
, 
	glowp
>;

158 
ãm∂©e
 
	gtm©2x3
<
	gÊﬂt64
, 
	glowp
>;

160 
ãm∂©e
 
	gtm©2x3
<
	gÊﬂt32
, 
	gmediump
>;

161 
ãm∂©e
 
	gtm©2x3
<
	gÊﬂt64
, 
	gmediump
>;

163 
ãm∂©e
 
	gtm©2x3
<
	gÊﬂt32
, 
	ghighp
>;

164 
ãm∂©e
 
	gtm©2x3
<
	gÊﬂt64
, 
	ghighp
>;

167 
ãm∂©e
 
	gtm©2x4
<
	gÊﬂt32
, 
	glowp
>;

168 
ãm∂©e
 
	gtm©2x4
<
	gÊﬂt64
, 
	glowp
>;

170 
ãm∂©e
 
	gtm©2x4
<
	gÊﬂt32
, 
	gmediump
>;

171 
ãm∂©e
 
	gtm©2x4
<
	gÊﬂt64
, 
	gmediump
>;

173 
ãm∂©e
 
	gtm©2x4
<
	gÊﬂt32
, 
	ghighp
>;

174 
ãm∂©e
 
	gtm©2x4
<
	gÊﬂt64
, 
	ghighp
>;

177 
ãm∂©e
 
	gtm©3x2
<
	gÊﬂt32
, 
	glowp
>;

178 
ãm∂©e
 
	gtm©3x2
<
	gÊﬂt64
, 
	glowp
>;

180 
ãm∂©e
 
	gtm©3x2
<
	gÊﬂt32
, 
	gmediump
>;

181 
ãm∂©e
 
	gtm©3x2
<
	gÊﬂt64
, 
	gmediump
>;

183 
ãm∂©e
 
	gtm©3x2
<
	gÊﬂt32
, 
	ghighp
>;

184 
ãm∂©e
 
	gtm©3x2
<
	gÊﬂt64
, 
	ghighp
>;

187 
ãm∂©e
 
	gtm©3x3
<
	gÊﬂt32
, 
	glowp
>;

188 
ãm∂©e
 
	gtm©3x3
<
	gÊﬂt64
, 
	glowp
>;

190 
ãm∂©e
 
	gtm©3x3
<
	gÊﬂt32
, 
	gmediump
>;

191 
ãm∂©e
 
	gtm©3x3
<
	gÊﬂt64
, 
	gmediump
>;

193 
ãm∂©e
 
	gtm©3x3
<
	gÊﬂt32
, 
	ghighp
>;

194 
ãm∂©e
 
	gtm©3x3
<
	gÊﬂt64
, 
	ghighp
>;

197 
ãm∂©e
 
	gtm©3x4
<
	gÊﬂt32
, 
	glowp
>;

198 
ãm∂©e
 
	gtm©3x4
<
	gÊﬂt64
, 
	glowp
>;

200 
ãm∂©e
 
	gtm©3x4
<
	gÊﬂt32
, 
	gmediump
>;

201 
ãm∂©e
 
	gtm©3x4
<
	gÊﬂt64
, 
	gmediump
>;

203 
ãm∂©e
 
	gtm©3x4
<
	gÊﬂt32
, 
	ghighp
>;

204 
ãm∂©e
 
	gtm©3x4
<
	gÊﬂt64
, 
	ghighp
>;

207 
ãm∂©e
 
	gtm©4x2
<
	gÊﬂt32
, 
	glowp
>;

208 
ãm∂©e
 
	gtm©4x2
<
	gÊﬂt64
, 
	glowp
>;

210 
ãm∂©e
 
	gtm©4x2
<
	gÊﬂt32
, 
	gmediump
>;

211 
ãm∂©e
 
	gtm©4x2
<
	gÊﬂt64
, 
	gmediump
>;

213 
ãm∂©e
 
	gtm©4x2
<
	gÊﬂt32
, 
	ghighp
>;

214 
ãm∂©e
 
	gtm©4x2
<
	gÊﬂt64
, 
	ghighp
>;

217 
ãm∂©e
 
	gtm©4x3
<
	gÊﬂt32
, 
	glowp
>;

218 
ãm∂©e
 
	gtm©4x3
<
	gÊﬂt64
, 
	glowp
>;

220 
ãm∂©e
 
	gtm©4x3
<
	gÊﬂt32
, 
	gmediump
>;

221 
ãm∂©e
 
	gtm©4x3
<
	gÊﬂt64
, 
	gmediump
>;

223 
ãm∂©e
 
	gtm©4x3
<
	gÊﬂt32
, 
	ghighp
>;

224 
ãm∂©e
 
	gtm©4x3
<
	gÊﬂt64
, 
	ghighp
>;

227 
ãm∂©e
 
	gtm©4x4
<
	gÊﬂt32
, 
	glowp
>;

228 
ãm∂©e
 
	gtm©4x4
<
	gÊﬂt64
, 
	glowp
>;

230 
ãm∂©e
 
	gtm©4x4
<
	gÊﬂt32
, 
	gmediump
>;

231 
ãm∂©e
 
	gtm©4x4
<
	gÊﬂt64
, 
	gmediump
>;

233 
ãm∂©e
 
	gtm©4x4
<
	gÊﬂt32
, 
	ghighp
>;

234 
ãm∂©e
 
	gtm©4x4
<
	gÊﬂt64
, 
	ghighp
>;

237 
ãm∂©e
 
	gtqu©
<
	gÊﬂt32
, 
	glowp
>;

238 
ãm∂©e
 
	gtqu©
<
	gÊﬂt64
, 
	glowp
>;

240 
ãm∂©e
 
	gtqu©
<
	gÊﬂt32
, 
	gmediump
>;

241 
ãm∂©e
 
	gtqu©
<
	gÊﬂt64
, 
	gmediump
>;

243 
ãm∂©e
 
	gtqu©
<
	gÊﬂt32
, 
	ghighp
>;

244 
ãm∂©e
 
	gtqu©
<
	gÊﬂt64
, 
	ghighp
>;

247 
ãm∂©e
 
	gtduÆqu©
<
	gÊﬂt32
, 
	glowp
>;

248 
ãm∂©e
 
	gtduÆqu©
<
	gÊﬂt64
, 
	glowp
>;

250 
ãm∂©e
 
	gtduÆqu©
<
	gÊﬂt32
, 
	gmediump
>;

251 
ãm∂©e
 
	gtduÆqu©
<
	gÊﬂt64
, 
	gmediump
>;

253 
ãm∂©e
 
	gtduÆqu©
<
	gÊﬂt32
, 
	ghighp
>;

254 
ãm∂©e
 
	gtduÆqu©
<
	gÊﬂt64
, 
	ghighp
>;

	@glm/glm/detail/precision.hpp

4 #¥agm®
⁄˚


6 
	~"£tup.hµ
"

8 
«me•a˚
 
	gglm


10 
	e¥ecisi⁄


12 
	g∑cked_highp
,

13 
	g∑cked_mediump
,

14 
	g∑cked_lowp
,

16 #i‡
GLM_HAS_ALIGNED_TYPE


17 
	gÆig√d_highp
,

18 
	gÆig√d_mediump
,

19 
	gÆig√d_lowp
,

20 
	gÆig√d
 = 
Æig√d_highp
,

23 
	ghighp
 = 
∑cked_highp
,

24 
	gmediump
 = 
∑cked_mediump
,

25 
	glowp
 = 
∑cked_lowp
,

26 
	g∑cked
 = 
∑cked_highp
,

28 #i‡
GLM_HAS_ALIGNED_TYPE
 && 
deföed
(
GLM_FORCE_ALIGNED
)

29 
	gdeÁu…p
 = 
Æig√d_highp


31 
deÁu…p
 = 
highp


35 
«me•a˚
 
	gdëaû


37 
	gãm∂©e
 <
	gglm
::
¥ecisi⁄
 
P
>

38 
	sis_Æig√d


40 c⁄° 
boﬁ
 
vÆue
 = 
Ál£
;

43 #i‡
GLM_HAS_ALIGNED_TYPE


44 
	gãm∂©e
<>

45 
	gis_Æig√d
<
	gglm
::
Æig√d_lowp
>

47 c⁄° 
boﬁ
 
vÆue
 = 
åue
;

50 
	gãm∂©e
<>

51 
	gis_Æig√d
<
	gglm
::
Æig√d_mediump
>

53 c⁄° 
boﬁ
 
vÆue
 = 
åue
;

56 
	gãm∂©e
<>

57 
	gis_Æig√d
<
	gglm
::
Æig√d_highp
>

59 c⁄° 
boﬁ
 
vÆue
 = 
åue
;

	@glm/glm/detail/setup.hpp

4 #¥agm®
⁄˚


6 #i‡(
deföed
(
GLM_FORCE_SWIZZLE
Ë|| deföed(
GLM_SWIZZLE
)Ë&& deföed(
GLM_FORCE_UNRESTRICTED_GENTYPE
)

13 #ifde‡
GLM_MESSAGES


14 #¥agm®
mesßge
("GLM: GLM_MESSAGES is deprecated, use GLM_FORCE_MESSAGES instead")

17 
	#GLM_MESSAGES_ENABLED
 1

	)

18 
	#GLM_MESSAGES_DISABLE
 0

	)

20 #i‡
deföed
(
GLM_FORCE_MESSAGES
Ë|| deföed(
GLM_MESSAGES
)

21 #unde‡
GLM_MESSAGES


22 
	#GLM_MESSAGES
 
GLM_MESSAGES_ENABLED


	)

24 #unde‡
GLM_MESSAGES


25 
	#GLM_MESSAGES
 
GLM_MESSAGES_DISABLE


	)

28 
	~<ˇs£π
>

29 
	~<c°ddef
>

30 
	~"../simd/∂©f‹m.h
"

35 
	#GLM_VERSION
 98

	)

36 
	#GLM_VERSION_MAJOR
 0

	)

37 
	#GLM_VERSION_MINOR
 9

	)

38 
	#GLM_VERSION_PATCH
 8

	)

39 
	#GLM_VERSION_REVISION
 3

	)

41 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_MESSAGE_VERSION_DISPLAYED
)

42 
	#GLM_MESSAGE_VERSION_DISPLAYED


	)

43 #¥agm®
mesßge
 ("GLM: version 0.9.8.3")

47 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_MESSAGE_COMPILER_DISPLAYED
)

48 
	#GLM_MESSAGE_COMPILER_DISPLAYED


	)

49 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CUDA


50 #¥agm®
mesßge
("GLM: CUDA compiler detected")

51 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_VC


52 #¥agm®
mesßge
("GLM: Visual C++ compiler detected")

53 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


54 #¥agm®
mesßge
("GLM: Clang compiler detected")

55 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_INTEL


56 #¥agm®
mesßge
("GLM: Intel Compiler detected")

57 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


58 #¥agm®
mesßge
("GLM: GCC compiler detected")

60 #¥agm®
mesßge
("GLM: CompilerÇot detected")

67 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
__LP64__
Ë|| deföed(
_M_X64
Ë|| deföed(
__µc64__
Ë|| deföed(
__x86_64__
)

68 
	#GLM_MODEL
 
GLM_MODEL_64


	)

69 #ñi‡
deföed
(
__i386__
Ë|| deföed(
__µc__
)

70 
	#GLM_MODEL
 
GLM_MODEL_32


	)

72 
	#GLM_MODEL
 
GLM_MODEL_32


	)

75 #i‡!
deföed
(
GLM_MODEL
Ë&& 
GLM_COMPILER
 != 0

79 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_MESSAGE_MODEL_DISPLAYED
)

80 
	#GLM_MESSAGE_MODEL_DISPLAYED


	)

81 #if(
GLM_MODEL
 =
GLM_MODEL_64
)

82 #¥agm®
mesßge
("GLM: 64 bits model")

83 #ñif(
GLM_MODEL
 =
GLM_MODEL_32
)

84 #¥agm®
mesßge
("GLM: 32 bits model")

88 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_MESSAGE_ARCH_DISPLAYED
)

89 
	#GLM_MESSAGE_ARCH_DISPLAYED


	)

90 #if(
GLM_ARCH
 =
GLM_ARCH_PURE
)

91 #¥agm®
mesßge
("GLM: Platform independent code")

92 #ñif(
GLM_ARCH
 =
GLM_ARCH_AVX2
)

93 #¥agm®
mesßge
("GLM: AVX2 instruction set")

94 #ñif(
GLM_ARCH
 =
GLM_ARCH_AVX
)

95 #¥agm®
mesßge
("GLM: AVX instruction set")

96 #ñif(
GLM_ARCH
 =
GLM_ARCH_SSE42
)

97 #¥agm®
mesßge
("GLM: SSE4.2 instruction set")

98 #ñif(
GLM_ARCH
 =
GLM_ARCH_SSE41
)

99 #¥agm®
mesßge
("GLM: SSE4.1 instruction set")

100 #ñif(
GLM_ARCH
 =
GLM_ARCH_SSSE3
)

101 #¥agm®
mesßge
("GLM: SSSE3 instruction set")

102 #ñif(
GLM_ARCH
 =
GLM_ARCH_SSE3
)

103 #¥agm®
mesßge
("GLM: SSE3 instruction set")

104 #ñif(
GLM_ARCH
 =
GLM_ARCH_SSE2
)

105 #¥agm®
mesßge
("GLM: SSE2 instruction set")

106 #ñif(
GLM_ARCH
 =
GLM_ARCH_X86
)

107 #¥agm®
mesßge
("GLM: x86 instruction set")

108 #ñif(
GLM_ARCH
 =
GLM_ARCH_NEON
)

109 #¥agm®
mesßge
("GLM: NEON instruction set")

110 #ñif(
GLM_ARCH
 =
GLM_ARCH_ARM
)

111 #¥agm®
mesßge
("GLM: ARM instruction set")

112 #ñif(
GLM_ARCH
 =
GLM_ARCH_MIPS
)

113 #¥agm®
mesßge
("GLM: MIPS instruction set")

114 #ñif(
GLM_ARCH
 =
GLM_ARCH_PPC
)

115 #¥agm®
mesßge
("GLM: PowerPCárchitechture")

124 
	#GLM_LANG_CXX98_FLAG
 (1 << 1)

	)

125 
	#GLM_LANG_CXX03_FLAG
 (1 << 2)

	)

126 
	#GLM_LANG_CXX0X_FLAG
 (1 << 3)

	)

127 
	#GLM_LANG_CXX11_FLAG
 (1 << 4)

	)

128 
	#GLM_LANG_CXX1Y_FLAG
 (1 << 5)

	)

129 
	#GLM_LANG_CXX14_FLAG
 (1 << 6)

	)

130 
	#GLM_LANG_CXX1Z_FLAG
 (1 << 7)

	)

131 
	#GLM_LANG_CXXMS_FLAG
 (1 << 8)

	)

132 
	#GLM_LANG_CXXGNU_FLAG
 (1 << 9)

	)

134 
	#GLM_LANG_CXX98
 
GLM_LANG_CXX98_FLAG


	)

135 
	#GLM_LANG_CXX03
 (
GLM_LANG_CXX98
 | 
GLM_LANG_CXX03_FLAG
)

	)

136 
	#GLM_LANG_CXX0X
 (
GLM_LANG_CXX03
 | 
GLM_LANG_CXX0X_FLAG
)

	)

137 
	#GLM_LANG_CXX11
 (
GLM_LANG_CXX0X
 | 
GLM_LANG_CXX11_FLAG
)

	)

138 
	#GLM_LANG_CXX1Y
 (
GLM_LANG_CXX11
 | 
GLM_LANG_CXX1Y_FLAG
)

	)

139 
	#GLM_LANG_CXX14
 (
GLM_LANG_CXX1Y
 | 
GLM_LANG_CXX14_FLAG
)

	)

140 
	#GLM_LANG_CXX1Z
 (
GLM_LANG_CXX14
 | 
GLM_LANG_CXX1Z_FLAG
)

	)

141 
	#GLM_LANG_CXXMS
 
GLM_LANG_CXXMS_FLAG


	)

142 
	#GLM_LANG_CXXGNU
 
GLM_LANG_CXXGNU_FLAG


	)

144 #i‡
deföed
(
GLM_FORCE_CXX14
)

145 #if((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
Ë&& (GLM_COMPILER <
GLM_COMPILER_GCC50
)Ë|| ((GLM_COMPILER & 
GLM_COMPILER_CLANG
Ë&& (GLM_COMPILER <
GLM_COMPILER_CLANG34
))

146 #¥agm®
mesßge
("GLM: Using GLM_FORCE_CXX14 withá compilerÅhat doesn't fully support C++14")

147 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_VC


148 #¥agm®
mesßge
("GLM: Using GLM_FORCE_CXX14 butÅhere isÇo known version of Visual C++ compilerÅhat fully supports C++14")

149 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_INTEL


150 #¥agm®
mesßge
("GLM: Using GLM_FORCE_CXX14 butÅhere isÇo known version of ICC compilerÅhat fully supports C++14")

152 
	#GLM_LANG
 
GLM_LANG_CXX14


	)

153 
	#GLM_LANG_STL11_FORCED


	)

154 #ñi‡
deföed
(
GLM_FORCE_CXX11
)

155 #if((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
Ë&& (GLM_COMPILER <
GLM_COMPILER_GCC48
)Ë|| ((GLM_COMPILER & 
GLM_COMPILER_CLANG
Ë&& (GLM_COMPILER <
GLM_COMPILER_CLANG33
))

156 #¥agm®
mesßge
("GLM: Using GLM_FORCE_CXX11 withá compilerÅhat doesn't fully support C++11")

157 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_VC


158 #¥agm®
mesßge
("GLM: Using GLM_FORCE_CXX11 butÅhere isÇo known version of Visual C++ compilerÅhat fully supports C++11")

159 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_INTEL


160 #¥agm®
mesßge
("GLM: Using GLM_FORCE_CXX11 butÅhere isÇo known version of ICC compilerÅhat fully supports C++11")

162 
	#GLM_LANG
 
GLM_LANG_CXX11


	)

163 
	#GLM_LANG_STL11_FORCED


	)

164 #ñi‡
deföed
(
GLM_FORCE_CXX03
)

165 
	#GLM_LANG
 
GLM_LANG_CXX03


	)

166 #ñi‡
deföed
(
GLM_FORCE_CXX98
)

167 
	#GLM_LANG
 
GLM_LANG_CXX98


	)

169 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


170 #i‡
__˝lu•lus
 >= 201402L

171 
	#GLM_LANG
 
GLM_LANG_CXX14


	)

172 #ñi‡
__has_„©uª
(
cxx_de˛ty≥_auto
Ë&& __has_„©uª(
cxx_aggªg©e_nsdmi
)

173 
	#GLM_LANG
 
GLM_LANG_CXX1Y


	)

174 #ñi‡
__˝lu•lus
 >= 201103L

175 
	#GLM_LANG
 
GLM_LANG_CXX11


	)

176 #ñi‡
__has_„©uª
(
cxx_°©ic_as£π
)

177 
	#GLM_LANG
 
GLM_LANG_CXX0X


	)

178 #ñi‡
__˝lu•lus
 >= 199711L

179 
	#GLM_LANG
 
GLM_LANG_CXX98


	)

181 
	#GLM_LANG
 
GLM_LANG_CXX


	)

183 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


184 #i‡
__˝lu•lus
 >= 201402L

185 
	#GLM_LANG
 
GLM_LANG_CXX14


	)

186 #ñi‡
__˝lu•lus
 >= 201103L

187 
	#GLM_LANG
 
GLM_LANG_CXX11


	)

188 #ñi‡
deföed
(
__GXX_EXPERIMENTAL_CXX0X__
)

189 
	#GLM_LANG
 
GLM_LANG_CXX0X


	)

191 
	#GLM_LANG
 
GLM_LANG_CXX98


	)

193 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_VC


194 #ifde‡
_MSC_EXTENSIONS


195 #i‡
__˝lu•lus
 >= 201402L

196 
	#GLM_LANG
 (
GLM_LANG_CXX14
 | 
GLM_LANG_CXXMS_FLAG
)

	)

199 #ñi‡
__˝lu•lus
 >= 201103L

200 
	#GLM_LANG
 (
GLM_LANG_CXX11
 | 
GLM_LANG_CXXMS_FLAG
)

	)

201 #ñi‡
GLM_COMPILER
 >
GLM_COMPILER_VC10


202 
	#GLM_LANG
 (
GLM_LANG_CXX0X
 | 
GLM_LANG_CXXMS_FLAG
)

	)

203 #ñi‡
__˝lu•lus
 >= 199711L

204 
	#GLM_LANG
 (
GLM_LANG_CXX98
 | 
GLM_LANG_CXXMS_FLAG
)

	)

206 
	#GLM_LANG
 (
GLM_LANG_CXX
 | 
GLM_LANG_CXXMS_FLAG
)

	)

209 #i‡
__˝lu•lus
 >= 201402L

210 
	#GLM_LANG
 
GLM_LANG_CXX14


	)

211 #ñi‡
__˝lu•lus
 >= 201103L

212 
	#GLM_LANG
 
GLM_LANG_CXX11


	)

213 #ñi‡
GLM_COMPILER
 >
GLM_COMPILER_VC10


214 
	#GLM_LANG
 
GLM_LANG_CXX0X


	)

215 #ñi‡
__˝lu•lus
 >= 199711L

216 
	#GLM_LANG
 
GLM_LANG_CXX98


	)

218 
	#GLM_LANG
 
GLM_LANG_CXX


	)

221 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_INTEL


222 #ifde‡
_MSC_EXTENSIONS


223 
	#GLM_MSC_EXT
 
GLM_LANG_CXXMS_FLAG


	)

225 
	#GLM_MSC_EXT
 0

	)

227 #i‡
__˝lu•lus
 >= 201402L

228 
	#GLM_LANG
 (
GLM_LANG_CXX14
 | 
GLM_MSC_EXT
)

	)

229 #ñi‡
__˝lu•lus
 >= 201103L

230 
	#GLM_LANG
 (
GLM_LANG_CXX11
 | 
GLM_MSC_EXT
)

	)

231 #ñi‡
__INTEL_CXX11_MODE__


232 
	#GLM_LANG
 (
GLM_LANG_CXX0X
 | 
GLM_MSC_EXT
)

	)

233 #ñi‡
__˝lu•lus
 >= 199711L

234 
	#GLM_LANG
 (
GLM_LANG_CXX98
 | 
GLM_MSC_EXT
)

	)

236 
	#GLM_LANG
 (
GLM_LANG_CXX
 | 
GLM_MSC_EXT
)

	)

238 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_CUDA


239 #ifde‡
_MSC_EXTENSIONS


240 
	#GLM_MSC_EXT
 
GLM_LANG_CXXMS_FLAG


	)

242 
	#GLM_MSC_EXT
 0

	)

244 #i‡
GLM_COMPILER
 >
GLM_COMPILER_CUDA75


245 
	#GLM_LANG
 (
GLM_LANG_CXX0X
 | 
GLM_MSC_EXT
)

	)

247 
	#GLM_LANG
 (
GLM_LANG_CXX98
 | 
GLM_MSC_EXT
)

	)

250 #i‡
__˝lu•lus
 >= 201402L

251 
	#GLM_LANG
 
GLM_LANG_CXX14


	)

252 #ñi‡
__˝lu•lus
 >= 201103L

253 
	#GLM_LANG
 
GLM_LANG_CXX11


	)

254 #ñi‡
__˝lu•lus
 >= 199711L

255 
	#GLM_LANG
 
GLM_LANG_CXX98


	)

257 
	#GLM_LANG
 
GLM_LANG_CXX


259 #i‚de‡
GLM_FORCE_PURE


	)

260 
	#GLM_FORCE_PURE


	)

265 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_MESSAGE_LANG_DISPLAYED
)

266 
	#GLM_MESSAGE_LANG_DISPLAYED


	)

268 #i‡
GLM_LANG
 & 
GLM_LANG_CXX1Z_FLAG


269 #¥agm®
mesßge
("GLM: C++1z")

270 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX14_FLAG


271 #¥agm®
mesßge
("GLM: C++14")

272 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX1Y_FLAG


273 #¥agm®
mesßge
("GLM: C++1y")

274 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


275 #¥agm®
mesßge
("GLM: C++11")

276 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG


277 #¥agm®
mesßge
("GLM: C++0x")

278 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX03_FLAG


279 #¥agm®
mesßge
("GLM: C++03")

280 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX98_FLAG


281 #¥agm®
mesßge
("GLM: C++98")

283 #¥agm®
mesßge
("GLM: C++Üanguage undetected")

286 #i‡
GLM_LANG
 & (
GLM_LANG_CXXGNU_FLAG
 | 
GLM_LANG_CXXMS_FLAG
)

287 #¥agm®
mesßge
("GLM: LanguageÉxtensionsÉnabled")

299 #i‡
GLM_PLATFORM
 =
GLM_PLATFORM_ANDROID
 && !
deföed
(
GLM_LANG_STL11_FORCED
)

300 
	#GLM_HAS_CXX11_STL
 0

	)

301 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


302 #i‡
deföed
(
_LIBCPP_VERSION
Ë&& 
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


303 
	#GLM_HAS_CXX11_STL
 1

	)

305 
	#GLM_HAS_CXX11_STL
 0

	)

308 
	#GLM_HAS_CXX11_STL
 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

309 ((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
Ë&& (GLM_COMPILER >
GLM_COMPILER_GCC48
)) || \

310 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC12
)) || \

311 ((
GLM_PLATFORM
 !
GLM_PLATFORM_WINDOWS
Ë&& (
GLM_COMPILER
 & 
GLM_COMPILER_INTEL
Ë&& (GLM_COMPILER >
GLM_COMPILER_INTEL15
))))

	)

315 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


316 
	#GLM_HAS_STATIC_ASSERT
 
	`__has_„©uª
(
cxx_°©ic_as£π
)

	)

317 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


318 
	#GLM_HAS_STATIC_ASSERT
 1

	)

320 
	#GLM_HAS_STATIC_ASSERT
 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

321 ((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
)) || \

322 ((
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
)) || \

323 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
))))

	)

327 #i‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


328 
	#GLM_HAS_EXTENDED_INTEGER_TYPE
 1

	)

330 
	#GLM_HAS_EXTENDED_INTEGER_TYPE
 (\

331 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
Ë&& (
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC11
)) || \

332 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
Ë&& (
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
)) || \

333 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
Ë&& (
GLM_COMPILER
 & 
GLM_COMPILER_GCC
)) || \

334 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
Ë&& (
GLM_COMPILER
 & 
GLM_COMPILER_CLANG
)))

	)

338 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


339 
	#GLM_HAS_CONSTEXPR
 
	`__has_„©uª
(
cxx_c⁄°ex¥
)

	)

340 
	#GLM_HAS_CONSTEXPR_PARTIAL
 
GLM_HAS_CONSTEXPR


	)

341 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


342 
	#GLM_HAS_CONSTEXPR
 1

	)

343 
	#GLM_HAS_CONSTEXPR_PARTIAL
 
GLM_HAS_CONSTEXPR


	)

345 
	#GLM_HAS_CONSTEXPR
 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

346 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC15
)) || \

347 ((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
Ë&& (GLM_COMPILER >
GLM_COMPILER_GCC48
))))

348 
	#GLM_HAS_CONSTEXPR_PARTIAL
 (
GLM_HAS_CONSTEXPR
 || ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC14
)))

	)

352 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


353 
	#GLM_HAS_INITIALIZER_LISTS
 
	`__has_„©uª
(
cxx_gíîÆized_öôülizîs
)

	)

354 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


355 
	#GLM_HAS_INITIALIZER_LISTS
 1

	)

357 
	#GLM_HAS_INITIALIZER_LISTS
 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

358 ((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
)) || \

359 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC12
)) || \

360 ((
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
Ë&& (GLM_COMPILER >
GLM_COMPILER_CUDA75
))))

	)

364 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


365 
	#GLM_HAS_UNRESTRICTED_UNIONS
 
	`__has_„©uª
(
cxx_uƒe°ri˘ed_uni⁄s
)

	)

366 #ñi‡
GLM_LANG
 & (
GLM_LANG_CXX11_FLAG
 | 
GLM_LANG_CXXMS_FLAG
)

367 
	#GLM_HAS_UNRESTRICTED_UNIONS
 1

	)

369 
	#GLM_HAS_UNRESTRICTED_UNIONS
 (
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

370 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (
GLM_LANG
 & 
GLM_LANG_CXXMS_FLAG
)) || \

371 ((
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
Ë&& (GLM_COMPILER >
GLM_COMPILER_CUDA75
)) || \

372 ((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
Ë&& (GLM_COMPILER >
GLM_COMPILER_GCC46
)))

	)

376 #i‡
deföed
(
GLM_FORCE_UNRESTRICTED_GENTYPE
)

377 
	#GLM_HAS_DEFAULTED_FUNCTIONS
 0

	)

378 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


379 
	#GLM_HAS_DEFAULTED_FUNCTIONS
 
	`__has_„©uª
(
cxx_deÁu…ed_fun˘i⁄s
)

	)

380 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


381 
	#GLM_HAS_DEFAULTED_FUNCTIONS
 1

	)

383 
	#GLM_HAS_DEFAULTED_FUNCTIONS
 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

384 ((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
)) || \

385 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC12
)) || \

386 ((
GLM_COMPILER
 & 
GLM_COMPILER_INTEL
Ë&& (GLM_COMPILER >
GLM_COMPILER_INTEL12
)) || \

387 (
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
)))

	)

391 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


392 
	#GLM_HAS_RVALUE_REFERENCES
 
	`__has_„©uª
(
cxx_rvÆue_ª„ªn˚s
)

	)

393 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


394 
	#GLM_HAS_RVALUE_REFERENCES
 1

	)

396 
	#GLM_HAS_RVALUE_REFERENCES
 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

397 ((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
)) || \

398 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC11
)) || \

399 ((
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
Ë&& (GLM_COMPILER >
GLM_COMPILER_CUDA50
))))

	)

403 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


404 
	#GLM_HAS_EXPLICIT_CONVERSION_OPERATORS
 
	`__has_„©uª
(
cxx_ex∂icô_c⁄vîsi⁄s
)

	)

405 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


406 
	#GLM_HAS_EXPLICIT_CONVERSION_OPERATORS
 1

	)

408 
	#GLM_HAS_EXPLICIT_CONVERSION_OPERATORS
 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

409 ((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
Ë&& (GLM_COMPILER >
GLM_COMPILER_GCC45
)) || \

410 ((
GLM_COMPILER
 & 
GLM_COMPILER_INTEL
Ë&& (GLM_COMPILER >
GLM_COMPILER_INTEL14
)) || \

411 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC12
)) || \

412 ((
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
Ë&& (GLM_COMPILER >
GLM_COMPILER_CUDA50
))))

	)

416 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


417 
	#GLM_HAS_TEMPLATE_ALIASES
 
	`__has_„©uª
(
cxx_Æüs_ãm∂©es
)

	)

418 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


419 
	#GLM_HAS_TEMPLATE_ALIASES
 1

	)

421 
	#GLM_HAS_TEMPLATE_ALIASES
 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

422 ((
GLM_COMPILER
 & 
GLM_COMPILER_INTEL
Ë&& (GLM_COMPILER >
GLM_COMPILER_INTEL12_1
)) || \

423 ((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
Ë&& (GLM_COMPILER >
GLM_COMPILER_GCC47
)) || \

424 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC12
)) || \

425 ((
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
Ë&& (GLM_COMPILER >
GLM_COMPILER_CUDA50
))))

	)

429 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


430 
	#GLM_HAS_RANGE_FOR
 
	`__has_„©uª
(
cxx_ønge_f‹
)

	)

431 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


432 
	#GLM_HAS_RANGE_FOR
 1

	)

434 
	#GLM_HAS_RANGE_FOR
 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

435 ((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
Ë&& (GLM_COMPILER >
GLM_COMPILER_GCC46
)) || \

436 ((
GLM_COMPILER
 & 
GLM_COMPILER_INTEL
Ë&& (GLM_COMPILER >
GLM_COMPILER_INTEL13
)) || \

437 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC11
)) || \

438 ((
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
Ë&& (GLM_COMPILER >
GLM_COMPILER_CUDA50
))))

	)

442 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


443 
	#GLM_HAS_ALIGNOF
 
	`__has_„©uª
(
c_Æignof
)

	)

444 #ñi‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


445 
	#GLM_HAS_ALIGNOF
 1

	)

447 
	#GLM_HAS_ALIGNOF
 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

448 ((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
Ë&& (GLM_COMPILER >
GLM_COMPILER_GCC48
)) || \

449 ((
GLM_COMPILER
 & 
GLM_COMPILER_INTEL
Ë&& (GLM_COMPILER >
GLM_COMPILER_INTEL15
)) || \

450 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC14
)) || \

451 ((
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
Ë&& (GLM_COMPILER >
GLM_COMPILER_CUDA70
))))

	)

455 #i‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


456 
	#GLM_HAS_ASSIGNABLE
 1

	)

458 
	#GLM_HAS_ASSIGNABLE
 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

459 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC15
)) || \

460 ((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
Ë&& (GLM_COMPILER >
GLM_COMPILER_GCC49
))))

	)

464 
	#GLM_HAS_TRIVIAL_QUERIES
 0

	)

467 #i‡
GLM_LANG
 & 
GLM_LANG_CXX11_FLAG


468 
	#GLM_HAS_MAKE_SIGNED
 1

	)

470 
	#GLM_HAS_MAKE_SIGNED
 ((
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG
) && (\

471 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC12
)) || \

472 ((
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
Ë&& (GLM_COMPILER >
GLM_COMPILER_CUDA50
))))

	)

475 #i‡
GLM_ARCH
 =
GLM_ARCH_PURE


476 
	#GLM_HAS_BITSCAN_WINDOWS
 0

	)

478 
	#GLM_HAS_BITSCAN_WINDOWS
 ((
GLM_PLATFORM
 & 
GLM_PLATFORM_WINDOWS
) && (\

479 ((
GLM_COMPILER
 & 
GLM_COMPILER_INTEL
)) || \

480 ((
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë&& (GLM_COMPILER >
GLM_COMPILER_VC14
Ë&& (
GLM_ARCH
 & 
GLM_ARCH_X86_BIT
))))

	)

484 #ifde‡
_OPENMP


485 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


486 #i‡
GLM_COMPILER
 >
GLM_COMPILER_GCC61


487 
	#GLM_HAS_OPENMP
 45

	)

488 #ñi‡
GLM_COMPILER
 >
GLM_COMPILER_GCC49


489 
	#GLM_HAS_OPENMP
 40

	)

490 #ñi‡
GLM_COMPILER
 >
GLM_COMPILER_GCC47


491 
	#GLM_HAS_OPENMP
 31

	)

492 #ñi‡
GLM_COMPILER
 >
GLM_COMPILER_GCC44


493 
	#GLM_HAS_OPENMP
 30

	)

494 #ñi‡
GLM_COMPILER
 >
GLM_COMPILER_GCC42


495 
	#GLM_HAS_OPENMP
 25

	)

497 
	#GLM_HAS_OPENMP
 0

	)

499 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


500 #i‡
GLM_COMPILER
 >
GLM_COMPILER_CLANG38


501 
	#GLM_HAS_OPENMP
 31

	)

503 
	#GLM_HAS_OPENMP
 0

	)

505 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_VC


506 #i‡
GLM_COMPILER
 >
GLM_COMPILER_VC10


507 
	#GLM_HAS_OPENMP
 20

	)

509 
	#GLM_HAS_OPENMP
 0

	)

511 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_INTEL


512 #i‡
GLM_COMPILER
 >
GLM_COMPILER_INTEL16


513 
	#GLM_HAS_OPENMP
 40

	)

514 #ñi‡
GLM_COMPILER
 >
GLM_COMPILER_INTEL12


515 
	#GLM_HAS_OPENMP
 31

	)

517 
	#GLM_HAS_OPENMP
 0

	)

520 
	#GLM_HAS_OPENMP
 0

	)

527 #i‡
GLM_HAS_STATIC_ASSERT


528 
	#GLM_STATIC_ASSERT
(
x
, 
mesßge
Ë
	`°©ic_as£π
(x, mesßge)

	)

529 #ñi‡
deföed
(
BOOST_STATIC_ASSERT
)

530 
	#GLM_STATIC_ASSERT
(
x
, 
mesßge
Ë
	`BOOST_STATIC_ASSERT
(x)

	)

531 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_VC


532 
	#GLM_STATIC_ASSERT
(
x
, 
mesßge
Ë
	t__CASSERT__
##
	t__LINE__
[(xË? 1 : -1]

	)

534 
	tGLM_STATIC_ASSERT
(
	tx
, 
	tmesßge
)

	)

535 
	tGLM_STATIC_ASSERT_NULL


	)

541 #i‡
	tGLM_COMPILER
 & 
	tGLM_COMPILER_CUDA


542 
	tGLM_CUDA_FUNC_DEF
 
	t__devi˚__
 
	t__ho°__


	)

543 
	tGLM_CUDA_FUNC_DECL
 
	t__devi˚__
 
	t__ho°__


	)

545 
	tGLM_CUDA_FUNC_DEF


	)

546 
	tGLM_CUDA_FUNC_DECL


	)

549 #i‡
	tGLM_COMPILER
 & 
	tGLM_COMPILER_GCC


550 
	tGLM_VAR_USED
 
	t__©åibuã__
 ((
	tunu£d
))

	)

552 
	tGLM_VAR_USED


	)

555 #i‡
	tdeföed
(
	tGLM_FORCE_INLINE
)

556 #i‡
	tGLM_COMPILER
 & 
	tGLM_COMPILER_VC


557 
	tGLM_INLINE
 
	t__f‹˚ölöe


	)

558 
	tGLM_NEVER_INLINE
 
	t__de˛•ec
((
	tnoölöe
))

	)

559 #ñi‡
	tGLM_COMPILER
 & (
	tGLM_COMPILER_GCC
 | 
	tGLM_COMPILER_CLANG
)

560 
	tGLM_INLINE
 
	tölöe
 
	t__©åibuã__
((
	t__Æways_ölöe__
))

	)

561 
	tGLM_NEVER_INLINE
 
	t__©åibuã__
((
	t__noölöe__
))

	)

562 #ñi‡
	tGLM_COMPILER
 & 
	tGLM_COMPILER_CUDA


563 
	tGLM_INLINE
 
	t__f‹˚ölöe__


	)

564 
	tGLM_NEVER_INLINE
 
	t__noölöe__


	)

566 
	tGLM_INLINE
 
	tölöe


	)

567 
	tGLM_NEVER_INLINE


	)

570 
	tGLM_INLINE
 
	tölöe


	)

571 
	tGLM_NEVER_INLINE


	)

574 
	tGLM_FUNC_DECL
 
	tGLM_CUDA_FUNC_DECL


	)

575 
	tGLM_FUNC_QUALIFIER
 
	tGLM_CUDA_FUNC_DEF
 
	tGLM_INLINE


	)

582 #ifde‡
	tGLM_SWIZZLE


583 #¥agm®
	tmesßge
("GLM: GLM_SWIZZLE is deprecated, use GLM_FORCE_SWIZZLE instead")

586 
	tGLM_SWIZZLE_ENABLED
 1

	)

587 
	tGLM_SWIZZLE_DISABLE
 0

	)

589 #i‡
	tdeföed
(
	tGLM_FORCE_SWIZZLE
Ë|| deföed(
	tGLM_SWIZZLE
)

590 #unde‡
	tGLM_SWIZZLE


591 
	tGLM_SWIZZLE
 
	tGLM_SWIZZLE_ENABLED


	)

593 #unde‡
	tGLM_SWIZZLE


594 
	tGLM_SWIZZLE
 
	tGLM_SWIZZLE_DISABLE


	)

597 #i‡
	tGLM_MESSAGES
 =
	tGLM_MESSAGES_ENABLED
 && !
	tdeföed
(
	tGLM_MESSAGE_SWIZZLE_DISPLAYED
)

598 
	tGLM_MESSAGE_SWIZZLE_DISPLAYED


	)

599 #i‡
	tGLM_SWIZZLE
 =
	tGLM_SWIZZLE_ENABLED


600 #¥agm®
	tmesßge
("GLM: Swizzling operatorsÉnabled")

602 #¥agm®
	tmesßge
("GLM: Swizzling operators disabled, #define GLM_SWIZZLEÅoÉnable swizzle operators")

611 #ifde‡
	tGLM_FORCE_UNRESTRICTED_GENTYPE


612 
	tGLM_UNRESTRICTED_GENTYPE
 1

	)

614 
	tGLM_UNRESTRICTED_GENTYPE
 0

	)

617 #i‡
	tGLM_MESSAGES
 =
	tGLM_MESSAGES_ENABLED
 && !
	tdeföed
(
	tGLM_MESSAGE_UNRESTRICTED_GENTYPE_DISPLAYED
)

618 
	tGLM_MESSAGE_UNRESTRICTED_GENTYPE_DISPLAYED


	)

619 #ifde‡
	tGLM_FORCE_UNRESTRICTED_GENTYPE


620 #¥agm®
	tmesßge
("GLM: Use unrestricted genType")

627 #ifde‡
	tGLM_DEPTH_ZERO_TO_ONE


628 #îr‹ 
	tDeföe
 
	tGLM_FORCE_DEPTH_ZERO_TO_ONE
 
	tö°ód
 
	tof
 
	tGLM_DEPTH_ZERO_TO_ONE
 
	tto
 
	tu£
 0Åÿ1 
	t˛ù
 
	t•a˚
.

631 
	tGLM_DEPTH_ZERO_TO_ONE
 0x00000001

	)

632 
	tGLM_DEPTH_NEGATIVE_ONE_TO_ONE
 0x00000002

	)

634 #ifde‡
	tGLM_FORCE_DEPTH_ZERO_TO_ONE


635 
	tGLM_DEPTH_CLIP_SPACE
 
	tGLM_DEPTH_ZERO_TO_ONE


	)

637 
	tGLM_DEPTH_CLIP_SPACE
 
	tGLM_DEPTH_NEGATIVE_ONE_TO_ONE


	)

640 #i‡
	tGLM_MESSAGES
 =
	tGLM_MESSAGES_ENABLED
 && !
	tdeföed
(
	tGLM_MESSAGE_DEPTH_DISPLAYED
)

641 
	tGLM_MESSAGE_DEPTH_DISPLAYED


	)

642 #i‡
	tGLM_DEPTH_CLIP_SPACE
 =
	tGLM_DEPTH_ZERO_TO_ONE


643 #¥agm®
	tmesßge
("GLM: Depth clip space: ZeroÅo one")

645 #¥agm®
	tmesßge
("GLM: Depth clip space:Çegative oneÅo one")

653 #ifde‡
	tGLM_LEFT_HANDED


654 #îr‹ 
	tDeföe
 
	tGLM_FORCE_LEFT_HANDED
 
	tö°ód
 
	tof
 
	tGLM_LEFT_HANDED
 
	tÀ·
 
	th™ded
 
	tco‹dö©e
 
	tsy°em
 
	tby
 .

657 
	tGLM_LEFT_HANDED
 0x00000001

658 
	tGLM_RIGHT_HANDED
 0x00000002

659 

	)

660 #ifde‡
	tGLM_FORCE_LEFT_HANDED


661 
	tGLM_COORDINATE_SYSTEM
 
	tGLM_LEFT_HANDED


	)

663 
	tGLM_COORDINATE_SYSTEM
 
	tGLM_RIGHT_HANDED


	)

666 #i‡
	tGLM_MESSAGES
 =
	tGLM_MESSAGES_ENABLED
 && !
	tdeföed
(
	tGLM_MESSAGE_HANDED_DISPLAYED
)

667 
	tGLM_MESSAGE_HANDED_DISPLAYED


	)

668 #i‡
	tGLM_COORDINATE_SYSTEM
 =
	tGLM_LEFT_HANDED


669 #¥agm®
	tmesßge
("GLM: Coordinate system:Üeft handed")

671 #¥agm®
	tmesßge
("GLM: Coordinate system:Ñight handed")

678 #i‡(
	tGLM_COMPILER
 & 
	tGLM_COMPILER_VC
Ë|| ((GLM_COMPILER & 
	tGLM_COMPILER_INTEL
Ë&& (
	tGLM_PLATFORM
 & 
	tGLM_PLATFORM_WINDOWS
))

679 
	tGLM_DEPRECATED
 
	t__de˛•ec
(
	tdïªˇãd
)

	)

680 
	tGLM_ALIGN
(
	tx
Ë
	t__de˛•ec
(
	tÆign
(x))

	)

681 
	tGLM_ALIGNED_STRUCT
(
	tx
Ë
	t__de˛•ec
(
	tÆign
(x))

	)

682 
	tGLM_ALIGNED_TYPEDEF
(
	tty≥
, 
	t«me
, 
	tÆignmít
Ë
	`__de˛•ec
(
	tÆign
◊lignmít)Ëty≥ 
	)
name

683 
	tGLM_RESTRICT_FUNC
 
	t__de˛•ec
(
	tª°ri˘
)

	)

684 
	tGLM_RESTRICT
 
	t__ª°ri˘


	)

685 #i‡
	tGLM_COMPILER
 >
	tGLM_COMPILER_VC12


686 
	tGLM_VECTOR_CALL
 
	t__ve˘‹ˇŒ


	)

688 
	tGLM_VECTOR_CALL


	)

690 #ñi‡
	tGLM_COMPILER
 & (
	tGLM_COMPILER_GCC
 | 
	tGLM_COMPILER_CLANG
 | 
	tGLM_COMPILER_INTEL
)

691 
	tGLM_DEPRECATED
 
	t__©åibuã__
((
	t__dïªˇãd__
))

	)

692 
	tGLM_ALIGN
(
	tx
Ë
	t__©åibuã__
((
	tÆig√d
(x)))

	)

693 
	tGLM_ALIGNED_STRUCT
(
	tx
Ë
	t__©åibuã__
((
	tÆig√d
(x)))

	)

694 
	tGLM_ALIGNED_TYPEDEF
(
	tty≥
, 
	t«me
, 
	tÆignmít
Ë
ty≥
Çamê
	t__©åibuã__
((
	tÆig√d
◊lignmít)))

	)

695 
	tGLM_RESTRICT_FUNC
 
	t__ª°ri˘__


	)

696 
	tGLM_RESTRICT
 
	t__ª°ri˘__


	)

697 #i‡
	tGLM_COMPILER
 & 
	tGLM_COMPILER_CLANG


698 #i‡
	tGLM_COMPILER
 >
	tGLM_COMPILER_CLANG37


699 
	tGLM_VECTOR_CALL
 
	t__ve˘‹ˇŒ


	)

701 
	tGLM_VECTOR_CALL


	)

704 
	tGLM_VECTOR_CALL


	)

706 #ñi‡
	tGLM_COMPILER
 & 
	tGLM_COMPILER_CUDA


707 
	tGLM_DEPRECATED


	)

708 
	tGLM_ALIGN
(
	tx
Ë
	t__Æign__
(x)

	)

709 
	tGLM_ALIGNED_STRUCT
(
	tx
Ë
	t__Æign__
(x)

	)

710 
	tGLM_ALIGNED_TYPEDEF
(
	tty≥
, 
	t«me
, 
	tÆignmít
Ë
ty≥
Çamê
	t__Æign__
(
	tx
)

	)

711 
	tGLM_RESTRICT_FUNC
 
	t__ª°ri˘__


	)

712 
	tGLM_RESTRICT
 
	t__ª°ri˘__


	)

713 
	tGLM_VECTOR_CALL


	)

715 
	tGLM_DEPRECATED


	)

716 
	tGLM_ALIGN


	)

717 
	tGLM_ALIGNED_STRUCT
(
	tx
Ë

	)

718 
	tGLM_ALIGNED_TYPEDEF
(
	tty≥
, 
	t«me
, 
	tÆignmít
Ë
ty≥
 
	)
name

719 
	tGLM_RESTRICT_FUNC


	)

720 
	tGLM_RESTRICT


	)

721 
	tGLM_VECTOR_CALL


	)

724 #i‡
	tGLM_HAS_DEFAULTED_FUNCTIONS


725 
	tGLM_DEFAULT
 = 

	)

726 #ifde‡
	tGLM_FORCE_NO_CTOR_INIT


727 
	tGLM_DEFAULT_CTOR
 = 

	)

729 
	tGLM_DEFAULT_CTOR


	)

732 
	tGLM_DEFAULT


	)

733 
	tGLM_DEFAULT_CTOR


	)

736 #i‡
	tGLM_HAS_CONSTEXPR


737 
	tGLM_CONSTEXPR
 
	tc⁄°ex¥


	)

738 
	tGLM_CONSTEXPR_CTOR
 
	tc⁄°ex¥


	)

739 
	tGLM_RELAXED_CONSTEXPR
 
	tc⁄°ex¥


	)

740 #ñi‡
	tGLM_HAS_CONSTEXPR_PARTIAL


741 
	tGLM_CONSTEXPR
 
	tc⁄°ex¥


	)

742 
	tGLM_CONSTEXPR_CTOR


	)

743 
	tGLM_RELAXED_CONSTEXPR
 c⁄°

	)

745 
	tGLM_CONSTEXPR


	)

746 
	tGLM_CONSTEXPR_CTOR


	)

747 
	tGLM_RELAXED_CONSTEXPR
 c⁄°

	)

750 #i‡
	tGLM_ARCH
 =
	tGLM_ARCH_PURE


751 
	tGLM_CONSTEXPR_SIMD
 
	tGLM_CONSTEXPR_CTOR


	)

753 
	tGLM_CONSTEXPR_SIMD


	)

756 #ifde‡
	tGLM_FORCE_EXPLICIT_CTOR


757 
	tGLM_EXPLICIT
 
	tex∂icô


	)

759 
	tGLM_EXPLICIT


	)

764 
	tGLM_HAS_ALIGNED_TYPE
 
	tGLM_HAS_UNRESTRICTED_UNIONS


	)

771 
	t«me•a˚
 
	tglm


773 
usög
 
	g°d
::
size_t
;

774 #i‡
deföed
(
GLM_FORCE_SIZE_T_LENGTH
)

775 
size_t
 
	tÀngth_t
;

777 
	tÀngth_t
;

781 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_MESSAGE_FORCE_SIZE_T_LENGTH
)

782 
	#GLM_MESSAGE_FORCE_SIZE_T_LENGTH


	)

783 #i‡
deföed
 
GLM_FORCE_SIZE_T_LENGTH


784 #¥agm®
mesßge
("GLM: .length()Ñeturns glm::length_t,áÅypedef of std::size_t")

786 #¥agm®
mesßge
("GLM: .length()Ñeturns glm::length_t,áÅypedef of int followingÅhe GLSL specification")

793 #i‚de‡
__has_„©uª


794 
	#__has_„©uª
(
x
) 0

796 

	)

797 #i‡
GLM_HAS_CONSTEXPR_PARTIAL


798 
«me•a˚
 
	gglm


800 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	g°d
::
size_t
 
N
>

801 
c⁄°ex¥
 
°d
::
size_t
 
cou¡of
(
T
 c⁄° (&)[
N
])

803  
N
;

806 
	#GLM_COUNTOF
(
¨r
Ë
glm
::
	`cou¡of
◊º)

	)

807 #ñi‡
deföed
(
_MSC_VER
)

808 
	#GLM_COUNTOF
(
¨r
Ë
	`_cou¡of
◊º)

	)

810 
	#GLM_COUNTOF
(
¨r
Ë◊ºË/ ◊º[0])

	)

816 
«me•a˚
 
	gglm


818 
	e˘‹
{
	gunöôülize
};

	@glm/glm/detail/type_float.hpp

4 #¥agm®
⁄˚


6 
	~"£tup.hµ
"

8 
«me•a˚
 
	gglm
{

9 
«me•a˚
 
	gdëaû


11 
	tÊﬂt32
;

12 
	tÊﬂt64
;

15 
	tlowp_Êﬂt_t
;

16 
	tmediump_Êﬂt_t
;

17 
	thighp_Êﬂt_t
;

27 
lowp_Êﬂt_t
 
	tlowp_Êﬂt
;

34 
mediump_Êﬂt_t
 
	tmediump_Êﬂt
;

41 
highp_Êﬂt_t
 
	thighp_Êﬂt
;

43 #if(!
deföed
(
GLM_PRECISION_HIGHP_FLOAT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_FLOAT
Ë&& !deföed(
GLM_PRECISION_LOWP_FLOAT
))

44 
mediump_Êﬂt
 
	tÊﬂt_t
;

45 #ñif(
deföed
(
GLM_PRECISION_HIGHP_FLOAT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_FLOAT
Ë&& !deföed(
GLM_PRECISION_LOWP_FLOAT
))

46 
highp_Êﬂt
 
	tÊﬂt_t
;

47 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_FLOAT
Ë&& deföed(
GLM_PRECISION_MEDIUMP_FLOAT
Ë&& !deföed(
GLM_PRECISION_LOWP_FLOAT
))

48 
mediump_Êﬂt
 
	tÊﬂt_t
;

49 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_FLOAT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_FLOAT
Ë&& deföed(
GLM_PRECISION_LOWP_FLOAT
))

50 
lowp_Êﬂt
 
	tÊﬂt_t
;

55 
	tÊﬂt32
;

56 
	tÊﬂt64
;

60 #i‚de‡
GLM_STATIC_ASSERT_NULL


61 
GLM_STATIC_ASSERT
((
glm
::
Êﬂt32
) == 4, "float32 size isn't 4 bytes onÅhisÖlatform");

62 
GLM_STATIC_ASSERT
((
glm
::
Êﬂt64
) == 8, "float64 size isn't 8 bytes onÅhisÖlatform");

	@glm/glm/detail/type_gentype.hpp

4 #¥agm®
⁄˚


6 
«me•a˚
 
	gglm


8 
	e¥ofûe


10 
	gni˚
,

11 
	gÁ°
,

12 
	gsimd


15 
	g°d
::
	tsize_t
 
	tsizeTy≥
;

17 
«me•a˚
 
	gdëaû


19 
	gãm∂©e


21 
ty≥«me
 
	gVALTYPE
,

22 
	gãm∂©e
 <
	gty≥«me
> 
˛ass
 
	gTYPE


24 
	sgíTy≥


26 
	gpublic
:

27 
	e˘‹
{
nuŒ
};

29 
VALTYPE
 
	tvÆue_ty≥
;

30 
	gVALTYPE
 & 
	tvÆue_ª„ªn˚
;

31 
VALTYPE
 * 
	tvÆue_poöãr
;

32 
VALTYPE
 c⁄° * 
	tvÆue_c⁄°_poöãr
;

33 
	gTYPE
<
	tboﬁ
> 
	tboﬁ_ty≥
;

35 
sizeTy≥
 
	tsize_ty≥
;

36 
boﬁ
 
is_ve˘‹
();

37 
boﬁ
 
is_m©rix
();

39 
	gTYPE
<
	tVALTYPE
> 
	tty≥
;

40 
	gTYPE
<
	tVALTYPE
> * 
	tpoöãr
;

41 
	gTYPE
<
	tVALTYPE
> c⁄° * 
	tc⁄°_poöãr
;

42 
	gTYPE
<
	tVALTYPE
> c⁄° * c⁄° 
	tc⁄°_poöãr_c⁄°
;

43 
	gTYPE
<
	tVALTYPE
> * c⁄° 
	tpoöãr_c⁄°
;

44 
	gTYPE
<
	tVALTYPE
> & 
	tª„ªn˚
;

45 
	gTYPE
<
	tVALTYPE
> c⁄° & 
	tc⁄°_ª„ªn˚
;

46 
	gTYPE
<
	tVALTYPE
> c⁄° & 
	t∑øm_ty≥
;

51 
vÆue_c⁄°_poöãr
 
vÆue_addªss
(Ëc⁄°{ 
vÆue_poöãr
(
this
);}

52 
vÆue_poöãr
 
vÆue_addªss
(){ vÆue_poöãr(
this
);}

65 
	gãm∂©e


67 
ty≥«me
 
	gVALTYPE
,

68 
	gãm∂©e
 <
	gty≥«me
> 
˛ass
 
	gTYPE


70 
boﬁ
 
	ggíTy≥
<
	gVALTYPE
, 
	gTYPE
>::
is_ve˘‹
()

72  
åue
;

	@glm/glm/detail/type_half.hpp

4 #¥agm®
⁄˚


6 
	~"£tup.hµ
"

8 
«me•a˚
 
	gglm
{

9 
«me•a˚
 
	gdëaû


11 
	thd©a
;

13 
GLM_FUNC_DECL
 
toFlﬂt32
(
hd©a
 
vÆue
);

14 
GLM_FUNC_DECL
 
hd©a
 
toFlﬂt16
(c⁄° & 
vÆue
);

19 
	~"ty≥_hÆf.öl
"

	@glm/glm/detail/type_int.hpp

4 #¥agm®
⁄˚


6 
	~"£tup.hµ
"

7 #i‡
GLM_HAS_MAKE_SIGNED


8 
	~<ty≥_åaôs
>

11 #i‡
GLM_HAS_EXTENDED_INTEGER_TYPE


12 
	~<c°döt
>

15 
«me•a˚
 
	gglm
{

16 
«me•a˚
 
	gdëaû


18 #i‡
GLM_HAS_EXTENDED_INTEGER_TYPE


19 
	g°d
::
	töt8_t
 
	töt8
;

20 
	g°d
::
	töt16_t
 
	töt16
;

21 
	g°d
::
	töt32_t
 
	töt32
;

22 
	g°d
::
	töt64_t
 
	töt64
;

24 
	g°d
::
	tuöt8_t
 
	tuöt8
;

25 
	g°d
::
	tuöt16_t
 
	tuöt16
;

26 
	g°d
::
	tuöt32_t
 
	tuöt32
;

27 
	g°d
::
	tuöt64_t
 
	tuöt64
;

29 #if(
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ >= 199901L))

30 
öt64_t
 
	tsöt64
;

31 
uöt64_t
 
	tuöt64
;

33 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_VC


34 sig√d 
	t__öt64
 
	tsöt64
;

35 
	t__öt64
 
	tuöt64
;

37 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


38 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wlong-long"

39 
__exãnsi⁄__
 sig√d 
	tsöt64
;

40 
__exãnsi⁄__
 
	tuöt64
;

42 #ñi‡(
GLM_COMPILER
 & 
GLM_COMPILER_CLANG
)

43 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wc++11-long-long"

44 sig√d 
	tsöt64
;

45 
	tuöt64
;

48 sig√d 
	tsöt64
;

49 
	tuöt64
;

52 sig√d 
	töt8
;

53 sig√d 
	töt16
;

54 sig√d 
	töt32
;

55 
söt64
 
	töt64
;

57 
	tuöt8
;

58 
	tuöt16
;

59 
	tuöt32
;

60 
uöt64
 
	tuöt64
;

63 sig√d 
	tlowp_öt_t
;

64 sig√d 
	tmediump_öt_t
;

65 sig√d 
	thighp_öt_t
;

67 
	tlowp_uöt_t
;

68 
	tmediump_uöt_t
;

69 
	thighp_uöt_t
;

71 #i‡
GLM_HAS_MAKE_SIGNED


72 
usög
 
	g°d
::
make_sig√d
;

73 
usög
 
	g°d
::
make_unsig√d
;

76 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

77 
	smake_sig√d


80 
	gãm∂©e
 <>

81 
	gmake_sig√d
<>

83 
	tty≥
;

86 
	gãm∂©e
 <>

87 
	gmake_sig√d
<>

89 
	tty≥
;

92 
	gãm∂©e
 <>

93 
	gmake_sig√d
<>

95 
	tty≥
;

98 
	gãm∂©e
 <>

99 
	gmake_sig√d
<>

101 
	tty≥
;

104 
	gãm∂©e
 <>

105 
	gmake_sig√d
<>

107 
	tty≥
;

110 
	gãm∂©e
 <>

111 
	gmake_sig√d
<>

113 
	tty≥
;

116 
	gãm∂©e
 <>

117 
	gmake_sig√d
<>

119 
	tty≥
;

122 
	gãm∂©e
 <>

123 
	gmake_sig√d
<>

125 
	tty≥
;

128 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

129 
	smake_unsig√d


132 
	gãm∂©e
 <>

133 
	gmake_unsig√d
<>

135 
	tty≥
;

138 
	gãm∂©e
 <>

139 
	gmake_unsig√d
<>

141 
	tty≥
;

144 
	gãm∂©e
 <>

145 
	gmake_unsig√d
<>

147 
	tty≥
;

150 
	gãm∂©e
 <>

151 
	gmake_unsig√d
<>

153 
	tty≥
;

156 
	gãm∂©e
 <>

157 
	gmake_unsig√d
<>

159 
	tty≥
;

162 
	gãm∂©e
 <>

163 
	gmake_unsig√d
<>

165 
	tty≥
;

168 
	gãm∂©e
 <>

169 
	gmake_unsig√d
<>

171 
	tty≥
;

174 
	gãm∂©e
 <>

175 
	gmake_unsig√d
<>

177 
	tty≥
;

180 
	gãm∂©e
 <>

181 
	gmake_sig√d
<>

183 
	tty≥
;

186 
	gãm∂©e
 <>

187 
	gmake_sig√d
<>

189 
	tty≥
;

192 
	gãm∂©e
 <>

193 
	gmake_unsig√d
<>

195 
	tty≥
;

198 
	gãm∂©e
 <>

199 
	gmake_unsig√d
<>

201 
	tty≥
;

206 
	gdëaû
::
	töt8
 int8;

207 
	gdëaû
::
	töt16
 int16;

208 
	gdëaû
::
	töt32
 int32;

209 
	gdëaû
::
	töt64
 int64;

211 
	gdëaû
::
	tuöt8
 uint8;

212 
	gdëaû
::
	tuöt16
 uint16;

213 
	gdëaû
::
	tuöt32
 uint32;

214 
	gdëaû
::
	tuöt64
 uint64;

224 
	gdëaû
::
	tlowp_öt_t
 
	tlowp_öt
;

231 
	gdëaû
::
	tmediump_öt_t
 
	tmediump_öt
;

238 
	gdëaû
::
	thighp_öt_t
 
	thighp_öt
;

245 
	gdëaû
::
	tlowp_uöt_t
 
	tlowp_uöt
;

252 
	gdëaû
::
	tmediump_uöt_t
 
	tmediump_uöt
;

259 
	gdëaû
::
	thighp_uöt_t
 
	thighp_uöt
;

261 #if(!
deföed
(
GLM_PRECISION_HIGHP_INT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_INT
Ë&& !deföed(
GLM_PRECISION_LOWP_INT
))

262 
mediump_öt
 
	töt_t
;

263 #ñif(
deföed
(
GLM_PRECISION_HIGHP_INT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_INT
Ë&& !deföed(
GLM_PRECISION_LOWP_INT
))

264 
highp_öt
 
	töt_t
;

265 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_INT
Ë&& deföed(
GLM_PRECISION_MEDIUMP_INT
Ë&& !deföed(
GLM_PRECISION_LOWP_INT
))

266 
mediump_öt
 
	töt_t
;

267 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_INT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_INT
Ë&& deföed(
GLM_PRECISION_LOWP_INT
))

268 
lowp_öt
 
	töt_t
;

273 #if(!
deföed
(
GLM_PRECISION_HIGHP_UINT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_UINT
Ë&& !deföed(
GLM_PRECISION_LOWP_UINT
))

274 
mediump_uöt
 
	tuöt_t
;

275 #ñif(
deföed
(
GLM_PRECISION_HIGHP_UINT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_UINT
Ë&& !deföed(
GLM_PRECISION_LOWP_UINT
))

276 
highp_uöt
 
	tuöt_t
;

277 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_UINT
Ë&& deföed(
GLM_PRECISION_MEDIUMP_UINT
Ë&& !deföed(
GLM_PRECISION_LOWP_UINT
))

278 
mediump_uöt
 
	tuöt_t
;

279 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_UINT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_UINT
Ë&& deföed(
GLM_PRECISION_LOWP_UINT
))

280 
lowp_uöt
 
	tuöt_t
;

288 
	tuöt
;

294 #i‚de‡
GLM_STATIC_ASSERT_NULL


295 
GLM_STATIC_ASSERT
((
glm
::
öt8
) == 1, "int8 size isn't 1 byte onÅhisÖlatform");

296 
GLM_STATIC_ASSERT
((
glm
::
öt16
) == 2, "int16 size isn't 2 bytes onÅhisÖlatform");

297 
GLM_STATIC_ASSERT
((
glm
::
öt32
) == 4, "int32 size isn't 4 bytes onÅhisÖlatform");

298 
GLM_STATIC_ASSERT
((
glm
::
öt64
) == 8, "int64 size isn't 8 bytes onÅhisÖlatform");

300 
GLM_STATIC_ASSERT
((
glm
::
uöt8
) == 1, "uint8 size isn't 1 byte onÅhisÖlatform");

301 
GLM_STATIC_ASSERT
((
glm
::
uöt16
) == 2, "uint16 size isn't 2 bytes onÅhisÖlatform");

302 
GLM_STATIC_ASSERT
((
glm
::
uöt32
) == 4, "uint32 size isn't 4 bytes onÅhisÖlatform");

303 
GLM_STATIC_ASSERT
((
glm
::
uöt64
) == 8, "uint64 size isn't 8 bytes onÅhisÖlatform");

	@glm/glm/detail/type_mat.hpp

4 #¥agm®
⁄˚


6 
	~"¥ecisi⁄.hµ
"

8 
«me•a˚
 
	gglm
{

9 
«me•a˚
 
	gdëaû


11 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	g˛ass
, 
	g¥ecisi⁄
> 
˛ass
 
	gcﬁTy≥
,Åem∂©ê<˛ass,Öªcisi⁄> cœs†
	growTy≥
>

12 
	souãrProdu˘_åaô
{};

15 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtvec2
;

16 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtvec3
;

17 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtvec4
;

18 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtm©2x2
;

19 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtm©2x3
;

20 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtm©2x4
;

21 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtm©3x2
;

22 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtm©3x3
;

23 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtm©3x4
;

24 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtm©4x2
;

25 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtm©4x3
;

26 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtm©4x4
;

28 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gm©Ty≥
>

29 
GLM_FUNC_DECL
 
	gm©Ty≥
<
	gT
, 
	gP
> 
övî£
(
m©Ty≥
<
T
, 
P
> c⁄° & 
m
);

39 
	gtm©2x2
<, 
	tlowp
> 
	tlowp_m©2
;

46 
	gtm©2x2
<, 
	tmediump
> 
	tmediump_m©2
;

53 
	gtm©2x2
<, 
	thighp
> 
	thighp_m©2
;

60 
	gtm©2x2
<, 
	tlowp
> 
	tlowp_m©2x2
;

67 
	gtm©2x2
<, 
	tmediump
> 
	tmediump_m©2x2
;

74 
	gtm©2x2
<, 
	thighp
> 
	thighp_m©2x2
;

86 
	gtm©2x3
<, 
	tlowp
> 
	tlowp_m©2x3
;

93 
	gtm©2x3
<, 
	tmediump
> 
	tmediump_m©2x3
;

100 
	gtm©2x3
<, 
	thighp
> 
	thighp_m©2x3
;

112 
	gtm©2x4
<, 
	tlowp
> 
	tlowp_m©2x4
;

119 
	gtm©2x4
<, 
	tmediump
> 
	tmediump_m©2x4
;

126 
	gtm©2x4
<, 
	thighp
> 
	thighp_m©2x4
;

138 
	gtm©3x2
<, 
	tlowp
> 
	tlowp_m©3x2
;

145 
	gtm©3x2
<, 
	tmediump
> 
	tmediump_m©3x2
;

152 
	gtm©3x2
<, 
	thighp
> 
	thighp_m©3x2
;

164 
	gtm©3x3
<, 
	tlowp
> 
	tlowp_m©3
;

171 
	gtm©3x3
<, 
	tmediump
> 
	tmediump_m©3
;

178 
	gtm©3x3
<, 
	thighp
> 
	thighp_m©3
;

185 
	gtm©3x3
<, 
	tlowp
> 
	tlowp_m©3x3
;

192 
	gtm©3x3
<, 
	tmediump
> 
	tmediump_m©3x3
;

199 
	gtm©3x3
<, 
	thighp
> 
	thighp_m©3x3
;

211 
	gtm©3x4
<, 
	tlowp
> 
	tlowp_m©3x4
;

218 
	gtm©3x4
<, 
	tmediump
> 
	tmediump_m©3x4
;

225 
	gtm©3x4
<, 
	thighp
> 
	thighp_m©3x4
;

237 
	gtm©4x2
<, 
	tlowp
> 
	tlowp_m©4x2
;

244 
	gtm©4x2
<, 
	tmediump
> 
	tmediump_m©4x2
;

251 
	gtm©4x2
<, 
	thighp
> 
	thighp_m©4x2
;

263 
	gtm©4x3
<, 
	tlowp
> 
	tlowp_m©4x3
;

270 
	gtm©4x3
<, 
	tmediump
> 
	tmediump_m©4x3
;

277 
	gtm©4x3
<, 
	thighp
> 
	thighp_m©4x3
;

290 
	gtm©4x4
<, 
	tlowp
> 
	tlowp_m©4
;

297 
	gtm©4x4
<, 
	tmediump
> 
	tmediump_m©4
;

304 
	gtm©4x4
<, 
	thighp
> 
	thighp_m©4
;

311 
	gtm©4x4
<, 
	tlowp
> 
	tlowp_m©4x4
;

318 
	gtm©4x4
<, 
	tmediump
> 
	tmediump_m©4x4
;

325 
	gtm©4x4
<, 
	thighp
> 
	thighp_m©4x4
;

335 #if(
deföed
(
GLM_PRECISION_LOWP_FLOAT
))

336 
lowp_m©2x2
 
	tm©2x2
;

337 
lowp_m©2x3
 
	tm©2x3
;

338 
lowp_m©2x4
 
	tm©2x4
;

339 
lowp_m©3x2
 
	tm©3x2
;

340 
lowp_m©3x3
 
	tm©3x3
;

341 
lowp_m©3x4
 
	tm©3x4
;

342 
lowp_m©4x2
 
	tm©4x2
;

343 
lowp_m©4x3
 
	tm©4x3
;

344 
lowp_m©4x4
 
	tm©4x4
;

345 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_FLOAT
))

346 
mediump_m©2x2
 
	tm©2x2
;

347 
mediump_m©2x3
 
	tm©2x3
;

348 
mediump_m©2x4
 
	tm©2x4
;

349 
mediump_m©3x2
 
	tm©3x2
;

350 
mediump_m©3x3
 
	tm©3x3
;

351 
mediump_m©3x4
 
	tm©3x4
;

352 
mediump_m©4x2
 
	tm©4x2
;

353 
mediump_m©4x3
 
	tm©4x3
;

354 
mediump_m©4x4
 
	tm©4x4
;

359 
highp_m©2x2
 
	tm©2x2
;

364 
highp_m©2x3
 
	tm©2x3
;

369 
highp_m©2x4
 
	tm©2x4
;

374 
highp_m©3x2
 
	tm©3x2
;

379 
highp_m©3x3
 
	tm©3x3
;

384 
highp_m©3x4
 
	tm©3x4
;

389 
highp_m©4x2
 
	tm©4x2
;

394 
highp_m©4x3
 
	tm©4x3
;

399 
highp_m©4x4
 
	tm©4x4
;

406 
m©2x2
 
	tm©2
;

411 
m©3x3
 
	tm©3
;

416 
m©4x4
 
	tm©4
;

428 
	gtm©2x2
<, 
	tlowp
> 
	tlowp_dm©2
;

434 
	gtm©2x2
<, 
	tmediump
> 
	tmediump_dm©2
;

440 
	gtm©2x2
<, 
	thighp
> 
	thighp_dm©2
;

446 
	gtm©2x2
<, 
	tlowp
> 
	tlowp_dm©2x2
;

452 
	gtm©2x2
<, 
	tmediump
> 
	tmediump_dm©2x2
;

458 
	gtm©2x2
<, 
	thighp
> 
	thighp_dm©2x2
;

469 
	gtm©2x3
<, 
	tlowp
> 
	tlowp_dm©2x3
;

475 
	gtm©2x3
<, 
	tmediump
> 
	tmediump_dm©2x3
;

481 
	gtm©2x3
<, 
	thighp
> 
	thighp_dm©2x3
;

492 
	gtm©2x4
<, 
	tlowp
> 
	tlowp_dm©2x4
;

498 
	gtm©2x4
<, 
	tmediump
> 
	tmediump_dm©2x4
;

504 
	gtm©2x4
<, 
	thighp
> 
	thighp_dm©2x4
;

515 
	gtm©3x2
<, 
	tlowp
> 
	tlowp_dm©3x2
;

521 
	gtm©3x2
<, 
	tmediump
> 
	tmediump_dm©3x2
;

527 
	gtm©3x2
<, 
	thighp
> 
	thighp_dm©3x2
;

538 
	gtm©3x3
<, 
	tlowp
> 
	tlowp_dm©3
;

544 
	gtm©3x3
<, 
	tmediump
> 
	tmediump_dm©3
;

550 
	gtm©3x3
<, 
	thighp
> 
	thighp_dm©3
;

556 
	gtm©3x3
<, 
	tlowp
> 
	tlowp_dm©3x3
;

562 
	gtm©3x3
<, 
	tmediump
> 
	tmediump_dm©3x3
;

568 
	gtm©3x3
<, 
	thighp
> 
	thighp_dm©3x3
;

579 
	gtm©3x4
<, 
	tlowp
> 
	tlowp_dm©3x4
;

585 
	gtm©3x4
<, 
	tmediump
> 
	tmediump_dm©3x4
;

591 
	gtm©3x4
<, 
	thighp
> 
	thighp_dm©3x4
;

602 
	gtm©4x2
<, 
	tlowp
> 
	tlowp_dm©4x2
;

608 
	gtm©4x2
<, 
	tmediump
> 
	tmediump_dm©4x2
;

614 
	gtm©4x2
<, 
	thighp
> 
	thighp_dm©4x2
;

625 
	gtm©4x3
<, 
	tlowp
> 
	tlowp_dm©4x3
;

631 
	gtm©4x3
<, 
	tmediump
> 
	tmediump_dm©4x3
;

637 
	gtm©4x3
<, 
	thighp
> 
	thighp_dm©4x3
;

648 
	gtm©4x4
<, 
	tlowp
> 
	tlowp_dm©4
;

654 
	gtm©4x4
<, 
	tmediump
> 
	tmediump_dm©4
;

660 
	gtm©4x4
<, 
	thighp
> 
	thighp_dm©4
;

666 
	gtm©4x4
<, 
	tlowp
> 
	tlowp_dm©4x4
;

672 
	gtm©4x4
<, 
	tmediump
> 
	tmediump_dm©4x4
;

678 
	gtm©4x4
<, 
	thighp
> 
	thighp_dm©4x4
;

682 #if(
deföed
(
GLM_PRECISION_LOWP_DOUBLE
))

683 
lowp_dm©2x2
 
	tdm©2x2
;

684 
lowp_dm©2x3
 
	tdm©2x3
;

685 
lowp_dm©2x4
 
	tdm©2x4
;

686 
lowp_dm©3x2
 
	tdm©3x2
;

687 
lowp_dm©3x3
 
	tdm©3x3
;

688 
lowp_dm©3x4
 
	tdm©3x4
;

689 
lowp_dm©4x2
 
	tdm©4x2
;

690 
lowp_dm©4x3
 
	tdm©4x3
;

691 
lowp_dm©4x4
 
	tdm©4x4
;

692 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_DOUBLE
))

693 
mediump_dm©2x2
 
	tdm©2x2
;

694 
mediump_dm©2x3
 
	tdm©2x3
;

695 
mediump_dm©2x4
 
	tdm©2x4
;

696 
mediump_dm©3x2
 
	tdm©3x2
;

697 
mediump_dm©3x3
 
	tdm©3x3
;

698 
mediump_dm©3x4
 
	tdm©3x4
;

699 
mediump_dm©4x2
 
	tdm©4x2
;

700 
mediump_dm©4x3
 
	tdm©4x3
;

701 
mediump_dm©4x4
 
	tdm©4x4
;

707 
highp_dm©2x2
 
	tdm©2
;

712 
highp_dm©3x3
 
	tdm©3
;

717 
highp_dm©4x4
 
	tdm©4
;

722 
highp_dm©2x2
 
	tdm©2x2
;

727 
highp_dm©2x3
 
	tdm©2x3
;

732 
highp_dm©2x4
 
	tdm©2x4
;

737 
highp_dm©3x2
 
	tdm©3x2
;

742 
highp_dm©3x3
 
	tdm©3x3
;

747 
highp_dm©3x4
 
	tdm©3x4
;

752 
highp_dm©4x2
 
	tdm©4x2
;

757 
highp_dm©4x3
 
	tdm©4x3
;

762 
highp_dm©4x4
 
	tdm©4x4
;

	@glm/glm/detail/type_mat2x2.hpp

4 #¥agm®
⁄˚


6 
	~"../fwd.hµ
"

7 
	~"ty≥_vec2.hµ
"

8 
	~"ty≥_m©.hµ
"

9 
	~<limôs
>

10 
	~<c°ddef
>

12 
«me•a˚
 
	gglm


14 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

15 
	stm©2x2


17 
tvec2
<
	tT
, 
	tP
> 
	tcﬁ_ty≥
;

18 
	gtvec2
<
	tT
, 
	tP
> 
	trow_ty≥
;

19 
	gtm©2x2
<
	tT
, 
	tP
> 
	tty≥
;

20 
	gtm©2x2
<
	tT
, 
	tP
> 
	tå™•o£_ty≥
;

21 
T
 
	tvÆue_ty≥
;

23 
	g¥iv©e
:

24 
cﬁ_ty≥
 
vÆue
[2];

26 
	gpublic
:

29 
GLM_FUNC_DECL
 
tm©2x2
(Ë
GLM_DEFAULT_CTOR
;

30 
GLM_FUNC_DECL
 
tm©2x2
—m©2x2<
T
, 
P
> c⁄° & 
m
Ë
	gGLM_DEFAULT
;

31 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

32 
GLM_FUNC_DECL
 
tm©2x2
—m©2x2<
T
, 
Q
> c⁄° & 
m
);

34 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tm©2x2
(
˘‹
);

35 
GLM_FUNC_DECL
 
ex∂icô
 
tm©2x2
(
T
 
sˇœr
);

36 
GLM_FUNC_DECL
 
tm©2x2
(

37 
T
 c⁄° & 
x1
, T c⁄° & 
y1
,

38 
T
 c⁄° & 
x2
, T c⁄° & 
y2
);

39 
GLM_FUNC_DECL
 
tm©2x2
(

40 
cﬁ_ty≥
 c⁄° & 
v1
,

41 
cﬁ_ty≥
 c⁄° & 
v2
);

45 
	gãm∂©e
 <
ty≥«me
 
	gU
,Åy≥«mê
	gV
,Åy≥«mê
	gM
,Åy≥«mê
	gN
>

46 
GLM_FUNC_DECL
 
tm©2x2
(

47 
U
 c⁄° & 
x1
, 
V
 c⁄° & 
y1
,

48 
M
 c⁄° & 
x2
, 
N
 c⁄° & 
y2
);

50 
	gãm∂©e
 <
ty≥«me
 
	gU
,Åy≥«mê
	gV
>

51 
GLM_FUNC_DECL
 
tm©2x2
(

52 
tvec2
<
U
, 
P
> c⁄° & 
v1
,

53 
tvec2
<
V
, 
P
> c⁄° & 
v2
);

57 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

58 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x2
—m©2x2<
U
, 
Q
> c⁄° & 
m
);

60 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x2
(
tm©3x3
<
T
, 
P
> c⁄° & 
x
);

61 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x2
(
tm©4x4
<
T
, 
P
> c⁄° & 
x
);

62 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x2
(
tm©2x3
<
T
, 
P
> c⁄° & 
x
);

63 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x2
(
tm©3x2
<
T
, 
P
> c⁄° & 
x
);

64 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x2
(
tm©2x4
<
T
, 
P
> c⁄° & 
x
);

65 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x2
(
tm©4x2
<
T
, 
P
> c⁄° & 
x
);

66 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x2
(
tm©3x4
<
T
, 
P
> c⁄° & 
x
);

67 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x2
(
tm©4x3
<
T
, 
P
> c⁄° & 
x
);

71 
Àngth_t
 
	tÀngth_ty≥
;

72 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 2;}

74 
GLM_FUNC_DECL
 
	gcﬁ_ty≥
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

75 
GLM_FUNC_DECL
 
cﬁ_ty≥
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

79 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©2x2
<
T
, P> c⁄° & 
	gv
Ë
	gGLM_DEFAULT
;

81 
	gãm∂©e
 <
ty≥«me
 
	gU
>

82 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©2x2
<
U
, P> c⁄° & 
	gm
);

83 
	gãm∂©e
 <
ty≥«me
 
	gU
>

84 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
U
 
s
);

85 
	gãm∂©e
 <
ty≥«me
 
	gU
>

86 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tm©2x2
<
U
, P> c⁄° & 
	gm
);

87 
	gãm∂©e
 <
ty≥«me
 
	gU
>

88 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
U
 
s
);

89 
	gãm∂©e
 <
ty≥«me
 
	gU
>

90 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tm©2x2
<
U
, P> c⁄° & 
	gm
);

91 
	gãm∂©e
 <
ty≥«me
 
	gU
>

92 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
s
);

93 
	gãm∂©e
 <
ty≥«me
 
	gU
>

94 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
tm©2x2
<
U
, P> c⁄° & 
	gm
);

95 
	gãm∂©e
 <
ty≥«me
 
	gU
>

96 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
s
);

97 
	gãm∂©e
 <
ty≥«me
 
	gU
>

98 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
tm©2x2
<
U
, P> c⁄° & 
	gm
);

102 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> & 
	g›î©‹
++ ();

103 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> & 
	g›î©‹
-- ();

104 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
++();

105 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
--();

110 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

111 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
+—m©2x2<T, P> c⁄° & 
	gm
);

113 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

114 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
-—m©2x2<T, P> c⁄° & 
	gm
);

118 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

119 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
+—m©2x2<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

121 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

122 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
+(
T
 
	gsˇœr
,Åm©2x2<T, P> c⁄° & 
	gm
);

124 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

125 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
+—m©2x2<T, P> c⁄° & 
	gm1
,Åm©2x2<T, P> c⁄° & 
	gm2
);

127 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

128 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
-—m©2x2<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

130 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

131 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
-(
T
 
	gsˇœr
,Åm©2x2<T, P> c⁄° & 
	gm
);

133 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

134 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
-—m©2x2<T, P> c⁄° & 
	gm1
,Åm©2x2<T, P> c⁄° & 
	gm2
);

136 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

137 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
*—m©2x2<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

139 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

140 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 
	gsˇœr
,Åm©2x2<T, P> c⁄° & 
	gm
);

142 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

143 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©2x2
<
	gT
, 
	gP
>::
cﬁ_ty≥
 
›î©‹
*(
tm©2x2
<
T
, P> c⁄° & 
	gm
,Åy≥«mêtm©2x2<T, P>::
row_ty≥
 c⁄° & 
v
);

145 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

146 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©2x2
<
	gT
, 
	gP
>::
row_ty≥
 
›î©‹
*—y≥«mê
tm©2x2
<
T
, P>::
cﬁ_ty≥
 c⁄° & 
v
,Åm©2x2<T, P> c⁄° & 
	gm
);

148 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

149 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
*—m©2x2<T, P> c⁄° & 
	gm1
,Åm©2x2<T, P> c⁄° & 
	gm2
);

151 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

152 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©2x2
<T, P> c⁄° & 
	gm1
,Åm©3x2<T, P> c⁄° & 
	gm2
);

154 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

155 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©2x2
<T, P> c⁄° & 
	gm1
,Åm©4x2<T, P> c⁄° & 
	gm2
);

157 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

158 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
/—m©2x2<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

160 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

161 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 
	gsˇœr
,Åm©2x2<T, P> c⁄° & 
	gm
);

163 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

164 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©2x2
<
	gT
, 
	gP
>::
cﬁ_ty≥
 
›î©‹
/(
tm©2x2
<
T
, P> c⁄° & 
	gm
,Åy≥«mêtm©2x2<T, P>::
row_ty≥
 c⁄° & 
v
);

166 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

167 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©2x2
<
	gT
, 
	gP
>::
row_ty≥
 
›î©‹
/—y≥«mê
tm©2x2
<
T
, P>::
cﬁ_ty≥
 c⁄° & 
v
,Åm©2x2<T, P> c⁄° & 
	gm
);

169 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

170 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
/—m©2x2<T, P> c⁄° & 
	gm1
,Åm©2x2<T, P> c⁄° & 
	gm2
);

174 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

175 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tm©2x2
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©2x2
<
	gT
, P> c⁄° & 
	gm2
);

177 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

178 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tm©2x2
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©2x2
<
	gT
, P> c⁄° & 
	gm2
);

181 #i‚de‡
GLM_EXTERNAL_TEMPLATE


182 
	~"ty≥_m©2x2.öl
"

	@glm/glm/detail/type_mat2x3.hpp

4 #¥agm®
⁄˚


6 
	~"../fwd.hµ
"

7 
	~"ty≥_vec2.hµ
"

8 
	~"ty≥_vec3.hµ
"

9 
	~"ty≥_m©.hµ
"

10 
	~<limôs
>

11 
	~<c°ddef
>

13 
«me•a˚
 
	gglm


15 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

16 
	stm©2x3


18 
tvec3
<
	tT
, 
	tP
> 
	tcﬁ_ty≥
;

19 
	gtvec2
<
	tT
, 
	tP
> 
	trow_ty≥
;

20 
	gtm©2x3
<
	tT
, 
	tP
> 
	tty≥
;

21 
	gtm©3x2
<
	tT
, 
	tP
> 
	tå™•o£_ty≥
;

22 
T
 
	tvÆue_ty≥
;

24 
	g¥iv©e
:

25 
cﬁ_ty≥
 
vÆue
[2];

27 
	gpublic
:

30 
GLM_FUNC_DECL
 
tm©2x3
(Ë
GLM_DEFAULT_CTOR
;

31 
GLM_FUNC_DECL
 
tm©2x3
—m©2x3<
T
, 
P
> c⁄° & 
m
Ë
	gGLM_DEFAULT
;

32 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

33 
GLM_FUNC_DECL
 
tm©2x3
—m©2x3<
T
, 
Q
> c⁄° & 
m
);

35 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tm©2x3
(
˘‹
);

36 
GLM_FUNC_DECL
 
ex∂icô
 
tm©2x3
(
T
 
sˇœr
);

37 
GLM_FUNC_DECL
 
tm©2x3
(

38 
T
 
x0
, T 
y0
, T 
z0
,

39 
T
 
x1
, T 
y1
, T 
z1
);

40 
GLM_FUNC_DECL
 
tm©2x3
(

41 
cﬁ_ty≥
 c⁄° & 
v0
,

42 
cﬁ_ty≥
 c⁄° & 
v1
);

46 
	gãm∂©e
 <
ty≥«me
 
	gX1
,Åy≥«mê
	gY1
,Åy≥«mê
	gZ1
,Åy≥«mê
	gX2
,Åy≥«mê
	gY2
,Åy≥«mê
	gZ2
>

47 
GLM_FUNC_DECL
 
tm©2x3
(

48 
X1
 
x1
, 
Y1
 
y1
, 
Z1
 
z1
,

49 
X2
 
x2
, 
Y2
 
y2
, 
Z2
 
z2
);

51 
	gãm∂©e
 <
ty≥«me
 
	gU
,Åy≥«mê
	gV
>

52 
GLM_FUNC_DECL
 
tm©2x3
(

53 
tvec3
<
U
, 
P
> c⁄° & 
v1
,

54 
tvec3
<
V
, 
P
> c⁄° & 
v2
);

58 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

59 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x3
—m©2x3<
U
, 
Q
> c⁄° & 
m
);

61 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x3
(
tm©2x2
<
T
, 
P
> c⁄° & 
x
);

62 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x3
(
tm©3x3
<
T
, 
P
> c⁄° & 
x
);

63 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x3
(
tm©4x4
<
T
, 
P
> c⁄° & 
x
);

64 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x3
(
tm©2x4
<
T
, 
P
> c⁄° & 
x
);

65 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x3
(
tm©3x2
<
T
, 
P
> c⁄° & 
x
);

66 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x3
(
tm©3x4
<
T
, 
P
> c⁄° & 
x
);

67 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x3
(
tm©4x2
<
T
, 
P
> c⁄° & 
x
);

68 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x3
(
tm©4x3
<
T
, 
P
> c⁄° & 
x
);

72 
Àngth_t
 
	tÀngth_ty≥
;

73 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 2;}

75 
GLM_FUNC_DECL
 
	gcﬁ_ty≥
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

76 
GLM_FUNC_DECL
 
cﬁ_ty≥
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

80 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©2x3
<
T
, P> c⁄° & 
	gm
Ë
	gGLM_DEFAULT
;

82 
	gãm∂©e
 <
ty≥«me
 
	gU
>

83 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©2x3
<
U
, P> c⁄° & 
	gm
);

84 
	gãm∂©e
 <
ty≥«me
 
	gU
>

85 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
U
 
s
);

86 
	gãm∂©e
 <
ty≥«me
 
	gU
>

87 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tm©2x3
<
U
, P> c⁄° & 
	gm
);

88 
	gãm∂©e
 <
ty≥«me
 
	gU
>

89 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
U
 
s
);

90 
	gãm∂©e
 <
ty≥«me
 
	gU
>

91 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tm©2x3
<
U
, P> c⁄° & 
	gm
);

92 
	gãm∂©e
 <
ty≥«me
 
	gU
>

93 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
s
);

94 
	gãm∂©e
 <
ty≥«me
 
	gU
>

95 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
s
);

99 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> & 
	g›î©‹
++ ();

100 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> & 
	g›î©‹
-- ();

101 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
++();

102 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
--();

107 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

108 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
+—m©2x3<T, P> c⁄° & 
	gm
);

110 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

111 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
-—m©2x3<T, P> c⁄° & 
	gm
);

115 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

116 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
+—m©2x3<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

118 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

119 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
+—m©2x3<T, P> c⁄° & 
	gm1
,Åm©2x3<T, P> c⁄° & 
	gm2
);

121 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

122 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
-—m©2x3<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

124 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

125 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
-—m©2x3<T, P> c⁄° & 
	gm1
,Åm©2x3<T, P> c⁄° & 
	gm2
);

127 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

128 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
*—m©2x3<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

130 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

131 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 
	gsˇœr
,Åm©2x3<T, P> c⁄° & 
	gm
);

133 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

134 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©2x3
<
	gT
, 
	gP
>::
cﬁ_ty≥
 
›î©‹
*(
tm©2x3
<
T
, P> c⁄° & 
	gm
,Åy≥«mêtm©2x3<T, P>::
row_ty≥
 c⁄° & 
v
);

136 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

137 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©2x3
<
	gT
, 
	gP
>::
row_ty≥
 
›î©‹
*—y≥«mê
tm©2x3
<
T
, P>::
cﬁ_ty≥
 c⁄° & 
v
,Åm©2x3<T, P> c⁄° & 
	gm
);

139 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

140 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
*—m©2x3<T, P> c⁄° & 
	gm1
, 
	gtm©2x2
<T, P> c⁄° & 
	gm2
);

142 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

143 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©2x3
<T, P> c⁄° & 
	gm1
, 
	gtm©3x2
<T, P> c⁄° & 
	gm2
);

145 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

146 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©2x3
<T, P> c⁄° & 
	gm1
, 
	gtm©4x2
<T, P> c⁄° & 
	gm2
);

148 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

149 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
/—m©2x3<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

151 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

152 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 
	gsˇœr
,Åm©2x3<T, P> c⁄° & 
	gm
);

156 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

157 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tm©2x3
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©2x3
<
	gT
, P> c⁄° & 
	gm2
);

159 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

160 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tm©2x3
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©2x3
<
	gT
, P> c⁄° & 
	gm2
);

163 #i‚de‡
GLM_EXTERNAL_TEMPLATE


164 
	~"ty≥_m©2x3.öl
"

	@glm/glm/detail/type_mat2x4.hpp

4 #¥agm®
⁄˚


6 
	~"../fwd.hµ
"

7 
	~"ty≥_vec2.hµ
"

8 
	~"ty≥_vec4.hµ
"

9 
	~"ty≥_m©.hµ
"

10 
	~<limôs
>

11 
	~<c°ddef
>

13 
«me•a˚
 
	gglm


15 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

16 
	stm©2x4


18 
tvec4
<
	tT
, 
	tP
> 
	tcﬁ_ty≥
;

19 
	gtvec2
<
	tT
, 
	tP
> 
	trow_ty≥
;

20 
	gtm©2x4
<
	tT
, 
	tP
> 
	tty≥
;

21 
	gtm©4x2
<
	tT
, 
	tP
> 
	tå™•o£_ty≥
;

22 
T
 
	tvÆue_ty≥
;

24 
	g¥iv©e
:

25 
cﬁ_ty≥
 
vÆue
[2];

27 
	gpublic
:

30 
GLM_FUNC_DECL
 
tm©2x4
(Ë
GLM_DEFAULT_CTOR
;

31 
GLM_FUNC_DECL
 
tm©2x4
—m©2x4<
T
, 
P
> c⁄° & 
m
Ë
	gGLM_DEFAULT
;

32 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

33 
GLM_FUNC_DECL
 
tm©2x4
—m©2x4<
T
, 
Q
> c⁄° & 
m
);

35 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tm©2x4
(
˘‹
);

36 
GLM_FUNC_DECL
 
ex∂icô
 
tm©2x4
(
T
 
sˇœr
);

37 
GLM_FUNC_DECL
 
tm©2x4
(

38 
T
 
x0
, T 
y0
, T 
z0
, T 
w0
,

39 
T
 
x1
, T 
y1
, T 
z1
, T 
w1
);

40 
GLM_FUNC_DECL
 
tm©2x4
(

41 
cﬁ_ty≥
 c⁄° & 
v0
,

42 
cﬁ_ty≥
 c⁄° & 
v1
);

46 
	gãm∂©e
 <

47 
ty≥«me
 
	gX1
,Åy≥«mê
	gY1
,Åy≥«mê
	gZ1
,Åy≥«mê
	gW1
,

48 
ty≥«me
 
	gX2
,Åy≥«mê
	gY2
,Åy≥«mê
	gZ2
,Åy≥«mê
	gW2
>

49 
GLM_FUNC_DECL
 
tm©2x4
(

50 
X1
 
x1
, 
Y1
 
y1
, 
Z1
 
z1
, 
W1
 
w1
,

51 
X2
 
x2
, 
Y2
 
y2
, 
Z2
 
z2
, 
W2
 
w2
);

53 
	gãm∂©e
 <
ty≥«me
 
	gU
,Åy≥«mê
	gV
>

54 
GLM_FUNC_DECL
 
tm©2x4
(

55 
tvec4
<
U
, 
P
> c⁄° & 
v1
,

56 
tvec4
<
V
, 
P
> c⁄° & 
v2
);

60 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

61 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x4
—m©2x4<
U
, 
Q
> c⁄° & 
m
);

63 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x4
(
tm©2x2
<
T
, 
P
> c⁄° & 
x
);

64 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x4
(
tm©3x3
<
T
, 
P
> c⁄° & 
x
);

65 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x4
(
tm©4x4
<
T
, 
P
> c⁄° & 
x
);

66 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x4
(
tm©2x3
<
T
, 
P
> c⁄° & 
x
);

67 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x4
(
tm©3x2
<
T
, 
P
> c⁄° & 
x
);

68 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x4
(
tm©3x4
<
T
, 
P
> c⁄° & 
x
);

69 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x4
(
tm©4x2
<
T
, 
P
> c⁄° & 
x
);

70 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©2x4
(
tm©4x3
<
T
, 
P
> c⁄° & 
x
);

74 
Àngth_t
 
	tÀngth_ty≥
;

75 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 2;}

77 
GLM_FUNC_DECL
 
	gcﬁ_ty≥
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

78 
GLM_FUNC_DECL
 
cﬁ_ty≥
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

82 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©2x4
<
T
, P> c⁄° & 
	gm
Ë
	gGLM_DEFAULT
;

84 
	gãm∂©e
 <
ty≥«me
 
	gU
>

85 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©2x4
<
U
, P> c⁄° & 
	gm
);

86 
	gãm∂©e
 <
ty≥«me
 
	gU
>

87 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
U
 
s
);

88 
	gãm∂©e
 <
ty≥«me
 
	gU
>

89 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tm©2x4
<
U
, P> c⁄° & 
	gm
);

90 
	gãm∂©e
 <
ty≥«me
 
	gU
>

91 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
U
 
s
);

92 
	gãm∂©e
 <
ty≥«me
 
	gU
>

93 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tm©2x4
<
U
, P> c⁄° & 
	gm
);

94 
	gãm∂©e
 <
ty≥«me
 
	gU
>

95 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
s
);

96 
	gãm∂©e
 <
ty≥«me
 
	gU
>

97 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
s
);

101 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> & 
	g›î©‹
++ ();

102 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> & 
	g›î©‹
-- ();

103 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
++();

104 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
--();

109 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

110 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
+—m©2x4<T, P> c⁄° & 
	gm
);

112 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

113 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
-—m©2x4<T, P> c⁄° & 
	gm
);

117 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

118 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
+—m©2x4<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

120 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

121 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
+—m©2x4<T, P> c⁄° & 
	gm1
,Åm©2x4<T, P> c⁄° & 
	gm2
);

123 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

124 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
-—m©2x4<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

126 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

127 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
-—m©2x4<T, P> c⁄° & 
	gm1
,Åm©2x4<T, P> c⁄° & 
	gm2
);

129 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

130 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
*—m©2x4<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

132 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

133 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 
	gsˇœr
,Åm©2x4<T, P> c⁄° & 
	gm
);

135 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

136 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©2x4
<
	gT
, 
	gP
>::
cﬁ_ty≥
 
›î©‹
*(
tm©2x4
<
T
, P> c⁄° & 
	gm
,Åy≥«mêtm©2x4<T, P>::
row_ty≥
 c⁄° & 
v
);

138 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

139 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©2x4
<
	gT
, 
	gP
>::
row_ty≥
 
›î©‹
*—y≥«mê
tm©2x4
<
T
, P>::
cﬁ_ty≥
 c⁄° & 
v
,Åm©2x4<T, P> c⁄° & 
	gm
);

141 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

142 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©2x4
<T, P> c⁄° & 
	gm1
, 
	gtm©4x2
<T, P> c⁄° & 
	gm2
);

144 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

145 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
*—m©2x4<T, P> c⁄° & 
	gm1
, 
	gtm©2x2
<T, P> c⁄° & 
	gm2
);

147 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

148 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©2x4
<T, P> c⁄° & 
	gm1
, 
	gtm©3x2
<T, P> c⁄° & 
	gm2
);

150 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

151 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
/—m©2x4<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

153 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

154 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 
	gsˇœr
,Åm©2x4<T, P> c⁄° & 
	gm
);

158 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

159 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tm©2x4
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©2x4
<
	gT
, P> c⁄° & 
	gm2
);

161 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

162 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tm©2x4
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©2x4
<
	gT
, P> c⁄° & 
	gm2
);

165 #i‚de‡
GLM_EXTERNAL_TEMPLATE


166 
	~"ty≥_m©2x4.öl
"

	@glm/glm/detail/type_mat3x2.hpp

4 #¥agm®
⁄˚


6 
	~"../fwd.hµ
"

7 
	~"ty≥_vec2.hµ
"

8 
	~"ty≥_vec3.hµ
"

9 
	~"ty≥_m©.hµ
"

10 
	~<limôs
>

11 
	~<c°ddef
>

13 
«me•a˚
 
	gglm


15 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

16 
	stm©3x2


18 
tvec2
<
	tT
, 
	tP
> 
	tcﬁ_ty≥
;

19 
	gtvec3
<
	tT
, 
	tP
> 
	trow_ty≥
;

20 
	gtm©3x2
<
	tT
, 
	tP
> 
	tty≥
;

21 
	gtm©2x3
<
	tT
, 
	tP
> 
	tå™•o£_ty≥
;

22 
T
 
	tvÆue_ty≥
;

24 
	g¥iv©e
:

25 
cﬁ_ty≥
 
vÆue
[3];

27 
	gpublic
:

30 
GLM_FUNC_DECL
 
tm©3x2
(Ë
GLM_DEFAULT_CTOR
;

31 
GLM_FUNC_DECL
 
tm©3x2
—m©3x2<
T
, 
P
> c⁄° & 
m
Ë
	gGLM_DEFAULT
;

32 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

33 
GLM_FUNC_DECL
 
tm©3x2
—m©3x2<
T
, 
Q
> c⁄° & 
m
);

35 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tm©3x2
(
˘‹
);

36 
GLM_FUNC_DECL
 
ex∂icô
 
tm©3x2
(
T
 
sˇœr
);

37 
GLM_FUNC_DECL
 
tm©3x2
(

38 
T
 
x0
, T 
y0
,

39 
T
 
x1
, T 
y1
,

40 
T
 
x2
, T 
y2
);

41 
GLM_FUNC_DECL
 
tm©3x2
(

42 
cﬁ_ty≥
 c⁄° & 
v0
,

43 
cﬁ_ty≥
 c⁄° & 
v1
,

44 
cﬁ_ty≥
 c⁄° & 
v2
);

48 
	gãm∂©e
<

49 
ty≥«me
 
	gX1
,Åy≥«mê
	gY1
,

50 
ty≥«me
 
	gX2
,Åy≥«mê
	gY2
,

51 
ty≥«me
 
	gX3
,Åy≥«mê
	gY3
>

52 
GLM_FUNC_DECL
 
tm©3x2
(

53 
X1
 
x1
, 
Y1
 
y1
,

54 
X2
 
x2
, 
Y2
 
y2
,

55 
X3
 
x3
, 
Y3
 
y3
);

57 
	gãm∂©e
 <
ty≥«me
 
	gV1
,Åy≥«mê
	gV2
,Åy≥«mê
	gV3
>

58 
GLM_FUNC_DECL
 
tm©3x2
(

59 
tvec2
<
V1
, 
P
> c⁄° & 
v1
,

60 
tvec2
<
V2
, 
P
> c⁄° & 
v2
,

61 
tvec2
<
V3
, 
P
> c⁄° & 
v3
);

65 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

66 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x2
—m©3x2<
U
, 
Q
> c⁄° & 
m
);

68 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x2
(
tm©2x2
<
T
, 
P
> c⁄° & 
x
);

69 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x2
(
tm©3x3
<
T
, 
P
> c⁄° & 
x
);

70 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x2
(
tm©4x4
<
T
, 
P
> c⁄° & 
x
);

71 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x2
(
tm©2x3
<
T
, 
P
> c⁄° & 
x
);

72 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x2
(
tm©2x4
<
T
, 
P
> c⁄° & 
x
);

73 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x2
(
tm©3x4
<
T
, 
P
> c⁄° & 
x
);

74 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x2
(
tm©4x2
<
T
, 
P
> c⁄° & 
x
);

75 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x2
(
tm©4x3
<
T
, 
P
> c⁄° & 
x
);

79 
Àngth_t
 
	tÀngth_ty≥
;

80 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 3;}

82 
GLM_FUNC_DECL
 
	gcﬁ_ty≥
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

83 
GLM_FUNC_DECL
 
cﬁ_ty≥
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

87 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©3x2
<
T
, P> c⁄° & 
	gm
Ë
	gGLM_DEFAULT
;

89 
	gãm∂©e
 <
ty≥«me
 
	gU
>

90 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©3x2
<
U
, P> c⁄° & 
	gm
);

91 
	gãm∂©e
 <
ty≥«me
 
	gU
>

92 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
U
 
s
);

93 
	gãm∂©e
 <
ty≥«me
 
	gU
>

94 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tm©3x2
<
U
, P> c⁄° & 
	gm
);

95 
	gãm∂©e
 <
ty≥«me
 
	gU
>

96 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
U
 
s
);

97 
	gãm∂©e
 <
ty≥«me
 
	gU
>

98 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tm©3x2
<
U
, P> c⁄° & 
	gm
);

99 
	gãm∂©e
 <
ty≥«me
 
	gU
>

100 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
s
);

101 
	gãm∂©e
 <
ty≥«me
 
	gU
>

102 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
s
);

106 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> & 
	g›î©‹
++ ();

107 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> & 
	g›î©‹
-- ();

108 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
++();

109 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
--();

114 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

115 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
+—m©3x2<T, P> c⁄° & 
	gm
);

117 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

118 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
-—m©3x2<T, P> c⁄° & 
	gm
);

122 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

123 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
+—m©3x2<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

125 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

126 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
+—m©3x2<T, P> c⁄° & 
	gm1
,Åm©3x2<T, P> c⁄° & 
	gm2
);

128 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

129 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
-—m©3x2<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

131 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

132 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
-—m©3x2<T, P> c⁄° & 
	gm1
,Åm©3x2<T, P> c⁄° & 
	gm2
);

134 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

135 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
*—m©3x2<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

137 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

138 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 
	gsˇœr
,Åm©3x2<T, P> c⁄° & 
	gm
);

140 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

141 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©3x2
<
	gT
, 
	gP
>::
cﬁ_ty≥
 
›î©‹
*(
tm©3x2
<
T
, P> c⁄° & 
	gm
,Åy≥«mêtm©3x2<T, P>::
row_ty≥
 c⁄° & 
v
);

143 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

144 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©3x2
<
	gT
, 
	gP
>::
row_ty≥
 
›î©‹
*—y≥«mê
tm©3x2
<
T
, P>::
cﬁ_ty≥
 c⁄° & 
v
,Åm©3x2<T, P> c⁄° & 
	gm
);

146 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

147 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©3x2
<T, P> c⁄° & 
	gm1
, 
	gtm©2x3
<T, P> c⁄° & 
	gm2
);

149 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

150 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
*—m©3x2<T, P> c⁄° & 
	gm1
, 
	gtm©3x3
<T, P> c⁄° & 
	gm2
);

152 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

153 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©3x2
<T, P> c⁄° & 
	gm1
, 
	gtm©4x3
<T, P> c⁄° & 
	gm2
);

155 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

156 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
/—m©3x2<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

158 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

159 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 
	gsˇœr
,Åm©3x2<T, P> c⁄° & 
	gm
);

163 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

164 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tm©3x2
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©3x2
<
	gT
, P> c⁄° & 
	gm2
);

166 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

167 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tm©3x2
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©3x2
<
	gT
, P> c⁄° & 
	gm2
);

171 #i‚de‡
GLM_EXTERNAL_TEMPLATE


172 
	~"ty≥_m©3x2.öl
"

	@glm/glm/detail/type_mat3x3.hpp

4 #¥agm®
⁄˚


6 
	~"../fwd.hµ
"

7 
	~"ty≥_vec3.hµ
"

8 
	~"ty≥_m©.hµ
"

9 
	~<limôs
>

10 
	~<c°ddef
>

12 
«me•a˚
 
	gglm


14 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

15 
	stm©3x3


17 
tvec3
<
	tT
, 
	tP
> 
	tcﬁ_ty≥
;

18 
	gtvec3
<
	tT
, 
	tP
> 
	trow_ty≥
;

19 
	gtm©3x3
<
	tT
, 
	tP
> 
	tty≥
;

20 
	gtm©3x3
<
	tT
, 
	tP
> 
	tå™•o£_ty≥
;

21 
T
 
	tvÆue_ty≥
;

23 
	g¥iv©e
:

24 
cﬁ_ty≥
 
vÆue
[3];

26 
	gpublic
:

29 
GLM_FUNC_DECL
 
tm©3x3
(Ë
GLM_DEFAULT_CTOR
;

30 
GLM_FUNC_DECL
 
tm©3x3
—m©3x3<
T
, 
P
> c⁄° & 
m
Ë
	gGLM_DEFAULT
;

31 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

32 
GLM_FUNC_DECL
 
tm©3x3
—m©3x3<
T
, 
Q
> c⁄° & 
m
);

34 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tm©3x3
(
˘‹
);

35 
GLM_FUNC_DECL
 
ex∂icô
 
tm©3x3
(
T
 
sˇœr
);

36 
GLM_FUNC_DECL
 
tm©3x3
(

37 
T
 
x0
, T 
y0
, T 
z0
,

38 
T
 
x1
, T 
y1
, T 
z1
,

39 
T
 
x2
, T 
y2
, T 
z2
);

40 
GLM_FUNC_DECL
 
tm©3x3
(

41 
cﬁ_ty≥
 c⁄° & 
v0
,

42 
cﬁ_ty≥
 c⁄° & 
v1
,

43 
cﬁ_ty≥
 c⁄° & 
v2
);

47 
	gãm∂©e
<

48 
ty≥«me
 
	gX1
,Åy≥«mê
	gY1
,Åy≥«mê
	gZ1
,

49 
ty≥«me
 
	gX2
,Åy≥«mê
	gY2
,Åy≥«mê
	gZ2
,

50 
ty≥«me
 
	gX3
,Åy≥«mê
	gY3
,Åy≥«mê
	gZ3
>

51 
GLM_FUNC_DECL
 
tm©3x3
(

52 
X1
 
x1
, 
Y1
 
y1
, 
Z1
 
z1
,

53 
X2
 
x2
, 
Y2
 
y2
, 
Z2
 
z2
,

54 
X3
 
x3
, 
Y3
 
y3
, 
Z3
 
z3
);

56 
	gãm∂©e
 <
ty≥«me
 
	gV1
,Åy≥«mê
	gV2
,Åy≥«mê
	gV3
>

57 
GLM_FUNC_DECL
 
tm©3x3
(

58 
tvec3
<
V1
, 
P
> c⁄° & 
v1
,

59 
tvec3
<
V2
, 
P
> c⁄° & 
v2
,

60 
tvec3
<
V3
, 
P
> c⁄° & 
v3
);

64 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

65 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x3
—m©3x3<
U
, 
Q
> c⁄° & 
m
);

67 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x3
(
tm©2x2
<
T
, 
P
> c⁄° & 
x
);

68 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x3
(
tm©4x4
<
T
, 
P
> c⁄° & 
x
);

69 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x3
(
tm©2x3
<
T
, 
P
> c⁄° & 
x
);

70 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x3
(
tm©3x2
<
T
, 
P
> c⁄° & 
x
);

71 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x3
(
tm©2x4
<
T
, 
P
> c⁄° & 
x
);

72 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x3
(
tm©4x2
<
T
, 
P
> c⁄° & 
x
);

73 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x3
(
tm©3x4
<
T
, 
P
> c⁄° & 
x
);

74 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x3
(
tm©4x3
<
T
, 
P
> c⁄° & 
x
);

78 
Àngth_t
 
	tÀngth_ty≥
;

79 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 3;}

81 
GLM_FUNC_DECL
 
	gcﬁ_ty≥
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

82 
GLM_FUNC_DECL
 
cﬁ_ty≥
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

86 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©3x3
<
T
, P> c⁄° & 
	gm
Ë
	gGLM_DEFAULT
;

88 
	gãm∂©e
 <
ty≥«me
 
	gU
>

89 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©3x3
<
U
, P> c⁄° & 
	gm
);

90 
	gãm∂©e
 <
ty≥«me
 
	gU
>

91 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
U
 
s
);

92 
	gãm∂©e
 <
ty≥«me
 
	gU
>

93 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tm©3x3
<
U
, P> c⁄° & 
	gm
);

94 
	gãm∂©e
 <
ty≥«me
 
	gU
>

95 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
U
 
s
);

96 
	gãm∂©e
 <
ty≥«me
 
	gU
>

97 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tm©3x3
<
U
, P> c⁄° & 
	gm
);

98 
	gãm∂©e
 <
ty≥«me
 
	gU
>

99 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
s
);

100 
	gãm∂©e
 <
ty≥«me
 
	gU
>

101 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
tm©3x3
<
U
, P> c⁄° & 
	gm
);

102 
	gãm∂©e
 <
ty≥«me
 
	gU
>

103 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
s
);

104 
	gãm∂©e
 <
ty≥«me
 
	gU
>

105 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
tm©3x3
<
U
, P> c⁄° & 
	gm
);

109 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> & 
	g›î©‹
++();

110 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> & 
	g›î©‹
--();

111 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
++();

112 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
--();

117 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

118 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
+—m©3x3<T, P> c⁄° & 
	gm
);

120 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

121 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
-—m©3x3<T, P> c⁄° & 
	gm
);

125 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

126 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
+—m©3x3<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

128 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

129 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
+(
T
 
	gsˇœr
,Åm©3x3<T, P> c⁄° & 
	gm
);

131 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

132 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
+—m©3x3<T, P> c⁄° & 
	gm1
,Åm©3x3<T, P> c⁄° & 
	gm2
);

134 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

135 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
-—m©3x3<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

137 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

138 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
-(
T
 
	gsˇœr
,Åm©3x3<T, P> c⁄° & 
	gm
);

140 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

141 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
-—m©3x3<T, P> c⁄° & 
	gm1
,Åm©3x3<T, P> c⁄° & 
	gm2
);

143 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

144 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
*—m©3x3<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

146 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

147 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 
	gsˇœr
,Åm©3x3<T, P> c⁄° & 
	gm
);

149 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

150 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©3x3
<
	gT
, 
	gP
>::
cﬁ_ty≥
 
›î©‹
*(
tm©3x3
<
T
, P> c⁄° & 
	gm
,Åy≥«mêtm©3x3<T, P>::
row_ty≥
 c⁄° & 
v
);

152 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

153 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©3x3
<
	gT
, 
	gP
>::
row_ty≥
 
›î©‹
*—y≥«mê
tm©3x3
<
T
, P>::
cﬁ_ty≥
 c⁄° & 
v
,Åm©3x3<T, P> c⁄° & 
	gm
);

155 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

156 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
*—m©3x3<T, P> c⁄° & 
	gm1
,Åm©3x3<T, P> c⁄° & 
	gm2
);

158 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

159 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©3x3
<T, P> c⁄° & 
	gm1
,Åm©2x3<T, P> c⁄° & 
	gm2
);

161 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

162 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©3x3
<T, P> c⁄° & 
	gm1
,Åm©4x3<T, P> c⁄° & 
	gm2
);

164 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

165 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
/—m©3x3<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

167 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

168 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 
	gsˇœr
,Åm©3x3<T, P> c⁄° & 
	gm
);

170 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

171 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©3x3
<
	gT
, 
	gP
>::
cﬁ_ty≥
 
›î©‹
/(
tm©3x3
<
T
, P> c⁄° & 
	gm
,Åy≥«mêtm©3x3<T, P>::
row_ty≥
 c⁄° & 
v
);

173 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

174 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©3x3
<
	gT
, 
	gP
>::
row_ty≥
 
›î©‹
/—y≥«mê
tm©3x3
<
T
, P>::
cﬁ_ty≥
 c⁄° & 
v
,Åm©3x3<T, P> c⁄° & 
	gm
);

176 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

177 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
/—m©3x3<T, P> c⁄° & 
	gm1
,Åm©3x3<T, P> c⁄° & 
	gm2
);

181 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

182 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tm©3x3
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©3x3
<
	gT
, P> c⁄° & 
	gm2
);

184 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

185 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tm©3x3
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©3x3
<
	gT
, P> c⁄° & 
	gm2
);

188 #i‚de‡
GLM_EXTERNAL_TEMPLATE


189 
	~"ty≥_m©3x3.öl
"

	@glm/glm/detail/type_mat3x4.hpp

4 #¥agm®
⁄˚


6 
	~"../fwd.hµ
"

7 
	~"ty≥_vec3.hµ
"

8 
	~"ty≥_vec4.hµ
"

9 
	~"ty≥_m©.hµ
"

10 
	~<limôs
>

11 
	~<c°ddef
>

13 
«me•a˚
 
	gglm


15 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

16 
	stm©3x4


18 
tvec4
<
	tT
, 
	tP
> 
	tcﬁ_ty≥
;

19 
	gtvec3
<
	tT
, 
	tP
> 
	trow_ty≥
;

20 
	gtm©3x4
<
	tT
, 
	tP
> 
	tty≥
;

21 
	gtm©4x3
<
	tT
, 
	tP
> 
	tå™•o£_ty≥
;

22 
T
 
	tvÆue_ty≥
;

24 
	g¥iv©e
:

25 
cﬁ_ty≥
 
vÆue
[3];

27 
	gpublic
:

30 
GLM_FUNC_DECL
 
tm©3x4
(Ë
GLM_DEFAULT_CTOR
;

31 
GLM_FUNC_DECL
 
tm©3x4
—m©3x4<
T
, 
P
> c⁄° & 
m
Ë
	gGLM_DEFAULT
;

32 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

33 
GLM_FUNC_DECL
 
tm©3x4
—m©3x4<
T
, 
Q
> c⁄° & 
m
);

35 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tm©3x4
(
˘‹
);

36 
GLM_FUNC_DECL
 
ex∂icô
 
tm©3x4
(
T
 
sˇœr
);

37 
GLM_FUNC_DECL
 
tm©3x4
(

38 
T
 
x0
, T 
y0
, T 
z0
, T 
w0
,

39 
T
 
x1
, T 
y1
, T 
z1
, T 
w1
,

40 
T
 
x2
, T 
y2
, T 
z2
, T 
w2
);

41 
GLM_FUNC_DECL
 
tm©3x4
(

42 
cﬁ_ty≥
 c⁄° & 
v0
,

43 
cﬁ_ty≥
 c⁄° & 
v1
,

44 
cﬁ_ty≥
 c⁄° & 
v2
);

48 
	gãm∂©e
<

49 
ty≥«me
 
	gX1
,Åy≥«mê
	gY1
,Åy≥«mê
	gZ1
,Åy≥«mê
	gW1
,

50 
ty≥«me
 
	gX2
,Åy≥«mê
	gY2
,Åy≥«mê
	gZ2
,Åy≥«mê
	gW2
,

51 
ty≥«me
 
	gX3
,Åy≥«mê
	gY3
,Åy≥«mê
	gZ3
,Åy≥«mê
	gW3
>

52 
GLM_FUNC_DECL
 
tm©3x4
(

53 
X1
 
x1
, 
Y1
 
y1
, 
Z1
 
z1
, 
W1
 
w1
,

54 
X2
 
x2
, 
Y2
 
y2
, 
Z2
 
z2
, 
W2
 
w2
,

55 
X3
 
x3
, 
Y3
 
y3
, 
Z3
 
z3
, 
W3
 
w3
);

57 
	gãm∂©e
 <
ty≥«me
 
	gV1
,Åy≥«mê
	gV2
,Åy≥«mê
	gV3
>

58 
GLM_FUNC_DECL
 
tm©3x4
(

59 
tvec4
<
V1
, 
P
> c⁄° & 
v1
,

60 
tvec4
<
V2
, 
P
> c⁄° & 
v2
,

61 
tvec4
<
V3
, 
P
> c⁄° & 
v3
);

65 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

66 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x4
—m©3x4<
U
, 
Q
> c⁄° & 
m
);

68 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x4
(
tm©2x2
<
T
, 
P
> c⁄° & 
x
);

69 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x4
(
tm©3x3
<
T
, 
P
> c⁄° & 
x
);

70 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x4
(
tm©4x4
<
T
, 
P
> c⁄° & 
x
);

71 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x4
(
tm©2x3
<
T
, 
P
> c⁄° & 
x
);

72 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x4
(
tm©3x2
<
T
, 
P
> c⁄° & 
x
);

73 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x4
(
tm©2x4
<
T
, 
P
> c⁄° & 
x
);

74 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x4
(
tm©4x2
<
T
, 
P
> c⁄° & 
x
);

75 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©3x4
(
tm©4x3
<
T
, 
P
> c⁄° & 
x
);

79 
Àngth_t
 
	tÀngth_ty≥
;

80 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 3;}

82 
GLM_FUNC_DECL
 
	gcﬁ_ty≥
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

83 
GLM_FUNC_DECL
 
cﬁ_ty≥
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

87 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©3x4
<
T
, P> c⁄° & 
	gm
Ë
	gGLM_DEFAULT
;

89 
	gãm∂©e
 <
ty≥«me
 
	gU
>

90 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©3x4
<
U
, P> c⁄° & 
	gm
);

91 
	gãm∂©e
 <
ty≥«me
 
	gU
>

92 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
U
 
s
);

93 
	gãm∂©e
 <
ty≥«me
 
	gU
>

94 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tm©3x4
<
U
, P> c⁄° & 
	gm
);

95 
	gãm∂©e
 <
ty≥«me
 
	gU
>

96 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
U
 
s
);

97 
	gãm∂©e
 <
ty≥«me
 
	gU
>

98 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tm©3x4
<
U
, P> c⁄° & 
	gm
);

99 
	gãm∂©e
 <
ty≥«me
 
	gU
>

100 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
s
);

101 
	gãm∂©e
 <
ty≥«me
 
	gU
>

102 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
s
);

106 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> & 
	g›î©‹
++();

107 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> & 
	g›î©‹
--();

108 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
++();

109 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
--();

114 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

115 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
+—m©3x4<T, P> c⁄° & 
	gm
);

117 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

118 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
-—m©3x4<T, P> c⁄° & 
	gm
);

122 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

123 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
+—m©3x4<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

125 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

126 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
+—m©3x4<T, P> c⁄° & 
	gm1
,Åm©3x4<T, P> c⁄° & 
	gm2
);

128 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

129 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
-—m©3x4<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

131 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

132 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
-—m©3x4<T, P> c⁄° & 
	gm1
,Åm©3x4<T, P> c⁄° & 
	gm2
);

134 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

135 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
*—m©3x4<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

137 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

138 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 
	gsˇœr
,Åm©3x4<T, P> c⁄° & 
	gm
);

140 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

141 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©3x4
<
	gT
, 
	gP
>::
cﬁ_ty≥
 
›î©‹
*(
tm©3x4
<
T
, P> c⁄° & 
	gm
,Åy≥«mêtm©3x4<T, P>::
row_ty≥
 c⁄° & 
v
);

143 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

144 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©3x4
<
	gT
, 
	gP
>::
row_ty≥
 
›î©‹
*—y≥«mê
tm©3x4
<
T
, P>::
cﬁ_ty≥
 c⁄° & 
v
,Åm©3x4<T, P> c⁄° & 
	gm
);

146 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

147 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©3x4
<T, P> c⁄° & 
	gm1
, 
	gtm©4x3
<T, P> c⁄° & 
	gm2
);

149 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

150 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©3x4
<T, P> c⁄° & 
	gm1
, 
	gtm©2x3
<T, P> c⁄° & 
	gm2
);

152 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

153 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
*—m©3x4<T, P> c⁄° & 
	gm1
, 
	gtm©3x3
<T, P> c⁄° & 
	gm2
);

155 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

156 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
/—m©3x4<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

158 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

159 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 
	gsˇœr
,Åm©3x4<T, P> c⁄° & 
	gm
);

163 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

164 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tm©3x4
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©3x4
<
	gT
, P> c⁄° & 
	gm2
);

166 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

167 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tm©3x4
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©3x4
<
	gT
, P> c⁄° & 
	gm2
);

170 #i‚de‡
GLM_EXTERNAL_TEMPLATE


171 
	~"ty≥_m©3x4.öl
"

	@glm/glm/detail/type_mat4x2.hpp

4 #¥agm®
⁄˚


6 
	~"../fwd.hµ
"

7 
	~"ty≥_vec2.hµ
"

8 
	~"ty≥_vec4.hµ
"

9 
	~"ty≥_m©.hµ
"

10 
	~<limôs
>

11 
	~<c°ddef
>

13 
«me•a˚
 
	gglm


15 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

16 
	stm©4x2


18 
tvec2
<
	tT
, 
	tP
> 
	tcﬁ_ty≥
;

19 
	gtvec4
<
	tT
, 
	tP
> 
	trow_ty≥
;

20 
	gtm©4x2
<
	tT
, 
	tP
> 
	tty≥
;

21 
	gtm©2x4
<
	tT
, 
	tP
> 
	tå™•o£_ty≥
;

22 
T
 
	tvÆue_ty≥
;

24 
	g¥iv©e
:

25 
cﬁ_ty≥
 
vÆue
[4];

27 
	gpublic
:

30 
GLM_FUNC_DECL
 
tm©4x2
(Ë
GLM_DEFAULT_CTOR
;

31 
GLM_FUNC_DECL
 
tm©4x2
—m©4x2<
T
, 
P
> c⁄° & 
m
Ë
	gGLM_DEFAULT
;

32 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

33 
GLM_FUNC_DECL
 
tm©4x2
—m©4x2<
T
, 
Q
> c⁄° & 
m
);

35 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tm©4x2
(
˘‹
);

36 
GLM_FUNC_DECL
 
ex∂icô
 
tm©4x2
(
T
 
sˇœr
);

37 
GLM_FUNC_DECL
 
tm©4x2
(

38 
T
 
x0
, T 
y0
,

39 
T
 
x1
, T 
y1
,

40 
T
 
x2
, T 
y2
,

41 
T
 
x3
, T 
y3
);

42 
GLM_FUNC_DECL
 
tm©4x2
(

43 
cﬁ_ty≥
 c⁄° & 
v0
,

44 
cﬁ_ty≥
 c⁄° & 
v1
,

45 
cﬁ_ty≥
 c⁄° & 
v2
,

46 
cﬁ_ty≥
 c⁄° & 
v3
);

50 
	gãm∂©e
 <

51 
ty≥«me
 
	gX1
,Åy≥«mê
	gY1
,

52 
ty≥«me
 
	gX2
,Åy≥«mê
	gY2
,

53 
ty≥«me
 
	gX3
,Åy≥«mê
	gY3
,

54 
ty≥«me
 
	gX4
,Åy≥«mê
	gY4
>

55 
GLM_FUNC_DECL
 
tm©4x2
(

56 
X1
 
x1
, 
Y1
 
y1
,

57 
X2
 
x2
, 
Y2
 
y2
,

58 
X3
 
x3
, 
Y3
 
y3
,

59 
X4
 
x4
, 
Y4
 
y4
);

61 
	gãm∂©e
 <
ty≥«me
 
	gV1
,Åy≥«mê
	gV2
,Åy≥«mê
	gV3
,Åy≥«mê
	gV4
>

62 
GLM_FUNC_DECL
 
tm©4x2
(

63 
tvec2
<
V1
, 
P
> c⁄° & 
v1
,

64 
tvec2
<
V2
, 
P
> c⁄° & 
v2
,

65 
tvec2
<
V3
, 
P
> c⁄° & 
v3
,

66 
tvec2
<
V4
, 
P
> c⁄° & 
v4
);

70 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

71 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x2
—m©4x2<
U
, 
Q
> c⁄° & 
m
);

73 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x2
(
tm©2x2
<
T
, 
P
> c⁄° & 
x
);

74 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x2
(
tm©3x3
<
T
, 
P
> c⁄° & 
x
);

75 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x2
(
tm©4x4
<
T
, 
P
> c⁄° & 
x
);

76 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x2
(
tm©2x3
<
T
, 
P
> c⁄° & 
x
);

77 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x2
(
tm©3x2
<
T
, 
P
> c⁄° & 
x
);

78 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x2
(
tm©2x4
<
T
, 
P
> c⁄° & 
x
);

79 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x2
(
tm©4x3
<
T
, 
P
> c⁄° & 
x
);

80 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x2
(
tm©3x4
<
T
, 
P
> c⁄° & 
x
);

84 
Àngth_t
 
	tÀngth_ty≥
;

85 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 4;}

87 
GLM_FUNC_DECL
 
	gcﬁ_ty≥
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

88 
GLM_FUNC_DECL
 
cﬁ_ty≥
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

92 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©4x2
<
T
, P> c⁄° & 
	gm
Ë
	gGLM_DEFAULT
;

94 
	gãm∂©e
 <
ty≥«me
 
	gU
>

95 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©4x2
<
U
, P> c⁄° & 
	gm
);

96 
	gãm∂©e
 <
ty≥«me
 
	gU
>

97 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
U
 
s
);

98 
	gãm∂©e
 <
ty≥«me
 
	gU
>

99 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tm©4x2
<
U
, P> c⁄° & 
	gm
);

100 
	gãm∂©e
 <
ty≥«me
 
	gU
>

101 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
U
 
s
);

102 
	gãm∂©e
 <
ty≥«me
 
	gU
>

103 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tm©4x2
<
U
, P> c⁄° & 
	gm
);

104 
	gãm∂©e
 <
ty≥«me
 
	gU
>

105 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
s
);

106 
	gãm∂©e
 <
ty≥«me
 
	gU
>

107 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
s
);

111 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> & 
	g›î©‹
++ ();

112 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> & 
	g›î©‹
-- ();

113 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
++();

114 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
--();

119 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

120 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
+—m©4x2<T, P> c⁄° & 
	gm
);

122 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

123 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
-—m©4x2<T, P> c⁄° & 
	gm
);

127 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

128 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
+—m©4x2<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

130 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

131 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
+—m©4x2<T, P> c⁄° & 
	gm1
,Åm©4x2<T, P> c⁄° & 
	gm2
);

133 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

134 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
-—m©4x2<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

136 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

137 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
-—m©4x2<T, P> c⁄° & 
	gm1
,Åm©4x2<T, P> c⁄° & 
	gm2
);

139 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

140 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
*—m©4x2<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

142 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

143 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 
	gsˇœr
,Åm©4x2<T, P> c⁄° & 
	gm
);

145 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

146 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©4x2
<
	gT
, 
	gP
>::
cﬁ_ty≥
 
›î©‹
*(
tm©4x2
<
T
, P> c⁄° & 
	gm
,Åy≥«mêtm©4x2<T, P>::
row_ty≥
 c⁄° & 
v
);

148 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

149 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©4x2
<
	gT
, 
	gP
>::
row_ty≥
 
›î©‹
*—y≥«mê
tm©4x2
<
T
, P>::
cﬁ_ty≥
 c⁄° & 
v
,Åm©4x2<T, P> c⁄° & 
	gm
);

151 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

152 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©4x2
<T, P> c⁄° & 
	gm1
, 
	gtm©2x4
<T, P> c⁄° & 
	gm2
);

154 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

155 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©4x2
<T, P> c⁄° & 
	gm1
, 
	gtm©3x4
<T, P> c⁄° & 
	gm2
);

157 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

158 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
*—m©4x2<T, P> c⁄° & 
	gm1
, 
	gtm©4x4
<T, P> c⁄° & 
	gm2
);

160 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

161 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
/—m©4x2<T, P> c⁄° & 
	gm
, 
T
 
	gsˇœr
);

163 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

164 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 
	gsˇœr
,Åm©4x2<T, P> c⁄° & 
	gm
);

168 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

169 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tm©4x2
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©4x2
<
	gT
, P> c⁄° & 
	gm2
);

171 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

172 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tm©4x2
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©4x2
<
	gT
, P> c⁄° & 
	gm2
);

175 #i‚de‡
GLM_EXTERNAL_TEMPLATE


176 
	~"ty≥_m©4x2.öl
"

	@glm/glm/detail/type_mat4x3.hpp

4 #¥agm®
⁄˚


6 
	~"../fwd.hµ
"

7 
	~"ty≥_vec3.hµ
"

8 
	~"ty≥_vec4.hµ
"

9 
	~"ty≥_m©.hµ
"

10 
	~<limôs
>

11 
	~<c°ddef
>

13 
«me•a˚
 
	gglm


15 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

16 
	stm©4x3


18 
tvec3
<
	tT
, 
	tP
> 
	tcﬁ_ty≥
;

19 
	gtvec4
<
	tT
, 
	tP
> 
	trow_ty≥
;

20 
	gtm©4x3
<
	tT
, 
	tP
> 
	tty≥
;

21 
	gtm©3x4
<
	tT
, 
	tP
> 
	tå™•o£_ty≥
;

22 
T
 
	tvÆue_ty≥
;

24 
	g¥iv©e
:

25 
cﬁ_ty≥
 
vÆue
[4];

27 
	gpublic
:

30 
GLM_FUNC_DECL
 
tm©4x3
(Ë
GLM_DEFAULT_CTOR
;

31 
GLM_FUNC_DECL
 
tm©4x3
—m©4x3<
T
, 
P
> c⁄° & 
m
Ë
	gGLM_DEFAULT
;

32 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

33 
GLM_FUNC_DECL
 
tm©4x3
—m©4x3<
T
, 
Q
> c⁄° & 
m
);

35 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tm©4x3
(
˘‹
);

36 
GLM_FUNC_DECL
 
ex∂icô
 
tm©4x3
(
T
 c⁄° & 
x
);

37 
GLM_FUNC_DECL
 
tm©4x3
(

38 
T
 c⁄° & 
x0
, T c⁄° & 
y0
, T c⁄° & 
z0
,

39 
T
 c⁄° & 
x1
, T c⁄° & 
y1
, T c⁄° & 
z1
,

40 
T
 c⁄° & 
x2
, T c⁄° & 
y2
, T c⁄° & 
z2
,

41 
T
 c⁄° & 
x3
, T c⁄° & 
y3
, T c⁄° & 
z3
);

42 
GLM_FUNC_DECL
 
tm©4x3
(

43 
cﬁ_ty≥
 c⁄° & 
v0
,

44 
cﬁ_ty≥
 c⁄° & 
v1
,

45 
cﬁ_ty≥
 c⁄° & 
v2
,

46 
cﬁ_ty≥
 c⁄° & 
v3
);

50 
	gãm∂©e
 <

51 
ty≥«me
 
	gX1
,Åy≥«mê
	gY1
,Åy≥«mê
	gZ1
,

52 
ty≥«me
 
	gX2
,Åy≥«mê
	gY2
,Åy≥«mê
	gZ2
,

53 
ty≥«me
 
	gX3
,Åy≥«mê
	gY3
,Åy≥«mê
	gZ3
,

54 
ty≥«me
 
	gX4
,Åy≥«mê
	gY4
,Åy≥«mê
	gZ4
>

55 
GLM_FUNC_DECL
 
tm©4x3
(

56 
X1
 c⁄° & 
x1
, 
Y1
 c⁄° & 
y1
, 
Z1
 c⁄° & 
z1
,

57 
X2
 c⁄° & 
x2
, 
Y2
 c⁄° & 
y2
, 
Z2
 c⁄° & 
z2
,

58 
X3
 c⁄° & 
x3
, 
Y3
 c⁄° & 
y3
, 
Z3
 c⁄° & 
z3
,

59 
X4
 c⁄° & 
x4
, 
Y4
 c⁄° & 
y4
, 
Z4
 c⁄° & 
z4
);

61 
	gãm∂©e
 <
ty≥«me
 
	gV1
,Åy≥«mê
	gV2
,Åy≥«mê
	gV3
,Åy≥«mê
	gV4
>

62 
GLM_FUNC_DECL
 
tm©4x3
(

63 
tvec3
<
V1
, 
P
> c⁄° & 
v1
,

64 
tvec3
<
V2
, 
P
> c⁄° & 
v2
,

65 
tvec3
<
V3
, 
P
> c⁄° & 
v3
,

66 
tvec3
<
V4
, 
P
> c⁄° & 
v4
);

70 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

71 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x3
—m©4x3<
U
, 
Q
> c⁄° & 
m
);

73 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x3
(
tm©2x2
<
T
, 
P
> c⁄° & 
x
);

74 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x3
(
tm©3x3
<
T
, 
P
> c⁄° & 
x
);

75 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x3
(
tm©4x4
<
T
, 
P
> c⁄° & 
x
);

76 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x3
(
tm©2x3
<
T
, 
P
> c⁄° & 
x
);

77 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x3
(
tm©3x2
<
T
, 
P
> c⁄° & 
x
);

78 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x3
(
tm©2x4
<
T
, 
P
> c⁄° & 
x
);

79 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x3
(
tm©4x2
<
T
, 
P
> c⁄° & 
x
);

80 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x3
(
tm©3x4
<
T
, 
P
> c⁄° & 
x
);

84 
Àngth_t
 
	tÀngth_ty≥
;

85 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 4;}

87 
GLM_FUNC_DECL
 
	gcﬁ_ty≥
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

88 
GLM_FUNC_DECL
 
cﬁ_ty≥
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

92 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©4x3
<
T
, P> c⁄° & 
	gm
Ë
	gGLM_DEFAULT
;

94 
	gãm∂©e
 <
ty≥«me
 
	gU
>

95 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©4x3
<
U
, P> c⁄° & 
	gm
);

96 
	gãm∂©e
 <
ty≥«me
 
	gU
>

97 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
U
 
s
);

98 
	gãm∂©e
 <
ty≥«me
 
	gU
>

99 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tm©4x3
<
U
, P> c⁄° & 
	gm
);

100 
	gãm∂©e
 <
ty≥«me
 
	gU
>

101 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
U
 
s
);

102 
	gãm∂©e
 <
ty≥«me
 
	gU
>

103 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tm©4x3
<
U
, P> c⁄° & 
	gm
);

104 
	gãm∂©e
 <
ty≥«me
 
	gU
>

105 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
s
);

106 
	gãm∂©e
 <
ty≥«me
 
	gU
>

107 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
s
);

111 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> & 
	g›î©‹
++();

112 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> & 
	g›î©‹
--();

113 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
++();

114 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
--();

119 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

120 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
+—m©4x3<T, P> c⁄° & 
	gm
);

122 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

123 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
-—m©4x3<T, P> c⁄° & 
	gm
);

127 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

128 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
+—m©4x3<T, P> c⁄° & 
	gm
, 
T
 c⁄° & 
	gs
);

130 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

131 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
+—m©4x3<T, P> c⁄° & 
	gm1
,Åm©4x3<T, P> c⁄° & 
	gm2
);

133 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

134 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
-—m©4x3<T, P> c⁄° & 
	gm
, 
T
 c⁄° & 
	gs
);

136 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

137 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
-—m©4x3<T, P> c⁄° & 
	gm1
,Åm©4x3<T, P> c⁄° & 
	gm2
);

139 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

140 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
*—m©4x3<T, P> c⁄° & 
	gm
, 
T
 c⁄° & 
	gs
);

142 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

143 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 c⁄° & 
	gs
,Åm©4x3<T, P> c⁄° & 
	gm
);

145 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

146 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©4x3
<
	gT
, 
	gP
>::
cﬁ_ty≥
 
›î©‹
*(
tm©4x3
<
T
, P> c⁄° & 
	gm
,Åy≥«mêtm©4x3<T, P>::
row_ty≥
 c⁄° & 
v
);

148 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

149 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©4x3
<
	gT
, 
	gP
>::
row_ty≥
 
›î©‹
*—y≥«mê
tm©4x3
<
T
, P>::
cﬁ_ty≥
 c⁄° & 
v
,Åm©4x3<T, P> c⁄° & 
	gm
);

151 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

152 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©4x3
<T, P> c⁄° & 
	gm1
, 
	gtm©2x4
<T, P> c⁄° & 
	gm2
);

154 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

155 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©4x3
<T, P> c⁄° & 
	gm1
, 
	gtm©3x4
<T, P> c⁄° & 
	gm2
);

157 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

158 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
*—m©4x3<T, P> c⁄° & 
	gm1
, 
	gtm©4x4
<T, P> c⁄° & 
	gm2
);

160 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

161 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
/—m©4x3<T, P> c⁄° & 
	gm
, 
T
 c⁄° & 
	gs
);

163 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

164 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 c⁄° & 
	gs
,Åm©4x3<T, P> c⁄° & 
	gm
);

168 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

169 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tm©4x3
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©4x3
<
	gT
, P> c⁄° & 
	gm2
);

171 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

172 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tm©4x3
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©4x3
<
	gT
, P> c⁄° & 
	gm2
);

175 #i‚de‡
GLM_EXTERNAL_TEMPLATE


176 
	~"ty≥_m©4x3.öl
"

	@glm/glm/detail/type_mat4x4.hpp

4 #¥agm®
⁄˚


6 
	~"../fwd.hµ
"

7 
	~"ty≥_vec4.hµ
"

8 
	~"ty≥_m©.hµ
"

9 
	~<limôs
>

10 
	~<c°ddef
>

12 
«me•a˚
 
	gglm


14 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

15 
	stm©4x4


17 
tvec4
<
	tT
, 
	tP
> 
	tcﬁ_ty≥
;

18 
	gtvec4
<
	tT
, 
	tP
> 
	trow_ty≥
;

19 
	gtm©4x4
<
	tT
, 
	tP
> 
	tty≥
;

20 
	gtm©4x4
<
	tT
, 
	tP
> 
	tå™•o£_ty≥
;

21 
T
 
	tvÆue_ty≥
;

23 
	g¥iv©e
:

24 
cﬁ_ty≥
 
vÆue
[4];

26 
	gpublic
:

29 
GLM_FUNC_DECL
 
tm©4x4
(Ë
GLM_DEFAULT_CTOR
;

30 
GLM_FUNC_DECL
 
tm©4x4
—m©4x4<
T
, 
P
> c⁄° & 
m
Ë
	gGLM_DEFAULT
;

31 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

32 
GLM_FUNC_DECL
 
tm©4x4
—m©4x4<
T
, 
Q
> c⁄° & 
m
);

34 
GLM_FUNC_DECL
 
ex∂icô
 
tm©4x4
(
˘‹
);

35 
GLM_FUNC_DECL
 
ex∂icô
 
tm©4x4
(
T
 c⁄° & 
x
);

36 
GLM_FUNC_DECL
 
tm©4x4
(

37 
T
 c⁄° & 
x0
, T c⁄° & 
y0
, T c⁄° & 
z0
, T c⁄° & 
w0
,

38 
T
 c⁄° & 
x1
, T c⁄° & 
y1
, T c⁄° & 
z1
, T c⁄° & 
w1
,

39 
T
 c⁄° & 
x2
, T c⁄° & 
y2
, T c⁄° & 
z2
, T c⁄° & 
w2
,

40 
T
 c⁄° & 
x3
, T c⁄° & 
y3
, T c⁄° & 
z3
, T c⁄° & 
w3
);

41 
GLM_FUNC_DECL
 
tm©4x4
(

42 
cﬁ_ty≥
 c⁄° & 
v0
,

43 
cﬁ_ty≥
 c⁄° & 
v1
,

44 
cﬁ_ty≥
 c⁄° & 
v2
,

45 
cﬁ_ty≥
 c⁄° & 
v3
);

49 
	gãm∂©e
 <

50 
ty≥«me
 
	gX1
,Åy≥«mê
	gY1
,Åy≥«mê
	gZ1
,Åy≥«mê
	gW1
,

51 
ty≥«me
 
	gX2
,Åy≥«mê
	gY2
,Åy≥«mê
	gZ2
,Åy≥«mê
	gW2
,

52 
ty≥«me
 
	gX3
,Åy≥«mê
	gY3
,Åy≥«mê
	gZ3
,Åy≥«mê
	gW3
,

53 
ty≥«me
 
	gX4
,Åy≥«mê
	gY4
,Åy≥«mê
	gZ4
,Åy≥«mê
	gW4
>

54 
GLM_FUNC_DECL
 
tm©4x4
(

55 
X1
 c⁄° & 
x1
, 
Y1
 c⁄° & 
y1
, 
Z1
 c⁄° & 
z1
, 
W1
 c⁄° & 
w1
,

56 
X2
 c⁄° & 
x2
, 
Y2
 c⁄° & 
y2
, 
Z2
 c⁄° & 
z2
, 
W2
 c⁄° & 
w2
,

57 
X3
 c⁄° & 
x3
, 
Y3
 c⁄° & 
y3
, 
Z3
 c⁄° & 
z3
, 
W3
 c⁄° & 
w3
,

58 
X4
 c⁄° & 
x4
, 
Y4
 c⁄° & 
y4
, 
Z4
 c⁄° & 
z4
, 
W4
 c⁄° & 
w4
);

60 
	gãm∂©e
 <
ty≥«me
 
	gV1
,Åy≥«mê
	gV2
,Åy≥«mê
	gV3
,Åy≥«mê
	gV4
>

61 
GLM_FUNC_DECL
 
tm©4x4
(

62 
tvec4
<
V1
, 
P
> c⁄° & 
v1
,

63 
tvec4
<
V2
, 
P
> c⁄° & 
v2
,

64 
tvec4
<
V3
, 
P
> c⁄° & 
v3
,

65 
tvec4
<
V4
, 
P
> c⁄° & 
v4
);

69 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

70 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x4
—m©4x4<
U
, 
Q
> c⁄° & 
m
);

72 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x4
(
tm©2x2
<
T
, 
P
> c⁄° & 
x
);

73 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x4
(
tm©3x3
<
T
, 
P
> c⁄° & 
x
);

74 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x4
(
tm©2x3
<
T
, 
P
> c⁄° & 
x
);

75 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x4
(
tm©3x2
<
T
, 
P
> c⁄° & 
x
);

76 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x4
(
tm©2x4
<
T
, 
P
> c⁄° & 
x
);

77 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x4
(
tm©4x2
<
T
, 
P
> c⁄° & 
x
);

78 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x4
(
tm©3x4
<
T
, 
P
> c⁄° & 
x
);

79 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tm©4x4
(
tm©4x3
<
T
, 
P
> c⁄° & 
x
);

83 
Àngth_t
 
	tÀngth_ty≥
;

84 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 4;}

86 
GLM_FUNC_DECL
 
	gcﬁ_ty≥
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

87 
GLM_FUNC_DECL
 
cﬁ_ty≥
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

91 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©4x4
<
T
, P> c⁄° & 
	gm
Ë
	gGLM_DEFAULT
;

93 
	gãm∂©e
 <
ty≥«me
 
	gU
>

94 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tm©4x4
<
U
, P> c⁄° & 
	gm
);

95 
	gãm∂©e
 <
ty≥«me
 
	gU
>

96 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
U
 
s
);

97 
	gãm∂©e
 <
ty≥«me
 
	gU
>

98 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tm©4x4
<
U
, P> c⁄° & 
	gm
);

99 
	gãm∂©e
 <
ty≥«me
 
	gU
>

100 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
U
 
s
);

101 
	gãm∂©e
 <
ty≥«me
 
	gU
>

102 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tm©4x4
<
U
, P> c⁄° & 
	gm
);

103 
	gãm∂©e
 <
ty≥«me
 
	gU
>

104 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
s
);

105 
	gãm∂©e
 <
ty≥«me
 
	gU
>

106 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
tm©4x4
<
U
, P> c⁄° & 
	gm
);

107 
	gãm∂©e
 <
ty≥«me
 
	gU
>

108 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
s
);

109 
	gãm∂©e
 <
ty≥«me
 
	gU
>

110 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
tm©4x4
<
U
, P> c⁄° & 
	gm
);

114 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> & 
	g›î©‹
++();

115 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> & 
	g›î©‹
--();

116 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
++();

117 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
--();

122 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

123 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
+—m©4x4<T, P> c⁄° & 
	gm
);

125 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

126 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
-—m©4x4<T, P> c⁄° & 
	gm
);

130 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

131 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
+—m©4x4<T, P> c⁄° & 
	gm
, 
T
 c⁄° & 
	gs
);

133 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

134 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
+(
T
 c⁄° & 
	gs
,Åm©4x4<T, P> c⁄° & 
	gm
);

136 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

137 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
+—m©4x4<T, P> c⁄° & 
	gm1
,Åm©4x4<T, P> c⁄° & 
	gm2
);

139 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

140 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
-—m©4x4<T, P> c⁄° & 
	gm
, 
T
 c⁄° & 
	gs
);

142 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

143 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
-(
T
 c⁄° & 
	gs
,Åm©4x4<T, P> c⁄° & 
	gm
);

145 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

146 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
-—m©4x4<T, P> c⁄° & 
	gm1
,Åm©4x4<T, P> c⁄° & 
	gm2
);

148 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

149 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
*—m©4x4<T, P> c⁄° & 
	gm
, 
T
 c⁄° & 
	gs
);

151 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

152 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 c⁄° & 
	gs
,Åm©4x4<T, P> c⁄° & 
	gm
);

154 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

155 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©4x4
<
	gT
, 
	gP
>::
cﬁ_ty≥
 
›î©‹
*(
tm©4x4
<
T
, P> c⁄° & 
	gm
,Åy≥«mêtm©4x4<T, P>::
row_ty≥
 c⁄° & 
v
);

157 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

158 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©4x4
<
	gT
, 
	gP
>::
row_ty≥
 
›î©‹
*—y≥«mê
tm©4x4
<
T
, P>::
cﬁ_ty≥
 c⁄° & 
v
,Åm©4x4<T, P> c⁄° & 
	gm
);

160 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

161 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©4x4
<T, P> c⁄° & 
	gm1
,Åm©2x4<T, P> c⁄° & 
	gm2
);

163 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

164 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtm©4x4
<T, P> c⁄° & 
	gm1
,Åm©3x4<T, P> c⁄° & 
	gm2
);

166 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

167 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
*—m©4x4<T, P> c⁄° & 
	gm1
,Åm©4x4<T, P> c⁄° & 
	gm2
);

169 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

170 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
/—m©4x4<T, P> c⁄° & 
	gm
, 
T
 c⁄° & 
	gs
);

172 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

173 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 c⁄° & 
	gs
,Åm©4x4<T, P> c⁄° & 
	gm
);

175 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

176 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©4x4
<
	gT
, 
	gP
>::
cﬁ_ty≥
 
›î©‹
/(
tm©4x4
<
T
, P> c⁄° & 
	gm
,Åy≥«mêtm©4x4<T, P>::
row_ty≥
 c⁄° & 
v
);

178 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

179 
GLM_FUNC_DECL
 
ty≥«me
 
	gtm©4x4
<
	gT
, 
	gP
>::
row_ty≥
 
›î©‹
/—y≥«mê
tm©4x4
<
T
, P>::
cﬁ_ty≥
 c⁄° & 
v
,Åm©4x4<T, P> c⁄° & 
	gm
);

181 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

182 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
	g›î©‹
/—m©4x4<T, P> c⁄° & 
	gm1
,Åm©4x4<T, P> c⁄° & 
	gm2
);

186 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

187 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tm©4x4
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©4x4
<
	gT
, P> c⁄° & 
	gm2
);

189 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

190 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tm©4x4
<
T
, 
	gP
> c⁄° & 
	gm1
, 
	gtm©4x4
<
	gT
, P> c⁄° & 
	gm2
);

193 #i‚de‡
GLM_EXTERNAL_TEMPLATE


194 
	~"ty≥_m©4x4.öl
"

	@glm/glm/detail/type_vec.hpp

4 #¥agm®
⁄˚


6 
	~"¥ecisi⁄.hµ
"

7 
	~"ty≥_öt.hµ
"

9 
«me•a˚
 
	gglm
{

10 
«me•a˚
 
	gdëaû


12 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	g°d
::
size_t
 
size
, 
boﬁ
 
	gÆig√d
>

13 
	s°‹age


15 
	sty≥
 {

16 
uöt8
 
	gd©a
[
size
];

17 } 
	tty≥
;

20 
	#GLM_ALIGNED_STORAGE_TYPE_STRUCT
(
x
) \

21 
ãm∂©e
 <
ty≥«me
 
T
> \

22 
°‹age
<
T
, 
x
, 
åue
> { \

23 
	`GLM_ALIGNED_STRUCT
(
x
Ë
ty≥
 { \

24 
uöt8
 
d©a
[
x
]; \

26 };

	)

28 
GLM_ALIGNED_STORAGE_TYPE_STRUCT
(1)

29 
GLM_ALIGNED_STORAGE_TYPE_STRUCT
(2)

30 
GLM_ALIGNED_STORAGE_TYPE_STRUCT
(4)

31 
GLM_ALIGNED_STORAGE_TYPE_STRUCT
(8)

32 
GLM_ALIGNED_STORAGE_TYPE_STRUCT
(16)

33 
GLM_ALIGNED_STORAGE_TYPE_STRUCT
(32)

34 
GLM_ALIGNED_STORAGE_TYPE_STRUCT
(64)

36 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


37 
	gãm∂©e
 <>

38 
	g°‹age
<, 16, 
	gåue
>

40 
glm_vec4
 
	tty≥
;

43 
	gãm∂©e
 <>

44 
	g°‹age
<, 16, 
	gåue
>

46 
glm_ivec4
 
	tty≥
;

49 
	gãm∂©e
 <>

50 
	g°‹age
<, 16, 
	gåue
>

52 
glm_uvec4
 
	tty≥
;

81 #i‡(
GLM_ARCH
 & 
GLM_ARCH_AVX_BIT
)

82 
	gãm∂©e
 <>

83 
	g°‹age
<, 32, 
	gåue
>

85 
glm_dvec4
 
	tty≥
;

89 #i‡(
GLM_ARCH
 & 
GLM_ARCH_AVX2_BIT
)

90 
	gãm∂©e
 <>

91 
	g°‹age
<
	göt64
, 32, 
	gåue
>

93 
glm_i64vec4
 
	tty≥
;

96 
	gãm∂©e
 <>

97 
	g°‹age
<
	guöt64
, 32, 
	gåue
>

99 
glm_u64vec4
 
	tty≥
;

104 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtvec1
;

105 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtvec2
;

106 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtvec3
;

107 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtvec4
;

109 
	gtvec1
<, 
	thighp
> 
	thighp_vec1_t
;

110 
	gtvec1
<, 
	tmediump
> 
	tmediump_vec1_t
;

111 
	gtvec1
<, 
	tlowp
> 
	tlowp_vec1_t
;

112 
	gtvec1
<, 
	thighp
> 
	thighp_dvec1_t
;

113 
	gtvec1
<, 
	tmediump
> 
	tmediump_dvec1_t
;

114 
	gtvec1
<, 
	tlowp
> 
	tlowp_dvec1_t
;

115 
	gtvec1
<, 
	thighp
> 
	thighp_ivec1_t
;

116 
	gtvec1
<, 
	tmediump
> 
	tmediump_ivec1_t
;

117 
	gtvec1
<, 
	tlowp
> 
	tlowp_ivec1_t
;

118 
	gtvec1
<
	tuöt
, 
	thighp
> 
	thighp_uvec1_t
;

119 
	gtvec1
<
	tuöt
, 
	tmediump
> 
	tmediump_uvec1_t
;

120 
	gtvec1
<
	tuöt
, 
	tlowp
> 
	tlowp_uvec1_t
;

121 
	gtvec1
<
	tboﬁ
, 
	thighp
> 
	thighp_bvec1_t
;

122 
	gtvec1
<
	tboﬁ
, 
	tmediump
> 
	tmediump_bvec1_t
;

123 
	gtvec1
<
	tboﬁ
, 
	tlowp
> 
	tlowp_bvec1_t
;

133 
	gtvec2
<, 
	thighp
> 
	thighp_vec2
;

140 
	gtvec2
<, 
	tmediump
> 
	tmediump_vec2
;

147 
	gtvec2
<, 
	tlowp
> 
	tlowp_vec2
;

154 
	gtvec2
<, 
	thighp
> 
	thighp_dvec2
;

161 
	gtvec2
<, 
	tmediump
> 
	tmediump_dvec2
;

168 
	gtvec2
<, 
	tlowp
> 
	tlowp_dvec2
;

175 
	gtvec2
<, 
	thighp
> 
	thighp_ivec2
;

182 
	gtvec2
<, 
	tmediump
> 
	tmediump_ivec2
;

189 
	gtvec2
<, 
	tlowp
> 
	tlowp_ivec2
;

196 
	gtvec2
<
	tuöt
, 
	thighp
> 
	thighp_uvec2
;

203 
	gtvec2
<
	tuöt
, 
	tmediump
> 
	tmediump_uvec2
;

210 
	gtvec2
<
	tuöt
, 
	tlowp
> 
	tlowp_uvec2
;

217 
	gtvec2
<
	tboﬁ
, 
	thighp
> 
	thighp_bvec2
;

224 
	gtvec2
<
	tboﬁ
, 
	tmediump
> 
	tmediump_bvec2
;

231 
	gtvec2
<
	tboﬁ
, 
	tlowp
> 
	tlowp_bvec2
;

243 
	gtvec3
<, 
	thighp
> 
	thighp_vec3
;

250 
	gtvec3
<, 
	tmediump
> 
	tmediump_vec3
;

257 
	gtvec3
<, 
	tlowp
> 
	tlowp_vec3
;

264 
	gtvec3
<, 
	thighp
> 
	thighp_dvec3
;

271 
	gtvec3
<, 
	tmediump
> 
	tmediump_dvec3
;

278 
	gtvec3
<, 
	tlowp
> 
	tlowp_dvec3
;

285 
	gtvec3
<, 
	thighp
> 
	thighp_ivec3
;

292 
	gtvec3
<, 
	tmediump
> 
	tmediump_ivec3
;

299 
	gtvec3
<, 
	tlowp
> 
	tlowp_ivec3
;

306 
	gtvec3
<
	tuöt
, 
	thighp
> 
	thighp_uvec3
;

313 
	gtvec3
<
	tuöt
, 
	tmediump
> 
	tmediump_uvec3
;

320 
	gtvec3
<
	tuöt
, 
	tlowp
> 
	tlowp_uvec3
;

326 
	gtvec3
<
	tboﬁ
, 
	thighp
> 
	thighp_bvec3
;

332 
	gtvec3
<
	tboﬁ
, 
	tmediump
> 
	tmediump_bvec3
;

338 
	gtvec3
<
	tboﬁ
, 
	tlowp
> 
	tlowp_bvec3
;

349 
	gtvec4
<, 
	thighp
> 
	thighp_vec4
;

355 
	gtvec4
<, 
	tmediump
> 
	tmediump_vec4
;

361 
	gtvec4
<, 
	tlowp
> 
	tlowp_vec4
;

367 
	gtvec4
<, 
	thighp
> 
	thighp_dvec4
;

373 
	gtvec4
<, 
	tmediump
> 
	tmediump_dvec4
;

379 
	gtvec4
<, 
	tlowp
> 
	tlowp_dvec4
;

385 
	gtvec4
<, 
	thighp
> 
	thighp_ivec4
;

391 
	gtvec4
<, 
	tmediump
> 
	tmediump_ivec4
;

397 
	gtvec4
<, 
	tlowp
> 
	tlowp_ivec4
;

403 
	gtvec4
<
	tuöt
, 
	thighp
> 
	thighp_uvec4
;

409 
	gtvec4
<
	tuöt
, 
	tmediump
> 
	tmediump_uvec4
;

415 
	gtvec4
<
	tuöt
, 
	tlowp
> 
	tlowp_uvec4
;

421 
	gtvec4
<
	tboﬁ
, 
	thighp
> 
	thighp_bvec4
;

427 
	gtvec4
<
	tboﬁ
, 
	tmediump
> 
	tmediump_bvec4
;

433 
	gtvec4
<
	tboﬁ
, 
	tlowp
> 
	tlowp_bvec4
;

442 #if(
deföed
(
GLM_PRECISION_LOWP_FLOAT
))

443 
lowp_vec2
 
	tvec2
;

444 
lowp_vec3
 
	tvec3
;

445 
lowp_vec4
 
	tvec4
;

446 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_FLOAT
))

447 
mediump_vec2
 
	tvec2
;

448 
mediump_vec3
 
	tvec3
;

449 
mediump_vec4
 
	tvec4
;

454 
highp_vec2
 
	tvec2
;

459 
highp_vec3
 
	tvec3
;

464 
highp_vec4
 
	tvec4
;

469 #if(
deföed
(
GLM_PRECISION_LOWP_DOUBLE
))

470 
lowp_dvec2
 
	tdvec2
;

471 
lowp_dvec3
 
	tdvec3
;

472 
lowp_dvec4
 
	tdvec4
;

473 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_DOUBLE
))

474 
mediump_dvec2
 
	tdvec2
;

475 
mediump_dvec3
 
	tdvec3
;

476 
mediump_dvec4
 
	tdvec4
;

481 
highp_dvec2
 
	tdvec2
;

486 
highp_dvec3
 
	tdvec3
;

491 
highp_dvec4
 
	tdvec4
;

496 #if(
deföed
(
GLM_PRECISION_LOWP_INT
))

497 
lowp_ivec2
 
	tivec2
;

498 
lowp_ivec3
 
	tivec3
;

499 
lowp_ivec4
 
	tivec4
;

500 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_INT
))

501 
mediump_ivec2
 
	tivec2
;

502 
mediump_ivec3
 
	tivec3
;

503 
mediump_ivec4
 
	tivec4
;

508 
highp_ivec2
 
	tivec2
;

513 
highp_ivec3
 
	tivec3
;

518 
highp_ivec4
 
	tivec4
;

523 #if(
deföed
(
GLM_PRECISION_LOWP_UINT
))

524 
lowp_uvec2
 
	tuvec2
;

525 
lowp_uvec3
 
	tuvec3
;

526 
lowp_uvec4
 
	tuvec4
;

527 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_UINT
))

528 
mediump_uvec2
 
	tuvec2
;

529 
mediump_uvec3
 
	tuvec3
;

530 
mediump_uvec4
 
	tuvec4
;

535 
highp_uvec2
 
	tuvec2
;

540 
highp_uvec3
 
	tuvec3
;

545 
highp_uvec4
 
	tuvec4
;

550 #if(
deföed
(
GLM_PRECISION_LOWP_BOOL
))

551 
lowp_bvec2
 
	tbvec2
;

552 
lowp_bvec3
 
	tbvec3
;

553 
lowp_bvec4
 
	tbvec4
;

554 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_BOOL
))

555 
mediump_bvec2
 
	tbvec2
;

556 
mediump_bvec3
 
	tbvec3
;

557 
mediump_bvec4
 
	tbvec4
;

562 
highp_bvec2
 
	tbvec2
;

567 
highp_bvec3
 
	tbvec3
;

572 
highp_bvec4
 
	tbvec4
;

	@glm/glm/detail/type_vec1.hpp

4 #¥agm®
⁄˚


6 
	~"../fwd.hµ
"

7 
	~"ty≥_vec.hµ
"

8 #i‡
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED


9 #i‡
GLM_HAS_UNRESTRICTED_UNIONS


10 
	~"_swizzÀ.hµ
"

12 
	~"_swizzÀ_func.hµ
"

15 
	~<c°ddef
>

17 
«me•a˚
 
	gglm


19 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

20 
	stvec1


24 
T
 
	tvÆue_ty≥
;

25 
	gtvec1
<
	tT
, 
	tP
> 
	tty≥
;

26 
	gtvec1
<
	tboﬁ
, 
	tP
> 
	tboﬁ_ty≥
;

30 #i‡
GLM_HAS_ALIGNED_TYPE


31 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


32 #¥agm®
GCC
 
dügno°ic
 
push


33 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpedantic"

35 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


36 #¥agm®
˛™g
 
dügno°ic
 
push


37 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wgnu-anonymous-struct"

38 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wnested-anon-types"

43 
T
 
	gx
;

44 
T
 
	gr
;

45 
T
 
	gs
;

60 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


61 #¥agm®
˛™g
 
dügno°ic
 
p›


63 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


64 #¥agm®
GCC
 
dügno°ic
 
p›


67 uni⁄ {
T
 
	gx
, 
	gr
, 
	gs
;};

77 
Àngth_t
 
	tÀngth_ty≥
;

78 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 1;}

80 
GLM_FUNC_DECL
 
	gT
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

81 
GLM_FUNC_DECL
 
T
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

85 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec1
(Ë
	gGLM_DEFAULT_CTOR
;

86 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec1
—vec1<
T
, 
P
> c⁄° & 
v
Ë
	gGLM_DEFAULT
;

87 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

88 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec1
—vec1<
T
, 
Q
> c⁄° & 
v
);

92 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tvec1
(
˘‹
);

93 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
ex∂icô
 
tvec1
(
T
 
sˇœr
);

98 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

99 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
GLM_EXPLICIT
 
tvec1
(
tvec2
<
U
, 
Q
> c⁄° & 
v
);

101 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

102 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
GLM_EXPLICIT
 
tvec1
(
tvec3
<
U
, 
Q
> c⁄° & 
v
);

104 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

105 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
GLM_EXPLICIT
 
tvec1
(
tvec4
<
U
, 
Q
> c⁄° & 
v
);

108 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

109 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
GLM_EXPLICIT
 
tvec1
—vec1<
U
, 
Q
> c⁄° & 
v
);

123 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tvec1
<
T
, P> c⁄° & 
	gv
Ë
	gGLM_DEFAULT
;

125 
	gãm∂©e
 <
ty≥«me
 
	gU
>

126 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tvec1
<
U
, P> c⁄° & 
	gv
);

127 
	gãm∂©e
 <
ty≥«me
 
	gU
>

128 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
U
 
sˇœr
);

129 
	gãm∂©e
 <
ty≥«me
 
	gU
>

130 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tvec1
<
U
, P> c⁄° & 
	gv
);

131 
	gãm∂©e
 <
ty≥«me
 
	gU
>

132 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
U
 
sˇœr
);

133 
	gãm∂©e
 <
ty≥«me
 
	gU
>

134 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tvec1
<
U
, P> c⁄° & 
	gv
);

135 
	gãm∂©e
 <
ty≥«me
 
	gU
>

136 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
sˇœr
);

137 
	gãm∂©e
 <
ty≥«me
 
	gU
>

138 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
tvec1
<
U
, P> c⁄° & 
	gv
);

139 
	gãm∂©e
 <
ty≥«me
 
	gU
>

140 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
sˇœr
);

141 
	gãm∂©e
 <
ty≥«me
 
	gU
>

142 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
tvec1
<
U
, P> c⁄° & 
	gv
);

146 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
++();

147 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
--();

148 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
++();

149 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
--();

153 
	gãm∂©e
 <
ty≥«me
 
	gU
>

154 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
%=(
U
 
sˇœr
);

155 
	gãm∂©e
 <
ty≥«me
 
	gU
>

156 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
%=(
tvec1
<
U
, P> c⁄° & 
	gv
);

157 
	gãm∂©e
 <
ty≥«me
 
	gU
>

158 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
&=(
U
 
sˇœr
);

159 
	gãm∂©e
 <
ty≥«me
 
	gU
>

160 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
&=(
tvec1
<
U
, P> c⁄° & 
	gv
);

161 
	gãm∂©e
 <
ty≥«me
 
	gU
>

162 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
|=(
U
 
sˇœr
);

163 
	gãm∂©e
 <
ty≥«me
 
	gU
>

164 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
|=(
tvec1
<
U
, P> c⁄° & 
	gv
);

165 
	gãm∂©e
 <
ty≥«me
 
	gU
>

166 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
^=(
U
 
sˇœr
);

167 
	gãm∂©e
 <
ty≥«me
 
	gU
>

168 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
^=(
tvec1
<
U
, P> c⁄° & 
	gv
);

169 
	gãm∂©e
 <
ty≥«me
 
	gU
>

170 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
<<=(
U
 
sˇœr
);

171 
	gãm∂©e
 <
ty≥«me
 
	gU
>

172 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
<<=(
tvec1
<
U
, P> c⁄° & 
	gv
);

173 
	gãm∂©e
 <
ty≥«me
 
	gU
>

174 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
>>=(
U
 
sˇœr
);

175 
	gãm∂©e
 <
ty≥«me
 
	gU
>

176 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> & 
	g›î©‹
>>=(
tvec1
<
U
, P> c⁄° & 
	gv
);

181 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

182 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
+—vec1<T, P> c⁄° & 
	gv
);

184 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

185 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
-—vec1<T, P> c⁄° & 
	gv
);

189 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

190 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
+—vec1<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

192 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

193 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
+(
T
 
	gsˇœr
,Åvec1<T, P> c⁄° & 
	gv
);

195 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

196 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
+—vec1<T, P> c⁄° & 
	gv1
,Åvec1<T, P> c⁄° & 
	gv2
);

198 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

199 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
-—vec1<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

201 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

202 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
-(
T
 
	gsˇœr
,Åvec1<T, P> c⁄° & 
	gv
);

204 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

205 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
- (tvec1<T, P> c⁄° & 
	gv1
,Åvec1<T, P> c⁄° & 
	gv2
);

207 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

208 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
*—vec1<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

210 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

211 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 
	gsˇœr
,Åvec1<T, P> c⁄° & 
	gv
);

213 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

214 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
*—vec1<T, P> c⁄° & 
	gv1
,Åvec1<T, P> c⁄° & 
	gv2
);

216 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

217 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
/—vec1<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

219 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

220 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 
	gsˇœr
,Åvec1<T, P> c⁄° & 
	gv
);

222 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

223 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
/—vec1<T, P> c⁄° & 
	gv1
,Åvec1<T, P> c⁄° & 
	gv2
);

225 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

226 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
%—vec1<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

228 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

229 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
%(
T
 
	gsˇœr
,Åvec1<T, P> c⁄° & 
	gv
);

231 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

232 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
%—vec1<T, P> c⁄° & 
	gv1
,Åvec1<T, P> c⁄° & 
	gv2
);

234 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

235 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
&—vec1<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

237 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

238 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
&(
T
 
	gsˇœr
,Åvec1<T, P> c⁄° & 
	gv
);

240 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

241 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
&—vec1<T, P> c⁄° & 
	gv1
,Åvec1<T, P> c⁄° & 
	gv2
);

243 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

244 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
|—vec1<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

246 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

247 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
|(
T
 
	gsˇœr
,Åvec1<T, P> c⁄° & 
	gv
);

249 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

250 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
|—vec1<T, P> c⁄° & 
	gv1
,Åvec1<T, P> c⁄° & 
	gv2
);

252 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

253 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
^—vec1<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

255 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

256 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
^(
T
 
	gsˇœr
,Åvec1<T, P> c⁄° & 
	gv
);

258 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

259 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
^—vec1<T, P> c⁄° & 
	gv1
,Åvec1<T, P> c⁄° & 
	gv2
);

261 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

262 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
<<—vec1<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

264 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

265 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
<<(
T
 
	gsˇœr
,Åvec1<T, P> c⁄° & 
	gv
);

267 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

268 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
<<—vec1<T, P> c⁄° & 
	gv1
,Åvec1<T, P> c⁄° & 
	gv2
);

270 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

271 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
>>—vec1<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

273 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

274 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
>>(
T
 
	gsˇœr
,Åvec1<T, P> c⁄° & 
	gv
);

276 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

277 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
>>—vec1<T, P> c⁄° & 
	gv1
,Åvec1<T, P> c⁄° & 
	gv2
);

279 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

280 
GLM_FUNC_DECL
 
	gtvec1
<
	gT
, 
	gP
> 
	g›î©‹
~—vec1<T, P> c⁄° & 
	gv
);

284 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

285 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tvec1
<
T
, 
	gP
> c⁄° & 
	gv1
, 
	gtvec1
<
	gT
, P> c⁄° & 
	gv2
);

287 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

288 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tvec1
<
T
, 
	gP
> c⁄° & 
	gv1
, 
	gtvec1
<
	gT
, P> c⁄° & 
	gv2
);

290 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
>

291 
GLM_FUNC_DECL
 
	gtvec1
<
	gboﬁ
, 
	gP
> 
	g›î©‹
&&—vec1<boﬁ, P> c⁄° & 
	gv1
,Åvec1<boﬁ, P> c⁄° & 
	gv2
);

293 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
>

294 
GLM_FUNC_DECL
 
	gtvec1
<
	gboﬁ
, 
	gP
> 
	g›î©‹
||—vec1<boﬁ, P> c⁄° & 
	gv1
,Åvec1<boﬁ, P> c⁄° & 
	gv2
);

297 #i‚de‡
GLM_EXTERNAL_TEMPLATE


298 
	~"ty≥_vec1.öl
"

	@glm/glm/detail/type_vec2.hpp

4 #¥agm®
⁄˚


6 
	~"ty≥_vec.hµ
"

7 #i‡
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED


8 #i‡
GLM_HAS_UNRESTRICTED_UNIONS


9 
	~"_swizzÀ.hµ
"

11 
	~"_swizzÀ_func.hµ
"

14 
	~<c°ddef
>

16 
«me•a˚
 
	gglm


18 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

19 
	stvec2


23 
T
 
	tvÆue_ty≥
;

24 
	gtvec2
<
	tT
, 
	tP
> 
	tty≥
;

25 
	gtvec2
<
	tboﬁ
, 
	tP
> 
	tboﬁ_ty≥
;

29 #i‡
GLM_HAS_ALIGNED_TYPE


30 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


31 #¥agm®
GCC
 
dügno°ic
 
push


32 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpedantic"

34 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


35 #¥agm®
˛™g
 
dügno°ic
 
push


36 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wgnu-anonymous-struct"

37 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wnested-anon-types"

42 °ru˘{ 
T
 
	gx
, 
	gy
; };

43 °ru˘{ 
T
 
	gr
, 
	gg
; };

44 °ru˘{ 
T
 
	gs
, 
	gt
; };

46 #i‡
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED


47 
_GLM_SWIZZLE2_2_MEMBERS
(
T
, 
P
, 
glm
::
tvec2
, 
x
, 
y
)

48 
_GLM_SWIZZLE2_2_MEMBERS
(
T
, 
P
, 
glm
::
tvec2
, 
r
, 
g
)

49 
_GLM_SWIZZLE2_2_MEMBERS
(
T
, 
P
, 
glm
::
tvec2
, 
s
, 
t
)

50 
_GLM_SWIZZLE2_3_MEMBERS
(
T
, 
P
, 
glm
::
tvec3
, 
x
, 
y
)

51 
_GLM_SWIZZLE2_3_MEMBERS
(
T
, 
P
, 
glm
::
tvec3
, 
r
, 
g
)

52 
_GLM_SWIZZLE2_3_MEMBERS
(
T
, 
P
, 
glm
::
tvec3
, 
s
, 
t
)

53 
_GLM_SWIZZLE2_4_MEMBERS
(
T
, 
P
, 
glm
::
tvec4
, 
x
, 
y
)

54 
_GLM_SWIZZLE2_4_MEMBERS
(
T
, 
P
, 
glm
::
tvec4
, 
r
, 
g
)

55 
_GLM_SWIZZLE2_4_MEMBERS
(
T
, 
P
, 
glm
::
tvec4
, 
s
, 
t
)

60 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


61 #¥agm®
˛™g
 
dügno°ic
 
p›


63 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


64 #¥agm®
GCC
 
dügno°ic
 
p›


67 uni⁄ {
T
 
	gx
, 
	gr
, 
	gs
;};

68 uni⁄ {
T
 
	gy
, 
	gg
, 
	gt
;};

70 #i‡
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED


71 
GLM_SWIZZLE_GEN_VEC_FROM_VEC2
(
T
, 
P
, 
tvec2
,Åvec2, 
tvec3
, 
tvec4
)

78 
Àngth_t
 
	tÀngth_ty≥
;

79 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 2;}

81 
GLM_FUNC_DECL
 
	gT
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

82 
GLM_FUNC_DECL
 
T
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

86 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec2
(Ë
	gGLM_DEFAULT_CTOR
;

87 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec2
—vec2<
T
, 
P
> c⁄°& 
v
Ë
	gGLM_DEFAULT
;

88 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

89 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec2
—vec2<
T
, 
Q
> c⁄°& 
v
);

93 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tvec2
(
˘‹
);

94 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
ex∂icô
 
tvec2
(
T
 
sˇœr
);

95 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec2
(
T
 
s1
, T 
s2
);

100 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
>

101 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec2
(
A
 
x
, 
B
 
y
);

102 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
>

103 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec2
(
tvec1
<
A
, 
P
> c⁄° & 
v1
,Åvec1<
B
, P> c⁄° & 
v2
);

108 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

109 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
GLM_EXPLICIT
 
tvec2
(
tvec3
<
U
, 
Q
> c⁄° & 
v
);

111 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

112 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
GLM_EXPLICIT
 
tvec2
(
tvec4
<
U
, 
Q
> c⁄° & 
v
);

115 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

116 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
GLM_EXPLICIT
 
tvec2
—vec2<
U
, 
Q
> c⁄° & 
v
);

119 #i‡
GLM_HAS_UNRESTRICTED_UNIONS
 && (
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED
)

120 
	gãm∂©e
 <
	gE0
, 
	gE1
>

121 
GLM_FUNC_DECL
 
tvec2
(
dëaû
::
_swizzÀ
<2, 
T
, 
P
, 
glm
::tvec2, 
E0
, 
E1
,-1,-2> c⁄°& 
th©
)

123 *
	gthis
 = 
th©
();

129 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
=(
tvec2
<
T
, P> c⁄° & 
	gv
Ë
	gGLM_DEFAULT
;

131 
	gãm∂©e
 <
ty≥«me
 
	gU
>

132 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
=(
tvec2
<
U
, P> c⁄° & 
	gv
);

133 
	gãm∂©e
 <
ty≥«me
 
	gU
>

134 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
+=(
U
 
sˇœr
);

135 
	gãm∂©e
 <
ty≥«me
 
	gU
>

136 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
+=(
tvec1
<
U
, P> c⁄° & 
	gv
);

137 
	gãm∂©e
 <
ty≥«me
 
	gU
>

138 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
+=(
tvec2
<
U
, P> c⁄° & 
	gv
);

139 
	gãm∂©e
 <
ty≥«me
 
	gU
>

140 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
-=(
U
 
sˇœr
);

141 
	gãm∂©e
 <
ty≥«me
 
	gU
>

142 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
-=(
tvec1
<
U
, P> c⁄° & 
	gv
);

143 
	gãm∂©e
 <
ty≥«me
 
	gU
>

144 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
-=(
tvec2
<
U
, P> c⁄° & 
	gv
);

145 
	gãm∂©e
 <
ty≥«me
 
	gU
>

146 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
*=(
U
 
sˇœr
);

147 
	gãm∂©e
 <
ty≥«me
 
	gU
>

148 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
*=(
tvec1
<
U
, P> c⁄° & 
	gv
);

149 
	gãm∂©e
 <
ty≥«me
 
	gU
>

150 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
*=(
tvec2
<
U
, P> c⁄° & 
	gv
);

151 
	gãm∂©e
 <
ty≥«me
 
	gU
>

152 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
/=(
U
 
sˇœr
);

153 
	gãm∂©e
 <
ty≥«me
 
	gU
>

154 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
/=(
tvec1
<
U
, P> c⁄° & 
	gv
);

155 
	gãm∂©e
 <
ty≥«me
 
	gU
>

156 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
>& 
	g›î©‹
/=(
tvec2
<
U
, P> c⁄° & 
	gv
);

160 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
++();

161 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
--();

162 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
++();

163 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
--();

167 
	gãm∂©e
 <
ty≥«me
 
	gU
>

168 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
%=(
U
 
sˇœr
);

169 
	gãm∂©e
 <
ty≥«me
 
	gU
>

170 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
%=(
tvec1
<
U
, P> c⁄° & 
	gv
);

171 
	gãm∂©e
 <
ty≥«me
 
	gU
>

172 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
%=(
tvec2
<
U
, P> c⁄° & 
	gv
);

173 
	gãm∂©e
 <
ty≥«me
 
	gU
>

174 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
&=(
U
 
sˇœr
);

175 
	gãm∂©e
 <
ty≥«me
 
	gU
>

176 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
&=(
tvec1
<
U
, P> c⁄° & 
	gv
);

177 
	gãm∂©e
 <
ty≥«me
 
	gU
>

178 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
&=(
tvec2
<
U
, P> c⁄° & 
	gv
);

179 
	gãm∂©e
 <
ty≥«me
 
	gU
>

180 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
|=(
U
 
sˇœr
);

181 
	gãm∂©e
 <
ty≥«me
 
	gU
>

182 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
|=(
tvec1
<
U
, P> c⁄° & 
	gv
);

183 
	gãm∂©e
 <
ty≥«me
 
	gU
>

184 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
|=(
tvec2
<
U
, P> c⁄° & 
	gv
);

185 
	gãm∂©e
 <
ty≥«me
 
	gU
>

186 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
^=(
U
 
sˇœr
);

187 
	gãm∂©e
 <
ty≥«me
 
	gU
>

188 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
^=(
tvec1
<
U
, P> c⁄° & 
	gv
);

189 
	gãm∂©e
 <
ty≥«me
 
	gU
>

190 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
^=(
tvec2
<
U
, P> c⁄° & 
	gv
);

191 
	gãm∂©e
 <
ty≥«me
 
	gU
>

192 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
<<=(
U
 
sˇœr
);

193 
	gãm∂©e
 <
ty≥«me
 
	gU
>

194 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
<<=(
tvec1
<
U
, P> c⁄° & 
	gv
);

195 
	gãm∂©e
 <
ty≥«me
 
	gU
>

196 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
<<=(
tvec2
<
U
, P> c⁄° & 
	gv
);

197 
	gãm∂©e
 <
ty≥«me
 
	gU
>

198 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
>>=(
U
 
sˇœr
);

199 
	gãm∂©e
 <
ty≥«me
 
	gU
>

200 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
>>=(
tvec1
<
U
, P> c⁄° & 
	gv
);

201 
	gãm∂©e
 <
ty≥«me
 
	gU
>

202 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> & 
	g›î©‹
>>=(
tvec2
<
U
, P> c⁄° & 
	gv
);

207 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

208 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
+—vec2<T, P> c⁄° & 
	gv
);

210 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

211 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
-—vec2<T, P> c⁄° & 
	gv
);

215 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

216 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
+—vec2<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

218 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

219 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
+—vec2<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

221 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

222 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
+(
T
 
	gsˇœr
,Åvec2<T, P> c⁄° & 
	gv
);

224 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

225 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
+(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

227 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

228 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
+—vec2<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

230 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

231 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
-—vec2<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

233 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

234 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
-—vec2<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

236 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

237 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
-(
T
 
	gsˇœr
,Åvec2<T, P> c⁄° & 
	gv
);

239 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

240 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
-(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

242 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

243 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
-—vec2<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

245 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

246 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
*—vec2<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

248 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

249 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
*—vec2<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

251 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

252 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 
	gsˇœr
,Åvec2<T, P> c⁄° & 
	gv
);

254 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

255 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

257 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

258 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
*—vec2<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

260 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

261 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
/—vec2<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

263 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

264 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
/—vec2<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

266 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

267 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 
	gsˇœr
,Åvec2<T, P> c⁄° & 
	gv
);

269 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

270 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
/(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

272 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

273 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
/—vec2<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

275 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

276 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
%—vec2<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

278 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

279 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
%—vec2<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

281 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

282 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
%(
T
 
	gsˇœr
,Åvec2<T, P> c⁄° & 
	gv
);

284 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

285 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
%(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

287 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

288 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
%—vec2<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

290 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

291 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
&—vec2<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

293 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

294 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
&—vec2<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

296 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

297 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
&(
T
 
	gsˇœr
,Åvec2<T, P> c⁄° & 
	gv
);

299 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

300 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
&(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

302 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

303 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
&—vec2<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

305 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

306 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
|—vec2<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

308 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

309 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
|—vec2<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

311 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

312 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
|(
T
 
	gsˇœr
,Åvec2<T, P> c⁄° & 
	gv
);

314 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

315 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
|(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

317 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

318 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
|—vec2<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

320 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

321 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
^—vec2<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

323 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

324 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
^—vec2<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

326 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

327 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
^(
T
 
	gsˇœr
,Åvec2<T, P> c⁄° & 
	gv
);

329 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

330 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
^(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

332 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

333 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
^—vec2<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

335 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

336 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
<<—vec2<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

338 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

339 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
<<—vec2<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

341 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

342 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
<<(
T
 
	gsˇœr
,Åvec2<T, P> c⁄° & 
	gv
);

344 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

345 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
<<(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

347 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

348 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
<<—vec2<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

350 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

351 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
>>—vec2<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

353 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

354 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
>>—vec2<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

356 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

357 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
>>(
T
 
	gsˇœr
,Åvec2<T, P> c⁄° & 
	gv
);

359 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

360 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
>>(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

362 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

363 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
>>—vec2<T, P> c⁄° & 
	gv1
,Åvec2<T, P> c⁄° & 
	gv2
);

365 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

366 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
	g›î©‹
~—vec2<T, P> c⁄° & 
	gv
);

370 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

371 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tvec2
<
T
, 
	gP
> c⁄° & 
	gv1
, 
	gtvec2
<
	gT
, P> c⁄° & 
	gv2
);

373 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

374 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tvec2
<
T
, 
	gP
> c⁄° & 
	gv1
, 
	gtvec2
<
	gT
, P> c⁄° & 
	gv2
);

376 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
>

377 
GLM_FUNC_DECL
 
	gtvec2
<
	gboﬁ
, 
	gP
> 
	g›î©‹
&&—vec2<boﬁ, P> c⁄° & 
	gv1
,Åvec2<boﬁ, P> c⁄° & 
	gv2
);

379 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
>

380 
GLM_FUNC_DECL
 
	gtvec2
<
	gboﬁ
, 
	gP
> 
	g›î©‹
||—vec2<boﬁ, P> c⁄° & 
	gv1
,Åvec2<boﬁ, P> c⁄° & 
	gv2
);

383 #i‚de‡
GLM_EXTERNAL_TEMPLATE


384 
	~"ty≥_vec2.öl
"

	@glm/glm/detail/type_vec3.hpp

4 #¥agm®
⁄˚


6 
	~"ty≥_vec.hµ
"

7 #i‡
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED


8 #i‡
GLM_HAS_UNRESTRICTED_UNIONS


9 
	~"_swizzÀ.hµ
"

11 
	~"_swizzÀ_func.hµ
"

14 
	~<c°ddef
>

16 
«me•a˚
 
	gglm


18 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

19 
	stvec3


23 
T
 
	tvÆue_ty≥
;

24 
	gtvec3
<
	tT
, 
	tP
> 
	tty≥
;

25 
	gtvec3
<
	tboﬁ
, 
	tP
> 
	tboﬁ_ty≥
;

29 #i‡
GLM_HAS_ALIGNED_TYPE


30 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


31 #¥agm®
GCC
 
dügno°ic
 
push


32 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpedantic"

34 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


35 #¥agm®
˛™g
 
dügno°ic
 
push


36 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wgnu-anonymous-struct"

37 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wnested-anon-types"

42 °ru˘{ 
T
 
	gx
, 
	gy
, 
	gz
; };

43 °ru˘{ 
T
 
	gr
, 
	gg
, 
	gb
; };

44 °ru˘{ 
T
 
	gs
, 
	gt
, 
	gp
; };

46 #i‡
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED


47 
_GLM_SWIZZLE3_2_MEMBERS
(
T
, 
P
, 
glm
::
tvec2
, 
x
, 
y
, 
z
)

48 
_GLM_SWIZZLE3_2_MEMBERS
(
T
, 
P
, 
glm
::
tvec2
, 
r
, 
g
, 
b
)

49 
_GLM_SWIZZLE3_2_MEMBERS
(
T
, 
P
, 
glm
::
tvec2
, 
s
, 
t
, 
p
)

50 
_GLM_SWIZZLE3_3_MEMBERS
(
T
, 
P
, 
glm
::
tvec3
, 
x
, 
y
, 
z
)

51 
_GLM_SWIZZLE3_3_MEMBERS
(
T
, 
P
, 
glm
::
tvec3
, 
r
, 
g
, 
b
)

52 
_GLM_SWIZZLE3_3_MEMBERS
(
T
, 
P
, 
glm
::
tvec3
, 
s
, 
t
, 
p
)

53 
_GLM_SWIZZLE3_4_MEMBERS
(
T
, 
P
, 
glm
::
tvec4
, 
x
, 
y
, 
z
)

54 
_GLM_SWIZZLE3_4_MEMBERS
(
T
, 
P
, 
glm
::
tvec4
, 
r
, 
g
, 
b
)

55 
_GLM_SWIZZLE3_4_MEMBERS
(
T
, 
P
, 
glm
::
tvec4
, 
s
, 
t
, 
p
)

59 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


60 #¥agm®
˛™g
 
dügno°ic
 
p›


62 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


63 #¥agm®
GCC
 
dügno°ic
 
p›


66 uni⁄ { 
T
 
	gx
, 
	gr
, 
	gs
; };

67 uni⁄ { 
T
 
	gy
, 
	gg
, 
	gt
; };

68 uni⁄ { 
T
 
	gz
, 
	gb
, 
	gp
; };

70 #i‡
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED


71 
GLM_SWIZZLE_GEN_VEC_FROM_VEC3
(
T
, 
P
, 
tvec3
, 
tvec2
,Åvec3, 
tvec4
)

78 
Àngth_t
 
	tÀngth_ty≥
;

79 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 3;}

81 
GLM_FUNC_DECL
 
	gT
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

82 
GLM_FUNC_DECL
 
T
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

86 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec3
(Ë
	gGLM_DEFAULT_CTOR
;

87 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec3
—vec3<
T
, 
P
> c⁄° & 
v
Ë
	gGLM_DEFAULT
;

88 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

89 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec3
—vec3<
T
, 
Q
> c⁄° & 
v
);

93 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tvec3
(
˘‹
);

94 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
ex∂icô
 
tvec3
(
T
 
sˇœr
);

95 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec3
(
T
 
a
, T 
b
, T 
c
);

100 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
,Åy≥«mê
	gC
>

101 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec3
(
A
 
a
, 
B
 
b
, 
C
 
c
);

102 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
,Åy≥«mê
	gC
>

103 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec3
(
tvec1
<
A
, 
P
> c⁄° & 
a
,Åvec1<
B
, P> c⁄° & 
b
,Åvec1<
C
, P> c⁄° & 
c
);

108 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
, 
¥ecisi⁄
 
	gQ
>

109 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec3
(
tvec2
<
A
, 
Q
> c⁄° & 
a
, 
B
 
b
);

111 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
, 
¥ecisi⁄
 
	gQ
>

112 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec3
(
tvec2
<
A
, 
Q
> c⁄° & 
a
, 
tvec1
<
B
, Q> c⁄° & 
b
);

114 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
, 
¥ecisi⁄
 
	gQ
>

115 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec3
(
A
 
a
, 
tvec2
<
B
, 
Q
> c⁄° & 
b
);

117 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
, 
¥ecisi⁄
 
	gQ
>

118 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec3
(
tvec1
<
A
, 
Q
> c⁄° & 
a
, 
tvec2
<
B
, Q> c⁄° & 
b
);

120 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

121 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
GLM_EXPLICIT
 
tvec3
(
tvec4
<
U
, 
Q
> c⁄° & 
v
);

124 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

125 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
GLM_EXPLICIT
 
tvec3
—vec3<
U
, 
Q
> c⁄° & 
v
);

128 #i‡
GLM_HAS_UNRESTRICTED_UNIONS
 && (
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED
)

129 
	gãm∂©e
 <
	gE0
, 
	gE1
, 
	gE2
>

130 
GLM_FUNC_DECL
 
tvec3
(
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
glm
::tvec3, 
E0
, 
E1
, 
E2
, -1> c⁄° & 
th©
)

132 *
	gthis
 = 
th©
();

135 
	gãm∂©e
 <
	gE0
, 
	gE1
>

136 
GLM_FUNC_DECL
 
tvec3
(
dëaû
::
_swizzÀ
<2, 
T
, 
P
, 
glm
::
tvec2
, 
E0
, 
E1
, -1, -2> c⁄° & 
v
, T c⁄° & 
sˇœr
)

138 *
	gthis
 = 
tvec3
<
T
, 
	gP
>(
v
(), 
	gsˇœr
);

141 
	gãm∂©e
 <
	gE0
, 
	gE1
>

142 
GLM_FUNC_DECL
 
tvec3
(
T
 c⁄° & 
sˇœr
, 
dëaû
::
_swizzÀ
<2, T, 
P
, 
glm
::
tvec2
, 
E0
, 
E1
, -1, -2> c⁄° & 
v
)

144 *
	gthis
 = 
tvec3
<
T
, 
	gP
>(
	gsˇœr
, 
v
());

150 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tvec3
<
T
, P> c⁄° & 
	gv
Ë
	gGLM_DEFAULT
;

152 
	gãm∂©e
 <
ty≥«me
 
	gU
>

153 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tvec3
<
U
, P> c⁄° & 
	gv
);

154 
	gãm∂©e
 <
ty≥«me
 
	gU
>

155 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
U
 
sˇœr
);

156 
	gãm∂©e
 <
ty≥«me
 
	gU
>

157 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tvec1
<
U
, P> c⁄° & 
	gv
);

158 
	gãm∂©e
 <
ty≥«me
 
	gU
>

159 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tvec3
<
U
, P> c⁄° & 
	gv
);

160 
	gãm∂©e
 <
ty≥«me
 
	gU
>

161 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
U
 
sˇœr
);

162 
	gãm∂©e
 <
ty≥«me
 
	gU
>

163 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tvec1
<
U
, P> c⁄° & 
	gv
);

164 
	gãm∂©e
 <
ty≥«me
 
	gU
>

165 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tvec3
<
U
, P> c⁄° & 
	gv
);

166 
	gãm∂©e
 <
ty≥«me
 
	gU
>

167 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
sˇœr
);

168 
	gãm∂©e
 <
ty≥«me
 
	gU
>

169 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
tvec1
<
U
, P> c⁄° & 
	gv
);

170 
	gãm∂©e
 <
ty≥«me
 
	gU
>

171 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
tvec3
<
U
, P> c⁄° & 
	gv
);

172 
	gãm∂©e
 <
ty≥«me
 
	gU
>

173 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
sˇœr
);

174 
	gãm∂©e
 <
ty≥«me
 
	gU
>

175 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
tvec1
<
U
, P> c⁄° & 
	gv
);

176 
	gãm∂©e
 <
ty≥«me
 
	gU
>

177 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
tvec3
<
U
, P> c⁄° & 
	gv
);

181 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
++();

182 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
--();

183 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
++();

184 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
--();

188 
	gãm∂©e
 <
ty≥«me
 
	gU
>

189 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
%=(
U
 
sˇœr
);

190 
	gãm∂©e
 <
ty≥«me
 
	gU
>

191 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
%=(
tvec1
<
U
, P> c⁄° & 
	gv
);

192 
	gãm∂©e
 <
ty≥«me
 
	gU
>

193 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
%=(
tvec3
<
U
, P> c⁄° & 
	gv
);

194 
	gãm∂©e
 <
ty≥«me
 
	gU
>

195 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
&=(
U
 
sˇœr
);

196 
	gãm∂©e
 <
ty≥«me
 
	gU
>

197 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
&=(
tvec1
<
U
, P> c⁄° & 
	gv
);

198 
	gãm∂©e
 <
ty≥«me
 
	gU
>

199 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
&=(
tvec3
<
U
, P> c⁄° & 
	gv
);

200 
	gãm∂©e
 <
ty≥«me
 
	gU
>

201 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
|=(
U
 
sˇœr
);

202 
	gãm∂©e
 <
ty≥«me
 
	gU
>

203 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
|=(
tvec1
<
U
, P> c⁄° & 
	gv
);

204 
	gãm∂©e
 <
ty≥«me
 
	gU
>

205 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
|=(
tvec3
<
U
, P> c⁄° & 
	gv
);

206 
	gãm∂©e
 <
ty≥«me
 
	gU
>

207 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
^=(
U
 
sˇœr
);

208 
	gãm∂©e
 <
ty≥«me
 
	gU
>

209 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
^=(
tvec1
<
U
, P> c⁄° & 
	gv
);

210 
	gãm∂©e
 <
ty≥«me
 
	gU
>

211 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
^=(
tvec3
<
U
, P> c⁄° & 
	gv
);

212 
	gãm∂©e
 <
ty≥«me
 
	gU
>

213 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
<<=(
U
 
sˇœr
);

214 
	gãm∂©e
 <
ty≥«me
 
	gU
>

215 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
<<=(
tvec1
<
U
, P> c⁄° & 
	gv
);

216 
	gãm∂©e
 <
ty≥«me
 
	gU
>

217 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
<<=(
tvec3
<
U
, P> c⁄° & 
	gv
);

218 
	gãm∂©e
 <
ty≥«me
 
	gU
>

219 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
>>=(
U
 
sˇœr
);

220 
	gãm∂©e
 <
ty≥«me
 
	gU
>

221 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
>>=(
tvec1
<
U
, P> c⁄° & 
	gv
);

222 
	gãm∂©e
 <
ty≥«me
 
	gU
>

223 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> & 
	g›î©‹
>>=(
tvec3
<
U
, P> c⁄° & 
	gv
);

228 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

229 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
+—vec3<T, P> c⁄° & 
	gv
);

231 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

232 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
-—vec3<T, P> c⁄° & 
	gv
);

236 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

237 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
+—vec3<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

239 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

240 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
+—vec3<T, P> c⁄° & 
	gv
, 
	gtvec1
<T, P> c⁄° & 
	gsˇœr
);

242 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

243 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
+(
T
 
	gsˇœr
,Åvec3<T, P> c⁄° & 
	gv
);

245 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

246 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
+(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

248 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

249 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
+—vec3<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

251 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

252 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
-—vec3<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

254 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

255 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
-—vec3<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

257 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

258 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
-(
T
 
	gsˇœr
,Åvec3<T, P> c⁄° & 
	gv
);

260 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

261 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
-(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

263 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

264 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
-—vec3<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

266 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

267 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
*—vec3<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

269 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

270 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
*—vec3<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

272 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

273 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 
	gsˇœr
,Åvec3<T, P> c⁄° & 
	gv
);

275 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

276 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

278 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

279 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
*—vec3<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

281 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

282 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
/—vec3<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

284 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

285 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
/—vec3<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

287 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

288 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 
	gsˇœr
,Åvec3<T, P> c⁄° & 
	gv
);

290 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

291 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
/(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

293 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

294 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
/—vec3<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

296 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

297 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
%—vec3<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

299 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

300 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
%—vec3<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

302 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

303 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
%(
T
 c⁄° & 
	gsˇœr
,Åvec3<T, P> c⁄° & 
	gv
);

305 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

306 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
%(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

308 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

309 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
%—vec3<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

311 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

312 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
&—vec3<T, P> c⁄° & 
	gv1
, 
T
 
	gsˇœr
);

314 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

315 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
&—vec3<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

317 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

318 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
&(
T
 
	gsˇœr
,Åvec3<T, P> c⁄° & 
	gv
);

320 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

321 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
&(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

323 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

324 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
&—vec3<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

326 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

327 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
|—vec3<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

329 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

330 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
|—vec3<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

332 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

333 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
|(
T
 
	gsˇœr
,Åvec3<T, P> c⁄° & 
	gv
);

335 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

336 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
|(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

338 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

339 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
|—vec3<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

341 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

342 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
^—vec3<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

344 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

345 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
^—vec3<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

347 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

348 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
^(
T
 
	gsˇœr
,Åvec3<T, P> c⁄° & 
	gv
);

350 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

351 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
^(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

353 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

354 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
^—vec3<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

356 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

357 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
<<—vec3<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

359 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

360 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
<<—vec3<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

362 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

363 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
<<(
T
 
	gsˇœr
,Åvec3<T, P> c⁄° & 
	gv
);

365 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

366 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
<<(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

368 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

369 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
<<—vec3<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

371 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

372 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
>>—vec3<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

374 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

375 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
>>—vec3<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

377 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

378 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
>>(
T
 
	gsˇœr
,Åvec3<T, P> c⁄° & 
	gv
);

380 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

381 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
>>(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

383 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

384 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
>>—vec3<T, P> c⁄° & 
	gv1
,Åvec3<T, P> c⁄° & 
	gv2
);

386 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

387 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
~—vec3<T, P> c⁄° & 
	gv
);

391 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

392 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tvec3
<
T
, 
	gP
> c⁄° & 
	gv1
, 
	gtvec3
<
	gT
, P> c⁄° & 
	gv2
);

394 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

395 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tvec3
<
T
, 
	gP
> c⁄° & 
	gv1
, 
	gtvec3
<
	gT
, P> c⁄° & 
	gv2
);

397 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
>

398 
GLM_FUNC_DECL
 
	gtvec3
<
	gboﬁ
, 
	gP
> 
	g›î©‹
&&—vec3<boﬁ, P> c⁄° & 
	gv1
,Åvec3<boﬁ, P> c⁄° & 
	gv2
);

400 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
>

401 
GLM_FUNC_DECL
 
	gtvec3
<
	gboﬁ
, 
	gP
> 
	g›î©‹
||—vec3<boﬁ, P> c⁄° & 
	gv1
,Åvec3<boﬁ, P> c⁄° & 
	gv2
);

404 #i‚de‡
GLM_EXTERNAL_TEMPLATE


405 
	~"ty≥_vec3.öl
"

	@glm/glm/detail/type_vec4.hpp

4 #¥agm®
⁄˚


6 
	~"ty≥_vec.hµ
"

7 #i‡
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED


8 #i‡
GLM_HAS_UNRESTRICTED_UNIONS


9 
	~"_swizzÀ.hµ
"

11 
	~"_swizzÀ_func.hµ
"

14 
	~<c°ddef
>

16 
«me•a˚
 
	gglm


18 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

19 
	stvec4


23 
T
 
	tvÆue_ty≥
;

24 
	gtvec4
<
	tT
, 
	tP
> 
	tty≥
;

25 
	gtvec4
<
	tboﬁ
, 
	tP
> 
	tboﬁ_ty≥
;

29 #i‡
GLM_HAS_ALIGNED_TYPE


30 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


31 #¥agm®
GCC
 
dügno°ic
 
push


32 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpedantic"

34 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


35 #¥agm®
˛™g
 
dügno°ic
 
push


36 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wgnu-anonymous-struct"

37 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wnested-anon-types"

42 °ru˘ { 
T
 
	gx
, 
	gy
, 
	gz
, 
	gw
;};

43 °ru˘ { 
T
 
	gr
, 
	gg
, 
	gb
, 
	ga
; };

44 °ru˘ { 
T
 
	gs
, 
	gt
, 
	gp
, 
	gq
; };

46 
ty≥«me
 
	gdëaû
::
°‹age
<
T
, (
	gT
Ë* 4, dëaû::
is_Æig√d
<
P
>::
vÆue
>::
ty≥
 
d©a
;

48 #i‡
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED


49 
_GLM_SWIZZLE4_2_MEMBERS
(
T
, 
P
, 
glm
::
tvec2
, 
x
, 
y
, 
z
, 
w
)

50 
_GLM_SWIZZLE4_2_MEMBERS
(
T
, 
P
, 
glm
::
tvec2
, 
r
, 
g
, 
b
, 
a
)

51 
_GLM_SWIZZLE4_2_MEMBERS
(
T
, 
P
, 
glm
::
tvec2
, 
s
, 
t
, 
p
, 
q
)

52 
_GLM_SWIZZLE4_3_MEMBERS
(
T
, 
P
, 
glm
::
tvec3
, 
x
, 
y
, 
z
, 
w
)

53 
_GLM_SWIZZLE4_3_MEMBERS
(
T
, 
P
, 
glm
::
tvec3
, 
r
, 
g
, 
b
, 
a
)

54 
_GLM_SWIZZLE4_3_MEMBERS
(
T
, 
P
, 
glm
::
tvec3
, 
s
, 
t
, 
p
, 
q
)

55 
_GLM_SWIZZLE4_4_MEMBERS
(
T
, 
P
, 
glm
::
tvec4
, 
x
, 
y
, 
z
, 
w
)

56 
_GLM_SWIZZLE4_4_MEMBERS
(
T
, 
P
, 
glm
::
tvec4
, 
r
, 
g
, 
b
, 
a
)

57 
_GLM_SWIZZLE4_4_MEMBERS
(
T
, 
P
, 
glm
::
tvec4
, 
s
, 
t
, 
p
, 
q
)

61 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


62 #¥agm®
˛™g
 
dügno°ic
 
p›


64 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


65 #¥agm®
GCC
 
dügno°ic
 
p›


68 uni⁄ { 
T
 
	gx
, 
	gr
, 
	gs
; };

69 uni⁄ { 
T
 
	gy
, 
	gg
, 
	gt
; };

70 uni⁄ { 
T
 
	gz
, 
	gb
, 
	gp
; };

71 uni⁄ { 
T
 
	gw
, 
	ga
, 
	gq
; };

73 #i‡
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED


74 
GLM_SWIZZLE_GEN_VEC_FROM_VEC4
(
T
, 
P
, 
tvec4
, 
tvec2
, 
tvec3
,Åvec4)

81 
Àngth_t
 
	tÀngth_ty≥
;

82 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 4;}

84 
GLM_FUNC_DECL
 
	gT
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

85 
GLM_FUNC_DECL
 
T
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

89 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_SIMD
 
tvec4
(Ë
	gGLM_DEFAULT_CTOR
;

90 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_SIMD
 
tvec4
—vec4<
T
, 
P
> c⁄°& 
v
Ë
	gGLM_DEFAULT
;

91 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

92 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_SIMD
 
tvec4
—vec4<
T
, 
Q
> c⁄°& 
v
);

96 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_SIMD
 
ex∂icô
 
tvec4
(
˘‹
);

97 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_SIMD
 
ex∂icô
 
tvec4
(
T
 
sˇœr
);

98 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_SIMD
 
tvec4
(
T
 
a
, T 
b
, T 
c
, T 
d
);

103 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
,Åy≥«mê
	gC
,Åy≥«mê
	gD
>

104 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_SIMD
 
tvec4
(
A
 
a
, 
B
 
b
, 
C
 
c
, 
D
 
d
);

105 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
,Åy≥«mê
	gC
,Åy≥«mê
	gD
>

106 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
tvec4
(
tvec1
<
A
, 
P
> c⁄°& 
a
,Åvec1<
B
, P> c⁄°& 
b
,Åvec1<
C
, P> c⁄°& 
c
,Åvec1<
D
, P> c⁄°& 
d
);

111 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
,Åy≥«mê
	gC
, 
¥ecisi⁄
 
	gQ
>

112 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec4
(
tvec2
<
A
, 
Q
> c⁄° & 
a
, 
B
 
b
, 
C
 
c
);

114 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
,Åy≥«mê
	gC
, 
¥ecisi⁄
 
	gQ
>

115 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec4
(
tvec2
<
A
, 
Q
> c⁄° & 
a
, 
tvec1
<
B
, Q> c⁄° & 
b
,Åvec1<
C
, Q> c⁄° & 
c
);

117 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
,Åy≥«mê
	gC
, 
¥ecisi⁄
 
	gQ
>

118 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec4
(
A
 
a
, 
tvec2
<
B
, 
Q
> c⁄° & 
b
, 
C
 
c
);

120 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
,Åy≥«mê
	gC
, 
¥ecisi⁄
 
	gQ
>

121 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec4
(
tvec1
<
A
, 
Q
> c⁄° & 
a
, 
tvec2
<
B
, Q> c⁄° & 
b
,Åvec1<
C
, Q> c⁄° & 
c
);

123 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
,Åy≥«mê
	gC
, 
¥ecisi⁄
 
	gQ
>

124 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec4
(
A
 
a
, 
B
 
b
, 
tvec2
<
C
, 
Q
> c⁄° & 
c
);

126 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
,Åy≥«mê
	gC
, 
¥ecisi⁄
 
	gQ
>

127 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec4
(
tvec1
<
A
, 
Q
> c⁄° & 
a
,Åvec1<
B
, Q> c⁄° & 
b
, 
tvec2
<
C
, Q> c⁄° & 
c
);

129 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
, 
¥ecisi⁄
 
	gQ
>

130 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec4
(
tvec3
<
A
, 
Q
> c⁄° & 
a
, 
B
 
b
);

132 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
, 
¥ecisi⁄
 
	gQ
>

133 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec4
(
tvec3
<
A
, 
Q
> c⁄° & 
a
, 
tvec1
<
B
, Q> c⁄° & 
b
);

135 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
, 
¥ecisi⁄
 
	gQ
>

136 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec4
(
A
 
a
, 
tvec3
<
B
, 
Q
> c⁄° & 
b
);

138 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
, 
¥ecisi⁄
 
	gQ
>

139 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec4
(
tvec1
<
A
, 
Q
> c⁄° & 
a
, 
tvec3
<
B
, Q> c⁄° & 
b
);

141 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
, 
¥ecisi⁄
 
	gQ
>

142 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tvec4
(
tvec2
<
A
, 
Q
> c⁄° & 
a
,Åvec2<
B
, Q> c⁄° & 
b
);

145 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

146 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
GLM_EXPLICIT
 
tvec4
—vec4<
U
, 
Q
> c⁄°& 
v
);

149 #i‡
GLM_HAS_UNRESTRICTED_UNIONS
 && (
GLM_SWIZZLE
 =
GLM_SWIZZLE_ENABLED
)

150 
	gãm∂©e
 <
	gE0
, 
	gE1
, 
	gE2
, 
	gE3
>

151 
GLM_FUNC_DECL
 
tvec4
(
dëaû
::
_swizzÀ
<4, 
T
, 
P
, 
glm
::tvec4, 
E0
, 
E1
, 
E2
, 
E3
> c⁄° & 
th©
)

153 *
	gthis
 = 
th©
();

156 
	gãm∂©e
 <
	gE0
, 
	gE1
, 
	gF0
, 
	gF1
>

157 
GLM_FUNC_DECL
 
tvec4
(
dëaû
::
_swizzÀ
<2, 
T
, 
P
, 
glm
::
tvec2
, 
E0
, 
E1
, -1, -2> c⁄° & 
v
, dëaû::_swizzÀ<2, T, P, glm::tvec2, 
F0
, 
F1
, -1, -2> c⁄° & 
u
)

159 *
	gthis
 = 
tvec4
<
T
, 
	gP
>(
v
(), 
u
());

162 
	gãm∂©e
 <
	gE0
, 
	gE1
>

163 
GLM_FUNC_DECL
 
tvec4
(
T
 c⁄° & 
x
, T c⁄° & 
y
, 
dëaû
::
_swizzÀ
<2, T, 
P
, 
glm
::
tvec2
, 
E0
, 
E1
, -1, -2> c⁄° & 
v
)

165 *
	gthis
 = 
tvec4
<
T
, 
	gP
>(
	gx
, 
	gy
, 
v
());

168 
	gãm∂©e
 <
	gE0
, 
	gE1
>

169 
GLM_FUNC_DECL
 
tvec4
(
T
 c⁄° & 
x
, 
dëaû
::
_swizzÀ
<2, T, 
P
, 
glm
::
tvec2
, 
E0
, 
E1
, -1, -2> c⁄° & 
v
, T c⁄° & 
w
)

171 *
	gthis
 = 
tvec4
<
T
, 
	gP
>(
	gx
, 
v
(), 
	gw
);

174 
	gãm∂©e
 <
	gE0
, 
	gE1
>

175 
GLM_FUNC_DECL
 
tvec4
(
dëaû
::
_swizzÀ
<2, 
T
, 
P
, 
glm
::
tvec2
, 
E0
, 
E1
, -1, -2> c⁄° & 
v
, T c⁄° & 
z
, T c⁄° & 
w
)

177 *
	gthis
 = 
tvec4
<
T
, 
	gP
>(
v
(), 
	gz
, 
	gw
);

180 
	gãm∂©e
 <
	gE0
, 
	gE1
, 
	gE2
>

181 
GLM_FUNC_DECL
 
tvec4
(
dëaû
::
_swizzÀ
<3, 
T
, 
P
, 
glm
::
tvec3
, 
E0
, 
E1
, 
E2
, -1> c⁄° & 
v
, T c⁄° & 
w
)

183 *
	gthis
 = 
tvec4
<
T
, 
	gP
>(
v
(), 
	gw
);

186 
	gãm∂©e
 <
	gE0
, 
	gE1
, 
	gE2
>

187 
GLM_FUNC_DECL
 
tvec4
(
T
 c⁄° & 
x
, 
dëaû
::
_swizzÀ
<3, T, 
P
, 
glm
::
tvec3
, 
E0
, 
E1
, 
E2
, -1> c⁄° & 
v
)

189 *
	gthis
 = 
tvec4
<
T
, 
	gP
>(
	gx
, 
v
());

195 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tvec4
<
T
, P> c⁄° & 
	gv
Ë
	gGLM_DEFAULT
;

197 
	gãm∂©e
 <
ty≥«me
 
	gU
>

198 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tvec4
<
U
, P> c⁄° & 
	gv
);

199 
	gãm∂©e
 <
ty≥«me
 
	gU
>

200 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
U
 
sˇœr
);

201 
	gãm∂©e
 <
ty≥«me
 
	gU
>

202 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tvec1
<
U
, P> c⁄° & 
	gv
);

203 
	gãm∂©e
 <
ty≥«me
 
	gU
>

204 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tvec4
<
U
, P> c⁄° & 
	gv
);

205 
	gãm∂©e
 <
ty≥«me
 
	gU
>

206 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
U
 
sˇœr
);

207 
	gãm∂©e
 <
ty≥«me
 
	gU
>

208 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tvec1
<
U
, P> c⁄° & 
	gv
);

209 
	gãm∂©e
 <
ty≥«me
 
	gU
>

210 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tvec4
<
U
, P> c⁄° & 
	gv
);

211 
	gãm∂©e
 <
ty≥«me
 
	gU
>

212 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
sˇœr
);

213 
	gãm∂©e
 <
ty≥«me
 
	gU
>

214 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
tvec1
<
U
, P> c⁄°& 
	gv
);

215 
	gãm∂©e
 <
ty≥«me
 
	gU
>

216 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
tvec4
<
U
, P> c⁄°& 
	gv
);

217 
	gãm∂©e
 <
ty≥«me
 
	gU
>

218 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
sˇœr
);

219 
	gãm∂©e
 <
ty≥«me
 
	gU
>

220 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
tvec1
<
U
, P> c⁄° & 
	gv
);

221 
	gãm∂©e
 <
ty≥«me
 
	gU
>

222 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
tvec4
<
U
, P> c⁄° & 
	gv
);

226 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
++();

227 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
--();

228 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
++();

229 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
--();

233 
	gãm∂©e
 <
ty≥«me
 
	gU
>

234 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
%=(
U
 
sˇœr
);

235 
	gãm∂©e
 <
ty≥«me
 
	gU
>

236 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
%=(
tvec1
<
U
, P> c⁄° & 
	gv
);

237 
	gãm∂©e
 <
ty≥«me
 
	gU
>

238 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
%=(
tvec4
<
U
, P> c⁄° & 
	gv
);

239 
	gãm∂©e
 <
ty≥«me
 
	gU
>

240 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
&=(
U
 
sˇœr
);

241 
	gãm∂©e
 <
ty≥«me
 
	gU
>

242 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
&=(
tvec1
<
U
, P> c⁄° & 
	gv
);

243 
	gãm∂©e
 <
ty≥«me
 
	gU
>

244 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
&=(
tvec4
<
U
, P> c⁄° & 
	gv
);

245 
	gãm∂©e
 <
ty≥«me
 
	gU
>

246 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
|=(
U
 
sˇœr
);

247 
	gãm∂©e
 <
ty≥«me
 
	gU
>

248 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
|=(
tvec1
<
U
, P> c⁄° & 
	gv
);

249 
	gãm∂©e
 <
ty≥«me
 
	gU
>

250 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
|=(
tvec4
<
U
, P> c⁄° & 
	gv
);

251 
	gãm∂©e
 <
ty≥«me
 
	gU
>

252 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
^=(
U
 
sˇœr
);

253 
	gãm∂©e
 <
ty≥«me
 
	gU
>

254 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
^=(
tvec1
<
U
, P> c⁄° & 
	gv
);

255 
	gãm∂©e
 <
ty≥«me
 
	gU
>

256 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
^=(
tvec4
<
U
, P> c⁄° & 
	gv
);

257 
	gãm∂©e
 <
ty≥«me
 
	gU
>

258 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
<<=(
U
 
sˇœr
);

259 
	gãm∂©e
 <
ty≥«me
 
	gU
>

260 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
<<=(
tvec1
<
U
, P> c⁄° & 
	gv
);

261 
	gãm∂©e
 <
ty≥«me
 
	gU
>

262 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
<<=(
tvec4
<
U
, P> c⁄° & 
	gv
);

263 
	gãm∂©e
 <
ty≥«me
 
	gU
>

264 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
>>=(
U
 
sˇœr
);

265 
	gãm∂©e
 <
ty≥«me
 
	gU
>

266 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
>>=(
tvec1
<
U
, P> c⁄° & 
	gv
);

267 
	gãm∂©e
 <
ty≥«me
 
	gU
>

268 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> & 
	g›î©‹
>>=(
tvec4
<
U
, P> c⁄° & 
	gv
);

273 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

274 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
+—vec4<T, P> c⁄° & 
	gv
);

276 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

277 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
-—vec4<T, P> c⁄° & 
	gv
);

281 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

282 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
+—vec4<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

284 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

285 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
+—vec4<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

287 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

288 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
+(
T
 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

290 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

291 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
+(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

293 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

294 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
+—vec4<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

296 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

297 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
-—vec4<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

299 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

300 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
-—vec4<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

302 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

303 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
-(
T
 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

305 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

306 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
-(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

308 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

309 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
-—vec4<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

311 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

312 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
*—vec4<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

314 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

315 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
*—vec4<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

317 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

318 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

320 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

321 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

323 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

324 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
*—vec4<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

326 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

327 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
/—vec4<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

329 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

330 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
/—vec4<T, P> c⁄° & 
	gv1
, 
	gtvec1
<T, P> c⁄° & 
	gv2
);

332 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

333 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
/(
T
 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

335 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

336 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
/(
	gtvec1
<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

338 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

339 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
/—vec4<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

341 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

342 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
%—vec4<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

344 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

345 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
%—vec4<T, P> c⁄° & 
	gv
, 
	gtvec1
<T, P> c⁄° & 
	gsˇœr
);

347 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

348 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
%(
T
 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

350 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

351 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
%(
	gtvec1
<T, P> c⁄° & 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

353 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

354 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
%—vec4<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

356 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

357 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
&—vec4<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

359 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

360 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
&—vec4<T, P> c⁄° & 
	gv
, 
	gtvec1
<T, P> c⁄° & 
	gsˇœr
);

362 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

363 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
&(
T
 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

365 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

366 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
&(
	gtvec1
<T, P> c⁄° & 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

368 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

369 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
&—vec4<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

371 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

372 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
|—vec4<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

374 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

375 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
|—vec4<T, P> c⁄° & 
	gv
, 
	gtvec1
<T, P> c⁄° & 
	gsˇœr
);

377 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

378 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
|(
T
 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

380 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

381 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
|(
	gtvec1
<T, P> c⁄° & 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

383 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

384 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
|—vec4<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

386 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

387 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
^—vec4<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

389 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

390 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
^—vec4<T, P> c⁄° & 
	gv
, 
	gtvec1
<T, P> c⁄° & 
	gsˇœr
);

392 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

393 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
^(
T
 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

395 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

396 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
^(
	gtvec1
<T, P> c⁄° & 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

398 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

399 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
^—vec4<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

401 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

402 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
<<—vec4<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

404 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

405 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
<<—vec4<T, P> c⁄° & 
	gv
, 
	gtvec1
<T, P> c⁄° & 
	gsˇœr
);

407 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

408 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
<<(
T
 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

410 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

411 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
<<(
	gtvec1
<T, P> c⁄° & 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

413 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

414 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
<<—vec4<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

416 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

417 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
>>—vec4<T, P> c⁄° & 
	gv
, 
T
 
	gsˇœr
);

419 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

420 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
>>—vec4<T, P> c⁄° & 
	gv
, 
	gtvec1
<T, P> c⁄° & 
	gsˇœr
);

422 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

423 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
>>(
T
 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

425 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

426 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
>>(
	gtvec1
<T, P> c⁄° & 
	gsˇœr
,Åvec4<T, P> c⁄° & 
	gv
);

428 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

429 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
>>—vec4<T, P> c⁄° & 
	gv1
,Åvec4<T, P> c⁄° & 
	gv2
);

431 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

432 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
~—vec4<T, P> c⁄° & 
	gv
);

436 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

437 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tvec4
<
T
, 
	gP
> c⁄° & 
	gv1
, 
	gtvec4
<
	gT
, P> c⁄° & 
	gv2
);

439 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

440 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tvec4
<
T
, 
	gP
> c⁄° & 
	gv1
, 
	gtvec4
<
	gT
, P> c⁄° & 
	gv2
);

442 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
>

443 
GLM_FUNC_DECL
 
	gtvec4
<
	gboﬁ
, 
	gP
> 
	g›î©‹
&&—vec4<boﬁ, P> c⁄° & 
	gv1
,Åvec4<boﬁ, P> c⁄° & 
	gv2
);

445 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
>

446 
GLM_FUNC_DECL
 
	gtvec4
<
	gboﬁ
, 
	gP
> 
	g›î©‹
||—vec4<boﬁ, P> c⁄° & 
	gv1
,Åvec4<boﬁ, P> c⁄° & 
	gv2
);

449 #i‚de‡
GLM_EXTERNAL_TEMPLATE


450 
	~"ty≥_vec4.öl
"

	@glm/glm/exponential.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/func_exp⁄ítül.hµ
"

	@glm/glm/ext.hpp

28 #¥agm®
⁄˚


30 
	~"glm.hµ
"

32 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_MESSAGE_EXT_INCLUDED_DISPLAYED
)

33 
	#GLM_MESSAGE_EXT_INCLUDED_DISPLAYED


	)

34 #¥agm®
mesßge
("GLM: AllÉxtensions included (notÑecommanded)")

37 
	~"gtc/bôfõld.hµ
"

38 
	~"gtc/cﬁ‹_•a˚.hµ
"

39 
	~"gtc/c⁄°™ts.hµ
"

40 
	~"gtc/ïsû⁄.hµ
"

41 
	~"gtc/fun˘i⁄s.hµ
"

42 
	~"gtc/öãgî.hµ
"

43 
	~"gtc/m©rix_ac˚ss.hµ
"

44 
	~"gtc/m©rix_öãgî.hµ
"

45 
	~"gtc/m©rix_övî£.hµ
"

46 
	~"gtc/m©rix_å™sf‹m.hµ
"

47 
	~"gtc/noi£.hµ
"

48 
	~"gtc/∑ckög.hµ
"

49 
	~"gtc/qu©îni⁄.hµ
"

50 
	~"gtc/øndom.hµ
"

51 
	~"gtc/ªcùroˇl.hµ
"

52 
	~"gtc/round.hµ
"

54 
	~"gtc/ty≥_¥ecisi⁄.hµ
"

55 
	~"gtc/ty≥_±r.hµ
"

56 
	~"gtc/uÕ.hµ
"

57 
	~"gtc/vec1.hµ
"

58 #i‡
GLM_HAS_ALIGNED_TYPE


59 
	~"gtc/ty≥_Æig√d.hµ
"

62 
	~"gtx/assocüãd_mö_max.hµ
"

63 
	~"gtx/bô.hµ
"

64 
	~"gtx/˛o£°_poöt.hµ
"

65 
	~"gtx/cﬁ‹_•a˚.hµ
"

66 
	~"gtx/cﬁ‹_•a˚_YCoCg.hµ
"

67 
	~"gtx/com∑tibûôy.hµ
"

68 
	~"gtx/comp⁄ít_wi£.hµ
"

69 
	~"gtx/duÆ_qu©îni⁄.hµ
"

70 
	~"gtx/euÀr_™gÀs.hµ
"

71 
	~"gtx/exãnd.hµ
"

72 
	~"gtx/exãnded_mö_max.hµ
"

73 
	~"gtx/Á°_exp⁄ítül.hµ
"

74 
	~"gtx/Á°_squ¨e_roŸ.hµ
"

75 
	~"gtx/Á°_åig⁄omëry.hµ
"

76 
	~"gtx/gødõ¡_∑öt.hµ
"

77 
	~"gtx/h™ded_co‹dö©e_•a˚.hµ
"

78 
	~"gtx/öãgî.hµ
"

79 
	~"gtx/öãr£˘.hµ
"

80 
	~"gtx/log_ba£.hµ
"

81 
	~"gtx/m©rix_¸oss_¥odu˘.hµ
"

82 
	~"gtx/m©rix_öãΩﬁ©i⁄.hµ
"

83 
	~"gtx/m©rix_maj‹_°‹age.hµ
"

84 
	~"gtx/m©rix_›î©i⁄.hµ
"

85 
	~"gtx/m©rix_quîy.hµ
"

86 
	~"gtx/mixed_¥odu˘.hµ
"

87 
	~"gtx/n‹m.hµ
"

88 
	~"gtx/n‹mÆ.hµ
"

89 
	~"gtx/n‹mÆize_dŸ.hµ
"

90 
	~"gtx/numbî_¥ecisi⁄.hµ
"

91 
	~"gtx/›timum_pow.hµ
"

92 
	~"gtx/‹th⁄‹mÆize.hµ
"

93 
	~"gtx/≥Ωídicuœr.hµ
"

94 
	~"gtx/pﬁ¨_co‹dö©es.hµ
"

95 
	~"gtx/¥oje˘i⁄.hµ
"

96 
	~"gtx/qu©îni⁄.hµ
"

97 
	~"gtx/øw_d©a.hµ
"

98 
	~"gtx/rŸ©e_ve˘‹.hµ
"

99 
	~"gtx/•löe.hµ
"

100 
	~"gtx/°d_ba£d_ty≥.hµ
"

101 #i‡!(
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
)

102 
	~"gtx/°rög_ˇ°.hµ
"

104 
	~"gtx/å™sf‹m.hµ
"

105 
	~"gtx/å™sf‹m2.hµ
"

106 
	~"gtx/ve˘‹_™gÀ.hµ
"

107 
	~"gtx/ve˘‹_quîy.hµ
"

108 
	~"gtx/wøp.hµ
"

110 #i‡
GLM_HAS_TEMPLATE_ALIASES


111 
	~"gtx/sˇœr_mu…ùliˇti⁄.hµ
"

114 #i‡
GLM_HAS_RANGE_FOR


115 
	~"gtx/ønge.hµ
"

	@glm/glm/fwd.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_öt.hµ
"

7 
	~"dëaû/ty≥_Êﬂt.hµ
"

8 
	~"dëaû/ty≥_vec.hµ
"

9 
	~"dëaû/ty≥_m©.hµ
"

13 
«me•a˚
 
	gglm


15 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtqu©
;

20 
	gtqu©
<, 
	tlowp
> 
	tlowp_qu©
;

25 
	gtqu©
<, 
	tmediump
> 
	tmediump_qu©
;

30 
	gtqu©
<, 
	thighp
> 
	thighp_qu©
;

32 #if(
deföed
(
GLM_PRECISION_HIGHP_FLOAT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_FLOAT
Ë&& !deföed(
GLM_PRECISION_LOWP_FLOAT
))

33 
highp_qu©
 
	tqu©
;

34 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_FLOAT
Ë&& deföed(
GLM_PRECISION_MEDIUMP_FLOAT
Ë&& !deföed(
GLM_PRECISION_LOWP_FLOAT
))

35 
mediump_qu©
 
	tqu©
;

36 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_FLOAT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_FLOAT
Ë&& deföed(
GLM_PRECISION_LOWP_FLOAT
))

37 
lowp_qu©
 
	tqu©
;

38 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_FLOAT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_FLOAT
Ë&& !deföed(
GLM_PRECISION_LOWP_FLOAT
))

40 
highp_qu©
 
	tqu©
;

46 
lowp_qu©
 
	tlowp_fqu©
;

51 
mediump_qu©
 
	tmediump_fqu©
;

56 
highp_qu©
 
	thighp_fqu©
;

61 
qu©
 
	tfqu©
;

67 
	gtqu©
<, 
	tlowp
> 
	tlowp_dqu©
;

72 
	gtqu©
<, 
	tmediump
> 
	tmediump_dqu©
;

77 
	gtqu©
<, 
	thighp
> 
	thighp_dqu©
;

79 #if(
deföed
(
GLM_PRECISION_HIGHP_DOUBLE
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_DOUBLE
Ë&& !deföed(
GLM_PRECISION_LOWP_DOUBLE
))

80 
highp_dqu©
 
	tdqu©
;

81 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_DOUBLE
Ë&& deföed(
GLM_PRECISION_MEDIUMP_DOUBLE
Ë&& !deföed(
GLM_PRECISION_LOWP_DOUBLE
))

82 
mediump_dqu©
 
	tdqu©
;

83 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_DOUBLE
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_DOUBLE
Ë&& deföed(
GLM_PRECISION_LOWP_DOUBLE
))

84 
lowp_dqu©
 
	tdqu©
;

85 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_DOUBLE
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_DOUBLE
Ë&& !deföed(
GLM_PRECISION_LOWP_DOUBLE
))

89 
highp_dqu©
 
	tdqu©
;

96 
«me•a˚
 
	gglm


100 
	gdëaû
::
	töt8
 
	tlowp_öt8
;

104 
	gdëaû
::
	töt16
 
	tlowp_öt16
;

108 
	gdëaû
::
	töt32
 
	tlowp_öt32
;

112 
	gdëaû
::
	töt64
 
	tlowp_öt64
;

116 
	gdëaû
::
	töt8
 
	tlowp_öt8_t
;

120 
	gdëaû
::
	töt16
 
	tlowp_öt16_t
;

124 
	gdëaû
::
	töt32
 
	tlowp_öt32_t
;

128 
	gdëaû
::
	töt64
 
	tlowp_öt64_t
;

132 
	gdëaû
::
	töt8
 
	tlowp_i8
;

136 
	gdëaû
::
	töt16
 
	tlowp_i16
;

140 
	gdëaû
::
	töt32
 
	tlowp_i32
;

144 
	gdëaû
::
	töt64
 
	tlowp_i64
;

148 
	gdëaû
::
	töt8
 
	tmediump_öt8
;

152 
	gdëaû
::
	töt16
 
	tmediump_öt16
;

156 
	gdëaû
::
	töt32
 
	tmediump_öt32
;

160 
	gdëaû
::
	töt64
 
	tmediump_öt64
;

164 
	gdëaû
::
	töt8
 
	tmediump_öt8_t
;

168 
	gdëaû
::
	töt16
 
	tmediump_öt16_t
;

172 
	gdëaû
::
	töt32
 
	tmediump_öt32_t
;

176 
	gdëaû
::
	töt64
 
	tmediump_öt64_t
;

180 
	gdëaû
::
	töt8
 
	tmediump_i8
;

184 
	gdëaû
::
	töt16
 
	tmediump_i16
;

188 
	gdëaû
::
	töt32
 
	tmediump_i32
;

192 
	gdëaû
::
	töt64
 
	tmediump_i64
;

196 
	gdëaû
::
	töt8
 
	thighp_öt8
;

200 
	gdëaû
::
	töt16
 
	thighp_öt16
;

204 
	gdëaû
::
	töt32
 
	thighp_öt32
;

208 
	gdëaû
::
	töt64
 
	thighp_öt64
;

212 
	gdëaû
::
	töt8
 
	thighp_öt8_t
;

216 
	gdëaû
::
	töt16
 
	thighp_öt16_t
;

220 
	gdëaû
::
	töt32
 
	thighp_öt32_t
;

224 
	gdëaû
::
	töt64
 
	thighp_öt64_t
;

228 
	gdëaû
::
	töt8
 
	thighp_i8
;

232 
	gdëaû
::
	töt16
 
	thighp_i16
;

236 
	gdëaû
::
	töt32
 
	thighp_i32
;

240 
	gdëaû
::
	töt64
 
	thighp_i64
;

245 
	gdëaû
::
	töt8
 int8;

249 
	gdëaû
::
	töt16
 int16;

253 
	gdëaû
::
	töt32
 int32;

257 
	gdëaû
::
	töt64
 int64;

260 #i‡
GLM_HAS_EXTENDED_INTEGER_TYPE


261 
usög
 
	g°d
::
öt8_t
;

262 
usög
 
	g°d
::
öt16_t
;

263 
usög
 
	g°d
::
öt32_t
;

264 
usög
 
	g°d
::
öt64_t
;

268 
	gdëaû
::
	töt8
 
	töt8_t
;

272 
	gdëaû
::
	töt16
 
	töt16_t
;

276 
	gdëaû
::
	töt32
 
	töt32_t
;

280 
	gdëaû
::
	töt64
 
	töt64_t
;

285 
	gdëaû
::
	töt8
 
	ti8
;

289 
	gdëaû
::
	töt16
 
	ti16
;

293 
	gdëaû
::
	töt32
 
	ti32
;

297 
	gdëaû
::
	töt64
 
	ti64
;

303 
	gtvec1
<
	ti8
, 
	tlowp
> 
	tlowp_i8vec1
;

307 
	gtvec2
<
	ti8
, 
	tlowp
> 
	tlowp_i8vec2
;

311 
	gtvec3
<
	ti8
, 
	tlowp
> 
	tlowp_i8vec3
;

315 
	gtvec4
<
	ti8
, 
	tlowp
> 
	tlowp_i8vec4
;

320 
	gtvec1
<
	ti8
, 
	tmediump
> 
	tmediump_i8vec1
;

324 
	gtvec2
<
	ti8
, 
	tmediump
> 
	tmediump_i8vec2
;

328 
	gtvec3
<
	ti8
, 
	tmediump
> 
	tmediump_i8vec3
;

332 
	gtvec4
<
	ti8
, 
	tmediump
> 
	tmediump_i8vec4
;

337 
	gtvec1
<
	ti8
, 
	thighp
> 
	thighp_i8vec1
;

341 
	gtvec2
<
	ti8
, 
	thighp
> 
	thighp_i8vec2
;

345 
	gtvec3
<
	ti8
, 
	thighp
> 
	thighp_i8vec3
;

349 
	gtvec4
<
	ti8
, 
	thighp
> 
	thighp_i8vec4
;

351 #if(
deföed
(
GLM_PRECISION_LOWP_INT
))

352 
lowp_i8vec1
 
	ti8vec1
;

353 
lowp_i8vec2
 
	ti8vec2
;

354 
lowp_i8vec3
 
	ti8vec3
;

355 
lowp_i8vec4
 
	ti8vec4
;

356 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_INT
))

357 
mediump_i8vec1
 
	ti8vec1
;

358 
mediump_i8vec2
 
	ti8vec2
;

359 
mediump_i8vec3
 
	ti8vec3
;

360 
mediump_i8vec4
 
	ti8vec4
;

364 
highp_i8vec1
 
	ti8vec1
;

368 
highp_i8vec2
 
	ti8vec2
;

372 
highp_i8vec3
 
	ti8vec3
;

376 
highp_i8vec4
 
	ti8vec4
;

382 
	gtvec1
<
	ti16
, 
	tlowp
> 
	tlowp_i16vec1
;

386 
	gtvec2
<
	ti16
, 
	tlowp
> 
	tlowp_i16vec2
;

390 
	gtvec3
<
	ti16
, 
	tlowp
> 
	tlowp_i16vec3
;

394 
	gtvec4
<
	ti16
, 
	tlowp
> 
	tlowp_i16vec4
;

399 
	gtvec1
<
	ti16
, 
	tmediump
> 
	tmediump_i16vec1
;

403 
	gtvec2
<
	ti16
, 
	tmediump
> 
	tmediump_i16vec2
;

407 
	gtvec3
<
	ti16
, 
	tmediump
> 
	tmediump_i16vec3
;

411 
	gtvec4
<
	ti16
, 
	tmediump
> 
	tmediump_i16vec4
;

416 
	gtvec1
<
	ti16
, 
	thighp
> 
	thighp_i16vec1
;

420 
	gtvec2
<
	ti16
, 
	thighp
> 
	thighp_i16vec2
;

424 
	gtvec3
<
	ti16
, 
	thighp
> 
	thighp_i16vec3
;

428 
	gtvec4
<
	ti16
, 
	thighp
> 
	thighp_i16vec4
;

431 #if(
deföed
(
GLM_PRECISION_LOWP_INT
))

432 
lowp_i16vec1
 
	ti16vec1
;

433 
lowp_i16vec2
 
	ti16vec2
;

434 
lowp_i16vec3
 
	ti16vec3
;

435 
lowp_i16vec4
 
	ti16vec4
;

436 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_INT
))

437 
mediump_i16vec1
 
	ti16vec1
;

438 
mediump_i16vec2
 
	ti16vec2
;

439 
mediump_i16vec3
 
	ti16vec3
;

440 
mediump_i16vec4
 
	ti16vec4
;

444 
highp_i16vec1
 
	ti16vec1
;

448 
highp_i16vec2
 
	ti16vec2
;

452 
highp_i16vec3
 
	ti16vec3
;

456 
highp_i16vec4
 
	ti16vec4
;

462 
	gtvec1
<
	ti32
, 
	tlowp
> 
	tlowp_i32vec1
;

466 
	gtvec2
<
	ti32
, 
	tlowp
> 
	tlowp_i32vec2
;

470 
	gtvec3
<
	ti32
, 
	tlowp
> 
	tlowp_i32vec3
;

474 
	gtvec4
<
	ti32
, 
	tlowp
> 
	tlowp_i32vec4
;

479 
	gtvec1
<
	ti32
, 
	tmediump
> 
	tmediump_i32vec1
;

483 
	gtvec2
<
	ti32
, 
	tmediump
> 
	tmediump_i32vec2
;

487 
	gtvec3
<
	ti32
, 
	tmediump
> 
	tmediump_i32vec3
;

491 
	gtvec4
<
	ti32
, 
	tmediump
> 
	tmediump_i32vec4
;

496 
	gtvec1
<
	ti32
, 
	thighp
> 
	thighp_i32vec1
;

500 
	gtvec2
<
	ti32
, 
	thighp
> 
	thighp_i32vec2
;

504 
	gtvec3
<
	ti32
, 
	thighp
> 
	thighp_i32vec3
;

508 
	gtvec4
<
	ti32
, 
	thighp
> 
	thighp_i32vec4
;

510 #if(
deföed
(
GLM_PRECISION_LOWP_INT
))

511 
lowp_i32vec1
 
	ti32vec1
;

512 
lowp_i32vec2
 
	ti32vec2
;

513 
lowp_i32vec3
 
	ti32vec3
;

514 
lowp_i32vec4
 
	ti32vec4
;

515 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_INT
))

516 
mediump_i32vec1
 
	ti32vec1
;

517 
mediump_i32vec2
 
	ti32vec2
;

518 
mediump_i32vec3
 
	ti32vec3
;

519 
mediump_i32vec4
 
	ti32vec4
;

523 
highp_i32vec1
 
	ti32vec1
;

527 
highp_i32vec2
 
	ti32vec2
;

531 
highp_i32vec3
 
	ti32vec3
;

535 
highp_i32vec4
 
	ti32vec4
;

541 
	gtvec1
<
	ti32
, 
	tlowp
> 
	tlowp_i32vec1
;

545 
	gtvec2
<
	ti32
, 
	tlowp
> 
	tlowp_i32vec2
;

549 
	gtvec3
<
	ti32
, 
	tlowp
> 
	tlowp_i32vec3
;

553 
	gtvec4
<
	ti32
, 
	tlowp
> 
	tlowp_i32vec4
;

558 
	gtvec1
<
	ti32
, 
	tmediump
> 
	tmediump_i32vec1
;

562 
	gtvec2
<
	ti32
, 
	tmediump
> 
	tmediump_i32vec2
;

566 
	gtvec3
<
	ti32
, 
	tmediump
> 
	tmediump_i32vec3
;

570 
	gtvec4
<
	ti32
, 
	tmediump
> 
	tmediump_i32vec4
;

575 
	gtvec1
<
	ti32
, 
	thighp
> 
	thighp_i32vec1
;

579 
	gtvec2
<
	ti32
, 
	thighp
> 
	thighp_i32vec2
;

583 
	gtvec3
<
	ti32
, 
	thighp
> 
	thighp_i32vec3
;

587 
	gtvec4
<
	ti32
, 
	thighp
> 
	thighp_i32vec4
;

589 #if(
deföed
(
GLM_PRECISION_LOWP_INT
))

590 
lowp_i32vec1
 
	ti32vec1
;

591 
lowp_i32vec2
 
	ti32vec2
;

592 
lowp_i32vec3
 
	ti32vec3
;

593 
lowp_i32vec4
 
	ti32vec4
;

594 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_INT
))

595 
mediump_i32vec1
 
	ti32vec1
;

596 
mediump_i32vec2
 
	ti32vec2
;

597 
mediump_i32vec3
 
	ti32vec3
;

598 
mediump_i32vec4
 
	ti32vec4
;

602 
highp_i32vec1
 
	ti32vec1
;

606 
highp_i32vec2
 
	ti32vec2
;

610 
highp_i32vec3
 
	ti32vec3
;

614 
highp_i32vec4
 
	ti32vec4
;

621 
	gtvec1
<
	ti64
, 
	tlowp
> 
	tlowp_i64vec1
;

625 
	gtvec2
<
	ti64
, 
	tlowp
> 
	tlowp_i64vec2
;

629 
	gtvec3
<
	ti64
, 
	tlowp
> 
	tlowp_i64vec3
;

633 
	gtvec4
<
	ti64
, 
	tlowp
> 
	tlowp_i64vec4
;

638 
	gtvec1
<
	ti64
, 
	tmediump
> 
	tmediump_i64vec1
;

642 
	gtvec2
<
	ti64
, 
	tmediump
> 
	tmediump_i64vec2
;

646 
	gtvec3
<
	ti64
, 
	tmediump
> 
	tmediump_i64vec3
;

650 
	gtvec4
<
	ti64
, 
	tmediump
> 
	tmediump_i64vec4
;

655 
	gtvec1
<
	ti64
, 
	thighp
> 
	thighp_i64vec1
;

659 
	gtvec2
<
	ti64
, 
	thighp
> 
	thighp_i64vec2
;

663 
	gtvec3
<
	ti64
, 
	thighp
> 
	thighp_i64vec3
;

667 
	gtvec4
<
	ti64
, 
	thighp
> 
	thighp_i64vec4
;

669 #if(
deföed
(
GLM_PRECISION_LOWP_INT
))

670 
lowp_i64vec1
 
	ti64vec1
;

671 
lowp_i64vec2
 
	ti64vec2
;

672 
lowp_i64vec3
 
	ti64vec3
;

673 
lowp_i64vec4
 
	ti64vec4
;

674 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_INT
))

675 
mediump_i64vec1
 
	ti64vec1
;

676 
mediump_i64vec2
 
	ti64vec2
;

677 
mediump_i64vec3
 
	ti64vec3
;

678 
mediump_i64vec4
 
	ti64vec4
;

682 
highp_i64vec1
 
	ti64vec1
;

686 
highp_i64vec2
 
	ti64vec2
;

690 
highp_i64vec3
 
	ti64vec3
;

694 
highp_i64vec4
 
	ti64vec4
;

703 
	gdëaû
::
	tuöt8
 
	tlowp_uöt8
;

707 
	gdëaû
::
	tuöt16
 
	tlowp_uöt16
;

711 
	gdëaû
::
	tuöt32
 
	tlowp_uöt32
;

715 
	gdëaû
::
	tuöt64
 
	tlowp_uöt64
;

720 
	gdëaû
::
	tuöt8
 
	tlowp_uöt8_t
;

724 
	gdëaû
::
	tuöt16
 
	tlowp_uöt16_t
;

728 
	gdëaû
::
	tuöt32
 
	tlowp_uöt32_t
;

732 
	gdëaû
::
	tuöt64
 
	tlowp_uöt64_t
;

737 
	gdëaû
::
	tuöt8
 
	tlowp_u8
;

741 
	gdëaû
::
	tuöt16
 
	tlowp_u16
;

745 
	gdëaû
::
	tuöt32
 
	tlowp_u32
;

749 
	gdëaû
::
	tuöt64
 
	tlowp_u64
;

755 
	gdëaû
::
	tuöt8
 
	tmediump_uöt8
;

759 
	gdëaû
::
	tuöt16
 
	tmediump_uöt16
;

763 
	gdëaû
::
	tuöt32
 
	tmediump_uöt32
;

767 
	gdëaû
::
	tuöt64
 
	tmediump_uöt64
;

771 
	gdëaû
::
	tuöt8
 
	tmediump_uöt8_t
;

775 
	gdëaû
::
	tuöt16
 
	tmediump_uöt16_t
;

779 
	gdëaû
::
	tuöt32
 
	tmediump_uöt32_t
;

783 
	gdëaû
::
	tuöt64
 
	tmediump_uöt64_t
;

787 
	gdëaû
::
	tuöt8
 
	tmediump_u8
;

791 
	gdëaû
::
	tuöt16
 
	tmediump_u16
;

795 
	gdëaû
::
	tuöt32
 
	tmediump_u32
;

799 
	gdëaû
::
	tuöt64
 
	tmediump_u64
;

805 
	gdëaû
::
	tuöt8
 
	thighp_uöt8
;

809 
	gdëaû
::
	tuöt16
 
	thighp_uöt16
;

813 
	gdëaû
::
	tuöt32
 
	thighp_uöt32
;

817 
	gdëaû
::
	tuöt64
 
	thighp_uöt64
;

821 
	gdëaû
::
	tuöt8
 
	thighp_uöt8_t
;

825 
	gdëaû
::
	tuöt16
 
	thighp_uöt16_t
;

829 
	gdëaû
::
	tuöt32
 
	thighp_uöt32_t
;

833 
	gdëaû
::
	tuöt64
 
	thighp_uöt64_t
;

837 
	gdëaû
::
	tuöt8
 
	thighp_u8
;

841 
	gdëaû
::
	tuöt16
 
	thighp_u16
;

845 
	gdëaû
::
	tuöt32
 
	thighp_u32
;

849 
	gdëaû
::
	tuöt64
 
	thighp_u64
;

855 
	gdëaû
::
	tuöt8
 uint8;

859 
	gdëaû
::
	tuöt16
 uint16;

863 
	gdëaû
::
	tuöt32
 uint32;

867 
	gdëaû
::
	tuöt64
 uint64;

869 #i‡
GLM_HAS_EXTENDED_INTEGER_TYPE


870 
usög
 
	g°d
::
uöt8_t
;

871 
usög
 
	g°d
::
uöt16_t
;

872 
usög
 
	g°d
::
uöt32_t
;

873 
usög
 
	g°d
::
uöt64_t
;

877 
	gdëaû
::
	tuöt8
 
	tuöt8_t
;

881 
	gdëaû
::
	tuöt16
 
	tuöt16_t
;

885 
	gdëaû
::
	tuöt32
 
	tuöt32_t
;

889 
	gdëaû
::
	tuöt64
 
	tuöt64_t
;

894 
	gdëaû
::
	tuöt8
 
	tu8
;

898 
	gdëaû
::
	tuöt16
 
	tu16
;

902 
	gdëaû
::
	tuöt32
 
	tu32
;

906 
	gdëaû
::
	tuöt64
 
	tu64
;

912 
	gtvec1
<
	tu8
, 
	tlowp
> 
	tlowp_u8vec1
;

916 
	gtvec2
<
	tu8
, 
	tlowp
> 
	tlowp_u8vec2
;

920 
	gtvec3
<
	tu8
, 
	tlowp
> 
	tlowp_u8vec3
;

924 
	gtvec4
<
	tu8
, 
	tlowp
> 
	tlowp_u8vec4
;

929 
	gtvec1
<
	tu8
, 
	tmediump
> 
	tmediump_u8vec1
;

933 
	gtvec2
<
	tu8
, 
	tmediump
> 
	tmediump_u8vec2
;

937 
	gtvec3
<
	tu8
, 
	tmediump
> 
	tmediump_u8vec3
;

941 
	gtvec4
<
	tu8
, 
	tmediump
> 
	tmediump_u8vec4
;

946 
	gtvec1
<
	tu8
, 
	thighp
> 
	thighp_u8vec1
;

950 
	gtvec2
<
	tu8
, 
	thighp
> 
	thighp_u8vec2
;

954 
	gtvec3
<
	tu8
, 
	thighp
> 
	thighp_u8vec3
;

958 
	gtvec4
<
	tu8
, 
	thighp
> 
	thighp_u8vec4
;

960 #if(
deföed
(
GLM_PRECISION_LOWP_INT
))

961 
lowp_u8vec1
 
	tu8vec1
;

962 
lowp_u8vec2
 
	tu8vec2
;

963 
lowp_u8vec3
 
	tu8vec3
;

964 
lowp_u8vec4
 
	tu8vec4
;

965 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_INT
))

966 
mediump_u8vec1
 
	tu8vec1
;

967 
mediump_u8vec2
 
	tu8vec2
;

968 
mediump_u8vec3
 
	tu8vec3
;

969 
mediump_u8vec4
 
	tu8vec4
;

973 
highp_u8vec1
 
	tu8vec1
;

977 
highp_u8vec2
 
	tu8vec2
;

981 
highp_u8vec3
 
	tu8vec3
;

985 
highp_u8vec4
 
	tu8vec4
;

991 
	gtvec1
<
	tu16
, 
	tlowp
> 
	tlowp_u16vec1
;

995 
	gtvec2
<
	tu16
, 
	tlowp
> 
	tlowp_u16vec2
;

999 
	gtvec3
<
	tu16
, 
	tlowp
> 
	tlowp_u16vec3
;

1003 
	gtvec4
<
	tu16
, 
	tlowp
> 
	tlowp_u16vec4
;

1008 
	gtvec1
<
	tu16
, 
	tmediump
> 
	tmediump_u16vec1
;

1012 
	gtvec2
<
	tu16
, 
	tmediump
> 
	tmediump_u16vec2
;

1016 
	gtvec3
<
	tu16
, 
	tmediump
> 
	tmediump_u16vec3
;

1020 
	gtvec4
<
	tu16
, 
	tmediump
> 
	tmediump_u16vec4
;

1025 
	gtvec1
<
	tu16
, 
	thighp
> 
	thighp_u16vec1
;

1029 
	gtvec2
<
	tu16
, 
	thighp
> 
	thighp_u16vec2
;

1033 
	gtvec3
<
	tu16
, 
	thighp
> 
	thighp_u16vec3
;

1037 
	gtvec4
<
	tu16
, 
	thighp
> 
	thighp_u16vec4
;

1040 #if(
deföed
(
GLM_PRECISION_LOWP_INT
))

1041 
lowp_u16vec1
 
	tu16vec1
;

1042 
lowp_u16vec2
 
	tu16vec2
;

1043 
lowp_u16vec3
 
	tu16vec3
;

1044 
lowp_u16vec4
 
	tu16vec4
;

1045 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_INT
))

1046 
mediump_u16vec1
 
	tu16vec1
;

1047 
mediump_u16vec2
 
	tu16vec2
;

1048 
mediump_u16vec3
 
	tu16vec3
;

1049 
mediump_u16vec4
 
	tu16vec4
;

1053 
highp_u16vec1
 
	tu16vec1
;

1057 
highp_u16vec2
 
	tu16vec2
;

1061 
highp_u16vec3
 
	tu16vec3
;

1065 
highp_u16vec4
 
	tu16vec4
;

1071 
	gtvec1
<
	tu32
, 
	tlowp
> 
	tlowp_u32vec1
;

1075 
	gtvec2
<
	tu32
, 
	tlowp
> 
	tlowp_u32vec2
;

1079 
	gtvec3
<
	tu32
, 
	tlowp
> 
	tlowp_u32vec3
;

1083 
	gtvec4
<
	tu32
, 
	tlowp
> 
	tlowp_u32vec4
;

1088 
	gtvec1
<
	tu32
, 
	tmediump
> 
	tmediump_u32vec1
;

1092 
	gtvec2
<
	tu32
, 
	tmediump
> 
	tmediump_u32vec2
;

1096 
	gtvec3
<
	tu32
, 
	tmediump
> 
	tmediump_u32vec3
;

1100 
	gtvec4
<
	tu32
, 
	tmediump
> 
	tmediump_u32vec4
;

1105 
	gtvec1
<
	tu32
, 
	thighp
> 
	thighp_u32vec1
;

1109 
	gtvec2
<
	tu32
, 
	thighp
> 
	thighp_u32vec2
;

1113 
	gtvec3
<
	tu32
, 
	thighp
> 
	thighp_u32vec3
;

1117 
	gtvec4
<
	tu32
, 
	thighp
> 
	thighp_u32vec4
;

1119 #if(
deföed
(
GLM_PRECISION_LOWP_INT
))

1120 
lowp_u32vec1
 
	tu32vec1
;

1121 
lowp_u32vec2
 
	tu32vec2
;

1122 
lowp_u32vec3
 
	tu32vec3
;

1123 
lowp_u32vec4
 
	tu32vec4
;

1124 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_INT
))

1125 
mediump_u32vec1
 
	tu32vec1
;

1126 
mediump_u32vec2
 
	tu32vec2
;

1127 
mediump_u32vec3
 
	tu32vec3
;

1128 
mediump_u32vec4
 
	tu32vec4
;

1132 
highp_u32vec1
 
	tu32vec1
;

1136 
highp_u32vec2
 
	tu32vec2
;

1140 
highp_u32vec3
 
	tu32vec3
;

1144 
highp_u32vec4
 
	tu32vec4
;

1150 
	gtvec1
<
	tu32
, 
	tlowp
> 
	tlowp_u32vec1
;

1154 
	gtvec2
<
	tu32
, 
	tlowp
> 
	tlowp_u32vec2
;

1158 
	gtvec3
<
	tu32
, 
	tlowp
> 
	tlowp_u32vec3
;

1162 
	gtvec4
<
	tu32
, 
	tlowp
> 
	tlowp_u32vec4
;

1167 
	gtvec1
<
	tu32
, 
	tmediump
> 
	tmediump_u32vec1
;

1171 
	gtvec2
<
	tu32
, 
	tmediump
> 
	tmediump_u32vec2
;

1175 
	gtvec3
<
	tu32
, 
	tmediump
> 
	tmediump_u32vec3
;

1179 
	gtvec4
<
	tu32
, 
	tmediump
> 
	tmediump_u32vec4
;

1184 
	gtvec1
<
	tu32
, 
	thighp
> 
	thighp_u32vec1
;

1188 
	gtvec2
<
	tu32
, 
	thighp
> 
	thighp_u32vec2
;

1192 
	gtvec3
<
	tu32
, 
	thighp
> 
	thighp_u32vec3
;

1196 
	gtvec4
<
	tu32
, 
	thighp
> 
	thighp_u32vec4
;

1198 #if(
deföed
(
GLM_PRECISION_LOWP_INT
))

1199 
lowp_u32vec1
 
	tu32vec1
;

1200 
lowp_u32vec2
 
	tu32vec2
;

1201 
lowp_u32vec3
 
	tu32vec3
;

1202 
lowp_u32vec4
 
	tu32vec4
;

1203 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_INT
))

1204 
mediump_u32vec1
 
	tu32vec1
;

1205 
mediump_u32vec2
 
	tu32vec2
;

1206 
mediump_u32vec3
 
	tu32vec3
;

1207 
mediump_u32vec4
 
	tu32vec4
;

1211 
highp_u32vec1
 
	tu32vec1
;

1215 
highp_u32vec2
 
	tu32vec2
;

1219 
highp_u32vec3
 
	tu32vec3
;

1223 
highp_u32vec4
 
	tu32vec4
;

1230 
	gtvec1
<
	tu64
, 
	tlowp
> 
	tlowp_u64vec1
;

1234 
	gtvec2
<
	tu64
, 
	tlowp
> 
	tlowp_u64vec2
;

1238 
	gtvec3
<
	tu64
, 
	tlowp
> 
	tlowp_u64vec3
;

1242 
	gtvec4
<
	tu64
, 
	tlowp
> 
	tlowp_u64vec4
;

1247 
	gtvec1
<
	tu64
, 
	tmediump
> 
	tmediump_u64vec1
;

1251 
	gtvec2
<
	tu64
, 
	tmediump
> 
	tmediump_u64vec2
;

1255 
	gtvec3
<
	tu64
, 
	tmediump
> 
	tmediump_u64vec3
;

1259 
	gtvec4
<
	tu64
, 
	tmediump
> 
	tmediump_u64vec4
;

1264 
	gtvec1
<
	tu64
, 
	thighp
> 
	thighp_u64vec1
;

1268 
	gtvec2
<
	tu64
, 
	thighp
> 
	thighp_u64vec2
;

1272 
	gtvec3
<
	tu64
, 
	thighp
> 
	thighp_u64vec3
;

1276 
	gtvec4
<
	tu64
, 
	thighp
> 
	thighp_u64vec4
;

1278 #if(
deföed
(
GLM_PRECISION_LOWP_UINT
))

1279 
lowp_u64vec1
 
	tu64vec1
;

1280 
lowp_u64vec2
 
	tu64vec2
;

1281 
lowp_u64vec3
 
	tu64vec3
;

1282 
lowp_u64vec4
 
	tu64vec4
;

1283 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_UINT
))

1284 
mediump_u64vec1
 
	tu64vec1
;

1285 
mediump_u64vec2
 
	tu64vec2
;

1286 
mediump_u64vec3
 
	tu64vec3
;

1287 
mediump_u64vec4
 
	tu64vec4
;

1291 
highp_u64vec1
 
	tu64vec1
;

1295 
highp_u64vec2
 
	tu64vec2
;

1299 
highp_u64vec3
 
	tu64vec3
;

1303 
highp_u64vec4
 
	tu64vec4
;

1312 
	gdëaû
::
	tÊﬂt32
 
	tlowp_Êﬂt32
;

1316 
	gdëaû
::
	tÊﬂt64
 
	tlowp_Êﬂt64
;

1320 
	gdëaû
::
	tÊﬂt32
 
	tlowp_Êﬂt32_t
;

1324 
	gdëaû
::
	tÊﬂt64
 
	tlowp_Êﬂt64_t
;

1328 
Êﬂt32
 
	tlowp_f32
;

1332 
Êﬂt64
 
	tlowp_f64
;

1336 
	gdëaû
::
	tÊﬂt32
 
	tlowp_Êﬂt32
;

1340 
	gdëaû
::
	tÊﬂt64
 
	tlowp_Êﬂt64
;

1344 
	gdëaû
::
	tÊﬂt32
 
	tlowp_Êﬂt32_t
;

1348 
	gdëaû
::
	tÊﬂt64
 
	tlowp_Êﬂt64_t
;

1352 
Êﬂt32
 
	tlowp_f32
;

1356 
Êﬂt64
 
	tlowp_f64
;

1361 
	gdëaû
::
	tÊﬂt32
 
	tlowp_Êﬂt32
;

1365 
	gdëaû
::
	tÊﬂt64
 
	tlowp_Êﬂt64
;

1369 
	gdëaû
::
	tÊﬂt32
 
	tlowp_Êﬂt32_t
;

1373 
	gdëaû
::
	tÊﬂt64
 
	tlowp_Êﬂt64_t
;

1377 
Êﬂt32
 
	tlowp_f32
;

1381 
Êﬂt64
 
	tlowp_f64
;

1386 
	gdëaû
::
	tÊﬂt32
 
	tmediump_Êﬂt32
;

1390 
	gdëaû
::
	tÊﬂt64
 
	tmediump_Êﬂt64
;

1394 
	gdëaû
::
	tÊﬂt32
 
	tmediump_Êﬂt32_t
;

1398 
	gdëaû
::
	tÊﬂt64
 
	tmediump_Êﬂt64_t
;

1402 
Êﬂt32
 
	tmediump_f32
;

1406 
Êﬂt64
 
	tmediump_f64
;

1411 
	gdëaû
::
	tÊﬂt32
 
	thighp_Êﬂt32
;

1415 
	gdëaû
::
	tÊﬂt64
 
	thighp_Êﬂt64
;

1419 
	gdëaû
::
	tÊﬂt32
 
	thighp_Êﬂt32_t
;

1423 
	gdëaû
::
	tÊﬂt64
 
	thighp_Êﬂt64_t
;

1427 
Êﬂt32
 
	thighp_f32
;

1431 
Êﬂt64
 
	thighp_f64
;

1434 #if(
deföed
(
GLM_PRECISION_LOWP_FLOAT
))

1437 
lowp_Êﬂt32
 
	tÊﬂt32
;

1441 
lowp_Êﬂt64
 
	tÊﬂt64
;

1445 
lowp_Êﬂt32_t
 
	tÊﬂt32_t
;

1449 
lowp_Êﬂt64_t
 
	tÊﬂt64_t
;

1453 
lowp_f32
 
	tf32
;

1457 
lowp_f64
 
	tf64
;

1459 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_FLOAT
))

1463 
mediump_Êﬂt32
 
	tÊﬂt32
;

1467 
mediump_Êﬂt64
 
	tÊﬂt64
;

1471 
mediump_Êﬂt32
 
	tÊﬂt32_t
;

1475 
mediump_Êﬂt64
 
	tÊﬂt64_t
;

1479 
mediump_Êﬂt32
 
	tf32
;

1483 
mediump_Êﬂt64
 
	tf64
;

1489 
highp_Êﬂt32
 
	tÊﬂt32
;

1493 
highp_Êﬂt64
 
	tÊﬂt64
;

1497 
highp_Êﬂt32_t
 
	tÊﬂt32_t
;

1501 
highp_Êﬂt64_t
 
	tÊﬂt64_t
;

1505 
highp_Êﬂt32_t
 
	tf32
;

1509 
highp_Êﬂt64_t
 
	tf64
;

1515 
	gtvec1
<, 
	tlowp
> 
	tlowp_vec1
;

1519 
	gtvec2
<, 
	tlowp
> 
	tlowp_vec2
;

1523 
	gtvec3
<, 
	tlowp
> 
	tlowp_vec3
;

1527 
	gtvec4
<, 
	tlowp
> 
	tlowp_vec4
;

1531 
	gtvec1
<, 
	tlowp
> 
	tlowp_fvec1
;

1535 
	gtvec2
<, 
	tlowp
> 
	tlowp_fvec2
;

1539 
	gtvec3
<, 
	tlowp
> 
	tlowp_fvec3
;

1543 
	gtvec4
<, 
	tlowp
> 
	tlowp_fvec4
;

1548 
	gtvec1
<, 
	tmediump
> 
	tmediump_vec1
;

1552 
	gtvec2
<, 
	tmediump
> 
	tmediump_vec2
;

1556 
	gtvec3
<, 
	tmediump
> 
	tmediump_vec3
;

1560 
	gtvec4
<, 
	tmediump
> 
	tmediump_vec4
;

1564 
	gtvec1
<, 
	tmediump
> 
	tmediump_fvec1
;

1568 
	gtvec2
<, 
	tmediump
> 
	tmediump_fvec2
;

1572 
	gtvec3
<, 
	tmediump
> 
	tmediump_fvec3
;

1576 
	gtvec4
<, 
	tmediump
> 
	tmediump_fvec4
;

1581 
	gtvec1
<, 
	thighp
> 
	thighp_vec1
;

1585 
	gtvec2
<, 
	thighp
> 
	thighp_vec2
;

1589 
	gtvec3
<, 
	thighp
> 
	thighp_vec3
;

1593 
	gtvec4
<, 
	thighp
> 
	thighp_vec4
;

1597 
	gtvec1
<, 
	thighp
> 
	thighp_fvec1
;

1601 
	gtvec2
<, 
	thighp
> 
	thighp_fvec2
;

1605 
	gtvec3
<, 
	thighp
> 
	thighp_fvec3
;

1609 
	gtvec4
<, 
	thighp
> 
	thighp_fvec4
;

1614 
	gtvec1
<
	tf32
, 
	tlowp
> 
	tlowp_f32vec1
;

1618 
	gtvec2
<
	tf32
, 
	tlowp
> 
	tlowp_f32vec2
;

1622 
	gtvec3
<
	tf32
, 
	tlowp
> 
	tlowp_f32vec3
;

1626 
	gtvec4
<
	tf32
, 
	tlowp
> 
	tlowp_f32vec4
;

1630 
	gtvec1
<
	tf32
, 
	tmediump
> 
	tmediump_f32vec1
;

1634 
	gtvec2
<
	tf32
, 
	tmediump
> 
	tmediump_f32vec2
;

1638 
	gtvec3
<
	tf32
, 
	tmediump
> 
	tmediump_f32vec3
;

1642 
	gtvec4
<
	tf32
, 
	tmediump
> 
	tmediump_f32vec4
;

1646 
	gtvec1
<
	tf32
, 
	thighp
> 
	thighp_f32vec1
;

1650 
	gtvec2
<
	tf32
, 
	thighp
> 
	thighp_f32vec2
;

1654 
	gtvec3
<
	tf32
, 
	thighp
> 
	thighp_f32vec3
;

1658 
	gtvec4
<
	tf32
, 
	thighp
> 
	thighp_f32vec4
;

1663 
	gtvec1
<
	tf64
, 
	tlowp
> 
	tlowp_f64vec1
;

1667 
	gtvec2
<
	tf64
, 
	tlowp
> 
	tlowp_f64vec2
;

1671 
	gtvec3
<
	tf64
, 
	tlowp
> 
	tlowp_f64vec3
;

1675 
	gtvec4
<
	tf64
, 
	tlowp
> 
	tlowp_f64vec4
;

1679 
	gtvec1
<
	tf64
, 
	tmediump
> 
	tmediump_f64vec1
;

1683 
	gtvec2
<
	tf64
, 
	tmediump
> 
	tmediump_f64vec2
;

1687 
	gtvec3
<
	tf64
, 
	tmediump
> 
	tmediump_f64vec3
;

1691 
	gtvec4
<
	tf64
, 
	tmediump
> 
	tmediump_f64vec4
;

1695 
	gtvec1
<
	tf64
, 
	thighp
> 
	thighp_f64vec1
;

1699 
	gtvec2
<
	tf64
, 
	thighp
> 
	thighp_f64vec2
;

1703 
	gtvec3
<
	tf64
, 
	thighp
> 
	thighp_f64vec3
;

1707 
	gtvec4
<
	tf64
, 
	thighp
> 
	thighp_f64vec4
;

1719 
	gtm©2x2
<
	tf32
, 
	tlowp
> 
	tlowp_fm©2x2
;

1723 
	gtm©2x3
<
	tf32
, 
	tlowp
> 
	tlowp_fm©2x3
;

1727 
	gtm©2x4
<
	tf32
, 
	tlowp
> 
	tlowp_fm©2x4
;

1731 
	gtm©3x2
<
	tf32
, 
	tlowp
> 
	tlowp_fm©3x2
;

1735 
	gtm©3x3
<
	tf32
, 
	tlowp
> 
	tlowp_fm©3x3
;

1739 
	gtm©3x4
<
	tf32
, 
	tlowp
> 
	tlowp_fm©3x4
;

1743 
	gtm©4x2
<
	tf32
, 
	tlowp
> 
	tlowp_fm©4x2
;

1747 
	gtm©4x3
<
	tf32
, 
	tlowp
> 
	tlowp_fm©4x3
;

1751 
	gtm©4x4
<
	tf32
, 
	tlowp
> 
	tlowp_fm©4x4
;

1759 
lowp_fm©2x2
 
	tlowp_fm©2
;

1763 
lowp_fm©3x3
 
	tlowp_fm©3
;

1767 
lowp_fm©4x4
 
	tlowp_fm©4
;

1776 
	gtm©2x2
<
	tf32
, 
	tmediump
> 
	tmediump_fm©2x2
;

1780 
	gtm©2x3
<
	tf32
, 
	tmediump
> 
	tmediump_fm©2x3
;

1784 
	gtm©2x4
<
	tf32
, 
	tmediump
> 
	tmediump_fm©2x4
;

1788 
	gtm©3x2
<
	tf32
, 
	tmediump
> 
	tmediump_fm©3x2
;

1792 
	gtm©3x3
<
	tf32
, 
	tmediump
> 
	tmediump_fm©3x3
;

1796 
	gtm©3x4
<
	tf32
, 
	tmediump
> 
	tmediump_fm©3x4
;

1800 
	gtm©4x2
<
	tf32
, 
	tmediump
> 
	tmediump_fm©4x2
;

1804 
	gtm©4x3
<
	tf32
, 
	tmediump
> 
	tmediump_fm©4x3
;

1808 
	gtm©4x4
<
	tf32
, 
	tmediump
> 
	tmediump_fm©4x4
;

1816 
mediump_fm©2x2
 
	tmediump_fm©2
;

1820 
mediump_fm©3x3
 
	tmediump_fm©3
;

1824 
mediump_fm©4x4
 
	tmediump_fm©4
;

1833 
	gtm©2x2
<
	tf32
, 
	thighp
> 
	thighp_fm©2x2
;

1837 
	gtm©2x3
<
	tf32
, 
	thighp
> 
	thighp_fm©2x3
;

1841 
	gtm©2x4
<
	tf32
, 
	thighp
> 
	thighp_fm©2x4
;

1845 
	gtm©3x2
<
	tf32
, 
	thighp
> 
	thighp_fm©3x2
;

1849 
	gtm©3x3
<
	tf32
, 
	thighp
> 
	thighp_fm©3x3
;

1853 
	gtm©3x4
<
	tf32
, 
	thighp
> 
	thighp_fm©3x4
;

1857 
	gtm©4x2
<
	tf32
, 
	thighp
> 
	thighp_fm©4x2
;

1861 
	gtm©4x3
<
	tf32
, 
	thighp
> 
	thighp_fm©4x3
;

1865 
	gtm©4x4
<
	tf32
, 
	thighp
> 
	thighp_fm©4x4
;

1873 
highp_fm©2x2
 
	thighp_fm©2
;

1877 
highp_fm©3x3
 
	thighp_fm©3
;

1881 
highp_fm©4x4
 
	thighp_fm©4
;

1890 
	gtm©2x2
<
	tf32
, 
	tlowp
> 
	tlowp_f32m©2x2
;

1894 
	gtm©2x3
<
	tf32
, 
	tlowp
> 
	tlowp_f32m©2x3
;

1898 
	gtm©2x4
<
	tf32
, 
	tlowp
> 
	tlowp_f32m©2x4
;

1902 
	gtm©3x2
<
	tf32
, 
	tlowp
> 
	tlowp_f32m©3x2
;

1906 
	gtm©3x3
<
	tf32
, 
	tlowp
> 
	tlowp_f32m©3x3
;

1910 
	gtm©3x4
<
	tf32
, 
	tlowp
> 
	tlowp_f32m©3x4
;

1914 
	gtm©4x2
<
	tf32
, 
	tlowp
> 
	tlowp_f32m©4x2
;

1918 
	gtm©4x3
<
	tf32
, 
	tlowp
> 
	tlowp_f32m©4x3
;

1922 
	gtm©4x4
<
	tf32
, 
	tlowp
> 
	tlowp_f32m©4x4
;

1930 
lowp_f32m©2x2
 
	tlowp_f32m©2
;

1934 
lowp_f32m©3x3
 
	tlowp_f32m©3
;

1938 
lowp_f32m©4x4
 
	tlowp_f32m©4
;

1947 
	gtm©2x2
<
	tf32
, 
	tmediump
> 
	tmediump_f32m©2x2
;

1951 
	gtm©2x3
<
	tf32
, 
	tmediump
> 
	tmediump_f32m©2x3
;

1955 
	gtm©2x4
<
	tf32
, 
	tmediump
> 
	tmediump_f32m©2x4
;

1959 
	gtm©3x2
<
	tf32
, 
	tmediump
> 
	tmediump_f32m©3x2
;

1963 
	gtm©3x3
<
	tf32
, 
	tmediump
> 
	tmediump_f32m©3x3
;

1967 
	gtm©3x4
<
	tf32
, 
	tmediump
> 
	tmediump_f32m©3x4
;

1971 
	gtm©4x2
<
	tf32
, 
	tmediump
> 
	tmediump_f32m©4x2
;

1975 
	gtm©4x3
<
	tf32
, 
	tmediump
> 
	tmediump_f32m©4x3
;

1979 
	gtm©4x4
<
	tf32
, 
	tmediump
> 
	tmediump_f32m©4x4
;

1987 
mediump_f32m©2x2
 
	tmediump_f32m©2
;

1991 
mediump_f32m©3x3
 
	tmediump_f32m©3
;

1995 
mediump_f32m©4x4
 
	tmediump_f32m©4
;

2004 
	gtm©2x2
<
	tf32
, 
	thighp
> 
	thighp_f32m©2x2
;

2008 
	gtm©2x3
<
	tf32
, 
	thighp
> 
	thighp_f32m©2x3
;

2012 
	gtm©2x4
<
	tf32
, 
	thighp
> 
	thighp_f32m©2x4
;

2016 
	gtm©3x2
<
	tf32
, 
	thighp
> 
	thighp_f32m©3x2
;

2020 
	gtm©3x3
<
	tf32
, 
	thighp
> 
	thighp_f32m©3x3
;

2024 
	gtm©3x4
<
	tf32
, 
	thighp
> 
	thighp_f32m©3x4
;

2028 
	gtm©4x2
<
	tf32
, 
	thighp
> 
	thighp_f32m©4x2
;

2032 
	gtm©4x3
<
	tf32
, 
	thighp
> 
	thighp_f32m©4x3
;

2036 
	gtm©4x4
<
	tf32
, 
	thighp
> 
	thighp_f32m©4x4
;

2044 
highp_f32m©2x2
 
	thighp_f32m©2
;

2048 
highp_f32m©3x3
 
	thighp_f32m©3
;

2052 
highp_f32m©4x4
 
	thighp_f32m©4
;

2061 
	gtm©2x2
<
	tf64
, 
	tlowp
> 
	tlowp_f64m©2x2
;

2065 
	gtm©2x3
<
	tf64
, 
	tlowp
> 
	tlowp_f64m©2x3
;

2069 
	gtm©2x4
<
	tf64
, 
	tlowp
> 
	tlowp_f64m©2x4
;

2073 
	gtm©3x2
<
	tf64
, 
	tlowp
> 
	tlowp_f64m©3x2
;

2077 
	gtm©3x3
<
	tf64
, 
	tlowp
> 
	tlowp_f64m©3x3
;

2081 
	gtm©3x4
<
	tf64
, 
	tlowp
> 
	tlowp_f64m©3x4
;

2085 
	gtm©4x2
<
	tf64
, 
	tlowp
> 
	tlowp_f64m©4x2
;

2089 
	gtm©4x3
<
	tf64
, 
	tlowp
> 
	tlowp_f64m©4x3
;

2093 
	gtm©4x4
<
	tf64
, 
	tlowp
> 
	tlowp_f64m©4x4
;

2101 
lowp_f64m©2x2
 
	tlowp_f64m©2
;

2105 
lowp_f64m©3x3
 
	tlowp_f64m©3
;

2109 
lowp_f64m©4x4
 
	tlowp_f64m©4
;

2118 
	gtm©2x2
<
	tf64
, 
	tmediump
> 
	tmediump_f64m©2x2
;

2122 
	gtm©2x3
<
	tf64
, 
	tmediump
> 
	tmediump_f64m©2x3
;

2126 
	gtm©2x4
<
	tf64
, 
	tmediump
> 
	tmediump_f64m©2x4
;

2130 
	gtm©3x2
<
	tf64
, 
	tmediump
> 
	tmediump_f64m©3x2
;

2134 
	gtm©3x3
<
	tf64
, 
	tmediump
> 
	tmediump_f64m©3x3
;

2138 
	gtm©3x4
<
	tf64
, 
	tmediump
> 
	tmediump_f64m©3x4
;

2142 
	gtm©4x2
<
	tf64
, 
	tmediump
> 
	tmediump_f64m©4x2
;

2146 
	gtm©4x3
<
	tf64
, 
	tmediump
> 
	tmediump_f64m©4x3
;

2150 
	gtm©4x4
<
	tf64
, 
	tmediump
> 
	tmediump_f64m©4x4
;

2158 
mediump_f64m©2x2
 
	tmediump_f64m©2
;

2162 
mediump_f64m©3x3
 
	tmediump_f64m©3
;

2166 
mediump_f64m©4x4
 
	tmediump_f64m©4
;

2174 
	gtm©2x2
<
	tf64
, 
	thighp
> 
	thighp_f64m©2x2
;

2178 
	gtm©2x3
<
	tf64
, 
	thighp
> 
	thighp_f64m©2x3
;

2182 
	gtm©2x4
<
	tf64
, 
	thighp
> 
	thighp_f64m©2x4
;

2186 
	gtm©3x2
<
	tf64
, 
	thighp
> 
	thighp_f64m©3x2
;

2190 
	gtm©3x3
<
	tf64
, 
	thighp
> 
	thighp_f64m©3x3
;

2194 
	gtm©3x4
<
	tf64
, 
	thighp
> 
	thighp_f64m©3x4
;

2198 
	gtm©4x2
<
	tf64
, 
	thighp
> 
	thighp_f64m©4x2
;

2202 
	gtm©4x3
<
	tf64
, 
	thighp
> 
	thighp_f64m©4x3
;

2206 
	gtm©4x4
<
	tf64
, 
	thighp
> 
	thighp_f64m©4x4
;

2214 
highp_f64m©2x2
 
	thighp_f64m©2
;

2218 
highp_f64m©3x3
 
	thighp_f64m©3
;

2222 
highp_f64m©4x4
 
	thighp_f64m©4
;

2229 
	gtqu©
<
	tf32
, 
	tlowp
> 
	tlowp_f32qu©
;

2233 
	gtqu©
<
	tf64
, 
	tlowp
> 
	tlowp_f64qu©
;

2237 
	gtqu©
<
	tf32
, 
	tmediump
> 
	tmediump_f32qu©
;

2241 
	gtqu©
<
	tf64
, 
	tmediump
> 
	tmediump_f64qu©
;

2245 
	gtqu©
<
	tf32
, 
	thighp
> 
	thighp_f32qu©
;

2249 
	gtqu©
<
	tf64
, 
	thighp
> 
	thighp_f64qu©
;

2252 #if(
deföed
(
GLM_PRECISION_LOWP_FLOAT
))

2253 
lowp_f32vec1
 
	tfvec1
;

2254 
lowp_f32vec2
 
	tfvec2
;

2255 
lowp_f32vec3
 
	tfvec3
;

2256 
lowp_f32vec4
 
	tfvec4
;

2257 
lowp_f32m©2
 
	tfm©2
;

2258 
lowp_f32m©3
 
	tfm©3
;

2259 
lowp_f32m©4
 
	tfm©4
;

2260 
lowp_f32m©2x2
 
	tfm©2x2
;

2261 
lowp_f32m©3x2
 
	tfm©3x2
;

2262 
lowp_f32m©4x2
 
	tfm©4x2
;

2263 
lowp_f32m©2x3
 
	tfm©2x3
;

2264 
lowp_f32m©3x3
 
	tfm©3x3
;

2265 
lowp_f32m©4x3
 
	tfm©4x3
;

2266 
lowp_f32m©2x4
 
	tfm©2x4
;

2267 
lowp_f32m©3x4
 
	tfm©3x4
;

2268 
lowp_f32m©4x4
 
	tfm©4x4
;

2269 
lowp_f32qu©
 
	tfqu©
;

2271 
lowp_f32vec1
 
	tf32vec1
;

2272 
lowp_f32vec2
 
	tf32vec2
;

2273 
lowp_f32vec3
 
	tf32vec3
;

2274 
lowp_f32vec4
 
	tf32vec4
;

2275 
lowp_f32m©2
 
	tf32m©2
;

2276 
lowp_f32m©3
 
	tf32m©3
;

2277 
lowp_f32m©4
 
	tf32m©4
;

2278 
lowp_f32m©2x2
 
	tf32m©2x2
;

2279 
lowp_f32m©3x2
 
	tf32m©3x2
;

2280 
lowp_f32m©4x2
 
	tf32m©4x2
;

2281 
lowp_f32m©2x3
 
	tf32m©2x3
;

2282 
lowp_f32m©3x3
 
	tf32m©3x3
;

2283 
lowp_f32m©4x3
 
	tf32m©4x3
;

2284 
lowp_f32m©2x4
 
	tf32m©2x4
;

2285 
lowp_f32m©3x4
 
	tf32m©3x4
;

2286 
lowp_f32m©4x4
 
	tf32m©4x4
;

2287 
lowp_f32qu©
 
	tf32qu©
;

2288 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_FLOAT
))

2289 
mediump_f32vec1
 
	tfvec1
;

2290 
mediump_f32vec2
 
	tfvec2
;

2291 
mediump_f32vec3
 
	tfvec3
;

2292 
mediump_f32vec4
 
	tfvec4
;

2293 
mediump_f32m©2
 
	tfm©2
;

2294 
mediump_f32m©3
 
	tfm©3
;

2295 
mediump_f32m©4
 
	tfm©4
;

2296 
mediump_f32m©2x2
 
	tfm©2x2
;

2297 
mediump_f32m©3x2
 
	tfm©3x2
;

2298 
mediump_f32m©4x2
 
	tfm©4x2
;

2299 
mediump_f32m©2x3
 
	tfm©2x3
;

2300 
mediump_f32m©3x3
 
	tfm©3x3
;

2301 
mediump_f32m©4x3
 
	tfm©4x3
;

2302 
mediump_f32m©2x4
 
	tfm©2x4
;

2303 
mediump_f32m©3x4
 
	tfm©3x4
;

2304 
mediump_f32m©4x4
 
	tfm©4x4
;

2305 
mediump_f32qu©
 
	tfqu©
;

2307 
mediump_f32vec1
 
	tf32vec1
;

2308 
mediump_f32vec2
 
	tf32vec2
;

2309 
mediump_f32vec3
 
	tf32vec3
;

2310 
mediump_f32vec4
 
	tf32vec4
;

2311 
mediump_f32m©2
 
	tf32m©2
;

2312 
mediump_f32m©3
 
	tf32m©3
;

2313 
mediump_f32m©4
 
	tf32m©4
;

2314 
mediump_f32m©2x2
 
	tf32m©2x2
;

2315 
mediump_f32m©3x2
 
	tf32m©3x2
;

2316 
mediump_f32m©4x2
 
	tf32m©4x2
;

2317 
mediump_f32m©2x3
 
	tf32m©2x3
;

2318 
mediump_f32m©3x3
 
	tf32m©3x3
;

2319 
mediump_f32m©4x3
 
	tf32m©4x3
;

2320 
mediump_f32m©2x4
 
	tf32m©2x4
;

2321 
mediump_f32m©3x4
 
	tf32m©3x4
;

2322 
mediump_f32m©4x4
 
	tf32m©4x4
;

2323 
mediump_f32qu©
 
	tf32qu©
;

2327 
highp_f32vec1
 
	tfvec1
;

2331 
highp_f32vec2
 
	tfvec2
;

2335 
highp_f32vec3
 
	tfvec3
;

2339 
highp_f32vec4
 
	tfvec4
;

2343 
highp_f32m©2x2
 
	tfm©2x2
;

2347 
highp_f32m©2x3
 
	tfm©2x3
;

2351 
highp_f32m©2x4
 
	tfm©2x4
;

2355 
highp_f32m©3x2
 
	tfm©3x2
;

2359 
highp_f32m©3x3
 
	tfm©3x3
;

2363 
highp_f32m©3x4
 
	tfm©3x4
;

2367 
highp_f32m©4x2
 
	tfm©4x2
;

2371 
highp_f32m©4x3
 
	tfm©4x3
;

2375 
highp_f32m©4x4
 
	tfm©4x4
;

2379 
fm©2x2
 
	tfm©2
;

2383 
fm©3x3
 
	tfm©3
;

2387 
fm©4x4
 
	tfm©4
;

2391 
highp_fqu©
 
	tfqu©
;

2397 
highp_f32vec1
 
	tf32vec1
;

2401 
highp_f32vec2
 
	tf32vec2
;

2405 
highp_f32vec3
 
	tf32vec3
;

2409 
highp_f32vec4
 
	tf32vec4
;

2413 
highp_f32m©2x2
 
	tf32m©2x2
;

2417 
highp_f32m©2x3
 
	tf32m©2x3
;

2421 
highp_f32m©2x4
 
	tf32m©2x4
;

2425 
highp_f32m©3x2
 
	tf32m©3x2
;

2429 
highp_f32m©3x3
 
	tf32m©3x3
;

2433 
highp_f32m©3x4
 
	tf32m©3x4
;

2437 
highp_f32m©4x2
 
	tf32m©4x2
;

2441 
highp_f32m©4x3
 
	tf32m©4x3
;

2445 
highp_f32m©4x4
 
	tf32m©4x4
;

2449 
f32m©2x2
 
	tf32m©2
;

2453 
f32m©3x3
 
	tf32m©3
;

2457 
f32m©4x4
 
	tf32m©4
;

2461 
highp_f32qu©
 
	tf32qu©
;

2464 #if(
deföed
(
GLM_PRECISION_LOWP_DOUBLE
))

2465 
lowp_f64vec1
 
	tf64vec1
;

2466 
lowp_f64vec2
 
	tf64vec2
;

2467 
lowp_f64vec3
 
	tf64vec3
;

2468 
lowp_f64vec4
 
	tf64vec4
;

2469 
lowp_f64m©2
 
	tf64m©2
;

2470 
lowp_f64m©3
 
	tf64m©3
;

2471 
lowp_f64m©4
 
	tf64m©4
;

2472 
lowp_f64m©2x2
 
	tf64m©2x2
;

2473 
lowp_f64m©3x2
 
	tf64m©3x2
;

2474 
lowp_f64m©4x2
 
	tf64m©4x2
;

2475 
lowp_f64m©2x3
 
	tf64m©2x3
;

2476 
lowp_f64m©3x3
 
	tf64m©3x3
;

2477 
lowp_f64m©4x3
 
	tf64m©4x3
;

2478 
lowp_f64m©2x4
 
	tf64m©2x4
;

2479 
lowp_f64m©3x4
 
	tf64m©3x4
;

2480 
lowp_f64m©4x4
 
	tf64m©4x4
;

2481 
lowp_f64qu©
 
	tf64qu©
;

2482 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_DOUBLE
))

2483 
mediump_f64vec1
 
	tf64vec1
;

2484 
mediump_f64vec2
 
	tf64vec2
;

2485 
mediump_f64vec3
 
	tf64vec3
;

2486 
mediump_f64vec4
 
	tf64vec4
;

2487 
mediump_f64m©2
 
	tf64m©2
;

2488 
mediump_f64m©3
 
	tf64m©3
;

2489 
mediump_f64m©4
 
	tf64m©4
;

2490 
mediump_f64m©2x2
 
	tf64m©2x2
;

2491 
mediump_f64m©3x2
 
	tf64m©3x2
;

2492 
mediump_f64m©4x2
 
	tf64m©4x2
;

2493 
mediump_f64m©2x3
 
	tf64m©2x3
;

2494 
mediump_f64m©3x3
 
	tf64m©3x3
;

2495 
mediump_f64m©4x3
 
	tf64m©4x3
;

2496 
mediump_f64m©2x4
 
	tf64m©2x4
;

2497 
mediump_f64m©3x4
 
	tf64m©3x4
;

2498 
mediump_f64m©4x4
 
	tf64m©4x4
;

2499 
mediump_f64qu©
 
	tf64qu©
;

2503 
highp_f64vec1
 
	tf64vec1
;

2507 
highp_f64vec2
 
	tf64vec2
;

2511 
highp_f64vec3
 
	tf64vec3
;

2515 
highp_f64vec4
 
	tf64vec4
;

2519 
highp_f64m©2x2
 
	tf64m©2x2
;

2523 
highp_f64m©2x3
 
	tf64m©2x3
;

2527 
highp_f64m©2x4
 
	tf64m©2x4
;

2531 
highp_f64m©3x2
 
	tf64m©3x2
;

2535 
highp_f64m©3x3
 
	tf64m©3x3
;

2539 
highp_f64m©3x4
 
	tf64m©3x4
;

2543 
highp_f64m©4x2
 
	tf64m©4x2
;

2547 
highp_f64m©4x3
 
	tf64m©4x3
;

2551 
highp_f64m©4x4
 
	tf64m©4x4
;

2555 
f64m©2x2
 
	tf64m©2
;

2559 
f64m©3x3
 
	tf64m©3
;

2563 
f64m©4x4
 
	tf64m©4
;

2567 
highp_f64qu©
 
	tf64qu©
;

	@glm/glm/geometric.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/func_geomëric.hµ
"

	@glm/glm/glm.hpp

52 
	~"dëaû/_fixes.hµ
"

54 #¥agm®
⁄˚


56 
	~<cm©h
>

57 
	~<˛imôs
>

58 
	~<cÊﬂt
>

59 
	~<limôs
>

60 
	~<ˇs£π
>

61 
	~"fwd.hµ
"

63 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_MESSAGE_CORE_INCLUDED_DISPLAYED
)

64 
	#GLM_MESSAGE_CORE_INCLUDED_DISPLAYED


	)

65 #¥agm®
mesßge
("GLM: CoreÜibrary included")

68 
	~"vec2.hµ
"

69 
	~"vec3.hµ
"

70 
	~"vec4.hµ
"

71 
	~"m©2x2.hµ
"

72 
	~"m©2x3.hµ
"

73 
	~"m©2x4.hµ
"

74 
	~"m©3x2.hµ
"

75 
	~"m©3x3.hµ
"

76 
	~"m©3x4.hµ
"

77 
	~"m©4x2.hµ
"

78 
	~"m©4x3.hµ
"

79 
	~"m©4x4.hµ
"

81 
	~"åig⁄omëric.hµ
"

82 
	~"exp⁄ítül.hµ
"

83 
	~"comm⁄.hµ
"

84 
	~"∑ckög.hµ
"

85 
	~"geomëric.hµ
"

86 
	~"m©rix.hµ
"

87 
	~"ve˘‹_ªœti⁄Æ.hµ
"

88 
	~"öãgî.hµ
"

	@glm/glm/gtc/bitfield.hpp

14 #¥agm®
⁄˚


17 
	~"../dëaû/£tup.hµ
"

18 
	~"../dëaû/¥ecisi⁄.hµ
"

19 
	~"../dëaû/ty≥_öt.hµ
"

20 
	~"../dëaû/_ve˘‹ize.hµ
"

21 
	~<limôs
>

23 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

24 #¥agm®
mesßge
("GLM: GLM_GTC_bitfieldÉxtension included")

27 
«me•a˚
 
	gglm


35 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

36 
GLM_FUNC_DECL
 
gíIUTy≥
 
mask
(gíIUTy≥ 
Bôs
);

41 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecIUTy≥
>

42 
GLM_FUNC_DECL
 
	gvecIUTy≥
<
	gT
, 
	gP
> 
mask
(
vecIUTy≥
<
T
, 
P
> c⁄° & 
v
);

47 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

48 
GLM_FUNC_DECL
 
gíIUTy≥
 
bôfõldRŸ©eRight
(gíIUTy≥ 
In
, 
Shi·
);

53 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

54 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
bôfõldRŸ©eRight
(
vecTy≥
<
T
, 
P
> c⁄° & 
In
, 
Shi·
);

59 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

60 
GLM_FUNC_DECL
 
gíIUTy≥
 
bôfõldRŸ©eLe·
(gíIUTy≥ 
In
, 
Shi·
);

65 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

66 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
bôfõldRŸ©eLe·
(
vecTy≥
<
T
, 
P
> c⁄° & 
In
, 
Shi·
);

71 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

72 
GLM_FUNC_DECL
 
gíIUTy≥
 
bôfõldFûlO√
(gíIUTy≥ 
VÆue
, 
Fú°Bô
, 
BôCou¡
);

77 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

78 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
bôfõldFûlO√
(
vecTy≥
<
T
, 
P
> c⁄° & 
VÆue
, 
Fú°Bô
, 
BôCou¡
);

83 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

84 
GLM_FUNC_DECL
 
gíIUTy≥
 
bôfõldFûlZîo
(gíIUTy≥ 
VÆue
, 
Fú°Bô
, 
BôCou¡
);

89 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

90 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
bôfõldFûlZîo
(
vecTy≥
<
T
, 
P
> c⁄° & 
VÆue
, 
Fú°Bô
, 
BôCou¡
);

97 
GLM_FUNC_DECL
 
öt16
 
bôfõldI¡îÀave
(
öt8
 
x
, i¡8 
y
);

104 
GLM_FUNC_DECL
 
uöt16
 
bôfõldI¡îÀave
(
uöt8
 
x
, uöt8 
y
);

111 
GLM_FUNC_DECL
 
öt32
 
bôfõldI¡îÀave
(
öt16
 
x
, i¡16 
y
);

118 
GLM_FUNC_DECL
 
uöt32
 
bôfõldI¡îÀave
(
uöt16
 
x
, uöt16 
y
);

125 
GLM_FUNC_DECL
 
öt64
 
bôfõldI¡îÀave
(
öt32
 
x
, i¡32 
y
);

132 
GLM_FUNC_DECL
 
uöt64
 
bôfõldI¡îÀave
(
uöt32
 
x
, uöt32 
y
);

139 
GLM_FUNC_DECL
 
öt32
 
bôfõldI¡îÀave
(
öt8
 
x
, i¡8 
y
, i¡8 
z
);

146 
GLM_FUNC_DECL
 
uöt32
 
bôfõldI¡îÀave
(
uöt8
 
x
, uöt8 
y
, uöt8 
z
);

153 
GLM_FUNC_DECL
 
öt64
 
bôfõldI¡îÀave
(
öt16
 
x
, i¡16 
y
, i¡16 
z
);

160 
GLM_FUNC_DECL
 
uöt64
 
bôfõldI¡îÀave
(
uöt16
 
x
, uöt16 
y
, uöt16 
z
);

167 
GLM_FUNC_DECL
 
öt64
 
bôfõldI¡îÀave
(
öt32
 
x
, i¡32 
y
, i¡32 
z
);

174 
GLM_FUNC_DECL
 
uöt64
 
bôfõldI¡îÀave
(
uöt32
 
x
, uöt32 
y
, uöt32 
z
);

181 
GLM_FUNC_DECL
 
öt32
 
bôfõldI¡îÀave
(
öt8
 
x
, i¡8 
y
, i¡8 
z
, i¡8 
w
);

188 
GLM_FUNC_DECL
 
uöt32
 
bôfõldI¡îÀave
(
uöt8
 
x
, uöt8 
y
, uöt8 
z
, uöt8 
w
);

195 
GLM_FUNC_DECL
 
öt64
 
bôfõldI¡îÀave
(
öt16
 
x
, i¡16 
y
, i¡16 
z
, i¡16 
w
);

202 
GLM_FUNC_DECL
 
uöt64
 
bôfõldI¡îÀave
(
uöt16
 
x
, uöt16 
y
, uöt16 
z
, uöt16 
w
);

207 
	~"bôfõld.öl
"

	@glm/glm/gtc/color_space.hpp

14 #¥agm®
⁄˚


17 
	~"../dëaû/£tup.hµ
"

18 
	~"../dëaû/¥ecisi⁄.hµ
"

19 
	~"../exp⁄ítül.hµ
"

20 
	~"../vec3.hµ
"

21 
	~"../vec4.hµ
"

22 
	~<limôs
>

24 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

25 #¥agm®
mesßge
("GLM: GLM_GTC_color_spaceÉxtension included")

28 
«me•a˚
 
	gglm


35 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

36 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
c⁄vîtLöórToSRGB
(
vecTy≥
<
T
, 
P
> c⁄° & 
Cﬁ‹Löór
);

40 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

41 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
c⁄vîtLöórToSRGB
(
vecTy≥
<
T
, 
P
> c⁄° & 
Cﬁ‹Löór
, T 
Gamma
);

45 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

46 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
c⁄vîtSRGBToLöór
(
vecTy≥
<
T
, 
P
> c⁄° & 
Cﬁ‹SRGB
);

50 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

51 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
c⁄vîtSRGBToLöór
(
vecTy≥
<
T
, 
P
> c⁄° & 
Cﬁ‹SRGB
, T 
Gamma
);

56 
	~"cﬁ‹_•a˚.öl
"

	@glm/glm/gtc/constants.hpp

14 #¥agm®
⁄˚


17 
	~"../dëaû/£tup.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTC_constantsÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

31 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
ïsû⁄
();

35 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

36 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
zîo
();

40 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

41 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
⁄e
();

45 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

46 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
pi
();

50 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

51 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
two_pi
();

55 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

56 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
roŸ_pi
();

60 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

61 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
hÆf_pi
();

65 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

66 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
thªe_ovî_two_pi
();

70 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

71 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
qu¨ãr_pi
();

75 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

76 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
⁄e_ovî_pi
();

80 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

81 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
⁄e_ovî_two_pi
();

85 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

86 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
two_ovî_pi
();

90 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

91 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
four_ovî_pi
();

95 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

96 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
two_ovî_roŸ_pi
();

100 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

101 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
⁄e_ovî_roŸ_two
();

105 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

106 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
roŸ_hÆf_pi
();

110 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

111 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
roŸ_two_pi
();

115 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

116 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
roŸ_ _four
();

120 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

121 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
e
();

125 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

126 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
euÀr
();

130 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

131 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
roŸ_two
();

135 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

136 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
roŸ_thªe
();

140 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

141 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
roŸ_five
();

145 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

146 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
 _two
();

150 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

151 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
 _ãn
();

155 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

156 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
 _ _two
();

160 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

161 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
thúd
();

165 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

166 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
two_thúds
();

170 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

171 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
gíTy≥
 
gﬁdí_øtio
();

176 
	~"c⁄°™ts.öl
"

	@glm/glm/gtc/epsilon.hpp

15 #¥agm®
⁄˚


18 
	~"../dëaû/£tup.hµ
"

19 
	~"../dëaû/¥ecisi⁄.hµ
"

21 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

22 #¥agm®
mesßge
("GLM: GLM_GTC_epsilonÉxtension included")

25 
«me•a˚
 
	gglm


34 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

35 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
ïsû⁄EquÆ
(

36 
vecTy≥
<
T
, 
P
> c⁄° & 
x
,

37 
vecTy≥
<
T
, 
P
> c⁄° & 
y
,

38 
T
 c⁄° & 
ïsû⁄
);

44 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

45 
GLM_FUNC_DECL
 
boﬁ
 
ïsû⁄EquÆ
(

46 
gíTy≥
 c⁄° & 
x
,

47 
gíTy≥
 c⁄° & 
y
,

48 
gíTy≥
 c⁄° & 
ïsû⁄
);

54 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

55 
GLM_FUNC_DECL
 
ty≥«me
 
	ggíTy≥
::
boﬁTy≥
 
ïsû⁄NŸEquÆ
(

56 
gíTy≥
 c⁄° & 
x
,

57 
gíTy≥
 c⁄° & 
y
,

58 
ty≥«me
 
gíTy≥
::
vÆue_ty≥
 c⁄° & 
ïsû⁄
);

64 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

65 
GLM_FUNC_DECL
 
boﬁ
 
ïsû⁄NŸEquÆ
(

66 
gíTy≥
 c⁄° & 
x
,

67 
gíTy≥
 c⁄° & 
y
,

68 
gíTy≥
 c⁄° & 
ïsû⁄
);

73 
	~"ïsû⁄.öl
"

	@glm/glm/gtc/functions.hpp

15 #¥agm®
⁄˚


18 
	~"../dëaû/£tup.hµ
"

19 
	~"../dëaû/¥ecisi⁄.hµ
"

20 
	~"../dëaû/ty≥_vec2.hµ
"

22 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

23 #¥agm®
mesßge
("GLM: GLM_GTC_functionsÉxtension included")

26 
«me•a˚
 
	gglm


34 
	gãm∂©e
 <
ty≥«me
 
	gT
>

35 
GLM_FUNC_DECL
 
T
 
gauss
(

36 
T
 
x
,

37 
T
 
Ex≥˘edVÆue
,

38 
T
 
Sènd¨dDevüti⁄
);

43 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

44 
GLM_FUNC_DECL
 
T
 
gauss
(

45 
tvec2
<
T
, 
P
> c⁄°& 
Co‹d
,

46 
tvec2
<
T
, 
P
> c⁄°& 
Ex≥˘edVÆue
,

47 
tvec2
<
T
, 
P
> c⁄°& 
Sènd¨dDevüti⁄
);

52 
	~"fun˘i⁄s.öl
"

	@glm/glm/gtc/integer.hpp

14 #¥agm®
⁄˚


17 
	~"../dëaû/£tup.hµ
"

18 
	~"../dëaû/¥ecisi⁄.hµ
"

19 
	~"../dëaû/func_comm⁄.hµ
"

20 
	~"../dëaû/func_öãgî.hµ
"

21 
	~"../dëaû/func_exp⁄ítül.hµ
"

22 
	~<limôs
>

24 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

25 #¥agm®
mesßge
("GLM: GLM_GTC_integerÉxtension included")

28 
«me•a˚
 
	gglm


35 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

36 
GLM_FUNC_DECL
 
gíIUTy≥
 
log2
(gíIUTy≥ 
x
);

46 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

47 
GLM_FUNC_DECL
 
gíIUTy≥
 
mod
(gíIUTy≥ 
x
, gíIUTy≥ 
y
);

58 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

59 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
mod
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, T 
y
);

70 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

71 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
mod
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

83 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

84 
GLM_FUNC_DECL
 
	gvecTy≥
<, 
	gP
> 
úound
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

96 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

97 
GLM_FUNC_DECL
 
	gvecTy≥
<
	guöt
, 
	gP
> 
uround
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

102 
	~"öãgî.öl
"

	@glm/glm/gtc/matrix_access.hpp

12 #¥agm®
⁄˚


15 
	~"../dëaû/£tup.hµ
"

17 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

18 #¥agm®
mesßge
("GLM: GLM_GTC_matrix_accessÉxtension included")

21 
«me•a˚
 
	gglm


28 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

29 
GLM_FUNC_DECL
 
ty≥«me
 
	ggíTy≥
::
row_ty≥
 
row
(

30 
gíTy≥
 c⁄° & 
m
,

31 
Àngth_t
 
ödex
);

35 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

36 
GLM_FUNC_DECL
 
gíTy≥
 
row
(

37 
gíTy≥
 c⁄° & 
m
,

38 
Àngth_t
 
ödex
,

39 
ty≥«me
 
gíTy≥
::
row_ty≥
 c⁄° & 
x
);

43 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

44 
GLM_FUNC_DECL
 
ty≥«me
 
	ggíTy≥
::
cﬁ_ty≥
 
cﬁumn
(

45 
gíTy≥
 c⁄° & 
m
,

46 
Àngth_t
 
ödex
);

50 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

51 
GLM_FUNC_DECL
 
gíTy≥
 
cﬁumn
(

52 
gíTy≥
 c⁄° & 
m
,

53 
Àngth_t
 
ödex
,

54 
ty≥«me
 
gíTy≥
::
cﬁ_ty≥
 c⁄° & 
x
);

59 
	~"m©rix_ac˚ss.öl
"

	@glm/glm/gtc/matrix_integer.hpp

12 #¥agm®
⁄˚


15 
	~"../m©2x2.hµ
"

16 
	~"../m©2x3.hµ
"

17 
	~"../m©2x4.hµ
"

18 
	~"../m©3x2.hµ
"

19 
	~"../m©3x3.hµ
"

20 
	~"../m©3x4.hµ
"

21 
	~"../m©4x2.hµ
"

22 
	~"../m©4x3.hµ
"

23 
	~"../m©4x4.hµ
"

25 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

26 #¥agm®
mesßge
("GLM: GLM_GTC_matrix_integerÉxtension included")

29 
«me•a˚
 
	gglm


36 
	gtm©2x2
<, 
	thighp
> 
	thighp_im©2
;

40 
	gtm©3x3
<, 
	thighp
> 
	thighp_im©3
;

44 
	gtm©4x4
<, 
	thighp
> 
	thighp_im©4
;

48 
	gtm©2x2
<, 
	thighp
> 
	thighp_im©2x2
;

52 
	gtm©2x3
<, 
	thighp
> 
	thighp_im©2x3
;

56 
	gtm©2x4
<, 
	thighp
> 
	thighp_im©2x4
;

60 
	gtm©3x2
<, 
	thighp
> 
	thighp_im©3x2
;

64 
	gtm©3x3
<, 
	thighp
> 
	thighp_im©3x3
;

68 
	gtm©3x4
<, 
	thighp
> 
	thighp_im©3x4
;

72 
	gtm©4x2
<, 
	thighp
> 
	thighp_im©4x2
;

76 
	gtm©4x3
<, 
	thighp
> 
	thighp_im©4x3
;

80 
	gtm©4x4
<, 
	thighp
> 
	thighp_im©4x4
;

85 
	gtm©2x2
<, 
	tmediump
> 
	tmediump_im©2
;

89 
	gtm©3x3
<, 
	tmediump
> 
	tmediump_im©3
;

93 
	gtm©4x4
<, 
	tmediump
> 
	tmediump_im©4
;

98 
	gtm©2x2
<, 
	tmediump
> 
	tmediump_im©2x2
;

102 
	gtm©2x3
<, 
	tmediump
> 
	tmediump_im©2x3
;

106 
	gtm©2x4
<, 
	tmediump
> 
	tmediump_im©2x4
;

110 
	gtm©3x2
<, 
	tmediump
> 
	tmediump_im©3x2
;

114 
	gtm©3x3
<, 
	tmediump
> 
	tmediump_im©3x3
;

118 
	gtm©3x4
<, 
	tmediump
> 
	tmediump_im©3x4
;

122 
	gtm©4x2
<, 
	tmediump
> 
	tmediump_im©4x2
;

126 
	gtm©4x3
<, 
	tmediump
> 
	tmediump_im©4x3
;

130 
	gtm©4x4
<, 
	tmediump
> 
	tmediump_im©4x4
;

135 
	gtm©2x2
<, 
	tlowp
> 
	tlowp_im©2
;

139 
	gtm©3x3
<, 
	tlowp
> 
	tlowp_im©3
;

143 
	gtm©4x4
<, 
	tlowp
> 
	tlowp_im©4
;

148 
	gtm©2x2
<, 
	tlowp
> 
	tlowp_im©2x2
;

152 
	gtm©2x3
<, 
	tlowp
> 
	tlowp_im©2x3
;

156 
	gtm©2x4
<, 
	tlowp
> 
	tlowp_im©2x4
;

160 
	gtm©3x2
<, 
	tlowp
> 
	tlowp_im©3x2
;

164 
	gtm©3x3
<, 
	tlowp
> 
	tlowp_im©3x3
;

168 
	gtm©3x4
<, 
	tlowp
> 
	tlowp_im©3x4
;

172 
	gtm©4x2
<, 
	tlowp
> 
	tlowp_im©4x2
;

176 
	gtm©4x3
<, 
	tlowp
> 
	tlowp_im©4x3
;

180 
	gtm©4x4
<, 
	tlowp
> 
	tlowp_im©4x4
;

185 
	gtm©2x2
<
	tuöt
, 
	thighp
> 
	thighp_um©2
;

189 
	gtm©3x3
<
	tuöt
, 
	thighp
> 
	thighp_um©3
;

193 
	gtm©4x4
<
	tuöt
, 
	thighp
> 
	thighp_um©4
;

197 
	gtm©2x2
<
	tuöt
, 
	thighp
> 
	thighp_um©2x2
;

201 
	gtm©2x3
<
	tuöt
, 
	thighp
> 
	thighp_um©2x3
;

205 
	gtm©2x4
<
	tuöt
, 
	thighp
> 
	thighp_um©2x4
;

209 
	gtm©3x2
<
	tuöt
, 
	thighp
> 
	thighp_um©3x2
;

213 
	gtm©3x3
<
	tuöt
, 
	thighp
> 
	thighp_um©3x3
;

217 
	gtm©3x4
<
	tuöt
, 
	thighp
> 
	thighp_um©3x4
;

221 
	gtm©4x2
<
	tuöt
, 
	thighp
> 
	thighp_um©4x2
;

225 
	gtm©4x3
<
	tuöt
, 
	thighp
> 
	thighp_um©4x3
;

229 
	gtm©4x4
<
	tuöt
, 
	thighp
> 
	thighp_um©4x4
;

234 
	gtm©2x2
<
	tuöt
, 
	tmediump
> 
	tmediump_um©2
;

238 
	gtm©3x3
<
	tuöt
, 
	tmediump
> 
	tmediump_um©3
;

242 
	gtm©4x4
<
	tuöt
, 
	tmediump
> 
	tmediump_um©4
;

247 
	gtm©2x2
<
	tuöt
, 
	tmediump
> 
	tmediump_um©2x2
;

251 
	gtm©2x3
<
	tuöt
, 
	tmediump
> 
	tmediump_um©2x3
;

255 
	gtm©2x4
<
	tuöt
, 
	tmediump
> 
	tmediump_um©2x4
;

259 
	gtm©3x2
<
	tuöt
, 
	tmediump
> 
	tmediump_um©3x2
;

263 
	gtm©3x3
<
	tuöt
, 
	tmediump
> 
	tmediump_um©3x3
;

267 
	gtm©3x4
<
	tuöt
, 
	tmediump
> 
	tmediump_um©3x4
;

271 
	gtm©4x2
<
	tuöt
, 
	tmediump
> 
	tmediump_um©4x2
;

275 
	gtm©4x3
<
	tuöt
, 
	tmediump
> 
	tmediump_um©4x3
;

279 
	gtm©4x4
<
	tuöt
, 
	tmediump
> 
	tmediump_um©4x4
;

284 
	gtm©2x2
<
	tuöt
, 
	tlowp
> 
	tlowp_um©2
;

288 
	gtm©3x3
<
	tuöt
, 
	tlowp
> 
	tlowp_um©3
;

292 
	gtm©4x4
<
	tuöt
, 
	tlowp
> 
	tlowp_um©4
;

297 
	gtm©2x2
<
	tuöt
, 
	tlowp
> 
	tlowp_um©2x2
;

301 
	gtm©2x3
<
	tuöt
, 
	tlowp
> 
	tlowp_um©2x3
;

305 
	gtm©2x4
<
	tuöt
, 
	tlowp
> 
	tlowp_um©2x4
;

309 
	gtm©3x2
<
	tuöt
, 
	tlowp
> 
	tlowp_um©3x2
;

313 
	gtm©3x3
<
	tuöt
, 
	tlowp
> 
	tlowp_um©3x3
;

317 
	gtm©3x4
<
	tuöt
, 
	tlowp
> 
	tlowp_um©3x4
;

321 
	gtm©4x2
<
	tuöt
, 
	tlowp
> 
	tlowp_um©4x2
;

325 
	gtm©4x3
<
	tuöt
, 
	tlowp
> 
	tlowp_um©4x3
;

329 
	gtm©4x4
<
	tuöt
, 
	tlowp
> 
	tlowp_um©4x4
;

331 #if(
deföed
(
GLM_PRECISION_HIGHP_INT
))

332 
highp_im©2
 
	tim©2
;

333 
highp_im©3
 
	tim©3
;

334 
highp_im©4
 
	tim©4
;

335 
highp_im©2x2
 
	tim©2x2
;

336 
highp_im©2x3
 
	tim©2x3
;

337 
highp_im©2x4
 
	tim©2x4
;

338 
highp_im©3x2
 
	tim©3x2
;

339 
highp_im©3x3
 
	tim©3x3
;

340 
highp_im©3x4
 
	tim©3x4
;

341 
highp_im©4x2
 
	tim©4x2
;

342 
highp_im©4x3
 
	tim©4x3
;

343 
highp_im©4x4
 
	tim©4x4
;

344 #ñif(
deföed
(
GLM_PRECISION_LOWP_INT
))

345 
lowp_im©2
 
	tim©2
;

346 
lowp_im©3
 
	tim©3
;

347 
lowp_im©4
 
	tim©4
;

348 
lowp_im©2x2
 
	tim©2x2
;

349 
lowp_im©2x3
 
	tim©2x3
;

350 
lowp_im©2x4
 
	tim©2x4
;

351 
lowp_im©3x2
 
	tim©3x2
;

352 
lowp_im©3x3
 
	tim©3x3
;

353 
lowp_im©3x4
 
	tim©3x4
;

354 
lowp_im©4x2
 
	tim©4x2
;

355 
lowp_im©4x3
 
	tim©4x3
;

356 
lowp_im©4x4
 
	tim©4x4
;

361 
mediump_im©2
 
	tim©2
;

365 
mediump_im©3
 
	tim©3
;

369 
mediump_im©4
 
	tim©4
;

373 
mediump_im©2x2
 
	tim©2x2
;

377 
mediump_im©2x3
 
	tim©2x3
;

381 
mediump_im©2x4
 
	tim©2x4
;

385 
mediump_im©3x2
 
	tim©3x2
;

389 
mediump_im©3x3
 
	tim©3x3
;

393 
mediump_im©3x4
 
	tim©3x4
;

397 
mediump_im©4x2
 
	tim©4x2
;

401 
mediump_im©4x3
 
	tim©4x3
;

405 
mediump_im©4x4
 
	tim©4x4
;

408 #if(
deföed
(
GLM_PRECISION_HIGHP_UINT
))

409 
highp_um©2
 
	tum©2
;

410 
highp_um©3
 
	tum©3
;

411 
highp_um©4
 
	tum©4
;

412 
highp_um©2x2
 
	tum©2x2
;

413 
highp_um©2x3
 
	tum©2x3
;

414 
highp_um©2x4
 
	tum©2x4
;

415 
highp_um©3x2
 
	tum©3x2
;

416 
highp_um©3x3
 
	tum©3x3
;

417 
highp_um©3x4
 
	tum©3x4
;

418 
highp_um©4x2
 
	tum©4x2
;

419 
highp_um©4x3
 
	tum©4x3
;

420 
highp_um©4x4
 
	tum©4x4
;

421 #ñif(
deföed
(
GLM_PRECISION_LOWP_UINT
))

422 
lowp_um©2
 
	tum©2
;

423 
lowp_um©3
 
	tum©3
;

424 
lowp_um©4
 
	tum©4
;

425 
lowp_um©2x2
 
	tum©2x2
;

426 
lowp_um©2x3
 
	tum©2x3
;

427 
lowp_um©2x4
 
	tum©2x4
;

428 
lowp_um©3x2
 
	tum©3x2
;

429 
lowp_um©3x3
 
	tum©3x3
;

430 
lowp_um©3x4
 
	tum©3x4
;

431 
lowp_um©4x2
 
	tum©4x2
;

432 
lowp_um©4x3
 
	tum©4x3
;

433 
lowp_um©4x4
 
	tum©4x4
;

438 
mediump_um©2
 
	tum©2
;

442 
mediump_um©3
 
	tum©3
;

446 
mediump_um©4
 
	tum©4
;

450 
mediump_um©2x2
 
	tum©2x2
;

454 
mediump_um©2x3
 
	tum©2x3
;

458 
mediump_um©2x4
 
	tum©2x4
;

462 
mediump_um©3x2
 
	tum©3x2
;

466 
mediump_um©3x3
 
	tum©3x3
;

470 
mediump_um©3x4
 
	tum©3x4
;

474 
mediump_um©4x2
 
	tum©4x2
;

478 
mediump_um©4x3
 
	tum©4x3
;

482 
mediump_um©4x4
 
	tum©4x4
;

	@glm/glm/gtc/matrix_inverse.hpp

12 #¥agm®
⁄˚


15 
	~"../dëaû/£tup.hµ
"

16 
	~"../m©rix.hµ
"

17 
	~"../m©2x2.hµ
"

18 
	~"../m©3x3.hµ
"

19 
	~"../m©4x4.hµ
"

21 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

22 #¥agm®
mesßge
("GLM: GLM_GTC_matrix_inverseÉxtension included")

25 
«me•a˚
 
	gglm


35 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

36 
GLM_FUNC_DECL
 
gíTy≥
 
afföeInvî£
(gíTy≥ c⁄° & 
m
);

43 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

44 
GLM_FUNC_DECL
 
gíTy≥
 
övî£Tøn•o£
(gíTy≥ c⁄° & 
m
);

49 
	~"m©rix_övî£.öl
"

	@glm/glm/gtc/matrix_transform.hpp

21 #¥agm®
⁄˚


24 
	~"../m©4x4.hµ
"

25 
	~"../vec2.hµ
"

26 
	~"../vec3.hµ
"

27 
	~"../vec4.hµ
"

28 
	~"../gtc/c⁄°™ts.hµ
"

30 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

31 #¥agm®
mesßge
("GLM: GLM_GTC_matrix_transformÉxtension included")

34 
«me•a˚
 
	gglm


57 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

58 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
å™¶©e
(

59 
tm©4x4
<
T
, 
P
> c⁄° & 
m
,

60 
tvec3
<
T
, 
P
> c⁄° & 
v
);

71 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

72 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
rŸ©e
(

73 
tm©4x4
<
T
, 
P
> c⁄° & 
m
,

74 
T
 
™gÀ
,

75 
tvec3
<
T
, 
P
> c⁄° & 
axis
);

85 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

86 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
sˇÀ
(

87 
tm©4x4
<
T
, 
P
> c⁄° & 
m
,

88 
tvec3
<
T
, 
P
> c⁄° & 
v
);

101 
	gãm∂©e
 <
ty≥«me
 
	gT
>

102 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
‹tho
(

103 
T
 
À·
,

104 
T
 
right
,

105 
T
 
bŸtom
,

106 
T
 
t›
,

107 
T
 
zNór
,

108 
T
 
zF¨
);

121 
	gãm∂©e
 <
ty≥«me
 
	gT
>

122 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
‹thoLH
(

123 
T
 
À·
,

124 
T
 
right
,

125 
T
 
bŸtom
,

126 
T
 
t›
,

127 
T
 
zNór
,

128 
T
 
zF¨
);

141 
	gãm∂©e
 <
ty≥«me
 
	gT
>

142 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
‹thoRH
(

143 
T
 
À·
,

144 
T
 
right
,

145 
T
 
bŸtom
,

146 
T
 
t›
,

147 
T
 
zNór
,

148 
T
 
zF¨
);

159 
	gãm∂©e
 <
ty≥«me
 
	gT
>

160 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
‹tho
(

161 
T
 
À·
,

162 
T
 
right
,

163 
T
 
bŸtom
,

164 
T
 
t›
);

176 
	gãm∂©e
 <
ty≥«me
 
	gT
>

177 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
‰u°um
(

178 
T
 
À·
,

179 
T
 
right
,

180 
T
 
bŸtom
,

181 
T
 
t›
,

182 
T
 
√¨
,

183 
T
 
Ár
);

195 
	gãm∂©e
 <
ty≥«me
 
	gT
>

196 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
‰u°umLH
(

197 
T
 
À·
,

198 
T
 
right
,

199 
T
 
bŸtom
,

200 
T
 
t›
,

201 
T
 
√¨
,

202 
T
 
Ár
);

214 
	gãm∂©e
 <
ty≥«me
 
	gT
>

215 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
‰u°umRH
(

216 
T
 
À·
,

217 
T
 
right
,

218 
T
 
bŸtom
,

219 
T
 
t›
,

220 
T
 
√¨
,

221 
T
 
Ár
);

231 
	gãm∂©e
 <
ty≥«me
 
	gT
>

232 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
≥r•e˘ive
(

233 
T
 
fovy
,

234 
T
 
a•e˘
,

235 
T
 
√¨
,

236 
T
 
Ár
);

246 
	gãm∂©e
 <
ty≥«me
 
	gT
>

247 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
≥r•e˘iveRH
(

248 
T
 
fovy
,

249 
T
 
a•e˘
,

250 
T
 
√¨
,

251 
T
 
Ár
);

261 
	gãm∂©e
 <
ty≥«me
 
	gT
>

262 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
≥r•e˘iveLH
(

263 
T
 
fovy
,

264 
T
 
a•e˘
,

265 
T
 
√¨
,

266 
T
 
Ár
);

277 
	gãm∂©e
 <
ty≥«me
 
	gT
>

278 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
≥r•e˘iveFov
(

279 
T
 
fov
,

280 
T
 
width
,

281 
T
 
height
,

282 
T
 
√¨
,

283 
T
 
Ár
);

294 
	gãm∂©e
 <
ty≥«me
 
	gT
>

295 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
≥r•e˘iveFovRH
(

296 
T
 
fov
,

297 
T
 
width
,

298 
T
 
height
,

299 
T
 
√¨
,

300 
T
 
Ár
);

311 
	gãm∂©e
 <
ty≥«me
 
	gT
>

312 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
≥r•e˘iveFovLH
(

313 
T
 
fov
,

314 
T
 
width
,

315 
T
 
height
,

316 
T
 
√¨
,

317 
T
 
Ár
);

326 
	gãm∂©e
 <
ty≥«me
 
	gT
>

327 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
öföôePî•e˘ive
(

328 
T
 
fovy
, T 
a•e˘
, T 
√¨
);

337 
	gãm∂©e
 <
ty≥«me
 
	gT
>

338 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
öföôePî•e˘iveLH
(

339 
T
 
fovy
, T 
a•e˘
, T 
√¨
);

348 
	gãm∂©e
 <
ty≥«me
 
	gT
>

349 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
öföôePî•e˘iveRH
(

350 
T
 
fovy
, T 
a•e˘
, T 
√¨
);

359 
	gãm∂©e
 <
ty≥«me
 
	gT
>

360 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
twókedInföôePî•e˘ive
(

361 
T
 
fovy
, T 
a•e˘
, T 
√¨
);

371 
	gãm∂©e
 <
ty≥«me
 
	gT
>

372 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
twókedInföôePî•e˘ive
(

373 
T
 
fovy
, T 
a•e˘
, T 
√¨
, T 
ï
);

385 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
>

386 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
¥oje˘
(

387 
tvec3
<
T
, 
P
> c⁄° & 
obj
,

388 
tm©4x4
<
T
, 
P
> c⁄° & 
modñ
,

389 
tm©4x4
<
T
, 
P
> c⁄° & 
¥oj
,

390 
tvec4
<
U
, 
P
> c⁄° & 
võwp‹t
);

402 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
>

403 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
unProje˘
(

404 
tvec3
<
T
, 
P
> c⁄° & 
wö
,

405 
tm©4x4
<
T
, 
P
> c⁄° & 
modñ
,

406 
tm©4x4
<
T
, 
P
> c⁄° & 
¥oj
,

407 
tvec4
<
U
, 
P
> c⁄° & 
võwp‹t
);

417 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åy≥«mê
	gU
>

418 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
pickM©rix
(

419 
tvec2
<
T
, 
P
> c⁄° & 
˚¡î
,

420 
tvec2
<
T
, 
P
> c⁄° & 
dñè
,

421 
tvec4
<
U
, 
P
> c⁄° & 
võwp‹t
);

430 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

431 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
lookAt
(

432 
tvec3
<
T
, 
P
> c⁄° & 
eye
,

433 
tvec3
<
T
, 
P
> c⁄° & 
˚¡î
,

434 
tvec3
<
T
, 
P
> c⁄° & 
up
);

443 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

444 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
lookAtRH
(

445 
tvec3
<
T
, 
P
> c⁄° & 
eye
,

446 
tvec3
<
T
, 
P
> c⁄° & 
˚¡î
,

447 
tvec3
<
T
, 
P
> c⁄° & 
up
);

456 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

457 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
lookAtLH
(

458 
tvec3
<
T
, 
P
> c⁄° & 
eye
,

459 
tvec3
<
T
, 
P
> c⁄° & 
˚¡î
,

460 
tvec3
<
T
, 
P
> c⁄° & 
up
);

465 
	~"m©rix_å™sf‹m.öl
"

	@glm/glm/gtc/noise.hpp

16 #¥agm®
⁄˚


19 
	~"../dëaû/£tup.hµ
"

20 
	~"../dëaû/¥ecisi⁄.hµ
"

21 
	~"../dëaû/_noi£.hµ
"

22 
	~"../geomëric.hµ
"

23 
	~"../comm⁄.hµ
"

24 
	~"../ve˘‹_ªœti⁄Æ.hµ
"

25 
	~"../vec2.hµ
"

26 
	~"../vec3.hµ
"

27 
	~"../vec4.hµ
"

29 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

30 #¥agm®
mesßge
("GLM: GLM_GTC_noiseÉxtension included")

33 
«me•a˚
 
	gglm


40 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©e<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

41 
GLM_FUNC_DECL
 
T
 
≥æö
(

42 
vecTy≥
<
T
, 
P
> c⁄° & 
p
);

46 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©e<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

47 
GLM_FUNC_DECL
 
T
 
≥æö
(

48 
vecTy≥
<
T
, 
P
> c⁄° & 
p
,

49 
vecTy≥
<
T
, 
P
> c⁄° & 
ªp
);

53 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©e<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

54 
GLM_FUNC_DECL
 
T
 
sim∂ex
(

55 
vecTy≥
<
T
, 
P
> c⁄° & 
p
);

60 
	~"noi£.öl
"

	@glm/glm/gtc/packing.hpp

14 #¥agm®
⁄˚


17 
	~"ty≥_¥ecisi⁄.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTC_packingÉxtension included")

23 
«me•a˚
 
	gglm


39 
GLM_FUNC_DECL
 
uöt8
 
∑ckUn‹m1x8
(
v
);

51 
GLM_FUNC_DECL
 
u≈ackUn‹m1x8
(
uöt8
 
p
);

67 
GLM_FUNC_DECL
 
uöt16
 
∑ckUn‹m2x8
(
vec2
 c⁄° & 
v
);

83 
GLM_FUNC_DECL
 
vec2
 
u≈ackUn‹m2x8
(
uöt16
 
p
);

96 
GLM_FUNC_DECL
 
uöt8
 
∑ckSn‹m1x8
(
s
);

109 
GLM_FUNC_DECL
 
u≈ackSn‹m1x8
(
uöt8
 
p
);

125 
GLM_FUNC_DECL
 
uöt16
 
∑ckSn‹m2x8
(
vec2
 c⁄° & 
v
);

141 
GLM_FUNC_DECL
 
vec2
 
u≈ackSn‹m2x8
(
uöt16
 
p
);

154 
GLM_FUNC_DECL
 
uöt16
 
∑ckUn‹m1x16
(
v
);

167 
GLM_FUNC_DECL
 
u≈ackUn‹m1x16
(
uöt16
 
p
);

183 
GLM_FUNC_DECL
 
uöt64
 
∑ckUn‹m4x16
(
vec4
 c⁄° & 
v
);

199 
GLM_FUNC_DECL
 
vec4
 
u≈ackUn‹m4x16
(
uöt64
 
p
);

212 
GLM_FUNC_DECL
 
uöt16
 
∑ckSn‹m1x16
(
v
);

225 
GLM_FUNC_DECL
 
u≈ackSn‹m1x16
(
uöt16
 
p
);

241 
GLM_FUNC_DECL
 
uöt64
 
∑ckSn‹m4x16
(
vec4
 c⁄° & 
v
);

257 
GLM_FUNC_DECL
 
vec4
 
u≈ackSn‹m4x16
(
uöt64
 
p
);

268 
GLM_FUNC_DECL
 
uöt16
 
∑ckHÆf1x16
(
v
);

279 
GLM_FUNC_DECL
 
u≈ackHÆf1x16
(
uöt16
 
v
);

292 
GLM_FUNC_DECL
 
uöt64
 
∑ckHÆf4x16
(
vec4
 c⁄° & 
v
);

305 
GLM_FUNC_DECL
 
vec4
 
u≈ackHÆf4x16
(
uöt64
 
p
);

318 
GLM_FUNC_DECL
 
uöt32
 
∑ckI3x10_1x2
(
ivec4
 c⁄° & 
v
);

329 
GLM_FUNC_DECL
 
ivec4
 
u≈ackI3x10_1x2
(
uöt32
 
p
);

342 
GLM_FUNC_DECL
 
uöt32
 
∑ckU3x10_1x2
(
uvec4
 c⁄° & 
v
);

353 
GLM_FUNC_DECL
 
uvec4
 
u≈ackU3x10_1x2
(
uöt32
 
p
);

371 
GLM_FUNC_DECL
 
uöt32
 
∑ckSn‹m3x10_1x2
(
vec4
 c⁄° & 
v
);

388 
GLM_FUNC_DECL
 
vec4
 
u≈ackSn‹m3x10_1x2
(
uöt32
 
p
);

406 
GLM_FUNC_DECL
 
uöt32
 
∑ckUn‹m3x10_1x2
(
vec4
 c⁄° & 
v
);

423 
GLM_FUNC_DECL
 
vec4
 
u≈ackUn‹m3x10_1x2
(
uöt32
 
p
);

434 
GLM_FUNC_DECL
 
uöt32
 
∑ckF2x11_1x10
(
vec3
 c⁄° & 
v
);

444 
GLM_FUNC_DECL
 
vec3
 
u≈ackF2x11_1x10
(
uöt32
 
p
);

456 
GLM_FUNC_DECL
 
uöt32
 
∑ckF3x9_E1x5
(
vec3
 c⁄° & 
v
);

466 
GLM_FUNC_DECL
 
vec3
 
u≈ackF3x9_E1x5
(
uöt32
 
p
);

476 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

477 
GLM_FUNC_DECL
 
	gvecTy≥
<
	guöt16
, 
	gP
> 
∑ckHÆf
(
vecTy≥
<, 
P
> c⁄° & 
v
);

486 
	gãm∂©e
 <
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

487 
GLM_FUNC_DECL
 
	gvecTy≥
<, 
	gP
> 
u≈ackHÆf
(
vecTy≥
<
uöt16
, 
P
> c⁄° & 
p
);

493 
	gãm∂©e
 <
ty≥«me
 
	guötTy≥
,Åy≥«mê
	gÊﬂtTy≥
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

494 
GLM_FUNC_DECL
 
	gvecTy≥
<
	guötTy≥
, 
	gP
> 
∑ckUn‹m
(
vecTy≥
<
ÊﬂtTy≥
, 
P
> c⁄° & 
v
);

500 
	gãm∂©e
 <
ty≥«me
 
	guötTy≥
,Åy≥«mê
	gÊﬂtTy≥
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

501 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gÊﬂtTy≥
, 
	gP
> 
u≈ackUn‹m
(
vecTy≥
<
uötTy≥
, 
P
> c⁄° & 
v
);

507 
	gãm∂©e
 <
ty≥«me
 
	götTy≥
,Åy≥«mê
	gÊﬂtTy≥
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

508 
GLM_FUNC_DECL
 
	gvecTy≥
<
	götTy≥
, 
	gP
> 
∑ckSn‹m
(
vecTy≥
<
ÊﬂtTy≥
, 
P
> c⁄° & 
v
);

514 
	gãm∂©e
 <
ty≥«me
 
	götTy≥
,Åy≥«mê
	gÊﬂtTy≥
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

515 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gÊﬂtTy≥
, 
	gP
> 
u≈ackSn‹m
(
vecTy≥
<
ötTy≥
, 
P
> c⁄° & 
v
);

521 
GLM_FUNC_DECL
 
uöt8
 
∑ckUn‹m2x4
(
vec2
 c⁄° & 
v
);

527 
GLM_FUNC_DECL
 
vec2
 
u≈ackUn‹m2x4
(
uöt8
 
p
);

533 
GLM_FUNC_DECL
 
uöt16
 
∑ckUn‹m4x4
(
vec4
 c⁄° & 
v
);

539 
GLM_FUNC_DECL
 
vec4
 
u≈ackUn‹m4x4
(
uöt16
 
p
);

545 
GLM_FUNC_DECL
 
uöt16
 
∑ckUn‹m1x5_1x6_1x5
(
vec3
 c⁄° & 
v
);

551 
GLM_FUNC_DECL
 
vec3
 
u≈ackUn‹m1x5_1x6_1x5
(
uöt16
 
p
);

557 
GLM_FUNC_DECL
 
uöt16
 
∑ckUn‹m3x5_1x1
(
vec4
 c⁄° & 
v
);

563 
GLM_FUNC_DECL
 
vec4
 
u≈ackUn‹m3x5_1x1
(
uöt16
 
p
);

569 
GLM_FUNC_DECL
 
uöt8
 
∑ckUn‹m2x3_1x2
(
vec3
 c⁄° & 
v
);

575 
GLM_FUNC_DECL
 
vec3
 
u≈ackUn‹m2x3_1x2
(
uöt8
 
p
);

579 
	~"∑ckög.öl
"

	@glm/glm/gtc/quaternion.hpp

15 #¥agm®
⁄˚


18 
	~"../m©3x3.hµ
"

19 
	~"../m©4x4.hµ
"

20 
	~"../vec3.hµ
"

21 
	~"../vec4.hµ
"

22 
	~"../gtc/c⁄°™ts.hµ
"

24 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

25 #¥agm®
mesßge
("GLM: GLM_GTC_quaternionÉxtension included")

28 
«me•a˚
 
	gglm


33 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

34 
	stqu©


38 
tqu©
<
	tT
, 
	tP
> 
	tty≥
;

39 
T
 
	tvÆue_ty≥
;

43 #i‡
GLM_HAS_ALIGNED_TYPE


44 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


45 #¥agm®
GCC
 
dügno°ic
 
push


46 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpedantic"

48 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


49 #¥agm®
˛™g
 
dügno°ic
 
push


50 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wgnu-anonymous-struct"

51 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wnested-anon-types"

56 °ru˘ { 
T
 
	gx
, 
	gy
, 
	gz
, 
	gw
;};

57 
ty≥«me
 
	gdëaû
::
°‹age
<
T
, (
	gT
Ë* 4, dëaû::
is_Æig√d
<
P
>::
vÆue
>::
ty≥
 
d©a
;

60 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_CLANG


61 #¥agm®
˛™g
 
dügno°ic
 
p›


63 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


64 #¥agm®
GCC
 
dügno°ic
 
p›


67 
T
 
	gx
, 
	gy
, 
	gz
, 
	gw
;

72 
Àngth_t
 
	tÀngth_ty≥
;

74 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 4;}

76 
GLM_FUNC_DECL
 
	gT
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

77 
GLM_FUNC_DECL
 
T
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

81 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tqu©
(Ë
	gGLM_DEFAULT_CTOR
;

82 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tqu©
—qu©<
T
, 
P
> c⁄° & 
q
Ë
	gGLM_DEFAULT
;

83 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

84 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tqu©
—qu©<
T
, 
Q
> c⁄° & 
q
);

88 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tqu©
(
˘‹
);

89 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tqu©
(
T
 c⁄° & 
s
, 
tvec3
<T, 
P
> c⁄° & 
v
);

90 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tqu©
(
T
 c⁄° & 
w
, T c⁄° & 
x
, T c⁄° & 
y
, T c⁄° & 
z
);

94 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

95 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
GLM_EXPLICIT
 
tqu©
—qu©<
U
, 
Q
> c⁄° & 
q
);

98 #i‡
GLM_HAS_EXPLICIT_CONVERSION_OPERATORS


99 
GLM_FUNC_DECL
 
ex∂icô
 
›î©‹
 
	gtm©3x3
<
	gT
, 
	gP
>();

100 
GLM_FUNC_DECL
 
ex∂icô
 
›î©‹
 
	gtm©4x4
<
	gT
, 
	gP
>();

109 
GLM_FUNC_DECL
 
tqu©
(
tvec3
<
T
, 
P
> c⁄° & 
u
,Åvec3<T, P> c⁄° & 
v
);

112 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tqu©
(
tvec3
<
T
, 
P
> c⁄° & 
euÀrAngÀs
);

113 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tqu©
(
tm©3x3
<
T
, 
P
> c⁄° & 
m
);

114 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tqu©
(
tm©4x4
<
T
, 
P
> c⁄° & 
m
);

118 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tqu©
<
T
, P> c⁄° & 
	gm
Ë
	gGLM_DEFAULT
;

120 
	gãm∂©e
 <
ty≥«me
 
	gU
>

121 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tqu©
<
U
, P> c⁄° & 
	gm
);

122 
	gãm∂©e
 <
ty≥«me
 
	gU
>

123 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> & 
	g›î©‹
+=(
tqu©
<
U
, P> c⁄° & 
	gq
);

124 
	gãm∂©e
 <
ty≥«me
 
	gU
>

125 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> & 
	g›î©‹
-=(
tqu©
<
U
, P> c⁄° & 
	gq
);

126 
	gãm∂©e
 <
ty≥«me
 
	gU
>

127 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
tqu©
<
U
, P> c⁄° & 
	gq
);

128 
	gãm∂©e
 <
ty≥«me
 
	gU
>

129 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
s
);

130 
	gãm∂©e
 <
ty≥«me
 
	gU
>

131 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
s
);

136 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

137 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
	g›î©‹
+—qu©<T, P> c⁄° & 
	gq
);

139 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

140 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
	g›î©‹
-—qu©<T, P> c⁄° & 
	gq
);

144 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

145 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
	g›î©‹
+—qu©<T, P> c⁄° & 
	gq
,Åqu©<T, P> c⁄° & 
	gp
);

147 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

148 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
	g›î©‹
*—qu©<T, P> c⁄° & 
	gq
,Åqu©<T, P> c⁄° & 
	gp
);

150 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

151 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtqu©
<T, P> c⁄° & 
	gq
,Åvec3<T, P> c⁄° & 
	gv
);

153 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

154 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
*—vec3<T, P> c⁄° & 
	gv
, 
	gtqu©
<T, P> c⁄° & 
	gq
);

156 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

157 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtqu©
<T, P> c⁄° & 
	gq
,Åvec4<T, P> c⁄° & 
	gv
);

159 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

160 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
*—vec4<T, P> c⁄° & 
	gv
, 
	gtqu©
<T, P> c⁄° & 
	gq
);

162 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

163 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
	g›î©‹
*—qu©<T, P> c⁄° & 
	gq
, 
T
 c⁄° & 
	gs
);

165 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

166 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 c⁄° & 
	gs
,Åqu©<T, P> c⁄° & 
	gq
);

168 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

169 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
	g›î©‹
/—qu©<T, P> c⁄° & 
	gq
, 
T
 c⁄° & 
	gs
);

173 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

174 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tqu©
<
T
, 
	gP
> c⁄° & 
	gq1
, 
	gtqu©
<
	gT
, P> c⁄° & 
	gq2
);

176 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

177 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tqu©
<
T
, 
	gP
> c⁄° & 
	gq1
, 
	gtqu©
<
	gT
, P> c⁄° & 
	gq2
);

182 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

183 
GLM_FUNC_DECL
 
T
 
Àngth
(
tqu©
<T, 
P
> c⁄° & 
q
);

188 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

189 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
n‹mÆize
(
tqu©
<
T
, 
P
> c⁄° & 
q
);

194 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gqu©Ty≥
>

195 
GLM_FUNC_DECL
 
T
 
dŸ
(
qu©Ty≥
<T, 
P
> c⁄° & 
x
, qu©Ty≥<T, P> c⁄° & 
y
);

207 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

208 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
mix
(
tqu©
<
T
, 
P
> c⁄° & 
x
,Åqu©<T, P> c⁄° & 
y
, T 
a
);

218 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

219 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
ÀΩ
(
tqu©
<
T
, 
P
> c⁄° & 
x
,Åqu©<T, P> c⁄° & 
y
, T 
a
);

229 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

230 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
¶îp
(
tqu©
<
T
, 
P
> c⁄° & 
x
,Åqu©<T, P> c⁄° & 
y
, T 
a
);

235 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

236 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
c⁄jug©e
(
tqu©
<
T
, 
P
> c⁄° & 
q
);

241 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

242 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
övî£
(
tqu©
<
T
, 
P
> c⁄° & 
q
);

251 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

252 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
rŸ©e
(
tqu©
<
T
, 
P
> c⁄° & 
q
, T c⁄° & 
™gÀ
, 
tvec3
<T, P> c⁄° & 
axis
);

258 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

259 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
euÀrAngÀs
(
tqu©
<
T
, 
P
> c⁄° & 
x
);

264 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

265 
GLM_FUNC_DECL
 
T
 
rﬁl
(
tqu©
<T, 
P
> c⁄° & 
x
);

270 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

271 
GLM_FUNC_DECL
 
T
 
pôch
(
tqu©
<T, 
P
> c⁄° & 
x
);

276 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

277 
GLM_FUNC_DECL
 
T
 
yaw
(
tqu©
<T, 
P
> c⁄° & 
x
);

282 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

283 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
m©3_ˇ°
(
tqu©
<
T
, 
P
> c⁄° & 
x
);

288 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

289 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
m©4_ˇ°
(
tqu©
<
T
, 
P
> c⁄° & 
x
);

294 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

295 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
qu©_ˇ°
(
tm©3x3
<
T
, 
P
> c⁄° & 
x
);

300 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

301 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
qu©_ˇ°
(
tm©4x4
<
T
, 
P
> c⁄° & 
x
);

306 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

307 
GLM_FUNC_DECL
 
T
 
™gÀ
(
tqu©
<T, 
P
> c⁄° & 
x
);

312 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

313 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
axis
(
tqu©
<
T
, 
P
> c⁄° & 
x
);

321 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

322 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
™gÀAxis
(
T
 c⁄° & 
™gÀ
, 
tvec3
<T, 
P
> c⁄° & 
axis
);

329 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

330 
GLM_FUNC_DECL
 
	gtvec4
<
	gboﬁ
, 
	gP
> 
ÀssTh™
(
tqu©
<
T
, 
P
> c⁄° & 
x
,Åqu©<T, P> c⁄° & 
y
);

337 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

338 
GLM_FUNC_DECL
 
	gtvec4
<
	gboﬁ
, 
	gP
> 
ÀssTh™EquÆ
(
tqu©
<
T
, 
P
> c⁄° & 
x
,Åqu©<T, P> c⁄° & 
y
);

345 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

346 
GLM_FUNC_DECL
 
	gtvec4
<
	gboﬁ
, 
	gP
> 
gª©îTh™
(
tqu©
<
T
, 
P
> c⁄° & 
x
,Åqu©<T, P> c⁄° & 
y
);

353 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

354 
GLM_FUNC_DECL
 
	gtvec4
<
	gboﬁ
, 
	gP
> 
gª©îTh™EquÆ
(
tqu©
<
T
, 
P
> c⁄° & 
x
,Åqu©<T, P> c⁄° & 
y
);

361 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

362 
GLM_FUNC_DECL
 
	gtvec4
<
	gboﬁ
, 
	gP
> 
equÆ
(
tqu©
<
T
, 
P
> c⁄° & 
x
,Åqu©<T, P> c⁄° & 
y
);

369 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

370 
GLM_FUNC_DECL
 
	gtvec4
<
	gboﬁ
, 
	gP
> 
nŸEquÆ
(
tqu©
<
T
, 
P
> c⁄° & 
x
,Åqu©<T, P> c⁄° & 
y
);

381 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

382 
GLM_FUNC_DECL
 
	gtvec4
<
	gboﬁ
, 
	gP
> 
i¢™
(
tqu©
<
T
, 
P
> c⁄° & 
x
);

391 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

392 
GLM_FUNC_DECL
 
	gtvec4
<
	gboﬁ
, 
	gP
> 
isöf
(
tqu©
<
T
, 
P
> c⁄° & 
x
);

397 
	~"qu©îni⁄.öl
"

	@glm/glm/gtc/random.hpp

15 #¥agm®
⁄˚


18 
	~"../vec2.hµ
"

19 
	~"../vec3.hµ
"

21 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

22 #¥agm®
mesßge
("GLM: GLM_GTC_randomÉxtension included")

25 
«me•a˚
 
	gglm


36 
	gãm∂©e
 <
ty≥«me
 
	ggíTY≥
>

37 
GLM_FUNC_DECL
 
gíTY≥
 
löórR™d
(

38 
gíTY≥
 
Mö
,

39 
gíTY≥
 
Max
);

48 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

49 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
löórR™d
(

50 
vecTy≥
<
T
, 
P
> c⁄° & 
Mö
,

51 
vecTy≥
<
T
, 
P
> c⁄° & 
Max
);

58 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

59 
GLM_FUNC_DECL
 
gíTy≥
 
gaussR™d
(

60 
gíTy≥
 
Món
,

61 
gíTy≥
 
Devüti⁄
);

67 
	gãm∂©e
 <
ty≥«me
 
	gT
>

68 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gdeÁu…p
> 
cúcuœrR™d
(

69 
T
 
Radius
);

75 
	gãm∂©e
 <
ty≥«me
 
	gT
>

76 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gdeÁu…p
> 
•hîiˇlR™d
(

77 
T
 
Radius
);

83 
	gãm∂©e
 <
ty≥«me
 
	gT
>

84 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gdeÁu…p
> 
diskR™d
(

85 
T
 
Radius
);

91 
	gãm∂©e
 <
ty≥«me
 
	gT
>

92 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gdeÁu…p
> 
bÆlR™d
(

93 
T
 
Radius
);

98 
	~"øndom.öl
"

	@glm/glm/gtc/reciprocal.hpp

13 #¥agm®
⁄˚


16 
	~"../dëaû/£tup.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTC_reciprocalÉxtension included")

22 
«me•a˚
 
	gglm


33 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

34 
GLM_FUNC_DECL
 
gíTy≥
 
£c
(gíTy≥ 
™gÀ
);

42 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

43 
GLM_FUNC_DECL
 
gíTy≥
 
csc
(gíTy≥ 
™gÀ
);

51 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

52 
GLM_FUNC_DECL
 
gíTy≥
 
cŸ
(gíTy≥ 
™gÀ
);

60 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

61 
GLM_FUNC_DECL
 
gíTy≥
 
a£c
(gíTy≥ 
x
);

69 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

70 
GLM_FUNC_DECL
 
gíTy≥
 
acsc
(gíTy≥ 
x
);

78 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

79 
GLM_FUNC_DECL
 
gíTy≥
 
acŸ
(gíTy≥ 
x
);

86 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

87 
GLM_FUNC_DECL
 
gíTy≥
 
£ch
(gíTy≥ 
™gÀ
);

94 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

95 
GLM_FUNC_DECL
 
gíTy≥
 
csch
(gíTy≥ 
™gÀ
);

102 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

103 
GLM_FUNC_DECL
 
gíTy≥
 
cŸh
(gíTy≥ 
™gÀ
);

111 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

112 
GLM_FUNC_DECL
 
gíTy≥
 
a£ch
(gíTy≥ 
x
);

120 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

121 
GLM_FUNC_DECL
 
gíTy≥
 
acsch
(gíTy≥ 
x
);

129 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

130 
GLM_FUNC_DECL
 
gíTy≥
 
acŸh
(gíTy≥ 
x
);

135 
	~"ªcùroˇl.öl
"

	@glm/glm/gtc/round.hpp

14 #¥agm®
⁄˚


17 
	~"../dëaû/£tup.hµ
"

18 
	~"../dëaû/¥ecisi⁄.hµ
"

19 
	~"../dëaû/_ve˘‹ize.hµ
"

20 
	~"../ve˘‹_ªœti⁄Æ.hµ
"

21 
	~"../comm⁄.hµ
"

22 
	~<limôs
>

24 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

25 #¥agm®
mesßge
("GLM: GLM_GTC_integerÉxtension included")

28 
«me•a˚
 
	gglm


36 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

37 
GLM_FUNC_DECL
 
boﬁ
 
isPowîOfTwo
(
gíIUTy≥
 
VÆue
);

42 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

43 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
isPowîOfTwo
(
vecTy≥
<
T
, 
P
> c⁄° & 
vÆue
);

49 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

50 
GLM_FUNC_DECL
 
gíIUTy≥
 
˚ûPowîOfTwo
(gíIUTy≥ 
VÆue
);

56 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

57 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
˚ûPowîOfTwo
(
vecTy≥
<
T
, 
P
> c⁄° & 
vÆue
);

63 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

64 
GLM_FUNC_DECL
 
gíIUTy≥
 
Êo‹PowîOfTwo
(gíIUTy≥ 
VÆue
);

70 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

71 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
Êo‹PowîOfTwo
(
vecTy≥
<
T
, 
P
> c⁄° & 
vÆue
);

76 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

77 
GLM_FUNC_DECL
 
gíIUTy≥
 
roundPowîOfTwo
(gíIUTy≥ 
VÆue
);

82 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

83 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
roundPowîOfTwo
(
vecTy≥
<
T
, 
P
> c⁄° & 
vÆue
);

88 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

89 
GLM_FUNC_DECL
 
boﬁ
 
isMu…ùÀ
(
gíIUTy≥
 
VÆue
, gíIUTy≥ 
Mu…ùÀ
);

94 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

95 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
isMu…ùÀ
(
vecTy≥
<
T
, 
P
> c⁄° & 
VÆue
, T 
Mu…ùÀ
);

100 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

101 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
isMu…ùÀ
(
vecTy≥
<
T
, 
P
> c⁄° & 
VÆue
, vecTy≥<T, P> c⁄° & 
Mu…ùÀ
);

110 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

111 
GLM_FUNC_DECL
 
gíTy≥
 
˚ûMu…ùÀ
(gíTy≥ 
Sour˚
, gíTy≥ 
Mu…ùÀ
);

120 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

121 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
˚ûMu…ùÀ
(
vecTy≥
<
T
, 
P
> c⁄° & 
Sour˚
, vecTy≥<T, P> c⁄° & 
Mu…ùÀ
);

130 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

131 
GLM_FUNC_DECL
 
gíTy≥
 
Êo‹Mu…ùÀ
(

132 
gíTy≥
 
Sour˚
,

133 
gíTy≥
 
Mu…ùÀ
);

142 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

143 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
Êo‹Mu…ùÀ
(

144 
vecTy≥
<
T
, 
P
> c⁄° & 
Sour˚
,

145 
vecTy≥
<
T
, 
P
> c⁄° & 
Mu…ùÀ
);

154 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

155 
GLM_FUNC_DECL
 
gíTy≥
 
roundMu…ùÀ
(

156 
gíTy≥
 
Sour˚
,

157 
gíTy≥
 
Mu…ùÀ
);

166 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

167 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
roundMu…ùÀ
(

168 
vecTy≥
<
T
, 
P
> c⁄° & 
Sour˚
,

169 
vecTy≥
<
T
, 
P
> c⁄° & 
Mu…ùÀ
);

174 
	~"round.öl
"

	@glm/glm/gtc/type_aligned.hpp

12 #¥agm®
⁄˚


14 #i‡!
GLM_HAS_ALIGNED_TYPE


17 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

18 #¥agm®
mesßge
("GLM: GLM_GTC_type_alignedÉxtension included")

21 
	~"../vec2.hµ
"

22 
	~"../vec3.hµ
"

23 
	~"../vec4.hµ
"

24 
	~"../gtc/vec1.hµ
"

26 
«me•a˚
 
	gglm


28 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtvec1
;

29 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtvec2
;

30 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtvec3
;

31 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
	gtvec4
;

37 
	gtvec1
<, 
	tÆig√d_highp
> 
	tÆig√d_highp_vec1
;

38 
	gtvec1
<, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_vec1
;

39 
	gtvec1
<, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_vec1
;

40 
	gtvec1
<, 
	tÆig√d_highp
> 
	tÆig√d_highp_dvec1
;

41 
	gtvec1
<, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_dvec1
;

42 
	gtvec1
<, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_dvec1
;

43 
	gtvec1
<, 
	tÆig√d_highp
> 
	tÆig√d_highp_ivec1
;

44 
	gtvec1
<, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_ivec1
;

45 
	gtvec1
<, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_ivec1
;

46 
	gtvec1
<
	tuöt
, 
	tÆig√d_highp
> 
	tÆig√d_highp_uvec1
;

47 
	gtvec1
<
	tuöt
, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_uvec1
;

48 
	gtvec1
<
	tuöt
, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_uvec1
;

49 
	gtvec1
<
	tboﬁ
, 
	tÆig√d_highp
> 
	tÆig√d_highp_bvec1
;

50 
	gtvec1
<
	tboﬁ
, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_bvec1
;

51 
	gtvec1
<
	tboﬁ
, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_bvec1
;

53 
	gtvec1
<, 
	t∑cked_highp
> 
	t∑cked_highp_vec1
;

54 
	gtvec1
<, 
	t∑cked_mediump
> 
	t∑cked_mediump_vec1
;

55 
	gtvec1
<, 
	t∑cked_lowp
> 
	t∑cked_lowp_vec1
;

56 
	gtvec1
<, 
	t∑cked_highp
> 
	t∑cked_highp_dvec1
;

57 
	gtvec1
<, 
	t∑cked_mediump
> 
	t∑cked_mediump_dvec1
;

58 
	gtvec1
<, 
	t∑cked_lowp
> 
	t∑cked_lowp_dvec1
;

59 
	gtvec1
<, 
	t∑cked_highp
> 
	t∑cked_highp_ivec1
;

60 
	gtvec1
<, 
	t∑cked_mediump
> 
	t∑cked_mediump_ivec1
;

61 
	gtvec1
<, 
	t∑cked_lowp
> 
	t∑cked_lowp_ivec1
;

62 
	gtvec1
<
	tuöt
, 
	t∑cked_highp
> 
	t∑cked_highp_uvec1
;

63 
	gtvec1
<
	tuöt
, 
	t∑cked_mediump
> 
	t∑cked_mediump_uvec1
;

64 
	gtvec1
<
	tuöt
, 
	t∑cked_lowp
> 
	t∑cked_lowp_uvec1
;

65 
	gtvec1
<
	tboﬁ
, 
	t∑cked_highp
> 
	t∑cked_highp_bvec1
;

66 
	gtvec1
<
	tboﬁ
, 
	t∑cked_mediump
> 
	t∑cked_mediump_bvec1
;

67 
	gtvec1
<
	tboﬁ
, 
	t∑cked_lowp
> 
	t∑cked_lowp_bvec1
;

73 
	gtvec2
<, 
	tÆig√d_highp
> 
	tÆig√d_highp_vec2
;

77 
	gtvec2
<, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_vec2
;

81 
	gtvec2
<, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_vec2
;

85 
	gtvec2
<, 
	tÆig√d_highp
> 
	tÆig√d_highp_dvec2
;

89 
	gtvec2
<, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_dvec2
;

93 
	gtvec2
<, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_dvec2
;

97 
	gtvec2
<, 
	tÆig√d_highp
> 
	tÆig√d_highp_ivec2
;

101 
	gtvec2
<, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_ivec2
;

105 
	gtvec2
<, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_ivec2
;

109 
	gtvec2
<
	tuöt
, 
	tÆig√d_highp
> 
	tÆig√d_highp_uvec2
;

113 
	gtvec2
<
	tuöt
, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_uvec2
;

117 
	gtvec2
<
	tuöt
, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_uvec2
;

121 
	gtvec2
<
	tboﬁ
, 
	tÆig√d_highp
> 
	tÆig√d_highp_bvec2
;

125 
	gtvec2
<
	tboﬁ
, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_bvec2
;

129 
	gtvec2
<
	tboﬁ
, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_bvec2
;

135 
	gtvec3
<, 
	tÆig√d_highp
> 
	tÆig√d_highp_vec3
;

139 
	gtvec3
<, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_vec3
;

143 
	gtvec3
<, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_vec3
;

147 
	gtvec3
<, 
	tÆig√d_highp
> 
	tÆig√d_highp_dvec3
;

151 
	gtvec3
<, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_dvec3
;

155 
	gtvec3
<, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_dvec3
;

159 
	gtvec3
<, 
	tÆig√d_highp
> 
	tÆig√d_highp_ivec3
;

163 
	gtvec3
<, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_ivec3
;

167 
	gtvec3
<, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_ivec3
;

171 
	gtvec3
<
	tuöt
, 
	tÆig√d_highp
> 
	tÆig√d_highp_uvec3
;

175 
	gtvec3
<
	tuöt
, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_uvec3
;

179 
	gtvec3
<
	tuöt
, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_uvec3
;

182 
	gtvec3
<
	tboﬁ
, 
	tÆig√d_highp
> 
	tÆig√d_highp_bvec3
;

185 
	gtvec3
<
	tboﬁ
, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_bvec3
;

188 
	gtvec3
<
	tboﬁ
, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_bvec3
;

193 
	gtvec4
<, 
	tÆig√d_highp
> 
	tÆig√d_highp_vec4
;

196 
	gtvec4
<, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_vec4
;

199 
	gtvec4
<, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_vec4
;

202 
	gtvec4
<, 
	tÆig√d_highp
> 
	tÆig√d_highp_dvec4
;

205 
	gtvec4
<, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_dvec4
;

208 
	gtvec4
<, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_dvec4
;

211 
	gtvec4
<, 
	tÆig√d_highp
> 
	tÆig√d_highp_ivec4
;

214 
	gtvec4
<, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_ivec4
;

217 
	gtvec4
<, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_ivec4
;

220 
	gtvec4
<
	tuöt
, 
	tÆig√d_highp
> 
	tÆig√d_highp_uvec4
;

223 
	gtvec4
<
	tuöt
, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_uvec4
;

226 
	gtvec4
<
	tuöt
, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_uvec4
;

229 
	gtvec4
<
	tboﬁ
, 
	tÆig√d_highp
> 
	tÆig√d_highp_bvec4
;

232 
	gtvec4
<
	tboﬁ
, 
	tÆig√d_mediump
> 
	tÆig√d_mediump_bvec4
;

235 
	gtvec4
<
	tboﬁ
, 
	tÆig√d_lowp
> 
	tÆig√d_lowp_bvec4
;

239 #if(
deföed
(
GLM_PRECISION_LOWP_FLOAT
))

240 
Æig√d_lowp_vec1
 
	tÆig√d_vec1
;

241 
Æig√d_lowp_vec2
 
	tÆig√d_vec2
;

242 
Æig√d_lowp_vec3
 
	tÆig√d_vec3
;

243 
Æig√d_lowp_vec4
 
	tÆig√d_vec4
;

244 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_FLOAT
))

245 
Æig√d_mediump_vec1
 
	tÆig√d_vec1
;

246 
Æig√d_mediump_vec2
 
	tÆig√d_vec2
;

247 
Æig√d_mediump_vec3
 
	tÆig√d_vec3
;

248 
Æig√d_mediump_vec4
 
	tÆig√d_vec4
;

251 
Æig√d_highp_vec1
 
	tÆig√d_vec1
;

254 
Æig√d_highp_vec2
 
	tÆig√d_vec2
;

257 
Æig√d_highp_vec3
 
	tÆig√d_vec3
;

260 
Æig√d_highp_vec4
 
	tÆig√d_vec4
;

263 #if(
deföed
(
GLM_PRECISION_LOWP_DOUBLE
))

264 
Æig√d_lowp_dvec1
 
	tÆig√d_dvec1
;

265 
Æig√d_lowp_dvec2
 
	tÆig√d_dvec2
;

266 
Æig√d_lowp_dvec3
 
	tÆig√d_dvec3
;

267 
Æig√d_lowp_dvec4
 
	tÆig√d_dvec4
;

268 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_DOUBLE
))

269 
Æig√d_mediump_dvec1
 
	tÆig√d_dvec1
;

270 
Æig√d_mediump_dvec2
 
	tÆig√d_dvec2
;

271 
Æig√d_mediump_dvec3
 
	tÆig√d_dvec3
;

272 
Æig√d_mediump_dvec4
 
	tÆig√d_dvec4
;

275 
Æig√d_highp_dvec1
 
	tÆig√d_dvec1
;

278 
Æig√d_highp_dvec2
 
	tÆig√d_dvec2
;

281 
Æig√d_highp_dvec3
 
	tÆig√d_dvec3
;

284 
Æig√d_highp_dvec4
 
	tÆig√d_dvec4
;

287 #if(
deföed
(
GLM_PRECISION_LOWP_INT
))

288 
Æig√d_lowp_ivec1
 
	tÆig√d_ivec1
;

289 
Æig√d_lowp_ivec2
 
	tÆig√d_ivec2
;

290 
Æig√d_lowp_ivec3
 
	tÆig√d_ivec3
;

291 
Æig√d_lowp_ivec4
 
	tÆig√d_ivec4
;

292 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_INT
))

293 
Æig√d_mediump_ivec1
 
	tÆig√d_ivec1
;

294 
Æig√d_mediump_ivec2
 
	tÆig√d_ivec2
;

295 
Æig√d_mediump_ivec3
 
	tÆig√d_ivec3
;

296 
Æig√d_mediump_ivec4
 
	tÆig√d_ivec4
;

299 
Æig√d_highp_ivec1
 
	tÆig√d_ivec1
;

302 
Æig√d_highp_ivec2
 
	tÆig√d_ivec2
;

305 
Æig√d_highp_ivec3
 
	tÆig√d_ivec3
;

308 
Æig√d_highp_ivec4
 
	tÆig√d_ivec4
;

313 #if(
deföed
(
GLM_PRECISION_LOWP_UINT
))

314 
Æig√d_lowp_uvec1
 
	tÆig√d_uvec1
;

315 
Æig√d_lowp_uvec2
 
	tÆig√d_uvec2
;

316 
Æig√d_lowp_uvec3
 
	tÆig√d_uvec3
;

317 
Æig√d_lowp_uvec4
 
	tÆig√d_uvec4
;

318 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_UINT
))

319 
Æig√d_mediump_uvec1
 
	tÆig√d_uvec1
;

320 
Æig√d_mediump_uvec2
 
	tÆig√d_uvec2
;

321 
Æig√d_mediump_uvec3
 
	tÆig√d_uvec3
;

322 
Æig√d_mediump_uvec4
 
	tÆig√d_uvec4
;

325 
Æig√d_highp_uvec1
 
	tÆig√d_uvec1
;

328 
Æig√d_highp_uvec2
 
	tÆig√d_uvec2
;

331 
Æig√d_highp_uvec3
 
	tÆig√d_uvec3
;

334 
Æig√d_highp_uvec4
 
	tÆig√d_uvec4
;

337 #if(
deföed
(
GLM_PRECISION_LOWP_BOOL
))

338 
Æig√d_lowp_bvec1
 
	tÆig√d_bvec1
;

339 
Æig√d_lowp_bvec2
 
	tÆig√d_bvec2
;

340 
Æig√d_lowp_bvec3
 
	tÆig√d_bvec3
;

341 
Æig√d_lowp_bvec4
 
	tÆig√d_bvec4
;

342 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_BOOL
))

343 
Æig√d_mediump_bvec1
 
	tÆig√d_bvec1
;

344 
Æig√d_mediump_bvec2
 
	tÆig√d_bvec2
;

345 
Æig√d_mediump_bvec3
 
	tÆig√d_bvec3
;

346 
Æig√d_mediump_bvec4
 
	tÆig√d_bvec4
;

349 
Æig√d_highp_bvec1
 
	tÆig√d_bvec1
;

352 
Æig√d_highp_bvec2
 
	tÆig√d_bvec2
;

355 
Æig√d_highp_bvec3
 
	tÆig√d_bvec3
;

358 
Æig√d_highp_bvec4
 
	tÆig√d_bvec4
;

	@glm/glm/gtc/type_precision.hpp

18 #¥agm®
⁄˚


21 
	~"../gtc/qu©îni⁄.hµ
"

22 
	~"../gtc/vec1.hµ
"

23 
	~"../vec2.hµ
"

24 
	~"../vec3.hµ
"

25 
	~"../vec4.hµ
"

26 
	~"../m©2x2.hµ
"

27 
	~"../m©2x3.hµ
"

28 
	~"../m©2x4.hµ
"

29 
	~"../m©3x2.hµ
"

30 
	~"../m©3x3.hµ
"

31 
	~"../m©3x4.hµ
"

32 
	~"../m©4x2.hµ
"

33 
	~"../m©4x3.hµ
"

34 
	~"../m©4x4.hµ
"

36 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

37 #¥agm®
mesßge
("GLM: GLM_GTC_type_precisionÉxtension included")

40 
«me•a˚
 
	gglm


50 
	gdëaû
::
	töt8
 
	tlowp_öt8
;

54 
	gdëaû
::
	töt16
 
	tlowp_öt16
;

58 
	gdëaû
::
	töt32
 
	tlowp_öt32
;

62 
	gdëaû
::
	töt64
 
	tlowp_öt64
;

66 
	gdëaû
::
	töt8
 
	tlowp_öt8_t
;

70 
	gdëaû
::
	töt16
 
	tlowp_öt16_t
;

74 
	gdëaû
::
	töt32
 
	tlowp_öt32_t
;

78 
	gdëaû
::
	töt64
 
	tlowp_öt64_t
;

82 
	gdëaû
::
	töt8
 
	tlowp_i8
;

86 
	gdëaû
::
	töt16
 
	tlowp_i16
;

90 
	gdëaû
::
	töt32
 
	tlowp_i32
;

94 
	gdëaû
::
	töt64
 
	tlowp_i64
;

98 
	gdëaû
::
	töt8
 
	tmediump_öt8
;

102 
	gdëaû
::
	töt16
 
	tmediump_öt16
;

106 
	gdëaû
::
	töt32
 
	tmediump_öt32
;

110 
	gdëaû
::
	töt64
 
	tmediump_öt64
;

114 
	gdëaû
::
	töt8
 
	tmediump_öt8_t
;

118 
	gdëaû
::
	töt16
 
	tmediump_öt16_t
;

122 
	gdëaû
::
	töt32
 
	tmediump_öt32_t
;

126 
	gdëaû
::
	töt64
 
	tmediump_öt64_t
;

130 
	gdëaû
::
	töt8
 
	tmediump_i8
;

134 
	gdëaû
::
	töt16
 
	tmediump_i16
;

138 
	gdëaû
::
	töt32
 
	tmediump_i32
;

142 
	gdëaû
::
	töt64
 
	tmediump_i64
;

146 
	gdëaû
::
	töt8
 
	thighp_öt8
;

150 
	gdëaû
::
	töt16
 
	thighp_öt16
;

154 
	gdëaû
::
	töt32
 
	thighp_öt32
;

158 
	gdëaû
::
	töt64
 
	thighp_öt64
;

162 
	gdëaû
::
	töt8
 
	thighp_öt8_t
;

166 
	gdëaû
::
	töt16
 
	thighp_öt16_t
;

170 
	gdëaû
::
	töt32
 
	thighp_öt32_t
;

174 
	gdëaû
::
	töt64
 
	thighp_öt64_t
;

178 
	gdëaû
::
	töt8
 
	thighp_i8
;

182 
	gdëaû
::
	töt16
 
	thighp_i16
;

186 
	gdëaû
::
	töt32
 
	thighp_i32
;

190 
	gdëaû
::
	töt64
 
	thighp_i64
;

195 
	gdëaû
::
	töt8
 int8;

199 
	gdëaû
::
	töt16
 int16;

203 
	gdëaû
::
	töt32
 int32;

207 
	gdëaû
::
	töt64
 int64;

209 #i‡
GLM_HAS_EXTENDED_INTEGER_TYPE


210 
usög
 
	g°d
::
öt8_t
;

211 
usög
 
	g°d
::
öt16_t
;

212 
usög
 
	g°d
::
öt32_t
;

213 
usög
 
	g°d
::
öt64_t
;

217 
	gdëaû
::
	töt8
 
	töt8_t
;

221 
	gdëaû
::
	töt16
 
	töt16_t
;

225 
	gdëaû
::
	töt32
 
	töt32_t
;

229 
	gdëaû
::
	töt64
 
	töt64_t
;

234 
	gdëaû
::
	töt8
 
	ti8
;

238 
	gdëaû
::
	töt16
 
	ti16
;

242 
	gdëaû
::
	töt32
 
	ti32
;

246 
	gdëaû
::
	töt64
 
	ti64
;

251 
	gtvec1
<
	ti8
, 
	tdeÁu…p
> 
	ti8vec1
;

255 
	gtvec2
<
	ti8
, 
	tdeÁu…p
> 
	ti8vec2
;

259 
	gtvec3
<
	ti8
, 
	tdeÁu…p
> 
	ti8vec3
;

263 
	gtvec4
<
	ti8
, 
	tdeÁu…p
> 
	ti8vec4
;

268 
	gtvec1
<
	ti16
, 
	tdeÁu…p
> 
	ti16vec1
;

272 
	gtvec2
<
	ti16
, 
	tdeÁu…p
> 
	ti16vec2
;

276 
	gtvec3
<
	ti16
, 
	tdeÁu…p
> 
	ti16vec3
;

280 
	gtvec4
<
	ti16
, 
	tdeÁu…p
> 
	ti16vec4
;

285 
	gtvec1
<
	ti32
, 
	tdeÁu…p
> 
	ti32vec1
;

289 
	gtvec2
<
	ti32
, 
	tdeÁu…p
> 
	ti32vec2
;

293 
	gtvec3
<
	ti32
, 
	tdeÁu…p
> 
	ti32vec3
;

297 
	gtvec4
<
	ti32
, 
	tdeÁu…p
> 
	ti32vec4
;

302 
	gtvec1
<
	ti64
, 
	tdeÁu…p
> 
	ti64vec1
;

306 
	gtvec2
<
	ti64
, 
	tdeÁu…p
> 
	ti64vec2
;

310 
	gtvec3
<
	ti64
, 
	tdeÁu…p
> 
	ti64vec3
;

314 
	gtvec4
<
	ti64
, 
	tdeÁu…p
> 
	ti64vec4
;

322 
	gdëaû
::
	tuöt8
 
	tlowp_uöt8
;

326 
	gdëaû
::
	tuöt16
 
	tlowp_uöt16
;

330 
	gdëaû
::
	tuöt32
 
	tlowp_uöt32
;

334 
	gdëaû
::
	tuöt64
 
	tlowp_uöt64
;

338 
	gdëaû
::
	tuöt8
 
	tlowp_uöt8_t
;

342 
	gdëaû
::
	tuöt16
 
	tlowp_uöt16_t
;

346 
	gdëaû
::
	tuöt32
 
	tlowp_uöt32_t
;

350 
	gdëaû
::
	tuöt64
 
	tlowp_uöt64_t
;

354 
	gdëaû
::
	tuöt8
 
	tlowp_u8
;

358 
	gdëaû
::
	tuöt16
 
	tlowp_u16
;

362 
	gdëaû
::
	tuöt32
 
	tlowp_u32
;

366 
	gdëaû
::
	tuöt64
 
	tlowp_u64
;

370 
	gdëaû
::
	tuöt8
 
	tmediump_uöt8
;

374 
	gdëaû
::
	tuöt16
 
	tmediump_uöt16
;

378 
	gdëaû
::
	tuöt32
 
	tmediump_uöt32
;

382 
	gdëaû
::
	tuöt64
 
	tmediump_uöt64
;

386 
	gdëaû
::
	tuöt8
 
	tmediump_uöt8_t
;

390 
	gdëaû
::
	tuöt16
 
	tmediump_uöt16_t
;

394 
	gdëaû
::
	tuöt32
 
	tmediump_uöt32_t
;

398 
	gdëaû
::
	tuöt64
 
	tmediump_uöt64_t
;

402 
	gdëaû
::
	tuöt8
 
	tmediump_u8
;

406 
	gdëaû
::
	tuöt16
 
	tmediump_u16
;

410 
	gdëaû
::
	tuöt32
 
	tmediump_u32
;

414 
	gdëaû
::
	tuöt64
 
	tmediump_u64
;

418 
	gdëaû
::
	tuöt8
 
	thighp_uöt8
;

422 
	gdëaû
::
	tuöt16
 
	thighp_uöt16
;

426 
	gdëaû
::
	tuöt32
 
	thighp_uöt32
;

430 
	gdëaû
::
	tuöt64
 
	thighp_uöt64
;

434 
	gdëaû
::
	tuöt8
 
	thighp_uöt8_t
;

438 
	gdëaû
::
	tuöt16
 
	thighp_uöt16_t
;

442 
	gdëaû
::
	tuöt32
 
	thighp_uöt32_t
;

446 
	gdëaû
::
	tuöt64
 
	thighp_uöt64_t
;

450 
	gdëaû
::
	tuöt8
 
	thighp_u8
;

454 
	gdëaû
::
	tuöt16
 
	thighp_u16
;

458 
	gdëaû
::
	tuöt32
 
	thighp_u32
;

462 
	gdëaû
::
	tuöt64
 
	thighp_u64
;

466 
	gdëaû
::
	tuöt8
 uint8;

470 
	gdëaû
::
	tuöt16
 uint16;

474 
	gdëaû
::
	tuöt32
 uint32;

478 
	gdëaû
::
	tuöt64
 uint64;

480 #i‡
GLM_HAS_EXTENDED_INTEGER_TYPE


481 
usög
 
	g°d
::
uöt8_t
;

482 
usög
 
	g°d
::
uöt16_t
;

483 
usög
 
	g°d
::
uöt32_t
;

484 
usög
 
	g°d
::
uöt64_t
;

488 
	gdëaû
::
	tuöt8
 
	tuöt8_t
;

492 
	gdëaû
::
	tuöt16
 
	tuöt16_t
;

496 
	gdëaû
::
	tuöt32
 
	tuöt32_t
;

500 
	gdëaû
::
	tuöt64
 
	tuöt64_t
;

505 
	gdëaû
::
	tuöt8
 
	tu8
;

509 
	gdëaû
::
	tuöt16
 
	tu16
;

513 
	gdëaû
::
	tuöt32
 
	tu32
;

517 
	gdëaû
::
	tuöt64
 
	tu64
;

523 
	gtvec1
<
	tu8
, 
	tdeÁu…p
> 
	tu8vec1
;

527 
	gtvec2
<
	tu8
, 
	tdeÁu…p
> 
	tu8vec2
;

531 
	gtvec3
<
	tu8
, 
	tdeÁu…p
> 
	tu8vec3
;

535 
	gtvec4
<
	tu8
, 
	tdeÁu…p
> 
	tu8vec4
;

540 
	gtvec1
<
	tu16
, 
	tdeÁu…p
> 
	tu16vec1
;

544 
	gtvec2
<
	tu16
, 
	tdeÁu…p
> 
	tu16vec2
;

548 
	gtvec3
<
	tu16
, 
	tdeÁu…p
> 
	tu16vec3
;

552 
	gtvec4
<
	tu16
, 
	tdeÁu…p
> 
	tu16vec4
;

557 
	gtvec1
<
	tu32
, 
	tdeÁu…p
> 
	tu32vec1
;

561 
	gtvec2
<
	tu32
, 
	tdeÁu…p
> 
	tu32vec2
;

565 
	gtvec3
<
	tu32
, 
	tdeÁu…p
> 
	tu32vec3
;

569 
	gtvec4
<
	tu32
, 
	tdeÁu…p
> 
	tu32vec4
;

574 
	gtvec1
<
	tu64
, 
	tdeÁu…p
> 
	tu64vec1
;

578 
	gtvec2
<
	tu64
, 
	tdeÁu…p
> 
	tu64vec2
;

582 
	gtvec3
<
	tu64
, 
	tdeÁu…p
> 
	tu64vec3
;

586 
	gtvec4
<
	tu64
, 
	tdeÁu…p
> 
	tu64vec4
;

594 
	gdëaû
::
	tÊﬂt32
 float32;

598 
	gdëaû
::
	tÊﬂt64
 float64;

603 
	gdëaû
::
	tÊﬂt32
 
	tÊﬂt32_t
;

607 
	gdëaû
::
	tÊﬂt64
 
	tÊﬂt64_t
;

612 
Êﬂt32
 
	tf32
;

616 
Êﬂt64
 
	tf64
;

621 
	gtvec1
<, 
	tdeÁu…p
> 
	tfvec1
;

625 
	gtvec2
<, 
	tdeÁu…p
> 
	tfvec2
;

629 
	gtvec3
<, 
	tdeÁu…p
> 
	tfvec3
;

633 
	gtvec4
<, 
	tdeÁu…p
> 
	tfvec4
;

638 
	gtvec1
<
	tf32
, 
	tdeÁu…p
> 
	tf32vec1
;

642 
	gtvec2
<
	tf32
, 
	tdeÁu…p
> 
	tf32vec2
;

646 
	gtvec3
<
	tf32
, 
	tdeÁu…p
> 
	tf32vec3
;

650 
	gtvec4
<
	tf32
, 
	tdeÁu…p
> 
	tf32vec4
;

655 
	gtvec1
<
	tf64
, 
	tdeÁu…p
> 
	tf64vec1
;

659 
	gtvec2
<
	tf64
, 
	tdeÁu…p
> 
	tf64vec2
;

663 
	gtvec3
<
	tf64
, 
	tdeÁu…p
> 
	tf64vec3
;

667 
	gtvec4
<
	tf64
, 
	tdeÁu…p
> 
	tf64vec4
;

679 
	gtm©2x2
<
	tf32
, 
	tdeÁu…p
> 
	tfm©2
;

683 
	gtm©3x3
<
	tf32
, 
	tdeÁu…p
> 
	tfm©3
;

687 
	gtm©4x4
<
	tf32
, 
	tdeÁu…p
> 
	tfm©4
;

696 
	gtm©2x2
<
	tf32
, 
	tdeÁu…p
> 
	tfm©2x2
;

700 
	gtm©2x3
<
	tf32
, 
	tdeÁu…p
> 
	tfm©2x3
;

704 
	gtm©2x4
<
	tf32
, 
	tdeÁu…p
> 
	tfm©2x4
;

708 
	gtm©3x2
<
	tf32
, 
	tdeÁu…p
> 
	tfm©3x2
;

712 
	gtm©3x3
<
	tf32
, 
	tdeÁu…p
> 
	tfm©3x3
;

716 
	gtm©3x4
<
	tf32
, 
	tdeÁu…p
> 
	tfm©3x4
;

720 
	gtm©4x2
<
	tf32
, 
	tdeÁu…p
> 
	tfm©4x2
;

724 
	gtm©4x3
<
	tf32
, 
	tdeÁu…p
> 
	tfm©4x3
;

728 
	gtm©4x4
<
	tf32
, 
	tdeÁu…p
> 
	tfm©4x4
;

737 
	gtm©2x2
<
	tf32
, 
	tdeÁu…p
> 
	tf32m©2
;

741 
	gtm©3x3
<
	tf32
, 
	tdeÁu…p
> 
	tf32m©3
;

745 
	gtm©4x4
<
	tf32
, 
	tdeÁu…p
> 
	tf32m©4
;

754 
	gtm©2x2
<
	tf32
, 
	tdeÁu…p
> 
	tf32m©2x2
;

758 
	gtm©2x3
<
	tf32
, 
	tdeÁu…p
> 
	tf32m©2x3
;

762 
	gtm©2x4
<
	tf32
, 
	tdeÁu…p
> 
	tf32m©2x4
;

766 
	gtm©3x2
<
	tf32
, 
	tdeÁu…p
> 
	tf32m©3x2
;

770 
	gtm©3x3
<
	tf32
, 
	tdeÁu…p
> 
	tf32m©3x3
;

774 
	gtm©3x4
<
	tf32
, 
	tdeÁu…p
> 
	tf32m©3x4
;

778 
	gtm©4x2
<
	tf32
, 
	tdeÁu…p
> 
	tf32m©4x2
;

782 
	gtm©4x3
<
	tf32
, 
	tdeÁu…p
> 
	tf32m©4x3
;

786 
	gtm©4x4
<
	tf32
, 
	tdeÁu…p
> 
	tf32m©4x4
;

795 
	gtm©2x2
<
	tf64
, 
	tdeÁu…p
> 
	tf64m©2
;

799 
	gtm©3x3
<
	tf64
, 
	tdeÁu…p
> 
	tf64m©3
;

803 
	gtm©4x4
<
	tf64
, 
	tdeÁu…p
> 
	tf64m©4
;

812 
	gtm©2x2
<
	tf64
, 
	tdeÁu…p
> 
	tf64m©2x2
;

816 
	gtm©2x3
<
	tf64
, 
	tdeÁu…p
> 
	tf64m©2x3
;

820 
	gtm©2x4
<
	tf64
, 
	tdeÁu…p
> 
	tf64m©2x4
;

824 
	gtm©3x2
<
	tf64
, 
	tdeÁu…p
> 
	tf64m©3x2
;

828 
	gtm©3x3
<
	tf64
, 
	tdeÁu…p
> 
	tf64m©3x3
;

832 
	gtm©3x4
<
	tf64
, 
	tdeÁu…p
> 
	tf64m©3x4
;

836 
	gtm©4x2
<
	tf64
, 
	tdeÁu…p
> 
	tf64m©4x2
;

840 
	gtm©4x3
<
	tf64
, 
	tdeÁu…p
> 
	tf64m©4x3
;

844 
	gtm©4x4
<
	tf64
, 
	tdeÁu…p
> 
	tf64m©4x4
;

852 
	gtqu©
<
	tf32
, 
	tdeÁu…p
> 
	tf32qu©
;

856 
	gtqu©
<
	tf64
, 
	tdeÁu…p
> 
	tf64qu©
;

861 
	~"ty≥_¥ecisi⁄.öl
"

	@glm/glm/gtc/type_ptr.hpp

34 #¥agm®
⁄˚


37 
	~"../gtc/qu©îni⁄.hµ
"

38 
	~"../vec2.hµ
"

39 
	~"../vec3.hµ
"

40 
	~"../vec4.hµ
"

41 
	~"../m©2x2.hµ
"

42 
	~"../m©2x3.hµ
"

43 
	~"../m©2x4.hµ
"

44 
	~"../m©3x2.hµ
"

45 
	~"../m©3x3.hµ
"

46 
	~"../m©3x4.hµ
"

47 
	~"../m©4x2.hµ
"

48 
	~"../m©4x3.hµ
"

49 
	~"../m©4x4.hµ
"

50 
	~<c°rög
>

52 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

53 #¥agm®
mesßge
("GLM: GLM_GTC_type_ptrÉxtension included")

56 
«me•a˚
 
	gglm


63 
	gãm∂©e
<
ty≥«me
 
	ggíTy≥
>

64 
GLM_FUNC_DECL
 
ty≥«me
 
	ggíTy≥
::
vÆue_ty≥
 c⁄° * 
vÆue_±r
(
gíTy≥
 c⁄° & 
vec
);

68 
	gãm∂©e
<
ty≥«me
 
	gT
>

69 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gdeÁu…p
> 
make_vec2
(
T
 c⁄° * c⁄° 
±r
);

73 
	gãm∂©e
<
ty≥«me
 
	gT
>

74 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gdeÁu…p
> 
make_vec3
(
T
 c⁄° * c⁄° 
±r
);

78 
	gãm∂©e
<
ty≥«me
 
	gT
>

79 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gdeÁu…p
> 
make_vec4
(
T
 c⁄° * c⁄° 
±r
);

83 
	gãm∂©e
<
ty≥«me
 
	gT
>

84 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gdeÁu…p
> 
make_m©2x2
(
T
 c⁄° * c⁄° 
±r
);

88 
	gãm∂©e
<
ty≥«me
 
	gT
>

89 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gdeÁu…p
> 
make_m©2x3
(
T
 c⁄° * c⁄° 
±r
);

93 
	gãm∂©e
<
ty≥«me
 
	gT
>

94 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gdeÁu…p
> 
make_m©2x4
(
T
 c⁄° * c⁄° 
±r
);

98 
	gãm∂©e
<
ty≥«me
 
	gT
>

99 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gdeÁu…p
> 
make_m©3x2
(
T
 c⁄° * c⁄° 
±r
);

103 
	gãm∂©e
<
ty≥«me
 
	gT
>

104 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gdeÁu…p
> 
make_m©3x3
(
T
 c⁄° * c⁄° 
±r
);

108 
	gãm∂©e
<
ty≥«me
 
	gT
>

109 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gdeÁu…p
> 
make_m©3x4
(
T
 c⁄° * c⁄° 
±r
);

113 
	gãm∂©e
<
ty≥«me
 
	gT
>

114 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gdeÁu…p
> 
make_m©4x2
(
T
 c⁄° * c⁄° 
±r
);

118 
	gãm∂©e
<
ty≥«me
 
	gT
>

119 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gdeÁu…p
> 
make_m©4x3
(
T
 c⁄° * c⁄° 
±r
);

123 
	gãm∂©e
<
ty≥«me
 
	gT
>

124 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
make_m©4x4
(
T
 c⁄° * c⁄° 
±r
);

128 
	gãm∂©e
<
ty≥«me
 
	gT
>

129 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gdeÁu…p
> 
make_m©2
(
T
 c⁄° * c⁄° 
±r
);

133 
	gãm∂©e
<
ty≥«me
 
	gT
>

134 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gdeÁu…p
> 
make_m©3
(
T
 c⁄° * c⁄° 
±r
);

138 
	gãm∂©e
<
ty≥«me
 
	gT
>

139 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
make_m©4
(
T
 c⁄° * c⁄° 
±r
);

143 
	gãm∂©e
<
ty≥«me
 
	gT
>

144 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gdeÁu…p
> 
make_qu©
(
T
 c⁄° * c⁄° 
±r
);

149 
	~"ty≥_±r.öl
"

	@glm/glm/gtc/ulp.hpp

14 #¥agm®
⁄˚


17 
	~"../dëaû/£tup.hµ
"

18 
	~"../dëaû/¥ecisi⁄.hµ
"

19 
	~"../dëaû/ty≥_öt.hµ
"

21 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

22 #¥agm®
mesßge
("GLM: GLM_GTC_ulpÉxtension included")

25 
«me•a˚
 
	gglm


32 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

33 
GLM_FUNC_DECL
 
gíTy≥
 
√xt_Êﬂt
(gíTy≥ c⁄° & 
x
);

37 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

38 
GLM_FUNC_DECL
 
gíTy≥
 
¥ev_Êﬂt
(gíTy≥ c⁄° & 
x
);

42 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

43 
GLM_FUNC_DECL
 
gíTy≥
 
√xt_Êﬂt
(gíTy≥ c⁄° & 
x
, 
uöt
 c⁄° & 
Di°™˚
);

47 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

48 
GLM_FUNC_DECL
 
gíTy≥
 
¥ev_Êﬂt
(gíTy≥ c⁄° & 
x
, 
uöt
 c⁄° & 
Di°™˚
);

52 
	gãm∂©e
 <
ty≥«me
 
	gT
>

53 
GLM_FUNC_DECL
 
uöt
 
Êﬂt_di°™˚
(
T
 c⁄° & 
x
, T c⁄° & 
y
);

57 
	gãm∂©e
<
ty≥«me
 
	gT
,Åem∂©e<
	gty≥«me
> 
˛ass
 
	gvecTy≥
>

58 
GLM_FUNC_DECL
 
	gvecTy≥
<
	guöt
> 
Êﬂt_di°™˚
(
vecTy≥
<
T
> c⁄° & 
x
, vecTy≥<T> c⁄° & 
y
);

63 
	~"uÕ.öl
"

	@glm/glm/gtc/vec1.hpp

12 #¥agm®
⁄˚


15 
	~"../glm.hµ
"

16 
	~"../dëaû/ty≥_vec1.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTC_vec1Éxtension included")

22 
«me•a˚
 
	gglm


27 
highp_vec1_t
 
	thighp_vec1
;

32 
mediump_vec1_t
 
	tmediump_vec1
;

37 
lowp_vec1_t
 
	tlowp_vec1
;

42 
highp_dvec1_t
 
	thighp_dvec1
;

47 
mediump_dvec1_t
 
	tmediump_dvec1
;

52 
lowp_dvec1_t
 
	tlowp_dvec1
;

57 
highp_ivec1_t
 
	thighp_ivec1
;

62 
mediump_ivec1_t
 
	tmediump_ivec1
;

67 
lowp_ivec1_t
 
	tlowp_ivec1
;

72 
highp_uvec1_t
 
	thighp_uvec1
;

77 
mediump_uvec1_t
 
	tmediump_uvec1
;

82 
lowp_uvec1_t
 
	tlowp_uvec1
;

87 
highp_bvec1_t
 
	thighp_bvec1
;

92 
mediump_bvec1_t
 
	tmediump_bvec1
;

97 
lowp_bvec1_t
 
	tlowp_bvec1
;

102 #if(
deföed
(
GLM_PRECISION_HIGHP_BOOL
))

103 
highp_bvec1
 
	tbvec1
;

104 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_BOOL
))

105 
mediump_bvec1
 
	tbvec1
;

106 #ñif(
deföed
(
GLM_PRECISION_LOWP_BOOL
))

107 
lowp_bvec1
 
	tbvec1
;

111 
highp_bvec1
 
	tbvec1
;

114 #if(
deföed
(
GLM_PRECISION_HIGHP_FLOAT
))

115 
highp_vec1
 
	tvec1
;

116 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_FLOAT
))

117 
mediump_vec1
 
	tvec1
;

118 #ñif(
deföed
(
GLM_PRECISION_LOWP_FLOAT
))

119 
lowp_vec1
 
	tvec1
;

123 
highp_vec1
 
	tvec1
;

126 #if(
deföed
(
GLM_PRECISION_HIGHP_DOUBLE
))

127 
highp_dvec1
 
	tdvec1
;

128 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_DOUBLE
))

129 
mediump_dvec1
 
	tdvec1
;

130 #ñif(
deföed
(
GLM_PRECISION_LOWP_DOUBLE
))

131 
lowp_dvec1
 
	tdvec1
;

135 
highp_dvec1
 
	tdvec1
;

138 #if(
deföed
(
GLM_PRECISION_HIGHP_INT
))

139 
highp_ivec1
 
	tivec1
;

140 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_INT
))

141 
mediump_ivec1
 
	tivec1
;

142 #ñif(
deföed
(
GLM_PRECISION_LOWP_INT
))

143 
lowp_ivec1
 
	tivec1
;

147 
highp_ivec1
 
	tivec1
;

150 #if(
deföed
(
GLM_PRECISION_HIGHP_UINT
))

151 
highp_uvec1
 
	tuvec1
;

152 #ñif(
deföed
(
GLM_PRECISION_MEDIUMP_UINT
))

153 
mediump_uvec1
 
	tuvec1
;

154 #ñif(
deföed
(
GLM_PRECISION_LOWP_UINT
))

155 
lowp_uvec1
 
	tuvec1
;

159 
highp_uvec1
 
	tuvec1
;

164 
	~"vec1.öl
"

	@glm/glm/gtx/associated_min_max.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_associated_min_maxÉxtension included")

22 
«me•a˚
 
	gglm


29 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
>

30 
GLM_FUNC_DECL
 
U
 
assocüãdMö
(
T
 
x
, U 
a
, T 
y
, U 
b
);

34 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

35 
GLM_FUNC_DECL
 
	gtvec2
<
	gU
, 
	gP
> 
assocüãdMö
(

36 
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<
U
, P> c⁄° & 
a
,

37 
vecTy≥
<
T
, 
P
> c⁄° & 
y
, vecTy≥<
U
, P> c⁄° & 
b
);

41 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

42 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gU
, 
	gP
> 
assocüãdMö
(

43 
T
 
x
, c⁄° 
vecTy≥
<
U
, 
P
>& 
a
,

44 
T
 
y
, c⁄° 
vecTy≥
<
U
, 
P
>& 
b
);

48 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

49 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gU
, 
	gP
> 
assocüãdMö
(

50 
vecTy≥
<
T
, 
P
> c⁄° & 
x
, 
U
 
a
,

51 
vecTy≥
<
T
, 
P
> c⁄° & 
y
, 
U
 
b
);

55 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

56 
GLM_FUNC_DECL
 
U
 
assocüãdMö
(

57 
T
 
x
, 
U
 
a
,

58 
T
 
y
, 
U
 
b
,

59 
T
 
z
, 
U
 
c
);

63 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

64 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gU
, 
	gP
> 
assocüãdMö
(

65 
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<
U
, P> c⁄° & 
a
,

66 
vecTy≥
<
T
, 
P
> c⁄° & 
y
, vecTy≥<
U
, P> c⁄° & 
b
,

67 
vecTy≥
<
T
, 
P
> c⁄° & 
z
, vecTy≥<
U
, P> c⁄° & 
c
);

71 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

72 
GLM_FUNC_DECL
 
U
 
assocüãdMö
(

73 
T
 
x
, 
U
 
a
,

74 
T
 
y
, 
U
 
b
,

75 
T
 
z
, 
U
 
c
,

76 
T
 
w
, 
U
 
d
);

80 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

81 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gU
, 
	gP
> 
assocüãdMö
(

82 
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<
U
, P> c⁄° & 
a
,

83 
vecTy≥
<
T
, 
P
> c⁄° & 
y
, vecTy≥<
U
, P> c⁄° & 
b
,

84 
vecTy≥
<
T
, 
P
> c⁄° & 
z
, vecTy≥<
U
, P> c⁄° & 
c
,

85 
vecTy≥
<
T
, 
P
> c⁄° & 
w
, vecTy≥<
U
, P> c⁄° & 
d
);

89 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

90 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gU
, 
	gP
> 
assocüãdMö
(

91 
T
 
x
, 
vecTy≥
<
U
, 
P
> c⁄° & 
a
,

92 
T
 
y
, 
vecTy≥
<
U
, 
P
> c⁄° & 
b
,

93 
T
 
z
, 
vecTy≥
<
U
, 
P
> c⁄° & 
c
,

94 
T
 
w
, 
vecTy≥
<
U
, 
P
> c⁄° & 
d
);

98 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

99 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gU
, 
	gP
> 
assocüãdMö
(

100 
vecTy≥
<
T
, 
P
> c⁄° & 
x
, 
U
 
a
,

101 
vecTy≥
<
T
, 
P
> c⁄° & 
y
, 
U
 
b
,

102 
vecTy≥
<
T
, 
P
> c⁄° & 
z
, 
U
 
c
,

103 
vecTy≥
<
T
, 
P
> c⁄° & 
w
, 
U
 
d
);

107 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

108 
GLM_FUNC_DECL
 
U
 
assocüãdMax
(
T
 
x
, U 
a
, T 
y
, U 
b
);

112 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

113 
GLM_FUNC_DECL
 
	gtvec2
<
	gU
, 
	gP
> 
assocüãdMax
(

114 
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<
U
, P> c⁄° & 
a
,

115 
vecTy≥
<
T
, 
P
> c⁄° & 
y
, vecTy≥<
U
, P> c⁄° & 
b
);

119 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

120 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
assocüãdMax
(

121 
T
 
x
, 
vecTy≥
<
U
, 
P
> c⁄° & 
a
,

122 
T
 
y
, 
vecTy≥
<
U
, 
P
> c⁄° & 
b
);

126 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

127 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gU
, 
	gP
> 
assocüãdMax
(

128 
vecTy≥
<
T
, 
P
> c⁄° & 
x
, 
U
 
a
,

129 
vecTy≥
<
T
, 
P
> c⁄° & 
y
, 
U
 
b
);

133 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

134 
GLM_FUNC_DECL
 
U
 
assocüãdMax
(

135 
T
 
x
, 
U
 
a
,

136 
T
 
y
, 
U
 
b
,

137 
T
 
z
, 
U
 
c
);

141 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

142 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gU
, 
	gP
> 
assocüãdMax
(

143 
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<
U
, P> c⁄° & 
a
,

144 
vecTy≥
<
T
, 
P
> c⁄° & 
y
, vecTy≥<
U
, P> c⁄° & 
b
,

145 
vecTy≥
<
T
, 
P
> c⁄° & 
z
, vecTy≥<
U
, P> c⁄° & 
c
);

149 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

150 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
assocüãdMax
(

151 
T
 
x
, 
vecTy≥
<
U
, 
P
> c⁄° & 
a
,

152 
T
 
y
, 
vecTy≥
<
U
, 
P
> c⁄° & 
b
,

153 
T
 
z
, 
vecTy≥
<
U
, 
P
> c⁄° & 
c
);

157 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

158 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gU
, 
	gP
> 
assocüãdMax
(

159 
vecTy≥
<
T
, 
P
> c⁄° & 
x
, 
U
 
a
,

160 
vecTy≥
<
T
, 
P
> c⁄° & 
y
, 
U
 
b
,

161 
vecTy≥
<
T
, 
P
> c⁄° & 
z
, 
U
 
c
);

165 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

166 
GLM_FUNC_DECL
 
U
 
assocüãdMax
(

167 
T
 
x
, 
U
 
a
,

168 
T
 
y
, 
U
 
b
,

169 
T
 
z
, 
U
 
c
,

170 
T
 
w
, 
U
 
d
);

174 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

175 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gU
, 
	gP
> 
assocüãdMax
(

176 
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<
U
, P> c⁄° & 
a
,

177 
vecTy≥
<
T
, 
P
> c⁄° & 
y
, vecTy≥<
U
, P> c⁄° & 
b
,

178 
vecTy≥
<
T
, 
P
> c⁄° & 
z
, vecTy≥<
U
, P> c⁄° & 
c
,

179 
vecTy≥
<
T
, 
P
> c⁄° & 
w
, vecTy≥<
U
, P> c⁄° & 
d
);

183 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

184 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gU
, 
	gP
> 
assocüãdMax
(

185 
T
 
x
, 
vecTy≥
<
U
, 
P
> c⁄° & 
a
,

186 
T
 
y
, 
vecTy≥
<
U
, 
P
> c⁄° & 
b
,

187 
T
 
z
, 
vecTy≥
<
U
, 
P
> c⁄° & 
c
,

188 
T
 
w
, 
vecTy≥
<
U
, 
P
> c⁄° & 
d
);

192 
	gãm∂©e
<
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

193 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gU
, 
	gP
> 
assocüãdMax
(

194 
vecTy≥
<
T
, 
P
> c⁄° & 
x
, 
U
 
a
,

195 
vecTy≥
<
T
, 
P
> c⁄° & 
y
, 
U
 
b
,

196 
vecTy≥
<
T
, 
P
> c⁄° & 
z
, 
U
 
c
,

197 
vecTy≥
<
T
, 
P
> c⁄° & 
w
, 
U
 
d
);

202 
	~"assocüãd_mö_max.öl
"

	@glm/glm/gtx/bit.hpp

14 #¥agm®
⁄˚


17 
	~"../gtc/bôfõld.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_bitÉxtension is deprecated, include GLM_GTC_bitfieldánd GLM_GTC_integer instead")

23 
«me•a˚
 
	gglm


29 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

30 
GLM_FUNC_DECL
 
gíIUTy≥
 
highe°BôVÆue
(gíIUTy≥ 
VÆue
);

33 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

34 
GLM_FUNC_DECL
 
gíIUTy≥
 
lowe°BôVÆue
(gíIUTy≥ 
VÆue
);

39 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

40 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
highe°BôVÆue
(
vecTy≥
<
T
, 
P
> c⁄° & 
vÆue
);

47 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

48 
GLM_DEPRECATED
 
GLM_FUNC_DECL
 
gíIUTy≥
 
powîOfTwoAbove
(gíIUTy≥ 
VÆue
);

55 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

56 
GLM_DEPRECATED
 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
powîOfTwoAbove
(
vecTy≥
<
T
, 
P
> c⁄° & 
vÆue
);

63 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

64 
GLM_DEPRECATED
 
GLM_FUNC_DECL
 
gíIUTy≥
 
powîOfTwoBñow
(gíIUTy≥ 
VÆue
);

71 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

72 
GLM_DEPRECATED
 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
powîOfTwoBñow
(
vecTy≥
<
T
, 
P
> c⁄° & 
vÆue
);

79 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

80 
GLM_DEPRECATED
 
GLM_FUNC_DECL
 
gíIUTy≥
 
powîOfTwoNóª°
(gíIUTy≥ 
VÆue
);

87 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

88 
GLM_DEPRECATED
 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
powîOfTwoNóª°
(
vecTy≥
<
T
, 
P
> c⁄° & 
vÆue
);

94 
	~"bô.öl
"

	@glm/glm/gtx/closest_point.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_closest_pointÉxtension included")

22 
«me•a˚
 
	gglm


29 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

30 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
˛o£°PoötOnLöe
(

31 
tvec3
<
T
, 
P
> c⁄° & 
poöt
,

32 
tvec3
<
T
, 
P
> c⁄° & 
a
,

33 
tvec3
<
T
, 
P
> c⁄° & 
b
);

36 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

37 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
˛o£°PoötOnLöe
(

38 
tvec2
<
T
, 
P
> c⁄° & 
poöt
,

39 
tvec2
<
T
, 
P
> c⁄° & 
a
,

40 
tvec2
<
T
, 
P
> c⁄° & 
b
);

45 
	~"˛o£°_poöt.öl
"

	@glm/glm/gtx/color_space.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_color_spaceÉxtension included")

22 
«me•a˚
 
	gglm


29 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

30 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
rgbCﬁ‹
(

31 
tvec3
<
T
, 
P
> c⁄° & 
hsvVÆue
);

35 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

36 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
hsvCﬁ‹
(

37 
tvec3
<
T
, 
P
> c⁄° & 
rgbVÆue
);

41 
	gãm∂©e
 <
ty≥«me
 
	gT
>

42 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
ßtuøti⁄
(

43 
T
 c⁄° 
s
);

47 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

48 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
ßtuøti⁄
(

49 
T
 c⁄° 
s
,

50 
tvec3
<
T
, 
P
> c⁄° & 
cﬁ‹
);

54 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

55 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
ßtuøti⁄
(

56 
T
 c⁄° 
s
,

57 
tvec4
<
T
, 
P
> c⁄° & 
cﬁ‹
);

61 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

62 
GLM_FUNC_DECL
 
T
 
lumöosôy
(

63 
tvec3
<
T
, 
P
> c⁄° & 
cﬁ‹
);

68 
	~"cﬁ‹_•a˚.öl
"

	@glm/glm/gtx/color_space_YCoCg.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_color_space_YCoCgÉxtension included")

22 
«me•a˚
 
	gglm


29 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

30 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
rgb2YCoCg
(

31 
tvec3
<
T
, 
P
> c⁄° & 
rgbCﬁ‹
);

35 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

36 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
YCoCg2rgb
(

37 
tvec3
<
T
, 
P
> c⁄° & 
YCoCgCﬁ‹
);

42 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

43 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
rgb2YCoCgR
(

44 
tvec3
<
T
, 
P
> c⁄° & 
rgbCﬁ‹
);

49 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

50 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
YCoCgR2rgb
(

51 
tvec3
<
T
, 
P
> c⁄° & 
YCoCgCﬁ‹
);

56 
	~"cﬁ‹_•a˚_YCoCg.öl
"

	@glm/glm/gtx/common.hpp

14 #¥agm®
⁄˚


17 
	~"../vec2.hµ
"

18 
	~"../vec3.hµ
"

19 
	~"../vec4.hµ
"

20 
	~"../gtc/vec1.hµ
"

22 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

23 #¥agm®
mesßge
("GLM: GLM_GTX_commonÉxtension included")

26 
«me•a˚
 
	gglm


39 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

40 
GLM_FUNC_DECL
 
ty≥«me
 
	ggíTy≥
::
boﬁ_ty≥
 
isdí‹mÆ
(
gíTy≥
 c⁄° & 
x
);

47 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

48 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
fmod
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
);

53 
	~"comm⁄.öl
"

	@glm/glm/gtx/compatibility.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

18 
	~"../gtc/qu©îni⁄.hµ
"

20 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

21 #¥agm®
mesßge
("GLM: GLM_GTX_compatibilityÉxtension included")

24 #i‡
GLM_COMPILER
 & 
GLM_COMPILER_VC


25 
	~<cÊﬂt
>

26 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


27 
	~<cm©h
>

28 #if(
GLM_PLATFORM
 & 
GLM_PLATFORM_ANDROID
)

29 #unde‡
isföôe


33 
«me•a˚
 
	gglm


38 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
GLM_FUNC_QUALIFIER
 
T
 
ÀΩ
(T 
x
, T 
y
, T 
a
){ 
mix
(x, y,á);}

39 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
	gtvec2
<T, P> 
ÀΩ
(c⁄° 
tvec2
<
T
, 
P
>& 
x
, c⁄°Åvec2<T, P>& 
y
, T 
a
){ 
mix
(x, y,á);}

41 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
	gtvec3
<T, P> 
ÀΩ
(c⁄° 
tvec3
<
T
, 
P
>& 
x
, c⁄°Åvec3<T, P>& 
y
, T 
a
){ 
mix
(x, y,á);}

42 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
	gtvec4
<T, P> 
ÀΩ
(c⁄° 
tvec4
<
T
, 
P
>& 
x
, c⁄°Åvec4<T, P>& 
y
, T 
a
){ 
mix
(x, y,á);}

43 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
	gtvec2
<T, P> 
ÀΩ
(c⁄° 
tvec2
<
T
, 
P
>& 
x
, c⁄°Åvec2<T, P>& 
y
, c⁄°Åvec2<T, P>& 
a
){ 
mix
(x, y,á);}

44 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
	gtvec3
<T, P> 
ÀΩ
(c⁄° 
tvec3
<
T
, 
P
>& 
x
, c⁄°Åvec3<T, P>& 
y
, c⁄°Åvec3<T, P>& 
a
){ 
mix
(x, y,á);}

45 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
	gtvec4
<T, P> 
ÀΩ
(c⁄° 
tvec4
<
T
, 
P
>& 
x
, c⁄°Åvec4<T, P>& 
y
, c⁄°Åvec4<T, P>& 
a
){ 
mix
(x, y,á);}

47 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
T
 
ßtuøã
(T 
x
){ 
˛amp
(x, T(0), T(1));}

48 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
	gtvec2
<T, P> 
ßtuøã
(c⁄° 
tvec2
<
T
, 
P
>& 
x
){ 
˛amp
(x, T(0), T(1));}

49 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
	gtvec3
<T, P> 
ßtuøã
(c⁄° 
tvec3
<
T
, 
P
>& 
x
){ 
˛amp
(x, T(0), T(1));}

50 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
	gtvec4
<T, P> 
ßtuøã
(c⁄° 
tvec4
<
T
, 
P
>& 
x
){ 
˛amp
(x, T(0), T(1));}

52 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
T
 
©™2
(T 
x
, T 
y
){ 
©™
(x, y);}

53 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
	gtvec2
<T, P> 
©™2
(c⁄° 
tvec2
<
T
, 
P
>& 
x
, c⁄°Åvec2<T, P>& 
y
){ 
©™
(x, y);}

54 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
	gtvec3
<T, P> 
©™2
(c⁄° 
tvec3
<
T
, 
P
>& 
x
, c⁄°Åvec3<T, P>& 
y
){ 
©™
(x, y);}

55 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_QUALIFIER
 
	gtvec4
<T, P> 
©™2
(c⁄° 
tvec4
<
T
, 
P
>& 
x
, c⁄°Åvec4<T, P>& 
y
){ 
©™
(x, y);}

57 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
> 
GLM_FUNC_DECL
 
boﬁ
 
isföôe
(
gíTy≥
 c⁄° & 
x
);

58 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_DECL
 
	gtvec1
<
	gboﬁ
, P> 
isföôe
(c⁄° 
tvec1
<
T
, 
P
>& 
x
);

59 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_DECL
 
	gtvec2
<
	gboﬁ
, P> 
isföôe
(c⁄° 
tvec2
<
T
, 
P
>& 
x
);

60 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_DECL
 
	gtvec3
<
	gboﬁ
, P> 
isföôe
(c⁄° 
tvec3
<
T
, 
P
>& 
x
);

61 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
> 
GLM_FUNC_DECL
 
	gtvec4
<
	gboﬁ
, P> 
isföôe
(c⁄° 
tvec4
<
T
, 
P
>& 
x
);

63 
boﬁ
 
	tboﬁ1
;

64 
	gtvec2
<
	tboﬁ
, 
	thighp
> 
	tboﬁ2
;

65 
	gtvec3
<
	tboﬁ
, 
	thighp
> 
	tboﬁ3
;

66 
	gtvec4
<
	tboﬁ
, 
	thighp
> 
	tboﬁ4
;

68 
boﬁ
 
	tboﬁ1x1
;

69 
	gtm©2x2
<
	tboﬁ
, 
	thighp
> 
	tboﬁ2x2
;

70 
	gtm©2x3
<
	tboﬁ
, 
	thighp
> 
	tboﬁ2x3
;

71 
	gtm©2x4
<
	tboﬁ
, 
	thighp
> 
	tboﬁ2x4
;

72 
	gtm©3x2
<
	tboﬁ
, 
	thighp
> 
	tboﬁ3x2
;

73 
	gtm©3x3
<
	tboﬁ
, 
	thighp
> 
	tboﬁ3x3
;

74 
	gtm©3x4
<
	tboﬁ
, 
	thighp
> 
	tboﬁ3x4
;

75 
	gtm©4x2
<
	tboﬁ
, 
	thighp
> 
	tboﬁ4x2
;

76 
	gtm©4x3
<
	tboﬁ
, 
	thighp
> 
	tboﬁ4x3
;

77 
	gtm©4x4
<
	tboﬁ
, 
	thighp
> 
	tboﬁ4x4
;

79 
	töt1
;

80 
	gtvec2
<, 
	thighp
> 
	töt2
;

81 
	gtvec3
<, 
	thighp
> 
	töt3
;

82 
	gtvec4
<, 
	thighp
> 
	töt4
;

84 
	töt1x1
;

85 
	gtm©2x2
<, 
	thighp
> 
	töt2x2
;

86 
	gtm©2x3
<, 
	thighp
> 
	töt2x3
;

87 
	gtm©2x4
<, 
	thighp
> 
	töt2x4
;

88 
	gtm©3x2
<, 
	thighp
> 
	töt3x2
;

89 
	gtm©3x3
<, 
	thighp
> 
	töt3x3
;

90 
	gtm©3x4
<, 
	thighp
> 
	töt3x4
;

91 
	gtm©4x2
<, 
	thighp
> 
	töt4x2
;

92 
	gtm©4x3
<, 
	thighp
> 
	töt4x3
;

93 
	gtm©4x4
<, 
	thighp
> 
	töt4x4
;

95 
	tÊﬂt1
;

96 
	gtvec2
<, 
	thighp
> 
	tÊﬂt2
;

97 
	gtvec3
<, 
	thighp
> 
	tÊﬂt3
;

98 
	gtvec4
<, 
	thighp
> 
	tÊﬂt4
;

100 
	tÊﬂt1x1
;

101 
	gtm©2x2
<, 
	thighp
> 
	tÊﬂt2x2
;

102 
	gtm©2x3
<, 
	thighp
> 
	tÊﬂt2x3
;

103 
	gtm©2x4
<, 
	thighp
> 
	tÊﬂt2x4
;

104 
	gtm©3x2
<, 
	thighp
> 
	tÊﬂt3x2
;

105 
	gtm©3x3
<, 
	thighp
> 
	tÊﬂt3x3
;

106 
	gtm©3x4
<, 
	thighp
> 
	tÊﬂt3x4
;

107 
	gtm©4x2
<, 
	thighp
> 
	tÊﬂt4x2
;

108 
	gtm©4x3
<, 
	thighp
> 
	tÊﬂt4x3
;

109 
	gtm©4x4
<, 
	thighp
> 
	tÊﬂt4x4
;

111 
	tdoubÀ1
;

112 
	gtvec2
<, 
	thighp
> 
	tdoubÀ2
;

113 
	gtvec3
<, 
	thighp
> 
	tdoubÀ3
;

114 
	gtvec4
<, 
	thighp
> 
	tdoubÀ4
;

116 
	tdoubÀ1x1
;

117 
	gtm©2x2
<, 
	thighp
> 
	tdoubÀ2x2
;

118 
	gtm©2x3
<, 
	thighp
> 
	tdoubÀ2x3
;

119 
	gtm©2x4
<, 
	thighp
> 
	tdoubÀ2x4
;

120 
	gtm©3x2
<, 
	thighp
> 
	tdoubÀ3x2
;

121 
	gtm©3x3
<, 
	thighp
> 
	tdoubÀ3x3
;

122 
	gtm©3x4
<, 
	thighp
> 
	tdoubÀ3x4
;

123 
	gtm©4x2
<, 
	thighp
> 
	tdoubÀ4x2
;

124 
	gtm©4x3
<, 
	thighp
> 
	tdoubÀ4x3
;

125 
	gtm©4x4
<, 
	thighp
> 
	tdoubÀ4x4
;

130 
	~"com∑tibûôy.öl
"

	@glm/glm/gtx/component_wise.hpp

15 #¥agm®
⁄˚


18 
	~"../dëaû/£tup.hµ
"

19 
	~"../dëaû/¥ecisi⁄.hµ
"

21 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

22 #¥agm®
mesßge
("GLM: GLM_GTX_component_wiseÉxtension included")

25 
«me•a˚
 
	gglm


33 
	gãm∂©e
 <
ty≥«me
 
	gÊﬂtTy≥
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

34 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gÊﬂtTy≥
, 
	gP
> 
compN‹mÆize
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
);

39 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gÊﬂtTy≥
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

40 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
compSˇÀ
(
vecTy≥
<
ÊﬂtTy≥
, 
P
> c⁄° & 
v
);

44 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

45 
GLM_FUNC_DECL
 
ty≥«me
 
	ggíTy≥
::
vÆue_ty≥
 
compAdd
(
gíTy≥
 c⁄° & 
v
);

49 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

50 
GLM_FUNC_DECL
 
ty≥«me
 
	ggíTy≥
::
vÆue_ty≥
 
compMul
(
gíTy≥
 c⁄° & 
v
);

54 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

55 
GLM_FUNC_DECL
 
ty≥«me
 
	ggíTy≥
::
vÆue_ty≥
 
compMö
(
gíTy≥
 c⁄° & 
v
);

59 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

60 
GLM_FUNC_DECL
 
ty≥«me
 
	ggíTy≥
::
vÆue_ty≥
 
compMax
(
gíTy≥
 c⁄° & 
v
);

65 
	~"comp⁄ít_wi£.öl
"

	@glm/glm/gtx/dual_quaternion.hpp

17 #¥agm®
⁄˚


20 
	~"../glm.hµ
"

21 
	~"../gtc/c⁄°™ts.hµ
"

22 
	~"../gtc/qu©îni⁄.hµ
"

24 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

25 #¥agm®
mesßge
("GLM: GLM_GTX_dual_quaternionÉxtension included")

28 
«me•a˚
 
	gglm


33 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
 = 
deÁu…p
>

34 
	stduÆqu©


38 
T
 
	tvÆue_ty≥
;

39 
	gglm
::
	ttqu©
<
	tT
, 
	tP
> 
	t∑π_ty≥
;

43 
	gglm
::
tqu©
<
T
, 
	gP
> 
	gªÆ
, 
	gduÆ
;

47 
Àngth_t
 
	tÀngth_ty≥
;

49 
GLM_FUNC_DECL
 
Àngth_ty≥
 
Àngth
(){ 2;}

51 
GLM_FUNC_DECL
 
	g∑π_ty≥
 & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
);

52 
GLM_FUNC_DECL
 
∑π_ty≥
 c⁄° & 
	g›î©‹
[](
Àngth_ty≥
 
	gi
) const;

56 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tduÆqu©
(Ë
	gGLM_DEFAULT_CTOR
;

57 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tduÆqu©
—duÆqu©<
T
, 
P
> c⁄° & 
d
Ë
	gGLM_DEFAULT
;

58 
	gãm∂©e
 <
¥ecisi⁄
 
	gQ
>

59 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tduÆqu©
—duÆqu©<
T
, 
Q
> c⁄° & 
d
);

63 
GLM_FUNC_DECL
 
GLM_CONSTEXPR_CTOR
 
ex∂icô
 
tduÆqu©
(
˘‹
);

64 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tduÆqu©
(
tqu©
<
T
, 
P
> c⁄° & 
ªÆ
);

65 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tduÆqu©
(
tqu©
<
T
, 
P
> c⁄° & 
‹õ¡©i⁄
, 
tvec3
<T, P> c⁄° & 
å™¶©i⁄
);

66 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
tduÆqu©
(
tqu©
<
T
, 
P
> c⁄° & 
ªÆ
,Åqu©<T, P> c⁄° & 
duÆ
);

70 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
¥ecisi⁄
 
	gQ
>

71 
GLM_FUNC_DECL
 
GLM_CONSTEXPR
 
GLM_EXPLICIT
 
tduÆqu©
—duÆqu©<
U
, 
Q
> c⁄° & 
q
);

73 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tduÆqu©
(
tm©2x4
<
T
, 
P
> c⁄° & 
hﬁdî_m©
);

74 
GLM_FUNC_DECL
 
GLM_EXPLICIT
 
tduÆqu©
(
tm©3x4
<
T
, 
P
> c⁄° & 
aug_m©
);

78 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tduÆqu©
<
T
, P> c⁄° & 
	gm
Ë
	gGLM_DEFAULT
;

80 
	gãm∂©e
 <
ty≥«me
 
	gU
>

81 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> & 
	g›î©‹
=(
tduÆqu©
<
U
, P> c⁄° & 
	gm
);

82 
	gãm∂©e
 <
ty≥«me
 
	gU
>

83 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> & 
	g›î©‹
*=(
U
 
s
);

84 
	gãm∂©e
 <
ty≥«me
 
	gU
>

85 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> & 
	g›î©‹
/=(
U
 
s
);

90 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

91 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> 
	g›î©‹
+—duÆqu©<T, P> c⁄° & 
	gq
);

93 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

94 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> 
	g›î©‹
-—duÆqu©<T, P> c⁄° & 
	gq
);

98 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

99 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> 
	g›î©‹
+—duÆqu©<T, P> c⁄° & 
	gq
,ÅduÆqu©<T, P> c⁄° & 
	gp
);

101 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

102 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> 
	g›î©‹
*—duÆqu©<T, P> c⁄° & 
	gq
,ÅduÆqu©<T, P> c⁄° & 
	gp
);

104 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

105 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtduÆqu©
<T, P> c⁄° & 
	gq
,Åvec3<T, P> c⁄° & 
	gv
);

107 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

108 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
	g›î©‹
*—vec3<T, P> c⁄° & 
	gv
, 
	gtduÆqu©
<T, P> c⁄° & 
	gq
);

110 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

111 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
*(
	gtduÆqu©
<T, P> c⁄° & 
	gq
,Åvec4<T, P> c⁄° & 
	gv
);

113 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

114 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
	g›î©‹
*—vec4<T, P> c⁄° & 
	gv
, 
	gtduÆqu©
<T, P> c⁄° & 
	gq
);

116 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

117 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> 
	g›î©‹
*—duÆqu©<T, P> c⁄° & 
	gq
, 
T
 c⁄° & 
	gs
);

119 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

120 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> 
	g›î©‹
*(
T
 c⁄° & 
	gs
,ÅduÆqu©<T, P> c⁄° & 
	gq
);

122 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

123 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> 
	g›î©‹
/—duÆqu©<T, P> c⁄° & 
	gq
, 
T
 c⁄° & 
	gs
);

127 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

128 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
==(
tduÆqu©
<
T
, 
	gP
> c⁄° & 
	gq1
, 
	gtduÆqu©
<
	gT
, P> c⁄° & 
	gq2
);

130 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

131 
GLM_FUNC_DECL
 
boﬁ
 
	g›î©‹
!=(
tduÆqu©
<
T
, 
	gP
> c⁄° & 
	gq1
, 
	gtduÆqu©
<
	gT
, P> c⁄° & 
	gq2
);

136 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

137 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> 
n‹mÆize
(
tduÆqu©
<
T
, 
P
> c⁄° & 
q
);

142 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

143 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> 
ÀΩ
(
tduÆqu©
<
T
, 
P
> c⁄° & 
x
,ÅduÆqu©<T, P> c⁄° & 
y
, T c⁄° & 
a
);

148 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

149 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> 
övî£
(
tduÆqu©
<
T
, 
P
> c⁄° & 
q
);

154 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

155 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
m©2x4_ˇ°
(
tduÆqu©
<
T
, 
P
> c⁄° & 
x
);

160 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

161 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
m©3x4_ˇ°
(
tduÆqu©
<
T
, 
P
> c⁄° & 
x
);

166 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

167 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> 
duÆqu©_ˇ°
(
tm©2x4
<
T
, 
P
> c⁄° & 
x
);

172 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

173 
GLM_FUNC_DECL
 
	gtduÆqu©
<
	gT
, 
	gP
> 
duÆqu©_ˇ°
(
tm©3x4
<
T
, 
P
> c⁄° & 
x
);

179 
	gtduÆqu©
<, 
	tlowp
> 
	tlowp_duÆqu©
;

184 
	gtduÆqu©
<, 
	tmediump
> 
	tmediump_duÆqu©
;

189 
	gtduÆqu©
<, 
	thighp
> 
	thighp_duÆqu©
;

195 
	gtduÆqu©
<, 
	tlowp
> 
	tlowp_fduÆqu©
;

200 
	gtduÆqu©
<, 
	tmediump
> 
	tmediump_fduÆqu©
;

205 
	gtduÆqu©
<, 
	thighp
> 
	thighp_fduÆqu©
;

211 
	gtduÆqu©
<, 
	tlowp
> 
	tlowp_dduÆqu©
;

216 
	gtduÆqu©
<, 
	tmediump
> 
	tmediump_dduÆqu©
;

221 
	gtduÆqu©
<, 
	thighp
> 
	thighp_dduÆqu©
;

224 #if(!
deföed
(
GLM_PRECISION_HIGHP_FLOAT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_FLOAT
Ë&& !deföed(
GLM_PRECISION_LOWP_FLOAT
))

228 
highp_fduÆqu©
 
	tduÆqu©
;

233 
highp_fduÆqu©
 
	tfduÆqu©
;

234 #ñif(
deföed
(
GLM_PRECISION_HIGHP_FLOAT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_FLOAT
Ë&& !deföed(
GLM_PRECISION_LOWP_FLOAT
))

235 
highp_fduÆqu©
 
	tduÆqu©
;

236 
highp_fduÆqu©
 
	tfduÆqu©
;

237 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_FLOAT
Ë&& deföed(
GLM_PRECISION_MEDIUMP_FLOAT
Ë&& !deföed(
GLM_PRECISION_LOWP_FLOAT
))

238 
mediump_fduÆqu©
 
	tduÆqu©
;

239 
mediump_fduÆqu©
 
	tfduÆqu©
;

240 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_FLOAT
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_FLOAT
Ë&& deföed(
GLM_PRECISION_LOWP_FLOAT
))

241 
lowp_fduÆqu©
 
	tduÆqu©
;

242 
lowp_fduÆqu©
 
	tfduÆqu©
;

248 #if(!
deföed
(
GLM_PRECISION_HIGHP_DOUBLE
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_DOUBLE
Ë&& !deföed(
GLM_PRECISION_LOWP_DOUBLE
))

252 
highp_dduÆqu©
 
	tdduÆqu©
;

253 #ñif(
deföed
(
GLM_PRECISION_HIGHP_DOUBLE
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_DOUBLE
Ë&& !deföed(
GLM_PRECISION_LOWP_DOUBLE
))

254 
highp_dduÆqu©
 
	tdduÆqu©
;

255 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_DOUBLE
Ë&& deföed(
GLM_PRECISION_MEDIUMP_DOUBLE
Ë&& !deföed(
GLM_PRECISION_LOWP_DOUBLE
))

256 
mediump_dduÆqu©
 
	tdduÆqu©
;

257 #ñif(!
deföed
(
GLM_PRECISION_HIGHP_DOUBLE
Ë&& !deföed(
GLM_PRECISION_MEDIUMP_DOUBLE
Ë&& deföed(
GLM_PRECISION_LOWP_DOUBLE
))

258 
lowp_dduÆqu©
 
	tdduÆqu©
;

266 
	~"duÆ_qu©îni⁄.öl
"

	@glm/glm/gtx/euler_angles.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_euler_anglesÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	gT
>

31 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
euÀrAngÀX
(

32 
T
 c⁄° & 
™gÀX
);

36 
	gãm∂©e
 <
ty≥«me
 
	gT
>

37 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
euÀrAngÀY
(

38 
T
 c⁄° & 
™gÀY
);

42 
	gãm∂©e
 <
ty≥«me
 
	gT
>

43 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
euÀrAngÀZ
(

44 
T
 c⁄° & 
™gÀZ
);

48 
	gãm∂©e
 <
ty≥«me
 
	gT
>

49 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
euÀrAngÀXY
(

50 
T
 c⁄° & 
™gÀX
,

51 
T
 c⁄° & 
™gÀY
);

55 
	gãm∂©e
 <
ty≥«me
 
	gT
>

56 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
euÀrAngÀYX
(

57 
T
 c⁄° & 
™gÀY
,

58 
T
 c⁄° & 
™gÀX
);

62 
	gãm∂©e
 <
ty≥«me
 
	gT
>

63 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
euÀrAngÀXZ
(

64 
T
 c⁄° & 
™gÀX
,

65 
T
 c⁄° & 
™gÀZ
);

69 
	gãm∂©e
 <
ty≥«me
 
	gT
>

70 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
euÀrAngÀZX
(

71 
T
 c⁄° & 
™gÀ
,

72 
T
 c⁄° & 
™gÀX
);

76 
	gãm∂©e
 <
ty≥«me
 
	gT
>

77 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
euÀrAngÀYZ
(

78 
T
 c⁄° & 
™gÀY
,

79 
T
 c⁄° & 
™gÀZ
);

83 
	gãm∂©e
 <
ty≥«me
 
	gT
>

84 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
euÀrAngÀZY
(

85 
T
 c⁄° & 
™gÀZ
,

86 
T
 c⁄° & 
™gÀY
);

90 
	gãm∂©e
 <
ty≥«me
 
	gT
>

91 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
euÀrAngÀXYZ
(

92 
T
 c⁄° & 
t1
,

93 
T
 c⁄° & 
t2
,

94 
T
 c⁄° & 
t3
);

98 
	gãm∂©e
 <
ty≥«me
 
	gT
>

99 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
euÀrAngÀYXZ
(

100 
T
 c⁄° & 
yaw
,

101 
T
 c⁄° & 
pôch
,

102 
T
 c⁄° & 
rﬁl
);

106 
	gãm∂©e
 <
ty≥«me
 
	gT
>

107 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gdeÁu…p
> 
yawPôchRﬁl
(

108 
T
 c⁄° & 
yaw
,

109 
T
 c⁄° & 
pôch
,

110 
T
 c⁄° & 
rﬁl
);

114 
	gãm∂©e
 <
ty≥«me
 
	gT
>

115 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gdeÁu…p
> 
‹õ¡©e2
(
T
 c⁄° & 
™gÀ
);

119 
	gãm∂©e
 <
ty≥«me
 
	gT
>

120 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gdeÁu…p
> 
‹õ¡©e3
(
T
 c⁄° & 
™gÀ
);

124 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

125 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
‹õ¡©e3
(
tvec3
<
T
, 
P
> c⁄° & 
™gÀs
);

129 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

130 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
‹õ¡©e4
(
tvec3
<
T
, 
P
> c⁄° & 
™gÀs
);

134 
	gãm∂©e
 <
ty≥«me
 
	gT
>

135 
GLM_FUNC_DECL
 
exåa˘EuÀrAngÀXYZ
(
tm©4x4
<
T
, 
deÁu…p
> c⁄° & 
M
,

136 
T
 & 
t1
,

137 
T
 & 
t2
,

138 
T
 & 
t3
);

143 
	~"euÀr_™gÀs.öl
"

	@glm/glm/gtx/extend.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_extendÉxtension included")

22 
«me•a˚
 
	gglm


29 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

30 
GLM_FUNC_DECL
 
gíTy≥
 
exãnd
(

31 
gíTy≥
 c⁄° & 
Origö
,

32 
gíTy≥
 c⁄° & 
Sour˚
,

33 
ty≥«me
 
gíTy≥
::
vÆue_ty≥
 c⁄° 
Lígth
);

38 
	~"exãnd.öl
"

	@glm/glm/gtx/extended_min_max.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_extented_min_maxÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	gT
>

31 
GLM_FUNC_DECL
 
T
 
mö
(

32 
T
 c⁄° & 
x
,

33 
T
 c⁄° & 
y
,

34 
T
 c⁄° & 
z
);

38 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åem∂©ê<
	gty≥«me
> 
˛ass
 
	gC
>

39 
GLM_FUNC_DECL
 
	gC
<
	gT
> 
mö
(

40 
C
<
T
> c⁄° & 
x
,

41 
ty≥«me
 
C
<
T
>::T c⁄° & 
y
,

42 
ty≥«me
 
C
<
T
>::T c⁄° & 
z
);

46 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åem∂©ê<
	gty≥«me
> 
˛ass
 
	gC
>

47 
GLM_FUNC_DECL
 
	gC
<
	gT
> 
mö
(

48 
C
<
T
> c⁄° & 
x
,

49 
C
<
T
> c⁄° & 
y
,

50 
C
<
T
> c⁄° & 
z
);

54 
	gãm∂©e
 <
ty≥«me
 
	gT
>

55 
GLM_FUNC_DECL
 
T
 
mö
(

56 
T
 c⁄° & 
x
,

57 
T
 c⁄° & 
y
,

58 
T
 c⁄° & 
z
,

59 
T
 c⁄° & 
w
);

63 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åem∂©ê<
	gty≥«me
> 
˛ass
 
	gC
>

64 
GLM_FUNC_DECL
 
	gC
<
	gT
> 
mö
(

65 
C
<
T
> c⁄° & 
x
,

66 
ty≥«me
 
C
<
T
>::T c⁄° & 
y
,

67 
ty≥«me
 
C
<
T
>::T c⁄° & 
z
,

68 
ty≥«me
 
C
<
T
>::T c⁄° & 
w
);

72 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åem∂©ê<
	gty≥«me
> 
˛ass
 
	gC
>

73 
GLM_FUNC_DECL
 
	gC
<
	gT
> 
mö
(

74 
C
<
T
> c⁄° & 
x
,

75 
C
<
T
> c⁄° & 
y
,

76 
C
<
T
> c⁄° & 
z
,

77 
C
<
T
> c⁄° & 
w
);

81 
	gãm∂©e
 <
ty≥«me
 
	gT
>

82 
GLM_FUNC_DECL
 
T
 
max
(

83 
T
 c⁄° & 
x
,

84 
T
 c⁄° & 
y
,

85 
T
 c⁄° & 
z
);

89 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åem∂©ê<
	gty≥«me
> 
˛ass
 
	gC
>

90 
GLM_FUNC_DECL
 
	gC
<
	gT
> 
max
(

91 
C
<
T
> c⁄° & 
x
,

92 
ty≥«me
 
C
<
T
>::T c⁄° & 
y
,

93 
ty≥«me
 
C
<
T
>::T c⁄° & 
z
);

97 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åem∂©ê<
	gty≥«me
> 
˛ass
 
	gC
>

98 
GLM_FUNC_DECL
 
	gC
<
	gT
> 
max
(

99 
C
<
T
> c⁄° & 
x
,

100 
C
<
T
> c⁄° & 
y
,

101 
C
<
T
> c⁄° & 
z
);

105 
	gãm∂©e
 <
ty≥«me
 
	gT
>

106 
GLM_FUNC_DECL
 
T
 
max
(

107 
T
 c⁄° & 
x
,

108 
T
 c⁄° & 
y
,

109 
T
 c⁄° & 
z
,

110 
T
 c⁄° & 
w
);

114 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åem∂©ê<
	gty≥«me
> 
˛ass
 
	gC
>

115 
GLM_FUNC_DECL
 
	gC
<
	gT
> 
max
(

116 
C
<
T
> c⁄° & 
x
,

117 
ty≥«me
 
C
<
T
>::T c⁄° & 
y
,

118 
ty≥«me
 
C
<
T
>::T c⁄° & 
z
,

119 
ty≥«me
 
C
<
T
>::T c⁄° & 
w
);

123 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åem∂©ê<
	gty≥«me
> 
˛ass
 
	gC
>

124 
GLM_FUNC_DECL
 
	gC
<
	gT
> 
max
(

125 
C
<
T
> c⁄° & 
x
,

126 
C
<
T
> c⁄° & 
y
,

127 
C
<
T
> c⁄° & 
z
,

128 
C
<
T
> c⁄° & 
w
);

133 
	~"exãnded_mö_max.öl
"

	@glm/glm/gtx/fast_exponential.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_fast_exponentialÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

31 
GLM_FUNC_DECL
 
gíTy≥
 
Á°Pow
(gíTy≥ 
x
, gíTy≥ 
y
);

35 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

36 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
Á°Pow
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

40 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥T
,Åy≥«mê
	ggíTy≥U
>

41 
GLM_FUNC_DECL
 
gíTy≥T
 
Á°Pow
(gíTy≥T 
x
, 
gíTy≥U
 
y
);

45 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

46 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
Á°Pow
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

50 
	gãm∂©e
 <
ty≥«me
 
	gT
>

51 
GLM_FUNC_DECL
 
T
 
Á°Exp
(T 
x
);

55 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

56 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
Á°Exp
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

60 
	gãm∂©e
 <
ty≥«me
 
	gT
>

61 
GLM_FUNC_DECL
 
T
 
Á°Log
(T 
x
);

65 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

66 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
Á°Log
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

70 
	gãm∂©e
 <
ty≥«me
 
	gT
>

71 
GLM_FUNC_DECL
 
T
 
Á°Exp2
(T 
x
);

75 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

76 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
Á°Exp2
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

80 
	gãm∂©e
 <
ty≥«me
 
	gT
>

81 
GLM_FUNC_DECL
 
T
 
Á°Log2
(T 
x
);

85 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

86 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
Á°Log2
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

91 
	~"Á°_exp⁄ítül.öl
"

	@glm/glm/gtx/fast_square_root.hpp

15 #¥agm®
⁄˚


18 
	~"../comm⁄.hµ
"

19 
	~"../exp⁄ítül.hµ
"

20 
	~"../geomëric.hµ
"

22 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

23 #¥agm®
mesßge
("GLM: GLM_GTX_fast_square_rootÉxtension included")

26 
«me•a˚
 
	gglm


34 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

35 
GLM_FUNC_DECL
 
gíTy≥
 
Á°Sqπ
(gíTy≥ 
x
);

40 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

41 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
Á°Sqπ
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

46 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

47 
GLM_FUNC_DECL
 
gíTy≥
 
Á°Invî£Sqπ
(gíTy≥ 
x
);

52 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

53 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
Á°Invî£Sqπ
(
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

58 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

59 
GLM_FUNC_DECL
 
gíTy≥
 
Á°Lígth
(gíTy≥ 
x
);

64 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

65 
GLM_FUNC_DECL
 
T
 
Á°Lígth
(
vecTy≥
<T, 
P
> c⁄° & 
x
);

70 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

71 
GLM_FUNC_DECL
 
gíTy≥
 
Á°Di°™˚
(gíTy≥ 
x
, gíTy≥ 
y
);

76 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

77 
GLM_FUNC_DECL
 
T
 
Á°Di°™˚
(
vecTy≥
<T, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

82 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

83 
GLM_FUNC_DECL
 
gíTy≥
 
Á°N‹mÆize
(gíTy≥ c⁄° & 
x
);

88 
	~"Á°_squ¨e_roŸ.öl
"

	@glm/glm/gtx/fast_trigonometry.hpp

13 #¥agm®
⁄˚


16 
	~"../gtc/c⁄°™ts.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_fast_trigonometryÉxtension included")

22 
«me•a˚
 
	gglm


29 
	gãm∂©e
 <
ty≥«me
 
	gT
>

30 
GLM_FUNC_DECL
 
T
 
wøpAngÀ
(T 
™gÀ
);

34 
	gãm∂©e
 <
ty≥«me
 
	gT
>

35 
GLM_FUNC_DECL
 
T
 
Á°Sö
(T 
™gÀ
);

39 
	gãm∂©e
 <
ty≥«me
 
	gT
>

40 
GLM_FUNC_DECL
 
T
 
Á°Cos
(T 
™gÀ
);

45 
	gãm∂©e
 <
ty≥«me
 
	gT
>

46 
GLM_FUNC_DECL
 
T
 
Á°T™
(T 
™gÀ
);

51 
	gãm∂©e
 <
ty≥«me
 
	gT
>

52 
GLM_FUNC_DECL
 
T
 
Á°Asö
(T 
™gÀ
);

57 
	gãm∂©e
 <
ty≥«me
 
	gT
>

58 
GLM_FUNC_DECL
 
T
 
Á°Acos
(T 
™gÀ
);

63 
	gãm∂©e
 <
ty≥«me
 
	gT
>

64 
GLM_FUNC_DECL
 
T
 
Á°Aèn
(T 
y
, T 
x
);

69 
	gãm∂©e
 <
ty≥«me
 
	gT
>

70 
GLM_FUNC_DECL
 
T
 
Á°Aèn
(T 
™gÀ
);

75 
	~"Á°_åig⁄omëry.öl
"

	@glm/glm/gtx/gradient_paint.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

17 
	~"../gtx/›timum_pow.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_gradient_paintÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

31 
GLM_FUNC_DECL
 
T
 
ødülGødõ¡
(

32 
tvec2
<
T
, 
P
> c⁄° & 
Cíãr
,

33 
T
 c⁄° & 
Radius
,

34 
tvec2
<
T
, 
P
> c⁄° & 
Foˇl
,

35 
tvec2
<
T
, 
P
> c⁄° & 
Posôi⁄
);

39 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

40 
GLM_FUNC_DECL
 
T
 
löórGødõ¡
(

41 
tvec2
<
T
, 
P
> c⁄° & 
Poöt0
,

42 
tvec2
<
T
, 
P
> c⁄° & 
Poöt1
,

43 
tvec2
<
T
, 
P
> c⁄° & 
Posôi⁄
);

48 
	~"gødõ¡_∑öt.öl
"

	@glm/glm/gtx/handed_coordinate_space.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_handed_coordinate_spaceÉxtension included")

22 
«me•a˚
 
	gglm


29 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

30 
GLM_FUNC_DECL
 
boﬁ
 
rightH™ded
(

31 
tvec3
<
T
, 
P
> c⁄° & 
èngít
,

32 
tvec3
<
T
, 
P
> c⁄° & 
bö‹mÆ
,

33 
tvec3
<
T
, 
P
> c⁄° & 
n‹mÆ
);

37 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

38 
GLM_FUNC_DECL
 
boﬁ
 
À·H™ded
(

39 
tvec3
<
T
, 
P
> c⁄° & 
èngít
,

40 
tvec3
<
T
, 
P
> c⁄° & 
bö‹mÆ
,

41 
tvec3
<
T
, 
P
> c⁄° & 
n‹mÆ
);

46 
	~"h™ded_co‹dö©e_•a˚.öl
"

	@glm/glm/gtx/hash.hpp

13 #¥agm®
⁄˚


15 
	~<fun˘i⁄Æ
>

17 
	~"../vec2.hµ
"

18 
	~"../vec3.hµ
"

19 
	~"../vec4.hµ
"

20 
	~"../gtc/vec1.hµ
"

22 
	~"../gtc/qu©îni⁄.hµ
"

23 
	~"../gtx/duÆ_qu©îni⁄.hµ
"

25 
	~"../m©2x2.hµ
"

26 
	~"../m©2x3.hµ
"

27 
	~"../m©2x4.hµ
"

29 
	~"../m©3x2.hµ
"

30 
	~"../m©3x3.hµ
"

31 
	~"../m©3x4.hµ
"

33 
	~"../m©4x2.hµ
"

34 
	~"../m©4x3.hµ
"

35 
	~"../m©4x4.hµ
"

37 #i‡!
GLM_HAS_CXX11_STL


41 
«me•a˚
 
	g°d


43 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

44 
hash
<
glm
::
tvec1
<
T
,
	gP
> >

46 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tvec1
<
T
, 
	gP
> c⁄° & 
	gv
) const;

49 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

50 
hash
<
glm
::
tvec2
<
T
,
	gP
> >

52 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tvec2
<
T
, 
	gP
> c⁄° & 
	gv
) const;

55 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

56 
hash
<
glm
::
tvec3
<
T
,
	gP
> >

58 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tvec3
<
T
, 
	gP
> c⁄° & 
	gv
) const;

61 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

62 
hash
<
glm
::
tvec4
<
T
,
	gP
> >

64 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tvec4
<
T
, 
	gP
> c⁄° & 
	gv
) const;

67 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

68 
hash
<
glm
::
tqu©
<
T
,
	gP
>>

70 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tqu©
<
T
, 
	gP
> c⁄° & 
	gq
) const;

73 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

74 
hash
<
glm
::
tduÆqu©
<
T
,
	gP
> >

76 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tduÆqu©
<
T
,
	gP
> c⁄° & 
	gq
) const;

79 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

80 
hash
<
glm
::
tm©2x2
<
T
,
	gP
> >

82 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tm©2x2
<
T
,
	gP
> c⁄° & 
	gm
) const;

85 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

86 
hash
<
glm
::
tm©2x3
<
T
,
	gP
> >

88 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tm©2x3
<
T
,
	gP
> c⁄° & 
	gm
) const;

91 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

92 
hash
<
glm
::
tm©2x4
<
T
,
	gP
> >

94 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tm©2x4
<
T
,
	gP
> c⁄° & 
	gm
) const;

97 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

98 
hash
<
glm
::
tm©3x2
<
T
,
	gP
> >

100 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tm©3x2
<
T
,
	gP
> c⁄° & 
	gm
) const;

103 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

104 
hash
<
glm
::
tm©3x3
<
T
,
	gP
> >

106 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tm©3x3
<
T
,
	gP
> c⁄° & 
	gm
) const;

109 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

110 
hash
<
glm
::
tm©3x4
<
T
,
	gP
> >

112 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tm©3x4
<
T
,
	gP
> c⁄° & 
	gm
) const;

115 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

116 
hash
<
glm
::
tm©4x2
<
T
,
	gP
> >

118 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tm©4x2
<
T
,
	gP
> c⁄° & 
	gm
) const;

121 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

122 
hash
<
glm
::
tm©4x3
<
T
,
	gP
> >

124 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tm©4x3
<
T
,
	gP
> c⁄° & 
	gm
) const;

127 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
>

128 
hash
<
glm
::
tm©4x4
<
T
,
	gP
> >

130 
GLM_FUNC_DECL
 
size_t
 
›î©‹
()(
	gglm
::
tm©4x4
<
T
,
	gP
> c⁄° & 
	gm
) const;

134 
	~"hash.öl
"

	@glm/glm/gtx/integer.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

17 
	~"../gtc/öãgî.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_integerÉxtension included")

23 
«me•a˚
 
	gglm


30 
GLM_FUNC_DECL
 
pow
(
x
, 
y
);

34 
GLM_FUNC_DECL
 
sqπ
(
x
);

38 
GLM_FUNC_DECL
 
Êo‹_log2
(
x
);

42 
GLM_FUNC_DECL
 
mod
(
x
, 
y
);

46 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

47 
GLM_FUNC_DECL
 
gíTy≥
 
Á˘‹ül
(gíTy≥ c⁄° & 
x
);

51 sig√d 
	tsöt
;

55 
GLM_FUNC_DECL
 
uöt
 
pow
(uöà
x
, uöà
y
);

59 
GLM_FUNC_DECL
 
uöt
 
sqπ
(uöà
x
);

63 
GLM_FUNC_DECL
 
uöt
 
mod
(uöà
x
, uöà
y
);

67 
GLM_FUNC_DECL
 
uöt
 
∆z
(uöà
x
);

72 
	~"öãgî.öl
"

	@glm/glm/gtx/intersect.hpp

14 #¥agm®
⁄˚


17 
	~<cÊﬂt
>

18 
	~<limôs
>

19 
	~"../glm.hµ
"

20 
	~"../geomëric.hµ
"

21 
	~"../gtx/˛o£°_poöt.hµ
"

22 
	~"../gtx/ve˘‹_quîy.hµ
"

24 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

25 #¥agm®
mesßge
("GLM: GLM_GTX_closest_pointÉxtension included")

28 
«me•a˚
 
	gglm


36 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

37 
GLM_FUNC_DECL
 
boﬁ
 
öãr£˘RayPœ√
(

38 
gíTy≥
 c⁄° & 
‹ig
, gíTy≥ c⁄° & 
dú
,

39 
gíTy≥
 c⁄° & 
∂™eOrig
, gíTy≥ c⁄° & 
∂™eN‹mÆ
,

40 
ty≥«me
 
gíTy≥
::
vÆue_ty≥
 & 
öãr£˘i⁄Di°™˚
);

44 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

45 
GLM_FUNC_DECL
 
boﬁ
 
öãr£˘RayTrüngÀ
(

46 
gíTy≥
 c⁄° & 
‹ig
, gíTy≥ c⁄° & 
dú
,

47 
gíTy≥
 c⁄° & 
vît0
, gíTy≥ c⁄° & 
vît1
, gíTy≥ c⁄° & 
vît2
,

48 
gíTy≥
 & 
b¨yPosôi⁄
);

52 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

53 
GLM_FUNC_DECL
 
boﬁ
 
öãr£˘LöeTrüngÀ
(

54 
gíTy≥
 c⁄° & 
‹ig
, gíTy≥ c⁄° & 
dú
,

55 
gíTy≥
 c⁄° & 
vît0
, gíTy≥ c⁄° & 
vît1
, gíTy≥ c⁄° & 
vît2
,

56 
gíTy≥
 & 
posôi⁄
);

61 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

62 
GLM_FUNC_DECL
 
boﬁ
 
öãr£˘RaySphîe
(

63 
gíTy≥
 c⁄° & 
øySèπög
, gíTy≥ c⁄° & 
øyN‹mÆizedDúe˘i⁄
,

64 
gíTy≥
 c⁄° & 
•hîeCíãr
, 
ty≥«me
 gíTy≥::
vÆue_ty≥
 c⁄° 
•hîeRadiusSquîed
,

65 
ty≥«me
 
gíTy≥
::
vÆue_ty≥
 & 
öãr£˘i⁄Di°™˚
);

69 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

70 
GLM_FUNC_DECL
 
boﬁ
 
öãr£˘RaySphîe
(

71 
gíTy≥
 c⁄° & 
øySèπög
, gíTy≥ c⁄° & 
øyN‹mÆizedDúe˘i⁄
,

72 
gíTy≥
 c⁄° & 
•hîeCíãr
, c⁄° 
ty≥«me
 gíTy≥::
vÆue_ty≥
 
•hîeRadius
,

73 
gíTy≥
 & 
öãr£˘i⁄Posôi⁄
, gíTy≥ & 
öãr£˘i⁄N‹mÆ
);

77 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

78 
GLM_FUNC_DECL
 
boﬁ
 
öãr£˘LöeSphîe
(

79 
gíTy≥
 c⁄° & 
poöt0
, gíTy≥ c⁄° & 
poöt1
,

80 
gíTy≥
 c⁄° & 
•hîeCíãr
, 
ty≥«me
 gíTy≥::
vÆue_ty≥
 
•hîeRadius
,

81 
gíTy≥
 & 
öãr£˘i⁄Posôi⁄1
, gíTy≥ & 
öãr£˘i⁄N‹mÆ1
,

82 
gíTy≥
 & 
öãr£˘i⁄Posôi⁄2
 = gíTy≥(), gíTy≥ & 
öãr£˘i⁄N‹mÆ2
 = genType());

87 
	~"öãr£˘.öl
"

	@glm/glm/gtx/io.hpp

20 #¥agm®
⁄˚


23 
	~"../glm.hµ
"

24 
	~"../gtx/qu©îni⁄.hµ
"

26 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

27 #¥agm®
mesßge
("GLM: GLM_GTX_ioÉxtension included")

30 
	~<iosfwd
>

31 
	~<loˇÀ
>

32 
	~<utûôy
>

34 
«me•a˚
 
	gglm


39 
«me•a˚
 
	gio


41 
	e‹dî_ty≥
 { 
	gcﬁumn_maj‹
, 
	grow_maj‹
};

43 
	gãm∂©e
 <
ty≥«me
 
	gCTy
>

44 ˛as†
	cf‹m©_pun˘
 : 
public
 
°d
::
loˇÀ
::
Á˚t


46 
CTy
 
	tch¨_ty≥
;

48 
	gpublic
:

50 
°d
::
loˇÀ
::
id
 id;

52 
boﬁ
 
	gf‹m©ãd
;

53 
	g¥ecisi⁄
;

54 
	gwidth
;

55 
ch¨_ty≥
 
	g£∑øt‹
;

56 
ch¨_ty≥
 
	gdñim_À·
;

57 
ch¨_ty≥
 
	gdñim_right
;

58 
ch¨_ty≥
 
	g•a˚
;

59 
ch¨_ty≥
 
	g√wlöe
;

60 
‹dî_ty≥
 
	g‹dî
;

62 
GLM_FUNC_DECL
 
ex∂icô
 
f‹m©_pun˘
(
size_t
 
a
 = 0);

63 
GLM_FUNC_DECL
 
ex∂icô
 
f‹m©_pun˘
(format_punct const&);

66 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
 = 
°d
::
ch¨_åaôs
<
CTy
> >

67 ˛as†
	cbasic_°©e_ßvî
 {

69 
public
:

71 
GLM_FUNC_DECL
 
ex∂icô
 
basic_°©e_ßvî
(
°d
::
basic_ios
<
CTy
,
CTr
>&);

72 
	gGLM_FUNC_DECL
 ~
basic_°©e_ßvî
();

74 
	g¥iv©e
:

76 ::
°d
::
	tbasic_ios
<
	tCTy
,
	tCTr
> 
	t°©e_ty≥
;

77 
ty≥«me
 
	t°©e_ty≥
::
	tch¨_ty≥
 char_type;

78 ::
°d
::
	tios_ba£
::
	tfmtÊags
 
	tÊags_ty≥
;

79 ::
°d
::
	t°ªamsize
 
	t°ªamsize_ty≥
;

80 ::
°d
::
	tloˇÀ
 c⁄° 
	tloˇÀ_ty≥
;

82 
	g°©e_ty≥
& 
	g°©e_
;

83 
Êags_ty≥
 
	gÊags_
;

84 
°ªamsize_ty≥
 
	g¥ecisi⁄_
;

85 
°ªamsize_ty≥
 
	gwidth_
;

86 
ch¨_ty≥
 
	gfûl_
;

87 
loˇÀ_ty≥
 
	gloˇÀ_
;

89 
GLM_FUNC_DECL
 
	gbasic_°©e_ßvî
& 
	g›î©‹
=(
basic_°©e_ßvî
 const&);

92 
	gbasic_°©e_ßvî
<> 
	t°©e_ßvî
;

93 
	gbasic_°©e_ßvî
<
	twch¨_t
> 
	tw°©e_ßvî
;

95 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
 = 
°d
::
ch¨_åaôs
<
CTy
> >

96 ˛as†
	cbasic_f‹m©_ßvî


98 
public
:

100 
GLM_FUNC_DECL
 
ex∂icô
 
basic_f‹m©_ßvî
(
°d
::
basic_ios
<
CTy
,
CTr
>&);

101 
	gGLM_FUNC_DECL
 ~
basic_f‹m©_ßvî
();

103 
	g¥iv©e
:

105 
basic_°©e_ßvî
<
CTy
> c⁄° 
bss_
;

107 
GLM_FUNC_DECL
 
	gbasic_f‹m©_ßvî
& 
	g›î©‹
=(
basic_f‹m©_ßvî
 const&);

110 
	gbasic_f‹m©_ßvî
<> 
	tf‹m©_ßvî
;

111 
	gbasic_f‹m©_ßvî
<
	twch¨_t
> 
	twf‹m©_ßvî
;

113 
	s¥ecisi⁄


115 
	gvÆue
;

117 
GLM_FUNC_DECL
 
ex∂icô
 
¥ecisi⁄
();

120 
	swidth


122 
	gvÆue
;

124 
GLM_FUNC_DECL
 
ex∂icô
 
width
();

127 
	gãm∂©e
 <
ty≥«me
 
	gCTy
>

128 
	sdñimëî


130 
CTy
 
	gvÆue
[3];

132 
GLM_FUNC_DECL
 
ex∂icô
 
dñimëî
(
CTy
 , CTy , CTy = ',');

135 
	s‹dî


137 
‹dî_ty≥
 
	gvÆue
;

139 
GLM_FUNC_DECL
 
ex∂icô
 
‹dî
(
‹dî_ty≥
);

144 
	gãm∂©e
 <
ty≥«me
 
	gFTy
,Åy≥«mê
	gCTy
,Åy≥«mê
	gCTr
>

145 
FTy
 c⁄°& 
gë_Á˚t
(
°d
::
basic_ios
<
CTy
,
CTr
>&);

146 
	gãm∂©e
 <
ty≥«me
 
	gFTy
,Åy≥«mê
	gCTy
,Åy≥«mê
	gCTr
>

147 
	g°d
::
basic_ios
<
CTy
,
	gCTr
>& 
f‹m©ãd
(
°d
::basic_ios<CTy,
CTr
>&);

148 
	gãm∂©e
 <
ty≥«me
 
	gFTy
,Åy≥«mê
	gCTy
,Åy≥«mê
	gCTr
>

149 
	g°d
::
basic_ios
<
CTy
,
	gCTr
>& 
unf‹m©ãt
(
°d
::basic_ios<CTy,
CTr
>&);

151 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
>

152 
	g°d
::
basic_o°ªam
<
CTy
, 
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy, CTr>&, 
¥ecisi⁄
 const&);

153 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
>

154 
	g°d
::
basic_o°ªam
<
CTy
, 
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy, CTr>&, 
width
 const&);

155 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
>

156 
	g°d
::
basic_o°ªam
<
CTy
, 
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy, CTr>&, 
	gdñimëî
<
	gCTy
> const&);

157 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
>

158 
	g°d
::
basic_o°ªam
<
CTy
, 
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy, CTr>&, 
‹dî
 const&);

161 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

162 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtqu©
<
	gT
,
	gP
> const&);

163 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

164 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtvec1
<
	gT
,
	gP
> const&);

165 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

166 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtvec2
<
	gT
,
	gP
> const&);

167 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

168 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtvec3
<
	gT
,
	gP
> const&);

169 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

170 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtvec4
<
	gT
,
	gP
> const&);

171 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

172 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtm©2x2
<
	gT
,
	gP
> const&);

173 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

174 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtm©2x3
<
	gT
,
	gP
> const&);

175 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

176 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtm©2x4
<
	gT
,
	gP
> const&);

177 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

178 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtm©3x2
<
	gT
,
	gP
> const&);

179 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

180 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtm©3x3
<
	gT
,
	gP
> const&);

181 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

182 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtm©3x4
<
	gT
,
	gP
> const&);

183 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

184 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtm©4x2
<
	gT
,
	gP
> const&);

185 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

186 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtm©4x3
<
	gT
,
	gP
> const&);

187 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

188 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>&, 
	gtm©4x4
<
	gT
,
	gP
> const&);

190 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
,Åy≥«mê
	gT
, 
¥ecisi⁄
 
	gP
>

191 
GLM_FUNC_DECL
 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
> & 
	g›î©‹
<<(std::basic_ostream<CTy,CTr> &,

192 
	g°d
::
∑ú
<
tm©4x4
<
T
,
	gP
> c⁄°, 
	gtm©4x4
<
	gT
,P> const> const &);

197 
	~"io.öl
"

	@glm/glm/gtx/log_base.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_log_baseÉxtension included")

22 
«me•a˚
 
	gglm


29 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

30 
GLM_FUNC_DECL
 
gíTy≥
 
log
(

31 
gíTy≥
 c⁄° & 
x
,

32 
gíTy≥
 c⁄° & 
ba£
);

36 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

37 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gT
, 
	gP
> 
sign
(

38 
vecTy≥
<
T
, 
P
> c⁄° & 
x
,

39 
vecTy≥
<
T
, 
P
> c⁄° & 
ba£
);

44 
	~"log_ba£.öl
"

	@glm/glm/gtx/matrix_cross_product.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_matrix_cross_productÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

31 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
m©rixCross3
(

32 
tvec3
<
T
, 
P
> c⁄° & 
x
);

36 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

37 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
m©rixCross4
(

38 
tvec3
<
T
, 
P
> c⁄° & 
x
);

43 
	~"m©rix_¸oss_¥odu˘.öl
"

	@glm/glm/gtx/matrix_decompose.hpp

13 #¥agm®
⁄˚


16 
	~"../m©4x4.hµ
"

17 
	~"../vec3.hµ
"

18 
	~"../vec4.hµ
"

19 
	~"../geomëric.hµ
"

20 
	~"../gtc/qu©îni⁄.hµ
"

21 
	~"../gtc/m©rix_å™sf‹m.hµ
"

23 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

24 #¥agm®
mesßge
("GLM: GLM_GTX_matrix_decomposeÉxtension included")

27 
«me•a˚
 
	gglm


34 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

35 
GLM_FUNC_DECL
 
boﬁ
 
decompo£
(

36 
tm©4x4
<
T
, 
P
> c⁄° & 
modñM©rix
,

37 
tvec3
<
T
, 
P
> & 
sˇÀ
, 
tqu©
<T, P> & 
‹õ¡©i⁄
,Åvec3<T, P> & 
å™¶©i⁄
,Åvec3<T, P> & 
skew
, 
tvec4
<T, P> & 
≥r•e˘ive
);

42 
	~"m©rix_decompo£.öl
"

	@glm/glm/gtx/matrix_interpolation.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_matrix_interpolationÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

31 
GLM_FUNC_DECL
 
axisAngÀ
(

32 
tm©4x4
<
T
, 
P
> c⁄° & 
m©
,

33 
tvec3
<
T
, 
P
> & 
axis
,

34 
T
 & 
™gÀ
);

38 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

39 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
axisAngÀM©rix
(

40 
tvec3
<
T
, 
P
> c⁄° & 
axis
,

41 
T
 c⁄° 
™gÀ
);

45 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

46 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
exåa˘M©rixRŸ©i⁄
(

47 
tm©4x4
<
T
, 
P
> c⁄° & 
m©
);

52 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

53 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
öãΩﬁ©e
(

54 
tm©4x4
<
T
, 
P
> c⁄° & 
m1
,

55 
tm©4x4
<
T
, 
P
> c⁄° & 
m2
,

56 
T
 c⁄° 
dñè
);

61 
	~"m©rix_öãΩﬁ©i⁄.öl
"

	@glm/glm/gtx/matrix_major_storage.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_matrix_major_storageÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

31 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
rowMaj‹2
(

32 
tvec2
<
T
, 
P
> c⁄° & 
v1
,

33 
tvec2
<
T
, 
P
> c⁄° & 
v2
);

37 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

38 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
rowMaj‹2
(

39 
tm©2x2
<
T
, 
P
> c⁄° & 
m
);

43 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

44 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
rowMaj‹3
(

45 
tvec3
<
T
, 
P
> c⁄° & 
v1
,

46 
tvec3
<
T
, 
P
> c⁄° & 
v2
,

47 
tvec3
<
T
, 
P
> c⁄° & 
v3
);

51 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

52 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
rowMaj‹3
(

53 
tm©3x3
<
T
, 
P
> c⁄° & 
m
);

57 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

58 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
rowMaj‹4
(

59 
tvec4
<
T
, 
P
> c⁄° & 
v1
,

60 
tvec4
<
T
, 
P
> c⁄° & 
v2
,

61 
tvec4
<
T
, 
P
> c⁄° & 
v3
,

62 
tvec4
<
T
, 
P
> c⁄° & 
v4
);

66 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

67 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
rowMaj‹4
(

68 
tm©4x4
<
T
, 
P
> c⁄° & 
m
);

72 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

73 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
cﬁMaj‹2
(

74 
tvec2
<
T
, 
P
> c⁄° & 
v1
,

75 
tvec2
<
T
, 
P
> c⁄° & 
v2
);

79 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

80 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
cﬁMaj‹2
(

81 
tm©2x2
<
T
, 
P
> c⁄° & 
m
);

85 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

86 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
cﬁMaj‹3
(

87 
tvec3
<
T
, 
P
> c⁄° & 
v1
,

88 
tvec3
<
T
, 
P
> c⁄° & 
v2
,

89 
tvec3
<
T
, 
P
> c⁄° & 
v3
);

93 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

94 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
cﬁMaj‹3
(

95 
tm©3x3
<
T
, 
P
> c⁄° & 
m
);

99 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

100 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
cﬁMaj‹4
(

101 
tvec4
<
T
, 
P
> c⁄° & 
v1
,

102 
tvec4
<
T
, 
P
> c⁄° & 
v2
,

103 
tvec4
<
T
, 
P
> c⁄° & 
v3
,

104 
tvec4
<
T
, 
P
> c⁄° & 
v4
);

108 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

109 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
cﬁMaj‹4
(

110 
tm©4x4
<
T
, 
P
> c⁄° & 
m
);

115 
	~"m©rix_maj‹_°‹age.öl
"

	@glm/glm/gtx/matrix_operation.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_matrix_operationÉxtension included")

22 
«me•a˚
 
	gglm


29 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

30 
GLM_FUNC_DECL
 
	gtm©2x2
<
	gT
, 
	gP
> 
düg⁄Æ2x2
(

31 
tvec2
<
T
, 
P
> c⁄° & 
v
);

35 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

36 
GLM_FUNC_DECL
 
	gtm©2x3
<
	gT
, 
	gP
> 
düg⁄Æ2x3
(

37 
tvec2
<
T
, 
P
> c⁄° & 
v
);

41 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

42 
GLM_FUNC_DECL
 
	gtm©2x4
<
	gT
, 
	gP
> 
düg⁄Æ2x4
(

43 
tvec2
<
T
, 
P
> c⁄° & 
v
);

47 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

48 
GLM_FUNC_DECL
 
	gtm©3x2
<
	gT
, 
	gP
> 
düg⁄Æ3x2
(

49 
tvec2
<
T
, 
P
> c⁄° & 
v
);

53 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

54 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
düg⁄Æ3x3
(

55 
tvec3
<
T
, 
P
> c⁄° & 
v
);

59 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

60 
GLM_FUNC_DECL
 
	gtm©3x4
<
	gT
, 
	gP
> 
düg⁄Æ3x4
(

61 
tvec3
<
T
, 
P
> c⁄° & 
v
);

65 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

66 
GLM_FUNC_DECL
 
	gtm©4x2
<
	gT
, 
	gP
> 
düg⁄Æ4x2
(

67 
tvec2
<
T
, 
P
> c⁄° & 
v
);

71 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

72 
GLM_FUNC_DECL
 
	gtm©4x3
<
	gT
, 
	gP
> 
düg⁄Æ4x3
(

73 
tvec3
<
T
, 
P
> c⁄° & 
v
);

77 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

78 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
düg⁄Æ4x4
(

79 
tvec4
<
T
, 
P
> c⁄° & 
v
);

84 
	~"m©rix_›î©i⁄.öl
"

	@glm/glm/gtx/matrix_query.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

18 
	~"../gtx/ve˘‹_quîy.hµ
"

19 
	~<limôs
>

21 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

22 #¥agm®
mesßge
("GLM: GLM_GTX_matrix_queryÉxtension included")

25 
«me•a˚
 
	gglm


32 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

33 
GLM_FUNC_DECL
 
boﬁ
 
isNuŒ
(
tm©2x2
<
T
, 
P
> c⁄° & 
m
, T c⁄° & 
ïsû⁄
);

37 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

38 
GLM_FUNC_DECL
 
boﬁ
 
isNuŒ
(
tm©3x3
<
T
, 
P
> c⁄° & 
m
, T c⁄° & 
ïsû⁄
);

42 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

43 
GLM_FUNC_DECL
 
boﬁ
 
isNuŒ
(
tm©4x4
<
T
, 
P
> c⁄° & 
m
, T c⁄° & 
ïsû⁄
);

47 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gm©Ty≥
>

48 
GLM_FUNC_DECL
 
boﬁ
 
isIdítôy
(
m©Ty≥
<
T
, 
P
> c⁄° & 
m
, T c⁄° & 
ïsû⁄
);

52 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

53 
GLM_FUNC_DECL
 
boﬁ
 
isN‹mÆized
(
tm©2x2
<
T
, 
P
> c⁄° & 
m
, T c⁄° & 
ïsû⁄
);

57 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

58 
GLM_FUNC_DECL
 
boﬁ
 
isN‹mÆized
(
tm©3x3
<
T
, 
P
> c⁄° & 
m
, T c⁄° & 
ïsû⁄
);

62 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

63 
GLM_FUNC_DECL
 
boﬁ
 
isN‹mÆized
(
tm©4x4
<
T
, 
P
> c⁄° & 
m
, T c⁄° & 
ïsû⁄
);

67 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gm©Ty≥
>

68 
GLM_FUNC_DECL
 
boﬁ
 
isOπhog⁄Æ
(
m©Ty≥
<
T
, 
P
> c⁄° & 
m
, T c⁄° & 
ïsû⁄
);

73 
	~"m©rix_quîy.öl
"

	@glm/glm/gtx/matrix_transform_2d.hpp

14 #¥agm®
⁄˚


17 
	~"../m©3x3.hµ
"

18 
	~"../vec2.hµ
"

21 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

22 #¥agm®
mesßge
("GLM: GLM_GTX_matrix_transform_2dÉxtension included")

25 
«me•a˚
 
	gglm


34 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

35 
GLM_FUNC_QUALIFIER
 
	gtm©3x3
<
	gT
, 
	gP
> 
å™¶©e
(

36 
tm©3x3
<
T
, 
P
> c⁄° & 
m
,

37 
tvec2
<
T
, 
P
> c⁄° & 
v
);

43 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

44 
GLM_FUNC_QUALIFIER
 
	gtm©3x3
<
	gT
, 
	gP
> 
rŸ©e
(

45 
tm©3x3
<
T
, 
P
> c⁄° & 
m
,

46 
T
 
™gÀ
);

52 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

53 
GLM_FUNC_QUALIFIER
 
	gtm©3x3
<
	gT
, 
	gP
> 
sˇÀ
(

54 
tm©3x3
<
T
, 
P
> c⁄° & 
m
,

55 
tvec2
<
T
, 
P
> c⁄° & 
v
);

61 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

62 
GLM_FUNC_QUALIFIER
 
	gtm©3x3
<
	gT
, 
	gP
> 
shórX
(

63 
tm©3x3
<
T
, 
P
> c⁄° & 
m
,

64 
T
 
y
);

70 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

71 
GLM_FUNC_QUALIFIER
 
	gtm©3x3
<
	gT
, 
	gP
> 
shórY
(

72 
tm©3x3
<
T
, 
P
> c⁄° & 
m
,

73 
T
 
x
);

78 
	~"m©rix_å™sf‹m_2d.öl
"

	@glm/glm/gtx/mixed_product.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_mixed_productÉxtension included")

22 
«me•a˚
 
	gglm


28 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

29 
GLM_FUNC_DECL
 
T
 
mixedProdu˘
(

30 
tvec3
<
T
, 
P
> c⁄° & 
v1
,

31 
tvec3
<
T
, 
P
> c⁄° & 
v2
,

32 
tvec3
<
T
, 
P
> c⁄° & 
v3
);

37 
	~"mixed_¥odu˘.öl
"

	@glm/glm/gtx/norm.hpp

14 #¥agm®
⁄˚


17 
	~"../dëaû/func_geomëric.hµ
"

18 
	~"../gtx/qu©îni⁄.hµ
"

20 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

21 #¥agm®
mesßge
("GLM: GLM_GTX_normÉxtension included")

24 
«me•a˚
 
	gglm


31 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

32 
GLM_FUNC_DECL
 
T
 
Àngth2
(

33 
vecTy≥
<
T
, 
P
> c⁄° & 
x
);

37 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

38 
GLM_FUNC_DECL
 
T
 
di°™˚2
(

39 
vecTy≥
<
T
, 
P
> c⁄° & 
p0
,

40 
vecTy≥
<
T
, 
P
> c⁄° & 
p1
);

44 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

45 
GLM_FUNC_DECL
 
T
 
l1N‹m
(

46 
tvec3
<
T
, 
P
> c⁄° & 
x
,

47 
tvec3
<
T
, 
P
> c⁄° & 
y
);

51 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

52 
GLM_FUNC_DECL
 
T
 
l1N‹m
(

53 
tvec3
<
T
, 
P
> c⁄° & 
v
);

57 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

58 
GLM_FUNC_DECL
 
T
 
l2N‹m
(

59 
tvec3
<
T
, 
P
> c⁄° & 
x
,

60 
tvec3
<
T
, 
P
> c⁄° & 
y
);

64 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

65 
GLM_FUNC_DECL
 
T
 
l2N‹m
(

66 
tvec3
<
T
, 
P
> c⁄° & 
x
);

70 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

71 
GLM_FUNC_DECL
 
T
 
lxN‹m
(

72 
tvec3
<
T
, 
P
> c⁄° & 
x
,

73 
tvec3
<
T
, 
P
> c⁄° & 
y
,

74 
Dïth
);

78 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

79 
GLM_FUNC_DECL
 
T
 
lxN‹m
(

80 
tvec3
<
T
, 
P
> c⁄° & 
x
,

81 
Dïth
);

86 
	~"n‹m.öl
"

	@glm/glm/gtx/normal.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_normalÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

31 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
åüngÀN‹mÆ
(

32 
tvec3
<
T
, 
P
> c⁄° & 
p1
,

33 
tvec3
<
T
, 
P
> c⁄° & 
p2
,

34 
tvec3
<
T
, 
P
> c⁄° & 
p3
);

39 
	~"n‹mÆ.öl
"

	@glm/glm/gtx/normalize_dot.hpp

14 #¥agm®
⁄˚


17 
	~"../gtx/Á°_squ¨e_roŸ.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_normalize_dotÉxtension included")

23 
«me•a˚
 
	gglm


32 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

33 
GLM_FUNC_DECL
 
T
 
n‹mÆizeDŸ
(
vecTy≥
<T, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

39 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

40 
GLM_FUNC_DECL
 
T
 
Á°N‹mÆizeDŸ
(
vecTy≥
<T, 
P
> c⁄° & 
x
, vecTy≥<T, P> c⁄° & 
y
);

45 
	~"n‹mÆize_dŸ.öl
"

	@glm/glm/gtx/number_precision.hpp

15 #¥agm®
⁄˚


18 
	~"../glm.hµ
"

19 
	~"../gtc/ty≥_¥ecisi⁄.hµ
"

21 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

22 #¥agm®
mesßge
("GLM: GLM_GTX_number_precisionÉxtension included")

25 
«me•a˚
 
	gglm
{

26 
«me•a˚
 
	ggtx


34 
u8
 
	tu8vec1
;

35 
u16
 
	tu16vec1
;

36 
u32
 
	tu32vec1
;

37 
u64
 
	tu64vec1
;

42 
f32
 
	tf32vec1
;

43 
f64
 
	tf64vec1
;

48 
f32
 
	tf32m©1
;

49 
f32
 
	tf32m©1x1
;

50 
f64
 
	tf64m©1
;

51 
f64
 
	tf64m©1x1
;

57 
	~"numbî_¥ecisi⁄.öl
"

	@glm/glm/gtx/optimum_pow.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_optimum_powÉxtension included")

22 
«me•a˚
 
	gglm
{

23 
«me•a˚
 
	ggtx


31 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

32 
GLM_FUNC_DECL
 
gíTy≥
 
pow2
(gíTy≥ c⁄° & 
x
);

37 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

38 
GLM_FUNC_DECL
 
gíTy≥
 
pow3
(gíTy≥ c⁄° & 
x
);

43 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

44 
GLM_FUNC_DECL
 
gíTy≥
 
pow4
(gíTy≥ c⁄° & 
x
);

50 
	~"›timum_pow.öl
"

	@glm/glm/gtx/orthonormalize.hpp

14 #¥agm®
⁄˚


17 
	~"../vec3.hµ
"

18 
	~"../m©3x3.hµ
"

19 
	~"../geomëric.hµ
"

21 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

22 #¥agm®
mesßge
("GLM: GLM_GTX_orthonormalizeÉxtension included")

25 
«me•a˚
 
	gglm


33 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

34 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
‹th⁄‹mÆize
(
tm©3x3
<
T
, 
P
> c⁄° & 
m
);

39 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

40 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
‹th⁄‹mÆize
(
tvec3
<
T
, 
P
> c⁄° & 
x
,Åvec3<T, P> c⁄° & 
y
);

45 
	~"‹th⁄‹mÆize.öl
"

	@glm/glm/gtx/perpendicular.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

18 
	~"../gtx/¥oje˘i⁄.hµ
"

20 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

21 #¥agm®
mesßge
("GLM: GLM_GTX_perpendicularÉxtension included")

24 
«me•a˚
 
	gglm


31 
	gãm∂©e
 <
ty≥«me
 
	gvecTy≥
>

32 
GLM_FUNC_DECL
 
vecTy≥
 
≥Ω
(

33 
vecTy≥
 c⁄° & 
x
,

34 
vecTy≥
 c⁄° & 
N‹mÆ
);

39 
	~"≥Ωídicuœr.öl
"

	@glm/glm/gtx/polar_coordinates.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_polar_coordinatesÉxtension included")

22 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

31 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
pﬁ¨
(

32 
tvec3
<
T
, 
P
> c⁄° & 
eu˛idón
);

37 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

38 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
eu˛idón
(

39 
tvec2
<
T
, 
P
> c⁄° & 
pﬁ¨
);

44 
	~"pﬁ¨_co‹dö©es.öl
"

	@glm/glm/gtx/projection.hpp

13 #¥agm®
⁄˚


16 
	~"../geomëric.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_projectionÉxtension included")

22 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	gvecTy≥
>

31 
GLM_FUNC_DECL
 
vecTy≥
 
¥oj
(vecTy≥ c⁄° & 
x
, vecTy≥ c⁄° & 
N‹mÆ
);

36 
	~"¥oje˘i⁄.öl
"

	@glm/glm/gtx/quaternion.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

18 
	~"../gtc/c⁄°™ts.hµ
"

19 
	~"../gtc/qu©îni⁄.hµ
"

20 
	~"../gtx/n‹m.hµ
"

22 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

23 #¥agm®
mesßge
("GLM: GLM_GTX_quaternionÉxtension included")

26 
«me•a˚
 
	gglm


34 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

35 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
¸oss
(

36 
tqu©
<
T
, 
P
> c⁄° & 
q
,

37 
tvec3
<
T
, 
P
> c⁄° & 
v
);

42 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

43 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
¸oss
(

44 
tvec3
<
T
, 
P
> c⁄° & 
v
,

45 
tqu©
<
T
, 
P
> c⁄° & 
q
);

51 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

52 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
squad
(

53 
tqu©
<
T
, 
P
> c⁄° & 
q1
,

54 
tqu©
<
T
, 
P
> c⁄° & 
q2
,

55 
tqu©
<
T
, 
P
> c⁄° & 
s1
,

56 
tqu©
<
T
, 
P
> c⁄° & 
s2
,

57 
T
 c⁄° & 
h
);

62 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

63 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
öãrmedüã
(

64 
tqu©
<
T
, 
P
> c⁄° & 
¥ev
,

65 
tqu©
<
T
, 
P
> c⁄° & 
cuº
,

66 
tqu©
<
T
, 
P
> c⁄° & 
√xt
);

71 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

72 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
exp
(

73 
tqu©
<
T
, 
P
> c⁄° & 
q
);

78 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

79 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
log
(

80 
tqu©
<
T
, 
P
> c⁄° & 
q
);

85 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

86 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
pow
(

87 
tqu©
<
T
, 
P
> c⁄° & 
x
,

88 
T
 c⁄° & 
y
);

100 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

101 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
rŸ©e
(

102 
tqu©
<
T
, 
P
> c⁄° & 
q
,

103 
tvec3
<
T
, 
P
> c⁄° & 
v
);

108 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

109 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
rŸ©e
(

110 
tqu©
<
T
, 
P
> c⁄° & 
q
,

111 
tvec4
<
T
, 
P
> c⁄° & 
v
);

116 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

117 
GLM_FUNC_DECL
 
T
 
exåa˘RólComp⁄ít
(

118 
tqu©
<
T
, 
P
> c⁄° & 
q
);

123 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

124 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
toM©3
(

125 
tqu©
<
T
, 
P
> c⁄° & 
x
){ 
m©3_ˇ°
(x);}

130 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

131 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
toM©4
(

132 
tqu©
<
T
, 
P
> c⁄° & 
x
){ 
m©4_ˇ°
(x);}

137 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

138 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
toQu©
(

139 
tm©3x3
<
T
, 
P
> c⁄° & 
x
){ 
qu©_ˇ°
(x);}

144 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

145 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
toQu©
(

146 
tm©4x4
<
T
, 
P
> c⁄° & 
x
){ 
qu©_ˇ°
(x);}

151 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

152 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
sh‹tMix
(

153 
tqu©
<
T
, 
P
> c⁄° & 
x
,

154 
tqu©
<
T
, 
P
> c⁄° & 
y
,

155 
T
 c⁄° & 
a
);

160 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

161 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
Á°Mix
(

162 
tqu©
<
T
, 
P
> c⁄° & 
x
,

163 
tqu©
<
T
, 
P
> c⁄° & 
y
,

164 
T
 c⁄° & 
a
);

171 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

172 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
rŸ©i⁄
(

173 
tvec3
<
T
, 
P
> c⁄° & 
‹ig
,

174 
tvec3
<
T
, 
P
> c⁄° & 
de°
);

179 
	gãm∂©e
<
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

180 
GLM_FUNC_DECL
 
T
 
Àngth2
(
tqu©
<T, 
P
> c⁄° & 
q
);

185 
	~"qu©îni⁄.öl
"

	@glm/glm/gtx/range.hpp

13 #¥agm®
⁄˚


16 
	~"../dëaû/£tup.hµ
"

18 #i‡!
GLM_HAS_RANGE_FOR


22 
	~"../gtc/ty≥_±r.hµ
"

23 
	~"../gtc/vec1.hµ
"

25 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

31 
ölöe
 
Àngth_t
 
comp⁄íts
(
tvec1
<
T
, 
P
> c⁄° & 
v
)

33  
	gv
.
Àngth
();

36 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

37 
ölöe
 
Àngth_t
 
comp⁄íts
(
tvec2
<
T
, 
P
> c⁄° & 
v
)

39  
	gv
.
Àngth
();

42 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

43 
ölöe
 
Àngth_t
 
comp⁄íts
(
tvec3
<
T
, 
P
> c⁄° & 
v
)

45  
	gv
.
Àngth
();

48 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

49 
ölöe
 
Àngth_t
 
comp⁄íts
(
tvec4
<
T
, 
P
> c⁄° & 
v
)

51  
	gv
.
Àngth
();

54 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

55 
ölöe
 
Àngth_t
 
comp⁄íts
(
gíTy≥
 c⁄° & 
m
)

57  
	gm
.
Àngth
() * m[0].length();

60 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

61 
ölöe
 
ty≥«me
 
	ggíTy≥
::
vÆue_ty≥
 c⁄° * 
begö
(
gíTy≥
 c⁄° & 
v
)

63  
vÆue_±r
(
v
);

66 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

67 
ölöe
 
ty≥«me
 
	ggíTy≥
::
vÆue_ty≥
 c⁄° * 
íd
(
gíTy≥
 c⁄° & 
v
)

69  
begö
(
v
Ë+ 
comp⁄íts
(v);

72 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

73 
ölöe
 
ty≥«me
 
	ggíTy≥
::
vÆue_ty≥
 * 
begö
(
gíTy≥
& 
v
)

75  
vÆue_±r
(
v
);

78 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

79 
ölöe
 
ty≥«me
 
	ggíTy≥
::
vÆue_ty≥
 * 
íd
(
gíTy≥
& 
v
)

81  
begö
(
v
Ë+ 
comp⁄íts
(v);

	@glm/glm/gtx/raw_data.hpp

13 #¥agm®
⁄˚


16 
	~"../dëaû/£tup.hµ
"

17 
	~"../dëaû/ty≥_öt.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_raw_dataÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gdëaû
::
	tuöt8
 
	tbyã
;

34 
	gdëaû
::
	tuöt16
 
	tw‹d
;

38 
	gdëaû
::
	tuöt32
 
	tdw‹d
;

42 
	gdëaû
::
	tuöt64
 
	tqw‹d
;

47 
	~"øw_d©a.öl
"

	@glm/glm/gtx/rotate_normalized_axis.hpp

15 #¥agm®
⁄˚


18 
	~"../glm.hµ
"

19 
	~"../gtc/ïsû⁄.hµ
"

20 
	~"../gtc/qu©îni⁄.hµ
"

22 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

23 #¥agm®
mesßge
("GLM: GLM_GTX_rotate_normalized_axisÉxtension included")

26 
«me•a˚
 
	gglm


42 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

43 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
rŸ©eN‹mÆizedAxis
(

44 
tm©4x4
<
T
, 
P
> c⁄° & 
m
,

45 
T
 c⁄° & 
™gÀ
,

46 
tvec3
<
T
, 
P
> c⁄° & 
axis
);

55 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

56 
GLM_FUNC_DECL
 
	gtqu©
<
	gT
, 
	gP
> 
rŸ©eN‹mÆizedAxis
(

57 
tqu©
<
T
, 
P
> c⁄° & 
q
,

58 
T
 c⁄° & 
™gÀ
,

59 
tvec3
<
T
, 
P
> c⁄° & 
axis
);

64 
	~"rŸ©e_n‹mÆized_axis.öl
"

	@glm/glm/gtx/rotate_vector.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

18 
	~"../gtx/å™sf‹m.hµ
"

20 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

21 #¥agm®
mesßge
("GLM: GLM_GTX_rotate_vectorÉxtension included")

24 
«me•a˚
 
	gglm


36 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

37 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
¶îp
(

38 
tvec3
<
T
, 
P
> c⁄° & 
x
,

39 
tvec3
<
T
, 
P
> c⁄° & 
y
,

40 
T
 c⁄° & 
a
);

44 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

45 
GLM_FUNC_DECL
 
	gtvec2
<
	gT
, 
	gP
> 
rŸ©e
(

46 
tvec2
<
T
, 
P
> c⁄° & 
v
,

47 
T
 c⁄° & 
™gÀ
);

51 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

52 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
rŸ©e
(

53 
tvec3
<
T
, 
P
> c⁄° & 
v
,

54 
T
 c⁄° & 
™gÀ
,

55 
tvec3
<
T
, 
P
> c⁄° & 
n‹mÆ
);

59 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

60 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
rŸ©e
(

61 
tvec4
<
T
, 
P
> c⁄° & 
v
,

62 
T
 c⁄° & 
™gÀ
,

63 
tvec3
<
T
, 
P
> c⁄° & 
n‹mÆ
);

67 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

68 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
rŸ©eX
(

69 
tvec3
<
T
, 
P
> c⁄° & 
v
,

70 
T
 c⁄° & 
™gÀ
);

74 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

75 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
rŸ©eY
(

76 
tvec3
<
T
, 
P
> c⁄° & 
v
,

77 
T
 c⁄° & 
™gÀ
);

81 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

82 
GLM_FUNC_DECL
 
	gtvec3
<
	gT
, 
	gP
> 
rŸ©eZ
(

83 
tvec3
<
T
, 
P
> c⁄° & 
v
,

84 
T
 c⁄° & 
™gÀ
);

88 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

89 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
rŸ©eX
(

90 
tvec4
<
T
, 
P
> c⁄° & 
v
,

91 
T
 c⁄° & 
™gÀ
);

95 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

96 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
rŸ©eY
(

97 
tvec4
<
T
, 
P
> c⁄° & 
v
,

98 
T
 c⁄° & 
™gÀ
);

102 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

103 
GLM_FUNC_DECL
 
	gtvec4
<
	gT
, 
	gP
> 
rŸ©eZ
(

104 
tvec4
<
T
, 
P
> c⁄° & 
v
,

105 
T
 c⁄° & 
™gÀ
);

109 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

110 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
‹õ¡©i⁄
(

111 
tvec3
<
T
, 
P
> c⁄° & 
N‹mÆ
,

112 
tvec3
<
T
, 
P
> c⁄° & 
Up
);

117 
	~"rŸ©e_ve˘‹.öl
"

	@glm/glm/gtx/scalar_multiplication.hpp

13 #¥agm®
⁄˚


15 
	~"../dëaû/£tup.hµ
"

17 #i‡!
GLM_HAS_TEMPLATE_ALIASES
 && !(
GLM_COMPILER
 & 
GLM_COMPILER_GCC
)

21 
	~"../vec2.hµ
"

22 
	~"../vec3.hµ
"

23 
	~"../vec4.hµ
"

24 
	~"../m©2x2.hµ
"

25 
	~<ty≥_åaôs
>

27 
«me•a˚
 
	gglm


29 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gVec
>

30 
usög
 
	gªtu∫_ty≥_sˇœr_mu…ùliˇti⁄
 = 
ty≥«me
 
°d
::
íabÀ_if
<

31 !
°d
::
is_ßme
<
T
, >::
vÆue


32 && 
°d
::
is_¨ôhmëic
<
T
>::
vÆue
, 
	gVec


33 >::
ty≥
;

35 
	#GLM_IMPLEMENT_SCAL_MULT
(
Vec
) \

36 
ãm∂©e
 <
ty≥«me
 
T
> \

37 
ªtu∫_ty≥_sˇœr_mu…ùliˇti⁄
<
T
, 
Vec
> \

38 
›î©‹
*(
T
 c⁄° & 
s
, 
Vec
 
rh
){ \

39  
rh
 *
°©ic_ˇ°
<>(
s
); \

42 
ãm∂©e
 <
ty≥«me
 
T
> \

43 
ªtu∫_ty≥_sˇœr_mu…ùliˇti⁄
<
T
, 
Vec
> \

44 
›î©‹
*(
Vec
 
lh
, 
T
 c⁄° & 
s
){ \

45  
lh
 *
°©ic_ˇ°
<>(
s
); \

48 
ãm∂©e
 <
ty≥«me
 
T
> \

49 
ªtu∫_ty≥_sˇœr_mu…ùliˇti⁄
<
T
, 
Vec
> \

50 
›î©‹
/(
Vec
 
lh
, 
T
 c⁄° & 
s
){ \

51  
lh
 *1.0‡/ 
s
; \

52 }

	)

54 
GLM_IMPLEMENT_SCAL_MULT
(
vec2
)

55 
GLM_IMPLEMENT_SCAL_MULT
(
vec3
)

56 
GLM_IMPLEMENT_SCAL_MULT
(
vec4
)

58 
GLM_IMPLEMENT_SCAL_MULT
(
m©2
)

59 
GLM_IMPLEMENT_SCAL_MULT
(
m©2x3
)

60 
GLM_IMPLEMENT_SCAL_MULT
(
m©2x4
)

61 
GLM_IMPLEMENT_SCAL_MULT
(
m©3x2
)

62 
GLM_IMPLEMENT_SCAL_MULT
(
m©3
)

63 
GLM_IMPLEMENT_SCAL_MULT
(
m©3x4
)

64 
GLM_IMPLEMENT_SCAL_MULT
(
m©4x2
)

65 
GLM_IMPLEMENT_SCAL_MULT
(
m©4x3
)

66 
GLM_IMPLEMENT_SCAL_MULT
(
m©4
)

68 #unde‡
GLM_IMPLEMENT_SCAL_MULT


	@glm/glm/gtx/scalar_relational.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

19 #¥agm®
mesßge
("GLM: GLM_GTX_extendÉxtension included")

22 
«me•a˚
 
	gglm


32 
	~"sˇœr_ªœti⁄Æ.öl
"

	@glm/glm/gtx/simd_mat4.hpp

13 #¥agm®
⁄˚


16 
	~"../dëaû/£tup.hµ
"

18 #if(
GLM_ARCH
 !
GLM_ARCH_PURE
)

20 #if(
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT
)

21 
	~"../dëaû/öåösic_m©rix.hµ
"

22 
	~"../gtx/simd_vec4.hµ
"

27 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

28 #¥agm®
mesßge
("GLM: GLM_GTX_simd_mat4Éxtension included")

29 #¥agm®
mesßge
("GLM: GLM_GTX_simd_mat4Éxtension is deprecatedánd will beÑemoved in GLM 0.9.9. Use mat4 insteadánd use compiler SIMDárguments.")

32 
«me•a˚
 
	gglm
{

33 
«me•a˚
 
	gdëaû


37 
GLM_ALIGNED_STRUCT
(16Ë
	gfm©4x4SIMD


39 
	tvÆue_ty≥
;

40 
fvec4SIMD
 
	tcﬁ_ty≥
;

41 
fvec4SIMD
 
	trow_ty≥
;

42 
	g°d
::
	tsize_t
 
	tsize_ty≥
;

43 
fm©4x4SIMD
 
	tty≥
;

44 
fm©4x4SIMD
 
	tå™•o£_ty≥
;

46 
	gtm©4x4
<, 
	tdeÁu…p
> 
	tpuª_ty≥
;

47 
	gtvec4
<, 
	tdeÁu…p
> 
	tpuª_row_ty≥
;

48 
	gtvec4
<, 
	tdeÁu…p
> 
	tpuª_cﬁ_ty≥
;

49 
	gtm©4x4
<, 
	tdeÁu…p
> 
	tpuª_å™•o£_ty≥
;

51 
GLM_FUNC_DECL
 
Àngth_t
 
Àngth
() const;

53 
fvec4SIMD
 
	gD©a
[4];

58 
fm©4x4SIMD
(Ë
	gGLM_DEFAULT_CTOR
;

59 
ex∂icô
 
fm©4x4SIMD
(c⁄° & 
s
);

60 
ex∂icô
 
fm©4x4SIMD
(

61 c⁄° & 
x0
, c⁄° & 
y0
, c⁄° & 
z0
, c⁄° & 
w0
,

62 c⁄° & 
x1
, c⁄° & 
y1
, c⁄° & 
z1
, c⁄° & 
w1
,

63 c⁄° & 
x2
, c⁄° & 
y2
, c⁄° & 
z2
, c⁄° & 
w2
,

64 c⁄° & 
x3
, c⁄° & 
y3
, c⁄° & 
z3
, c⁄° & 
w3
);

65 
ex∂icô
 
fm©4x4SIMD
(

66 
fvec4SIMD
 c⁄° & 
v0
,

67 
fvec4SIMD
 c⁄° & 
v1
,

68 
fvec4SIMD
 c⁄° & 
v2
,

69 
fvec4SIMD
 c⁄° & 
v3
);

70 
ex∂icô
 
fm©4x4SIMD
(

71 
m©4x4
 c⁄° & 
m
);

72 
ex∂icô
 
fm©4x4SIMD
(

73 
__m128
 c⁄° 
ö
[4]);

89 
	gfvec4SIMD
 & 
	g›î©‹
[](
Àngth_t
 
	gi
);

90 
fvec4SIMD
 c⁄° & 
	g›î©‹
[](
Àngth_t
 
	gi
) const;

93 
	gfm©4x4SIMD
 & 
	g›î©‹
(
fm©4x4SIMD
 c⁄° & 
m
Ë
GLM_DEFAULT
;

94 
	gfm©4x4SIMD
 & 
	g›î©‹
+(c⁄° & 
s
);

95 
	gfm©4x4SIMD
 & 
	g›î©‹
+(
fm©4x4SIMD
 c⁄° & 
m
);

96 
	gfm©4x4SIMD
 & 
	g›î©‹
-(c⁄° & 
s
);

97 
	gfm©4x4SIMD
 & 
	g›î©‹
-(
fm©4x4SIMD
 c⁄° & 
m
);

98 
	gfm©4x4SIMD
 & 
	g›î©‹
*(c⁄° & 
s
);

99 
	gfm©4x4SIMD
 & 
	g›î©‹
*(
fm©4x4SIMD
 c⁄° & 
m
);

100 
	gfm©4x4SIMD
 & 
	g›î©‹
/(c⁄° & 
s
);

101 
	gfm©4x4SIMD
 & 
	g›î©‹
/(
fm©4x4SIMD
 c⁄° & 
m
);

102 
	gfm©4x4SIMD
 & 
	g›î©‹
++ ();

103 
	gfm©4x4SIMD
 & 
	g›î©‹
-- ();

107 
fm©4x4SIMD
 
	g›î©‹
+ (fm©4x4SIMD c⁄° & 
	gm
, c⁄° & 
	gs
);

108 
fm©4x4SIMD
 
	g›î©‹
+ (c⁄° & 
	gs
, fm©4x4SIMD c⁄° & 
	gm
);

109 
fm©4x4SIMD
 
	g›î©‹
+ (fm©4x4SIMD c⁄° & 
	gm1
, fm©4x4SIMD c⁄° & 
	gm2
);

111 
fm©4x4SIMD
 
	g›î©‹
- (fm©4x4SIMD c⁄° & 
	gm
, c⁄° & 
	gs
);

112 
fm©4x4SIMD
 
	g›î©‹
- (c⁄° & 
	gs
, fm©4x4SIMD c⁄° & 
	gm
);

113 
fm©4x4SIMD
 
	g›î©‹
- (fm©4x4SIMD c⁄° & 
	gm1
, fm©4x4SIMD c⁄° & 
	gm2
);

115 
fm©4x4SIMD
 
	g›î©‹
* (fm©4x4SIMD c⁄° & 
	gm
, c⁄° & 
	gs
);

116 
fm©4x4SIMD
 
	g›î©‹
* (c⁄° & 
	gs
, fm©4x4SIMD c⁄° & 
	gm
);

118 
fvec4SIMD
 
	g›î©‹
* (
fm©4x4SIMD
 c⁄° & 
	gm
, fvec4SIMD c⁄° & 
	gv
);

119 
fvec4SIMD
 
	g›î©‹
* (fvec4SIMD c⁄° & 
	gv
, 
fm©4x4SIMD
 c⁄° & 
	gm
);

121 
fm©4x4SIMD
 
	g›î©‹
* (fm©4x4SIMD c⁄° & 
	gm1
, fm©4x4SIMD c⁄° & 
	gm2
);

123 
fm©4x4SIMD
 
	g›î©‹
/ (fm©4x4SIMD c⁄° & 
	gm
, c⁄° & 
	gs
);

124 
fm©4x4SIMD
 
	g›î©‹
/ (c⁄° & 
	gs
, fm©4x4SIMD c⁄° & 
	gm
);

126 
fvec4SIMD
 
	g›î©‹
/ (
fm©4x4SIMD
 c⁄° & 
	gm
, fvec4SIMD c⁄° & 
	gv
);

127 
fvec4SIMD
 
	g›î©‹
/ (fvec4SIMD c⁄° & 
	gv
, 
fm©4x4SIMD
 c⁄° & 
	gm
);

129 
fm©4x4SIMD
 
	g›î©‹
/ (fm©4x4SIMD c⁄° & 
	gm1
, fm©4x4SIMD c⁄° & 
	gm2
);

132 
fm©4x4SIMD
 c⁄° 
	g›î©‹
- (fm©4x4SIMD c⁄° & 
	gm
);

133 
fm©4x4SIMD
 c⁄° 
	g›î©‹
-- (fm©4x4SIMD c⁄° & 
	gm
, );

134 
fm©4x4SIMD
 c⁄° 
	g›î©‹
++ (fm©4x4SIMD c⁄° & 
	gm
, );

137 
	gdëaû
::
	tfm©4x4SIMD
 
	tsimdM©4
;

144 
m©4
 
m©4_ˇ°
(

145 
dëaû
::
fm©4x4SIMD
 c⁄° & 
x
);

150 
	gdëaû
::
fm©4x4SIMD
 
m©rixCompMu…
(

151 
dëaû
::
fm©4x4SIMD
 c⁄° & 
x
,

152 
dëaû
::
fm©4x4SIMD
 c⁄° & 
y
);

158 
	gdëaû
::
fm©4x4SIMD
 
ouãrProdu˘
(

159 
dëaû
::
fvec4SIMD
 c⁄° & 
c
,

160 
dëaû
::
fvec4SIMD
 c⁄° & 
r
);

164 
	gdëaû
::
fm©4x4SIMD
 
å™•o£
(

165 
dëaû
::
fm©4x4SIMD
 c⁄° & 
x
);

169 
dëîmö™t
(

170 
dëaû
::
fm©4x4SIMD
 c⁄° & 
m
);

174 
	gdëaû
::
fm©4x4SIMD
 
övî£
(

175 
dëaû
::
fm©4x4SIMD
 c⁄° & 
m
);

180 
	~"simd_m©4.öl
"

	@glm/glm/gtx/simd_quat.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

17 
	~"../gtc/qu©îni⁄.hµ
"

18 
	~"../gtx/Á°_åig⁄omëry.hµ
"

20 #i‡
GLM_ARCH
 !
GLM_ARCH_PURE


22 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


23 
	~"../gtx/simd_m©4.hµ
"

28 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

29 #¥agm®
mesßge
("GLM: GLM_GTX_simd_quatÉxtension included")

30 #¥agm®
mesßge
("GLM: GLM_GTX_simd_quatÉxtension is deprecatedánd will beÑemoved in GLM 0.9.9. Use GLM_GTC_quaternion insteadánd use compiler SIMDárguments.")

34 #i‡(
GLM_COMPILER
 & 
GLM_COMPILER_VC
)

35 #¥agm®
w¨nög
(
push
)

36 #¥agm®
w¨nög
(
dißbÀ
:4201)

39 
«me•a˚
 
	gglm
{

40 
«me•a˚
 
	gdëaû


42 
GLM_ALIGNED_STRUCT
(16Ë
	gfqu©SIMD


44 
	tvÆue_ty≥
;

45 
	g°d
::
	tsize_t
 
	tsize_ty≥
;

47 
fqu©SIMD
 
	tty≥
;

48 
	gtqu©
<
	tboﬁ
, 
	tdeÁu…p
> 
	tboﬁ_ty≥
;

49 
	gtqu©
<, 
	tdeÁu…p
> 
	tpuª_ty≥
;

51 #ifde‡
GLM_SIMD_ENABLE_XYZW_UNION


54 
__m128
 
	gD©a
;

55 °ru˘ {
	gx
, 
	gy
, 
	gz
, 
	gw
;};

58 
__m128
 
	gD©a
;

64 
fqu©SIMD
(Ë
	gGLM_DEFAULT_CTOR
;

65 
fqu©SIMD
(fqu©SIMD c⁄° & 
q
Ë
	gGLM_DEFAULT
;

66 
fqu©SIMD
(
__m128
 c⁄° & 
D©a
);

71 
ex∂icô
 
fqu©SIMD
(

72 
˘‹
);

73 
ex∂icô
 
fqu©SIMD
(

74 c⁄° & 
w
,

75 c⁄° & 
x
,

76 c⁄° & 
y
,

77 c⁄° & 
z
);

78 
ex∂icô
 
fqu©SIMD
(

79 
qu©
 c⁄° & 
v
);

80 
ex∂icô
 
fqu©SIMD
(

81 
vec3
 c⁄° & 
euÀrAngÀs
);

87 
	gfqu©SIMD
& 
	g›î©‹
(
fqu©SIMD
 c⁄° & 
q
Ë
GLM_DEFAULT
;

88 
	gfqu©SIMD
& 
	g›î©‹
*=(c⁄° & 
s
);

89 
	gfqu©SIMD
& 
	g›î©‹
/=(c⁄° & 
s
);

96 
	gdëaû
::
fqu©SIMD
 
›î©‹
- (

97 
dëaû
::
fqu©SIMD
 c⁄° & 
q
);

99 
	gdëaû
::
fqu©SIMD
 
›î©‹
+ (

100 
dëaû
::
fqu©SIMD
 c⁄° & 
q
,

101 
	gdëaû
::
fqu©SIMD
 c⁄° & 
p
);

103 
	gdëaû
::
fqu©SIMD
 
›î©‹
* (

104 
dëaû
::
fqu©SIMD
 c⁄° & 
q
,

105 
	gdëaû
::
fqu©SIMD
 c⁄° & 
p
);

107 
	gdëaû
::
fvec4SIMD
 
›î©‹
* (

108 
dëaû
::
fqu©SIMD
 c⁄° & 
q
,

109 
	gdëaû
::
fvec4SIMD
 c⁄° & 
v
);

111 
	gdëaû
::
fvec4SIMD
 
›î©‹
* (

112 
dëaû
::
fvec4SIMD
 c⁄° & 
v
,

113 
	gdëaû
::
fqu©SIMD
 c⁄° & 
q
);

115 
	gdëaû
::
fqu©SIMD
 
›î©‹
* (

116 
dëaû
::
fqu©SIMD
 c⁄° & 
q
,

117 
	gs
);

119 
	gdëaû
::
fqu©SIMD
 
›î©‹
* (

120 
s
,

121 
	gdëaû
::
fqu©SIMD
 c⁄° & 
q
);

123 
	gdëaû
::
fqu©SIMD
 
›î©‹
/ (

124 
dëaû
::
fqu©SIMD
 c⁄° & 
q
,

125 
	gs
);

132 
	gglm
::
	tdëaû
::
	tfqu©SIMD
 
	tsimdQu©
;

136 
qu©
 
qu©_ˇ°
(

137 
dëaû
::
fqu©SIMD
 c⁄° & 
x
);

141 
	gdëaû
::
fqu©SIMD
 
qu©SIMD_ˇ°
(

142 
dëaû
::
fm©4x4SIMD
 c⁄° & 
m
);

146 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

147 
	gdëaû
::
fqu©SIMD
 
qu©SIMD_ˇ°
(

148 
tm©4x4
<
T
, 
P
> c⁄° & 
m
);

152 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

153 
	gdëaû
::
fqu©SIMD
 
qu©SIMD_ˇ°
(

154 
tm©3x3
<
T
, 
P
> c⁄° & 
m
);

158 
	gdëaû
::
fm©4x4SIMD
 
m©4SIMD_ˇ°
(

159 
dëaû
::
fqu©SIMD
 c⁄° & 
q
);

163 
m©4
 
m©4_ˇ°
(

164 
dëaû
::
fqu©SIMD
 c⁄° & 
q
);

170 
Àngth
(

171 
dëaû
::
fqu©SIMD
 c⁄° & 
x
);

176 
	gdëaû
::
fqu©SIMD
 
n‹mÆize
(

177 
dëaû
::
fqu©SIMD
 c⁄° & 
x
);

182 
dŸ
(

183 
dëaû
::
fqu©SIMD
 c⁄° & 
q1
,

184 
dëaû
::
fqu©SIMD
 c⁄° & 
q2
);

196 
	gdëaû
::
fqu©SIMD
 
mix
(

197 
dëaû
::
fqu©SIMD
 c⁄° & 
x
,

198 
dëaû
::
fqu©SIMD
 c⁄° & 
y
,

199 c⁄° & 
a
);

209 
	gdëaû
::
fqu©SIMD
 
ÀΩ
(

210 
dëaû
::
fqu©SIMD
 c⁄° & 
x
,

211 
dëaû
::
fqu©SIMD
 c⁄° & 
y
,

212 c⁄° & 
a
);

222 
	gdëaû
::
fqu©SIMD
 
¶îp
(

223 
dëaû
::
fqu©SIMD
 c⁄° & 
x
,

224 
dëaû
::
fqu©SIMD
 c⁄° & 
y
,

225 c⁄° & 
a
);

238 
	gdëaû
::
fqu©SIMD
 
Á°Mix
(

239 
dëaû
::
fqu©SIMD
 c⁄° & 
x
,

240 
dëaû
::
fqu©SIMD
 c⁄° & 
y
,

241 c⁄° & 
a
);

250 
	gdëaû
::
fqu©SIMD
 
Á°SÀΩ
(

251 
dëaû
::
fqu©SIMD
 c⁄° & 
x
,

252 
dëaû
::
fqu©SIMD
 c⁄° & 
y
,

253 c⁄° & 
a
);

259 
	gdëaû
::
fqu©SIMD
 
c⁄jug©e
(

260 
dëaû
::
fqu©SIMD
 c⁄° & 
q
);

265 
	gdëaû
::
fqu©SIMD
 
övî£
(

266 
dëaû
::
fqu©SIMD
 c⁄° & 
q
);

274 
	gdëaû
::
fqu©SIMD
 
™gÀAxisSIMD
(

275 c⁄° & 
™gÀ
,

276 
vec3
 c⁄° & 
axis
);

286 
	gdëaû
::
fqu©SIMD
 
™gÀAxisSIMD
(

287 c⁄° & 
™gÀ
,

288 c⁄° & 
x
,

289 c⁄° & 
y
,

290 c⁄° & 
z
);

294 
__m128
 
Á°Sö
(__m128 
x
);

299 
	~"simd_qu©.öl
"

302 #i‡(
GLM_COMPILER
 & 
GLM_COMPILER_VC
)

303 #¥agm®
w¨nög
(
p›
)

	@glm/glm/gtx/simd_vec4.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

18 #if(
GLM_ARCH
 !
GLM_ARCH_PURE
)

20 #if(
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT
)

21 
	~"../dëaû/öåösic_comm⁄.hµ
"

22 
	~"../dëaû/öåösic_geomëric.hµ
"

23 
	~"../dëaû/öåösic_öãgî.hµ
"

28 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

29 #¥agm®
mesßge
("GLM: GLM_GTX_simd_vec4Éxtension included")

30 #¥agm®
mesßge
("GLM: GLM_GTX_simd_vec4Éxtension is deprecatedánd will beÑemoved in GLM 0.9.9. Use *vec4Åypes insteadánd use compiler SIMDárguments.")

35 #i‡(
GLM_COMPILER
 & 
GLM_COMPILER_VC
)

36 #¥agm®
w¨nög
(
push
)

37 #¥agm®
w¨nög
(
dißbÀ
:4201)

40 
«me•a˚
 
	gglm


42 
	ecomp


44 
	gX
 = 0,

45 
	gR
 = 0,

46 
	gS
 = 0,

47 
	gY
 = 1,

48 
	gG
 = 1,

49 
	gT
 = 1,

50 
	gZ
 = 2,

51 
	gB
 = 2,

52 
	gP
 = 2,

53 
	gW
 = 3,

54 
	gA
 = 3,

55 
	gQ
 = 3

60 
«me•a˚
 
	gglm
{

61 
«me•a˚
 
	gdëaû


65 
GLM_ALIGNED_STRUCT
(16Ë
	gfvec4SIMD


67 
	tvÆue_ty≥
;

68 
	g°d
::
	tsize_t
 
	tsize_ty≥
;

70 
fvec4SIMD
 
	tty≥
;

71 
	gtvec4
<, 
	tdeÁu…p
> 
	tpuª_ty≥
;

72 
	gtvec4
<
	tboﬁ
, 
	thighp
> 
	tboﬁ_ty≥
;

74 #ifde‡
GLM_SIMD_ENABLE_XYZW_UNION


77 
__m128
 
	gD©a
;

78 °ru˘ {
	gx
, 
	gy
, 
	gz
, 
	gw
;};

81 
__m128
 
	gD©a
;

87 
fvec4SIMD
(Ë
	gGLM_DEFAULT_CTOR
;

88 
fvec4SIMD
(fvec4SIMD c⁄° & 
v
Ë
	gGLM_DEFAULT
;

89 
fvec4SIMD
(
__m128
 c⁄° & 
D©a
);

94 
ex∂icô
 
fvec4SIMD
(

95 
˘‹
);

96 
ex∂icô
 
fvec4SIMD
(

97 c⁄° & 
s
);

98 
ex∂icô
 
fvec4SIMD
(

99 c⁄° & 
x
,

100 c⁄° & 
y
,

101 c⁄° & 
z
,

102 c⁄° & 
w
);

103 
ex∂icô
 
fvec4SIMD
(

104 
vec4
 c⁄° & 
v
);

109 
fvec4SIMD
(
vec2
 c⁄° & 
v
, c⁄° & 
s1
, c⁄° & 
s2
);

110 
fvec4SIMD
(c⁄° & 
s1
, 
vec2
 c⁄° & 
v
, c⁄° & 
s2
);

111 
fvec4SIMD
(c⁄° & 
s1
, c⁄° & 
s2
, 
vec2
 c⁄° & 
v
);

112 
fvec4SIMD
(
vec3
 c⁄° & 
v
, c⁄° & 
s
);

113 
fvec4SIMD
(c⁄° & 
s
, 
vec3
 c⁄° & 
v
);

114 
fvec4SIMD
(
vec2
 c⁄° & 
v1
, vec2 c⁄° & 
v2
);

120 
	gfvec4SIMD
& 
	g›î©‹
(
fvec4SIMD
 c⁄° & 
v
Ë
GLM_DEFAULT
;

121 
	gfvec4SIMD
& 
	g›î©‹
+=(
fvec4SIMD
 c⁄° & 
v
);

122 
	gfvec4SIMD
& 
	g›î©‹
-=(
fvec4SIMD
 c⁄° & 
v
);

123 
	gfvec4SIMD
& 
	g›î©‹
*=(
fvec4SIMD
 c⁄° & 
v
);

124 
	gfvec4SIMD
& 
	g›î©‹
/=(
fvec4SIMD
 c⁄° & 
v
);

126 
	gfvec4SIMD
& 
	g›î©‹
+=(c⁄° & 
s
);

127 
	gfvec4SIMD
& 
	g›î©‹
-=(c⁄° & 
s
);

128 
	gfvec4SIMD
& 
	g›î©‹
*=(c⁄° & 
s
);

129 
	gfvec4SIMD
& 
	g›î©‹
/=(c⁄° & 
s
);

131 
	gfvec4SIMD
& 
	g›î©‹
++();

132 
	gfvec4SIMD
& 
	g›î©‹
--();

137 
	gãm∂©e
 <
comp
 
	gX_
, com∞
	gY_
, com∞
	gZ_
, com∞
	gW_
>

138 
	gfvec4SIMD
& 
swizzÀ
();

139 
	gãm∂©e
 <
comp
 
	gX_
, com∞
	gY_
, com∞
	gZ_
, com∞
	gW_
>

140 
fvec4SIMD
 
swizzÀ
() const;

141 
	gãm∂©e
 <
comp
 
	gX_
, com∞
	gY_
, com∞
	gZ_
>

142 
fvec4SIMD
 
swizzÀ
() const;

143 
	gãm∂©e
 <
comp
 
	gX_
, com∞
	gY_
>

144 
fvec4SIMD
 
swizzÀ
() const;

145 
	gãm∂©e
 <
comp
 
	gX_
>

146 
fvec4SIMD
 
swizzÀ
() const;

150 
	gglm
::
	tdëaû
::
	tfvec4SIMD
 
	tsimdVec4
;

157 
vec4
 
vec4_ˇ°
(

158 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

162 
	gdëaû
::
fvec4SIMD
 
abs
(
dëaû
::fvec4SIMD c⁄° & 
x
);

166 
	gdëaû
::
fvec4SIMD
 
sign
(
dëaû
::fvec4SIMD c⁄° & 
x
);

170 
	gdëaû
::
fvec4SIMD
 
Êo‹
(
dëaû
::fvec4SIMD c⁄° & 
x
);

175 
	gdëaû
::
fvec4SIMD
 
åunc
(
dëaû
::fvec4SIMD c⁄° & 
x
);

184 
	gdëaû
::
fvec4SIMD
 
round
(
dëaû
::fvec4SIMD c⁄° & 
x
);

196 
	gdëaû
::
fvec4SIMD
 
˚û
(
dëaû
::fvec4SIMD c⁄° & 
x
);

201 
	gdëaû
::
fvec4SIMD
 
‰a˘
(
dëaû
::fvec4SIMD c⁄° & 
x
);

207 
	gdëaû
::
fvec4SIMD
 
mod
(

208 
dëaû
::
fvec4SIMD
 c⁄° & 
x
,

209 
dëaû
::
fvec4SIMD
 c⁄° & 
y
);

215 
	gdëaû
::
fvec4SIMD
 
mod
(

216 
dëaû
::
fvec4SIMD
 c⁄° & 
x
,

217 c⁄° & 
y
);

231 
	gdëaû
::
fvec4SIMD
 
mö
(

232 
dëaû
::
fvec4SIMD
 c⁄° & 
x
,

233 
dëaû
::
fvec4SIMD
 c⁄° & 
y
);

235 
	gdëaû
::
fvec4SIMD
 
mö
(

236 
dëaû
::
fvec4SIMD
 c⁄° & 
x
,

237 c⁄° & 
y
);

242 
	gdëaû
::
fvec4SIMD
 
max
(

243 
dëaû
::
fvec4SIMD
 c⁄° & 
x
,

244 
dëaû
::
fvec4SIMD
 c⁄° & 
y
);

246 
	gdëaû
::
fvec4SIMD
 
max
(

247 
dëaû
::
fvec4SIMD
 c⁄° & 
x
,

248 c⁄° & 
y
);

254 
	gdëaû
::
fvec4SIMD
 
˛amp
(

255 
dëaû
::
fvec4SIMD
 c⁄° & 
x
,

256 
dëaû
::
fvec4SIMD
 c⁄° & 
möVÆ
,

257 
dëaû
::
fvec4SIMD
 c⁄° & 
maxVÆ
);

259 
	gdëaû
::
fvec4SIMD
 
˛amp
(

260 
dëaû
::
fvec4SIMD
 c⁄° & 
x
,

261 c⁄° & 
möVÆ
,

262 c⁄° & 
maxVÆ
);

290 
	gdëaû
::
fvec4SIMD
 
mix
(

291 
dëaû
::
fvec4SIMD
 c⁄° & 
x
,

292 
dëaû
::
fvec4SIMD
 c⁄° & 
y
,

293 
dëaû
::
fvec4SIMD
 c⁄° & 
a
);

298 
	gdëaû
::
fvec4SIMD
 
°ï
(

299 
dëaû
::
fvec4SIMD
 c⁄° & 
edge
,

300 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

302 
	gdëaû
::
fvec4SIMD
 
°ï
(

303 c⁄° & 
edge
,

304 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

317 
	gdëaû
::
fvec4SIMD
 
smoŸh°ï
(

318 
dëaû
::
fvec4SIMD
 c⁄° & 
edge0
,

319 
dëaû
::
fvec4SIMD
 c⁄° & 
edge1
,

320 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

322 
	gdëaû
::
fvec4SIMD
 
smoŸh°ï
(

323 c⁄° & 
edge0
,

324 c⁄° & 
edge1
,

325 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

364 
	gdëaû
::
fvec4SIMD
 
fma
(

365 
dëaû
::
fvec4SIMD
 c⁄° & 
a
,

366 
dëaû
::
fvec4SIMD
 c⁄° & 
b
,

367 
dëaû
::
fvec4SIMD
 c⁄° & 
c
);

393 
Àngth
(

394 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

400 
Á°Lígth
(

401 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

407 
ni˚Lígth
(

408 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

413 
	gdëaû
::
fvec4SIMD
 
Àngth4
(

414 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

420 
	gdëaû
::
fvec4SIMD
 
Á°Lígth4
(

421 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

427 
	gdëaû
::
fvec4SIMD
 
ni˚Lígth4
(

428 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

433 
di°™˚
(

434 
dëaû
::
fvec4SIMD
 c⁄° & 
p0
,

435 
dëaû
::
fvec4SIMD
 c⁄° & 
p1
);

440 
	gdëaû
::
fvec4SIMD
 
di°™˚4
(

441 
dëaû
::
fvec4SIMD
 c⁄° & 
p0
,

442 
dëaû
::
fvec4SIMD
 c⁄° & 
p1
);

447 
simdDŸ
(

448 
dëaû
::
fvec4SIMD
 c⁄° & 
x
,

449 
dëaû
::
fvec4SIMD
 c⁄° & 
y
);

454 
	gdëaû
::
fvec4SIMD
 
dŸ4
(

455 
dëaû
::
fvec4SIMD
 c⁄° & 
x
,

456 
dëaû
::
fvec4SIMD
 c⁄° & 
y
);

461 
	gdëaû
::
fvec4SIMD
 
¸oss
(

462 
dëaû
::
fvec4SIMD
 c⁄° & 
x
,

463 
dëaû
::
fvec4SIMD
 c⁄° & 
y
);

468 
	gdëaû
::
fvec4SIMD
 
n‹mÆize
(

469 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

475 
	gdëaû
::
fvec4SIMD
 
Á°N‹mÆize
(

476 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

481 
	gdëaû
::
fvec4SIMD
 
simdFa˚f‹w¨d
(

482 
dëaû
::
fvec4SIMD
 c⁄° & 
N
,

483 
dëaû
::
fvec4SIMD
 c⁄° & 
I
,

484 
dëaû
::
fvec4SIMD
 c⁄° & 
Nªf
);

490 
	gdëaû
::
fvec4SIMD
 
ªÊe˘
(

491 
dëaû
::
fvec4SIMD
 c⁄° & 
I
,

492 
dëaû
::
fvec4SIMD
 c⁄° & 
N
);

499 
	gdëaû
::
fvec4SIMD
 
ª‰a˘
(

500 
dëaû
::
fvec4SIMD
 c⁄° & 
I
,

501 
dëaû
::
fvec4SIMD
 c⁄° & 
N
,

502 c⁄° & 
ëa
);

507 
	gdëaû
::
fvec4SIMD
 
sqπ
(

508 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

514 
	gdëaû
::
fvec4SIMD
 
ni˚Sqπ
(

515 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

521 
	gdëaû
::
fvec4SIMD
 
Á°Sqπ
(

522 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

527 
	gdëaû
::
fvec4SIMD
 
övî£sqπ
(

528 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

534 
	gdëaû
::
fvec4SIMD
 
Á°Invî£sqπ
(

535 
dëaû
::
fvec4SIMD
 c⁄° & 
x
);

540 
	~"simd_vec4.öl
"

542 #i‡(
GLM_COMPILER
 & 
GLM_COMPILER_VC
)

543 #¥agm®
w¨nög
(
p›
)

	@glm/glm/gtx/spline.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

17 
	~"../gtx/›timum_pow.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_splineÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

31 
GLM_FUNC_DECL
 
gíTy≥
 
ˇtmuŒRom
(

32 
gíTy≥
 c⁄° & 
v1
,

33 
gíTy≥
 c⁄° & 
v2
,

34 
gíTy≥
 c⁄° & 
v3
,

35 
gíTy≥
 c⁄° & 
v4
,

36 
ty≥«me
 
gíTy≥
::
vÆue_ty≥
 c⁄° & 
s
);

40 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

41 
GLM_FUNC_DECL
 
gíTy≥
 
hîmôe
(

42 
gíTy≥
 c⁄° & 
v1
,

43 
gíTy≥
 c⁄° & 
t1
,

44 
gíTy≥
 c⁄° & 
v2
,

45 
gíTy≥
 c⁄° & 
t2
,

46 
ty≥«me
 
gíTy≥
::
vÆue_ty≥
 c⁄° & 
s
);

50 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

51 
GLM_FUNC_DECL
 
gíTy≥
 
cubic
(

52 
gíTy≥
 c⁄° & 
v1
,

53 
gíTy≥
 c⁄° & 
v2
,

54 
gíTy≥
 c⁄° & 
v3
,

55 
gíTy≥
 c⁄° & 
v4
,

56 
ty≥«me
 
gíTy≥
::
vÆue_ty≥
 c⁄° & 
s
);

61 
	~"•löe.öl
"

	@glm/glm/gtx/std_based_type.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

17 
	~<c°dlib
>

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_std_based_typeÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gtvec1
<
	t°d
::
	tsize_t
, 
	tdeÁu…p
> 
	tsize1
;

34 
	gtvec2
<
	t°d
::
	tsize_t
, 
	tdeÁu…p
> 
	tsize2
;

38 
	gtvec3
<
	t°d
::
	tsize_t
, 
	tdeÁu…p
> 
	tsize3
;

42 
	gtvec4
<
	t°d
::
	tsize_t
, 
	tdeÁu…p
> 
	tsize4
;

46 
	gtvec1
<
	t°d
::
	tsize_t
, 
	tdeÁu…p
> 
	tsize1_t
;

50 
	gtvec2
<
	t°d
::
	tsize_t
, 
	tdeÁu…p
> 
	tsize2_t
;

54 
	gtvec3
<
	t°d
::
	tsize_t
, 
	tdeÁu…p
> 
	tsize3_t
;

58 
	gtvec4
<
	t°d
::
	tsize_t
, 
	tdeÁu…p
> 
	tsize4_t
;

63 
	~"°d_ba£d_ty≥.öl
"

	@glm/glm/gtx/string_cast.hpp

17 #¥agm®
⁄˚


20 
	~"../glm.hµ
"

21 
	~"../gtc/ty≥_¥ecisi⁄.hµ
"

22 
	~"../gtc/qu©îni⁄.hµ
"

23 
	~"../gtx/duÆ_qu©îni⁄.hµ
"

24 
	~<°rög
>

26 #if(
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
)

30 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

31 #¥agm®
mesßge
("GLM: GLM_GTX_string_castÉxtension included")

34 
«me•a˚
 
	gglm


41 
	gãm∂©e
 <ãm∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gm©Ty≥
, 
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

42 
GLM_FUNC_DECL
 
	g°d
::
°rög
 
to_°rög
(
m©Ty≥
<
T
, 
P
> c⁄° & 
x
);

47 
	~"°rög_ˇ°.öl
"

	@glm/glm/gtx/transform.hpp

16 #¥agm®
⁄˚


19 
	~"../glm.hµ
"

20 
	~"../gtc/m©rix_å™sf‹m.hµ
"

22 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

23 #¥agm®
mesßge
("GLM: GLM_GTX_transformÉxtension included")

26 
«me•a˚
 
	gglm


34 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

35 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
å™¶©e
(

36 
tvec3
<
T
, 
P
> c⁄° & 
v
);

41 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

42 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
rŸ©e
(

43 
T
 
™gÀ
,

44 
tvec3
<
T
, 
P
> c⁄° & 
v
);

49 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

50 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
sˇÀ
(

51 
tvec3
<
T
, 
P
> c⁄° & 
v
);

56 
	~"å™sf‹m.öl
"

	@glm/glm/gtx/transform2.hpp

14 #¥agm®
⁄˚


17 
	~"../glm.hµ
"

18 
	~"../gtx/å™sf‹m.hµ
"

20 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

21 #¥agm®
mesßge
("GLM: GLM_GTX_transform2Éxtension included")

24 
«me•a˚
 
	gglm


31 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

32 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
shórX2D
(

33 
tm©3x3
<
T
, 
P
> c⁄° & 
m
,

34 
T
 
y
);

38 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

39 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
shórY2D
(

40 
tm©3x3
<
T
, 
P
> c⁄° & 
m
,

41 
T
 
x
);

45 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

46 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
shórX3D
(

47 c⁄° 
tm©4x4
<
T
, 
P
> & 
m
,

48 
T
 
y
,

49 
T
 
z
);

53 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

54 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
shórY3D
(

55 c⁄° 
tm©4x4
<
T
, 
P
> & 
m
,

56 
T
 
x
,

57 
T
 
z
);

61 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

62 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
shórZ3D
(

63 c⁄° 
tm©4x4
<
T
, 
P
> & 
m
,

64 
T
 
x
,

65 
T
 
y
);

77 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

78 
GLM_FUNC_DECL
 
	gtm©3x3
<
	gT
, 
	gP
> 
¥oj2D
(

79 c⁄° 
tm©3x3
<
T
, 
P
> & 
m
,

80 c⁄° 
tvec3
<
T
, 
P
>& 
n‹mÆ
);

84 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

85 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gT
, 
	gP
> 
¥oj3D
(

86 c⁄° 
tm©4x4
<
T
, 
P
> & 
m
,

87 c⁄° 
tvec3
<
T
, 
P
>& 
n‹mÆ
);

91 
	gãm∂©e
 <
ty≥«me
 
	gvÆTy≥
, 
¥ecisi⁄
 
	gP
>

92 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gvÆTy≥
, 
	gP
> 
sˇÀBüs
(

93 
vÆTy≥
 
sˇÀ
,

94 
vÆTy≥
 
büs
);

98 
	gãm∂©e
 <
ty≥«me
 
	gvÆTy≥
, 
¥ecisi⁄
 
	gP
>

99 
GLM_FUNC_DECL
 
	gtm©4x4
<
	gvÆTy≥
, 
	gP
> 
sˇÀBüs
(

100 
tm©4x4
<
vÆTy≥
, 
P
> c⁄° & 
m
,

101 
vÆTy≥
 
sˇÀ
,

102 
vÆTy≥
 
büs
);

107 
	~"å™sf‹m2.öl
"

	@glm/glm/gtx/type_aligned.hpp

16 #¥agm®
⁄˚


19 
	~"../gtc/ty≥_¥ecisi⁄.hµ
"

21 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

22 #¥agm®
mesßge
("GLM: GLM_GTX_type_alignedÉxtension included")

25 
«me•a˚
 
	gglm


35 
GLM_ALIGNED_TYPEDEF
(
lowp_öt8
, 
Æig√d_lowp_öt8
, 1);

39 
GLM_ALIGNED_TYPEDEF
(
lowp_öt16
, 
Æig√d_lowp_öt16
, 2);

43 
GLM_ALIGNED_TYPEDEF
(
lowp_öt32
, 
Æig√d_lowp_öt32
, 4);

47 
GLM_ALIGNED_TYPEDEF
(
lowp_öt64
, 
Æig√d_lowp_öt64
, 8);

52 
GLM_ALIGNED_TYPEDEF
(
lowp_öt8_t
, 
Æig√d_lowp_öt8_t
, 1);

56 
GLM_ALIGNED_TYPEDEF
(
lowp_öt16_t
, 
Æig√d_lowp_öt16_t
, 2);

60 
GLM_ALIGNED_TYPEDEF
(
lowp_öt32_t
, 
Æig√d_lowp_öt32_t
, 4);

64 
GLM_ALIGNED_TYPEDEF
(
lowp_öt64_t
, 
Æig√d_lowp_öt64_t
, 8);

69 
GLM_ALIGNED_TYPEDEF
(
lowp_i8
, 
Æig√d_lowp_i8
, 1);

73 
GLM_ALIGNED_TYPEDEF
(
lowp_i16
, 
Æig√d_lowp_i16
, 2);

77 
GLM_ALIGNED_TYPEDEF
(
lowp_i32
, 
Æig√d_lowp_i32
, 4);

81 
GLM_ALIGNED_TYPEDEF
(
lowp_i64
, 
Æig√d_lowp_i64
, 8);

86 
GLM_ALIGNED_TYPEDEF
(
mediump_öt8
, 
Æig√d_mediump_öt8
, 1);

90 
GLM_ALIGNED_TYPEDEF
(
mediump_öt16
, 
Æig√d_mediump_öt16
, 2);

94 
GLM_ALIGNED_TYPEDEF
(
mediump_öt32
, 
Æig√d_mediump_öt32
, 4);

98 
GLM_ALIGNED_TYPEDEF
(
mediump_öt64
, 
Æig√d_mediump_öt64
, 8);

103 
GLM_ALIGNED_TYPEDEF
(
mediump_öt8_t
, 
Æig√d_mediump_öt8_t
, 1);

107 
GLM_ALIGNED_TYPEDEF
(
mediump_öt16_t
, 
Æig√d_mediump_öt16_t
, 2);

111 
GLM_ALIGNED_TYPEDEF
(
mediump_öt32_t
, 
Æig√d_mediump_öt32_t
, 4);

115 
GLM_ALIGNED_TYPEDEF
(
mediump_öt64_t
, 
Æig√d_mediump_öt64_t
, 8);

120 
GLM_ALIGNED_TYPEDEF
(
mediump_i8
, 
Æig√d_mediump_i8
, 1);

124 
GLM_ALIGNED_TYPEDEF
(
mediump_i16
, 
Æig√d_mediump_i16
, 2);

128 
GLM_ALIGNED_TYPEDEF
(
mediump_i32
, 
Æig√d_mediump_i32
, 4);

132 
GLM_ALIGNED_TYPEDEF
(
mediump_i64
, 
Æig√d_mediump_i64
, 8);

137 
GLM_ALIGNED_TYPEDEF
(
highp_öt8
, 
Æig√d_highp_öt8
, 1);

141 
GLM_ALIGNED_TYPEDEF
(
highp_öt16
, 
Æig√d_highp_öt16
, 2);

145 
GLM_ALIGNED_TYPEDEF
(
highp_öt32
, 
Æig√d_highp_öt32
, 4);

149 
GLM_ALIGNED_TYPEDEF
(
highp_öt64
, 
Æig√d_highp_öt64
, 8);

154 
GLM_ALIGNED_TYPEDEF
(
highp_öt8_t
, 
Æig√d_highp_öt8_t
, 1);

158 
GLM_ALIGNED_TYPEDEF
(
highp_öt16_t
, 
Æig√d_highp_öt16_t
, 2);

162 
GLM_ALIGNED_TYPEDEF
(
highp_öt32_t
, 
Æig√d_highp_öt32_t
, 4);

166 
GLM_ALIGNED_TYPEDEF
(
highp_öt64_t
, 
Æig√d_highp_öt64_t
, 8);

171 
GLM_ALIGNED_TYPEDEF
(
highp_i8
, 
Æig√d_highp_i8
, 1);

175 
GLM_ALIGNED_TYPEDEF
(
highp_i16
, 
Æig√d_highp_i16
, 2);

179 
GLM_ALIGNED_TYPEDEF
(
highp_i32
, 
Æig√d_highp_i32
, 4);

183 
GLM_ALIGNED_TYPEDEF
(
highp_i64
, 
Æig√d_highp_i64
, 8);

188 
GLM_ALIGNED_TYPEDEF
(
öt8
, 
Æig√d_öt8
, 1);

192 
GLM_ALIGNED_TYPEDEF
(
öt16
, 
Æig√d_öt16
, 2);

196 
GLM_ALIGNED_TYPEDEF
(
öt32
, 
Æig√d_öt32
, 4);

200 
GLM_ALIGNED_TYPEDEF
(
öt64
, 
Æig√d_öt64
, 8);

205 
GLM_ALIGNED_TYPEDEF
(
öt8_t
, 
Æig√d_öt8_t
, 1);

209 
GLM_ALIGNED_TYPEDEF
(
öt16_t
, 
Æig√d_öt16_t
, 2);

213 
GLM_ALIGNED_TYPEDEF
(
öt32_t
, 
Æig√d_öt32_t
, 4);

217 
GLM_ALIGNED_TYPEDEF
(
öt64_t
, 
Æig√d_öt64_t
, 8);

222 
GLM_ALIGNED_TYPEDEF
(
i8
, 
Æig√d_i8
, 1);

226 
GLM_ALIGNED_TYPEDEF
(
i16
, 
Æig√d_i16
, 2);

230 
GLM_ALIGNED_TYPEDEF
(
i32
, 
Æig√d_i32
, 4);

234 
GLM_ALIGNED_TYPEDEF
(
i64
, 
Æig√d_i64
, 8);

239 
GLM_ALIGNED_TYPEDEF
(
ivec1
, 
Æig√d_ivec1
, 4);

243 
GLM_ALIGNED_TYPEDEF
(
ivec2
, 
Æig√d_ivec2
, 8);

247 
GLM_ALIGNED_TYPEDEF
(
ivec3
, 
Æig√d_ivec3
, 16);

251 
GLM_ALIGNED_TYPEDEF
(
ivec4
, 
Æig√d_ivec4
, 16);

256 
GLM_ALIGNED_TYPEDEF
(
i8vec1
, 
Æig√d_i8vec1
, 1);

260 
GLM_ALIGNED_TYPEDEF
(
i8vec2
, 
Æig√d_i8vec2
, 2);

264 
GLM_ALIGNED_TYPEDEF
(
i8vec3
, 
Æig√d_i8vec3
, 4);

268 
GLM_ALIGNED_TYPEDEF
(
i8vec4
, 
Æig√d_i8vec4
, 4);

273 
GLM_ALIGNED_TYPEDEF
(
i16vec1
, 
Æig√d_i16vec1
, 2);

277 
GLM_ALIGNED_TYPEDEF
(
i16vec2
, 
Æig√d_i16vec2
, 4);

281 
GLM_ALIGNED_TYPEDEF
(
i16vec3
, 
Æig√d_i16vec3
, 8);

285 
GLM_ALIGNED_TYPEDEF
(
i16vec4
, 
Æig√d_i16vec4
, 8);

290 
GLM_ALIGNED_TYPEDEF
(
i32vec1
, 
Æig√d_i32vec1
, 4);

294 
GLM_ALIGNED_TYPEDEF
(
i32vec2
, 
Æig√d_i32vec2
, 8);

298 
GLM_ALIGNED_TYPEDEF
(
i32vec3
, 
Æig√d_i32vec3
, 16);

302 
GLM_ALIGNED_TYPEDEF
(
i32vec4
, 
Æig√d_i32vec4
, 16);

307 
GLM_ALIGNED_TYPEDEF
(
i64vec1
, 
Æig√d_i64vec1
, 8);

311 
GLM_ALIGNED_TYPEDEF
(
i64vec2
, 
Æig√d_i64vec2
, 16);

315 
GLM_ALIGNED_TYPEDEF
(
i64vec3
, 
Æig√d_i64vec3
, 32);

319 
GLM_ALIGNED_TYPEDEF
(
i64vec4
, 
Æig√d_i64vec4
, 32);

327 
GLM_ALIGNED_TYPEDEF
(
lowp_uöt8
, 
Æig√d_lowp_uöt8
, 1);

331 
GLM_ALIGNED_TYPEDEF
(
lowp_uöt16
, 
Æig√d_lowp_uöt16
, 2);

335 
GLM_ALIGNED_TYPEDEF
(
lowp_uöt32
, 
Æig√d_lowp_uöt32
, 4);

339 
GLM_ALIGNED_TYPEDEF
(
lowp_uöt64
, 
Æig√d_lowp_uöt64
, 8);

344 
GLM_ALIGNED_TYPEDEF
(
lowp_uöt8_t
, 
Æig√d_lowp_uöt8_t
, 1);

348 
GLM_ALIGNED_TYPEDEF
(
lowp_uöt16_t
, 
Æig√d_lowp_uöt16_t
, 2);

352 
GLM_ALIGNED_TYPEDEF
(
lowp_uöt32_t
, 
Æig√d_lowp_uöt32_t
, 4);

356 
GLM_ALIGNED_TYPEDEF
(
lowp_uöt64_t
, 
Æig√d_lowp_uöt64_t
, 8);

361 
GLM_ALIGNED_TYPEDEF
(
lowp_u8
, 
Æig√d_lowp_u8
, 1);

365 
GLM_ALIGNED_TYPEDEF
(
lowp_u16
, 
Æig√d_lowp_u16
, 2);

369 
GLM_ALIGNED_TYPEDEF
(
lowp_u32
, 
Æig√d_lowp_u32
, 4);

373 
GLM_ALIGNED_TYPEDEF
(
lowp_u64
, 
Æig√d_lowp_u64
, 8);

378 
GLM_ALIGNED_TYPEDEF
(
mediump_uöt8
, 
Æig√d_mediump_uöt8
, 1);

382 
GLM_ALIGNED_TYPEDEF
(
mediump_uöt16
, 
Æig√d_mediump_uöt16
, 2);

386 
GLM_ALIGNED_TYPEDEF
(
mediump_uöt32
, 
Æig√d_mediump_uöt32
, 4);

390 
GLM_ALIGNED_TYPEDEF
(
mediump_uöt64
, 
Æig√d_mediump_uöt64
, 8);

395 
GLM_ALIGNED_TYPEDEF
(
mediump_uöt8_t
, 
Æig√d_mediump_uöt8_t
, 1);

399 
GLM_ALIGNED_TYPEDEF
(
mediump_uöt16_t
, 
Æig√d_mediump_uöt16_t
, 2);

403 
GLM_ALIGNED_TYPEDEF
(
mediump_uöt32_t
, 
Æig√d_mediump_uöt32_t
, 4);

407 
GLM_ALIGNED_TYPEDEF
(
mediump_uöt64_t
, 
Æig√d_mediump_uöt64_t
, 8);

412 
GLM_ALIGNED_TYPEDEF
(
mediump_u8
, 
Æig√d_mediump_u8
, 1);

416 
GLM_ALIGNED_TYPEDEF
(
mediump_u16
, 
Æig√d_mediump_u16
, 2);

420 
GLM_ALIGNED_TYPEDEF
(
mediump_u32
, 
Æig√d_mediump_u32
, 4);

424 
GLM_ALIGNED_TYPEDEF
(
mediump_u64
, 
Æig√d_mediump_u64
, 8);

429 
GLM_ALIGNED_TYPEDEF
(
highp_uöt8
, 
Æig√d_highp_uöt8
, 1);

433 
GLM_ALIGNED_TYPEDEF
(
highp_uöt16
, 
Æig√d_highp_uöt16
, 2);

437 
GLM_ALIGNED_TYPEDEF
(
highp_uöt32
, 
Æig√d_highp_uöt32
, 4);

441 
GLM_ALIGNED_TYPEDEF
(
highp_uöt64
, 
Æig√d_highp_uöt64
, 8);

446 
GLM_ALIGNED_TYPEDEF
(
highp_uöt8_t
, 
Æig√d_highp_uöt8_t
, 1);

450 
GLM_ALIGNED_TYPEDEF
(
highp_uöt16_t
, 
Æig√d_highp_uöt16_t
, 2);

454 
GLM_ALIGNED_TYPEDEF
(
highp_uöt32_t
, 
Æig√d_highp_uöt32_t
, 4);

458 
GLM_ALIGNED_TYPEDEF
(
highp_uöt64_t
, 
Æig√d_highp_uöt64_t
, 8);

463 
GLM_ALIGNED_TYPEDEF
(
highp_u8
, 
Æig√d_highp_u8
, 1);

467 
GLM_ALIGNED_TYPEDEF
(
highp_u16
, 
Æig√d_highp_u16
, 2);

471 
GLM_ALIGNED_TYPEDEF
(
highp_u32
, 
Æig√d_highp_u32
, 4);

475 
GLM_ALIGNED_TYPEDEF
(
highp_u64
, 
Æig√d_highp_u64
, 8);

480 
GLM_ALIGNED_TYPEDEF
(
uöt8
, 
Æig√d_uöt8
, 1);

484 
GLM_ALIGNED_TYPEDEF
(
uöt16
, 
Æig√d_uöt16
, 2);

488 
GLM_ALIGNED_TYPEDEF
(
uöt32
, 
Æig√d_uöt32
, 4);

492 
GLM_ALIGNED_TYPEDEF
(
uöt64
, 
Æig√d_uöt64
, 8);

497 
GLM_ALIGNED_TYPEDEF
(
uöt8_t
, 
Æig√d_uöt8_t
, 1);

501 
GLM_ALIGNED_TYPEDEF
(
uöt16_t
, 
Æig√d_uöt16_t
, 2);

505 
GLM_ALIGNED_TYPEDEF
(
uöt32_t
, 
Æig√d_uöt32_t
, 4);

509 
GLM_ALIGNED_TYPEDEF
(
uöt64_t
, 
Æig√d_uöt64_t
, 8);

514 
GLM_ALIGNED_TYPEDEF
(
u8
, 
Æig√d_u8
, 1);

518 
GLM_ALIGNED_TYPEDEF
(
u16
, 
Æig√d_u16
, 2);

522 
GLM_ALIGNED_TYPEDEF
(
u32
, 
Æig√d_u32
, 4);

526 
GLM_ALIGNED_TYPEDEF
(
u64
, 
Æig√d_u64
, 8);

531 
GLM_ALIGNED_TYPEDEF
(
uvec1
, 
Æig√d_uvec1
, 4);

535 
GLM_ALIGNED_TYPEDEF
(
uvec2
, 
Æig√d_uvec2
, 8);

539 
GLM_ALIGNED_TYPEDEF
(
uvec3
, 
Æig√d_uvec3
, 16);

543 
GLM_ALIGNED_TYPEDEF
(
uvec4
, 
Æig√d_uvec4
, 16);

548 
GLM_ALIGNED_TYPEDEF
(
u8vec1
, 
Æig√d_u8vec1
, 1);

552 
GLM_ALIGNED_TYPEDEF
(
u8vec2
, 
Æig√d_u8vec2
, 2);

556 
GLM_ALIGNED_TYPEDEF
(
u8vec3
, 
Æig√d_u8vec3
, 4);

560 
GLM_ALIGNED_TYPEDEF
(
u8vec4
, 
Æig√d_u8vec4
, 4);

565 
GLM_ALIGNED_TYPEDEF
(
u16vec1
, 
Æig√d_u16vec1
, 2);

569 
GLM_ALIGNED_TYPEDEF
(
u16vec2
, 
Æig√d_u16vec2
, 4);

573 
GLM_ALIGNED_TYPEDEF
(
u16vec3
, 
Æig√d_u16vec3
, 8);

577 
GLM_ALIGNED_TYPEDEF
(
u16vec4
, 
Æig√d_u16vec4
, 8);

582 
GLM_ALIGNED_TYPEDEF
(
u32vec1
, 
Æig√d_u32vec1
, 4);

586 
GLM_ALIGNED_TYPEDEF
(
u32vec2
, 
Æig√d_u32vec2
, 8);

590 
GLM_ALIGNED_TYPEDEF
(
u32vec3
, 
Æig√d_u32vec3
, 16);

594 
GLM_ALIGNED_TYPEDEF
(
u32vec4
, 
Æig√d_u32vec4
, 16);

599 
GLM_ALIGNED_TYPEDEF
(
u64vec1
, 
Æig√d_u64vec1
, 8);

603 
GLM_ALIGNED_TYPEDEF
(
u64vec2
, 
Æig√d_u64vec2
, 16);

607 
GLM_ALIGNED_TYPEDEF
(
u64vec3
, 
Æig√d_u64vec3
, 32);

611 
GLM_ALIGNED_TYPEDEF
(
u64vec4
, 
Æig√d_u64vec4
, 32);

619 
GLM_ALIGNED_TYPEDEF
(
Êﬂt32
, 
Æig√d_Êﬂt32
, 4);

623 
GLM_ALIGNED_TYPEDEF
(
Êﬂt64
, 
Æig√d_Êﬂt64
, 8);

628 
GLM_ALIGNED_TYPEDEF
(
Êﬂt32_t
, 
Æig√d_Êﬂt32_t
, 4);

632 
GLM_ALIGNED_TYPEDEF
(
Êﬂt64_t
, 
Æig√d_Êﬂt64_t
, 8);

637 
GLM_ALIGNED_TYPEDEF
(
Êﬂt32
, 
Æig√d_f32
, 4);

641 
GLM_ALIGNED_TYPEDEF
(
Êﬂt64
, 
Æig√d_f64
, 8);

646 
GLM_ALIGNED_TYPEDEF
(
vec1
, 
Æig√d_vec1
, 4);

650 
GLM_ALIGNED_TYPEDEF
(
vec2
, 
Æig√d_vec2
, 8);

654 
GLM_ALIGNED_TYPEDEF
(
vec3
, 
Æig√d_vec3
, 16);

658 
GLM_ALIGNED_TYPEDEF
(
vec4
, 
Æig√d_vec4
, 16);

663 
GLM_ALIGNED_TYPEDEF
(
fvec1
, 
Æig√d_fvec1
, 4);

667 
GLM_ALIGNED_TYPEDEF
(
fvec2
, 
Æig√d_fvec2
, 8);

671 
GLM_ALIGNED_TYPEDEF
(
fvec3
, 
Æig√d_fvec3
, 16);

675 
GLM_ALIGNED_TYPEDEF
(
fvec4
, 
Æig√d_fvec4
, 16);

680 
GLM_ALIGNED_TYPEDEF
(
f32vec1
, 
Æig√d_f32vec1
, 4);

684 
GLM_ALIGNED_TYPEDEF
(
f32vec2
, 
Æig√d_f32vec2
, 8);

688 
GLM_ALIGNED_TYPEDEF
(
f32vec3
, 
Æig√d_f32vec3
, 16);

692 
GLM_ALIGNED_TYPEDEF
(
f32vec4
, 
Æig√d_f32vec4
, 16);

697 
GLM_ALIGNED_TYPEDEF
(
dvec1
, 
Æig√d_dvec1
, 8);

701 
GLM_ALIGNED_TYPEDEF
(
dvec2
, 
Æig√d_dvec2
, 16);

705 
GLM_ALIGNED_TYPEDEF
(
dvec3
, 
Æig√d_dvec3
, 32);

709 
GLM_ALIGNED_TYPEDEF
(
dvec4
, 
Æig√d_dvec4
, 32);

714 
GLM_ALIGNED_TYPEDEF
(
f64vec1
, 
Æig√d_f64vec1
, 8);

718 
GLM_ALIGNED_TYPEDEF
(
f64vec2
, 
Æig√d_f64vec2
, 16);

722 
GLM_ALIGNED_TYPEDEF
(
f64vec3
, 
Æig√d_f64vec3
, 32);

726 
GLM_ALIGNED_TYPEDEF
(
f64vec4
, 
Æig√d_f64vec4
, 32);

738 
GLM_ALIGNED_TYPEDEF
(
m©2
, 
Æig√d_m©2
, 16);

742 
GLM_ALIGNED_TYPEDEF
(
m©3
, 
Æig√d_m©3
, 16);

746 
GLM_ALIGNED_TYPEDEF
(
m©4
, 
Æig√d_m©4
, 16);

755 
GLM_ALIGNED_TYPEDEF
(
m©2x2
, 
Æig√d_m©2x2
, 16);

759 
GLM_ALIGNED_TYPEDEF
(
m©3x3
, 
Æig√d_m©3x3
, 16);

763 
GLM_ALIGNED_TYPEDEF
(
m©4x4
, 
Æig√d_m©4x4
, 16);

772 
GLM_ALIGNED_TYPEDEF
(
fm©2x2
, 
Æig√d_fm©2
, 16);

776 
GLM_ALIGNED_TYPEDEF
(
fm©3x3
, 
Æig√d_fm©3
, 16);

780 
GLM_ALIGNED_TYPEDEF
(
fm©4x4
, 
Æig√d_fm©4
, 16);

789 
GLM_ALIGNED_TYPEDEF
(
fm©2x2
, 
Æig√d_fm©2x2
, 16);

793 
GLM_ALIGNED_TYPEDEF
(
fm©2x3
, 
Æig√d_fm©2x3
, 16);

797 
GLM_ALIGNED_TYPEDEF
(
fm©2x4
, 
Æig√d_fm©2x4
, 16);

801 
GLM_ALIGNED_TYPEDEF
(
fm©3x2
, 
Æig√d_fm©3x2
, 16);

805 
GLM_ALIGNED_TYPEDEF
(
fm©3x3
, 
Æig√d_fm©3x3
, 16);

809 
GLM_ALIGNED_TYPEDEF
(
fm©3x4
, 
Æig√d_fm©3x4
, 16);

813 
GLM_ALIGNED_TYPEDEF
(
fm©4x2
, 
Æig√d_fm©4x2
, 16);

817 
GLM_ALIGNED_TYPEDEF
(
fm©4x3
, 
Æig√d_fm©4x3
, 16);

821 
GLM_ALIGNED_TYPEDEF
(
fm©4x4
, 
Æig√d_fm©4x4
, 16);

830 
GLM_ALIGNED_TYPEDEF
(
f32m©2x2
, 
Æig√d_f32m©2
, 16);

834 
GLM_ALIGNED_TYPEDEF
(
f32m©3x3
, 
Æig√d_f32m©3
, 16);

838 
GLM_ALIGNED_TYPEDEF
(
f32m©4x4
, 
Æig√d_f32m©4
, 16);

847 
GLM_ALIGNED_TYPEDEF
(
f32m©2x2
, 
Æig√d_f32m©2x2
, 16);

851 
GLM_ALIGNED_TYPEDEF
(
f32m©2x3
, 
Æig√d_f32m©2x3
, 16);

855 
GLM_ALIGNED_TYPEDEF
(
f32m©2x4
, 
Æig√d_f32m©2x4
, 16);

859 
GLM_ALIGNED_TYPEDEF
(
f32m©3x2
, 
Æig√d_f32m©3x2
, 16);

863 
GLM_ALIGNED_TYPEDEF
(
f32m©3x3
, 
Æig√d_f32m©3x3
, 16);

867 
GLM_ALIGNED_TYPEDEF
(
f32m©3x4
, 
Æig√d_f32m©3x4
, 16);

871 
GLM_ALIGNED_TYPEDEF
(
f32m©4x2
, 
Æig√d_f32m©4x2
, 16);

875 
GLM_ALIGNED_TYPEDEF
(
f32m©4x3
, 
Æig√d_f32m©4x3
, 16);

879 
GLM_ALIGNED_TYPEDEF
(
f32m©4x4
, 
Æig√d_f32m©4x4
, 16);

888 
GLM_ALIGNED_TYPEDEF
(
f64m©2x2
, 
Æig√d_f64m©2
, 32);

892 
GLM_ALIGNED_TYPEDEF
(
f64m©3x3
, 
Æig√d_f64m©3
, 32);

896 
GLM_ALIGNED_TYPEDEF
(
f64m©4x4
, 
Æig√d_f64m©4
, 32);

905 
GLM_ALIGNED_TYPEDEF
(
f64m©2x2
, 
Æig√d_f64m©2x2
, 32);

909 
GLM_ALIGNED_TYPEDEF
(
f64m©2x3
, 
Æig√d_f64m©2x3
, 32);

913 
GLM_ALIGNED_TYPEDEF
(
f64m©2x4
, 
Æig√d_f64m©2x4
, 32);

917 
GLM_ALIGNED_TYPEDEF
(
f64m©3x2
, 
Æig√d_f64m©3x2
, 32);

921 
GLM_ALIGNED_TYPEDEF
(
f64m©3x3
, 
Æig√d_f64m©3x3
, 32);

925 
GLM_ALIGNED_TYPEDEF
(
f64m©3x4
, 
Æig√d_f64m©3x4
, 32);

929 
GLM_ALIGNED_TYPEDEF
(
f64m©4x2
, 
Æig√d_f64m©4x2
, 32);

933 
GLM_ALIGNED_TYPEDEF
(
f64m©4x3
, 
Æig√d_f64m©4x3
, 32);

937 
GLM_ALIGNED_TYPEDEF
(
f64m©4x4
, 
Æig√d_f64m©4x4
, 32);

945 
GLM_ALIGNED_TYPEDEF
(
qu©
, 
Æig√d_qu©
, 16);

949 
GLM_ALIGNED_TYPEDEF
(
fqu©
, 
Æig√d_fqu©
, 16);

953 
GLM_ALIGNED_TYPEDEF
(
dqu©
, 
Æig√d_dqu©
, 32);

957 
GLM_ALIGNED_TYPEDEF
(
f32qu©
, 
Æig√d_f32qu©
, 16);

961 
GLM_ALIGNED_TYPEDEF
(
f64qu©
, 
Æig√d_f64qu©
, 32);

966 
	~"ty≥_Æig√d.öl
"

	@glm/glm/gtx/type_trait.hpp

13 #¥agm®
⁄˚


16 
	~"../dëaû/ty≥_vec2.hµ
"

17 
	~"../dëaû/ty≥_vec3.hµ
"

18 
	~"../dëaû/ty≥_vec4.hµ
"

19 
	~"../dëaû/ty≥_m©2x2.hµ
"

20 
	~"../dëaû/ty≥_m©2x3.hµ
"

21 
	~"../dëaû/ty≥_m©2x4.hµ
"

22 
	~"../dëaû/ty≥_m©3x2.hµ
"

23 
	~"../dëaû/ty≥_m©3x3.hµ
"

24 
	~"../dëaû/ty≥_m©3x4.hµ
"

25 
	~"../dëaû/ty≥_m©4x2.hµ
"

26 
	~"../dëaû/ty≥_m©4x3.hµ
"

27 
	~"../dëaû/ty≥_m©4x4.hµ
"

28 
	~"../gtc/qu©îni⁄.hµ
"

29 
	~"../gtx/duÆ_qu©îni⁄.hµ
"

31 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

32 #¥agm®
mesßge
("GLM: GLM_GTX_type_traitÉxtension included")

35 
«me•a˚
 
	gglm


40 
	gãm∂©e
 <ãm∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	ggíTy≥
, 
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

41 
	sty≥


43 
boﬁ
 c⁄° 
	gis_vec
 = 
Ál£
;

44 
boﬁ
 c⁄° 
	gis_m©
 = 
Ál£
;

45 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

46 
Àngth_t
 c⁄° 
	gcomp⁄íts
 = 0;

47 
Àngth_t
 c⁄° 
	gcﬁs
 = 0;

48 
Àngth_t
 c⁄° 
	grows
 = 0;

51 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

52 
	gty≥
<
	gtvec1
, 
	gT
, 
	gP
>

54 
boﬁ
 c⁄° 
	gis_vec
 = 
åue
;

55 
boﬁ
 c⁄° 
	gis_m©
 = 
Ál£
;

56 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

59 
	gcomp⁄íts
 = 1

63 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

64 
	gty≥
<
	gtvec2
, 
	gT
, 
	gP
>

66 
boﬁ
 c⁄° 
	gis_vec
 = 
åue
;

67 
boﬁ
 c⁄° 
	gis_m©
 = 
Ál£
;

68 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

71 
	gcomp⁄íts
 = 2

75 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

76 
	gty≥
<
	gtvec3
, 
	gT
, 
	gP
>

78 
boﬁ
 c⁄° 
	gis_vec
 = 
åue
;

79 
boﬁ
 c⁄° 
	gis_m©
 = 
Ál£
;

80 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

83 
	gcomp⁄íts
 = 3

87 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

88 
	gty≥
<
	gtvec4
, 
	gT
, 
	gP
>

90 
boﬁ
 c⁄° 
	gis_vec
 = 
åue
;

91 
boﬁ
 c⁄° 
	gis_m©
 = 
Ál£
;

92 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

95 
	gcomp⁄íts
 = 4

99 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

100 
	gty≥
<
	gtm©2x2
, 
	gT
, 
	gP
>

102 
boﬁ
 c⁄° 
	gis_vec
 = 
Ál£
;

103 
boﬁ
 c⁄° 
	gis_m©
 = 
åue
;

104 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

107 
	gcomp⁄íts
 = 2,

108 
	gcﬁs
 = 2,

109 
	grows
 = 2

113 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

114 
	gty≥
<
	gtm©2x3
, 
	gT
, 
	gP
>

116 
boﬁ
 c⁄° 
	gis_vec
 = 
Ál£
;

117 
boﬁ
 c⁄° 
	gis_m©
 = 
åue
;

118 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

121 
	gcomp⁄íts
 = 2,

122 
	gcﬁs
 = 2,

123 
	grows
 = 3

127 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

128 
	gty≥
<
	gtm©2x4
, 
	gT
, 
	gP
>

130 
boﬁ
 c⁄° 
	gis_vec
 = 
Ál£
;

131 
boﬁ
 c⁄° 
	gis_m©
 = 
åue
;

132 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

135 
	gcomp⁄íts
 = 2,

136 
	gcﬁs
 = 2,

137 
	grows
 = 4

141 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

142 
	gty≥
<
	gtm©3x2
, 
	gT
, 
	gP
>

144 
boﬁ
 c⁄° 
	gis_vec
 = 
Ál£
;

145 
boﬁ
 c⁄° 
	gis_m©
 = 
åue
;

146 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

149 
	gcomp⁄íts
 = 3,

150 
	gcﬁs
 = 3,

151 
	grows
 = 2

155 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

156 
	gty≥
<
	gtm©3x3
, 
	gT
, 
	gP
>

158 
boﬁ
 c⁄° 
	gis_vec
 = 
Ál£
;

159 
boﬁ
 c⁄° 
	gis_m©
 = 
åue
;

160 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

163 
	gcomp⁄íts
 = 3,

164 
	gcﬁs
 = 3,

165 
	grows
 = 3

169 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

170 
	gty≥
<
	gtm©3x4
, 
	gT
, 
	gP
>

172 
boﬁ
 c⁄° 
	gis_vec
 = 
Ál£
;

173 
boﬁ
 c⁄° 
	gis_m©
 = 
åue
;

174 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

177 
	gcomp⁄íts
 = 3,

178 
	gcﬁs
 = 3,

179 
	grows
 = 4

183 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

184 
	gty≥
<
	gtm©4x2
, 
	gT
, 
	gP
>

186 
boﬁ
 c⁄° 
	gis_vec
 = 
Ál£
;

187 
boﬁ
 c⁄° 
	gis_m©
 = 
åue
;

188 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

191 
	gcomp⁄íts
 = 4,

192 
	gcﬁs
 = 4,

193 
	grows
 = 2

197 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

198 
	gty≥
<
	gtm©4x3
, 
	gT
, 
	gP
>

200 
boﬁ
 c⁄° 
	gis_vec
 = 
Ál£
;

201 
boﬁ
 c⁄° 
	gis_m©
 = 
åue
;

202 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

205 
	gcomp⁄íts
 = 4,

206 
	gcﬁs
 = 4,

207 
	grows
 = 3

211 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

212 
	gty≥
<
	gtm©4x4
, 
	gT
, 
	gP
>

214 
boﬁ
 c⁄° 
	gis_vec
 = 
Ál£
;

215 
boﬁ
 c⁄° 
	gis_m©
 = 
åue
;

216 
boﬁ
 c⁄° 
	gis_qu©
 = 
Ál£
;

219 
	gcomp⁄íts
 = 4,

220 
	gcﬁs
 = 4,

221 
	grows
 = 4

225 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

226 
	gty≥
<
	gtqu©
, 
	gT
, 
	gP
>

228 
boﬁ
 c⁄° 
	gis_vec
 = 
Ál£
;

229 
boﬁ
 c⁄° 
	gis_m©
 = 
Ál£
;

230 
boﬁ
 c⁄° 
	gis_qu©
 = 
åue
;

233 
	gcomp⁄íts
 = 4

237 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

238 
	gty≥
<
	gtduÆqu©
, 
	gT
, 
	gP
>

240 
boﬁ
 c⁄° 
	gis_vec
 = 
Ál£
;

241 
boﬁ
 c⁄° 
	gis_m©
 = 
Ál£
;

242 
boﬁ
 c⁄° 
	gis_qu©
 = 
åue
;

245 
	gcomp⁄íts
 = 8

252 
	~"ty≥_åaô.öl
"

	@glm/glm/gtx/vector_angle.hpp

15 #¥agm®
⁄˚


18 
	~"../glm.hµ
"

19 
	~"../gtc/ïsû⁄.hµ
"

20 
	~"../gtx/qu©îni⁄.hµ
"

21 
	~"../gtx/rŸ©e_ve˘‹.hµ
"

23 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

24 #¥agm®
mesßge
("GLM: GLM_GTX_vector_angleÉxtension included")

27 
«me•a˚
 
	gglm


35 
	gãm∂©e
 <
ty≥«me
 
	gvecTy≥
>

36 
GLM_FUNC_DECL
 
ty≥«me
 
	gvecTy≥
::
vÆue_ty≥
 
™gÀ
(

37 
vecTy≥
 c⁄° & 
x
,

38 
vecTy≥
 c⁄° & 
y
);

43 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

44 
GLM_FUNC_DECL
 
T
 
‹õ¡edAngÀ
(

45 
tvec2
<
T
, 
P
> c⁄° & 
x
,

46 
tvec2
<
T
, 
P
> c⁄° & 
y
);

51 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
>

52 
GLM_FUNC_DECL
 
T
 
‹õ¡edAngÀ
(

53 
tvec3
<
T
, 
P
> c⁄° & 
x
,

54 
tvec3
<
T
, 
P
> c⁄° & 
y
,

55 
tvec3
<
T
, 
P
> c⁄° & 
ªf
);

60 
	~"ve˘‹_™gÀ.öl
"

	@glm/glm/gtx/vector_query.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

17 
	~<cÊﬂt
>

18 
	~<limôs
>

20 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

21 #¥agm®
mesßge
("GLM: GLM_GTX_vector_queryÉxtension included")

24 
«me•a˚
 
	gglm


31 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

32 
GLM_FUNC_DECL
 
boﬁ
 
¨eCﬁlöór
(
vecTy≥
<
T
, 
P
> c⁄° & 
v0
, vecTy≥<T, P> c⁄° & 
v1
, T c⁄° & 
ïsû⁄
);

36 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

37 
GLM_FUNC_DECL
 
boﬁ
 
¨eOπhog⁄Æ
(
vecTy≥
<
T
, 
P
> c⁄° & 
v0
, vecTy≥<T, P> c⁄° & 
v1
, T c⁄° & 
ïsû⁄
);

41 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

42 
GLM_FUNC_DECL
 
boﬁ
 
isN‹mÆized
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
, T c⁄° & 
ïsû⁄
);

46 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

47 
GLM_FUNC_DECL
 
boﬁ
 
isNuŒ
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
, T c⁄° & 
ïsû⁄
);

51 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

52 
GLM_FUNC_DECL
 
	gvecTy≥
<
	gboﬁ
, 
	gP
> 
isCompNuŒ
(
vecTy≥
<
T
, 
P
> c⁄° & 
v
, T c⁄° & 
ïsû⁄
);

56 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
¥ecisi⁄
 
	gP
,Åem∂©ê<
	gty≥«me
, 
	g¥ecisi⁄
> 
˛ass
 
	gvecTy≥
>

57 
GLM_FUNC_DECL
 
boﬁ
 
¨eOπh⁄‹mÆ
(
vecTy≥
<
T
, 
P
> c⁄° & 
v0
, vecTy≥<T, P> c⁄° & 
v1
, T c⁄° & 
ïsû⁄
);

62 
	~"ve˘‹_quîy.öl
"

	@glm/glm/gtx/wrap.hpp

13 #¥agm®
⁄˚


16 
	~"../glm.hµ
"

17 
	~"../gtc/vec1.hµ
"

19 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_EXT_INCLUDED
)

20 #¥agm®
mesßge
("GLM: GLM_GTX_wrapÉxtension included")

23 
«me•a˚
 
	gglm


30 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

31 
GLM_FUNC_DECL
 
gíTy≥
 
˛amp
(gíTy≥ c⁄°& 
Texco‹d
);

35 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

36 
GLM_FUNC_DECL
 
gíTy≥
 
ª≥©
(gíTy≥ c⁄°& 
Texco‹d
);

40 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

41 
GLM_FUNC_DECL
 
gíTy≥
 
múr‹Cœmp
(gíTy≥ c⁄°& 
Texco‹d
);

45 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

46 
GLM_FUNC_DECL
 
gíTy≥
 
múr‹Rïót
(gíTy≥ c⁄°& 
Texco‹d
);

51 
	~"wøp.öl
"

	@glm/glm/integer.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/func_öãgî.hµ
"

	@glm/glm/mat2x2.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_m©2x2.hµ
"

8 
«me•a˚
 
	gglm


15 
	gtm©2x2
<, 
	tlowp
> 
	tlowp_m©2
;

22 
	gtm©2x2
<, 
	tmediump
> 
	tmediump_m©2
;

29 
	gtm©2x2
<, 
	thighp
> 
	thighp_m©2
;

36 
	gtm©2x2
<, 
	tlowp
> 
	tlowp_m©2x2
;

43 
	gtm©2x2
<, 
	tmediump
> 
	tmediump_m©2x2
;

50 
	gtm©2x2
<, 
	thighp
> 
	thighp_m©2x2
;

	@glm/glm/mat2x3.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_m©2x3.hµ
"

8 
«me•a˚
 
	gglm


15 
	gtm©2x3
<, 
	tlowp
> 
	tlowp_m©2x3
;

22 
	gtm©2x3
<, 
	tmediump
> 
	tmediump_m©2x3
;

29 
	gtm©2x3
<, 
	thighp
> 
	thighp_m©2x3
;

	@glm/glm/mat2x4.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_m©2x4.hµ
"

8 
«me•a˚
 
	gglm


15 
	gtm©2x4
<, 
	tlowp
> 
	tlowp_m©2x4
;

22 
	gtm©2x4
<, 
	tmediump
> 
	tmediump_m©2x4
;

29 
	gtm©2x4
<, 
	thighp
> 
	thighp_m©2x4
;

	@glm/glm/mat3x2.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_m©3x2.hµ
"

8 
«me•a˚
 
	gglm


15 
	gtm©3x2
<, 
	tlowp
> 
	tlowp_m©3x2
;

22 
	gtm©3x2
<, 
	tmediump
> 
	tmediump_m©3x2
;

29 
	gtm©3x2
<, 
	thighp
> 
	thighp_m©3x2
;

	@glm/glm/mat3x3.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_m©3x3.hµ
"

8 
«me•a˚
 
	gglm


15 
	gtm©3x3
<, 
	tlowp
> 
	tlowp_m©3
;

22 
	gtm©3x3
<, 
	tmediump
> 
	tmediump_m©3
;

29 
	gtm©3x3
<, 
	thighp
> 
	thighp_m©3
;

36 
	gtm©3x3
<, 
	tlowp
> 
	tlowp_m©3x3
;

43 
	gtm©3x3
<, 
	tmediump
> 
	tmediump_m©3x3
;

50 
	gtm©3x3
<, 
	thighp
> 
	thighp_m©3x3
;

	@glm/glm/mat3x4.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_m©3x4.hµ
"

8 
«me•a˚
 
	gglm


15 
	gtm©3x4
<, 
	tlowp
> 
	tlowp_m©3x4
;

22 
	gtm©3x4
<, 
	tmediump
> 
	tmediump_m©3x4
;

29 
	gtm©3x4
<, 
	thighp
> 
	thighp_m©3x4
;

	@glm/glm/mat4x2.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_m©4x2.hµ
"

8 
«me•a˚
 
	gglm


15 
	gtm©4x2
<, 
	tlowp
> 
	tlowp_m©4x2
;

22 
	gtm©4x2
<, 
	tmediump
> 
	tmediump_m©4x2
;

29 
	gtm©4x2
<, 
	thighp
> 
	thighp_m©4x2
;

	@glm/glm/mat4x3.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_m©4x3.hµ
"

8 
«me•a˚
 
	gglm


15 
	gtm©4x3
<, 
	tlowp
> 
	tlowp_m©4x3
;

22 
	gtm©4x3
<, 
	tmediump
> 
	tmediump_m©4x3
;

29 
	gtm©4x3
<, 
	thighp
> 
	thighp_m©4x3
;

	@glm/glm/mat4x4.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_m©4x4.hµ
"

8 
«me•a˚
 
	gglm


15 
	gtm©4x4
<, 
	tlowp
> 
	tlowp_m©4
;

22 
	gtm©4x4
<, 
	tmediump
> 
	tmediump_m©4
;

29 
	gtm©4x4
<, 
	thighp
> 
	thighp_m©4
;

36 
	gtm©4x4
<, 
	tlowp
> 
	tlowp_m©4x4
;

43 
	gtm©4x4
<, 
	tmediump
> 
	tmediump_m©4x4
;

50 
	gtm©4x4
<, 
	thighp
> 
	thighp_m©4x4
;

	@glm/glm/matrix.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/func_m©rix.hµ
"

	@glm/glm/packing.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/func_∑ckög.hµ
"

	@glm/glm/simd/common.h

4 #¥agm®
⁄˚


6 
	~"∂©f‹m.h
"

8 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


10 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_add
(
glm_vec4
 
a
, glm_vec4 
b
)

12  
	`_mm_add_ps
(
a
, 
b
);

13 
	}
}

15 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec1_add
(
glm_vec4
 
a
, glm_vec4 
b
)

17  
	`_mm_add_ss
(
a
, 
b
);

18 
	}
}

20 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_sub
(
glm_vec4
 
a
, glm_vec4 
b
)

22  
	`_mm_sub_ps
(
a
, 
b
);

23 
	}
}

25 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec1_sub
(
glm_vec4
 
a
, glm_vec4 
b
)

27  
	`_mm_sub_ss
(
a
, 
b
);

28 
	}
}

30 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_mul
(
glm_vec4
 
a
, glm_vec4 
b
)

32  
	`_mm_mul_ps
(
a
, 
b
);

33 
	}
}

35 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec1_mul
(
glm_vec4
 
a
, glm_vec4 
b
)

37  
	`_mm_mul_ss
(
a
, 
b
);

38 
	}
}

40 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_div
(
glm_vec4
 
a
, glm_vec4 
b
)

42  
	`_mm_div_ps
(
a
, 
b
);

43 
	}
}

45 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec1_div
(
glm_vec4
 
a
, glm_vec4 
b
)

47  
	`_mm_div_ss
(
a
, 
b
);

48 
	}
}

50 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_div_lowp
(
glm_vec4
 
a
, glm_vec4 
b
)

52  
	`glm_vec4_mul
(
a
, 
	`_mm_r˝_ps
(
b
));

53 
	}
}

55 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_swizzÀ_xyzw
(
glm_vec4
 
a
)

57 #i‡
GLM_ARCH
 & 
GLM_ARCH_AVX2_BIT


58  
	`_mm_≥rmuã_ps
(
a
, 
	`_MM_SHUFFLE
(3, 2, 1, 0));

60  
	`_mm_shufÊe_ps
(
a
,á, 
	`_MM_SHUFFLE
(3, 2, 1, 0));

62 
	}
}

64 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec1_fma
(
glm_vec4
 
a
, glm_vec4 
b
, glm_vec4 
c
)

66 #i‡
GLM_ARCH
 & 
GLM_ARCH_AVX2_BIT


67  
	`_mm_fmadd_ss
(
a
, 
b
, 
c
);

69  
	`_mm_add_ss
(
	`_mm_mul_ss
(
a
, 
b
), 
c
);

71 
	}
}

73 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_fma
(
glm_vec4
 
a
, glm_vec4 
b
, glm_vec4 
c
)

75 #i‡
GLM_ARCH
 & 
GLM_ARCH_AVX2_BIT


76  
	`_mm_fmadd_ps
(
a
, 
b
, 
c
);

78  
	`glm_vec4_add
(
	`glm_vec4_mul
(
a
, 
b
), 
c
);

80 
	}
}

82 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_abs
(
glm_vec4
 
x
)

84  
	`_mm_™d_ps
(
x
, 
	`_mm_ˇ°si128_ps
(
	`_mm_£t1_ïi32
(0x7FFFFFFF)));

85 
	}
}

87 
GLM_FUNC_QUALIFIER
 
glm_ivec4
 
	$glm_ivec4_abs
(
glm_ivec4
 
x
)

89 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSSE3_BIT


90  
	`_mm_sign_ïi32
(
x
, x);

92 
glm_ivec4
 c⁄° 
sgn0
 = 
	`_mm_§ai_ïi32
(
x
, 31);

93 
glm_ivec4
 c⁄° 
öv0
 = 
	`_mm_x‹_si128
(
x
, 
sgn0
);

94 
glm_ivec4
 c⁄° 
sub0
 = 
	`_mm_sub_ïi32
(
öv0
, 
sgn0
);

95  
sub0
;

97 
	}
}

99 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_sign
(
glm_vec4
 
x
)

101 
glm_vec4
 c⁄° 
zro0
 = 
	`_mm_£tzîo_ps
();

102 
glm_vec4
 c⁄° 
cmp0
 = 
	`_mm_cm∂t_ps
(
x
, 
zro0
);

103 
glm_vec4
 c⁄° 
cmp1
 = 
	`_mm_cmpgt_ps
(
x
, 
zro0
);

104 
glm_vec4
 c⁄° 
™d0
 = 
	`_mm_™d_ps
(
cmp0
, 
	`_mm_£t1_ps
(-1.0f));

105 
glm_vec4
 c⁄° 
™d1
 = 
	`_mm_™d_ps
(
cmp1
, 
	`_mm_£t1_ps
(1.0f));

106 
glm_vec4
 c⁄° 
‹0
 = 
	`_mm_‹_ps
(
™d0
, 
™d1
);;

107  
‹0
;

108 
	}
}

110 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_round
(
glm_vec4
 
x
)

112 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE41_BIT


113  
	`_mm_round_ps
(
x
, 
_MM_FROUND_TO_NEAREST_INT
);

115 
glm_vec4
 c⁄° 
sgn0
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_£t1_ïi32
(0x80000000));

116 
glm_vec4
 c⁄° 
™d0
 = 
	`_mm_™d_ps
(
sgn0
, 
x
);

117 
glm_vec4
 c⁄° 
‹0
 = 
	`_mm_‹_ps
(
™d0
, 
	`_mm_£t_ps1
(8388608.0f));

118 
glm_vec4
 c⁄° 
add0
 = 
	`glm_vec4_add
(
x
, 
‹0
);

119 
glm_vec4
 c⁄° 
sub0
 = 
	`glm_vec4_sub
(
add0
, 
‹0
);

120  
sub0
;

122 
	}
}

124 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_Êo‹
(
glm_vec4
 
x
)

126 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE41_BIT


127  
	`_mm_Êo‹_ps
(
x
);

129 
glm_vec4
 c⁄° 
∫d0
 = 
	`glm_vec4_round
(
x
);

130 
glm_vec4
 c⁄° 
cmp0
 = 
	`_mm_cm∂t_ps
(
x
, 
∫d0
);

131 
glm_vec4
 c⁄° 
™d0
 = 
	`_mm_™d_ps
(
cmp0
, 
	`_mm_£t1_ps
(1.0f));

132 
glm_vec4
 c⁄° 
sub0
 = 
	`glm_vec4_sub
(
∫d0
, 
™d0
);

133  
sub0
;

135 
	}
}

145 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_roundEví
(
glm_vec4
 
x
)

147 
glm_vec4
 c⁄° 
sgn0
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_£t1_ïi32
(0x80000000));

148 
glm_vec4
 c⁄° 
™d0
 = 
	`_mm_™d_ps
(
sgn0
, 
x
);

149 
glm_vec4
 c⁄° 
‹0
 = 
	`_mm_‹_ps
(
™d0
, 
	`_mm_£t_ps1
(8388608.0f));

150 
glm_vec4
 c⁄° 
add0
 = 
	`glm_vec4_add
(
x
, 
‹0
);

151 
glm_vec4
 c⁄° 
sub0
 = 
	`glm_vec4_sub
(
add0
, 
‹0
);

152  
sub0
;

153 
	}
}

155 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_˚û
(
glm_vec4
 
x
)

157 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE41_BIT


158  
	`_mm_˚û_ps
(
x
);

160 
glm_vec4
 c⁄° 
∫d0
 = 
	`glm_vec4_round
(
x
);

161 
glm_vec4
 c⁄° 
cmp0
 = 
	`_mm_cmpgt_ps
(
x
, 
∫d0
);

162 
glm_vec4
 c⁄° 
™d0
 = 
	`_mm_™d_ps
(
cmp0
, 
	`_mm_£t1_ps
(1.0f));

163 
glm_vec4
 c⁄° 
add0
 = 
	`glm_vec4_add
(
∫d0
, 
™d0
);

164  
add0
;

166 
	}
}

168 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_‰a˘
(
glm_vec4
 
x
)

170 
glm_vec4
 c⁄° 
Êr0
 = 
	`glm_vec4_Êo‹
(
x
);

171 
glm_vec4
 c⁄° 
sub0
 = 
	`glm_vec4_sub
(
x
, 
Êr0
);

172  
sub0
;

173 
	}
}

175 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_mod
(
glm_vec4
 
x
, glm_vec4 
y
)

177 
glm_vec4
 c⁄° 
div0
 = 
	`glm_vec4_div
(
x
, 
y
);

178 
glm_vec4
 c⁄° 
Êr0
 = 
	`glm_vec4_Êo‹
(
div0
);

179 
glm_vec4
 c⁄° 
mul0
 = 
	`glm_vec4_mul
(
y
, 
Êr0
);

180 
glm_vec4
 c⁄° 
sub0
 = 
	`glm_vec4_sub
(
x
, 
mul0
);

181  
sub0
;

182 
	}
}

184 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_˛amp
(
glm_vec4
 
v
, glm_vec4 
möVÆ
, glm_vec4 
maxVÆ
)

186 
glm_vec4
 c⁄° 
mö0
 = 
	`_mm_mö_ps
(
v
, 
maxVÆ
);

187 
glm_vec4
 c⁄° 
max0
 = 
	`_mm_max_ps
(
mö0
, 
möVÆ
);

188  
max0
;

189 
	}
}

191 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_mix
(
glm_vec4
 
v1
, glm_vec4 
v2
, glm_vec4 
a
)

193 
glm_vec4
 c⁄° 
sub0
 = 
	`glm_vec4_sub
(
	`_mm_£t1_ps
(1.0f), 
a
);

194 
glm_vec4
 c⁄° 
mul0
 = 
	`glm_vec4_mul
(
v1
, 
sub0
);

195 
glm_vec4
 c⁄° 
mad0
 = 
	`glm_vec4_fma
(
v2
, 
a
, 
mul0
);

196  
mad0
;

197 
	}
}

199 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_°ï
(
glm_vec4
 
edge
, glm_vec4 
x
)

201 
glm_vec4
 c⁄° 
cmp
 = 
	`_mm_cm∂e_ps
(
x
, 
edge
);

202  
	`_mm_movemask_ps
(
cmp
Ë=0 ? 
	`_mm_£t1_ps
(1.0fË: 
	`_mm_£tzîo_ps
();

203 
	}
}

205 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_smoŸh°ï
(
glm_vec4
 
edge0
, glm_vec4 
edge1
, glm_vec4 
x
)

207 
glm_vec4
 c⁄° 
sub0
 = 
	`glm_vec4_sub
(
x
, 
edge0
);

208 
glm_vec4
 c⁄° 
sub1
 = 
	`glm_vec4_sub
(
edge1
, 
edge0
);

209 
glm_vec4
 c⁄° 
div0
 = 
	`glm_vec4_sub
(
sub0
, 
sub1
);

210 
glm_vec4
 c⁄° 
˛p0
 = 
	`glm_vec4_˛amp
(
div0
, 
	`_mm_£tzîo_ps
(), 
	`_mm_£t1_ps
(1.0f));

211 
glm_vec4
 c⁄° 
mul0
 = 
	`glm_vec4_mul
(
	`_mm_£t1_ps
(2.0f), 
˛p0
);

212 
glm_vec4
 c⁄° 
sub2
 = 
	`glm_vec4_sub
(
	`_mm_£t1_ps
(3.0f), 
mul0
);

213 
glm_vec4
 c⁄° 
mul1
 = 
	`glm_vec4_mul
(
˛p0
, clp0);

214 
glm_vec4
 c⁄° 
mul2
 = 
	`glm_vec4_mul
(
mul1
, 
sub2
);

215  
mul2
;

216 
	}
}

219 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_«n
(
glm_vec4
 
x
)

221 
glm_ivec4
 c⁄° 
t1
 = 
	`_mm_ˇ°ps_si128
(
x
);

222 
glm_ivec4
 c⁄° 
t2
 = 
	`_mm_¶l_ïi32
(
t1
, 
	`_mm_cvtsi32_si128
(1));

223 
glm_ivec4
 c⁄° 
t3
 = 
	`_mm_£t1_ïi32
(0xFF000000);

224 
glm_ivec4
 c⁄° 
t4
 = 
	`_mm_™d_si128
(
t2
, 
t3
);

225 
glm_ivec4
 c⁄° 
t5
 = 
	`_mm_™dnŸ_si128
(
t3
, 
t2
);

226 
glm_ivec4
 c⁄° 
EquÆ
 = 
	`_mm_cm≥q_ïi32
(
t3
, 
t4
);

227 
glm_ivec4
 c⁄° 
NequÆ
 = 
	`_mm_cm≥q_ïi32
(
t5
, 
	`_mm_£tzîo_si128
());

228 
glm_ivec4
 c⁄° 
And
 = 
	`_mm_™d_si128
(
EquÆ
, 
NequÆ
);

229  
	`_mm_ˇ°si128_ps
(
And
);

230 
	}
}

233 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_öf
(
glm_vec4
 
x
)

235 
glm_ivec4
 c⁄° 
t1
 = 
	`_mm_ˇ°ps_si128
(
x
);

236 
glm_ivec4
 c⁄° 
t2
 = 
	`_mm_¶l_ïi32
(
t1
, 
	`_mm_cvtsi32_si128
(1));

237  
	`_mm_ˇ°si128_ps
(
	`_mm_cm≥q_ïi32
(
t2
, 
	`_mm_£t1_ïi32
(0xFF000000)));

238 
	}
}

	@glm/glm/simd/exponential.h

4 #¥agm®
⁄˚


6 
	~"∂©f‹m.h
"

8 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


10 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec1_sqπ_lowp
(
glm_vec4
 
x
)

12  
	`_mm_mul_ss
(
	`_mm_rsqπ_ss
(
x
), x);

13 
	}
}

15 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_sqπ_lowp
(
glm_vec4
 
x
)

17  
	`_mm_mul_ps
(
	`_mm_rsqπ_ps
(
x
), x);

18 
	}
}

	@glm/glm/simd/geometric.h

4 #¥agm®
⁄˚


6 
	~"comm⁄.h
"

8 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


10 
GLM_FUNC_DECL
 
glm_vec4
 
glm_vec4_dŸ
(glm_vec4 
v1
, glm_vec4 
v2
);

11 
GLM_FUNC_DECL
 
glm_vec4
 
glm_vec1_dŸ
(glm_vec4 
v1
, glm_vec4 
v2
);

13 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_Àngth
(
glm_vec4
 
x
)

15 
glm_vec4
 c⁄° 
dŸ0
 = 
	`glm_vec4_dŸ
(
x
, x);

16 
glm_vec4
 c⁄° 
sqt0
 = 
	`_mm_sqπ_ps
(
dŸ0
);

17  
sqt0
;

18 
	}
}

20 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_di°™˚
(
glm_vec4
 
p0
, glm_vec4 
p1
)

22 
glm_vec4
 c⁄° 
sub0
 = 
	`_mm_sub_ps
(
p0
, 
p1
);

23 
glm_vec4
 c⁄° 
Àn0
 = 
	`glm_vec4_Àngth
(
sub0
);

24  
Àn0
;

25 
	}
}

27 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_dŸ
(
glm_vec4
 
v1
, glm_vec4 
v2
)

29 #i‡
GLM_ARCH
 & 
GLM_ARCH_AVX_BIT


30  
	`_mm_dp_ps
(
v1
, 
v2
, 0xff);

31 #ñi‡
GLM_ARCH
 & 
GLM_ARCH_SSE3_BIT


32 
glm_vec4
 c⁄° 
mul0
 = 
	`_mm_mul_ps
(
v1
, 
v2
);

33 
glm_vec4
 c⁄° 
hadd0
 = 
	`_mm_hadd_ps
(
mul0
, mul0);

34 
glm_vec4
 c⁄° 
hadd1
 = 
	`_mm_hadd_ps
(
hadd0
, hadd0);

35  
hadd1
;

37 
glm_vec4
 c⁄° 
mul0
 = 
	`_mm_mul_ps
(
v1
, 
v2
);

38 
glm_vec4
 c⁄° 
swp0
 = 
	`_mm_shufÊe_ps
(
mul0
, mul0, 
	`_MM_SHUFFLE
(2, 3, 0, 1));

39 
glm_vec4
 c⁄° 
add0
 = 
	`_mm_add_ps
(
mul0
, 
swp0
);

40 
glm_vec4
 c⁄° 
swp1
 = 
	`_mm_shufÊe_ps
(
add0
,ádd0, 
	`_MM_SHUFFLE
(0, 1, 2, 3));

41 
glm_vec4
 c⁄° 
add1
 = 
	`_mm_add_ps
(
add0
, 
swp1
);

42  
add1
;

44 
	}
}

46 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec1_dŸ
(
glm_vec4
 
v1
, glm_vec4 
v2
)

48 #i‡
GLM_ARCH
 & 
GLM_ARCH_AVX_BIT


49  
	`_mm_dp_ps
(
v1
, 
v2
, 0xff);

50 #ñi‡
GLM_ARCH
 & 
GLM_ARCH_SSE3_BIT


51 
glm_vec4
 c⁄° 
mul0
 = 
	`_mm_mul_ps
(
v1
, 
v2
);

52 
glm_vec4
 c⁄° 
had0
 = 
	`_mm_hadd_ps
(
mul0
, mul0);

53 
glm_vec4
 c⁄° 
had1
 = 
	`_mm_hadd_ps
(
had0
, had0);

54  
had1
;

56 
glm_vec4
 c⁄° 
mul0
 = 
	`_mm_mul_ps
(
v1
, 
v2
);

57 
glm_vec4
 c⁄° 
mov0
 = 
	`_mm_movehl_ps
(
mul0
, mul0);

58 
glm_vec4
 c⁄° 
add0
 = 
	`_mm_add_ps
(
mov0
, 
mul0
);

59 
glm_vec4
 c⁄° 
swp1
 = 
	`_mm_shufÊe_ps
(
add0
,ádd0, 1);

60 
glm_vec4
 c⁄° 
add1
 = 
	`_mm_add_ss
(
add0
, 
swp1
);

61  
add1
;

63 
	}
}

65 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_¸oss
(
glm_vec4
 
v1
, glm_vec4 
v2
)

67 
glm_vec4
 c⁄° 
swp0
 = 
	`_mm_shufÊe_ps
(
v1
, v1, 
	`_MM_SHUFFLE
(3, 0, 2, 1));

68 
glm_vec4
 c⁄° 
swp1
 = 
	`_mm_shufÊe_ps
(
v1
, v1, 
	`_MM_SHUFFLE
(3, 1, 0, 2));

69 
glm_vec4
 c⁄° 
swp2
 = 
	`_mm_shufÊe_ps
(
v2
, v2, 
	`_MM_SHUFFLE
(3, 0, 2, 1));

70 
glm_vec4
 c⁄° 
swp3
 = 
	`_mm_shufÊe_ps
(
v2
, v2, 
	`_MM_SHUFFLE
(3, 1, 0, 2));

71 
glm_vec4
 c⁄° 
mul0
 = 
	`_mm_mul_ps
(
swp0
, 
swp3
);

72 
glm_vec4
 c⁄° 
mul1
 = 
	`_mm_mul_ps
(
swp1
, 
swp2
);

73 
glm_vec4
 c⁄° 
sub0
 = 
	`_mm_sub_ps
(
mul0
, 
mul1
);

74  
sub0
;

75 
	}
}

77 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_n‹mÆize
(
glm_vec4
 
v
)

79 
glm_vec4
 c⁄° 
dŸ0
 = 
	`glm_vec4_dŸ
(
v
, v);

80 
glm_vec4
 c⁄° 
i§0
 = 
	`_mm_rsqπ_ps
(
dŸ0
);

81 
glm_vec4
 c⁄° 
mul0
 = 
	`_mm_mul_ps
(
v
, 
i§0
);

82  
mul0
;

83 
	}
}

85 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_Á˚f‹w¨d
(
glm_vec4
 
N
, glm_vec4 
I
, glm_vec4 
Nªf
)

87 
glm_vec4
 c⁄° 
dŸ0
 = 
	`glm_vec4_dŸ
(
Nªf
, 
I
);

88 
glm_vec4
 c⁄° 
sgn0
 = 
	`glm_vec4_sign
(
dŸ0
);

89 
glm_vec4
 c⁄° 
mul0
 = 
	`_mm_mul_ps
(
sgn0
, 
	`_mm_£t1_ps
(-1.0f));

90 
glm_vec4
 c⁄° 
mul1
 = 
	`_mm_mul_ps
(
N
, 
mul0
);

91  
mul1
;

92 
	}
}

94 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_vec4_ªÊe˘
(
glm_vec4
 
I
, glm_vec4 
N
)

96 
glm_vec4
 c⁄° 
dŸ0
 = 
	`glm_vec4_dŸ
(
N
, 
I
);

97 
glm_vec4
 c⁄° 
mul0
 = 
	`_mm_mul_ps
(
N
, 
dŸ0
);

98 
glm_vec4
 c⁄° 
mul1
 = 
	`_mm_mul_ps
(
mul0
, 
	`_mm_£t1_ps
(2.0f));

99 
glm_vec4
 c⁄° 
sub0
 = 
	`_mm_sub_ps
(
I
, 
mul1
);

100  
sub0
;

101 
	}
}

103 
GLM_FUNC_QUALIFIER
 
__m128
 
	$glm_vec4_ª‰a˘
(
glm_vec4
 
I
, glm_vec4 
N
, glm_vec4 
ëa
)

105 
glm_vec4
 c⁄° 
dŸ0
 = 
	`glm_vec4_dŸ
(
N
, 
I
);

106 
glm_vec4
 c⁄° 
mul0
 = 
	`_mm_mul_ps
(
ëa
,Éta);

107 
glm_vec4
 c⁄° 
mul1
 = 
	`_mm_mul_ps
(
dŸ0
, dot0);

108 
glm_vec4
 c⁄° 
sub0
 = 
	`_mm_sub_ps
(
	`_mm_£t1_ps
(1.0f), 
mul0
);

109 
glm_vec4
 c⁄° 
sub1
 = 
	`_mm_sub_ps
(
	`_mm_£t1_ps
(1.0f), 
mul1
);

110 
glm_vec4
 c⁄° 
mul2
 = 
	`_mm_mul_ps
(
sub0
, 
sub1
);

112 if(
	`_mm_movemask_ps
(
	`_mm_cm∂t_ss
(
mul2
, 
	`_mm_£t1_ps
(0.0f))) == 0)

113  
	`_mm_£t1_ps
(0.0f);

115 
glm_vec4
 c⁄° 
sqt0
 = 
	`_mm_sqπ_ps
(
mul2
);

116 
glm_vec4
 c⁄° 
mad0
 = 
	`glm_vec4_fma
(
ëa
, 
dŸ0
, 
sqt0
);

117 
glm_vec4
 c⁄° 
mul4
 = 
	`_mm_mul_ps
(
mad0
, 
N
);

118 
glm_vec4
 c⁄° 
mul5
 = 
	`_mm_mul_ps
(
ëa
, 
I
);

119 
glm_vec4
 c⁄° 
sub2
 = 
	`_mm_sub_ps
(
mul5
, 
mul4
);

121  
sub2
;

122 
	}
}

	@glm/glm/simd/integer.h

4 #¥agm®
⁄˚


6 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


8 
GLM_FUNC_QUALIFIER
 
glm_uvec4
 
	$glm_i128_öãæóve
(
glm_uvec4
 
x
)

10 
glm_uvec4
 c⁄° 
Mask4
 = 
	`_mm_£t1_ïi32
(0x0000FFFF);

11 
glm_uvec4
 c⁄° 
Mask3
 = 
	`_mm_£t1_ïi32
(0x00FF00FF);

12 
glm_uvec4
 c⁄° 
Mask2
 = 
	`_mm_£t1_ïi32
(0x0F0F0F0F);

13 
glm_uvec4
 c⁄° 
Mask1
 = 
	`_mm_£t1_ïi32
(0x33333333);

14 
glm_uvec4
 c⁄° 
Mask0
 = 
	`_mm_£t1_ïi32
(0x55555555);

16 
glm_uvec4
 
Reg1
;

17 
glm_uvec4
 
Reg2
;

22 
Reg1
 = 
x
;

26 
Reg2
 = 
	`_mm_¶li_si128
(
Reg1
, 2);

27 
Reg1
 = 
	`_mm_‹_si128
(
Reg2
, Reg1);

28 
Reg1
 = 
	`_mm_™d_si128
(Reg1, 
Mask4
);

32 
Reg2
 = 
	`_mm_¶li_si128
(
Reg1
, 1);

33 
Reg1
 = 
	`_mm_‹_si128
(
Reg2
, Reg1);

34 
Reg1
 = 
	`_mm_™d_si128
(Reg1, 
Mask3
);

38 
Reg2
 = 
	`_mm_¶li_ïi32
(
Reg1
, 4);

39 
Reg1
 = 
	`_mm_‹_si128
(
Reg2
, Reg1);

40 
Reg1
 = 
	`_mm_™d_si128
(Reg1, 
Mask2
);

44 
Reg2
 = 
	`_mm_¶li_ïi32
(
Reg1
, 2);

45 
Reg1
 = 
	`_mm_‹_si128
(
Reg2
, Reg1);

46 
Reg1
 = 
	`_mm_™d_si128
(Reg1, 
Mask1
);

50 
Reg2
 = 
	`_mm_¶li_ïi32
(
Reg1
, 1);

51 
Reg1
 = 
	`_mm_‹_si128
(
Reg2
, Reg1);

52 
Reg1
 = 
	`_mm_™d_si128
(Reg1, 
Mask0
);

55 
Reg2
 = 
	`_mm_¶li_ïi32
(
Reg1
, 1);

56 
Reg2
 = 
	`_mm_§li_si128
(Reg2, 8);

57 
Reg1
 = 
	`_mm_‹_si128
(Reg1, 
Reg2
);

59  
Reg1
;

60 
	}
}

62 
GLM_FUNC_QUALIFIER
 
glm_uvec4
 
	$glm_i128_öãæóve2
(
glm_uvec4
 
x
, glm_uvec4 
y
)

64 
glm_uvec4
 c⁄° 
Mask4
 = 
	`_mm_£t1_ïi32
(0x0000FFFF);

65 
glm_uvec4
 c⁄° 
Mask3
 = 
	`_mm_£t1_ïi32
(0x00FF00FF);

66 
glm_uvec4
 c⁄° 
Mask2
 = 
	`_mm_£t1_ïi32
(0x0F0F0F0F);

67 
glm_uvec4
 c⁄° 
Mask1
 = 
	`_mm_£t1_ïi32
(0x33333333);

68 
glm_uvec4
 c⁄° 
Mask0
 = 
	`_mm_£t1_ïi32
(0x55555555);

70 
glm_uvec4
 
Reg1
;

71 
glm_uvec4
 
Reg2
;

75 
Reg1
 = 
	`_mm_u≈acklo_ïi64
(
x
, 
y
);

79 
Reg2
 = 
	`_mm_¶li_si128
(
Reg1
, 2);

80 
Reg1
 = 
	`_mm_‹_si128
(
Reg2
, Reg1);

81 
Reg1
 = 
	`_mm_™d_si128
(Reg1, 
Mask4
);

85 
Reg2
 = 
	`_mm_¶li_si128
(
Reg1
, 1);

86 
Reg1
 = 
	`_mm_‹_si128
(
Reg2
, Reg1);

87 
Reg1
 = 
	`_mm_™d_si128
(Reg1, 
Mask3
);

91 
Reg2
 = 
	`_mm_¶li_ïi32
(
Reg1
, 4);

92 
Reg1
 = 
	`_mm_‹_si128
(
Reg2
, Reg1);

93 
Reg1
 = 
	`_mm_™d_si128
(Reg1, 
Mask2
);

97 
Reg2
 = 
	`_mm_¶li_ïi32
(
Reg1
, 2);

98 
Reg1
 = 
	`_mm_‹_si128
(
Reg2
, Reg1);

99 
Reg1
 = 
	`_mm_™d_si128
(Reg1, 
Mask1
);

103 
Reg2
 = 
	`_mm_¶li_ïi32
(
Reg1
, 1);

104 
Reg1
 = 
	`_mm_‹_si128
(
Reg2
, Reg1);

105 
Reg1
 = 
	`_mm_™d_si128
(Reg1, 
Mask0
);

108 
Reg2
 = 
	`_mm_¶li_ïi32
(
Reg1
, 1);

109 
Reg2
 = 
	`_mm_§li_si128
(Reg2, 8);

110 
Reg1
 = 
	`_mm_‹_si128
(Reg1, 
Reg2
);

112  
Reg1
;

113 
	}
}

	@glm/glm/simd/matrix.h

4 #¥agm®
⁄˚


6 
	~"geomëric.h
"

8 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


10 
GLM_FUNC_QUALIFIER
 
	$glm_m©4_m©rixCompMu…
(
glm_vec4
 c⁄° 
ö1
[4], glm_vec4 c⁄° 
ö2
[4], glm_vec4 
out
[4])

12 
out
[0] = 
	`_mm_mul_ps
(
ö1
[0], 
ö2
[0]);

13 
out
[1] = 
	`_mm_mul_ps
(
ö1
[1], 
ö2
[1]);

14 
out
[2] = 
	`_mm_mul_ps
(
ö1
[2], 
ö2
[2]);

15 
out
[3] = 
	`_mm_mul_ps
(
ö1
[3], 
ö2
[3]);

16 
	}
}

18 
GLM_FUNC_QUALIFIER
 
	$glm_m©4_add
(
glm_vec4
 c⁄° 
ö1
[4], glm_vec4 c⁄° 
ö2
[4], glm_vec4 
out
[4])

20 
out
[0] = 
	`_mm_add_ps
(
ö1
[0], 
ö2
[0]);

21 
out
[1] = 
	`_mm_add_ps
(
ö1
[1], 
ö2
[1]);

22 
out
[2] = 
	`_mm_add_ps
(
ö1
[2], 
ö2
[2]);

23 
out
[3] = 
	`_mm_add_ps
(
ö1
[3], 
ö2
[3]);

24 
	}
}

26 
GLM_FUNC_QUALIFIER
 
	$glm_m©4_sub
(
glm_vec4
 c⁄° 
ö1
[4], glm_vec4 c⁄° 
ö2
[4], glm_vec4 
out
[4])

28 
out
[0] = 
	`_mm_sub_ps
(
ö1
[0], 
ö2
[0]);

29 
out
[1] = 
	`_mm_sub_ps
(
ö1
[1], 
ö2
[1]);

30 
out
[2] = 
	`_mm_sub_ps
(
ö1
[2], 
ö2
[2]);

31 
out
[3] = 
	`_mm_sub_ps
(
ö1
[3], 
ö2
[3]);

32 
	}
}

34 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_m©4_mul_vec4
(
glm_vec4
 c⁄° 
m
[4], glm_vec4 
v
)

36 
__m128
 
v0
 = 
	`_mm_shufÊe_ps
(
v
, v, 
	`_MM_SHUFFLE
(0, 0, 0, 0));

37 
__m128
 
v1
 = 
	`_mm_shufÊe_ps
(
v
, v, 
	`_MM_SHUFFLE
(1, 1, 1, 1));

38 
__m128
 
v2
 = 
	`_mm_shufÊe_ps
(
v
, v, 
	`_MM_SHUFFLE
(2, 2, 2, 2));

39 
__m128
 
v3
 = 
	`_mm_shufÊe_ps
(
v
, v, 
	`_MM_SHUFFLE
(3, 3, 3, 3));

41 
__m128
 
m0
 = 
	`_mm_mul_ps
(
m
[0], 
v0
);

42 
__m128
 
m1
 = 
	`_mm_mul_ps
(
m
[1], 
v1
);

43 
__m128
 
m2
 = 
	`_mm_mul_ps
(
m
[2], 
v2
);

44 
__m128
 
m3
 = 
	`_mm_mul_ps
(
m
[3], 
v3
);

46 
__m128
 
a0
 = 
	`_mm_add_ps
(
m0
, 
m1
);

47 
__m128
 
a1
 = 
	`_mm_add_ps
(
m2
, 
m3
);

48 
__m128
 
a2
 = 
	`_mm_add_ps
(
a0
, 
a1
);

50  
a2
;

51 
	}
}

53 
GLM_FUNC_QUALIFIER
 
__m128
 
	$glm_vec4_mul_m©4
(
glm_vec4
 
v
, glm_vec4 c⁄° 
m
[4])

55 
__m128
 
i0
 = 
m
[0];

56 
__m128
 
i1
 = 
m
[1];

57 
__m128
 
i2
 = 
m
[2];

58 
__m128
 
i3
 = 
m
[3];

60 
__m128
 
m0
 = 
	`_mm_mul_ps
(
v
, 
i0
);

61 
__m128
 
m1
 = 
	`_mm_mul_ps
(
v
, 
i1
);

62 
__m128
 
m2
 = 
	`_mm_mul_ps
(
v
, 
i2
);

63 
__m128
 
m3
 = 
	`_mm_mul_ps
(
v
, 
i3
);

65 
__m128
 
u0
 = 
	`_mm_u≈acklo_ps
(
m0
, 
m1
);

66 
__m128
 
u1
 = 
	`_mm_u≈ackhi_ps
(
m0
, 
m1
);

67 
__m128
 
a0
 = 
	`_mm_add_ps
(
u0
, 
u1
);

69 
__m128
 
u2
 = 
	`_mm_u≈acklo_ps
(
m2
, 
m3
);

70 
__m128
 
u3
 = 
	`_mm_u≈ackhi_ps
(
m2
, 
m3
);

71 
__m128
 
a1
 = 
	`_mm_add_ps
(
u2
, 
u3
);

73 
__m128
 
f0
 = 
	`_mm_movñh_ps
(
a0
, 
a1
);

74 
__m128
 
f1
 = 
	`_mm_movehl_ps
(
a1
, 
a0
);

75 
__m128
 
f2
 = 
	`_mm_add_ps
(
f0
, 
f1
);

77  
f2
;

78 
	}
}

80 
GLM_FUNC_QUALIFIER
 
	$glm_m©4_mul
(
glm_vec4
 c⁄° 
ö1
[4], glm_vec4 c⁄° 
ö2
[4], glm_vec4 
out
[4])

83 
__m128
 
e0
 = 
	`_mm_shufÊe_ps
(
ö2
[0], in2[0], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

84 
__m128
 
e1
 = 
	`_mm_shufÊe_ps
(
ö2
[0], in2[0], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

85 
__m128
 
e2
 = 
	`_mm_shufÊe_ps
(
ö2
[0], in2[0], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

86 
__m128
 
e3
 = 
	`_mm_shufÊe_ps
(
ö2
[0], in2[0], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

88 
__m128
 
m0
 = 
	`_mm_mul_ps
(
ö1
[0], 
e0
);

89 
__m128
 
m1
 = 
	`_mm_mul_ps
(
ö1
[1], 
e1
);

90 
__m128
 
m2
 = 
	`_mm_mul_ps
(
ö1
[2], 
e2
);

91 
__m128
 
m3
 = 
	`_mm_mul_ps
(
ö1
[3], 
e3
);

93 
__m128
 
a0
 = 
	`_mm_add_ps
(
m0
, 
m1
);

94 
__m128
 
a1
 = 
	`_mm_add_ps
(
m2
, 
m3
);

95 
__m128
 
a2
 = 
	`_mm_add_ps
(
a0
, 
a1
);

97 
out
[0] = 
a2
;

101 
__m128
 
e0
 = 
	`_mm_shufÊe_ps
(
ö2
[1], in2[1], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

102 
__m128
 
e1
 = 
	`_mm_shufÊe_ps
(
ö2
[1], in2[1], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

103 
__m128
 
e2
 = 
	`_mm_shufÊe_ps
(
ö2
[1], in2[1], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

104 
__m128
 
e3
 = 
	`_mm_shufÊe_ps
(
ö2
[1], in2[1], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

106 
__m128
 
m0
 = 
	`_mm_mul_ps
(
ö1
[0], 
e0
);

107 
__m128
 
m1
 = 
	`_mm_mul_ps
(
ö1
[1], 
e1
);

108 
__m128
 
m2
 = 
	`_mm_mul_ps
(
ö1
[2], 
e2
);

109 
__m128
 
m3
 = 
	`_mm_mul_ps
(
ö1
[3], 
e3
);

111 
__m128
 
a0
 = 
	`_mm_add_ps
(
m0
, 
m1
);

112 
__m128
 
a1
 = 
	`_mm_add_ps
(
m2
, 
m3
);

113 
__m128
 
a2
 = 
	`_mm_add_ps
(
a0
, 
a1
);

115 
out
[1] = 
a2
;

119 
__m128
 
e0
 = 
	`_mm_shufÊe_ps
(
ö2
[2], in2[2], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

120 
__m128
 
e1
 = 
	`_mm_shufÊe_ps
(
ö2
[2], in2[2], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

121 
__m128
 
e2
 = 
	`_mm_shufÊe_ps
(
ö2
[2], in2[2], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

122 
__m128
 
e3
 = 
	`_mm_shufÊe_ps
(
ö2
[2], in2[2], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

124 
__m128
 
m0
 = 
	`_mm_mul_ps
(
ö1
[0], 
e0
);

125 
__m128
 
m1
 = 
	`_mm_mul_ps
(
ö1
[1], 
e1
);

126 
__m128
 
m2
 = 
	`_mm_mul_ps
(
ö1
[2], 
e2
);

127 
__m128
 
m3
 = 
	`_mm_mul_ps
(
ö1
[3], 
e3
);

129 
__m128
 
a0
 = 
	`_mm_add_ps
(
m0
, 
m1
);

130 
__m128
 
a1
 = 
	`_mm_add_ps
(
m2
, 
m3
);

131 
__m128
 
a2
 = 
	`_mm_add_ps
(
a0
, 
a1
);

133 
out
[2] = 
a2
;

138 
__m128
 
e0
 = 
	`_mm_shufÊe_ps
(
ö2
[3], in2[3], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

139 
__m128
 
e1
 = 
	`_mm_shufÊe_ps
(
ö2
[3], in2[3], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

140 
__m128
 
e2
 = 
	`_mm_shufÊe_ps
(
ö2
[3], in2[3], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

141 
__m128
 
e3
 = 
	`_mm_shufÊe_ps
(
ö2
[3], in2[3], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

143 
__m128
 
m0
 = 
	`_mm_mul_ps
(
ö1
[0], 
e0
);

144 
__m128
 
m1
 = 
	`_mm_mul_ps
(
ö1
[1], 
e1
);

145 
__m128
 
m2
 = 
	`_mm_mul_ps
(
ö1
[2], 
e2
);

146 
__m128
 
m3
 = 
	`_mm_mul_ps
(
ö1
[3], 
e3
);

148 
__m128
 
a0
 = 
	`_mm_add_ps
(
m0
, 
m1
);

149 
__m128
 
a1
 = 
	`_mm_add_ps
(
m2
, 
m3
);

150 
__m128
 
a2
 = 
	`_mm_add_ps
(
a0
, 
a1
);

152 
out
[3] = 
a2
;

154 
	}
}

156 
GLM_FUNC_QUALIFIER
 
	$glm_m©4_å™•o£
(
glm_vec4
 c⁄° 
ö
[4], glm_vec4 
out
[4])

158 
__m128
 
tmp0
 = 
	`_mm_shufÊe_ps
(
ö
[0], in[1], 0x44);

159 
__m128
 
tmp2
 = 
	`_mm_shufÊe_ps
(
ö
[0], in[1], 0xEE);

160 
__m128
 
tmp1
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[3], 0x44);

161 
__m128
 
tmp3
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[3], 0xEE);

163 
out
[0] = 
	`_mm_shufÊe_ps
(
tmp0
, 
tmp1
, 0x88);

164 
out
[1] = 
	`_mm_shufÊe_ps
(
tmp0
, 
tmp1
, 0xDD);

165 
out
[2] = 
	`_mm_shufÊe_ps
(
tmp2
, 
tmp3
, 0x88);

166 
out
[3] = 
	`_mm_shufÊe_ps
(
tmp2
, 
tmp3
, 0xDD);

167 
	}
}

169 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_m©4_dëîmö™t_highp
(
glm_vec4
 c⁄° 
ö
[4])

171 
__m128
 
Fac0
;

178 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

179 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

181 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

182 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

183 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

184 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

186 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

187 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

188 
Fac0
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

191 
__m128
 
Fac1
;

198 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

199 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

201 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

202 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

203 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

204 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

206 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

207 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

208 
Fac1
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

212 
__m128
 
Fac2
;

219 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

220 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

222 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

223 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

224 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

225 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

227 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

228 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

229 
Fac2
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

232 
__m128
 
Fac3
;

239 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

240 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

242 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

243 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

244 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

245 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

247 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

248 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

249 
Fac3
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

252 
__m128
 
Fac4
;

259 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

260 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

262 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

263 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

264 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

265 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

267 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

268 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

269 
Fac4
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

272 
__m128
 
Fac5
;

279 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

280 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

282 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

283 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

284 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

285 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

287 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

288 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

289 
Fac5
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

292 
__m128
 
SignA
 = 
	`_mm_£t_ps
( 1.0f,-1.0f, 1.0f,-1.0f);

293 
__m128
 
SignB
 = 
	`_mm_£t_ps
(-1.0f, 1.0f,-1.0f, 1.0f);

299 
__m128
 
Temp0
 = 
	`_mm_shufÊe_ps
(
ö
[1], in[0], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

300 
__m128
 
Vec0
 = 
	`_mm_shufÊe_ps
(
Temp0
, Temp0, 
	`_MM_SHUFFLE
(2, 2, 2, 0));

306 
__m128
 
Temp1
 = 
	`_mm_shufÊe_ps
(
ö
[1], in[0], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

307 
__m128
 
Vec1
 = 
	`_mm_shufÊe_ps
(
Temp1
, Temp1, 
	`_MM_SHUFFLE
(2, 2, 2, 0));

313 
__m128
 
Temp2
 = 
	`_mm_shufÊe_ps
(
ö
[1], in[0], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

314 
__m128
 
Vec2
 = 
	`_mm_shufÊe_ps
(
Temp2
, Temp2, 
	`_MM_SHUFFLE
(2, 2, 2, 0));

320 
__m128
 
Temp3
 = 
	`_mm_shufÊe_ps
(
ö
[1], in[0], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

321 
__m128
 
Vec3
 = 
	`_mm_shufÊe_ps
(
Temp3
, Temp3, 
	`_MM_SHUFFLE
(2, 2, 2, 0));

328 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Vec1
, 
Fac0
);

329 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Vec2
, 
Fac1
);

330 
__m128
 
Mul02
 = 
	`_mm_mul_ps
(
Vec3
, 
Fac2
);

331 
__m128
 
Sub00
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

332 
__m128
 
Add00
 = 
	`_mm_add_ps
(
Sub00
, 
Mul02
);

333 
__m128
 
Inv0
 = 
	`_mm_mul_ps
(
SignB
, 
Add00
);

340 
__m128
 
Mul03
 = 
	`_mm_mul_ps
(
Vec0
, 
Fac0
);

341 
__m128
 
Mul04
 = 
	`_mm_mul_ps
(
Vec2
, 
Fac3
);

342 
__m128
 
Mul05
 = 
	`_mm_mul_ps
(
Vec3
, 
Fac4
);

343 
__m128
 
Sub01
 = 
	`_mm_sub_ps
(
Mul03
, 
Mul04
);

344 
__m128
 
Add01
 = 
	`_mm_add_ps
(
Sub01
, 
Mul05
);

345 
__m128
 
Inv1
 = 
	`_mm_mul_ps
(
SignA
, 
Add01
);

352 
__m128
 
Mul06
 = 
	`_mm_mul_ps
(
Vec0
, 
Fac1
);

353 
__m128
 
Mul07
 = 
	`_mm_mul_ps
(
Vec1
, 
Fac3
);

354 
__m128
 
Mul08
 = 
	`_mm_mul_ps
(
Vec3
, 
Fac5
);

355 
__m128
 
Sub02
 = 
	`_mm_sub_ps
(
Mul06
, 
Mul07
);

356 
__m128
 
Add02
 = 
	`_mm_add_ps
(
Sub02
, 
Mul08
);

357 
__m128
 
Inv2
 = 
	`_mm_mul_ps
(
SignB
, 
Add02
);

364 
__m128
 
Mul09
 = 
	`_mm_mul_ps
(
Vec0
, 
Fac2
);

365 
__m128
 
Mul10
 = 
	`_mm_mul_ps
(
Vec1
, 
Fac4
);

366 
__m128
 
Mul11
 = 
	`_mm_mul_ps
(
Vec2
, 
Fac5
);

367 
__m128
 
Sub03
 = 
	`_mm_sub_ps
(
Mul09
, 
Mul10
);

368 
__m128
 
Add03
 = 
	`_mm_add_ps
(
Sub03
, 
Mul11
);

369 
__m128
 
Inv3
 = 
	`_mm_mul_ps
(
SignA
, 
Add03
);

371 
__m128
 
Row0
 = 
	`_mm_shufÊe_ps
(
Inv0
, 
Inv1
, 
	`_MM_SHUFFLE
(0, 0, 0, 0));

372 
__m128
 
Row1
 = 
	`_mm_shufÊe_ps
(
Inv2
, 
Inv3
, 
	`_MM_SHUFFLE
(0, 0, 0, 0));

373 
__m128
 
Row2
 = 
	`_mm_shufÊe_ps
(
Row0
, 
Row1
, 
	`_MM_SHUFFLE
(2, 0, 2, 0));

379 
__m128
 
Dë0
 = 
	`glm_vec4_dŸ
(
ö
[0], 
Row2
);

380  
Dë0
;

381 
	}
}

383 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_m©4_dëîmö™t_lowp
(
glm_vec4
 c⁄° 
m
[4])

395 
__m128
 
Swp2A
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_shufÊe_ïi32
(
	`_mm_ˇ°ps_si128
(
m
[2]), 
	`_MM_SHUFFLE
(0, 1, 1, 2)));

396 
__m128
 
Swp3A
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_shufÊe_ïi32
(
	`_mm_ˇ°ps_si128
(
m
[3]), 
	`_MM_SHUFFLE
(3, 2, 3, 3)));

397 
__m128
 
MulA
 = 
	`_mm_mul_ps
(
Swp2A
, 
Swp3A
);

400 
__m128
 
Swp2B
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_shufÊe_ïi32
(
	`_mm_ˇ°ps_si128
(
m
[2]), 
	`_MM_SHUFFLE
(3, 2, 3, 3)));

401 
__m128
 
Swp3B
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_shufÊe_ïi32
(
	`_mm_ˇ°ps_si128
(
m
[3]), 
	`_MM_SHUFFLE
(0, 1, 1, 2)));

402 
__m128
 
MulB
 = 
	`_mm_mul_ps
(
Swp2B
, 
Swp3B
);

405 
__m128
 
SubE
 = 
	`_mm_sub_ps
(
MulA
, 
MulB
);

408 
__m128
 
Swp2C
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_shufÊe_ïi32
(
	`_mm_ˇ°ps_si128
(
m
[2]), 
	`_MM_SHUFFLE
(0, 0, 1, 2)));

409 
__m128
 
Swp3C
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_shufÊe_ïi32
(
	`_mm_ˇ°ps_si128
(
m
[3]), 
	`_MM_SHUFFLE
(1, 2, 0, 0)));

410 
__m128
 
MulC
 = 
	`_mm_mul_ps
(
Swp2C
, 
Swp3C
);

411 
__m128
 
SubF
 = 
	`_mm_sub_ps
(
	`_mm_movehl_ps
(
MulC
, MulC), MulC);

419 
__m128
 
SubFacA
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_shufÊe_ïi32
(
	`_mm_ˇ°ps_si128
(
SubE
), 
	`_MM_SHUFFLE
(2, 1, 0, 0)));

420 
__m128
 
SwpFacA
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_shufÊe_ïi32
(
	`_mm_ˇ°ps_si128
(
m
[1]), 
	`_MM_SHUFFLE
(0, 0, 0, 1)));

421 
__m128
 
MulFacA
 = 
	`_mm_mul_ps
(
SwpFacA
, 
SubFacA
);

423 
__m128
 
SubTmpB
 = 
	`_mm_shufÊe_ps
(
SubE
, 
SubF
, 
	`_MM_SHUFFLE
(0, 0, 3, 1));

424 
__m128
 
SubFacB
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_shufÊe_ïi32
(
	`_mm_ˇ°ps_si128
(
SubTmpB
), 
	`_MM_SHUFFLE
(3, 1, 1, 0)));

425 
__m128
 
SwpFacB
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_shufÊe_ïi32
(
	`_mm_ˇ°ps_si128
(
m
[1]), 
	`_MM_SHUFFLE
(1, 1, 2, 2)));

426 
__m128
 
MulFacB
 = 
	`_mm_mul_ps
(
SwpFacB
, 
SubFacB
);

428 
__m128
 
SubRes
 = 
	`_mm_sub_ps
(
MulFacA
, 
MulFacB
);

430 
__m128
 
SubTmpC
 = 
	`_mm_shufÊe_ps
(
SubE
, 
SubF
, 
	`_MM_SHUFFLE
(1, 0, 2, 2));

431 
__m128
 
SubFacC
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_shufÊe_ïi32
(
	`_mm_ˇ°ps_si128
(
SubTmpC
), 
	`_MM_SHUFFLE
(3, 3, 2, 0)));

432 
__m128
 
SwpFacC
 = 
	`_mm_ˇ°si128_ps
(
	`_mm_shufÊe_ïi32
(
	`_mm_ˇ°ps_si128
(
m
[1]), 
	`_MM_SHUFFLE
(2, 3, 3, 3)));

433 
__m128
 
MulFacC
 = 
	`_mm_mul_ps
(
SwpFacC
, 
SubFacC
);

435 
__m128
 
AddRes
 = 
	`_mm_add_ps
(
SubRes
, 
MulFacC
);

436 
__m128
 
DëCof
 = 
	`_mm_mul_ps
(
AddRes
, 
	`_mm_£å_ps
( 1.0f,-1.0f, 1.0f,-1.0f));

443  
	`glm_vec4_dŸ
(
m
[0], 
DëCof
);

444 
	}
}

446 
GLM_FUNC_QUALIFIER
 
glm_vec4
 
	$glm_m©4_dëîmö™t
(
glm_vec4
 c⁄° 
m
[4])

458 
__m128
 
Swp2A
 = 
	`_mm_shufÊe_ps
(
m
[2], m[2], 
	`_MM_SHUFFLE
(0, 1, 1, 2));

459 
__m128
 
Swp3A
 = 
	`_mm_shufÊe_ps
(
m
[3], m[3], 
	`_MM_SHUFFLE
(3, 2, 3, 3));

460 
__m128
 
MulA
 = 
	`_mm_mul_ps
(
Swp2A
, 
Swp3A
);

463 
__m128
 
Swp2B
 = 
	`_mm_shufÊe_ps
(
m
[2], m[2], 
	`_MM_SHUFFLE
(3, 2, 3, 3));

464 
__m128
 
Swp3B
 = 
	`_mm_shufÊe_ps
(
m
[3], m[3], 
	`_MM_SHUFFLE
(0, 1, 1, 2));

465 
__m128
 
MulB
 = 
	`_mm_mul_ps
(
Swp2B
, 
Swp3B
);

468 
__m128
 
SubE
 = 
	`_mm_sub_ps
(
MulA
, 
MulB
);

471 
__m128
 
Swp2C
 = 
	`_mm_shufÊe_ps
(
m
[2], m[2], 
	`_MM_SHUFFLE
(0, 0, 1, 2));

472 
__m128
 
Swp3C
 = 
	`_mm_shufÊe_ps
(
m
[3], m[3], 
	`_MM_SHUFFLE
(1, 2, 0, 0));

473 
__m128
 
MulC
 = 
	`_mm_mul_ps
(
Swp2C
, 
Swp3C
);

474 
__m128
 
SubF
 = 
	`_mm_sub_ps
(
	`_mm_movehl_ps
(
MulC
, MulC), MulC);

482 
__m128
 
SubFacA
 = 
	`_mm_shufÊe_ps
(
SubE
, SubE, 
	`_MM_SHUFFLE
(2, 1, 0, 0));

483 
__m128
 
SwpFacA
 = 
	`_mm_shufÊe_ps
(
m
[1], m[1], 
	`_MM_SHUFFLE
(0, 0, 0, 1));

484 
__m128
 
MulFacA
 = 
	`_mm_mul_ps
(
SwpFacA
, 
SubFacA
);

486 
__m128
 
SubTmpB
 = 
	`_mm_shufÊe_ps
(
SubE
, 
SubF
, 
	`_MM_SHUFFLE
(0, 0, 3, 1));

487 
__m128
 
SubFacB
 = 
	`_mm_shufÊe_ps
(
SubTmpB
, SubTmpB, 
	`_MM_SHUFFLE
(3, 1, 1, 0));

488 
__m128
 
SwpFacB
 = 
	`_mm_shufÊe_ps
(
m
[1], m[1], 
	`_MM_SHUFFLE
(1, 1, 2, 2));

489 
__m128
 
MulFacB
 = 
	`_mm_mul_ps
(
SwpFacB
, 
SubFacB
);

491 
__m128
 
SubRes
 = 
	`_mm_sub_ps
(
MulFacA
, 
MulFacB
);

493 
__m128
 
SubTmpC
 = 
	`_mm_shufÊe_ps
(
SubE
, 
SubF
, 
	`_MM_SHUFFLE
(1, 0, 2, 2));

494 
__m128
 
SubFacC
 = 
	`_mm_shufÊe_ps
(
SubTmpC
, SubTmpC, 
	`_MM_SHUFFLE
(3, 3, 2, 0));

495 
__m128
 
SwpFacC
 = 
	`_mm_shufÊe_ps
(
m
[1], m[1], 
	`_MM_SHUFFLE
(2, 3, 3, 3));

496 
__m128
 
MulFacC
 = 
	`_mm_mul_ps
(
SwpFacC
, 
SubFacC
);

498 
__m128
 
AddRes
 = 
	`_mm_add_ps
(
SubRes
, 
MulFacC
);

499 
__m128
 
DëCof
 = 
	`_mm_mul_ps
(
AddRes
, 
	`_mm_£å_ps
( 1.0f,-1.0f, 1.0f,-1.0f));

506  
	`glm_vec4_dŸ
(
m
[0], 
DëCof
);

507 
	}
}

509 
GLM_FUNC_QUALIFIER
 
	$glm_m©4_övî£
(
glm_vec4
 c⁄° 
ö
[4], glm_vec4 
out
[4])

511 
__m128
 
Fac0
;

518 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

519 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

521 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

522 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

523 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

524 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

526 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

527 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

528 
Fac0
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

531 
__m128
 
Fac1
;

538 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

539 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

541 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

542 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

543 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

544 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

546 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

547 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

548 
Fac1
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

552 
__m128
 
Fac2
;

559 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

560 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

562 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

563 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

564 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

565 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

567 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

568 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

569 
Fac2
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

572 
__m128
 
Fac3
;

579 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

580 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

582 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

583 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

584 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

585 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

587 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

588 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

589 
Fac3
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

592 
__m128
 
Fac4
;

599 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

600 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

602 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

603 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

604 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

605 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

607 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

608 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

609 
Fac4
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

612 
__m128
 
Fac5
;

619 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

620 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

622 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

623 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

624 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

625 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

627 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

628 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

629 
Fac5
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

632 
__m128
 
SignA
 = 
	`_mm_£t_ps
( 1.0f,-1.0f, 1.0f,-1.0f);

633 
__m128
 
SignB
 = 
	`_mm_£t_ps
(-1.0f, 1.0f,-1.0f, 1.0f);

639 
__m128
 
Temp0
 = 
	`_mm_shufÊe_ps
(
ö
[1], in[0], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

640 
__m128
 
Vec0
 = 
	`_mm_shufÊe_ps
(
Temp0
, Temp0, 
	`_MM_SHUFFLE
(2, 2, 2, 0));

646 
__m128
 
Temp1
 = 
	`_mm_shufÊe_ps
(
ö
[1], in[0], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

647 
__m128
 
Vec1
 = 
	`_mm_shufÊe_ps
(
Temp1
, Temp1, 
	`_MM_SHUFFLE
(2, 2, 2, 0));

653 
__m128
 
Temp2
 = 
	`_mm_shufÊe_ps
(
ö
[1], in[0], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

654 
__m128
 
Vec2
 = 
	`_mm_shufÊe_ps
(
Temp2
, Temp2, 
	`_MM_SHUFFLE
(2, 2, 2, 0));

660 
__m128
 
Temp3
 = 
	`_mm_shufÊe_ps
(
ö
[1], in[0], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

661 
__m128
 
Vec3
 = 
	`_mm_shufÊe_ps
(
Temp3
, Temp3, 
	`_MM_SHUFFLE
(2, 2, 2, 0));

668 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Vec1
, 
Fac0
);

669 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Vec2
, 
Fac1
);

670 
__m128
 
Mul02
 = 
	`_mm_mul_ps
(
Vec3
, 
Fac2
);

671 
__m128
 
Sub00
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

672 
__m128
 
Add00
 = 
	`_mm_add_ps
(
Sub00
, 
Mul02
);

673 
__m128
 
Inv0
 = 
	`_mm_mul_ps
(
SignB
, 
Add00
);

680 
__m128
 
Mul03
 = 
	`_mm_mul_ps
(
Vec0
, 
Fac0
);

681 
__m128
 
Mul04
 = 
	`_mm_mul_ps
(
Vec2
, 
Fac3
);

682 
__m128
 
Mul05
 = 
	`_mm_mul_ps
(
Vec3
, 
Fac4
);

683 
__m128
 
Sub01
 = 
	`_mm_sub_ps
(
Mul03
, 
Mul04
);

684 
__m128
 
Add01
 = 
	`_mm_add_ps
(
Sub01
, 
Mul05
);

685 
__m128
 
Inv1
 = 
	`_mm_mul_ps
(
SignA
, 
Add01
);

692 
__m128
 
Mul06
 = 
	`_mm_mul_ps
(
Vec0
, 
Fac1
);

693 
__m128
 
Mul07
 = 
	`_mm_mul_ps
(
Vec1
, 
Fac3
);

694 
__m128
 
Mul08
 = 
	`_mm_mul_ps
(
Vec3
, 
Fac5
);

695 
__m128
 
Sub02
 = 
	`_mm_sub_ps
(
Mul06
, 
Mul07
);

696 
__m128
 
Add02
 = 
	`_mm_add_ps
(
Sub02
, 
Mul08
);

697 
__m128
 
Inv2
 = 
	`_mm_mul_ps
(
SignB
, 
Add02
);

704 
__m128
 
Mul09
 = 
	`_mm_mul_ps
(
Vec0
, 
Fac2
);

705 
__m128
 
Mul10
 = 
	`_mm_mul_ps
(
Vec1
, 
Fac4
);

706 
__m128
 
Mul11
 = 
	`_mm_mul_ps
(
Vec2
, 
Fac5
);

707 
__m128
 
Sub03
 = 
	`_mm_sub_ps
(
Mul09
, 
Mul10
);

708 
__m128
 
Add03
 = 
	`_mm_add_ps
(
Sub03
, 
Mul11
);

709 
__m128
 
Inv3
 = 
	`_mm_mul_ps
(
SignA
, 
Add03
);

711 
__m128
 
Row0
 = 
	`_mm_shufÊe_ps
(
Inv0
, 
Inv1
, 
	`_MM_SHUFFLE
(0, 0, 0, 0));

712 
__m128
 
Row1
 = 
	`_mm_shufÊe_ps
(
Inv2
, 
Inv3
, 
	`_MM_SHUFFLE
(0, 0, 0, 0));

713 
__m128
 
Row2
 = 
	`_mm_shufÊe_ps
(
Row0
, 
Row1
, 
	`_MM_SHUFFLE
(2, 0, 2, 0));

719 
__m128
 
Dë0
 = 
	`glm_vec4_dŸ
(
ö
[0], 
Row2
);

720 
__m128
 
R˝0
 = 
	`_mm_div_ps
(
	`_mm_£t1_ps
(1.0f), 
Dë0
);

724 
out
[0] = 
	`_mm_mul_ps
(
Inv0
, 
R˝0
);

725 
out
[1] = 
	`_mm_mul_ps
(
Inv1
, 
R˝0
);

726 
out
[2] = 
	`_mm_mul_ps
(
Inv2
, 
R˝0
);

727 
out
[3] = 
	`_mm_mul_ps
(
Inv3
, 
R˝0
);

728 
	}
}

730 
GLM_FUNC_QUALIFIER
 
	$glm_m©4_övî£_lowp
(
glm_vec4
 c⁄° 
ö
[4], glm_vec4 
out
[4])

732 
__m128
 
Fac0
;

739 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

740 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

742 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

743 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

744 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

745 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

747 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

748 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

749 
Fac0
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

752 
__m128
 
Fac1
;

759 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

760 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

762 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

763 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

764 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

765 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

767 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

768 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

769 
Fac1
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

773 
__m128
 
Fac2
;

780 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

781 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

783 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

784 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

785 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

786 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

788 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

789 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

790 
Fac2
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

793 
__m128
 
Fac3
;

800 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

801 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

803 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

804 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

805 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

806 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

808 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

809 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

810 
Fac3
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

813 
__m128
 
Fac4
;

820 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

821 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

823 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

824 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

825 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

826 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

828 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

829 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

830 
Fac4
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

833 
__m128
 
Fac5
;

840 
__m128
 
Swp0a
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

841 
__m128
 
Swp0b
 = 
	`_mm_shufÊe_ps
(
ö
[3], in[2], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

843 
__m128
 
Swp00
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

844 
__m128
 
Swp01
 = 
	`_mm_shufÊe_ps
(
Swp0a
, Swp0a, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

845 
__m128
 
Swp02
 = 
	`_mm_shufÊe_ps
(
Swp0b
, Swp0b, 
	`_MM_SHUFFLE
(2, 0, 0, 0));

846 
__m128
 
Swp03
 = 
	`_mm_shufÊe_ps
(
ö
[2], in[1], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

848 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Swp00
, 
Swp01
);

849 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Swp02
, 
Swp03
);

850 
Fac5
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

853 
__m128
 
SignA
 = 
	`_mm_£t_ps
( 1.0f,-1.0f, 1.0f,-1.0f);

854 
__m128
 
SignB
 = 
	`_mm_£t_ps
(-1.0f, 1.0f,-1.0f, 1.0f);

860 
__m128
 
Temp0
 = 
	`_mm_shufÊe_ps
(
ö
[1], in[0], 
	`_MM_SHUFFLE
(0, 0, 0, 0));

861 
__m128
 
Vec0
 = 
	`_mm_shufÊe_ps
(
Temp0
, Temp0, 
	`_MM_SHUFFLE
(2, 2, 2, 0));

867 
__m128
 
Temp1
 = 
	`_mm_shufÊe_ps
(
ö
[1], in[0], 
	`_MM_SHUFFLE
(1, 1, 1, 1));

868 
__m128
 
Vec1
 = 
	`_mm_shufÊe_ps
(
Temp1
, Temp1, 
	`_MM_SHUFFLE
(2, 2, 2, 0));

874 
__m128
 
Temp2
 = 
	`_mm_shufÊe_ps
(
ö
[1], in[0], 
	`_MM_SHUFFLE
(2, 2, 2, 2));

875 
__m128
 
Vec2
 = 
	`_mm_shufÊe_ps
(
Temp2
, Temp2, 
	`_MM_SHUFFLE
(2, 2, 2, 0));

881 
__m128
 
Temp3
 = 
	`_mm_shufÊe_ps
(
ö
[1], in[0], 
	`_MM_SHUFFLE
(3, 3, 3, 3));

882 
__m128
 
Vec3
 = 
	`_mm_shufÊe_ps
(
Temp3
, Temp3, 
	`_MM_SHUFFLE
(2, 2, 2, 0));

889 
__m128
 
Mul00
 = 
	`_mm_mul_ps
(
Vec1
, 
Fac0
);

890 
__m128
 
Mul01
 = 
	`_mm_mul_ps
(
Vec2
, 
Fac1
);

891 
__m128
 
Mul02
 = 
	`_mm_mul_ps
(
Vec3
, 
Fac2
);

892 
__m128
 
Sub00
 = 
	`_mm_sub_ps
(
Mul00
, 
Mul01
);

893 
__m128
 
Add00
 = 
	`_mm_add_ps
(
Sub00
, 
Mul02
);

894 
__m128
 
Inv0
 = 
	`_mm_mul_ps
(
SignB
, 
Add00
);

901 
__m128
 
Mul03
 = 
	`_mm_mul_ps
(
Vec0
, 
Fac0
);

902 
__m128
 
Mul04
 = 
	`_mm_mul_ps
(
Vec2
, 
Fac3
);

903 
__m128
 
Mul05
 = 
	`_mm_mul_ps
(
Vec3
, 
Fac4
);

904 
__m128
 
Sub01
 = 
	`_mm_sub_ps
(
Mul03
, 
Mul04
);

905 
__m128
 
Add01
 = 
	`_mm_add_ps
(
Sub01
, 
Mul05
);

906 
__m128
 
Inv1
 = 
	`_mm_mul_ps
(
SignA
, 
Add01
);

913 
__m128
 
Mul06
 = 
	`_mm_mul_ps
(
Vec0
, 
Fac1
);

914 
__m128
 
Mul07
 = 
	`_mm_mul_ps
(
Vec1
, 
Fac3
);

915 
__m128
 
Mul08
 = 
	`_mm_mul_ps
(
Vec3
, 
Fac5
);

916 
__m128
 
Sub02
 = 
	`_mm_sub_ps
(
Mul06
, 
Mul07
);

917 
__m128
 
Add02
 = 
	`_mm_add_ps
(
Sub02
, 
Mul08
);

918 
__m128
 
Inv2
 = 
	`_mm_mul_ps
(
SignB
, 
Add02
);

925 
__m128
 
Mul09
 = 
	`_mm_mul_ps
(
Vec0
, 
Fac2
);

926 
__m128
 
Mul10
 = 
	`_mm_mul_ps
(
Vec1
, 
Fac4
);

927 
__m128
 
Mul11
 = 
	`_mm_mul_ps
(
Vec2
, 
Fac5
);

928 
__m128
 
Sub03
 = 
	`_mm_sub_ps
(
Mul09
, 
Mul10
);

929 
__m128
 
Add03
 = 
	`_mm_add_ps
(
Sub03
, 
Mul11
);

930 
__m128
 
Inv3
 = 
	`_mm_mul_ps
(
SignA
, 
Add03
);

932 
__m128
 
Row0
 = 
	`_mm_shufÊe_ps
(
Inv0
, 
Inv1
, 
	`_MM_SHUFFLE
(0, 0, 0, 0));

933 
__m128
 
Row1
 = 
	`_mm_shufÊe_ps
(
Inv2
, 
Inv3
, 
	`_MM_SHUFFLE
(0, 0, 0, 0));

934 
__m128
 
Row2
 = 
	`_mm_shufÊe_ps
(
Row0
, 
Row1
, 
	`_MM_SHUFFLE
(2, 0, 2, 0));

940 
__m128
 
Dë0
 = 
	`glm_vec4_dŸ
(
ö
[0], 
Row2
);

941 
__m128
 
R˝0
 = 
	`_mm_r˝_ps
(
Dë0
);

944 
out
[0] = 
	`_mm_mul_ps
(
Inv0
, 
R˝0
);

945 
out
[1] = 
	`_mm_mul_ps
(
Inv1
, 
R˝0
);

946 
out
[2] = 
	`_mm_mul_ps
(
Inv2
, 
R˝0
);

947 
out
[3] = 
	`_mm_mul_ps
(
Inv3
, 
R˝0
);

948 
	}
}

1020 
GLM_FUNC_QUALIFIER
 
	$glm_m©4_ouãrProdu˘
(
__m128
 c⁄° & 
c
, __m128 c⁄° & 
r
, __m128 
out
[4])

1022 
out
[0] = 
	`_mm_mul_ps
(
c
, 
	`_mm_shufÊe_ps
(
r
,Ñ, 
	`_MM_SHUFFLE
(0, 0, 0, 0)));

1023 
out
[1] = 
	`_mm_mul_ps
(
c
, 
	`_mm_shufÊe_ps
(
r
,Ñ, 
	`_MM_SHUFFLE
(1, 1, 1, 1)));

1024 
out
[2] = 
	`_mm_mul_ps
(
c
, 
	`_mm_shufÊe_ps
(
r
,Ñ, 
	`_MM_SHUFFLE
(2, 2, 2, 2)));

1025 
out
[3] = 
	`_mm_mul_ps
(
c
, 
	`_mm_shufÊe_ps
(
r
,Ñ, 
	`_MM_SHUFFLE
(3, 3, 3, 3)));

1026 
	}
}

	@glm/glm/simd/packing.h

4 #¥agm®
⁄˚


6 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


	@glm/glm/simd/platform.h

4 #¥agm®
⁄˚


9 
	#GLM_PLATFORM_UNKNOWN
 0x00000000

	)

10 
	#GLM_PLATFORM_WINDOWS
 0x00010000

	)

11 
	#GLM_PLATFORM_LINUX
 0x00020000

	)

12 
	#GLM_PLATFORM_APPLE
 0x00040000

	)

14 
	#GLM_PLATFORM_ANDROID
 0x00100000

	)

15 
	#GLM_PLATFORM_CHROME_NACL
 0x00200000

	)

16 
	#GLM_PLATFORM_UNIX
 0x00400000

	)

17 
	#GLM_PLATFORM_QNXNTO
 0x00800000

	)

18 
	#GLM_PLATFORM_WINCE
 0x01000000

	)

19 
	#GLM_PLATFORM_CYGWIN
 0x02000000

	)

21 #ifde‡
GLM_FORCE_PLATFORM_UNKNOWN


22 
	#GLM_PLATFORM
 
GLM_PLATFORM_UNKNOWN


	)

23 #ñi‡
deföed
(
__CYGWIN__
)

24 
	#GLM_PLATFORM
 
GLM_PLATFORM_CYGWIN


	)

25 #ñi‡
deföed
(
__QNXNTO__
)

26 
	#GLM_PLATFORM
 
GLM_PLATFORM_QNXNTO


	)

27 #ñi‡
deföed
(
__APPLE__
)

28 
	#GLM_PLATFORM
 
GLM_PLATFORM_APPLE


	)

29 #ñi‡
deföed
(
WINCE
)

30 
	#GLM_PLATFORM
 
GLM_PLATFORM_WINCE


	)

31 #ñi‡
deföed
(
_WIN32
)

32 
	#GLM_PLATFORM
 
GLM_PLATFORM_WINDOWS


	)

33 #ñi‡
deföed
(
__«tive_˛õ¡__
)

34 
	#GLM_PLATFORM
 
GLM_PLATFORM_CHROME_NACL


	)

35 #ñi‡
deföed
(
__ANDROID__
)

36 
	#GLM_PLATFORM
 
GLM_PLATFORM_ANDROID


	)

37 #ñi‡
deföed
(
__löux
)

38 
	#GLM_PLATFORM
 
GLM_PLATFORM_LINUX


	)

39 #ñi‡
deföed
(
__unix
)

40 
	#GLM_PLATFORM
 
GLM_PLATFORM_UNIX


	)

42 
	#GLM_PLATFORM
 
GLM_PLATFORM_UNKNOWN


	)

46 #i‡
GLM_MESSAGES
 =
GLM_MESSAGES_ENABLED
 && !
deföed
(
GLM_MESSAGE_PLATFORM_DISPLAYED
)

47 
	#GLM_MESSAGE_PLATFORM_DISPLAYED


	)

48 #if(
GLM_PLATFORM
 & 
GLM_PLATFORM_QNXNTO
)

49 #¥agm®
mesßge
("GLM: QNXÖlatform detected")

52 #ñif(
GLM_PLATFORM
 & 
GLM_PLATFORM_APPLE
)

53 #¥agm®
mesßge
("GLM: AppleÖlatform detected")

54 #ñif(
GLM_PLATFORM
 & 
GLM_PLATFORM_WINCE
)

55 #¥agm®
mesßge
("GLM: WinCEÖlatform detected")

56 #ñif(
GLM_PLATFORM
 & 
GLM_PLATFORM_WINDOWS
)

57 #¥agm®
mesßge
("GLM: WindowsÖlatform detected")

58 #ñif(
GLM_PLATFORM
 & 
GLM_PLATFORM_CHROME_NACL
)

59 #¥agm®
mesßge
("GLM: Native Client detected")

60 #ñif(
GLM_PLATFORM
 & 
GLM_PLATFORM_ANDROID
)

61 #¥agm®
mesßge
("GLM: AndroidÖlatform detected")

62 #ñif(
GLM_PLATFORM
 & 
GLM_PLATFORM_LINUX
)

63 #¥agm®
mesßge
("GLM: LinuxÖlatform detected")

64 #ñif(
GLM_PLATFORM
 & 
GLM_PLATFORM_UNIX
)

65 #¥agm®
mesßge
("GLM: UNIXÖlatform detected")

66 #ñif(
GLM_PLATFORM
 & 
GLM_PLATFORM_UNKNOWN
)

67 #¥agm®
mesßge
("GLM:Ölatform unknown")

69 #¥agm®
mesßge
("GLM:ÖlatformÇot detected")

76 
	#GLM_COMPILER_UNKNOWN
 0x00000000

	)

79 
	#GLM_COMPILER_INTEL
 0x00100000

	)

80 
	#GLM_COMPILER_INTEL12
 0x00100010

	)

81 
	#GLM_COMPILER_INTEL12_1
 0x00100020

	)

82 
	#GLM_COMPILER_INTEL13
 0x00100030

	)

83 
	#GLM_COMPILER_INTEL14
 0x00100040

	)

84 
	#GLM_COMPILER_INTEL15
 0x00100050

	)

85 
	#GLM_COMPILER_INTEL16
 0x00100060

	)

88 
	#GLM_COMPILER_VC
 0x01000000

	)

89 
	#GLM_COMPILER_VC10
 0x01000090

	)

90 
	#GLM_COMPILER_VC11
 0x010000A0

	)

91 
	#GLM_COMPILER_VC12
 0x010000B0

	)

92 
	#GLM_COMPILER_VC14
 0x010000C0

	)

93 
	#GLM_COMPILER_VC15
 0x010000D0

	)

96 
	#GLM_COMPILER_GCC
 0x02000000

	)

97 
	#GLM_COMPILER_GCC44
 0x020000B0

	)

98 
	#GLM_COMPILER_GCC45
 0x020000C0

	)

99 
	#GLM_COMPILER_GCC46
 0x020000D0

	)

100 
	#GLM_COMPILER_GCC47
 0x020000E0

	)

101 
	#GLM_COMPILER_GCC48
 0x020000F0

	)

102 
	#GLM_COMPILER_GCC49
 0x02000100

	)

103 
	#GLM_COMPILER_GCC50
 0x02000200

	)

104 
	#GLM_COMPILER_GCC51
 0x02000300

	)

105 
	#GLM_COMPILER_GCC52
 0x02000400

	)

106 
	#GLM_COMPILER_GCC53
 0x02000500

	)

107 
	#GLM_COMPILER_GCC54
 0x02000600

	)

108 
	#GLM_COMPILER_GCC60
 0x02000700

	)

109 
	#GLM_COMPILER_GCC61
 0x02000800

	)

110 
	#GLM_COMPILER_GCC62
 0x02000900

	)

111 
	#GLM_COMPILER_GCC70
 0x02000A00

	)

112 
	#GLM_COMPILER_GCC71
 0x02000B00

	)

113 
	#GLM_COMPILER_GCC72
 0x02000C00

	)

114 
	#GLM_COMPILER_GCC80
 0x02000D00

	)

117 
	#GLM_COMPILER_CUDA
 0x10000000

	)

118 
	#GLM_COMPILER_CUDA40
 0x10000040

	)

119 
	#GLM_COMPILER_CUDA41
 0x10000050

	)

120 
	#GLM_COMPILER_CUDA42
 0x10000060

	)

121 
	#GLM_COMPILER_CUDA50
 0x10000070

	)

122 
	#GLM_COMPILER_CUDA60
 0x10000080

	)

123 
	#GLM_COMPILER_CUDA65
 0x10000090

	)

124 
	#GLM_COMPILER_CUDA70
 0x100000A0

	)

125 
	#GLM_COMPILER_CUDA75
 0x100000B0

	)

126 
	#GLM_COMPILER_CUDA80
 0x100000C0

	)

129 
	#GLM_COMPILER_CLANG
 0x20000000

	)

130 
	#GLM_COMPILER_CLANG32
 0x20000030

	)

131 
	#GLM_COMPILER_CLANG33
 0x20000040

	)

132 
	#GLM_COMPILER_CLANG34
 0x20000050

	)

133 
	#GLM_COMPILER_CLANG35
 0x20000060

	)

134 
	#GLM_COMPILER_CLANG36
 0x20000070

	)

135 
	#GLM_COMPILER_CLANG37
 0x20000080

	)

136 
	#GLM_COMPILER_CLANG38
 0x20000090

	)

137 
	#GLM_COMPILER_CLANG39
 0x200000A0

	)

138 
	#GLM_COMPILER_CLANG40
 0x200000B0

	)

139 
	#GLM_COMPILER_CLANG41
 0x200000C0

	)

140 
	#GLM_COMPILER_CLANG42
 0x200000D0

	)

143 
	#GLM_MODEL_32
 0x00000010

	)

144 
	#GLM_MODEL_64
 0x00000020

	)

147 #ifde‡
GLM_FORCE_COMPILER_UNKNOWN


148 
	#GLM_COMPILER
 
GLM_COMPILER_UNKNOWN


	)

150 #ñi‡
deföed
(
__INTEL_COMPILER
)

151 #i‡
__INTEL_COMPILER
 == 1200

152 
	#GLM_COMPILER
 
GLM_COMPILER_INTEL12


	)

153 #ñi‡
__INTEL_COMPILER
 == 1210

154 
	#GLM_COMPILER
 
GLM_COMPILER_INTEL12_1


	)

155 #ñi‡
__INTEL_COMPILER
 == 1300

156 
	#GLM_COMPILER
 
GLM_COMPILER_INTEL13


	)

157 #ñi‡
__INTEL_COMPILER
 == 1400

158 
	#GLM_COMPILER
 
GLM_COMPILER_INTEL14


	)

159 #ñi‡
__INTEL_COMPILER
 == 1500

160 
	#GLM_COMPILER
 
GLM_COMPILER_INTEL15


	)

161 #ñi‡
__INTEL_COMPILER
 >= 1600

162 
	#GLM_COMPILER
 
GLM_COMPILER_INTEL16


	)

164 
	#GLM_COMPILER
 
GLM_COMPILER_INTEL


	)

168 #ñi‡
deföed
(
__CUDACC__
)

169 #i‡!
deföed
(
CUDA_VERSION
Ë&& !deföed(
GLM_FORCE_CUDA
)

170 
	~<cuda.h
>

172 #i‡
CUDA_VERSION
 < 3000

175 
	#GLM_COMPILER
 
GLM_COMPILER_CUDA


	)

179 #ñi‡
deföed
(
__˛™g__
)

180 #i‡
GLM_PLATFORM
 & 
GLM_PLATFORM_APPLE


181 #i‡
__˛™g_maj‹__
 =5 && 
__˛™g_mö‹__
 == 0

182 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG33


	)

183 #ñi‡
__˛™g_maj‹__
 =5 && 
__˛™g_mö‹__
 == 1

184 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG34


	)

185 #ñi‡
__˛™g_maj‹__
 =6 && 
__˛™g_mö‹__
 == 0

186 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG35


	)

187 #ñi‡
__˛™g_maj‹__
 =6 && 
__˛™g_mö‹__
 >= 1

188 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG36


	)

189 #ñi‡
__˛™g_maj‹__
 >= 7

190 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG37


	)

192 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG


	)

195 #i‡
__˛™g_maj‹__
 =3 && 
__˛™g_mö‹__
 == 0

196 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG30


	)

197 #ñi‡
__˛™g_maj‹__
 =3 && 
__˛™g_mö‹__
 == 1

198 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG31


	)

199 #ñi‡
__˛™g_maj‹__
 =3 && 
__˛™g_mö‹__
 == 2

200 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG32


	)

201 #ñi‡
__˛™g_maj‹__
 =3 && 
__˛™g_mö‹__
 == 3

202 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG33


	)

203 #ñi‡
__˛™g_maj‹__
 =3 && 
__˛™g_mö‹__
 == 4

204 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG34


	)

205 #ñi‡
__˛™g_maj‹__
 =3 && 
__˛™g_mö‹__
 == 5

206 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG35


	)

207 #ñi‡
__˛™g_maj‹__
 =3 && 
__˛™g_mö‹__
 == 6

208 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG36


	)

209 #ñi‡
__˛™g_maj‹__
 =3 && 
__˛™g_mö‹__
 == 7

210 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG37


	)

211 #ñi‡
__˛™g_maj‹__
 =3 && 
__˛™g_mö‹__
 == 8

212 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG38


	)

213 #ñi‡
__˛™g_maj‹__
 =3 && 
__˛™g_mö‹__
 >= 9

214 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG39


	)

215 #ñi‡
__˛™g_maj‹__
 =4 && 
__˛™g_mö‹__
 == 0

216 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG40


	)

217 #ñi‡
__˛™g_maj‹__
 =4 && 
__˛™g_mö‹__
 == 1

218 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG41


	)

219 #ñi‡
__˛™g_maj‹__
 =4 && 
__˛™g_mö‹__
 >= 2

220 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG42


	)

221 #ñi‡
__˛™g_maj‹__
 >= 4

222 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG42


	)

224 
	#GLM_COMPILER
 
GLM_COMPILER_CLANG


	)

229 #ñi‡
deföed
(
_MSC_VER
)

230 #i‡
_MSC_VER
 < 1600

232 #ñi‡
_MSC_VER
 == 1600

233 
	#GLM_COMPILER
 
GLM_COMPILER_VC11


	)

234 #ñi‡
_MSC_VER
 == 1700

235 
	#GLM_COMPILER
 
GLM_COMPILER_VC11


	)

236 #ñi‡
_MSC_VER
 == 1800

237 
	#GLM_COMPILER
 
GLM_COMPILER_VC12


	)

238 #ñi‡
_MSC_VER
 == 1900

239 
	#GLM_COMPILER
 
GLM_COMPILER_VC14


	)

240 #ñi‡
_MSC_VER
 >= 1910

241 
	#GLM_COMPILER
 
GLM_COMPILER_VC15


	)

243 
	#GLM_COMPILER
 
GLM_COMPILER_VC


	)

247 #ñi‡
deföed
(
__GNUC__
Ë|| deföed(
__MINGW32__
)

248 #i‡(
__GNUC__
 =4Ë&& (
__GNUC_MINOR__
 == 2)

249 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC42
)

	)

250 #ñi‡(
__GNUC__
 =4Ë&& (
__GNUC_MINOR__
 == 3)

251 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC43
)

	)

252 #ñi‡(
__GNUC__
 =4Ë&& (
__GNUC_MINOR__
 == 4)

253 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC44
)

	)

254 #ñi‡(
__GNUC__
 =4Ë&& (
__GNUC_MINOR__
 == 5)

255 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC45
)

	)

256 #ñi‡(
__GNUC__
 =4Ë&& (
__GNUC_MINOR__
 == 6)

257 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC46
)

	)

258 #ñi‡(
__GNUC__
 =4Ë&& (
__GNUC_MINOR__
 == 7)

259 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC47
)

	)

260 #ñi‡(
__GNUC__
 =4Ë&& (
__GNUC_MINOR__
 == 8)

261 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC48
)

	)

262 #ñi‡(
__GNUC__
 =4Ë&& (
__GNUC_MINOR__
 >= 9)

263 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC49
)

	)

264 #ñi‡(
__GNUC__
 =5Ë&& (
__GNUC_MINOR__
 == 0)

265 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC50
)

	)

266 #ñi‡(
__GNUC__
 =5Ë&& (
__GNUC_MINOR__
 == 1)

267 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC51
)

	)

268 #ñi‡(
__GNUC__
 =5Ë&& (
__GNUC_MINOR__
 == 2)

269 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC52
)

	)

270 #ñi‡(
__GNUC__
 =5Ë&& (
__GNUC_MINOR__
 == 3)

271 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC53
)

	)

272 #ñi‡(
__GNUC__
 =5Ë&& (
__GNUC_MINOR__
 >= 4)

273 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC54
)

	)

274 #ñi‡(
__GNUC__
 =6Ë&& (
__GNUC_MINOR__
 == 0)

275 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC60
)

	)

276 #ñi‡(
__GNUC__
 =6Ë&& (
__GNUC_MINOR__
 == 1)

277 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC61
)

	)

278 #ñi‡(
__GNUC__
 =6Ë&& (
__GNUC_MINOR__
 >= 2)

279 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC62
)

	)

280 #ñi‡(
__GNUC__
 =7Ë&& (
__GNUC_MINOR__
 == 0)

281 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC70
)

	)

282 #ñi‡(
__GNUC__
 =7Ë&& (
__GNUC_MINOR__
 == 1)

283 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC71
)

	)

284 #ñi‡(
__GNUC__
 =7Ë&& (
__GNUC_MINOR__
 == 2)

285 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC72
)

	)

286 #ñi‡(
__GNUC__
 >= 8)

287 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC80
)

	)

289 
	#GLM_COMPILER
 (
GLM_COMPILER_GCC
)

	)

293 
	#GLM_COMPILER
 
GLM_COMPILER_UNKNOWN


	)

296 #i‚de‡
GLM_COMPILER


305 
	#GLM_ARCH_X86_BIT
 0x00000001

	)

306 
	#GLM_ARCH_SSE2_BIT
 0x00000002

	)

307 
	#GLM_ARCH_SSE3_BIT
 0x00000004

	)

308 
	#GLM_ARCH_SSSE3_BIT
 0x00000008

	)

309 
	#GLM_ARCH_SSE41_BIT
 0x00000010

	)

310 
	#GLM_ARCH_SSE42_BIT
 0x00000020

	)

311 
	#GLM_ARCH_AVX_BIT
 0x00000040

	)

312 
	#GLM_ARCH_AVX2_BIT
 0x00000080

	)

313 
	#GLM_ARCH_AVX512_BIT
 0x00000100

314 
	#GLM_ARCH_ARM_BIT
 0x00000100

	)

315 
	#GLM_ARCH_NEON_BIT
 0x00000200

	)

316 
	#GLM_ARCH_MIPS_BIT
 0x00010000

	)

317 
	#GLM_ARCH_PPC_BIT
 0x01000000

	)

319 
	#GLM_ARCH_PURE
 (0x00000000)

	)

320 
	#GLM_ARCH_X86
 (
GLM_ARCH_X86_BIT
)

	)

321 
	#GLM_ARCH_SSE2
 (
GLM_ARCH_SSE2_BIT
 | 
GLM_ARCH_X86
)

	)

322 
	#GLM_ARCH_SSE3
 (
GLM_ARCH_SSE3_BIT
 | 
GLM_ARCH_SSE2
)

	)

323 
	#GLM_ARCH_SSSE3
 (
GLM_ARCH_SSSE3_BIT
 | 
GLM_ARCH_SSE3
)

	)

324 
	#GLM_ARCH_SSE41
 (
GLM_ARCH_SSE41_BIT
 | 
GLM_ARCH_SSSE3
)

	)

325 
	#GLM_ARCH_SSE42
 (
GLM_ARCH_SSE42_BIT
 | 
GLM_ARCH_SSE41
)

	)

326 
	#GLM_ARCH_AVX
 (
GLM_ARCH_AVX_BIT
 | 
GLM_ARCH_SSE42
)

	)

327 
	#GLM_ARCH_AVX2
 (
GLM_ARCH_AVX2_BIT
 | 
GLM_ARCH_AVX
)

	)

328 
	#GLM_ARCH_AVX512
 (
GLM_ARCH_AVX512_BIT
 | 
GLM_ARCH_AVX2
)

329 
	#GLM_ARCH_ARM
 (
GLM_ARCH_ARM_BIT
)

	)

330 
	#GLM_ARCH_NEON
 (
GLM_ARCH_NEON_BIT
 | 
GLM_ARCH_ARM
)

	)

331 
	#GLM_ARCH_MIPS
 (
GLM_ARCH_MIPS_BIT
)

	)

332 
	#GLM_ARCH_PPC
 (
GLM_ARCH_PPC_BIT
)

	)

334 #i‡
deföed
(
GLM_FORCE_PURE
)

335 
	#GLM_ARCH
 
GLM_ARCH_PURE


	)

336 #ñi‡
deföed
(
GLM_FORCE_MIPS
)

337 
	#GLM_ARCH
 (
GLM_ARCH_MIPS
)

	)

338 #ñi‡
deföed
(
GLM_FORCE_PPC
)

339 
	#GLM_ARCH
 (
GLM_ARCH_PPC
)

	)

340 #ñi‡
deföed
(
GLM_FORCE_NEON
)

341 
	#GLM_ARCH
 (
GLM_ARCH_NEON
)

	)

342 #ñi‡
deföed
(
GLM_FORCE_AVX512
)

343 
	#GLM_ARCH
 (
GLM_ARCH_AVX512
)

	)

344 #ñi‡
deföed
(
GLM_FORCE_AVX2
)

345 
	#GLM_ARCH
 (
GLM_ARCH_AVX2
)

	)

346 #ñi‡
deföed
(
GLM_FORCE_AVX
)

347 
	#GLM_ARCH
 (
GLM_ARCH_AVX
)

	)

348 #ñi‡
deföed
(
GLM_FORCE_SSE42
)

349 
	#GLM_ARCH
 (
GLM_ARCH_SSE42
)

	)

350 #ñi‡
deföed
(
GLM_FORCE_SSE41
)

351 
	#GLM_ARCH
 (
GLM_ARCH_SSE41
)

	)

352 #ñi‡
deföed
(
GLM_FORCE_SSSE3
)

353 
	#GLM_ARCH
 (
GLM_ARCH_SSSE3
)

	)

354 #ñi‡
deföed
(
GLM_FORCE_SSE3
)

355 
	#GLM_ARCH
 (
GLM_ARCH_SSE3
)

	)

356 #ñi‡
deföed
(
GLM_FORCE_SSE2
)

357 
	#GLM_ARCH
 (
GLM_ARCH_SSE2
)

	)

358 #ñi‡(
GLM_COMPILER
 & (
GLM_COMPILER_CLANG
 | 
GLM_COMPILER_GCC
)Ë|| ((GLM_COMPILER & 
GLM_COMPILER_INTEL
Ë&& (
GLM_PLATFORM
 & 
GLM_PLATFORM_LINUX
))

360 #i‡
deföed
(
__AVX512BW__
Ë&& deföed(
__AVX512F__
Ë&& deföed(
__AVX512CD__
Ë&& deföed(
__AVX512VL__
Ë&& deföed(
__AVX512DQ__
)

361 
	#GLM_ARCH
 (
GLM_ARCH_AVX512
)

	)

362 #ñi‡
deföed
(
__AVX2__
)

363 
	#GLM_ARCH
 (
GLM_ARCH_AVX2
)

	)

364 #ñi‡
deföed
(
__AVX__
)

365 
	#GLM_ARCH
 (
GLM_ARCH_AVX
)

	)

366 #ñi‡
deföed
(
__SSE4_2__
)

367 
	#GLM_ARCH
 (
GLM_ARCH_SSE42
)

	)

368 #ñi‡
deföed
(
__SSE4_1__
)

369 
	#GLM_ARCH
 (
GLM_ARCH_SSE41
)

	)

370 #ñi‡
deföed
(
__SSSE3__
)

371 
	#GLM_ARCH
 (
GLM_ARCH_SSSE3
)

	)

372 #ñi‡
deföed
(
__SSE3__
)

373 
	#GLM_ARCH
 (
GLM_ARCH_SSE3
)

	)

374 #ñi‡
deföed
(
__SSE2__
)

375 
	#GLM_ARCH
 (
GLM_ARCH_SSE2
)

	)

376 #ñi‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

377 
	#GLM_ARCH
 (
GLM_ARCH_X86
)

	)

378 #ñi‡
deföed
(
__ARM_NEON
)

379 
	#GLM_ARCH
 (
GLM_ARCH_ARM
 | 
GLM_ARCH_NEON
)

	)

380 #ñi‡
deföed
(
__¨m__
 )

381 
	#GLM_ARCH
 (
GLM_ARCH_ARM
)

	)

382 #ñi‡
deföed
(
__mùs__
 )

383 
	#GLM_ARCH
 (
GLM_ARCH_MIPS
)

	)

384 #ñi‡
deföed
(
__powîpc__
 )

385 
	#GLM_ARCH
 (
GLM_ARCH_PPC
)

	)

387 
	#GLM_ARCH
 (
GLM_ARCH_PURE
)

	)

389 #ñi‡(
GLM_COMPILER
 & 
GLM_COMPILER_VC
Ë|| ((GLM_COMPILER & 
GLM_COMPILER_INTEL
Ë&& (
GLM_PLATFORM
 & 
GLM_PLATFORM_WINDOWS
))

390 #i‡
deföed
(
_M_ARM
)

391 
	#GLM_ARCH
 (
GLM_ARCH_ARM
)

	)

392 #ñi‡
deföed
(
__AVX2__
)

393 
	#GLM_ARCH
 (
GLM_ARCH_AVX2
)

	)

394 #ñi‡
deföed
(
__AVX__
)

395 
	#GLM_ARCH
 (
GLM_ARCH_AVX
)

	)

396 #ñi‡
deföed
(
_M_X64
)

397 
	#GLM_ARCH
 (
GLM_ARCH_SSE2
)

	)

398 #ñi‡
deföed
(
_M_IX86_FP
)

399 #i‡
_M_IX86_FP
 >= 2

400 
	#GLM_ARCH
 (
GLM_ARCH_SSE2
)

	)

402 
	#GLM_ARCH
 (
GLM_ARCH_PURE
)

	)

404 #ñi‡
deföed
(
_M_PPC
)

405 
	#GLM_ARCH
 (
GLM_ARCH_PPC
)

	)

407 
	#GLM_ARCH
 (
GLM_ARCH_PURE
)

	)

410 
	#GLM_ARCH
 
GLM_ARCH_PURE


	)

416 #i‡
deföed
(
__MINGW64__
Ë&& (
GLM_ARCH
 !
GLM_ARCH_PURE
)

417 
	~<öåö.h
>

420 #i‡
GLM_ARCH
 & 
GLM_ARCH_AVX2_BIT


421 
	~<immöåö.h
>

422 #ñi‡
GLM_ARCH
 & 
GLM_ARCH_AVX_BIT


423 
	~<immöåö.h
>

424 #ñi‡
GLM_ARCH
 & 
GLM_ARCH_SSE42_BIT


425 
	~<nmmöåö.h
>

426 #ñi‡
GLM_ARCH
 & 
GLM_ARCH_SSE41_BIT


427 
	~<smmöåö.h
>

428 #ñi‡
GLM_ARCH
 & 
GLM_ARCH_SSSE3_BIT


429 
	~<tmmöåö.h
>

430 #ñi‡
GLM_ARCH
 & 
GLM_ARCH_SSE3_BIT


431 
	~<pmmöåö.h
>

432 #ñi‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


433 
	~<emmöåö.h
>

436 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


437 
__m128
 
	tglm_vec4
;

438 
__m128i
 
	tglm_ivec4
;

439 
__m128i
 
	tglm_uvec4
;

442 #i‡
GLM_ARCH
 & 
GLM_ARCH_AVX_BIT


443 
__m256d
 
	tglm_dvec4
;

446 #i‡
GLM_ARCH
 & 
GLM_ARCH_AVX2_BIT


447 
__m256i
 
	tglm_i64vec4
;

448 
__m256i
 
	tglm_u64vec4
;

	@glm/glm/simd/trigonometric.h

4 #¥agm®
⁄˚


6 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


	@glm/glm/simd/vector_relational.h

4 #¥agm®
⁄˚


6 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


	@glm/glm/trigonometric.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/func_åig⁄omëric.hµ
"

	@glm/glm/vec2.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_vec2.hµ
"

	@glm/glm/vec3.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_vec3.hµ
"

	@glm/glm/vec4.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/ty≥_vec4.hµ
"

	@glm/glm/vector_relational.hpp

4 #¥agm®
⁄˚


6 
	~"dëaû/func_ve˘‹_ªœti⁄Æ.hµ
"

	@glm/test/bug/bug_ms_vec_static.cpp

1 
	#GLM_FORCE_SWIZZLE


	)

2 
	~<glm/vec2.hµ
>

4 
	sFoo


6 
	mglm
::
vec2
 
B¨
;

9 
	gglm
::
vec2
 
Foo
::
B¨
 = 
glm
::vec2(1.f, 1.f);

11 
	$maö
()

14 
	}
}

	@glm/test/core/core_force_pure.cpp

1 #i‚de‡
GLM_FORCE_PURE


2 
	#GLM_FORCE_PURE


	)

4 
	#GLM_FORCE_ALIGNED


	)

5 
	#GLM_FORCE_SWIZZLE


	)

6 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

7 
	~<glm/vec2.hµ
>

8 
	~<glm/vec3.hµ
>

9 
	~<glm/vec4.hµ
>

10 
	~<c°dio
>

11 
	~<˘ime
>

12 
	~<ve˘‹
>

14 
	$ã°_vec4_˘‹
()

16 
Eº‹
 = 0;

19 
glm
::
ivec4
 
	`A
(1, 2, 3, 4);

20 
glm
::
ivec4
 
	`B
(
A
);

21 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
B
)) ? 0 : 1;

24 #i‡
GLM_HAS_TRIVIAL_QUERIES


27 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
vec4
>::
vÆue
 ? 0 : 1;

28 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
dvec4
>::
vÆue
 ? 0 : 1;

29 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
ivec4
>::
vÆue
 ? 0 : 1;

30 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
uvec4
>::
vÆue
 ? 0 : 1;

32 
Eº‹
 +
°d
::
is_c›y_c⁄°ru˘ibÀ
<
glm
::
vec4
>::
vÆue
 ? 0 : 1;

35 #i‡
GLM_HAS_INITIALIZER_LISTS


37 
glm
::
vec4
 
a
{ 0, 1, 2, 3 };

38 
°d
::
ve˘‹
<
glm
::
vec4
> 
v
 = {

45 
glm
::
dvec4
 
a
{ 0, 1, 2, 3 };

46 
°d
::
ve˘‹
<
glm
::
dvec4
> 
v
 = {

53 #i‡
GLM_HAS_UNRESTRICTED_UNIONS
 && 
	`deföed
(
GLM_FORCE_SWIZZLE
)

55 
glm
::
vec4
 
A
 = glm::
	`vec4
(1.0f, 2.0f, 3.0f, 4.0f);

56 
glm
::
vec4
 
B
 = 
A
.
xyzw
;

57 
glm
::
vec4
 
	`C
(
A
.
xyzw
);

58 
glm
::
vec4
 
	`D
(
A
.
	`xyzw
());

59 
glm
::
vec4
 
	`E
(
A
.
x
, A.
yzw
);

60 
glm
::
vec4
 
	`F
(
A
.
x
, A.
	`yzw
());

61 
glm
::
vec4
 
	`G
(
A
.
xyz
, A.
w
);

62 
glm
::
vec4
 
	`H
(
A
.
	`xyz
(), A.
w
);

63 
glm
::
vec4
 
	`I
(
A
.
xy
, A.
zw
);

64 
glm
::
vec4
 
	`J
(
A
.
	`xy
(), A.
	`zw
());

65 
glm
::
vec4
 
	`K
(
A
.
x
, A.
y
, A.
zw
);

66 
glm
::
vec4
 
	`L
(
A
.
x
, A.
yz
, A.
w
);

67 
glm
::
vec4
 
	`M
(
A
.
xy
, A.
z
, A.
w
);

69 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
B
)) ? 0 : 1;

70 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
C
)) ? 0 : 1;

71 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
D
)) ? 0 : 1;

72 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
E
)) ? 0 : 1;

73 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
F
)) ? 0 : 1;

74 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
G
)) ? 0 : 1;

75 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
H
)) ? 0 : 1;

76 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
I
)) ? 0 : 1;

77 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
J
)) ? 0 : 1;

78 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
K
)) ? 0 : 1;

79 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
L
)) ? 0 : 1;

80 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
M
)) ? 0 : 1;

85 
glm
::
vec4
 
	`A
(1);

86 
glm
::
vec4
 
	`B
(1, 1, 1, 1);

88 
Eº‹
 +
A
 =
B
 ? 0 : 1;

92 
°d
::
ve˘‹
<
glm
::
vec4
> 
Te°s
;

93 
Te°s
.
	`push_back
(
glm
::
	`vec4
(glm::
	`vec2
(1, 2), 3, 4));

94 
Te°s
.
	`push_back
(
glm
::
	`vec4
(1, glm::
	`vec2
(2, 3), 4));

95 
Te°s
.
	`push_back
(
glm
::
	`vec4
(1, 2, glm::
	`vec2
(3, 4)));

96 
Te°s
.
	`push_back
(
glm
::
	`vec4
(glm::
	`vec3
(1, 2, 3), 4));

97 
Te°s
.
	`push_back
(
glm
::
	`vec4
(1, glm::
	`vec3
(2, 3, 4)));

98 
Te°s
.
	`push_back
(
glm
::
	`vec4
(glm::
	`vec2
(1, 2), glm::vec2(3, 4)));

99 
Te°s
.
	`push_back
(
glm
::
	`vec4
(1, 2, 3, 4));

100 
Te°s
.
	`push_back
(
glm
::
	`vec4
(glm::vec4(1, 2, 3, 4)));

102 
°d
::
size_t
 
i
 = 0; i < 
Te°s
.
	`size
(); ++i)

103 
Eº‹
 +
Te°s
[
i
] =
glm
::
	`vec4
(1, 2, 3, 4) ? 0 : 1;

106  
Eº‹
;

107 
	}
}

109 
	$ã°_bvec4_˘‹
()

111 
Eº‹
 = 0;

113 
glm
::
bvec4
 c⁄° 
	`A
(
åue
);

114 
glm
::
bvec4
 c⁄° 
	`B
(
åue
);

115 
glm
::
bvec4
 c⁄° 
	`C
(
Ál£
);

116 
glm
::
bvec4
 c⁄° 
D
 = 
A
 && 
B
;

117 
glm
::
bvec4
 c⁄° 
E
 = 
A
 && 
C
;

118 
glm
::
bvec4
 c⁄° 
F
 = 
A
 || 
C
;

119 
boﬁ
 c⁄° 
G
 = 
A
 =
C
;

120 
boﬁ
 c⁄° 
H
 = 
A
 !
C
;

122 
Eº‹
 +
D
 =
glm
::
	`bvec4
(
åue
) ? 0 : 1;

123 
Eº‹
 +
E
 =
glm
::
	`bvec4
(
Ál£
) ? 0 : 1;

124 
Eº‹
 +
F
 =
glm
::
	`bvec4
(
åue
) ? 0 : 1;

126  
Eº‹
;

127 
	}
}

129 
	$ã°_vec4_›î©‹s
()

131 
Eº‹
 = 0;

134 
glm
::
vec4
 
	`A
(1.0f);

135 
glm
::
vec4
 
	`B
(1.0f);

136 
boﬁ
 
R
 = 
A
 !
B
;

137 
boﬁ
 
S
 = 
A
 =
B
;

139 
Eº‹
 +(
S
 && !
R
) ? 0 : 1;

143 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

144 
glm
::
vec4
 
	`B
(4.0f, 5.0f, 6.0f, 7.0f);

146 
glm
::
vec4
 
C
 = 
A
 + 
B
;

147 
Eº‹
 +
C
 =
glm
::
	`vec4
(5, 7, 9, 11) ? 0 : 1;

149 
glm
::
vec4
 
D
 = 
B
 - 
A
;

150 
Eº‹
 +
D
 =
glm
::
	`vec4
(3, 3, 3, 3) ? 0 : 1;

152 
glm
::
vec4
 
E
 = 
A
 * 
B
;

153 
Eº‹
 +
E
 =
glm
::
	`vec4
(4, 10, 18, 28) ? 0 : 1;

155 
glm
::
vec4
 
F
 = 
B
 / 
A
;

156 
Eº‹
 +
F
 =
glm
::
	`vec4
(4, 2.5, 2, 7.0f / 4.0f) ? 0 : 1;

158 
glm
::
vec4
 
G
 = 
A
 + 1.0f;

159 
Eº‹
 +
G
 =
glm
::
	`vec4
(2, 3, 4, 5) ? 0 : 1;

161 
glm
::
vec4
 
H
 = 
B
 - 1.0f;

162 
Eº‹
 +
H
 =
glm
::
	`vec4
(3, 4, 5, 6) ? 0 : 1;

164 
glm
::
vec4
 
I
 = 
A
 * 2.0f;

165 
Eº‹
 +
I
 =
glm
::
	`vec4
(2, 4, 6, 8) ? 0 : 1;

167 
glm
::
vec4
 
J
 = 
B
 / 2.0f;

168 
Eº‹
 +
J
 =
glm
::
	`vec4
(2, 2.5, 3, 3.5) ? 0 : 1;

170 
glm
::
vec4
 
K
 = 1.0‡+ 
A
;

171 
Eº‹
 +
K
 =
glm
::
	`vec4
(2, 3, 4, 5) ? 0 : 1;

173 
glm
::
vec4
 
L
 = 1.0‡- 
B
;

174 
Eº‹
 +
L
 =
glm
::
	`vec4
(-3, -4, -5, -6) ? 0 : 1;

176 
glm
::
vec4
 
M
 = 2.0‡* 
A
;

177 
Eº‹
 +
M
 =
glm
::
	`vec4
(2, 4, 6, 8) ? 0 : 1;

179 
glm
::
vec4
 
N
 = 2.0‡/ 
B
;

180 
Eº‹
 +
N
 =
glm
::
	`vec4
(0.5, 2.0 / 5.0, 2.0 / 6.0, 2.0 / 7.0) ? 0 : 1;

184 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

185 
glm
::
vec4
 
	`B
(4.0f, 5.0f, 6.0f, 7.0f);

187 
A
 +
B
;

188 
Eº‹
 +
A
 =
glm
::
	`vec4
(5, 7, 9, 11) ? 0 : 1;

190 
A
 += 1.0f;

191 
Eº‹
 +
A
 =
glm
::
	`vec4
(6, 8, 10, 12) ? 0 : 1;

194 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

195 
glm
::
vec4
 
	`B
(4.0f, 5.0f, 6.0f, 7.0f);

197 
B
 -
A
;

198 
Eº‹
 +
B
 =
glm
::
	`vec4
(3, 3, 3, 3) ? 0 : 1;

200 
B
 -= 1.0f;

201 
Eº‹
 +
B
 =
glm
::
	`vec4
(2, 2, 2, 2) ? 0 : 1;

204 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

205 
glm
::
vec4
 
	`B
(4.0f, 5.0f, 6.0f, 7.0f);

207 
A
 *
B
;

208 
Eº‹
 +
A
 =
glm
::
	`vec4
(4, 10, 18, 28) ? 0 : 1;

210 
A
 *= 2.0f;

211 
Eº‹
 +
A
 =
glm
::
	`vec4
(8, 20, 36, 56) ? 0 : 1;

214 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

215 
glm
::
vec4
 
	`B
(4.0f, 5.0f, 6.0f, 7.0f);

217 
B
 /
A
;

218 
Eº‹
 +
B
 =
glm
::
	`vec4
(4, 2.5, 2, 7.0f / 4.0f) ? 0 : 1;

220 
B
 /= 2.0f;

221 
Eº‹
 +
B
 =
glm
::
	`vec4
(2, 1.25, 1, 7.0f / 4.0f / 2.0f) ? 0 : 1;

224 
glm
::
vec4
 
	`B
(2.0f);

226 
B
 /B.
y
;

227 
Eº‹
 +
B
 =
glm
::
	`vec4
(1.0f) ? 0 : 1;

231 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

232 
glm
::
vec4
 
B
 = -
A
;

233 
Eº‹
 +
B
 =
glm
::
	`vec4
(-1.0f, -2.0f, -3.0f, -4.0f) ? 0 : 1;

237 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

238 
glm
::
vec4
 
B
 = --
A
;

239 
Eº‹
 +
B
 =
glm
::
	`vec4
(0.0f, 1.0f, 2.0f, 3.0f) ? 0 : 1;

243 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

244 
glm
::
vec4
 
B
 = 
A
--;

245 
Eº‹
 +
B
 =
glm
::
	`vec4
(1.0f, 2.0f, 3.0f, 4.0f) ? 0 : 1;

246 
Eº‹
 +
A
 =
glm
::
	`vec4
(0.0f, 1.0f, 2.0f, 3.0f) ? 0 : 1;

250 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

251 
glm
::
vec4
 
B
 = ++
A
;

252 
Eº‹
 +
B
 =
glm
::
	`vec4
(2.0f, 3.0f, 4.0f, 5.0f) ? 0 : 1;

256 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

257 
glm
::
vec4
 
B
 = 
A
++;

258 
Eº‹
 +
B
 =
glm
::
	`vec4
(1.0f, 2.0f, 3.0f, 4.0f) ? 0 : 1;

259 
Eº‹
 +
A
 =
glm
::
	`vec4
(2.0f, 3.0f, 4.0f, 5.0f) ? 0 : 1;

262  
Eº‹
;

263 
	}
}

265 
	$ã°_vec4_equÆ
()

267 
Eº‹
 = 0;

270 
glm
::
vec4
 c⁄° 
	`A
(1, 2, 3, 4);

271 
glm
::
vec4
 c⁄° 
	`B
(1, 2, 3, 4);

272 
Eº‹
 +
A
 =
B
 ? 0 : 1;

273 
Eº‹
 +
A
 !
B
 ? 1 : 0;

277 
glm
::
ivec4
 c⁄° 
	`A
(1, 2, 3, 4);

278 
glm
::
ivec4
 c⁄° 
	`B
(1, 2, 3, 4);

279 
Eº‹
 +
A
 =
B
 ? 0 : 1;

280 
Eº‹
 +
A
 !
B
 ? 1 : 0;

283  
Eº‹
;

284 
	}
}

286 
	$ã°_vec4_size
()

288 
Eº‹
 = 0;

290 
Eº‹
 +(
glm
::
vec4
Ë=(glm::
lowp_vec4
) ? 0 : 1;

291 
Eº‹
 +(
glm
::
vec4
Ë=(glm::
mediump_vec4
) ? 0 : 1;

292 
Eº‹
 +(
glm
::
vec4
Ë=(glm::
highp_vec4
) ? 0 : 1;

293 
Eº‹
 +16 =(
glm
::
mediump_vec4
) ? 0 : 1;

294 
Eº‹
 +(
glm
::
dvec4
Ë=(glm::
lowp_dvec4
) ? 0 : 1;

295 
Eº‹
 +(
glm
::
dvec4
Ë=(glm::
mediump_dvec4
) ? 0 : 1;

296 
Eº‹
 +(
glm
::
dvec4
Ë=(glm::
highp_dvec4
) ? 0 : 1;

297 
Eº‹
 +32 =(
glm
::
highp_dvec4
) ? 0 : 1;

298 
Eº‹
 +
glm
::
	`vec4
().
	`Àngth
() == 4 ? 0 : 1;

299 
Eº‹
 +
glm
::
	`dvec4
().
	`Àngth
() == 4 ? 0 : 1;

301  
Eº‹
;

302 
	}
}

304 
	$ã°_vec4_swizzÀ_∑πül
()

306 
Eº‹
 = 0;

308 
glm
::
vec4
 
	`A
(1, 2, 3, 4);

310 #i‡
GLM_HAS_UNRESTRICTED_UNIONS
 && 
	`deföed
(
GLM_SWIZZLE_RELAX
)

312 
glm
::
vec4
 
	`B
(
A
.
xy
, A.
zw
);

313 
Eº‹
 +
A
 =
B
 ? 0 : 1;

316 
glm
::
vec4
 
	`B
(
A
.
xy
, 3.0f, 4.0f);

317 
Eº‹
 +
A
 =
B
 ? 0 : 1;

320 
glm
::
vec4
 
	`B
(1.0f, 
A
.
yz
, 4.0f);

321 
Eº‹
 +
A
 =
B
 ? 0 : 1;

324 
glm
::
vec4
 
	`B
(1.0f, 2.0f, 
A
.
zw
);

325 
Eº‹
 +
A
 =
B
 ? 0 : 1;

329 
glm
::
vec4
 
	`B
(
A
.
xyz
, 4.0f);

330 
Eº‹
 +
A
 =
B
 ? 0 : 1;

333 
glm
::
vec4
 
	`B
(1.0f, 
A
.
yzw
);

334 
Eº‹
 +
A
 =
B
 ? 0 : 1;

338  
Eº‹
;

339 
	}
}

341 
	$ã°_›î©‹_ö¸emít
()

343 
	`Eº‹
(0);

345 
glm
::
ivec4
 
	`v0
(1);

346 
glm
::
ivec4
 
	`v1
(
v0
);

347 
glm
::
ivec4
 
	`v2
(
v0
);

348 
glm
::
ivec4
 
v3
 = ++
v1
;

349 
glm
::
ivec4
 
v4
 = 
v2
++;

351 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v0
, 
v4
)) ? 0 : 1;

352 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, 
v2
)) ? 0 : 1;

353 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, 
v3
)) ? 0 : 1;

355 
	`i0
(1);

356 
	`i1
(
i0
);

357 
	`i2
(
i0
);

358 
i3
 = ++
i1
;

359 
i4
 = 
i2
++;

361 
Eº‹
 +
i0
 =
i4
 ? 0 : 1;

362 
Eº‹
 +
i1
 =
i2
 ? 0 : 1;

363 
Eº‹
 +
i1
 =
i3
 ? 0 : 1;

365  
Eº‹
;

366 
	}
}

368 
«me•a˚
 
	ghóp


370 ˛as†
	cA


372 
	gf
;

375 ˛as†
	cB
 : 
public
 
A


377 
g
;

378 
	gglm
::
vec4
 
v
;

381 
	$ã°
()

383 
	`Eº‹
(0);

385 
A
* 
p
 = 
√w
 
B
;

386 
dñëe
 
p
;

388  
Eº‹
;

389 
	}
}

392 
	$ã°_vec4_simd
()

394 
Eº‹
 = 0;

396 
glm
::
vec4
 c⁄° 
	`a
(
°d
::
	`˛ock
(), std::clock(), std::clock(), std::clock());

397 
glm
::
vec4
 c⁄° 
	`b
(
°d
::
	`˛ock
(), std::clock(), std::clock(), std::clock());

399 
glm
::
vec4
 c⁄° 
	`c
(
b
 * 
a
);

400 
glm
::
vec4
 c⁄° 
	`d
(
a
 + 
c
);

402 
Eº‹
 +
glm
::
	`Æl
(glm::
	`gª©îTh™EquÆ
(
d
, glm::
	`vec4
(0))) ? 0 : 1;

404  
Eº‹
;

405 
	}
}

407 
	$maö
()

409 
	`Eº‹
(0);

411 
Eº‹
 +
	`ã°_vec4_˘‹
();

412 
Eº‹
 +
	`ã°_bvec4_˘‹
();

413 
Eº‹
 +
	`ã°_vec4_size
();

414 
Eº‹
 +
	`ã°_vec4_›î©‹s
();

415 
Eº‹
 +
	`ã°_vec4_equÆ
();

416 
Eº‹
 +
	`ã°_vec4_swizzÀ_∑πül
();

417 
Eº‹
 +
	`ã°_vec4_simd
();

418 
Eº‹
 +
	`ã°_›î©‹_ö¸emít
();

419 
Eº‹
 +
hóp
::
	`ã°
();

421  
Eº‹
;

422 
	}
}

	@glm/test/core/core_force_unrestricted_gentype.cpp

1 
	#GLM_FORCE_UNRESTRICTED_GENTYPE


	)

3 
	~<glm/glm.hµ
>

5 
	$maö
()

7 
Eº‹
 = 0;

9  
Eº‹
;

10 
	}
}

	@glm/test/core/core_func_common.cpp

1 
	#GLM_FORCE_EXPLICIT_CTOR


	)

2 
	~<glm/comm⁄.hµ
>

3 
	~<glm/gtc/c⁄°™ts.hµ
>

4 
	~<glm/gtc/ïsû⁄.hµ
>

5 
	~<glm/gtc/vec1.hµ
>

6 
	~<glm/gtc/øndom.hµ
>

7 
	~<ve˘‹
>

8 
	~<c°dio
>

9 
	~<cm©h
>

10 
	~<˘ime
>

12 
«me•a˚
 
	gÊo‹_


14 
ã°
()

16 
Eº‹
(0);

19 
A
(1.1f);

20 
	gB
 = 
glm
::
Êo‹
(
A
);

24 
A
(1.1f);

25 
	gB
 = 
glm
::
Êo‹
(
A
);

29 
	gglm
::
vec1
 
A
(1.1f);

30 
	gglm
::
vec1
 
B
 = 
glm
::
Êo‹
(
A
);

32 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
B
, glm::
vec1
(1.0), 0.0001f)) ? 0 : 1;

36 
	gglm
::
dvec1
 
A
(1.1f);

37 
	gglm
::
dvec1
 
B
 = 
glm
::
Êo‹
(
A
);

39 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
B
, glm::
dvec1
(1.0), 0.0001)) ? 0 : 1;

43 
	gglm
::
vec2
 
A
(1.1f);

44 
	gglm
::
vec2
 
B
 = 
glm
::
Êo‹
(
A
);

46 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
B
, glm::
vec2
(1.0), 0.0001f)) ? 0 : 1;

50 
	gglm
::
dvec2
 
A
(1.1f);

51 
	gglm
::
dvec2
 
B
 = 
glm
::
Êo‹
(
A
);

53 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
B
, glm::
dvec2
(1.0), 0.0001)) ? 0 : 1;

57 
	gglm
::
vec3
 
A
(1.1f);

58 
	gglm
::
vec3
 
B
 = 
glm
::
Êo‹
(
A
);

60 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
B
, glm::
vec3
(1.0), 0.0001f)) ? 0 : 1;

64 
	gglm
::
dvec3
 
A
(1.1f);

65 
	gglm
::
dvec3
 
B
 = 
glm
::
Êo‹
(
A
);

67 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
B
, glm::
dvec3
(1.0), 0.0001)) ? 0 : 1;

71 
	gglm
::
vec4
 
A
(1.1f);

72 
	gglm
::
vec4
 
B
 = 
glm
::
Êo‹
(
A
);

74 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
B
, glm::
vec4
(1.0), 0.0001f)) ? 0 : 1;

78 
	gglm
::
dvec4
 
A
(1.1f);

79 
	gglm
::
dvec4
 
B
 = 
glm
::
Êo‹
(
A
);

81 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
B
, glm::
dvec4
(1.0), 0.0001)) ? 0 : 1;

84  
	gEº‹
;

88 
«me•a˚
 
	gmodf_


90 
ã°
()

92 
Eº‹
(0);

95 
X
(1.5f);

96 
I
(0.0f);

97 
	gA
 = 
glm
::
modf
(
X
, 
I
);

99 
	gEº‹
 +
I
 == 1.0f ? 0 : 1;

100 
	gEº‹
 +
A
 == 0.5f ? 0 : 1;

104 
	gglm
::
vec4
 
X
(1.1f, 1.2f, 1.5f, 1.7f);

105 
	gglm
::
vec4
 
I
(0.0f);

106 
	gglm
::
vec4
 
A
 = 
glm
::
modf
(
X
, 
I
);

108 
	gEº‹
 +
I
 =
glm
::
vec4
(1.0f) ? 0 : 1;

109 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
A
, glm::
vec4
(0.1f, 0.2f, 0.5f, 0.7f), 0.00001f)) ? 0 : 1;

113 
	gglm
::
dvec4
 
X
(1.1, 1.2, 1.5, 1.7);

114 
	gglm
::
dvec4
 
I
(0.0);

115 
	gglm
::
dvec4
 
A
 = 
glm
::
modf
(
X
, 
I
);

117 
	gEº‹
 +
I
 =
glm
::
dvec4
(1.0) ? 0 : 1;

118 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
A
, glm::
dvec4
(0.1, 0.2, 0.5, 0.7), 0.000000001)) ? 0 : 1;

122 
X
(1.5);

123 
I
(0.0);

124 
	gA
 = 
glm
::
modf
(
X
, 
I
);

126 
	gEº‹
 +
I
 == 1.0 ? 0 : 1;

127 
	gEº‹
 +
A
 == 0.5 ? 0 : 1;

130  
	gEº‹
;

134 
«me•a˚
 
	gmod_


136 
ã°
()

138 
Eº‹
(0);

141 
A
(1.5f);

142 
B
(1.0f);

143 
	gC
 = 
glm
::
mod
(
A
, 
B
);

145 
	gEº‹
 +
glm
::
abs
(
C
 - 0.5f) < 0.00001f ? 0 : 1;

149 
A
(-0.2f);

150 
B
(1.0f);

151 
	gC
 = 
glm
::
mod
(
A
, 
B
);

153 
	gEº‹
 +
glm
::
abs
(
C
 - 0.8f) < 0.00001f ? 0 : 1;

157 
A
(3.0);

158 
B
(2.0f);

159 
	gC
 = 
glm
::
mod
(
A
, 
B
);

161 
	gEº‹
 +
glm
::
abs
(
C
 - 1.0f) < 0.00001f ? 0 : 1;

165 
	gglm
::
vec4
 
A
(3.0);

166 
B
(2.0f);

167 
	gglm
::
vec4
 
C
 = 
glm
::
mod
(
A
, 
B
);

169 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
C
, glm::
vec4
(1.0f), 0.00001f)) ? 0 : 1;

173 
	gglm
::
vec4
 
A
(3.0);

174 
	gglm
::
vec4
 
B
(2.0f);

175 
	gglm
::
vec4
 
C
 = 
glm
::
mod
(
A
, 
B
);

177 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
C
, glm::
vec4
(1.0f), 0.00001f)) ? 0 : 1;

180  
	gEº‹
;

184 
«me•a˚
 
	gÊﬂtBôsToI¡


186 
ã°
()

188 
	gEº‹
 = 0;

191 
	gA
 = 1.0f;

192 
	gB
 = 
glm
::
ÊﬂtBôsToI¡
(
A
);

193 
	gC
 = 
glm
::
ötBôsToFlﬂt
(
B
);

194 
	gD
 = *(*)&
A
;

195 
	gEº‹
 +
B
 =
D
 ? 0 : 1;

196 
	gEº‹
 +
A
 =
C
 ? 0 : 1;

200 
	gglm
::
vec2
 
A
(1.0f, 2.0f);

201 
	gglm
::
ivec2
 
B
 = 
glm
::
ÊﬂtBôsToI¡
(
A
);

202 
	gglm
::
vec2
 
C
 = 
glm
::
ötBôsToFlﬂt
(
B
);

203 
	gEº‹
 +
B
.
x
 =*(*)&(
A
.x) ? 0 : 1;

204 
	gEº‹
 +
B
.
y
 =*(*)&(
A
.y) ? 0 : 1;

205 
	gEº‹
 +
A
 =
C
? 0 : 1;

209 
	gglm
::
vec3
 
A
(1.0f, 2.0f, 3.0f);

210 
	gglm
::
ivec3
 
B
 = 
glm
::
ÊﬂtBôsToI¡
(
A
);

211 
	gglm
::
vec3
 
C
 = 
glm
::
ötBôsToFlﬂt
(
B
);

212 
	gEº‹
 +
B
.
x
 =*(*)&(
A
.x) ? 0 : 1;

213 
	gEº‹
 +
B
.
y
 =*(*)&(
A
.y) ? 0 : 1;

214 
	gEº‹
 +
B
.
z
 =*(*)&(
A
.z) ? 0 : 1;

215 
	gEº‹
 +
A
 =
C
? 0 : 1;

219 
	gglm
::
vec4
 
A
(1.0f, 2.0f, 3.0f, 4.0f);

220 
	gglm
::
ivec4
 
B
 = 
glm
::
ÊﬂtBôsToI¡
(
A
);

221 
	gglm
::
vec4
 
C
 = 
glm
::
ötBôsToFlﬂt
(
B
);

222 
	gEº‹
 +
B
.
x
 =*(*)&(
A
.x) ? 0 : 1;

223 
	gEº‹
 +
B
.
y
 =*(*)&(
A
.y) ? 0 : 1;

224 
	gEº‹
 +
B
.
z
 =*(*)&(
A
.z) ? 0 : 1;

225 
	gEº‹
 +
B
.
w
 =*(*)&(
A
.w) ? 0 : 1;

226 
	gEº‹
 +
A
 =
C
? 0 : 1;

229  
	gEº‹
;

233 
«me•a˚
 
	gÊﬂtBôsToUöt


235 
ã°
()

237 
	gEº‹
 = 0;

240 
	gA
 = 1.0f;

241 
	gglm
::
uöt
 
B
 = 
glm
::
ÊﬂtBôsToUöt
(
A
);

242 
	gC
 = 
glm
::
ötBôsToFlﬂt
(
B
);

243 
	gEº‹
 +
B
 =*(
glm
::
uöt
*)&
A
 ? 0 : 1;

244 
	gEº‹
 +
A
 =
C
? 0 : 1;

248 
	gglm
::
vec2
 
A
(1.0f, 2.0f);

249 
	gglm
::
uvec2
 
B
 = 
glm
::
ÊﬂtBôsToUöt
(
A
);

250 
	gglm
::
vec2
 
C
 = 
glm
::
uötBôsToFlﬂt
(
B
);

251 
	gEº‹
 +
B
.
x
 =*(
glm
::
uöt
*)&(
A
.x) ? 0 : 1;

252 
	gEº‹
 +
B
.
y
 =*(
glm
::
uöt
*)&(
A
.y) ? 0 : 1;

253 
	gEº‹
 +
A
 =
C
 ? 0 : 1;

257 
	gglm
::
vec3
 
A
(1.0f, 2.0f, 3.0f);

258 
	gglm
::
uvec3
 
B
 = 
glm
::
ÊﬂtBôsToUöt
(
A
);

259 
	gglm
::
vec3
 
C
 = 
glm
::
uötBôsToFlﬂt
(
B
);

260 
	gEº‹
 +
B
.
x
 =*(
glm
::
uöt
*)&(
A
.x) ? 0 : 1;

261 
	gEº‹
 +
B
.
y
 =*(
glm
::
uöt
*)&(
A
.y) ? 0 : 1;

262 
	gEº‹
 +
B
.
z
 =*(
glm
::
uöt
*)&(
A
.z) ? 0 : 1;

263 
	gEº‹
 +
A
 =
C
? 0 : 1;

267 
	gglm
::
vec4
 
A
(1.0f, 2.0f, 3.0f, 4.0f);

268 
	gglm
::
uvec4
 
B
 = 
glm
::
ÊﬂtBôsToUöt
(
A
);

269 
	gglm
::
vec4
 
C
 = 
glm
::
uötBôsToFlﬂt
(
B
);

270 
	gEº‹
 +
B
.
x
 =*(
glm
::
uöt
*)&(
A
.x) ? 0 : 1;

271 
	gEº‹
 +
B
.
y
 =*(
glm
::
uöt
*)&(
A
.y) ? 0 : 1;

272 
	gEº‹
 +
B
.
z
 =*(
glm
::
uöt
*)&(
A
.z) ? 0 : 1;

273 
	gEº‹
 +
B
.
w
 =*(
glm
::
uöt
*)&(
A
.w) ? 0 : 1;

274 
	gEº‹
 +
A
 =
C
? 0 : 1;

277  
	gEº‹
;

281 
«me•a˚
 
	gmö_


283 
ã°
()

285 
	gEº‹
 = 0;

287 
	gglm
::
vec1
 
A0
 = 
glm
::
mö
(glm::vec1(1), glm::vec1(1));

289 
	gglm
::
vec2
 
B0
 = 
glm
::
mö
(glm::vec2(1), glm::vec2(1));

290 
	gglm
::
vec2
 
B1
 = 
glm
::
mö
(glm::vec2(1), 1.0f);

291 
boﬁ
 
	gB2
 = 
glm
::
Æl
(glm::
equÆ
(
B0
, 
B1
));

292 
	gEº‹
 +
B2
 ? 0 : 1;

294 
	gglm
::
vec3
 
C0
 = 
glm
::
mö
(glm::vec3(1), glm::vec3(1));

295 
	gglm
::
vec3
 
C1
 = 
glm
::
mö
(glm::vec3(1), 1.0f);

296 
boﬁ
 
	gC2
 = 
glm
::
Æl
(glm::
equÆ
(
C0
, 
C1
));

297 
	gEº‹
 +
C2
 ? 0 : 1;

299 
	gglm
::
vec4
 
D0
 = 
glm
::
mö
(glm::vec4(1), glm::vec4(1));

300 
	gglm
::
vec4
 
D1
 = 
glm
::
mö
(glm::vec4(1), 1.0f);

301 
boﬁ
 
	gD2
 = 
glm
::
Æl
(glm::
equÆ
(
D0
, 
D1
));

302 
	gEº‹
 +
D2
 ? 0 : 1;

304  
	gEº‹
;

308 
«me•a˚
 
	gmax_


310 
ã°
()

312 
	gEº‹
 = 0;

314 
	gglm
::
vec1
 
A0
 = 
glm
::
max
(glm::vec1(1), glm::vec1(1));

316 
	gglm
::
vec2
 
B0
 = 
glm
::
max
(glm::vec2(1), glm::vec2(1));

317 
	gglm
::
vec2
 
B1
 = 
glm
::
max
(glm::vec2(1), 1.0f);

318 
boﬁ
 
	gB2
 = 
glm
::
Æl
(glm::
equÆ
(
B0
, 
B1
));

319 
	gEº‹
 +
B2
 ? 0 : 1;

321 
	gglm
::
vec3
 
C0
 = 
glm
::
max
(glm::vec3(1), glm::vec3(1));

322 
	gglm
::
vec3
 
C1
 = 
glm
::
max
(glm::vec3(1), 1.0f);

323 
boﬁ
 
	gC2
 = 
glm
::
Æl
(glm::
equÆ
(
C0
, 
C1
));

324 
	gEº‹
 +
C2
 ? 0 : 1;

326 
	gglm
::
vec4
 
D0
 = 
glm
::
max
(glm::vec4(1), glm::vec4(1));

327 
	gglm
::
vec4
 
D1
 = 
glm
::
max
(glm::vec4(1), 1.0f);

328 
boﬁ
 
	gD2
 = 
glm
::
Æl
(glm::
equÆ
(
D0
, 
D1
));

329 
	gEº‹
 +
D2
 ? 0 : 1;

331  
	gEº‹
;

335 
«me•a˚
 
	g˛amp_


337 
ã°
()

339 
	gEº‹
 = 0;

341  
	gEº‹
;

345 
«me•a˚
 
	gmix_


347 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gB
>

348 
	síåy


350 
T
 
	gx
;

351 
T
 
	gy
;

352 
B
 
	ga
;

353 
T
 
	gResu…
;

356 
	gíåy
<, 
	gboﬁ
> 
	gTe°Boﬁ
[] =

358 {0.0f, 1.0f, 
Ál£
, 0.0f},

359 {0.0f, 1.0f, 
åue
, 1.0f},

360 {-1.0f, 1.0f, 
Ál£
, -1.0f},

361 {-1.0f, 1.0f, 
åue
, 1.0f}

364 
	gíåy
<, > 
	gTe°Flﬂt
[] =

372 
	gíåy
<
	gglm
::
vec2
, 
	gboﬁ
> 
	gTe°Vec2Boﬁ
[] =

374 {
glm
::
vec2
(0.0f), glm::vec2(1.0f), 
Ál£
, glm::vec2(0.0f)},

375 {
glm
::
vec2
(0.0f), glm::vec2(1.0f), 
åue
, glm::vec2(1.0f)},

376 {
glm
::
vec2
(-1.0f), glm::vec2(1.0f), 
Ál£
, glm::vec2(-1.0f)},

377 {
glm
::
vec2
(-1.0f), glm::vec2(1.0f), 
åue
, glm::vec2(1.0f)}

380 
	gíåy
<
	gglm
::
vec2
, glm::
bvec2
> 
Te°BVec2
[] =

382 {
glm
::
vec2
(0.0f), glm::vec2(1.0f), glm::
bvec2
(
Ál£
), glm::vec2(0.0f)},

383 {
glm
::
vec2
(0.0f), glm::vec2(1.0f), glm::
bvec2
(
åue
), glm::vec2(1.0f)},

384 {
glm
::
vec2
(-1.0f), glm::vec2(1.0f), glm::
bvec2
(
Ál£
), glm::vec2(-1.0f)},

385 {
glm
::
vec2
(-1.0f), glm::vec2(1.0f), glm::
bvec2
(
åue
), glm::vec2(1.0f)},

386 {
glm
::
vec2
(-1.0f), glm::vec2(1.0f), glm::
bvec2
(
åue
, 
Ál£
), glm::vec2(1.0f, -1.0f)}

389 
	gíåy
<
	gglm
::
vec3
, 
	gboﬁ
> 
	gTe°Vec3Boﬁ
[] =

391 {
glm
::
vec3
(0.0f), glm::vec3(1.0f), 
Ál£
, glm::vec3(0.0f)},

392 {
glm
::
vec3
(0.0f), glm::vec3(1.0f), 
åue
, glm::vec3(1.0f)},

393 {
glm
::
vec3
(-1.0f), glm::vec3(1.0f), 
Ál£
, glm::vec3(-1.0f)},

394 {
glm
::
vec3
(-1.0f), glm::vec3(1.0f), 
åue
, glm::vec3(1.0f)}

397 
	gíåy
<
	gglm
::
vec3
, glm::
bvec3
> 
Te°BVec3
[] =

399 {
glm
::
vec3
(0.0f), glm::vec3(1.0f), glm::
bvec3
(
Ál£
), glm::vec3(0.0f)},

400 {
glm
::
vec3
(0.0f), glm::vec3(1.0f), glm::
bvec3
(
åue
), glm::vec3(1.0f)},

401 {
glm
::
vec3
(-1.0f), glm::vec3(1.0f), glm::
bvec3
(
Ál£
), glm::vec3(-1.0f)},

402 {
glm
::
vec3
(-1.0f), glm::vec3(1.0f), glm::
bvec3
(
åue
), glm::vec3(1.0f)},

403 {
glm
::
vec3
(1.0f, 2.0f, 3.0f), glm::vec3(4.0f, 5.0f, 6.0f), glm::
bvec3
(
åue
, 
Ál£
,Årue), glm::vec3(4.0f, 2.0f, 6.0f)}

406 
	gíåy
<
	gglm
::
vec4
, 
	gboﬁ
> 
	gTe°Vec4Boﬁ
[] =

408 {
glm
::
vec4
(0.0f), glm::vec4(1.0f), 
Ál£
, glm::vec4(0.0f)},

409 {
glm
::
vec4
(0.0f), glm::vec4(1.0f), 
åue
, glm::vec4(1.0f)},

410 {
glm
::
vec4
(-1.0f), glm::vec4(1.0f), 
Ál£
, glm::vec4(-1.0f)},

411 {
glm
::
vec4
(-1.0f), glm::vec4(1.0f), 
åue
, glm::vec4(1.0f)}

414 
	gíåy
<
	gglm
::
vec4
, glm::
bvec4
> 
Te°BVec4
[] =

416 {
glm
::
vec4
(0.0f, 0.0f, 1.0f, 1.0f), glm::vec4(2.0f, 2.0f, 3.0f, 3.0f), glm::
bvec4
(
Ál£
, 
åue
, false,Årue), glm::vec4(0.0f, 2.0f, 1.0f, 3.0f)},

417 {
glm
::
vec4
(0.0f), glm::vec4(1.0f), glm::
bvec4
(
åue
), glm::vec4(1.0f)},

418 {
glm
::
vec4
(-1.0f), glm::vec4(1.0f), glm::
bvec4
(
Ál£
), glm::vec4(-1.0f)},

419 {
glm
::
vec4
(-1.0f), glm::vec4(1.0f), glm::
bvec4
(
åue
), glm::vec4(1.0f)},

420 {
glm
::
vec4
(1.0f, 2.0f, 3.0f, 4.0f), glm::vec4(5.0f, 6.0f, 7.0f, 8.0f), glm::
bvec4
(
åue
, 
Ál£
,Årue, false), glm::vec4(5.0f, 2.0f, 7.0f, 4.0f)}

423 
ã°
()

425 
	gEº‹
 = 0;

429 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gTe°Boﬁ
Ë/ (
	gíåy
<, 
	gboﬁ
>); ++i)

431 
	gResu…
 = 
glm
::
mix
(
Te°Boﬁ
[
i
].
x
, Te°Boﬁ[i].
y
, Te°Boﬁ[i].
a
);

432 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
, 
Te°Boﬁ
[
i
].Resu…, glm::
ïsû⁄
<>()) ? 0 : 1;

438 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gTe°Flﬂt
Ë/ (
	gíåy
<, >); ++i)

440 
	gResu…
 = 
glm
::
mix
(
Te°Flﬂt
[
i
].
x
, Te°Flﬂt[i].
y
, Te°Flﬂt[i].
a
);

441 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
, 
Te°Flﬂt
[
i
].Resu…, glm::
ïsû⁄
<>()) ? 0 : 1;

447 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gTe°Vec2Boﬁ
Ë/ (
	gíåy
<
	gglm
::
vec2
, 
	gboﬁ
>); ++i)

449 
	gglm
::
vec2
 
Resu…
 = 
glm
::
mix
(
Te°Vec2Boﬁ
[
i
].
x
, Te°Vec2Boﬁ[i].
y
, Te°Vec2Boﬁ[i].
a
);

450 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
x
, 
Te°Vec2Boﬁ
[
i
].Resu….x, glm::
ïsû⁄
<>()) ? 0 : 1;

451 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
y
, 
Te°Vec2Boﬁ
[
i
].Resu….y, glm::
ïsû⁄
<>()) ? 0 : 1;

457 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gTe°BVec2
Ë/ (
	gíåy
<
	gglm
::
vec2
, glm::
bvec2
>); ++i)

459 
	gglm
::
vec2
 
Resu…
 = 
glm
::
mix
(
Te°BVec2
[
i
].
x
, Te°BVec2[i].
y
, Te°BVec2[i].
a
);

460 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
x
, 
Te°BVec2
[
i
].Resu….x, glm::
ïsû⁄
<>()) ? 0 : 1;

461 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
y
, 
Te°BVec2
[
i
].Resu….y, glm::
ïsû⁄
<>()) ? 0 : 1;

467 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gTe°Vec3Boﬁ
Ë/ (
	gíåy
<
	gglm
::
vec3
, 
	gboﬁ
>); ++i)

469 
	gglm
::
vec3
 
Resu…
 = 
glm
::
mix
(
Te°Vec3Boﬁ
[
i
].
x
, Te°Vec3Boﬁ[i].
y
, Te°Vec3Boﬁ[i].
a
);

470 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
x
, 
Te°Vec3Boﬁ
[
i
].Resu….x, glm::
ïsû⁄
<>()) ? 0 : 1;

471 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
y
, 
Te°Vec3Boﬁ
[
i
].Resu….y, glm::
ïsû⁄
<>()) ? 0 : 1;

472 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
z
, 
Te°Vec3Boﬁ
[
i
].Resu….z, glm::
ïsû⁄
<>()) ? 0 : 1;

478 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gTe°BVec3
Ë/ (
	gíåy
<
	gglm
::
vec3
, glm::
bvec3
>); ++i)

480 
	gglm
::
vec3
 
Resu…
 = 
glm
::
mix
(
Te°BVec3
[
i
].
x
, Te°BVec3[i].
y
, Te°BVec3[i].
a
);

481 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
x
, 
Te°BVec3
[
i
].Resu….x, glm::
ïsû⁄
<>()) ? 0 : 1;

482 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
y
, 
Te°BVec3
[
i
].Resu….y, glm::
ïsû⁄
<>()) ? 0 : 1;

483 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
z
, 
Te°BVec3
[
i
].Resu….z, glm::
ïsû⁄
<>()) ? 0 : 1;

489 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gTe°Vec4Boﬁ
Ë/ (
	gíåy
<
	gglm
::
vec4
, 
	gboﬁ
>); ++i)

491 
	gglm
::
vec4
 
Resu…
 = 
glm
::
mix
(
Te°Vec4Boﬁ
[
i
].
x
, Te°Vec4Boﬁ[i].
y
, Te°Vec4Boﬁ[i].
a
);

492 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
x
, 
Te°Vec4Boﬁ
[
i
].Resu….x, glm::
ïsû⁄
<>()) ? 0 : 1;

493 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
y
, 
Te°Vec4Boﬁ
[
i
].Resu….y, glm::
ïsû⁄
<>()) ? 0 : 1;

494 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
z
, 
Te°Vec4Boﬁ
[
i
].Resu….z, glm::
ïsû⁄
<>()) ? 0 : 1;

495 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
w
, 
Te°Vec4Boﬁ
[
i
].Resu….w, glm::
ïsû⁄
<>()) ? 0 : 1;

501 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gTe°BVec4
Ë/ (
	gíåy
<
	gglm
::
vec4
, glm::
bvec4
>); ++i)

503 
	gglm
::
vec4
 
Resu…
 = 
glm
::
mix
(
Te°BVec4
[
i
].
x
, Te°BVec4[i].
y
, Te°BVec4[i].
a
);

504 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
x
, 
Te°BVec4
[
i
].Resu….x, glm::
ïsû⁄
<>()) ? 0 : 1;

505 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
y
, 
Te°BVec4
[
i
].Resu….y, glm::
ïsû⁄
<>()) ? 0 : 1;

506 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
z
, 
Te°BVec4
[
i
].Resu….z, glm::
ïsû⁄
<>()) ? 0 : 1;

507 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
Resu…
.
w
, 
Te°BVec4
[
i
].Resu….w, glm::
ïsû⁄
<>()) ? 0 : 1;

511  
	gEº‹
;

515 
«me•a˚
 
	g°ï_


517 
	gãm∂©e
 <
ty≥«me
 
	gEDGE
,Åy≥«mê
	gVEC
>

518 
	síåy


520 
EDGE
 
	gedge
;

521 
VEC
 
	gx
;

522 
VEC
 
	gªsu…
;

525 
	gíåy
<, 
	gglm
::
vec4
> 
Te°Vec4Sˇœr
 [] =

527 { 1.0f, 
glm
::
vec4
(1.0f, 2.0f, 3.0f, 4.0f), glm::vec4(1.0f) },

528 { 0.0f, 
glm
::
vec4
(1.0f, 2.0f, 3.0f, 4.0f), glm::vec4(1.0f) },

529 { 0.0f, 
glm
::
vec4
(-1.0f, -2.0f, -3.0f, -4.0f), glm::vec4(0.0f) }

532 
	gíåy
<
	gglm
::
vec4
, glm::vec4> 
Te°Vec4Ve˘‹
 [] =

534 { 
glm
::
vec4
(-1.0f, -2.0f, -3.0f, -4.0f), glm::vec4(-2.0f, -3.0f, -4.0f, -5.0f), glm::vec4(0.0f) },

535 { 
glm
::
vec4
( 0.0f, 1.0f, 2.0f, 3.0f), glm::vec4( 1.0f, 2.0f, 3.0f, 4.0f), glm::vec4(1.0f) },

536 { 
glm
::
vec4
( 2.0f, 3.0f, 4.0f, 5.0f), glm::vec4( 1.0f, 2.0f, 3.0f, 4.0f), glm::vec4(0.0f) },

537 { 
glm
::
vec4
( 0.0f, 1.0f, 2.0f, 3.0f), glm::vec4(-1.0f,-2.0f,-3.0f,-4.0f), glm::vec4(0.0f) }

540 
ã°
()

542 
	gEº‹
 = 0;

546 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gTe°Vec4Sˇœr
Ë/ (
	gíåy
<, 
	gglm
::
vec4
>); ++i)

548 
	gglm
::
vec4
 
Resu…
 = 
glm
::
°ï
(
Te°Vec4Sˇœr
[
i
].
edge
, Te°Vec4Sˇœr[i].
x
);

549 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Resu…
, 
Te°Vec4Sˇœr
[
i
].
ªsu…
, glm::
ïsû⁄
<>())) ? 0 : 1;

555 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gTe°Vec4Ve˘‹
Ë/ (
	gíåy
<
	gglm
::
vec4
, glm::vec4>); ++i)

557 
	gglm
::
vec4
 
Resu…
 = 
glm
::
°ï
(
Te°Vec4Ve˘‹
[
i
].
edge
, Te°Vec4Ve˘‹[i].
x
);

558 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Resu…
, 
Te°Vec4Ve˘‹
[
i
].
ªsu…
, glm::
ïsû⁄
<>())) ? 0 : 1;

562  
	gEº‹
;

566 
«me•a˚
 
	ground_


568 
ã°
()

570 
	gEº‹
 = 0;

573 
	gA
 = 
glm
::
round
(0.0f);

574 
	gEº‹
 +
A
 == 0.0f ? 0 : 1;

575 
	gB
 = 
glm
::
round
(0.5f);

576 
	gEº‹
 +
B
 == 1.0f ? 0 : 1;

577 
	gC
 = 
glm
::
round
(1.0f);

578 
	gEº‹
 +
C
 == 1.0f ? 0 : 1;

579 
	gD
 = 
glm
::
round
(0.1f);

580 
	gEº‹
 +
D
 == 0.0f ? 0 : 1;

581 
	gE
 = 
glm
::
round
(0.9f);

582 
	gEº‹
 +
E
 == 1.0f ? 0 : 1;

583 
	gF
 = 
glm
::
round
(1.5f);

584 
	gEº‹
 +
F
 == 2.0f ? 0 : 1;

585 
	gG
 = 
glm
::
round
(1.9f);

586 
	gEº‹
 +
G
 == 2.0f ? 0 : 1;

590 
	gA
 = 
glm
::
round
(-0.0f);

591 
	gEº‹
 +
A
 == 0.0f ? 0 : 1;

592 
	gB
 = 
glm
::
round
(-0.5f);

593 
	gEº‹
 +
B
 == -1.0f ? 0 : 1;

594 
	gC
 = 
glm
::
round
(-1.0f);

595 
	gEº‹
 +
C
 == -1.0f ? 0 : 1;

596 
	gD
 = 
glm
::
round
(-0.1f);

597 
	gEº‹
 +
D
 == 0.0f ? 0 : 1;

598 
	gE
 = 
glm
::
round
(-0.9f);

599 
	gEº‹
 +
E
 == -1.0f ? 0 : 1;

600 
	gF
 = 
glm
::
round
(-1.5f);

601 
	gEº‹
 +
F
 == -2.0f ? 0 : 1;

602 
	gG
 = 
glm
::
round
(-1.9f);

603 
	gEº‹
 +
G
 == -2.0f ? 0 : 1;

606  
	gEº‹
;

610 
«me•a˚
 
	groundEví


612 
ã°
()

614 
	gEº‹
 = 0;

617 
	gA1
 = 
glm
::
roundEví
(-1.5f);

618 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A1
, -2.0f, 0.0001f) ? 0 : 1;

620 
	gA2
 = 
glm
::
roundEví
(1.5f);

621 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A2
, 2.0f, 0.0001f) ? 0 : 1;

623 
	gA5
 = 
glm
::
roundEví
(-2.5f);

624 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A5
, -2.0f, 0.0001f) ? 0 : 1;

626 
	gA6
 = 
glm
::
roundEví
(2.5f);

627 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A6
, 2.0f, 0.0001f) ? 0 : 1;

629 
	gA3
 = 
glm
::
roundEví
(-3.5f);

630 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A3
, -4.0f, 0.0001f) ? 0 : 1;

632 
	gA4
 = 
glm
::
roundEví
(3.5f);

633 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A4
, 4.0f, 0.0001f) ? 0 : 1;

635 
	gC7
 = 
glm
::
roundEví
(-4.5f);

636 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
C7
, -4.0f, 0.0001f) ? 0 : 1;

638 
	gC8
 = 
glm
::
roundEví
(4.5f);

639 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
C8
, 4.0f, 0.0001f) ? 0 : 1;

641 
	gC1
 = 
glm
::
roundEví
(-5.5f);

642 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
C1
, -6.0f, 0.0001f) ? 0 : 1;

644 
	gC2
 = 
glm
::
roundEví
(5.5f);

645 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
C2
, 6.0f, 0.0001f) ? 0 : 1;

647 
	gC3
 = 
glm
::
roundEví
(-6.5f);

648 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
C3
, -6.0f, 0.0001f) ? 0 : 1;

650 
	gC4
 = 
glm
::
roundEví
(6.5f);

651 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
C4
, 6.0f, 0.0001f) ? 0 : 1;

653 
	gC5
 = 
glm
::
roundEví
(-7.5f);

654 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
C5
, -8.0f, 0.0001f) ? 0 : 1;

656 
	gC6
 = 
glm
::
roundEví
(7.5f);

657 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
C6
, 8.0f, 0.0001f) ? 0 : 1;

659 
	gEº‹
 += 0;

663 
	gA7
 = 
glm
::
roundEví
(-2.4f);

664 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A7
, -2.0f, 0.0001f) ? 0 : 1;

666 
	gA8
 = 
glm
::
roundEví
(2.4f);

667 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A8
, 2.0f, 0.0001f) ? 0 : 1;

669 
	gB1
 = 
glm
::
roundEví
(-2.6f);

670 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
B1
, -3.0f, 0.0001f) ? 0 : 1;

672 
	gB2
 = 
glm
::
roundEví
(2.6f);

673 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
B2
, 3.0f, 0.0001f) ? 0 : 1;

675 
	gB3
 = 
glm
::
roundEví
(-2.0f);

676 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
B3
, -2.0f, 0.0001f) ? 0 : 1;

678 
	gB4
 = 
glm
::
roundEví
(2.0f);

679 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
B4
, 2.0f, 0.0001f) ? 0 : 1;

681 
	gEº‹
 += 0;

685 
	gA
 = 
glm
::
roundEví
(0.0f);

686 
	gEº‹
 +
A
 == 0.0f ? 0 : 1;

687 
	gB
 = 
glm
::
roundEví
(0.5f);

688 
	gEº‹
 +
B
 == 0.0f ? 0 : 1;

689 
	gC
 = 
glm
::
roundEví
(1.0f);

690 
	gEº‹
 +
C
 == 1.0f ? 0 : 1;

691 
	gD
 = 
glm
::
roundEví
(0.1f);

692 
	gEº‹
 +
D
 == 0.0f ? 0 : 1;

693 
	gE
 = 
glm
::
roundEví
(0.9f);

694 
	gEº‹
 +
E
 == 1.0f ? 0 : 1;

695 
	gF
 = 
glm
::
roundEví
(1.5f);

696 
	gEº‹
 +
F
 == 2.0f ? 0 : 1;

697 
	gG
 = 
glm
::
roundEví
(1.9f);

698 
	gEº‹
 +
G
 == 2.0f ? 0 : 1;

702 
	gA
 = 
glm
::
roundEví
(-0.0f);

703 
	gEº‹
 +
A
 == 0.0f ? 0 : 1;

704 
	gB
 = 
glm
::
roundEví
(-0.5f);

705 
	gEº‹
 +
B
 == -0.0f ? 0 : 1;

706 
	gC
 = 
glm
::
roundEví
(-1.0f);

707 
	gEº‹
 +
C
 == -1.0f ? 0 : 1;

708 
	gD
 = 
glm
::
roundEví
(-0.1f);

709 
	gEº‹
 +
D
 == 0.0f ? 0 : 1;

710 
	gE
 = 
glm
::
roundEví
(-0.9f);

711 
	gEº‹
 +
E
 == -1.0f ? 0 : 1;

712 
	gF
 = 
glm
::
roundEví
(-1.5f);

713 
	gEº‹
 +
F
 == -2.0f ? 0 : 1;

714 
	gG
 = 
glm
::
roundEví
(-1.9f);

715 
	gEº‹
 +
G
 == -2.0f ? 0 : 1;

719 
	gA
 = 
glm
::
roundEví
(1.5f);

720 
	gEº‹
 +
A
 == 2.0f ? 0 : 1;

721 
	gB
 = 
glm
::
roundEví
(2.5f);

722 
	gEº‹
 +
B
 == 2.0f ? 0 : 1;

723 
	gC
 = 
glm
::
roundEví
(3.5f);

724 
	gEº‹
 +
C
 == 4.0f ? 0 : 1;

725 
	gD
 = 
glm
::
roundEví
(4.5f);

726 
	gEº‹
 +
D
 == 4.0f ? 0 : 1;

727 
	gE
 = 
glm
::
roundEví
(5.5f);

728 
	gEº‹
 +
E
 == 6.0f ? 0 : 1;

729 
	gF
 = 
glm
::
roundEví
(6.5f);

730 
	gEº‹
 +
F
 == 6.0f ? 0 : 1;

731 
	gG
 = 
glm
::
roundEví
(7.5f);

732 
	gEº‹
 +
G
 == 8.0f ? 0 : 1;

736 
	gA
 = 
glm
::
roundEví
(-1.5f);

737 
	gEº‹
 +
A
 == -2.0f ? 0 : 1;

738 
	gB
 = 
glm
::
roundEví
(-2.5f);

739 
	gEº‹
 +
B
 == -2.0f ? 0 : 1;

740 
	gC
 = 
glm
::
roundEví
(-3.5f);

741 
	gEº‹
 +
C
 == -4.0f ? 0 : 1;

742 
	gD
 = 
glm
::
roundEví
(-4.5f);

743 
	gEº‹
 +
D
 == -4.0f ? 0 : 1;

744 
	gE
 = 
glm
::
roundEví
(-5.5f);

745 
	gEº‹
 +
E
 == -6.0f ? 0 : 1;

746 
	gF
 = 
glm
::
roundEví
(-6.5f);

747 
	gEº‹
 +
F
 == -6.0f ? 0 : 1;

748 
	gG
 = 
glm
::
roundEví
(-7.5f);

749 
	gEº‹
 +
G
 == -8.0f ? 0 : 1;

752  
	gEº‹
;

756 
«me•a˚
 
	gi¢™_


758 
ã°
()

760 
	gEº‹
 = 0;

762 
	gZîo_f
 = 0.0;

763 
	gZîo_d
 = 0.0;

766 
	gEº‹
 +
åue
 =
glm
::
i¢™
(0.0/
Zîo_d
) ? 0 : 1;

767 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
i¢™
(glm::
dvec2
(0.0 / 
Zîo_d
))) ? 0 : 1;

768 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
i¢™
(glm::
dvec3
(0.0 / 
Zîo_d
))) ? 0 : 1;

769 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
i¢™
(glm::
dvec4
(0.0 / 
Zîo_d
))) ? 0 : 1;

773 
	gEº‹
 +
åue
 =
glm
::
i¢™
(0.0f/
Zîo_f
) ? 0 : 1;

774 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
i¢™
(glm::
vec2
(0.0f/
Zîo_f
))) ? 0 : 1;

775 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
i¢™
(glm::
vec3
(0.0f/
Zîo_f
))) ? 0 : 1;

776 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
i¢™
(glm::
vec4
(0.0f/
Zîo_f
))) ? 0 : 1;

779  
	gEº‹
;

783 
«me•a˚
 
	gisöf_


785 
ã°
()

787 
	gEº‹
 = 0;

789 
	gZîo_f
 = 0.0;

790 
	gZîo_d
 = 0.0;

793 
	gEº‹
 +
åue
 =
glm
::
isöf
–1.0/
Zîo_d
) ? 0 : 1;

794 
	gEº‹
 +
åue
 =
glm
::
isöf
(-1.0/
Zîo_d
) ? 0 : 1;

795 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
isöf
(glm::
dvec2
–1.0/
Zîo_d
))) ? 0 : 1;

796 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
isöf
(glm::
dvec2
(-1.0/
Zîo_d
))) ? 0 : 1;

797 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
isöf
(glm::
dvec3
–1.0/
Zîo_d
))) ? 0 : 1;

798 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
isöf
(glm::
dvec3
(-1.0/
Zîo_d
))) ? 0 : 1;

799 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
isöf
(glm::
dvec4
–1.0/
Zîo_d
))) ? 0 : 1;

800 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
isöf
(glm::
dvec4
(-1.0/
Zîo_d
))) ? 0 : 1;

804 
	gEº‹
 +
åue
 =
glm
::
isöf
–1.0f/
Zîo_f
) ? 0 : 1;

805 
	gEº‹
 +
åue
 =
glm
::
isöf
(-1.0f/
Zîo_f
) ? 0 : 1;

806 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
isöf
(glm::
vec2
–1.0f/
Zîo_f
))) ? 0 : 1;

807 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
isöf
(glm::
vec2
(-1.0f/
Zîo_f
))) ? 0 : 1;

808 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
isöf
(glm::
vec3
–1.0f/
Zîo_f
))) ? 0 : 1;

809 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
isöf
(glm::
vec3
(-1.0f/
Zîo_f
))) ? 0 : 1;

810 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
isöf
(glm::
vec4
–1.0f/
Zîo_f
))) ? 0 : 1;

811 
	gEº‹
 +
åue
 =
glm
::
™y
(glm::
isöf
(glm::
vec4
(-1.0f/
Zîo_f
))) ? 0 : 1;

814  
	gEº‹
;

818 
«me•a˚
 
	gsign


820 
	gãm∂©e
 <
ty≥«me
 
	ggíFITy≥
>

821 
GLM_FUNC_QUALIFIER
 
gíFITy≥
 
sign_if
(gíFITy≥ 
x
)

823 
GLM_STATIC_ASSERT
(

824 
°d
::
numîic_limôs
<
gíFITy≥
>::
is_õc559
 ||

825 (
°d
::
numîic_limôs
<
gíFITy≥
>::
is_sig√d
 && std::numîic_limôs<gíFITy≥>::
is_öãgî
), "'sign' onlyáccept signed inputs");

827 
gíFITy≥
 
	gªsu…
;

828 if(
	gx
 > 
gíFITy≥
(0))

829 
	gªsu…
 = 
gíFITy≥
(1);

830 if(
	gx
 < 
gíFITy≥
(0))

831 
	gªsu…
 = 
gíFITy≥
(-1);

833 
	gªsu…
 = 
gíFITy≥
(0);

834  
	gªsu…
;

837 
	gãm∂©e
 <
ty≥«me
 
	ggíFITy≥
>

838 
GLM_FUNC_QUALIFIER
 
gíFITy≥
 
sign_Æu1
(gíFITy≥ 
x
)

840 
GLM_STATIC_ASSERT
(

841 
°d
::
numîic_limôs
<
gíFITy≥
>::
is_sig√d
 && std::numîic_limôs<gíFITy≥>::
is_öãgî
,

844  (
	gx
 >> 31) | (()-x >> 31);

847 
	gãm∂©e
 <
ty≥«me
 
	ggíFITy≥
>

848 
GLM_FUNC_QUALIFIER
 
gíFITy≥
 
sign_Æu2
(gíFITy≥ 
x
)

850 
GLM_STATIC_ASSERT
(

851 
°d
::
numîic_limôs
<
gíFITy≥
>::
is_sig√d
 && std::numîic_limôs<gíFITy≥>::
is_öãgî
,

854  -(()
	gx
 >> 31) | (-()x >> 31);

857 
	gãm∂©e
 <
ty≥«me
 
	ggíFITy≥
>

858 
GLM_FUNC_QUALIFIER
 
gíFITy≥
 
sign_sub
(gíFITy≥ 
x
)

860 
GLM_STATIC_ASSERT
(

861 
°d
::
numîic_limôs
<
gíFITy≥
>::
is_sig√d
 && std::numîic_limôs<gíFITy≥>::
is_öãgî
,

864  (()-
	gx
 >> 31) - (()x >> 31);

867 
	gãm∂©e
 <
ty≥«me
 
	ggíFITy≥
>

868 
GLM_FUNC_QUALIFIER
 
gíFITy≥
 
sign_cmp
(gíFITy≥ 
x
)

870 
GLM_STATIC_ASSERT
(

871 
°d
::
numîic_limôs
<
gíFITy≥
>::
is_sig√d
 && std::numîic_limôs<gíFITy≥>::
is_öãgî
,

874  (
	gx
 > 0) - (x < 0);

877 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

878 
	sty≥


880 
gíTy≥
 
	gVÆue
;

881 
gíTy≥
 
	gRëu∫
;

884 
ã°_öt32
()

886 
	gty≥
<
	gglm
::
öt32
> c⁄° 
D©a
[] =

888 { 
°d
::
numîic_limôs
<
glm
::
öt32
>::
max
(), 1},

889 { 
°d
::
numîic_limôs
<
glm
::
öt32
>::
mö
(), -1},

899 
	gEº‹
 = 0;

901 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<
	gglm
::
öt32
>); ++i)

903 
	gglm
::
öt32
 
Resu…
 = 
glm
::
sign
(
D©a
[
i
].
VÆue
);

904 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

907 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<
	gglm
::
öt32
>); ++i)

909 
	gglm
::
öt32
 
Resu…
 = 
sign_cmp
(
D©a
[
i
].
VÆue
);

910 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

913 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<
	gglm
::
öt32
>); ++i)

915 
	gglm
::
öt32
 
Resu…
 = 
sign_if
(
D©a
[
i
].
VÆue
);

916 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

919 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<
	gglm
::
öt32
>); ++i)

921 
	gglm
::
öt32
 
Resu…
 = 
sign_Æu1
(
D©a
[
i
].
VÆue
);

922 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

925 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<
	gglm
::
öt32
>); ++i)

927 
	gglm
::
öt32
 
Resu…
 = 
sign_Æu2
(
D©a
[
i
].
VÆue
);

928 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

931  
	gEº‹
;

934 
ã°_i32vec4
()

936 
	gty≥
<
	gglm
::
i32vec4
> c⁄° 
D©a
[] =

938 {
glm
::
i32vec4
( 1), glm::i32vec4( 1)},

939 {
glm
::
i32vec4
( 0), glm::i32vec4( 0)},

940 {
glm
::
i32vec4
( 2), glm::i32vec4( 1)},

941 {
glm
::
i32vec4
( 3), glm::i32vec4( 1)},

942 {
glm
::
i32vec4
(-1), glm::i32vec4(-1)},

943 {
glm
::
i32vec4
(-2), glm::i32vec4(-1)},

944 {
glm
::
i32vec4
(-3), glm::i32vec4(-1)}

947 
	gEº‹
 = 0;

949 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<
	gglm
::
i32vec4
>); ++i)

951 
	gglm
::
i32vec4
 
Resu…
 = 
glm
::
sign
(
D©a
[
i
].
VÆue
);

952 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
D©a
[
i
].
Rëu∫
, 
Resu…
)) ? 0 : 1;

955  
	gEº‹
;

958 
ã°_f32vec4
()

960 
	gty≥
<
	gglm
::
vec4
> c⁄° 
D©a
[] =

962 {
glm
::
vec4
( 1), glm::vec4( 1)},

963 {
glm
::
vec4
( 0), glm::vec4( 0)},

964 {
glm
::
vec4
( 2), glm::vec4( 1)},

965 {
glm
::
vec4
( 3), glm::vec4( 1)},

966 {
glm
::
vec4
(-1), glm::vec4(-1)},

967 {
glm
::
vec4
(-2), glm::vec4(-1)},

968 {
glm
::
vec4
(-3), glm::vec4(-1)}

971 
	gEº‹
 = 0;

973 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<
	gglm
::
vec4
>); ++i)

975 
	gglm
::
vec4
 
Resu…
 = 
glm
::
sign
(
D©a
[
i
].
VÆue
);

976 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
D©a
[
i
].
Rëu∫
, 
Resu…
)) ? 0 : 1;

979  
	gEº‹
;

982 
ã°
()

984 
	gEº‹
 = 0;

986 
	gEº‹
 +
ã°_öt32
();

987 
	gEº‹
 +
ã°_i32vec4
();

988 
	gEº‹
 +
ã°_f32vec4
();

990  
	gEº‹
;

993 
≥rf_ønd
(
°d
::
size_t
 
Sam∂es
)

995 
Eº‹
 = 0;

997 
	g°d
::
size_t
 c⁄° 
Cou¡
 = 
Sam∂es
;

998 
	g°d
::
ve˘‹
<
glm
::
öt32
> 
I≈ut
, 
	gOuçut
;

999 
	gI≈ut
.
ªsize
(
Cou¡
);

1000 
	gOuçut
.
ªsize
(
Cou¡
);

1001 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1002 
	gI≈ut
[
i
] = 
°©ic_ˇ°
<
glm
::
öt32
>(glm::
löórR™d
(-65536.f, 65536.f));

1004 
	g°d
::
˛ock_t
 
Time°amp0
 = 
°d
::
˛ock
();

1006 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1007 
	gOuçut
[
i
] = 
sign_cmp
(
I≈ut
[i]);

1009 
	g°d
::
˛ock_t
 
Time°amp1
 = 
°d
::
˛ock
();

1011 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1012 
	gOuçut
[
i
] = 
sign_if
(
I≈ut
[i]);

1014 
	g°d
::
˛ock_t
 
Time°amp2
 = 
°d
::
˛ock
();

1016 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1017 
	gOuçut
[
i
] = 
sign_Æu1
(
I≈ut
[i]);

1019 
	g°d
::
˛ock_t
 
Time°amp3
 = 
°d
::
˛ock
();

1021 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1022 
	gOuçut
[
i
] = 
sign_Æu2
(
I≈ut
[i]);

1024 
	g°d
::
˛ock_t
 
Time°amp4
 = 
°d
::
˛ock
();

1026 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1027 
	gOuçut
[
i
] = 
sign_sub
(
I≈ut
[i]);

1029 
	g°d
::
˛ock_t
 
Time°amp5
 = 
°d
::
˛ock
();

1031 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1032 
	gOuçut
[
i
] = 
glm
::
sign
(
I≈ut
[i]);

1034 
	g°d
::
˛ock_t
 
Time°amp6
 = 
°d
::
˛ock
();

1036 
	g°d
::
¥ötf
("sign_cmp‘™dËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp1
 - 
Time°amp0
));

1037 
	g°d
::
¥ötf
("sign_if‘™dËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp2
 - 
Time°amp1
));

1038 
	g°d
::
¥ötf
("sign_Æu1‘™dËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp3
 - 
Time°amp2
));

1039 
	g°d
::
¥ötf
("sign_Æu2‘™dËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp4
 - 
Time°amp3
));

1040 
	g°d
::
¥ötf
("sign_sub‘™dËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp5
 - 
Time°amp4
));

1041 
	g°d
::
¥ötf
("glm::sign‘™dËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp6
 - 
Time°amp5
));

1043  
	gEº‹
;

1046 
≥rf_löór
(
°d
::
size_t
 
Sam∂es
)

1048 
Eº‹
 = 0;

1050 
	g°d
::
size_t
 c⁄° 
Cou¡
 = 
Sam∂es
;

1051 
	g°d
::
ve˘‹
<
glm
::
öt32
> 
I≈ut
, 
	gOuçut
;

1052 
	gI≈ut
.
ªsize
(
Cou¡
);

1053 
	gOuçut
.
ªsize
(
Cou¡
);

1054 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1055 
	gI≈ut
[
i
] = 
°©ic_ˇ°
<
glm
::
öt32
>(i);

1057 
	g°d
::
˛ock_t
 
Time°amp0
 = 
°d
::
˛ock
();

1059 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1060 
	gOuçut
[
i
] = 
sign_cmp
(
I≈ut
[i]);

1062 
	g°d
::
˛ock_t
 
Time°amp1
 = 
°d
::
˛ock
();

1064 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1065 
	gOuçut
[
i
] = 
sign_if
(
I≈ut
[i]);

1067 
	g°d
::
˛ock_t
 
Time°amp2
 = 
°d
::
˛ock
();

1069 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1070 
	gOuçut
[
i
] = 
sign_Æu1
(
I≈ut
[i]);

1072 
	g°d
::
˛ock_t
 
Time°amp3
 = 
°d
::
˛ock
();

1074 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1075 
	gOuçut
[
i
] = 
sign_Æu2
(
I≈ut
[i]);

1077 
	g°d
::
˛ock_t
 
Time°amp4
 = 
°d
::
˛ock
();

1079 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

1080 
	gOuçut
[
i
] = 
sign_sub
(
I≈ut
[i]);

1082 
	g°d
::
˛ock_t
 
Time°amp5
 = 
°d
::
˛ock
();

1084 
	g°d
::
¥ötf
("sign_cmp÷öórËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp1
 - 
Time°amp0
));

1085 
	g°d
::
¥ötf
("sign_if÷öórËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp2
 - 
Time°amp1
));

1086 
	g°d
::
¥ötf
("sign_Æu1÷öórËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp3
 - 
Time°amp2
));

1087 
	g°d
::
¥ötf
("sign_Æu2÷öórËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp4
 - 
Time°amp3
));

1088 
	g°d
::
¥ötf
("sign_sub÷öórËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp5
 - 
Time°amp4
));

1090  
	gEº‹
;

1093 
≥rf_löór_ˇl
(
°d
::
size_t
 
Sam∂es
)

1095 
Eº‹
 = 0;

1097 
	gglm
::
öt32
 c⁄° 
Cou¡
 = 
°©ic_ˇ°
<
glm
::öt32>(
Sam∂es
);

1099 
	g°d
::
˛ock_t
 
Time°amp0
 = 
°d
::
˛ock
();

1100 
	gglm
::
öt32
 
Sum
 = 0;

1102 
	gglm
::
öt32
 
i
 = 1; 
	gi
 < 
	gCou¡
; ++i)

1103 
	gSum
 +
sign_cmp
(
i
);

1105 
	g°d
::
˛ock_t
 
Time°amp1
 = 
°d
::
˛ock
();

1107 
	gglm
::
öt32
 
i
 = 1; 
	gi
 < 
	gCou¡
; ++i)

1108 
	gSum
 +
sign_if
(
i
);

1110 
	g°d
::
˛ock_t
 
Time°amp2
 = 
°d
::
˛ock
();

1112 
	gglm
::
öt32
 
i
 = 1; 
	gi
 < 
	gCou¡
; ++i)

1113 
	gSum
 +
sign_Æu1
(
i
);

1115 
	g°d
::
˛ock_t
 
Time°amp3
 = 
°d
::
˛ock
();

1117 
	gglm
::
öt32
 
i
 = 1; 
	gi
 < 
	gCou¡
; ++i)

1118 
	gSum
 +
sign_Æu2
(
i
);

1120 
	g°d
::
˛ock_t
 
Time°amp4
 = 
°d
::
˛ock
();

1122 
	gglm
::
öt32
 
i
 = 1; 
	gi
 < 
	gCou¡
; ++i)

1123 
	gSum
 +
sign_sub
(
i
);

1125 
	g°d
::
˛ock_t
 
Time°amp5
 = 
°d
::
˛ock
();

1127 
	g°d
::
¥ötf
("Sum %d\n", 
°©ic_ˇ°
<>(
Sum
));

1129 
	g°d
::
¥ötf
("sign_cmp÷öór_ˇlËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp1
 - 
Time°amp0
));

1130 
	g°d
::
¥ötf
("sign_if÷öór_ˇlËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp2
 - 
Time°amp1
));

1131 
	g°d
::
¥ötf
("sign_Æu1÷öór_ˇlËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp3
 - 
Time°amp2
));

1132 
	g°d
::
¥ötf
("sign_Æu2÷öór_ˇlËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp4
 - 
Time°amp3
));

1133 
	g°d
::
¥ötf
("sign_sub÷öór_ˇlËTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time°amp5
 - 
Time°amp4
));

1135  
	gEº‹
;

1138 
≥rf
(
°d
::
size_t
 
Sam∂es
)

1140 
Eº‹
(0);

1142 
	gEº‹
 +
≥rf_löór_ˇl
(
Sam∂es
);

1143 
	gEº‹
 +
≥rf_löór
(
Sam∂es
);

1144 
	gEº‹
 +
≥rf_ønd
(
Sam∂es
);

1146  
	gEº‹
;

1150 
«me•a˚
 
	g‰exp_


1152 
ã°
()

1154 
Eº‹
(0);

1157 
	gglm
::
vec1
 
x
(1024);

1158 
	gglm
::
ivec1
 
exp
;

1159 
	gglm
::
vec1
 
A
 = 
glm
::
‰exp
(
x
, 
exp
);

1160 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
A
, glm::
vec1
(0.5), 0.00001f)) ? 0 : 1;

1161 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
exp
, glm::
ivec1
(11))) ? 0 : 1;

1165 
	gglm
::
vec2
 
x
(1024, 0.24);

1166 
	gglm
::
ivec2
 
exp
;

1167 
	gglm
::
vec2
 
A
 = 
glm
::
‰exp
(
x
, 
exp
);

1168 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
A
, glm::
vec2
(0.5, 0.96), 0.00001f)) ? 0 : 1;

1169 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
exp
, glm::
ivec2
(11, -2))) ? 0 : 1;

1173 
	gglm
::
vec3
 
x
(1024, 0.24, 0);

1174 
	gglm
::
ivec3
 
exp
;

1175 
	gglm
::
vec3
 
A
 = 
glm
::
‰exp
(
x
, 
exp
);

1176 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
A
, glm::
vec3
(0.5, 0.96, 0.0), 0.00001f)) ? 0 : 1;

1177 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
exp
, glm::
ivec3
(11, -2, 0))) ? 0 : 1;

1181 
	gglm
::
vec4
 
x
(1024, 0.24, 0, -1.33);

1182 
	gglm
::
ivec4
 
exp
;

1183 
	gglm
::
vec4
 
A
 = 
glm
::
‰exp
(
x
, 
exp
);

1184 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
A
, glm::
vec4
(0.5, 0.96, 0.0, -0.665), 0.00001f)) ? 0 : 1;

1185 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
exp
, glm::
ivec4
(11, -2, 0, 1))) ? 0 : 1;

1188  
	gEº‹
;

1192 
«me•a˚
 
	gldexp_


1194 
ã°
()

1196 
Eº‹
(0);

1199 
	gglm
::
vec1
 
A
 = 
glm
::vec1(0.5);

1200 
	gglm
::
ivec1
 
exp
 = 
glm
::ivec1(11);

1201 
	gglm
::
vec1
 
x
 = 
glm
::
ldexp
(
A
, 
exp
);

1202 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
x
, glm::
vec1
(1024),0.00001f)) ? 0 : 1;

1206 
	gglm
::
vec2
 
A
 = 
glm
::vec2(0.5, 0.96);

1207 
	gglm
::
ivec2
 
exp
 = 
glm
::ivec2(11, -2);

1208 
	gglm
::
vec2
 
x
 = 
glm
::
ldexp
(
A
, 
exp
);

1209 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
x
, glm::
vec2
(1024, .24),0.00001f)) ? 0 : 1;

1213 
	gglm
::
vec3
 
A
 = 
glm
::vec3(0.5, 0.96, 0.0);

1214 
	gglm
::
ivec3
 
exp
 = 
glm
::ivec3(11, -2, 0);

1215 
	gglm
::
vec3
 
x
 = 
glm
::
ldexp
(
A
, 
exp
);

1216 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
x
, glm::
vec3
(1024, .24, 0),0.00001f)) ? 0 : 1;

1220 
	gglm
::
vec4
 
A
 = 
glm
::vec4(0.5, 0.96, 0.0, -0.665);

1221 
	gglm
::
ivec4
 
exp
 = 
glm
::ivec4(11, -2, 0, 1);

1222 
	gglm
::
vec4
 
x
 = 
glm
::
ldexp
(
A
, 
exp
);

1223 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
x
, glm::
vec4
(1024, .24, 0, -1.33),0.00001f)) ? 0 : 1;

1226  
	gEº‹
;

1230 
	$maö
()

1232 
Eº‹
 = 0;

1234 
glm
::
ivec4
 c⁄° 
	`a
(1);

1235 
glm
::
ivec4
 c⁄° 
b
 = ~
a
;

1237 
glm
::
öt32
 c⁄° 
	`c
(1);

1238 
glm
::
öt32
 c⁄° 
d
 = ~
c
;

1240 #i‡
GLM_ARCH
 & 
GLM_ARCH_AVX_BIT
 && 
GLM_HAS_UNRESTRICTED_UNIONS


1241 
glm_vec4
 c⁄° 
A
 = 
	`_mm_£t_ps
(4, 3, 2, 1);

1242 
glm_vec4
 c⁄° 
B
 = 
	`glm_vec4_swizzÀ_xyzw
(
A
);

1243 
glm_vec4
 c⁄° 
C
 = 
	`_mm_≥rmuã_ps
(
A
, 
	`_MM_SHUFFLE
(3, 2, 1, 0));

1244 
glm_vec4
 c⁄° 
D
 = 
	`_mm_≥rmuã_ps
(
A
, 
	`_MM_SHUFFLE
(0, 1, 2, 3));

1245 
glm_vec4
 c⁄° 
E
 = 
	`_mm_shufÊe_ps
(
A
, A, 
	`_MM_SHUFFLE
(0, 1, 2, 3));

1248 
Eº‹
 +
sign
::
	`ã°
();

1249 
Eº‹
 +
Êo‹_
::
	`ã°
();

1250 
Eº‹
 +
mod_
::
	`ã°
();

1251 
Eº‹
 +
modf_
::
	`ã°
();

1252 
Eº‹
 +
ÊﬂtBôsToI¡
::
	`ã°
();

1253 
Eº‹
 +
ÊﬂtBôsToUöt
::
	`ã°
();

1254 
Eº‹
 +
mix_
::
	`ã°
();

1255 
Eº‹
 +
°ï_
::
	`ã°
();

1256 
Eº‹
 +
max_
::
	`ã°
();

1257 
Eº‹
 +
mö_
::
	`ã°
();

1258 
Eº‹
 +
round_
::
	`ã°
();

1259 
Eº‹
 +
roundEví
::
	`ã°
();

1260 
Eº‹
 +
i¢™_
::
	`ã°
();

1261 
Eº‹
 +
isöf_
::
	`ã°
();

1262 
Eº‹
 +
‰exp_
::
	`ã°
();

1263 
Eº‹
 +
ldexp_
::
	`ã°
();

1265 #ifde‡
NDEBUG


1266 
°d
::
size_t
 
Sam∂es
 = 1000;

1267 
Eº‹
 +
sign
::
	`≥rf
(
Sam∂es
);

1270  
Eº‹
;

1271 
	}
}

	@glm/test/core/core_func_exponential.cpp

1 
	~<glm/comm⁄.hµ
>

2 
	~<glm/exp⁄ítül.hµ
>

3 
	~<glm/gtc/uÕ.hµ
>

4 
	~<glm/gtc/vec1.hµ
>

6 
	$ã°_pow
()

8 
	`Eº‹
(0);

10 
A
 = 
glm
::
	`pow
(10.f, 10.f);

11 
glm
::
vec1
 
B
 = glm::
	`pow
(glm::
	`vec1
(10.f), glm::vec1(10.f));

12 
glm
::
vec2
 
C
 = glm::
	`pow
(glm::
	`vec2
(10.f), glm::vec2(10.f));

13 
glm
::
vec3
 
D
 = glm::
	`pow
(glm::
	`vec3
(10.f), glm::vec3(10.f));

14 
glm
::
vec4
 
E
 = glm::
	`pow
(glm::
	`vec4
(10.f), glm::vec4(10.f));

16  
Eº‹
;

17 
	}
}

19 
	$ã°_exp
()

21 
	`Eº‹
(0);

23 
A
 = 
glm
::
	`exp
(10.f);

24 
glm
::
vec1
 
B
 = glm::
	`exp
(glm::
	`vec1
(10.f));

25 
glm
::
vec2
 
C
 = glm::
	`exp
(glm::
	`vec2
(10.f));

26 
glm
::
vec3
 
D
 = glm::
	`exp
(glm::
	`vec3
(10.f));

27 
glm
::
vec4
 
E
 = glm::
	`exp
(glm::
	`vec4
(10.f));

29  
Eº‹
;

30 
	}
}

32 
	$ã°_log
()

34 
	`Eº‹
(0);

36 
A
 = 
glm
::
	`log
(10.f);

37 
glm
::
vec1
 
B
 = glm::
	`log
(glm::
	`vec1
(10.f));

38 
glm
::
vec2
 
C
 = glm::
	`log
(glm::
	`vec2
(10.f));

39 
glm
::
vec3
 
D
 = glm::
	`log
(glm::
	`vec3
(10.f));

40 
glm
::
vec4
 
E
 = glm::
	`log
(glm::
	`vec4
(10.f));

42  
Eº‹
;

43 
	}
}

45 
	$ã°_exp2
()

47 
	`Eº‹
(0);

49 
A
 = 
glm
::
	`exp2
(10.f);

50 
glm
::
vec1
 
B
 = glm::
	`exp2
(glm::
	`vec1
(10.f));

51 
glm
::
vec2
 
C
 = glm::
	`exp2
(glm::
	`vec2
(10.f));

52 
glm
::
vec3
 
D
 = glm::
	`exp2
(glm::
	`vec3
(10.f));

53 
glm
::
vec4
 
E
 = glm::
	`exp2
(glm::
	`vec4
(10.f));

55  
Eº‹
;

56 
	}
}

58 
	$ã°_log2
()

60 
	`Eº‹
(0);

62 
A
 = 
glm
::
	`log2
(10.f);

63 
glm
::
vec1
 
B
 = glm::
	`log2
(glm::
	`vec1
(10.f));

64 
glm
::
vec2
 
C
 = glm::
	`log2
(glm::
	`vec2
(10.f));

65 
glm
::
vec3
 
D
 = glm::
	`log2
(glm::
	`vec3
(10.f));

66 
glm
::
vec4
 
E
 = glm::
	`log2
(glm::
	`vec4
(10.f));

68  
Eº‹
;

69 
	}
}

71 
	$ã°_sqπ
()

73 
	`Eº‹
(0);

75 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


76 
f
 = 0.1f; f < 30.0f; f += 0.1f)

78 
r
 = 
	`_mm_cvtss_f32
(
	`_mm_sqπ_ps
(
	`_mm_£t1_ps
(
f
)));

79 
s
 = 
°d
::
	`sqπ
(
f
);

80 
Eº‹
 +
glm
::
	`abs
(
r
 - 
s
) < 0.01f ? 0 : 1;

81 
	`as£π
(!
Eº‹
);

85 
A
 = 
glm
::
	`sqπ
(10.f);

86 
glm
::
vec1
 
B
 = glm::
	`sqπ
(glm::
	`vec1
(10.f));

87 
glm
::
vec2
 
C
 = glm::
	`sqπ
(glm::
	`vec2
(10.f));

88 
glm
::
vec3
 
D
 = glm::
	`sqπ
(glm::
	`vec3
(10.f));

89 
glm
::
vec4
 
E
 = glm::
	`sqπ
(glm::
	`vec4
(10.f));

91  
Eº‹
;

92 
	}
}

94 
	$ã°_övî£sqπ
()

96 
	`Eº‹
(0);

98 
glm
::
uöt
 
	`uÕ
(0);

99 
	`diff
(0.0f);

101 
f
 = 0.001f; f < 10.f; f *= 1.001f)

103 
glm
::
lowp_fvec1
 
	`u
(
f
);

104 
glm
::
lowp_fvec1
 
lowp_v
 = glm::
	`övî£sqπ
(
u
);

105 
deÁu…p_v
 = 
glm
::
	`övî£sqπ
(
f
);

107 
uÕ
 = 
glm
::
	`max
(glm::
	`Êﬂt_di°™˚
(
lowp_v
.
x
, 
deÁu…p_v
), ulp);

108 
diff
 = 
glm
::
	`abs
(
lowp_v
.
x
 - 
deÁu…p_v
);

111  
Eº‹
;

112 
	}
}

114 
	$maö
()

116 
	`Eº‹
(0);

118 
Eº‹
 +
	`ã°_pow
();

119 
Eº‹
 +
	`ã°_exp
();

120 
Eº‹
 +
	`ã°_log
();

121 
Eº‹
 +
	`ã°_exp2
();

122 
Eº‹
 +
	`ã°_log2
();

123 
Eº‹
 +
	`ã°_sqπ
();

124 
Eº‹
 +
	`ã°_övî£sqπ
();

126  
Eº‹
;

127 
	}
}

	@glm/test/core/core_func_geometric.cpp

1 
	~<glm/geomëric.hµ
>

2 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

3 
	~<glm/gtc/ïsû⁄.hµ
>

4 
	~<glm/gtc/vec1.hµ
>

5 
	~<limôs
>

7 
«me•a˚
 
	gÀngth


9 
ã°
()

11 
	gLígth1
 = 
glm
::
Àngth
(glm::
vec1
(1));

12 
	gLígth2
 = 
glm
::
Àngth
(glm::
vec2
(1, 0));

13 
	gLígth3
 = 
glm
::
Àngth
(glm::
vec3
(1, 0, 0));

14 
	gLígth4
 = 
glm
::
Àngth
(glm::
vec4
(1, 0, 0, 0));

16 
	gEº‹
 = 0;

18 
	gEº‹
 +
glm
::
abs
(
Lígth1
 - 1.0fË< 
°d
::
numîic_limôs
<>::
ïsû⁄
() ? 0 : 1;

19 
	gEº‹
 +
glm
::
abs
(
Lígth2
 - 1.0fË< 
°d
::
numîic_limôs
<>::
ïsû⁄
() ? 0 : 1;

20 
	gEº‹
 +
glm
::
abs
(
Lígth3
 - 1.0fË< 
°d
::
numîic_limôs
<>::
ïsû⁄
() ? 0 : 1;

21 
	gEº‹
 +
glm
::
abs
(
Lígth4
 - 1.0fË< 
°d
::
numîic_limôs
<>::
ïsû⁄
() ? 0 : 1;

23  
	gEº‹
;

27 
«me•a˚
 
	gdi°™˚


29 
ã°
()

31 
	gDi°™˚1
 = 
glm
::
di°™˚
(glm::
vec1
(1), glm::vec1(1));

32 
	gDi°™˚2
 = 
glm
::
di°™˚
(glm::
vec2
(1, 0), glm::vec2(1, 0));

33 
	gDi°™˚3
 = 
glm
::
di°™˚
(glm::
vec3
(1, 0, 0), glm::vec3(1, 0, 0));

34 
	gDi°™˚4
 = 
glm
::
di°™˚
(glm::
vec4
(1, 0, 0, 0), glm::vec4(1, 0, 0, 0));

36 
	gEº‹
 = 0;

38 
	gEº‹
 +
glm
::
abs
(
Di°™˚1
Ë< 
°d
::
numîic_limôs
<>::
ïsû⁄
() ? 0 : 1;

39 
	gEº‹
 +
glm
::
abs
(
Di°™˚2
Ë< 
°d
::
numîic_limôs
<>::
ïsû⁄
() ? 0 : 1;

40 
	gEº‹
 +
glm
::
abs
(
Di°™˚3
Ë< 
°d
::
numîic_limôs
<>::
ïsû⁄
() ? 0 : 1;

41 
	gEº‹
 +
glm
::
abs
(
Di°™˚4
Ë< 
°d
::
numîic_limôs
<>::
ïsû⁄
() ? 0 : 1;

43  
	gEº‹
;

47 
«me•a˚
 
	gdŸ


49 
ã°
()

51 
	gDŸ1
 = 
glm
::
dŸ
(glm::
vec1
(1), glm::vec1(1));

52 
	gDŸ2
 = 
glm
::
dŸ
(glm::
vec2
(1), glm::vec2(1));

53 
	gDŸ3
 = 
glm
::
dŸ
(glm::
vec3
(1), glm::vec3(1));

54 
	gDŸ4
 = 
glm
::
dŸ
(glm::
vec4
(1), glm::vec4(1));

56 
	gEº‹
 = 0;

58 
	gEº‹
 +
glm
::
abs
(
DŸ1
 - 1.0fË< 
°d
::
numîic_limôs
<>::
ïsû⁄
() ? 0 : 1;

59 
	gEº‹
 +
glm
::
abs
(
DŸ2
 - 2.0fË< 
°d
::
numîic_limôs
<>::
ïsû⁄
() ? 0 : 1;

60 
	gEº‹
 +
glm
::
abs
(
DŸ3
 - 3.0fË< 
°d
::
numîic_limôs
<>::
ïsû⁄
() ? 0 : 1;

61 
	gEº‹
 +
glm
::
abs
(
DŸ4
 - 4.0fË< 
°d
::
numîic_limôs
<>::
ïsû⁄
() ? 0 : 1;

63  
	gEº‹
;

67 
«me•a˚
 
	g¸oss


69 
ã°
()

71 
	gglm
::
vec3
 
Cross1
 = 
glm
::
¸oss
(glm::vec3(1, 0, 0), glm::vec3(0, 1, 0));

72 
	gglm
::
vec3
 
Cross2
 = 
glm
::
¸oss
(glm::vec3(0, 1, 0), glm::vec3(1, 0, 0));

74 
	gEº‹
 = 0;

76 
	gEº‹
 +
glm
::
Æl
(glm::
ÀssTh™
(glm::
abs
(
Cross1
 - glm::
vec3
(0, 0, 1)), glm::vec3(
°d
::
numîic_limôs
<>::
ïsû⁄
()))) ? 0 : 1;

77 
	gEº‹
 +
glm
::
Æl
(glm::
ÀssTh™
(glm::
abs
(
Cross2
 - glm::
vec3
(0, 0,-1)), glm::vec3(
°d
::
numîic_limôs
<>::
ïsû⁄
()))) ? 0 : 1;

79  
	gEº‹
;

83 
«me•a˚
 
	gn‹mÆize


85 
ã°
()

87 
	gglm
::
vec3
 
N‹mÆize1
 = 
glm
::
n‹mÆize
(glm::vec3(1, 0, 0));

88 
	gglm
::
vec3
 
N‹mÆize2
 = 
glm
::
n‹mÆize
(glm::vec3(2, 0, 0));

90 
	gglm
::
vec3
 
N‹mÆize3
 = 
glm
::
n‹mÆize
(glm::vec3(-0.6, 0.7, -0.5));

92 
	gglm
::
vec3
 
ro
 = 
glm
::vec3(glm::
cos
(5.fË* 3.f, 2.f, glm::
sö
(5.f) * 3.f);

93 
	gglm
::
vec3
 
w
 = 
glm
::
n‹mÆize
(glm::vec3(0, -0.2f, 0Ë- 
ro
);

94 
	gglm
::
vec3
 
u
 = 
glm
::
n‹mÆize
(glm::
¸oss
(
w
, glm::vec3(0, 1, 0)));

95 
	gglm
::
vec3
 
v
 = 
glm
::
¸oss
(
u
, 
w
);

97 
	gEº‹
 = 0;

99 
	gEº‹
 +
glm
::
Æl
(glm::
ÀssTh™
(glm::
abs
(
N‹mÆize1
 - glm::
vec3
(1, 0, 0)), glm::vec3(
°d
::
numîic_limôs
<>::
ïsû⁄
()))) ? 0 : 1;

100 
	gEº‹
 +
glm
::
Æl
(glm::
ÀssTh™
(glm::
abs
(
N‹mÆize2
 - glm::
vec3
(1, 0, 0)), glm::vec3(
°d
::
numîic_limôs
<>::
ïsû⁄
()))) ? 0 : 1;

102  
	gEº‹
;

106 
«me•a˚
 
	gÁ˚f‹w¨d


108 
ã°
()

110 
	gEº‹
 = 0;

113 
	gglm
::
vec3
 
N
(0.0f, 0.0f, 1.0f);

114 
	gglm
::
vec3
 
I
(1.0f, 0.0f, 1.0f);

115 
	gglm
::
vec3
 
Nªf
(0.0f, 0.0f, 1.0f);

116 
	gglm
::
vec3
 
F
 = 
glm
::
Á˚f‹w¨d
(
N
, 
I
, 
Nªf
);

119  
	gEº‹
;

123 
«me•a˚
 
	gªÊe˘


125 
ã°
()

127 
	gEº‹
 = 0;

130 
	gglm
::
vec2
 
A
(1.0f,-1.0f);

131 
	gglm
::
vec2
 
B
(0.0f, 1.0f);

132 
	gglm
::
vec2
 
C
 = 
glm
::
ªÊe˘
(
A
, 
B
);

133 
	gEº‹
 +
C
 =
glm
::
vec2
(1.0, 1.0) ? 0 : 1;

137 
	gglm
::
dvec2
 
A
(1.0f,-1.0f);

138 
	gglm
::
dvec2
 
B
(0.0f, 1.0f);

139 
	gglm
::
dvec2
 
C
 = 
glm
::
ªÊe˘
(
A
, 
B
);

140 
	gEº‹
 +
C
 =
glm
::
dvec2
(1.0, 1.0) ? 0 : 1;

143  
	gEº‹
;

147 
«me•a˚
 
	gª‰a˘


149 
ã°
()

151 
	gEº‹
 = 0;

154 
A
(-1.0f);

155 
B
(1.0f);

156 
	gC
 = 
glm
::
ª‰a˘
(
A
, 
B
, 0.5f);

157 
	gEº‹
 +
C
 == -1.0f ? 0 : 1;

161 
	gglm
::
vec2
 
A
(0.0f,-1.0f);

162 
	gglm
::
vec2
 
B
(0.0f, 1.0f);

163 
	gglm
::
vec2
 
C
 = 
glm
::
ª‰a˘
(
A
, 
B
, 0.5f);

164 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
C
, glm::
vec2
(0.0, -1.0), 0.0001f)) ? 0 : 1;

168 
	gglm
::
dvec2
 
A
(0.0f,-1.0f);

169 
	gglm
::
dvec2
 
B
(0.0f, 1.0f);

170 
	gglm
::
dvec2
 
C
 = 
glm
::
ª‰a˘
(
A
, 
B
, 0.5);

171 
	gEº‹
 +
C
 =
glm
::
dvec2
(0.0, -1.0) ? 0 : 1;

174  
	gEº‹
;

178 
	$maö
()

180 
	`Eº‹
(0);

182 
Eº‹
 +
Àngth
::
	`ã°
();

183 
Eº‹
 +
di°™˚
::
	`ã°
();

184 
Eº‹
 +
dŸ
::
	`ã°
();

185 
Eº‹
 +
¸oss
::
	`ã°
();

186 
Eº‹
 +
n‹mÆize
::
	`ã°
();

187 
Eº‹
 +
Á˚f‹w¨d
::
	`ã°
();

188 
Eº‹
 +
ªÊe˘
::
	`ã°
();

189 
Eº‹
 +
ª‰a˘
::
	`ã°
();

191  
Eº‹
;

192 
	}
}

	@glm/test/core/core_func_integer.cpp

1 
	~<glm/öãgî.hµ
>

2 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

3 
	~<glm/gtc/vec1.hµ
>

4 
	~<ve˘‹
>

5 
	~<˘ime
>

6 
	~<c°dio
>

8 
	eªsu…


10 
	mSUCCESS
,

11 
	mFAIL
,

12 
	mASSERT
,

13 
	mSTATIC_ASSERT


16 
«me•a˚
 
	gbôfõldIn£π


18 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
,Åy≥«mê
	gsizeTy≥
>

19 
	sty≥


21 
gíTy≥
 
	gBa£
;

22 
gíTy≥
 
	gIn£π
;

23 
sizeTy≥
 
	gOff£t
;

24 
sizeTy≥
 
	gBôs
;

25 
gíTy≥
 
	gRëu∫
;

28 
	gty≥
<
	tglm
::
	tuöt
, glm::uöt> 
	tty≥U32
;

30 
ty≥U32
 c⁄° 
	gD©a32
[] =

40 
ã°
()

42 
	gEº‹
 = 0;

43 
	gglm
::
uöt
 
cou¡
 = (
D©a32
Ë/ (
ty≥U32
);

45 
	gglm
::
uöt
 
i
 = 0; 
	gi
 < 
	gcou¡
; ++i)

47 
	gglm
::
uöt
 
Rëu∫
 = 
glm
::
bôfõldIn£π
(

48 
D©a32
[
i
].
Ba£
,

49 
D©a32
[
i
].
In£π
,

50 
D©a32
[
i
].
Off£t
,

51 
D©a32
[
i
].
Bôs
);

53 
	gEº‹
 +
D©a32
[
i
].
Rëu∫
 == Return ? 0 : 1;

56  
	gEº‹
;

60 
«me•a˚
 
	gbôfõldExåa˘


62 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
,Åy≥«mê
	gsizeTy≥
>

63 
	sty≥


65 
gíTy≥
 
	gVÆue
;

66 
sizeTy≥
 
	gOff£t
;

67 
sizeTy≥
 
	gBôs
;

68 
gíTy≥
 
	gRëu∫
;

69 
ªsu…
 
	gResu…
;

72 
	gty≥
<
	tglm
::
	tuöt
, glm::uöt> 
	tty≥U32
;

74 
ty≥U32
 c⁄° 
	gD©a32
[] =

76 {0xffffffff, 0,32, 0xffffffff, 
SUCCESS
},

77 {0xffffffff, 8, 0, 0x00000000, 
SUCCESS
},

78 {0x00000000, 0,32, 0x00000000, 
SUCCESS
},

79 {0x0f0f0f0f, 0,32, 0x0f0f0f0f, 
SUCCESS
},

80 {0x00000000, 8, 0, 0x00000000, 
SUCCESS
},

81 {0x80000000,31, 1, 0x00000001, 
SUCCESS
},

82 {0x7fffffff,31, 1, 0x00000000, 
SUCCESS
},

83 {0x00000300, 8, 8, 0x00000003, 
SUCCESS
},

84 {0x0000ff00, 8, 8, 0x000000ff, 
SUCCESS
},

85 {0xfffffff0, 0, 5, 0x00000010, 
SUCCESS
},

86 {0x000000ff, 1, 3, 0x00000007, 
SUCCESS
},

87 {0x000000ff, 0, 3, 0x00000007, 
SUCCESS
},

88 {0x00000000, 0, 2, 0x00000000, 
SUCCESS
},

89 {0xffffffff, 0, 8, 0x000000ff, 
SUCCESS
},

90 {0xffff0000,16,16, 0x0000ffff, 
SUCCESS
},

91 {0xfffffff0, 0, 8, 0x00000000, 
FAIL
},

92 {0xffffffff,16,16, 0x00000000, 
FAIL
},

98 
ã°
()

100 
	gEº‹
 = 0;

102 
	gglm
::
uöt
 
cou¡
 = (
D©a32
Ë/ (
ty≥U32
);

104 
	gglm
::
uöt
 
i
 = 0; 
	gi
 < 
	gcou¡
; ++i)

106 
	gglm
::
uöt
 
Rëu∫
 = 
glm
::
bôfõldExåa˘
(

107 
D©a32
[
i
].
VÆue
,

108 
D©a32
[
i
].
Off£t
,

109 
D©a32
[
i
].
Bôs
);

111 
boﬁ
 
	gCom∑ª
 = 
D©a32
[
i
].
Rëu∫
 == Return;

113 if(
	gD©a32
[
i
].
	gResu…
 =
SUCCESS
 && 
Com∑ª
)

115 if(
	gD©a32
[
i
].
	gResu…
 =
FAIL
 && !
Com∑ª
)

118 
	gEº‹
 += 1;

121  
	gEº‹
;

125 
«me•a˚
 
	gbôfõldRevî£


154 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	gty≥«me
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

155 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
	gP
> 
bôfõldRevî£Lo›
(vecTy≥<T, 
P
> c⁄° & 
v
)

157 
GLM_STATIC_ASSERT
(
°d
::
numîic_limôs
<
T
>::
is_öãgî
, "'bitfieldReverse' onlyáccept integer values");

159 
	gvecTy≥
<
	gT
, 
	gP
> 
Resu…
(0);

160 
T
 c⁄° 
	gBôSize
 = 
°©ic_ˇ°
<T>((T) * 8);

161 
T
 
	gi
 = 0; i < 
	gBôSize
; ++i)

163 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
BôSë
(
v
 & (
°©ic_ˇ°
<
T
>(1Ë<< 
i
));

164 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
BôFú°
(
BôSë
 >> 
i
);

165 
	gResu…
 |
BôFú°
 << (
BôSize
 - 1 - 
i
);

167  
	gResu…
;

170 
	gãm∂©e
 <
ty≥«me
 
	gT
>

171 
GLM_FUNC_QUALIFIER
 
T
 
bôfõldRevî£Lo›
(T 
v
)

173  
bôfõldRevî£Lo›
(
glm
::
tvec1
<
T
>(
v
)).
x
;

176 
GLM_FUNC_QUALIFIER
 
	gglm
::
uöt32_t
 
bôfõldRevî£Uöt32
(
glm
::uöt32_à
x
)

178 
x
 = (x & 0x55555555) << 1 | (x & 0xAAAAAAAA) >> 1;

179 
	gx
 = (
x
 & 0x33333333) << 2 | (x & 0xCCCCCCCC) >> 2;

180 
	gx
 = (
x
 & 0x0F0F0F0F) << 4 | (x & 0xF0F0F0F0) >> 4;

181 
	gx
 = (
x
 & 0x00FF00FF) << 8 | (x & 0xFF00FF00) >> 8;

182 
	gx
 = (
x
 & 0x0000FFFF) << 16 | (x & 0xFFFF0000) >> 16;

183  
	gx
;

186 
GLM_FUNC_QUALIFIER
 
	gglm
::
uöt64_t
 
bôfõldRevî£Uöt64
(
glm
::uöt64_à
x
)

188 
x
 = (x & 0x5555555555555555) << 1 | (x & 0xAAAAAAAAAAAAAAAA) >> 1;

189 
	gx
 = (
x
 & 0x3333333333333333) << 2 | (x & 0xCCCCCCCCCCCCCCCC) >> 2;

190 
	gx
 = (
x
 & 0x0F0F0F0F0F0F0F0F) << 4 | (x & 0xF0F0F0F0F0F0F0F0) >> 4;

191 
	gx
 = (
x
 & 0x00FF00FF00FF00FF) << 8 | (x & 0xFF00FF00FF00FF00) >> 8;

192 
	gx
 = (
x
 & 0x0000FFFF0000FFFF) << 16 | (x & 0xFFFF0000FFFF0000) >> 16;

193 
	gx
 = (
x
 & 0x00000000FFFFFFFF) << 32 | (x & 0xFFFFFFFF00000000) >> 32;

194  
	gx
;

197 
	gãm∂©e
 <
boﬁ
 
	gEXEC
 = 
Ál£
>

198 
	scompuã_bôfõldRevî£Sãp


200 
ãm∂©e
 <
ty≥«me
 
T
, 
glm
::
¥ecisi⁄
 
P
,Åem∂©ê<
˛ass
, glm::¥ecisi⁄> cœs†
vecTy≥
>

201 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
P
> 
ˇŒ
(vecTy≥<T, P> c⁄° & 
v
, T, T)

203  
v
;

207 
	gãm∂©e
 <>

208 
	gcompuã_bôfõldRevî£Sãp
<
	gåue
>

210 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	g˛ass
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

211 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
	gP
> 
ˇŒ
(vecTy≥<T, 
P
> c⁄° & 
v
, T 
Mask
, T 
Shi·
)

213  (
	gv
 & 
	gMask
Ë<< 
	gShi·
 | (v & (~Mask)) >> Shift;

217 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	gty≥«me
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

218 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
	gP
> 
bôfõldRevî£Ops
(vecTy≥<T, 
P
> c⁄° & 
v
)

220 
	gvecTy≥
<
	gT
, 
	gP
> 
x
(
v
);

221 
	gx
 = 
compuã_bôfõldRevî£Sãp
<(
T
Ë* 8 >2>::
ˇŒ
(
x
, T(0x5555555555555555uŒ), 
°©ic_ˇ°
<T>( 1));

222 
	gx
 = 
compuã_bôfõldRevî£Sãp
<(
T
Ë* 8 >4>::
ˇŒ
(
x
, T(0x3333333333333333uŒ), 
°©ic_ˇ°
<T>( 2));

223 
	gx
 = 
compuã_bôfõldRevî£Sãp
<(
T
Ë* 8 >8>::
ˇŒ
(
x
, T(0x0F0F0F0F0F0F0F0FuŒ), 
°©ic_ˇ°
<T>( 4));

224 
	gx
 = 
compuã_bôfõldRevî£Sãp
<(
T
Ë* 8 >16>::
ˇŒ
(
x
, T(0x00FF00FF00FF00FFuŒ), 
°©ic_ˇ°
<T>( 8));

225 
	gx
 = 
compuã_bôfõldRevî£Sãp
<(
T
Ë* 8 >32>::
ˇŒ
(
x
, T(0x0000FFFF0000FFFFuŒ), 
°©ic_ˇ°
<T>(16));

226 
	gx
 = 
compuã_bôfõldRevî£Sãp
<(
T
Ë* 8 >64>::
ˇŒ
(
x
, T(0x00000000FFFFFFFFuŒ), 
°©ic_ˇ°
<T>(32));

227  
	gx
;

230 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

231 
GLM_FUNC_QUALIFIER
 
gíTy≥
 
bôfõldRevî£Ops
(gíTy≥ 
x
)

233  
bôfõldRevî£Ops
(
glm
::
tvec1
<
gíTy≥
, glm::
deÁu…p
>(
x
)).x;

236 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

237 
	sty≥


239 
gíTy≥
 
	gVÆue
;

240 
gíTy≥
 
	gRëu∫
;

241 
ªsu…
 
	gResu…
;

244 
	gty≥
<
	tglm
::
	tuöt
> 
	tty≥U32
;

246 
ty≥U32
 c⁄° 
	gD©a32
[] =

248 {0x00000001, 0x80000000, 
SUCCESS
},

249 {0x0000000f, 0xf0000000, 
SUCCESS
},

250 {0x000000ff, 0xff000000, 
SUCCESS
},

251 {0xf0000000, 0x0000000f, 
SUCCESS
},

252 {0xff000000, 0x000000ff, 
SUCCESS
},

253 {0xffffffff, 0xffffffff, 
SUCCESS
},

254 {0x00000000, 0x00000000, 
SUCCESS
}

257 
	gty≥
<
	tglm
::
	tuöt64
> 
	tty≥U64
;

259 #if(((
GLM_COMPILER
 & 
GLM_COMPILER_GCC
Ë=GLM_COMPILER_GCCË&& (GLM_COMPILER < 
GLM_COMPILER_GCC44
))

260 
ty≥U64
 c⁄° 
	gD©a64
[] =

262 {0xf000000000000000LLU, 0x000000000000000fLLU, 
SUCCESS
},

263 {0xffffffffffffffffLLU, 0xffffffffffffffffLLU, 
SUCCESS
},

264 {0x0000000000000000LLU, 0x0000000000000000LLU, 
SUCCESS
}

267 
ty≥U64
 c⁄° 
	gD©a64
[] =

269 {0x00000000000000ff, 0xff00000000000000, 
SUCCESS
},

270 {0x000000000000000f, 0xf000000000000000, 
SUCCESS
},

271 {0xf000000000000000, 0x000000000000000f, 
SUCCESS
},

272 {0xffffffffffffffff, 0xffffffffffffffff, 
SUCCESS
},

273 {0x0000000000000000, 0x0000000000000000, 
SUCCESS
}

277 
ã°32_bôfõldRevî£
()

279 
	gEº‹
 = 0;

280 
	g°d
::
size_t
 c⁄° 
Cou¡
 = (
D©a32
Ë/ (
ty≥U32
);

282 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

284 
	gglm
::
uöt
 
Rëu∫
 = 
glm
::
bôfõldRevî£
(
D©a32
[
i
].
VÆue
);

286 
boﬁ
 
	gCom∑ª
 = 
D©a32
[
i
].
Rëu∫
 == Return;

288 if(
	gD©a32
[
i
].
	gResu…
 =
SUCCESS
)

289 
Eº‹
 +
Com∑ª
 ? 0 : 1;

291 
	gEº‹
 +
Com∑ª
 ? 1 : 0;

294  
	gEº‹
;

297 
ã°32_bôfõldRevî£Lo›
()

299 
	gEº‹
 = 0;

300 
	g°d
::
size_t
 c⁄° 
Cou¡
 = (
D©a32
Ë/ (
ty≥U32
);

302 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

304 
	gglm
::
uöt
 
Rëu∫
 = 
bôfõldRevî£Lo›
(
D©a32
[
i
].
VÆue
);

306 
boﬁ
 
	gCom∑ª
 = 
D©a32
[
i
].
Rëu∫
 == Return;

308 if(
	gD©a32
[
i
].
	gResu…
 =
SUCCESS
)

309 
Eº‹
 +
Com∑ª
 ? 0 : 1;

311 
	gEº‹
 +
Com∑ª
 ? 1 : 0;

314  
	gEº‹
;

317 
ã°32_bôfõldRevî£Uöt32
()

319 
	gEº‹
 = 0;

320 
	g°d
::
size_t
 c⁄° 
Cou¡
 = (
D©a32
Ë/ (
ty≥U32
);

322 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

324 
	gglm
::
uöt
 
Rëu∫
 = 
bôfõldRevî£Uöt32
(
D©a32
[
i
].
VÆue
);

326 
boﬁ
 
	gCom∑ª
 = 
D©a32
[
i
].
Rëu∫
 == Return;

328 if(
	gD©a32
[
i
].
	gResu…
 =
SUCCESS
)

329 
Eº‹
 +
Com∑ª
 ? 0 : 1;

331 
	gEº‹
 +
Com∑ª
 ? 1 : 0;

334  
	gEº‹
;

337 
ã°32_bôfõldRevî£Ops
()

339 
	gEº‹
 = 0;

340 
	g°d
::
size_t
 c⁄° 
Cou¡
 = (
D©a32
Ë/ (
ty≥U32
);

342 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

344 
	gglm
::
uöt
 
Rëu∫
 = 
bôfõldRevî£Ops
(
D©a32
[
i
].
VÆue
);

346 
boﬁ
 
	gCom∑ª
 = 
D©a32
[
i
].
Rëu∫
 == Return;

348 if(
	gD©a32
[
i
].
	gResu…
 =
SUCCESS
)

349 
Eº‹
 +
Com∑ª
 ? 0 : 1;

351 
	gEº‹
 +
Com∑ª
 ? 1 : 0;

354  
	gEº‹
;

357 
ã°64_bôfõldRevî£
()

359 
	gEº‹
 = 0;

360 
	g°d
::
size_t
 c⁄° 
Cou¡
 = (
D©a64
Ë/ (
ty≥U64
);

362 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

364 
	gglm
::
uöt64
 
Rëu∫
 = 
glm
::
bôfõldRevî£
(
D©a64
[
i
].
VÆue
);

366 
boﬁ
 
	gCom∑ª
 = 
D©a64
[
i
].
Rëu∫
 == Return;

368 if(
	gD©a64
[
i
].
	gResu…
 =
SUCCESS
)

369 
Eº‹
 +
Com∑ª
 ? 0 : 1;

371 
	gEº‹
 +
Com∑ª
 ? 1 : 0;

374  
	gEº‹
;

377 
ã°64_bôfõldRevî£Lo›
()

379 
	gEº‹
 = 0;

380 
	g°d
::
size_t
 c⁄° 
Cou¡
 = (
D©a64
Ë/ (
ty≥U64
);

382 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

384 
	gglm
::
uöt64
 
Rëu∫
 = 
bôfõldRevî£Lo›
(
D©a64
[
i
].
VÆue
);

386 
boﬁ
 
	gCom∑ª
 = 
D©a64
[
i
].
Rëu∫
 == Return;

388 if(
	gD©a32
[
i
].
	gResu…
 =
SUCCESS
)

389 
Eº‹
 +
Com∑ª
 ? 0 : 1;

391 
	gEº‹
 +
Com∑ª
 ? 1 : 0;

394  
	gEº‹
;

397 
ã°64_bôfõldRevî£Uöt64
()

399 
	gEº‹
 = 0;

400 
	g°d
::
size_t
 c⁄° 
Cou¡
 = (
D©a64
Ë/ (
ty≥U64
);

402 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

404 
	gglm
::
uöt64
 
Rëu∫
 = 
bôfõldRevî£Uöt64
(
D©a64
[
i
].
VÆue
);

406 
boﬁ
 
	gCom∑ª
 = 
D©a64
[
i
].
Rëu∫
 == Return;

408 if(
	gD©a64
[
i
].
	gResu…
 =
SUCCESS
)

409 
Eº‹
 +
Com∑ª
 ? 0 : 1;

411 
	gEº‹
 +
Com∑ª
 ? 1 : 0;

414  
	gEº‹
;

417 
ã°64_bôfõldRevî£Ops
()

419 
	gEº‹
 = 0;

420 
	g°d
::
size_t
 c⁄° 
Cou¡
 = (
D©a64
Ë/ (
ty≥U64
);

422 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

424 
	gglm
::
uöt64
 
Rëu∫
 = 
bôfõldRevî£Ops
(
D©a64
[
i
].
VÆue
);

426 
boﬁ
 
	gCom∑ª
 = 
D©a64
[
i
].
Rëu∫
 == Return;

428 if(
	gD©a64
[
i
].
	gResu…
 =
SUCCESS
)

429 
Eº‹
 +
Com∑ª
 ? 0 : 1;

431 
	gEº‹
 +
Com∑ª
 ? 1 : 0;

434  
	gEº‹
;

437 
ã°
()

439 
	gEº‹
 = 0;

441 
	gEº‹
 +
ã°32_bôfõldRevî£
();

442 
	gEº‹
 +
ã°32_bôfõldRevî£Lo›
();

443 
	gEº‹
 +
ã°32_bôfõldRevî£Uöt32
();

444 
	gEº‹
 +
ã°32_bôfõldRevî£Ops
();

446 
	gEº‹
 +
ã°64_bôfõldRevî£
();

447 
	gEº‹
 +
ã°64_bôfõldRevî£Lo›
();

448 
	gEº‹
 +
ã°64_bôfõldRevî£Uöt64
();

449 
	gEº‹
 +
ã°64_bôfõldRevî£Ops
();

451  
	gEº‹
;

454 
≥rf32
(
glm
::
uöt32
 
Cou¡
)

456 
Eº‹
 = 0;

458 
	g°d
::
ve˘‹
<
glm
::
uöt32
> 
D©a
;

459 
	gD©a
.
ªsize
(
°©ic_ˇ°
<
°d
::
size_t
>(
Cou¡
));

461 
	g°d
::
˛ock_t
 
Time°amps0
 = 
°d
::
˛ock
();

463 
	gglm
::
uöt32
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

464 
	gD©a
[
k
] = 
glm
::
bôfõldRevî£
(k);

466 
	g°d
::
˛ock_t
 
Time°amps1
 = 
°d
::
˛ock
();

468 
	gglm
::
uöt32
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

469 
	gD©a
[
k
] = 
bôfõldRevî£Lo›
(k);

471 
	g°d
::
˛ock_t
 
Time°amps2
 = 
°d
::
˛ock
();

473 
	gglm
::
uöt32
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

474 
	gD©a
[
k
] = 
bôfõldRevî£Uöt32
(k);

476 
	g°d
::
˛ock_t
 
Time°amps3
 = 
°d
::
˛ock
();

478 
	gglm
::
uöt32
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

479 
	gD©a
[
k
] = 
bôfõldRevî£Ops
(k);

481 
	g°d
::
˛ock_t
 
Time°amps4
 = 
°d
::
˛ock
();

483 
	g°d
::
¥ötf
("glm::bôfõldRevî£: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps1
 - 
Time°amps0
));

484 
	g°d
::
¥ötf
("bôfõldRevî£Lo›: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps2
 - 
Time°amps1
));

485 
	g°d
::
¥ötf
("bôfõldRevî£Uöt32: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps3
 - 
Time°amps2
));

486 
	g°d
::
¥ötf
("bôfõldRevî£Ops: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps4
 - 
Time°amps3
));

488  
	gEº‹
;

491 
≥rf64
(
glm
::
uöt64
 
Cou¡
)

493 
Eº‹
 = 0;

495 
	g°d
::
ve˘‹
<
glm
::
uöt64
> 
D©a
;

496 
	gD©a
.
ªsize
(
°©ic_ˇ°
<
°d
::
size_t
>(
Cou¡
));

498 
	g°d
::
˛ock_t
 
Time°amps0
 = 
°d
::
˛ock
();

500 
	gglm
::
uöt32
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

501 
	gD©a
[
k
] = 
glm
::
bôfõldRevî£
(k);

503 
	g°d
::
˛ock_t
 
Time°amps1
 = 
°d
::
˛ock
();

505 
	gglm
::
uöt64
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

506 
	gD©a
[
k
] = 
bôfõldRevî£Lo›
(k);

508 
	g°d
::
˛ock_t
 
Time°amps2
 = 
°d
::
˛ock
();

510 
	gglm
::
uöt64
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

511 
	gD©a
[
k
] = 
bôfõldRevî£Uöt64
(k);

513 
	g°d
::
˛ock_t
 
Time°amps3
 = 
°d
::
˛ock
();

515 
	gglm
::
uöt64
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

516 
	gD©a
[
k
] = 
bôfõldRevî£Ops
(k);

518 
	g°d
::
˛ock_t
 
Time°amps4
 = 
°d
::
˛ock
();

520 
	g°d
::
¥ötf
("glm::bôfõldRevî£ - 64: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps1
 - 
Time°amps0
));

521 
	g°d
::
¥ötf
("bôfõldRevî£Lo› - 64: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps2
 - 
Time°amps1
));

522 
	g°d
::
¥ötf
("bôfõldRevî£Uöà- 64: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps3
 - 
Time°amps2
));

523 
	g°d
::
¥ötf
("bôfõldRevî£Op†- 64: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps4
 - 
Time°amps3
));

525  
	gEº‹
;

528 
≥rf
(
°d
::
size_t
 
Sam∂es
)

530 
Eº‹
 = 0;

532 
	gEº‹
 +
≥rf32
(
°©ic_ˇ°
<
glm
::
uöt32
>(
Sam∂es
));

533 
	gEº‹
 +
≥rf64
(
°©ic_ˇ°
<
glm
::
uöt64
>(
Sam∂es
));

535  
	gEº‹
;

539 
«me•a˚
 
	gfödMSB


541 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
,Åy≥«mê
	gªtTy≥
>

542 
	sty≥


544 
gíTy≥
 
	gVÆue
;

545 
ªtTy≥
 
	gRëu∫
;

548 #i‡
GLM_HAS_BITSCAN_WINDOWS


549 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

550 
GLM_FUNC_QUALIFIER
 
födMSB_öåösic
(
gíIUTy≥
 
VÆue
)

552 
GLM_STATIC_ASSERT
(
°d
::
numîic_limôs
<
gíIUTy≥
>::
is_öãgî
, "'findMSB' onlyáccept integer values");

554 if(
	gVÆue
 == 0)

557 
Resu…
(0);

558 
_BôSˇnRevî£
(&
Resu…
, 
VÆue
);

559  (
	gResu…
);

563 #i‡
GLM_ARCH
 & 
GLM_ARCH_AVX
 && 
GLM_COMPILER
 & 
GLM_COMPILER_VC


564 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

565 
GLM_FUNC_QUALIFIER
 
födMSB_avx
(
gíIUTy≥
 
VÆue
)

567 
GLM_STATIC_ASSERT
(
°d
::
numîic_limôs
<
gíIUTy≥
>::
is_öãgî
, "'findMSB' onlyáccept integer values");

569 if(
	gVÆue
 == 0)

572  (
_tz˙t_u32
(
VÆue
));

576 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

577 
GLM_FUNC_QUALIFIER
 
födMSB_095
(
gíIUTy≥
 
VÆue
)

579 
GLM_STATIC_ASSERT
(
°d
::
numîic_limôs
<
gíIUTy≥
>::
is_öãgî
, "'findMSB' onlyáccept integer values");

581 if(
	gVÆue
 =
gíIUTy≥
(0Ë|| 
VÆue
 == genIUType(-1))

583 if(
	gVÆue
 > 0)

585 
gíIUTy≥
 
	gBô
 = genIUType(-1);

586 
gíIUTy≥
 
	gtmp
 = 
VÆue
;Åm∞> 0;Åm∞>>1, ++
	gBô
){}

587  
	gBô
;

591 c⁄° 
BôCou¡
((
gíIUTy≥
) * 8);

592 
Mo°Signifiˇ¡Bô
(-1);

593 
BôIndex
(0); 
	gBôIndex
 < 
	gBôCou¡
; ++BitIndex)

594 
	gMo°Signifiˇ¡Bô
 = (
VÆue
 & (1 << 
BôIndex
)Ë? 
Mo°Signifiˇ¡Bô
 : BitIndex;

595 
as£π
(
Mo°Signifiˇ¡Bô
 >= 0);

596  
	gMo°Signifiˇ¡Bô
;

600 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

601 
GLM_FUNC_QUALIFIER
 
födMSB_∆z1
(
gíIUTy≥
 
x
)

603 
GLM_STATIC_ASSERT
(
°d
::
numîic_limôs
<
gíIUTy≥
>::
is_öãgî
, "'findMSB' onlyáccept integer values");

605 i‡(
	gx
 == 0)

608 
	gn
 = 0;

609 i‡(
	gx
 <0x0000FFFFË{
n
 =Ç +16; x = 
x
 <<16;}

610 i‡(
	gx
 <0x00FFFFFFË{
n
 =Ç + 8; x = 
x
 << 8;}

611 i‡(
	gx
 <0x0FFFFFFFË{
n
 =Ç + 4; x = 
x
 << 4;}

612 i‡(
	gx
 <0x3FFFFFFFË{
n
 =Ç + 2; x = 
x
 << 2;}

613 i‡(
	gx
 <0x7FFFFFFFË{
n
 =Ç + 1;}

614  31 - 
	gn
;

617 
födMSB_∆z2
(
x
)

619 
	gy
;

620 
	gn
;

622 
	gn
 = 32;

623 
	gy
 = 
x
 >>16; i‡(y !0Ë{
n
 =Ç -16; 
	gx
 = 
y
;}

624 
	gy
 = 
x
 >> 8; i‡(y !0Ë{
n
 =Ç - 8; 
	gx
 = 
y
;}

625 
	gy
 = 
x
 >> 4; i‡(y !0Ë{
n
 =Ç - 4; 
	gx
 = 
y
;}

626 
	gy
 = 
x
 >> 2; i‡(y !0Ë{
n
 =Ç - 2; 
	gx
 = 
y
;}

627 
	gy
 = 
x
 >> 1; i‡(y !0Ë 
n
 - 2;

628  32 - (
	gn
 - 
	gx
);

631 
födMSB_p›
(
x
)

633 
	gx
 = 
x
 | (x >> 1);

634 
	gx
 = 
x
 | (x >> 2);

635 
	gx
 = 
x
 | (x >> 4);

636 
	gx
 = 
x
 | (x >> 8);

637 
	gx
 = 
x
 | (x >>16);

638  31 - 
	gglm
::
bôCou¡
(~
x
);

641 
≥rf_öt
(
°d
::
size_t
 
Cou¡
)

643 
ty≥
<, > c⁄° 
	gD©a
[] =

682 
Eº‹
(0);

684 
	g°d
::
˛ock_t
 
Time°amps0
 = 
°d
::
˛ock
();

686 
	g°d
::
size_t
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

687 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<, >); ++i)

689 
	gResu…
 = 
glm
::
födMSB
(
D©a
[
i
].
VÆue
);

690 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

693 
	g°d
::
˛ock_t
 
Time°amps1
 = 
°d
::
˛ock
();

695 
	g°d
::
size_t
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

696 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<, >); ++i)

698 
	gResu…
 = 
födMSB_∆z1
(
D©a
[
i
].
VÆue
);

699 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

702 
	g°d
::
˛ock_t
 
Time°amps2
 = 
°d
::
˛ock
();

704 
	g°d
::
size_t
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

705 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<, >); ++i)

707 
	gResu…
 = 
födMSB_∆z2
(
D©a
[
i
].
VÆue
);

708 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

711 
	g°d
::
˛ock_t
 
Time°amps3
 = 
°d
::
˛ock
();

713 
	g°d
::
size_t
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

714 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<, >); ++i)

716 
	gResu…
 = 
födMSB_095
(
D©a
[
i
].
VÆue
);

717 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

720 
	g°d
::
˛ock_t
 
Time°amps4
 = 
°d
::
˛ock
();

722 #i‡
GLM_HAS_BITSCAN_WINDOWS


723 
	g°d
::
size_t
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

724 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<, >); ++i)

726 
	gResu…
 = 
födMSB_öåösic
(
D©a
[
i
].
VÆue
);

727 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

731 
	g°d
::
˛ock_t
 
Time°amps5
 = 
°d
::
˛ock
();

733 
	g°d
::
size_t
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

734 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<, >); ++i)

736 
	gResu…
 = 
födMSB_p›
(
D©a
[
i
].
VÆue
);

737 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

740 
	g°d
::
˛ock_t
 
Time°amps6
 = 
°d
::
˛ock
();

742 #i‡
GLM_ARCH
 & 
GLM_ARCH_AVX
 && 
GLM_COMPILER
 & 
GLM_COMPILER_VC


743 
	g°d
::
size_t
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

744 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<, >); ++i)

746 
	gResu…
 = 
födMSB_avx
(
D©a
[
i
].
VÆue
);

747 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

751 
	g°d
::
˛ock_t
 
Time°amps7
 = 
°d
::
˛ock
();

753 
	g°d
::
¥ötf
("glm::födMSB: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps1
 - 
Time°amps0
));

754 
	g°d
::
¥ötf
("födMSB -Çlz1: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps2
 - 
Time°amps1
));

755 
	g°d
::
¥ötf
("födMSB -Çlz2: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps3
 - 
Time°amps2
));

756 
	g°d
::
¥ötf
("födMSB - 0.9.5: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps4
 - 
Time°amps3
));

758 #i‡
GLM_HAS_BITSCAN_WINDOWS


759 
	g°d
::
¥ötf
("födMSB - i¡rösics: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps5
 - 
Time°amps4
));

761 
	g°d
::
¥ötf
("födMSB -Ö›: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps6
 - 
Time°amps5
));

763 #i‡
GLM_ARCH
 & 
GLM_ARCH_AVX
 && 
GLM_COMPILER
 & 
GLM_COMPILER_VC


764 
	g°d
::
¥ötf
("födMSB -ávxÅz˙t: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps7
 - 
Time°amps6
));

767  
	gEº‹
;

770 
ã°_ivec4
()

772 
	gty≥
<
	gglm
::
ivec4
, glm::ivec4> c⁄° 
D©a
[] =

774 {
glm
::
ivec4
(0x00000000), glm::ivec4(-1)},

775 {
glm
::
ivec4
(0x00000001), glm::ivec4( 0)},

776 {
glm
::
ivec4
(0x00000002), glm::ivec4( 1)},

777 {
glm
::
ivec4
(0x00000003), glm::ivec4( 1)},

778 {
glm
::
ivec4
(0x00000004), glm::ivec4( 2)},

779 {
glm
::
ivec4
(0x00000005), glm::ivec4( 2)},

780 {
glm
::
ivec4
(0x00000007), glm::ivec4( 2)},

781 {
glm
::
ivec4
(0x00000008), glm::ivec4( 3)},

782 {
glm
::
ivec4
(0x00000010), glm::ivec4( 4)},

783 {
glm
::
ivec4
(0x00000020), glm::ivec4( 5)},

784 {
glm
::
ivec4
(0x00000040), glm::ivec4( 6)},

785 {
glm
::
ivec4
(0x00000080), glm::ivec4( 7)},

786 {
glm
::
ivec4
(0x00000100), glm::ivec4( 8)},

787 {
glm
::
ivec4
(0x00000200), glm::ivec4( 9)},

788 {
glm
::
ivec4
(0x00000400), glm::ivec4(10)},

789 {
glm
::
ivec4
(0x00000800), glm::ivec4(11)},

790 {
glm
::
ivec4
(0x00001000), glm::ivec4(12)},

791 {
glm
::
ivec4
(0x00002000), glm::ivec4(13)},

792 {
glm
::
ivec4
(0x00004000), glm::ivec4(14)},

793 {
glm
::
ivec4
(0x00008000), glm::ivec4(15)},

794 {
glm
::
ivec4
(0x00010000), glm::ivec4(16)},

795 {
glm
::
ivec4
(0x00020000), glm::ivec4(17)},

796 {
glm
::
ivec4
(0x00040000), glm::ivec4(18)},

797 {
glm
::
ivec4
(0x00080000), glm::ivec4(19)},

798 {
glm
::
ivec4
(0x00100000), glm::ivec4(20)},

799 {
glm
::
ivec4
(0x00200000), glm::ivec4(21)},

800 {
glm
::
ivec4
(0x00400000), glm::ivec4(22)},

801 {
glm
::
ivec4
(0x00800000), glm::ivec4(23)},

802 {
glm
::
ivec4
(0x01000000), glm::ivec4(24)},

803 {
glm
::
ivec4
(0x02000000), glm::ivec4(25)},

804 {
glm
::
ivec4
(0x04000000), glm::ivec4(26)},

805 {
glm
::
ivec4
(0x08000000), glm::ivec4(27)},

806 {
glm
::
ivec4
(0x10000000), glm::ivec4(28)},

807 {
glm
::
ivec4
(0x20000000), glm::ivec4(29)},

808 {
glm
::
ivec4
(0x40000000), glm::ivec4(30)}

811 
Eº‹
(0);

813 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<
	gglm
::
ivec4
, glm::ivec4>); ++i)

815 
	gglm
::
ivec4
 
Resu…0
 = 
glm
::
födMSB
(
D©a
[
i
].
VÆue
);

816 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
D©a
[
i
].
Rëu∫
, 
Resu…0
)) ? 0 : 1;

819  
	gEº‹
;

822 
ã°_öt
()

824 
	gty≥
<
	tglm
::
	tuöt
, > 
	tíåy
;

826 
íåy
 c⁄° 
	gD©a
[] =

865 
Eº‹
(0);

867 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gíåy
); ++i)

869 
	gResu…0
 = 
glm
::
födMSB
(
D©a
[
i
].
VÆue
);

870 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…0
 ? 0 : 1;

873 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gíåy
); ++i)

875 
	gResu…0
 = 
födMSB_∆z1
(
D©a
[
i
].
VÆue
);

876 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…0
 ? 0 : 1;

885 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gíåy
); ++i)

887 
	gResu…0
 = 
födMSB_095
(
D©a
[
i
].
VÆue
);

888 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…0
 ? 0 : 1;

891 #i‡
GLM_HAS_BITSCAN_WINDOWS


892 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gíåy
); ++i)

894 
	gResu…0
 = 
födMSB_öåösic
(
D©a
[
i
].
VÆue
);

895 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…0
 ? 0 : 1;

899 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gíåy
); ++i)

901 
	gResu…0
 = 
födMSB_p›
(
D©a
[
i
].
VÆue
);

902 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…0
 ? 0 : 1;

905  
	gEº‹
;

908 
ã°
()

910 
Eº‹
(0);

912 
	gEº‹
 +
ã°_ivec4
();

913 
	gEº‹
 +
ã°_öt
();

915  
	gEº‹
;

918 
≥rf
(
°d
::
size_t
 
Sam∂es
)

920 
Eº‹
(0);

922 
	gEº‹
 +
≥rf_öt
(
Sam∂es
);

924  
	gEº‹
;

928 
«me•a˚
 
	gfödLSB


930 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
,Åy≥«mê
	gªtTy≥
>

931 
	sty≥


933 
gíTy≥
 
	gVÆue
;

934 
ªtTy≥
 
	gRëu∫
;

937 
	gty≥
<, > 
	tíåy
;

939 
íåy
 c⁄° 
	gD©aI32
[] =

952 #i‡
GLM_HAS_BITSCAN_WINDOWS


953 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

954 
GLM_FUNC_QUALIFIER
 
födLSB_öåösic
(
gíIUTy≥
 
VÆue
)

956 
GLM_STATIC_ASSERT
(
°d
::
numîic_limôs
<
gíIUTy≥
>::
is_öãgî
, "'findLSB' onlyáccept integer values");

958 if(
	gVÆue
 == 0)

961 
Resu…
(0);

962 
_BôSˇnF‹w¨d
(&
Resu…
, 
VÆue
);

963  (
	gResu…
);

967 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

968 
GLM_FUNC_QUALIFIER
 
födLSB_095
(
gíIUTy≥
 
VÆue
)

970 
GLM_STATIC_ASSERT
(
°d
::
numîic_limôs
<
gíIUTy≥
>::
is_öãgî
, "'findLSB' onlyáccept integer values");

971 if(
	gVÆue
 == 0)

974 
gíIUTy≥
 
	gBô
;

975 
	gBô
 = 
gíIUTy≥
(0); !(
	gVÆue
 & (1 << Bit)); ++Bit){}

976  
	gBô
;

979 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

980 
GLM_FUNC_QUALIFIER
 
födLSB_¡z2
(
gíIUTy≥
 
x
)

982 if(
	gx
 == 0)

985  
	gglm
::
bôCou¡
(~
x
 & (x - 
°©ic_ˇ°
<
gíIUTy≥
>(1)));

988 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

989 
GLM_FUNC_QUALIFIER
 
födLSB_bønch‰ì
(
gíIUTy≥
 
x
)

991 
boﬁ
 
IsNuŒ
(
x
 == 0);

992 c⁄° 
Kìp
(!
IsNuŒ
);

993 c⁄° 
Disˇrd
(
IsNuŒ
);

995  
	g°©ic_ˇ°
<>(
	gglm
::
bôCou¡
(~
x
 & (x - 
°©ic_ˇ°
<
gíIUTy≥
>(1)))Ë* 
Kìp
 + 
Disˇrd
 * -1;

998 
ã°_öt
()

1000 
Eº‹
(0);

1002 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©aI32
Ë/ (
	gíåy
); ++i)

1004 
	gResu…
 = 
glm
::
födLSB
(
D©aI32
[
i
].
VÆue
);

1005 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

1008 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©aI32
Ë/ (
	gíåy
); ++i)

1010 
	gResu…
 = 
födLSB_095
(
D©aI32
[
i
].
VÆue
);

1011 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

1014 #i‡
GLM_HAS_BITSCAN_WINDOWS


1015 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©aI32
Ë/ (
	gíåy
); ++i)

1017 
	gResu…
 = 
födLSB_öåösic
(
D©aI32
[
i
].
VÆue
);

1018 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

1022 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©aI32
Ë/ (
	gíåy
); ++i)

1024 
	gResu…
 = 
födLSB_¡z2
(
D©aI32
[
i
].
VÆue
);

1025 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

1028 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©aI32
Ë/ (
	gíåy
); ++i)

1030 
	gResu…
 = 
födLSB_bønch‰ì
(
D©aI32
[
i
].
VÆue
);

1031 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

1034  
	gEº‹
;

1037 
ã°
()

1039 
Eº‹
(0);

1041 
	gEº‹
 +
ã°_öt
();

1043  
	gEº‹
;

1046 
≥rf_öt
(
°d
::
size_t
 
Cou¡
)

1048 
Eº‹
(0);

1050 
	g°d
::
˛ock_t
 
Time°amps0
 = 
°d
::
˛ock
();

1052 
	g°d
::
size_t
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

1053 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©aI32
Ë/ (
	gíåy
); ++i)

1055 
	gResu…
 = 
glm
::
födLSB
(
D©aI32
[
i
].
VÆue
);

1056 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

1059 
	g°d
::
˛ock_t
 
Time°amps1
 = 
°d
::
˛ock
();

1061 
	g°d
::
size_t
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

1062 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©aI32
Ë/ (
	gíåy
); ++i)

1064 
	gResu…
 = 
födLSB_095
(
D©aI32
[
i
].
VÆue
);

1065 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

1068 
	g°d
::
˛ock_t
 
Time°amps2
 = 
°d
::
˛ock
();

1070 #i‡
GLM_HAS_BITSCAN_WINDOWS


1071 
	g°d
::
size_t
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

1072 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©aI32
Ë/ (
	gíåy
); ++i)

1074 
	gResu…
 = 
födLSB_öåösic
(
D©aI32
[
i
].
VÆue
);

1075 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

1079 
	g°d
::
˛ock_t
 
Time°amps3
 = 
°d
::
˛ock
();

1081 
	g°d
::
size_t
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

1082 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©aI32
Ë/ (
	gíåy
); ++i)

1084 
	gResu…
 = 
födLSB_¡z2
(
D©aI32
[
i
].
VÆue
);

1085 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

1088 
	g°d
::
˛ock_t
 
Time°amps4
 = 
°d
::
˛ock
();

1090 
	g°d
::
size_t
 
k
 = 0; 
	gk
 < 
	gCou¡
; ++k)

1091 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©aI32
Ë/ (
	gíåy
); ++i)

1093 
	gResu…
 = 
födLSB_bønch‰ì
(
D©aI32
[
i
].
VÆue
);

1094 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

1097 
	g°d
::
˛ock_t
 
Time°amps5
 = 
°d
::
˛ock
();

1099 
	g°d
::
¥ötf
("glm::födLSB: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps1
 - 
Time°amps0
));

1100 
	g°d
::
¥ötf
("födLSB - 0.9.5: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps2
 - 
Time°amps1
));

1102 #i‡
GLM_HAS_BITSCAN_WINDOWS


1103 
	g°d
::
¥ötf
("födLSB - i¡rösics: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps3
 - 
Time°amps2
));

1106 
	g°d
::
¥ötf
("födLSB -Çtz2: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps4
 - 
Time°amps3
));

1107 
	g°d
::
¥ötf
("födLSB - bønch‰ì: %d clocks\n", 
°©ic_ˇ°
<>(
Time°amps5
 - 
Time°amps4
));

1109  
	gEº‹
;

1112 
≥rf
(
°d
::
size_t
 
Sam∂es
)

1114 
Eº‹
(0);

1116 
	gEº‹
 +
≥rf_öt
(
Sam∂es
);

1118  
	gEº‹
;

1122 
«me•a˚
 
	guaddC¨ry


1124 
ã°
()

1126 
Eº‹
(0);

1129 
	gglm
::
uöt
 
x
 = 
°d
::
numîic_limôs
<
glm
::uöt>::
max
();

1130 
	gglm
::
uöt
 
y
 = 0;

1131 
	gglm
::
uöt
 
C¨ry
 = 0;

1132 
	gglm
::
uöt
 
Resu…
 = 
glm
::
uaddC¨ry
(
x
, 
y
, 
C¨ry
);

1134 
	gEº‹
 +
C¨ry
 == 0 ? 0 : 1;

1135 
	gEº‹
 +
Resu…
 =
°d
::
numîic_limôs
<
glm
::
uöt
>::
max
() ? 0 : 1;

1139 
	gglm
::
uöt
 
x
 = 
°d
::
numîic_limôs
<
glm
::uöt>::
max
();

1140 
	gglm
::
uöt
 
y
 = 1;

1141 
	gglm
::
uöt
 
C¨ry
 = 0;

1142 
	gglm
::
uöt
 
Resu…
 = 
glm
::
uaddC¨ry
(
x
, 
y
, 
C¨ry
);

1144 
	gEº‹
 +
C¨ry
 == 1 ? 0 : 1;

1145 
	gEº‹
 +
Resu…
 == 0 ? 0 : 1;

1149 
	gglm
::
uvec1
 
x
(
°d
::
numîic_limôs
<
glm
::
uöt
>::
max
());

1150 
	gglm
::
uvec1
 
y
(0);

1151 
	gglm
::
uvec1
 
C¨ry
(0);

1152 
	gglm
::
uvec1
 
Resu…
(
glm
::
uaddC¨ry
(
x
, 
y
, 
C¨ry
));

1154 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
C¨ry
, glm::
uvec1
(0))) ? 0 : 1;

1155 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
Resu…
, glm::
uvec1
(
°d
::
numîic_limôs
<glm::
uöt
>::
max
()))) ? 0 : 1;

1159 
	gglm
::
uvec1
 
x
(
°d
::
numîic_limôs
<
glm
::
uöt
>::
max
());

1160 
	gglm
::
uvec1
 
y
(1);

1161 
	gglm
::
uvec1
 
C¨ry
(0);

1162 
	gglm
::
uvec1
 
Resu…
(
glm
::
uaddC¨ry
(
x
, 
y
, 
C¨ry
));

1164 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
C¨ry
, glm::
uvec1
(1))) ? 0 : 1;

1165 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
Resu…
, glm::
uvec1
(0))) ? 0 : 1;

1168  
	gEº‹
;

1172 
«me•a˚
 
	gusubB‹row


1174 
ã°
()

1176 
Eº‹
(0);

1179 
	gglm
::
uöt
 
x
 = 16;

1180 
	gglm
::
uöt
 
y
 = 17;

1181 
	gglm
::
uöt
 
B‹row
 = 0;

1182 
	gglm
::
uöt
 
Resu…
 = 
glm
::
usubB‹row
(
x
, 
y
, 
B‹row
);

1184 
	gEº‹
 +
B‹row
 == 1 ? 0 : 1;

1185 
	gEº‹
 +
Resu…
 == 1 ? 0 : 1;

1189 
	gglm
::
uvec1
 
x
(16);

1190 
	gglm
::
uvec1
 
y
(17);

1191 
	gglm
::
uvec1
 
B‹row
(0);

1192 
	gglm
::
uvec1
 
Resu…
(
glm
::
usubB‹row
(
x
, 
y
, 
B‹row
));

1194 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B‹row
, glm::
uvec1
(1))) ? 0 : 1;

1195 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
Resu…
, glm::
uvec1
(1))) ? 0 : 1;

1199 
	gglm
::
uvec2
 
x
(16);

1200 
	gglm
::
uvec2
 
y
(17);

1201 
	gglm
::
uvec2
 
B‹row
(0);

1202 
	gglm
::
uvec2
 
Resu…
(
glm
::
usubB‹row
(
x
, 
y
, 
B‹row
));

1204 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B‹row
, glm::
uvec2
(1))) ? 0 : 1;

1205 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
Resu…
, glm::
uvec2
(1))) ? 0 : 1;

1209 
	gglm
::
uvec3
 
x
(16);

1210 
	gglm
::
uvec3
 
y
(17);

1211 
	gglm
::
uvec3
 
B‹row
(0);

1212 
	gglm
::
uvec3
 
Resu…
(
glm
::
usubB‹row
(
x
, 
y
, 
B‹row
));

1214 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B‹row
, glm::
uvec3
(1))) ? 0 : 1;

1215 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
Resu…
, glm::
uvec3
(1))) ? 0 : 1;

1219 
	gglm
::
uvec4
 
x
(16);

1220 
	gglm
::
uvec4
 
y
(17);

1221 
	gglm
::
uvec4
 
B‹row
(0);

1222 
	gglm
::
uvec4
 
Resu…
(
glm
::
usubB‹row
(
x
, 
y
, 
B‹row
));

1224 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B‹row
, glm::
uvec4
(1))) ? 0 : 1;

1225 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
Resu…
, glm::
uvec4
(1))) ? 0 : 1;

1228  
	gEº‹
;

1232 
«me•a˚
 
	gumulExãnded


1234 
ã°
()

1236 
Eº‹
(0);

1239 
	gglm
::
uöt
 
x
 = 2;

1240 
	gglm
::
uöt
 
y
 = 3;

1241 
	gglm
::
uöt
 
msb
 = 0;

1242 
	gglm
::
uöt
 
lsb
 = 0;

1243 
	gglm
::
umulExãnded
(
x
, 
y
, 
msb
, 
lsb
);

1245 
	gEº‹
 +
msb
 == 0 ? 0 : 1;

1246 
	gEº‹
 +
lsb
 == 6 ? 0 : 1;

1250 
	gglm
::
uvec1
 
x
(2);

1251 
	gglm
::
uvec1
 
y
(3);

1252 
	gglm
::
uvec1
 
msb
(0);

1253 
	gglm
::
uvec1
 
lsb
(0);

1254 
	gglm
::
umulExãnded
(
x
, 
y
, 
msb
, 
lsb
);

1256 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
msb
, glm::
uvec1
(0))) ? 0 : 1;

1257 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
lsb
, glm::
uvec1
(6))) ? 0 : 1;

1261 
	gglm
::
uvec2
 
x
(2);

1262 
	gglm
::
uvec2
 
y
(3);

1263 
	gglm
::
uvec2
 
msb
(0);

1264 
	gglm
::
uvec2
 
lsb
(0);

1265 
	gglm
::
umulExãnded
(
x
, 
y
, 
msb
, 
lsb
);

1267 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
msb
, glm::
uvec2
(0))) ? 0 : 1;

1268 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
lsb
, glm::
uvec2
(6))) ? 0 : 1;

1272 
	gglm
::
uvec3
 
x
(2);

1273 
	gglm
::
uvec3
 
y
(3);

1274 
	gglm
::
uvec3
 
msb
(0);

1275 
	gglm
::
uvec3
 
lsb
(0);

1276 
	gglm
::
umulExãnded
(
x
, 
y
, 
msb
, 
lsb
);

1278 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
msb
, glm::
uvec3
(0))) ? 0 : 1;

1279 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
lsb
, glm::
uvec3
(6))) ? 0 : 1;

1283 
	gglm
::
uvec4
 
x
(2);

1284 
	gglm
::
uvec4
 
y
(3);

1285 
	gglm
::
uvec4
 
msb
(0);

1286 
	gglm
::
uvec4
 
lsb
(0);

1287 
	gglm
::
umulExãnded
(
x
, 
y
, 
msb
, 
lsb
);

1289 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
msb
, glm::
uvec4
(0))) ? 0 : 1;

1290 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
lsb
, glm::
uvec4
(6))) ? 0 : 1;

1293  
	gEº‹
;

1297 
«me•a˚
 
	gimulExãnded


1299 
ã°
()

1301 
Eº‹
(0);

1304 
	gx
 = 2;

1305 
	gy
 = 3;

1306 
	gmsb
 = 0;

1307 
	glsb
 = 0;

1308 
	gglm
::
imulExãnded
(
x
, 
y
, 
msb
, 
lsb
);

1310 
	gEº‹
 +
msb
 == 0 ? 0 : 1;

1311 
	gEº‹
 +
lsb
 == 6 ? 0 : 1;

1315 
	gglm
::
ivec1
 
x
(2);

1316 
	gglm
::
ivec1
 
y
(3);

1317 
	gglm
::
ivec1
 
msb
(0);

1318 
	gglm
::
ivec1
 
lsb
(0);

1319 
	gglm
::
imulExãnded
(
x
, 
y
, 
msb
, 
lsb
);

1321 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
msb
, glm::
ivec1
(0))) ? 0 : 1;

1322 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
lsb
, glm::
ivec1
(6))) ? 0 : 1;

1326 
	gglm
::
ivec2
 
x
(2);

1327 
	gglm
::
ivec2
 
y
(3);

1328 
	gglm
::
ivec2
 
msb
(0);

1329 
	gglm
::
ivec2
 
lsb
(0);

1330 
	gglm
::
imulExãnded
(
x
, 
y
, 
msb
, 
lsb
);

1332 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
msb
, glm::
ivec2
(0))) ? 0 : 1;

1333 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
lsb
, glm::
ivec2
(6))) ? 0 : 1;

1337 
	gglm
::
ivec3
 
x
(2);

1338 
	gglm
::
ivec3
 
y
(3);

1339 
	gglm
::
ivec3
 
msb
(0);

1340 
	gglm
::
ivec3
 
lsb
(0);

1341 
	gglm
::
imulExãnded
(
x
, 
y
, 
msb
, 
lsb
);

1343 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
msb
, glm::
ivec3
(0))) ? 0 : 1;

1344 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
lsb
, glm::
ivec3
(6))) ? 0 : 1;

1348 
	gglm
::
ivec4
 
x
(2);

1349 
	gglm
::
ivec4
 
y
(3);

1350 
	gglm
::
ivec4
 
msb
(0);

1351 
	gglm
::
ivec4
 
lsb
(0);

1352 
	gglm
::
imulExãnded
(
x
, 
y
, 
msb
, 
lsb
);

1354 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
msb
, glm::
ivec4
(0))) ? 0 : 1;

1355 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
lsb
, glm::
ivec4
(6))) ? 0 : 1;

1358  
	gEº‹
;

1362 
«me•a˚
 
	gbôCou¡


1364 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

1365 
	sty≥


1367 
gíTy≥
 
	gVÆue
;

1368 
gíTy≥
 
	gRëu∫
;

1371 
	gty≥
<> c⁄° 
	gD©aI32
[] =

1380 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1381 
ölöe
 
bôCou¡_if
(
T
 
v
)

1383 
GLM_STATIC_ASSERT
(
°d
::
numîic_limôs
<
T
>::
is_öãgî
, "'bitCount' onlyáccept integer values");

1385 
Cou¡
(0);

1386 
T
 
	gi
 = 0, 
	gn
 = 
°©ic_ˇ°
<T>((T) * 8); i <Ç; ++i)

1388 if(
	gv
 & 
	g°©ic_ˇ°
<
	gT
>(1 << 
	gi
))

1389 ++
	gCou¡
;

1391  
	gCou¡
;

1394 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1395 
ölöe
 
bôCou¡_vec
(
T
 
v
)

1397 
GLM_STATIC_ASSERT
(
°d
::
numîic_limôs
<
T
>::
is_öãgî
, "'bitCount' onlyáccept integer values");

1399 
Cou¡
(0);

1400 
T
 
	gi
 = 0, 
	gn
 = 
°©ic_ˇ°
<T>((T) * 8); i <Ç; ++i)

1402 
	gCou¡
 +
°©ic_ˇ°
<>((
v
 >> 
i
Ë& sètic_ˇ°<
T
>(1));

1404  
	gCou¡
;

1407 
	gãm∂©e
 <
boﬁ
 
	gEXEC
 = 
Ál£
>

1408 
	scompuã_bôfõldBôCou¡Sãp


1410 
ãm∂©e
 <
ty≥«me
 
T
, 
glm
::
¥ecisi⁄
 
P
,Åem∂©ê<
˛ass
, glm::¥ecisi⁄> cœs†
vecTy≥
>

1411 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
P
> 
ˇŒ
(vecTy≥<T, P> c⁄° & 
v
, T, T)

1413  
v
;

1417 
	gãm∂©e
 <>

1418 
	gcompuã_bôfõldBôCou¡Sãp
<
	gåue
>

1420 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	g˛ass
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

1421 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
	gP
> 
ˇŒ
(vecTy≥<T, 
P
> c⁄° & 
v
, T 
Mask
, T 
Shi·
)

1423  (
	gv
 & 
	gMask
Ë+ ((v >> 
	gShi·
) & Mask);

1427 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	gty≥«me
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

1428 
GLM_FUNC_QUALIFIER
 
vecTy≥
<, 
	gP
> 
bôCou¡_bôfõld
(vecTy≥<
T
, 
P
> c⁄° & 
v
)

1430 
	gvecTy≥
<
ty≥«me
 
	gglm
::
dëaû
::
make_unsig√d
<
T
>::
ty≥
, 
	gP
> 
x
(*
ªöãΩªt_ˇ°
<
vecTy≥
<ty≥«mê
glm
::dëaû::make_unsig√d<T>::ty≥, 
P
> c⁄° *>(&
v
));

1431 
	gx
 = 
compuã_bôfõldBôCou¡Sãp
<(
T
Ë* 8 >2>::
ˇŒ
(
x
, 
ty≥«me
 
glm
::
dëaû
::
make_unsig√d
<T>::
ty≥
(0x5555555555555555ull),Åypename glm::detail::make_unsigned<T>::type( 1));

1432 
	gx
 = 
compuã_bôfõldBôCou¡Sãp
<(
T
Ë* 8 >4>::
ˇŒ
(
x
, 
ty≥«me
 
glm
::
dëaû
::
make_unsig√d
<T>::
ty≥
(0x3333333333333333ull),Åypename glm::detail::make_unsigned<T>::type( 2));

1433 
	gx
 = 
compuã_bôfõldBôCou¡Sãp
<(
T
Ë* 8 >8>::
ˇŒ
(
x
, 
ty≥«me
 
glm
::
dëaû
::
make_unsig√d
<T>::
ty≥
(0x0F0F0F0F0F0F0F0Full),Åypename glm::detail::make_unsigned<T>::type( 4));

1434 
	gx
 = 
compuã_bôfõldBôCou¡Sãp
<(
T
Ë* 8 >16>::
ˇŒ
(
x
, 
ty≥«me
 
glm
::
dëaû
::
make_unsig√d
<T>::
ty≥
(0x00FF00FF00FF00FFull),Åypename glm::detail::make_unsigned<T>::type( 8));

1435 
	gx
 = 
compuã_bôfõldBôCou¡Sãp
<(
T
Ë* 8 >32>::
ˇŒ
(
x
, 
ty≥«me
 
glm
::
dëaû
::
make_unsig√d
<T>::
ty≥
(0x0000FFFF0000FFFFull),Åypename glm::detail::make_unsigned<T>::type(16));

1436 
	gx
 = 
compuã_bôfõldBôCou¡Sãp
<(
T
Ë* 8 >64>::
ˇŒ
(
x
, 
ty≥«me
 
glm
::
dëaû
::
make_unsig√d
<T>::
ty≥
(0x00000000FFFFFFFFull),Åypename glm::detail::make_unsigned<T>::type(32));

1437  
	gvecTy≥
<, 
	gP
>(
	gx
);

1440 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

1441 
GLM_FUNC_QUALIFIER
 
bôCou¡_bôfõld
(
gíTy≥
 
x
)

1443  
bôCou¡_bôfõld
(
glm
::
tvec1
<
gíTy≥
, glm::
deÁu…p
>(
x
)).x;

1446 
≥rf
(
°d
::
size_t
 
Size
)

1448 
Eº‹
(0);

1450 
	g°d
::
ve˘‹
<> 
v
;

1451 
	gv
.
ªsize
(
Size
);

1453 
	g°d
::
ve˘‹
<
glm
::
ivec4
> 
w
;

1454 
	gw
.
ªsize
(
Size
);

1457 
	g°d
::
˛ock_t
 
Time°ampsA
 = 
°d
::
˛ock
();

1461 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = 
v
.
size
(); 
	gi
 <Ç; ++i)

1462 
	gv
[
i
] = 
bôCou¡_if
(
°©ic_ˇ°
<>(i));

1465 
	g°d
::
˛ock_t
 
Time°ampsB
 = 
°d
::
˛ock
();

1469 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = 
v
.
size
(); 
	gi
 <Ç; ++i)

1470 
	gv
[
i
] = 
bôCou¡_vec
(i);

1473 
	g°d
::
˛ock_t
 
Time°ampsC
 = 
°d
::
˛ock
();

1477 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = 
v
.
size
(); 
	gi
 <Ç; ++i)

1478 
	gv
[
i
] = 
glm
::
bôCou¡
(i);

1481 
	g°d
::
˛ock_t
 
Time°ampsD
 = 
°d
::
˛ock
();

1485 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = 
v
.
size
(); 
	gi
 <Ç; ++i)

1486 
	gw
[
i
] = 
glm
::
bôCou¡
(glm::
ivec4
(
°©ic_ˇ°
<>(i)));

1489 
	g°d
::
˛ock_t
 
Time°ampsE
 = 
°d
::
˛ock
();

1492 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = 
v
.
size
(); 
	gi
 <Ç; ++i)

1493 
	gv
[
i
] = 
bôCou¡_bôfõld
(
°©ic_ˇ°
<>(i));

1496 
	g°d
::
˛ock_t
 
Time°ampsF
 = 
°d
::
˛ock
();

1498 
	g°d
::
¥ötf
("bôCou¡ - TimeI‡%d\n", 
°©ic_ˇ°
<>(
Time°ampsB
 - 
Time°ampsA
));

1499 
	g°d
::
¥ötf
("bôCou¡ - TimeVe¯%d\n", 
°©ic_ˇ°
<>(
Time°ampsC
 - 
Time°ampsB
));

1500 
	g°d
::
¥ötf
("bôCou¡ - TimeDeÁu… %d\n", 
°©ic_ˇ°
<>(
Time°ampsD
 - 
Time°ampsC
));

1501 
	g°d
::
¥ötf
("bôCou¡ - TimeVec4 %d\n", 
°©ic_ˇ°
<>(
Time°ampsE
 - 
Time°ampsD
));

1502 
	g°d
::
¥ötf
("bôCou¡ - bôfõld %d\n", 
°©ic_ˇ°
<>(
Time°ampsF
 - 
Time°ampsE
));

1504  
	gEº‹
;

1507 
ã°
()

1509 
Eº‹
(0);

1511 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©aI32
Ë/ (
ty≥
<>); 
	gi
 <Ç; ++i)

1513 
	gResu…A
 = 
glm
::
bôCou¡
(
D©aI32
[
i
].
VÆue
);

1514 
	gResu…B
 = 
bôCou¡_if
(
D©aI32
[
i
].
VÆue
);

1515 
	gResu…C
 = 
bôCou¡_vec
(
D©aI32
[
i
].
VÆue
);

1516 
	gResu…E
 = 
bôCou¡_bôfõld
(
D©aI32
[
i
].
VÆue
);

1518 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…A
 ? 0 : 1;

1519 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…B
 ? 0 : 1;

1520 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…C
 ? 0 : 1;

1521 
	gEº‹
 +
D©aI32
[
i
].
Rëu∫
 =
Resu…E
 ? 0 : 1;

1523 
as£π
(!
Eº‹
);

1526  
	gEº‹
;

1530 
	$maö
()

1532 
Eº‹
 = 0;

1534 
Eº‹
 +::
bôCou¡
::
	`ã°
();

1535 
Eº‹
 +::
bôfõldRevî£
::
	`ã°
();

1536 
Eº‹
 +::
födMSB
::
	`ã°
();

1537 
Eº‹
 +::
födLSB
::
	`ã°
();

1538 
Eº‹
 +::
umulExãnded
::
	`ã°
();

1539 
Eº‹
 +::
imulExãnded
::
	`ã°
();

1540 
Eº‹
 +::
uaddC¨ry
::
	`ã°
();

1541 
Eº‹
 +::
usubB‹row
::
	`ã°
();

1542 
Eº‹
 +::
bôfõldIn£π
::
	`ã°
();

1543 
Eº‹
 +::
bôfõldExåa˘
::
	`ã°
();

1545 #ifde‡
NDEBUG


1546 
°d
::
size_t
 c⁄° 
Sam∂es
 = 1000;

1547 ::
bôCou¡
::
	`≥rf
(
Sam∂es
);

1548 ::
bôfõldRevî£
::
	`≥rf
(
Sam∂es
);

1549 ::
födMSB
::
	`≥rf
(
Sam∂es
);

1550 ::
födLSB
::
	`≥rf
(
Sam∂es
);

1553  
Eº‹
;

1554 
	}
}

	@glm/test/core/core_func_integer_bit_count.cpp

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<˘ime
>

8 
	$rŸ©ñ
(
x
, 
n
)

10 i‡(()
n
 > 63Ë{
	`¥ötf
("rŸ©ñ,Ç ouào‡ønge.\n"); 
	`exô
(1);}

11  (
x
 << 
n
) | (x >> (32 -Ç));

12 
	}
}

14 
	$p›0
(
x
)

16 
x
 = (x & 0x55555555) + ((x >> 1) & 0x55555555);

17 
x
 = (x & 0x33333333) + ((x >> 2) & 0x33333333);

18 
x
 = (x & 0x0F0F0F0F) + ((x >> 4) & 0x0F0F0F0F);

19 
x
 = (x & 0x00FF00FF) + ((x >> 8) & 0x00FF00FF);

20 
x
 = (x & 0x0000FFFF) + ((x >>16) & 0x0000FFFF);

21  
x
;

22 
	}
}

24 
	$p›1
(
x
)

26 
x
 = x - ((x >> 1) & 0x55555555);

27 
x
 = (x & 0x33333333) + ((x >> 2) & 0x33333333);

28 
x
 = (x + (x >> 4)) & 0x0F0F0F0F;

29 
x
 = x + (x >> 8);

30 
x
 = x + (x >> 16);

31  
x
 & 0x0000003F;

32 
	}
}

37 
	$p›2
(
x
)

39 
n
;

41 
n
 = (
x
 >> 1) & 033333333333;

42 
x
 = x - 
n
;

43 
n
 = (n >> 1) & 033333333333;

44 
x
 = x - 
n
;

45 
x
 = (x + (x >> 3)) & 030707070707;

46  
x
%63;

47 
	}
}

54 
	$p›3
(
x
)

56 
n
;

58 
n
 = (
x
 >> 1) & 0x77777777;

59 
x
 = x - 
n
;

60 
n
 = (n >> 1) & 0x77777777;

61 
x
 = x - 
n
;

62 
n
 = (n >> 1) & 0x77777777;

63 
x
 = x - 
n
;

64 
x
 = (x + (x >> 4)) & 0x0F0F0F0F;

65 
x
 = x*0x01010101;

66  
x
 >> 24;

67 
	}
}

69 
	$p›4
(
x
)

71 
n
;

73 
n
 = 0;

74 
x
 != 0) {

75 
n
 =Ç + 1;

76 
x
 = x & (x - 1);

78  
n
;

79 
	}
}

81 
	$p›5
(
x
)

83 
i
, 
sum
;

87 
sum
 = 
x
;

88 
i
 = 1; i <= 31; i++) {

89 
x
 = 
	`rŸ©ñ
(x, 1);

90 
sum
 = sum + 
x
;

92  -
sum
;

93 
	}
}

95 
	$p›5a
(
x
)

97 
sum
;

101 
sum
 = 
x
;

102 
x
 != 0) {

103 
x
 = x >> 1;

104 
sum
 = sum - 
x
;

106  
sum
;

107 
	}
}

109 
	$p›6
(
x
)

111 
èbÀ
[256] = {

132  
èbÀ
[
x
 & 0xFF] +

133 
èbÀ
[(
x
 >> 8) & 0xFF] +

134 
èbÀ
[(
x
 >> 16) & 0xFF] +

135 
èbÀ
[(
x
 >> 24)];

136 
	}
}

139 
	$p›7
(
x
)

141 
x
 = x*0x08040201;

142 
x
 = x >> 3;

143 
x
 = x & 0x11111111;

144 
x
 = x*0x11111111;

145 
x
 = x >> 28;

146  
x
;

147 
	}
}

150 
	$p›8
(
x
)

152 
x
 = x*0x02040810;

153 
x
 = x & 0x11111111;

154 
x
 = x*0x11111111;

155 
x
 = x >> 28;

156  
x
;

157 
	}
}

160 
	$p›9
(
x
)

162 
y
;

163 
y
 = 
x
 * 0x0002000400080010ULL;

164 
y
 = y & 0x1111111111111111ULL;

165 
y
 = y * 0x1111111111111111ULL;

166 
y
 = y >> 60;

167  
y
;

168 
	}
}

170 
	gîr‹s
;

171 
	$îr‹
(
x
, 
y
)

173 
îr‹s
 =Érrors + 1;

174 
	`¥ötf
("Eº‹ f‹ x = %08x, gŸ %08x\n", 
x
, 
y
);

175 
	}
}

177 
	$maö
()

179 #ifde‡
NDEBUG


181 
i
, 
n
;

182 
ã°
[] = {0,0, 1,1, 2,1, 3,2, 4,1, 5,2, 6,2, 7,3,

189 
°d
::
size_t
 c⁄° 
Cou¡
 = 1000000;

191 
n
 = (
ã°
)/4;

193 
°d
::
˛ock_t
 
Time°ampBeg
 = 0;

194 
°d
::
˛ock_t
 
Time°ampEnd
 = 0;

196 
Time°ampBeg
 = 
°d
::
	`˛ock
();

197 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

198 
i
 = 0; i < 
n
; i += 2) {

199 i‡(
	`p›0
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Öop0(test[i]));}

200 
Time°ampEnd
 = 
°d
::
	`˛ock
();

202 
	`¥ötf
("p›0: %ld clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

204 
Time°ampBeg
 = 
°d
::
	`˛ock
();

205 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

206 
i
 = 0; i < 
n
; i += 2) {

207 i‡(
	`p›1
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Öop1(test[i]));}

208 
Time°ampEnd
 = 
°d
::
	`˛ock
();

210 
	`¥ötf
("p›1: %ld clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

212 
Time°ampBeg
 = 
°d
::
	`˛ock
();

213 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

214 
i
 = 0; i < 
n
; i += 2) {

215 i‡(
	`p›2
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Öop2(test[i]));}

216 
Time°ampEnd
 = 
°d
::
	`˛ock
();

218 
	`¥ötf
("p›2: %ld clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

220 
Time°ampBeg
 = 
°d
::
	`˛ock
();

221 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

222 
i
 = 0; i < 
n
; i += 2) {

223 i‡(
	`p›3
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Öop3(test[i]));}

224 
Time°ampEnd
 = 
°d
::
	`˛ock
();

226 
	`¥ötf
("p›3: %ld clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

228 
Time°ampBeg
 = 
°d
::
	`˛ock
();

229 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

230 
i
 = 0; i < 
n
; i += 2) {

231 i‡(
	`p›4
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Öop4(test[i]));}

232 
Time°ampEnd
 = 
°d
::
	`˛ock
();

234 
	`¥ötf
("p›4: %ld clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

236 
Time°ampBeg
 = 
°d
::
	`˛ock
();

237 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

238 
i
 = 0; i < 
n
; i += 2) {

239 i‡(
	`p›5
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Öop5(test[i]));}

240 
Time°ampEnd
 = 
°d
::
	`˛ock
();

242 
	`¥ötf
("p›5: %ld clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

244 
Time°ampBeg
 = 
°d
::
	`˛ock
();

245 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

246 
i
 = 0; i < 
n
; i += 2) {

247 i‡(
	`p›5a
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Öop5a(test[i]));}

248 
Time°ampEnd
 = 
°d
::
	`˛ock
();

250 
	`¥ötf
("p›5a: %ld clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

252 
Time°ampBeg
 = 
°d
::
	`˛ock
();

253 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

254 
i
 = 0; i < 
n
; i += 2) {

255 i‡(
	`p›6
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Öop6(test[i]));}

256 
Time°ampEnd
 = 
°d
::
	`˛ock
();

258 
	`¥ötf
("p›6: %ld clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

260 
Time°ampBeg
 = 
°d
::
	`˛ock
();

261 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

262 
i
 = 0; i < 
n
; i += 2) {

263 i‡((
ã°
[
i
] & 0xffffff00) == 0)

264 i‡(
	`p›7
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Öop7(test[i]));}

265 
Time°ampEnd
 = 
°d
::
	`˛ock
();

267 
	`¥ötf
("p›7: %ld clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

269 
Time°ampBeg
 = 
°d
::
	`˛ock
();

270 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

271 
i
 = 0; i < 
n
; i += 2) {

272 i‡((
ã°
[
i
] & 0xffffff80) == 0)

273 i‡(
	`p›8
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Öop8(test[i]));}

274 
Time°ampEnd
 = 
°d
::
	`˛ock
();

276 
	`¥ötf
("p›8: %ld clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

278 
Time°ampBeg
 = 
°d
::
	`˛ock
();

279 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

280 
i
 = 0; i < 
n
; i += 2) {

281 i‡((
ã°
[
i
] & 0xffff8000) == 0)

282 i‡(
	`p›9
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Öop9(test[i]));}

283 
Time°ampEnd
 = 
°d
::
	`˛ock
();

285 
	`¥ötf
("p›9: %ld clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

287 i‡(
îr‹s
 == 0)

288 
	`¥ötf
("Pas£dáŒ %d ca£s.\n", (
ã°
)/8);

291 
	}
}

	@glm/test/core/core_func_integer_find_lsb.cpp

4 
	~<c°dio
>

5 
	~<c°dlib
>

6 
	~<˘ime
>

8 
	$∆z
(
x
) {

9 
	`p›
(
x
);

11 
x
 = x | (x >> 1);

12 
x
 = x | (x >> 2);

13 
x
 = x | (x >> 4);

14 
x
 = x | (x >> 8);

15 
x
 = x | (x >>16);

16  
	`p›
(~
x
);

17 
	}
}

19 
	$p›
(
x
) {

20 
x
 = x - ((x >> 1) & 0x55555555);

21 
x
 = (x & 0x33333333) + ((x >> 2) & 0x33333333);

22 
x
 = (x + (x >> 4)) & 0x0F0F0F0F;

23 
x
 = x + (x << 8);

24 
x
 = x + (x << 16);

25  
x
 >> 24;

26 
	}
}

28 
	$¡z1
(
x
) {

29  32 - 
	`∆z
(~
x
 & (x-1));

30 
	}
}

32 
	$¡z2
(
x
) {

33  
	`p›
(~
x
 & (x - 1));

34 
	}
}

36 
	$¡z3
(
x
) {

37 
n
;

39 i‡(
x
 == 0) (32);

40 
n
 = 1;

41 i‡((
x
 & 0x0000FFFFË=0Ë{
n
 =Ç +16; x = x >>16;}

42 i‡((
x
 & 0x000000FFË=0Ë{
n
 =Ç + 8; x = x >> 8;}

43 i‡((
x
 & 0x0000000FË=0Ë{
n
 =Ç + 4; x = x >> 4;}

44 i‡((
x
 & 0x00000003Ë=0Ë{
n
 =Ç + 2; x = x >> 2;}

45  
n
 - (
x
 & 1);

46 
	}
}

48 
	$¡z4
(
x
) {

49 
y
;

50 
n
;

52 i‡(
x
 == 0)  32;

53 
n
 = 31;

54 
y
 = 
x
 <<16; i‡(y !0Ë{
n
 =Ç -16; x = y;}

55 
y
 = 
x
 << 8; i‡(y !0Ë{
n
 =Ç - 8; x = y;}

56 
y
 = 
x
 << 4; i‡(y !0Ë{
n
 =Ç - 4; x = y;}

57 
y
 = 
x
 << 2; i‡(y !0Ë{
n
 =Ç - 2; x = y;}

58 
y
 = 
x
 << 1; i‡(y !0Ë{
n
 =Ç - 1;}

59  
n
;

60 
	}
}

62 
	$¡z4a
(
x
) {

63 
y
;

64 
n
;

66 i‡(
x
 == 0)  32;

67 
n
 = 31;

68 
y
 = 
x
 <<16; i‡(y !0Ë{
n
 =Ç -16; x = y;}

69 
y
 = 
x
 << 8; i‡(y !0Ë{
n
 =Ç - 8; x = y;}

70 
y
 = 
x
 << 4; i‡(y !0Ë{
n
 =Ç - 4; x = y;}

71 
y
 = 
x
 << 2; i‡(y !0Ë{
n
 =Ç - 2; x = y;}

72 
n
 =Ç - ((
x
 << 1) >> 31);

73  
n
;

74 
	}
}

76 
	$¡z5
(
x
)

78 i‡(
x
 & 15) {

79 i‡(
x
 & 3) {

80 i‡(
x
 & 1)  0;

83 i‡(
x
 & 4)  2;

86 i‡(
x
 & 0x30) {

87 i‡(
x
 & 0x10)  4;

90 i‡(
x
 & 0x40)  6;

91 i‡(
x
)  7;

93 
	}
}

95 
	$¡z6
(
x
) {

96 
n
;

98 
x
 = ~x & (x - 1);

99 
n
 = 0;

100 
x
 != 0) {

101 
n
 =Ç + 1;

102 
x
 = x >> 1;

104  
n
;

105 
	}
}

107 
	$¡z6a
(
x
)

109 
n
 = 32;

111 
x
 != 0) {

112 
n
 =Ç - 1;

113 
x
 = x + x;

115  
n
;

116 
	}
}

134 
	$¡z7
(
x
)

136 
y
, 
bz
, 
b4
, 
b3
, 
b2
, 
b1
, 
b0
;

138 
y
 = 
x
 & -x;

139 
bz
 = 
y
 ? 0 : 1;

140 
b4
 = (
y
 & 0x0000FFFF) ? 0 : 16;

141 
b3
 = (
y
 & 0x00FF00FF) ? 0 : 8;

142 
b2
 = (
y
 & 0x0F0F0F0F) ? 0 : 4;

143 
b1
 = (
y
 & 0x33333333) ? 0 : 2;

144 
b0
 = (
y
 & 0x55555555) ? 0 : 1;

145  
bz
 + 
b4
 + 
b3
 + 
b2
 + 
b1
 + 
b0
;

146 
	}
}

148 
	$¡z7_chri°›he
(
x
)

150 
y
, 
bz
, 
b4
, 
b3
, 
b2
, 
b1
, 
b0
;

152 
y
 = 
x
 & -x;

153 
bz
 = (!
	`boﬁ
(
y
));

154 
b4
 = (!
	`boﬁ
(
y
 & 0x0000FFFF)) * 16;

155 
b3
 = (!
	`boﬁ
(
y
 & 0x00FF00FF)) * 8;

156 
b2
 = (!
	`boﬁ
(
y
 & 0x0F0F0F0F)) * 4;

157 
b1
 = (!
	`boﬁ
(
y
 & 0x33333333)) * 2;

158 
b0
 = (!
	`boﬁ
(
y
 & 0x55555555)) * 1;

159  
bz
 + 
b4
 + 
b3
 + 
b2
 + 
b1
 + 
b0
;

160 
	}
}

167 
	#u
 99

	)

168 
	$¡z8
(
x
)

170 
èbÀ
[64] =

171 {32, 0, 1,12, 2, 6, 
u
,13, 3, u, 7, u, u, u, u,14,

172 10, 4, 
u
, u, 8, u, u,25, u, u, u, u, u,21,27,15,

173 31,11, 5, 
u
, u, u, u, u, 9, u, u,24, u, u,20,26,

174 30, 
u
, u, u, u,23, u,19, 29, u,22,18,28,17,16, u};

176 
x
 = (x & -x)*0x0450FBAF;

177  
èbÀ
[
x
 >> 26];

178 
	}
}

183 
	$¡z8a
(
x
)

185 
èbÀ
[64] =

186 {32, 0, 1,12, 2, 6, 
u
,13, 3, u, 7, u, u, u, u,14,

187 10, 4, 
u
, u, 8, u, u,25, u, u, u, u, u,21,27,15,

188 31,11, 5, 
u
, u, u, u, u, 9, u, u,24, u, u,20,26,

189 30, 
u
, u, u, u,23, u,19, 29, u,22,18,28,17,16, u};

191 
x
 = (x & -x);

192 
x
 = (x << 4) + x;

193 
x
 = (x << 6) + x;

194 
x
 = (x << 16) - x;

195  
èbÀ
[
x
 >> 26];

196 
	}
}

201 
	$¡z9
(
x
) {

203 
èbÀ
[37] = {32, 0, 1, 26, 2, 23, 27,

204 
u
, 3, 16, 24, 30, 28, 11, u, 13, 4,

205 7, 17, 
u
, 25, 22, 31, 15, 29, 10, 12,

206 6, 
u
, 21, 14, 9, 5, 20, 8, 19, 18};

208 
x
 = (x & -x)%37;

209  
èbÀ
[
x
];

210 
	}
}

218 
	$¡z10
(
x
) {

220 
èbÀ
[32] =

224 i‡(
x
 == 0)  32;

225 
x
 = (x & -x)*0x04D7651F;

226  
èbÀ
[
x
 >> 27];

227 
	}
}

231 
	#SLOW_MUL


	)

232 
	$¡z11
 (
n
) {

234 
èb
[32] =

240 
k
;

241 
n
 =Ç & (-n);

242 
	`¥ötf
("¿%d\n", 
n
);

243 #i‡
	`deföed
(
SLOW_MUL
)

244 
k
 = (
n
 << 11) -Ç;

245 
k
 = (k << 2) + k;

246 
k
 = (k << 8Ë+ 
n
;

247 
k
 = (k << 5) - k;

249 
k
 = 
n
 * 0x4d7651f;

251  
n
 ? 
èb
[
k
>>27] : 32;

252 
	}
}

254 
	gîr‹s
;

255 
	$îr‹
(
x
, 
y
) {

256 
îr‹s
 =Érrors + 1;

257 
	`¥ötf
("Eº‹ f‹ x = %08x, gŸ %d\n", 
x
, 
y
);

258 
	}
}

262 
	$maö
()

264 #ifde‡
NDEBUG


266 
i
, 
m
, 
n
;

267 
ã°
[] = {0,32, 1,0, 2,1, 3,0, 4,2, 5,0, 6,1, 7,0,

276 
°d
::
size_t
 c⁄° 
Cou¡
 = 1000;

278 
n
 = (
ã°
)/4;

280 
°d
::
˛ock_t
 
Time°ampBeg
 = 0;

281 
°d
::
˛ock_t
 
Time°ampEnd
 = 0;

283 
Time°ampBeg
 = 
°d
::
	`˛ock
();

284 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

285 
i
 = 0; i < 
n
; i += 2) {

286 i‡(
	`¡z1
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çtz1(test[i]));}

287 
Time°ampEnd
 = 
°d
::
	`˛ock
();

289 
	`¥ötf
("¡z1: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

291 
Time°ampBeg
 = 
°d
::
	`˛ock
();

292 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

293 
i
 = 0; i < 
n
; i += 2) {

294 i‡(
	`¡z2
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çtz2(test[i]));}

295 
Time°ampEnd
 = 
°d
::
	`˛ock
();

297 
	`¥ötf
("¡z2: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

299 
Time°ampBeg
 = 
°d
::
	`˛ock
();

300 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

301 
i
 = 0; i < 
n
; i += 2) {

302 i‡(
	`¡z3
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çtz3(test[i]));}

303 
Time°ampEnd
 = 
°d
::
	`˛ock
();

305 
	`¥ötf
("¡z3: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

307 
Time°ampBeg
 = 
°d
::
	`˛ock
();

308 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

309 
i
 = 0; i < 
n
; i += 2) {

310 i‡(
	`¡z4
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çtz4(test[i]));}

311 
Time°ampEnd
 = 
°d
::
	`˛ock
();

313 
	`¥ötf
("¡z4: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

315 
Time°ampBeg
 = 
°d
::
	`˛ock
();

316 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

317 
i
 = 0; i < 
n
; i += 2) {

318 i‡(
	`¡z4a
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çtz4a(test[i]));}

319 
Time°ampEnd
 = 
°d
::
	`˛ock
();

321 
	`¥ötf
("¡z4a: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

323 
Time°ampBeg
 = 
°d
::
	`˛ock
();

324 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

325 
i
 = 0; i < 
n
; i += 2) {

326 
m
 = 
ã°
[
i
+1]; if (m > 8) m = 8;

327 i‡(
	`¡z5
(
ã°
[
i
]Ë!
m
Ë
	`îr‹
(test[i],Çtz5(test[i]));}

328 
Time°ampEnd
 = 
°d
::
	`˛ock
();

330 
	`¥ötf
("¡z5: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

332 
Time°ampBeg
 = 
°d
::
	`˛ock
();

333 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

334 
i
 = 0; i < 
n
; i += 2) {

335 i‡(
	`¡z6
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çtz6(test[i]));}

336 
Time°ampEnd
 = 
°d
::
	`˛ock
();

338 
	`¥ötf
("¡z6: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

340 
Time°ampBeg
 = 
°d
::
	`˛ock
();

341 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

342 
i
 = 0; i < 
n
; i += 2) {

343 i‡(
	`¡z6a
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çtz6a(test[i]));}

344 
Time°ampEnd
 = 
°d
::
	`˛ock
();

346 
	`¥ötf
("¡z6a: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

348 
Time°ampBeg
 = 
°d
::
	`˛ock
();

349 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

350 
i
 = 0; i < 
n
; i += 2) {

351 i‡(
	`¡z7
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çtz7(test[i]));}

352 
Time°ampEnd
 = 
°d
::
	`˛ock
();

354 
	`¥ötf
("¡z7: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

356 
Time°ampBeg
 = 
°d
::
	`˛ock
();

357 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

358 
i
 = 0; i < 
n
; i += 2) {

359 i‡(
	`¡z7_chri°›he
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
—e°[i], 
	`¡z7
(test[i]));}

360 
Time°ampEnd
 = 
°d
::
	`˛ock
();

362 
	`¥ötf
("¡z7_chri°›he: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

364 
Time°ampBeg
 = 
°d
::
	`˛ock
();

365 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

366 
i
 = 0; i < 
n
; i += 2) {

367 i‡(
	`¡z8
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çtz8(test[i]));}

368 
Time°ampEnd
 = 
°d
::
	`˛ock
();

370 
	`¥ötf
("¡z8: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

372 
Time°ampBeg
 = 
°d
::
	`˛ock
();

373 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

374 
i
 = 0; i < 
n
; i += 2) {

375 i‡(
	`¡z8a
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çtz8a(test[i]));}

376 
Time°ampEnd
 = 
°d
::
	`˛ock
();

378 
	`¥ötf
("¡z8a: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

380 
Time°ampBeg
 = 
°d
::
	`˛ock
();

381 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

382 
i
 = 0; i < 
n
; i += 2) {

383 i‡(
	`¡z9
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çtz9(test[i]));}

384 
Time°ampEnd
 = 
°d
::
	`˛ock
();

386 
	`¥ötf
("¡z9: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

388 
Time°ampBeg
 = 
°d
::
	`˛ock
();

389 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

390 
i
 = 0; i < 
n
; i += 2) {

391 i‡(
	`¡z10
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çtz10(test[i]));}

392 
Time°ampEnd
 = 
°d
::
	`˛ock
();

394 
	`¥ötf
("¡z10: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

396 i‡(
îr‹s
 == 0)

397 
	`¥ötf
("Pas£dáŒ %d ca£s.\n", (
ã°
)/8);

400 
	}
}

	@glm/test/core/core_func_integer_find_msb.cpp

5 
	~<c°dio
>

6 
	~<c°dlib
>

7 
	~<˘ime
>

9 
	#LE
 1

10 

	)

11 
	$p›
(
x
) {

12 
x
 = x - ((x >> 1) & 0x55555555);

13 
x
 = (x & 0x33333333) + ((x >> 2) & 0x33333333);

14 
x
 = (x + (x >> 4)) & 0x0F0F0F0F;

15 
x
 = x + (x << 8);

16 
x
 = x + (x << 16);

17  
x
 >> 24;

18 
	}
}

20 
	$∆z1
(
x
) {

21 
n
;

23 i‡(
x
 == 0) (32);

24 
n
 = 0;

25 i‡(
x
 <0x0000FFFFË{
n
 =Ç +16; x = x <<16;}

26 i‡(
x
 <0x00FFFFFFË{
n
 =Ç + 8; x = x << 8;}

27 i‡(
x
 <0x0FFFFFFFË{
n
 =Ç + 4; x = x << 4;}

28 i‡(
x
 <0x3FFFFFFFË{
n
 =Ç + 2; x = x << 2;}

29 i‡(
x
 <0x7FFFFFFFË{
n
 =Ç + 1;}

30  
n
;

31 
	}
}

33 
	$∆z1a
(
x
) {

34 
n
;

37 i‡(()
x
 <= 0)  (~x >> 26) & 32;

38 
n
 = 1;

39 i‡((
x
 >> 16Ë=0Ë{
n
 =Ç +16; x = x <<16;}

40 i‡((
x
 >> 24Ë=0Ë{
n
 =Ç + 8; x = x << 8;}

41 i‡((
x
 >> 28Ë=0Ë{
n
 =Ç + 4; x = x << 4;}

42 i‡((
x
 >> 30Ë=0Ë{
n
 =Ç + 2; x = x << 2;}

43 
n
 =Ç - (
x
 >> 31);

44  
n
;

45 
	}
}

48 
	$∆z2
(
x
) {

49 
y
;

50 
n
;

52 
n
 = 32;

53 
y
 = 
x
 >>16; i‡(y !0Ë{
n
 =Ç -16; x = y;}

54 
y
 = 
x
 >> 8; i‡(y !0Ë{
n
 =Ç - 8; x = y;}

55 
y
 = 
x
 >> 4; i‡(y !0Ë{
n
 =Ç - 4; x = y;}

56 
y
 = 
x
 >> 2; i‡(y !0Ë{
n
 =Ç - 2; x = y;}

57 
y
 = 
x
 >> 1; i‡(y !0Ë 
n
 - 2;

58  
n
 - 
x
;

59 
	}
}

63 
	$∆z2a
(
x
) {

64 
y
;

65 
n
, 
c
;

67 
n
 = 32;

68 
c
 = 16;

70 
y
 = 
x
 >> 
c
; i‡(y !0Ë{
n
 =Ç - c; x = y;}

71 
c
 = c >> 1;

72 } 
c
 != 0);

73  
n
 - 
x
;

74 
	}
}

76 
	$∆z3
(
x
) {

77 
y
, 
n
;

79 
n
 = 0;

80 
y
 = 
x
;

81 
L
: i‡(
x
 < 0Ë 
n
;

82 i‡(
y
 =0Ë 32 - 
n
;

83 
n
 =Ç + 1;

84 
x
 = x << 1;

85 
y
 = y >> 1;

86 
L
;

87 
	}
}

89 
	$∆z4
(
x
) {

90 
y
, 
m
, 
n
;

92 
y
 = -(
x
 >> 16);

93 
m
 = (
y
 >> 16) & 16;

94 
n
 = 16 - 
m
;

95 
x
 = x >> 
m
;

97 
y
 = 
x
 - 0x100;

98 
m
 = (
y
 >> 16) & 8;

99 
n
 =Ç + 
m
;

100 
x
 = x << 
m
;

102 
y
 = 
x
 - 0x1000;

103 
m
 = (
y
 >> 16) & 4;

104 
n
 =Ç + 
m
;

105 
x
 = x << 
m
;

107 
y
 = 
x
 - 0x4000;

108 
m
 = (
y
 >> 16) & 2;

109 
n
 =Ç + 
m
;

110 
x
 = x << 
m
;

112 
y
 = 
x
 >> 14;

113 
m
 = 
y
 & ~(y >> 1);

114  
n
 + 2 - 
m
;

115 
	}
}

117 
	$∆z5
(
x
) {

118 
	`p›
(
x
);

120 
x
 = x | (x >> 1);

121 
x
 = x | (x >> 2);

122 
x
 = x | (x >> 4);

123 
x
 = x | (x >> 8);

124 
x
 = x | (x >>16);

125  
	`p›
(~
x
);

126 
	}
}

144 
	$∆z6
(
k
) {

146 
asI¡
[2];

147 
asDoubÀ
;

149 
n
;

151 
asDoubÀ
 = ()
k
 + 0.5;

152 
n
 = 1054 - (
asI¡
[
LE
] >> 20);

153  
n
;

154 
	}
}

156 
	$∆z7
(
k
) {

158 
asI¡
[2];

159 
asDoubÀ
;

161 
n
;

163 
asDoubÀ
 = ()
k
;

164 
n
 = 1054 - (
asI¡
[
LE
] >> 20);

165 
n
 = (n & 31) + (n >> 9);

166  
n
;

167 
	}
}

178 
	$∆z8
(
k
) {

180 
asI¡
;

181 
asFlﬂt
;

183 
n
;

185 
k
 = k & ~(k >> 1);

186 
asFlﬂt
 = ()
k
 + 0.5f;

187 
n
 = 158 - (
asI¡
 >> 23);

188  
n
;

189 
	}
}

199 
	$∆z9
(
k
) {

201 
asI¡
;

202 
asFlﬂt
;

204 
n
;

206 
k
 = k & ~(k >> 1);

207 
asFlﬂt
 = ()
k
;

208 
n
 = 158 - (
asI¡
 >> 23);

209 
n
 = (n & 31) + (n >> 6);

210  
n
;

211 
	}
}

231 
	#u
 99

	)

232 
	$∆z10
(
x
) {

234 
èbÀ
[64] =

235 {32,31, 
u
,16, u,30, 3, u, 15, u, u, u,29,10, 2, u,

236 
u
, u,12,14,21, u,19, u, u,28, u,25, u, 9, 1, u,

237 17, 
u
, 4, u, u, u,11, u, 13,22,20, u,26, u, u,18,

238 5, 
u
, u,23, u,27, u, 6, u,24, 7, u, 8, u, 0, u};

240 
x
 = x | (x >> 1);

241 
x
 = x | (x >> 2);

242 
x
 = x | (x >> 4);

243 
x
 = x | (x >> 8);

244 
x
 = x | (x >>16);

245 
x
 = x*0x06EB14F9;

246  
èbÀ
[
x
 >> 26];

247 
	}
}

252 
	$∆z10a
(
x
) {

254 
èbÀ
[64] =

255 {32,31, 
u
,16, u,30, 3, u, 15, u, u, u,29,10, 2, u,

256 
u
, u,12,14,21, u,19, u, u,28, u,25, u, 9, 1, u,

257 17, 
u
, 4, u, u, u,11, u, 13,22,20, u,26, u, u,18,

258 5, 
u
, u,23, u,27, u, 6, u,24, 7, u, 8, u, 0, u};

260 
x
 = x | (x >> 1);

261 
x
 = x | (x >> 2);

262 
x
 = x | (x >> 4);

263 
x
 = x | (x >> 8);

264 
x
 = x | (x >> 16);

265 
x
 = (x << 3) - x;

266 
x
 = (x << 8) - x;

267 
x
 = (x << 8) - x;

268 
x
 = (x << 8) - x;

269  
èbÀ
[
x
 >> 26];

270 
	}
}

276 
	$∆z10b
(
x
) {

278 
èbÀ
[64] =

279 {32,20,19, 
u
, u,18, u, 7, 10,17, u, u,14, u, 6, u,

280 
u
, 9, u,16, u, u, 1,26, u,13, u, u,24, 5, u, u,

281 
u
,21, u, 8,11, u,15, u, u, u, u, 2,27, 0,25, u,

282 22, 
u
,12, u, u, 3,28, u, 23, u, 4,29, u, u,30,31};

284 
x
 = x | (x >> 1);

285 
x
 = x | (x >> 2);

286 
x
 = x | (x >> 4);

287 
x
 = x | (x >> 8);

288 
x
 = x & ~(x >> 16);

289 
x
 = x*0xFD7049FF;

293  
èbÀ
[
x
 >> 26];

294 
	}
}

296 
	gîr‹s
;

297 
	$îr‹
(
x
, 
y
) {

298 
îr‹s
 =Érrors + 1;

299 
	`¥ötf
("Eº‹ f‹ x = %08x, gŸ %d\n", 
x
, 
y
);

300 
	}
}

302 
	$maö
()

304 #ifde‡
NDEBUG


306 
i
, 
n
;

307 
ã°
[] = {0,32, 1,31, 2,30, 3,30, 4,29, 5,29, 6,29,

315 
°d
::
size_t
 c⁄° 
Cou¡
 = 1000;

317 
n
 = (
ã°
)/4;

319 
°d
::
˛ock_t
 
Time°ampBeg
 = 0;

320 
°d
::
˛ock_t
 
Time°ampEnd
 = 0;

322 
Time°ampBeg
 = 
°d
::
	`˛ock
();

323 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

324 
i
 = 0; i < 
n
; i += 2) {

325 i‡(
	`∆z1
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz1(test[i]));}

326 
Time°ampEnd
 = 
°d
::
	`˛ock
();

328 
	`¥ötf
("∆z1: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

330 
Time°ampBeg
 = 
°d
::
	`˛ock
();

331 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

332 
i
 = 0; i < 
n
; i += 2) {

333 i‡(
	`∆z1a
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz1a(test[i]));}

334 
Time°ampEnd
 = 
°d
::
	`˛ock
();

336 
	`¥ötf
("∆z1a: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

338 
Time°ampBeg
 = 
°d
::
	`˛ock
();

339 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

340 
i
 = 0; i < 
n
; i += 2) {

341 i‡(
	`∆z2
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz2(test[i]));}

342 
Time°ampEnd
 = 
°d
::
	`˛ock
();

344 
	`¥ötf
("∆z2: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

346 
Time°ampBeg
 = 
°d
::
	`˛ock
();

347 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

348 
i
 = 0; i < 
n
; i += 2) {

349 i‡(
	`∆z2a
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz2a(test[i]));}

350 
Time°ampEnd
 = 
°d
::
	`˛ock
();

352 
	`¥ötf
("∆z2a: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

354 
Time°ampBeg
 = 
°d
::
	`˛ock
();

355 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

356 
i
 = 0; i < 
n
; i += 2) {

357 i‡(
	`∆z3
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz3(test[i]));}

358 
Time°ampEnd
 = 
°d
::
	`˛ock
();

360 
	`¥ötf
("∆z3: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

362 
Time°ampBeg
 = 
°d
::
	`˛ock
();

363 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

364 
i
 = 0; i < 
n
; i += 2) {

365 i‡(
	`∆z4
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz4(test[i]));}

366 
Time°ampEnd
 = 
°d
::
	`˛ock
();

368 
	`¥ötf
("∆z4: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

370 
Time°ampBeg
 = 
°d
::
	`˛ock
();

371 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

372 
i
 = 0; i < 
n
; i += 2) {

373 i‡(
	`∆z5
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz5(test[i]));}

374 
Time°ampEnd
 = 
°d
::
	`˛ock
();

376 
	`¥ötf
("∆z5: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

378 
Time°ampBeg
 = 
°d
::
	`˛ock
();

379 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

380 
i
 = 0; i < 
n
; i += 2) {

381 i‡(
	`∆z6
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz6(test[i]));}

382 
Time°ampEnd
 = 
°d
::
	`˛ock
();

384 
	`¥ötf
("∆z6: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

386 
Time°ampBeg
 = 
°d
::
	`˛ock
();

387 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

388 
i
 = 0; i < 
n
; i += 2) {

389 i‡(
	`∆z7
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz7(test[i]));}

390 
Time°ampEnd
 = 
°d
::
	`˛ock
();

392 
	`¥ötf
("∆z7: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

394 
Time°ampBeg
 = 
°d
::
	`˛ock
();

395 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

396 
i
 = 0; i < 
n
; i += 2) {

397 i‡(
	`∆z8
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz8(test[i]));}

398 
Time°ampEnd
 = 
°d
::
	`˛ock
();

400 
	`¥ötf
("∆z8: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

402 
Time°ampBeg
 = 
°d
::
	`˛ock
();

403 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

404 
i
 = 0; i < 
n
; i += 2) {

405 i‡(
	`∆z9
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz9(test[i]));}

406 
Time°ampEnd
 = 
°d
::
	`˛ock
();

408 
	`¥ötf
("∆z9: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

410 
Time°ampBeg
 = 
°d
::
	`˛ock
();

411 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

412 
i
 = 0; i < 
n
; i += 2) {

413 i‡(
	`∆z10
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz10(test[i]));}

414 
Time°ampEnd
 = 
°d
::
	`˛ock
();

416 
	`¥ötf
("∆z10: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

418 
Time°ampBeg
 = 
°d
::
	`˛ock
();

419 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

420 
i
 = 0; i < 
n
; i += 2) {

421 i‡(
	`∆z10a
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz10a(test[i]));}

422 
Time°ampEnd
 = 
°d
::
	`˛ock
();

424 
	`¥ötf
("∆z10a: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

426 
Time°ampBeg
 = 
°d
::
	`˛ock
();

427 
°d
::
size_t
 
k
 = 0; k < 
Cou¡
; ++k)

428 
i
 = 0; i < 
n
; i += 2) {

429 i‡(
	`∆z10b
(
ã°
[
i
]Ë!ã°[i+1]Ë
	`îr‹
(test[i],Çlz10b(test[i]));}

430 
Time°ampEnd
 = 
°d
::
	`˛ock
();

432 
	`¥ötf
("∆z10b: %d clocks\n", 
Time°ampEnd
 - 
Time°ampBeg
);

434 i‡(
îr‹s
 == 0)

435 
	`¥ötf
("Pas£dáŒ %d ca£s.\n", (
ã°
)/8);

438 
	}
}

	@glm/test/core/core_func_matrix.cpp

1 
	~<glm/m©rix.hµ
>

2 
	~<glm/gtc/m©rix_å™sf‹m.hµ
>

3 
	~<glm/gtc/uÕ.hµ
>

4 
	~<glm/gtc/ïsû⁄.hµ
>

5 
	~<ve˘‹
>

6 
	~<˘ime
>

7 
	~<c°dio
>

9 
usög
 
«me•a˚
 
	gglm
;

11 
	$ã°_m©rixCompMu…
()

13 
	`Eº‹
(0);

16 
m©2
 
	`m
(0, 1, 2, 3);

17 
m©2
 
n
 = 
	`m©rixCompMu…
(
m
, m);

18 
Eº‹
 +
n
 =
	`m©2
(0, 1, 4, 9) ? 0 : 1;

22 
m©2x3
 
	`m
(0, 1, 2, 3, 4, 5);

23 
m©2x3
 
n
 = 
	`m©rixCompMu…
(
m
, m);

24 
Eº‹
 +
n
 =
	`m©2x3
(0, 1, 4, 9, 16, 25) ? 0 : 1;

28 
m©2x4
 
	`m
(0, 1, 2, 3, 4, 5, 6, 7);

29 
m©2x4
 
n
 = 
	`m©rixCompMu…
(
m
, m);

30 
Eº‹
 +
n
 =
	`m©2x4
(0, 1, 4, 9, 16, 25, 36, 49) ? 0 : 1;

34 
m©3
 
	`m
(0, 1, 2, 3, 4, 5, 6, 7, 8);

35 
m©3
 
n
 = 
	`m©rixCompMu…
(
m
, m);

36 
Eº‹
 +
n
 =
	`m©3
(0, 1, 4, 9, 16, 25, 36, 49, 64) ? 0 : 1;

40 
m©3x2
 
	`m
(0, 1, 2, 3, 4, 5);

41 
m©3x2
 
n
 = 
	`m©rixCompMu…
(
m
, m);

42 
Eº‹
 +
n
 =
	`m©3x2
(0, 1, 4, 9, 16, 25) ? 0 : 1;

46 
m©3x4
 
	`m
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);

47 
m©3x4
 
n
 = 
	`m©rixCompMu…
(
m
, m);

48 
Eº‹
 +
n
 =
	`m©3x4
(0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121) ? 0 : 1;

52 
m©4
 
	`m
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);

53 
m©4
 
n
 = 
	`m©rixCompMu…
(
m
, m);

54 
Eº‹
 +
n
 =
	`m©4
(0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225) ? 0 : 1;

58 
m©4x2
 
	`m
(0, 1, 2, 3, 4, 5, 6, 7);

59 
m©4x2
 
n
 = 
	`m©rixCompMu…
(
m
, m);

60 
Eº‹
 +
n
 =
	`m©4x2
(0, 1, 4, 9, 16, 25, 36, 49) ? 0 : 1;

64 
m©4x3
 
	`m
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);

65 
m©4x3
 
n
 = 
	`m©rixCompMu…
(
m
, m);

66 
Eº‹
 +
n
 =
	`m©4x3
(0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121) ? 0 : 1;

69  
Eº‹
;

70 
	}
}

72 
	$ã°_ouãrProdu˘
()

74 { 
glm
::
m©2
 
m
 = glm::
	`ouãrProdu˘
(glm::
	`vec2
(1.0f), glm::vec2(1.0f)); }

75 { 
glm
::
m©3
 
m
 = glm::
	`ouãrProdu˘
(glm::
	`vec3
(1.0f), glm::vec3(1.0f)); }

76 { 
glm
::
m©4
 
m
 = glm::
	`ouãrProdu˘
(glm::
	`vec4
(1.0f), glm::vec4(1.0f)); }

78 { 
glm
::
m©2x3
 
m
 = glm::
	`ouãrProdu˘
(glm::
	`vec3
(1.0f), glm::
	`vec2
(1.0f)); }

79 { 
glm
::
m©2x4
 
m
 = glm::
	`ouãrProdu˘
(glm::
	`vec4
(1.0f), glm::
	`vec2
(1.0f)); }

81 { 
glm
::
m©3x2
 
m
 = glm::
	`ouãrProdu˘
(glm::
	`vec2
(1.0f), glm::
	`vec3
(1.0f)); }

82 { 
glm
::
m©3x4
 
m
 = glm::
	`ouãrProdu˘
(glm::
	`vec4
(1.0f), glm::
	`vec3
(1.0f)); }

84 { 
glm
::
m©4x2
 
m
 = glm::
	`ouãrProdu˘
(glm::
	`vec2
(1.0f), glm::
	`vec4
(1.0f)); }

85 { 
glm
::
m©4x3
 
m
 = glm::
	`ouãrProdu˘
(glm::
	`vec3
(1.0f), glm::
	`vec4
(1.0f)); }

88 
	}
}

90 
	$ã°_å™•o£
()

92 
	`Eº‹
(0);

95 
m©2
 
	`m
(0, 1, 2, 3);

96 
m©2
 
t
 = 
	`å™•o£
(
m
);

97 
Eº‹
 +
t
 =
	`m©2
(0, 2, 1, 3) ? 0 : 1;

101 
m©2x3
 
	`m
(0, 1, 2, 3, 4, 5);

102 
m©3x2
 
t
 = 
	`å™•o£
(
m
);

103 
Eº‹
 +
t
 =
	`m©3x2
(0, 3, 1, 4, 2, 5) ? 0 : 1;

107 
m©2x4
 
	`m
(0, 1, 2, 3, 4, 5, 6, 7);

108 
m©4x2
 
t
 = 
	`å™•o£
(
m
);

109 
Eº‹
 +
t
 =
	`m©4x2
(0, 4, 1, 5, 2, 6, 3, 7) ? 0 : 1;

113 
m©3
 
	`m
(0, 1, 2, 3, 4, 5, 6, 7, 8);

114 
m©3
 
t
 = 
	`å™•o£
(
m
);

115 
Eº‹
 +
t
 =
	`m©3
(0, 3, 6, 1, 4, 7, 2, 5, 8) ? 0 : 1;

119 
m©3x2
 
	`m
(0, 1, 2, 3, 4, 5);

120 
m©2x3
 
t
 = 
	`å™•o£
(
m
);

121 
Eº‹
 +
t
 =
	`m©2x3
(0, 2, 4, 1, 3, 5) ? 0 : 1;

125 
m©3x4
 
	`m
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);

126 
m©4x3
 
t
 = 
	`å™•o£
(
m
);

127 
Eº‹
 +
t
 =
	`m©4x3
(0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11) ? 0 : 1;

131 
m©4
 
	`m
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);

132 
m©4
 
t
 = 
	`å™•o£
(
m
);

133 
Eº‹
 +
t
 =
	`m©4
(0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15) ? 0 : 1;

137 
m©4x2
 
	`m
(0, 1, 2, 3, 4, 5, 6, 7);

138 
m©2x4
 
t
 = 
	`å™•o£
(
m
);

139 
Eº‹
 +
t
 =
	`m©2x4
(0, 2, 4, 6, 1, 3, 5, 7) ? 0 : 1;

143 
m©4x3
 
	`m
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);

144 
m©3x4
 
t
 = 
	`å™•o£
(
m
);

145 
Eº‹
 +
t
 =
	`m©3x4
(0, 3, 6, 9, 1, 4, 7, 10, 2, 5, 8, 11) ? 0 : 1;

148  
Eº‹
;

149 
	}
}

151 
	$ã°_dëîmö™t
()

156 
	}
}

158 
	$ã°_övî£
()

160 
	`Faûed
(0);

162 
glm
::
m©4x4
 
	`A4x4
(

163 
glm
::
	`vec4
(1, 0, 1, 0),

164 
glm
::
	`vec4
(0, 1, 0, 0),

165 
glm
::
	`vec4
(0, 0, 1, 0),

166 
glm
::
	`vec4
(0, 0, 0, 1));

167 
glm
::
m©4x4
 
B4x4
 = 
	`övî£
(
A4x4
);

168 
glm
::
m©4x4
 
I4x4
 = 
A4x4
 * 
B4x4
;

169 
Faûed
 +
I4x4
 =
glm
::
	`m©4x4
(1) ? 0 : 1;

171 
glm
::
m©3x3
 
	`A3x3
(

172 
glm
::
	`vec3
(1, 0, 1),

173 
glm
::
	`vec3
(0, 1, 0),

174 
glm
::
	`vec3
(0, 0, 1));

175 
glm
::
m©3x3
 
B3x3
 = glm::
	`övî£
(
A3x3
);

176 
glm
::
m©3x3
 
I3x3
 = 
A3x3
 * 
B3x3
;

177 
Faûed
 +
I3x3
 =
glm
::
	`m©3x3
(1) ? 0 : 1;

179 
glm
::
m©2x2
 
	`A2x2
(

180 
glm
::
	`vec2
(1, 1),

181 
glm
::
	`vec2
(0, 1));

182 
glm
::
m©2x2
 
B2x2
 = glm::
	`övî£
(
A2x2
);

183 
glm
::
m©2x2
 
I2x2
 = 
A2x2
 * 
B2x2
;

184 
Faûed
 +
I2x2
 =
glm
::
	`m©2x2
(1) ? 0 : 1;

186  
Faûed
;

187 
	}
}

189 
	$ã°_övî£_simd
()

191 
Eº‹
 = 0;

193 
glm
::
m©4x4
 c⁄° 
	`Idítôy
(1);

195 
glm
::
m©4x4
 c⁄° 
	`A4x4
(

196 
glm
::
	`vec4
(1, 0, 1, 0),

197 
glm
::
	`vec4
(0, 1, 0, 0),

198 
glm
::
	`vec4
(0, 0, 1, 0),

199 
glm
::
	`vec4
(0, 0, 0, 1));

200 
glm
::
m©4x4
 c⁄° 
B4x4
 = glm::
	`övî£
(
A4x4
);

201 
glm
::
m©4x4
 c⁄° 
I4x4
 = 
A4x4
 * 
B4x4
;

203 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
I4x4
[0], 
Idítôy
[0], 0.001f)) ? 0 : 1;

204 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
I4x4
[1], 
Idítôy
[1], 0.001f)) ? 0 : 1;

205 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
I4x4
[2], 
Idítôy
[2], 0.001f)) ? 0 : 1;

206 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
I4x4
[3], 
Idítôy
[3], 0.001f)) ? 0 : 1;

208  
Eº‹
;

209 
	}
}

211 
	gãm∂©e
 <
ty≥«me
 
	gVEC3
,Åy≥«mê
	gMAT4
>

212 
	$ã°_övî£_≥rf
(
°d
::
size_t
 
Cou¡
, std::size_à
In°™˚
, c⁄° * 
Mesßge
)

214 
°d
::
ve˘‹
<
MAT4
> 
Te°I≈uts
;

215 
Te°I≈uts
.
	`ªsize
(
Cou¡
);

216 
°d
::
ve˘‹
<
MAT4
> 
Te°Ouçuts
;

217 
Te°Ouçuts
.
	`ªsize
(
Te°I≈uts
.
	`size
());

219 
VEC3
 
	`Axis
(
glm
::
	`n‹mÆize
(
	`VEC3
(1.0f, 2.0f, 3.0f)));

221 
°d
::
size_t
 
i
 = 0; i < 
Te°I≈uts
.
	`size
(); ++i)

223 
ty≥«me
 
MAT4
::
vÆue_ty≥
 
f
 = 
°©ic_ˇ°
<ty≥«mêMAT4::vÆue_ty≥>(
i
 + 
In°™˚
Ë*Åy≥«mêMAT4::
	`vÆue_ty≥
(0.1) +Åypename MAT4::value_type(0.1);

224 
Te°I≈uts
[
i
] = 
glm
::
	`rŸ©e
(glm::
	`å™¶©e
(
	`MAT4
(1), 
Axis
 * 
f
), f, Axis);

228 
°d
::
˛ock_t
 
SèπTime
 = std::
	`˛ock
();

230 
°d
::
size_t
 
i
 = 0; i < 
Te°I≈uts
.
	`size
(); ++i)

231 
Te°Ouçuts
[
i
] = 
glm
::
	`övî£
(
Te°I≈uts
[i]);

233 
°d
::
˛ock_t
 
EndTime
 = std::
	`˛ock
();

235 
°d
::
size_t
 
i
 = 0; i < 
Te°I≈uts
.
	`size
(); ++i)

236 
Te°Ouçuts
[
i
] = Te°Ouçuts[i] * 
Te°I≈uts
[i];

238 
ty≥«me
 
MAT4
::
vÆue_ty≥
 
	`Diff
(0);

239 
°d
::
size_t
 
E¡ry
 = 0; E¡ry < 
Te°Ouçuts
.
	`size
(); ++Entry)

241 
MAT4
 
	`i
(1.0);

242 
MAT4
 
	`m
(
Te°Ouçuts
[
E¡ry
]);

243 
glm
::
Àngth_t
 
y
 = 0; y < 
m
.
	`Àngth
(); ++y)

244 
glm
::
Àngth_t
 
x
 = 0; x < 
m
[
y
].
	`Àngth
(); ++x)

245 
Diff
 = 
glm
::
	`max
(
m
[
y
][
x
], 
i
[y][x]);

251 
	`¥ötf
("övî£<%s>(%f): %lu\n", 
Mesßge
, 
Diff
, 
EndTime
 - 
SèπTime
);

254 
	}
}

256 
	$maö
()

258 
	`Eº‹
(0);

259 
Eº‹
 +
	`ã°_m©rixCompMu…
();

260 
Eº‹
 +
	`ã°_ouãrProdu˘
();

261 
Eº‹
 +
	`ã°_å™•o£
();

262 
Eº‹
 +
	`ã°_dëîmö™t
();

263 
Eº‹
 +
	`ã°_övî£
();

264 
Eº‹
 +
	`ã°_övî£_simd
();

266 #ifde‡
NDEBUG


267 
°d
::
size_t
 c⁄° 
	`Sam∂es
(1000);

268 
°d
::
size_t
 
i
 = 0; i < 1; ++i)

270 
Eº‹
 +
ã°_övî£_≥rf
<
glm
::
vec3
, glm::
m©4
>(
Sam∂es
, 
i
, "mat4");

271 
Eº‹
 +
ã°_övî£_≥rf
<
glm
::
dvec3
, glm::
dm©4
>(
Sam∂es
, 
i
, "dmat4");

275  
Eº‹
;

276 
	}
}

	@glm/test/core/core_func_noise.cpp

1 
	svec4


3 
Àngth
();

6 
	gvec4
::
	$Àngth
()

9 
	}
}

11 
	$maö
()

13 
Faûed
 = 0;

15 
vec4
 
V
;

17 
LígthA
 = 
V
.
	`Àngth
();

18 
LígthB
 = 
vec4
::
	`Àngth
();

20  
Faûed
;

21 
	}
}

	@glm/test/core/core_func_packing.cpp

1 
	~<glm/gtc/ty≥_¥ecisi⁄.hµ
>

2 
	~<glm/gtc/ïsû⁄.hµ
>

3 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

4 
	~<glm/∑ckög.hµ
>

5 
	~<ve˘‹
>

7 
	$ã°_∑ckUn‹m2x16
()

9 
Eº‹
 = 0;

11 
°d
::
ve˘‹
<
glm
::
vec2
> 
A
;

12 
A
.
	`push_back
(
glm
::
	`vec2
(1.0f, 0.0f));

13 
A
.
	`push_back
(
glm
::
	`vec2
(0.5f, 0.7f));

14 
A
.
	`push_back
(
glm
::
	`vec2
(0.1f, 0.2f));

16 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

18 
glm
::
vec2
 
	`B
(
A
[
i
]);

19 
glm
::
uöt32
 
C
 = glm::
	`∑ckUn‹m2x16
(
B
);

20 
glm
::
vec2
 
D
 = glm::
	`u≈ackUn‹m2x16
(
C
);

21 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 65535.f)) ? 0 : 1;

22 
	`as£π
(!
Eº‹
);

25  
Eº‹
;

26 
	}
}

28 
	$ã°_∑ckSn‹m2x16
()

30 
Eº‹
 = 0;

32 
°d
::
ve˘‹
<
glm
::
vec2
> 
A
;

33 
A
.
	`push_back
(
glm
::
	`vec2
( 1.0f, 0.0f));

34 
A
.
	`push_back
(
glm
::
	`vec2
(-0.5f,-0.7f));

35 
A
.
	`push_back
(
glm
::
	`vec2
(-0.1f, 0.1f));

37 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

39 
glm
::
vec2
 
	`B
(
A
[
i
]);

40 
glm
::
uöt32
 
C
 = glm::
	`∑ckSn‹m2x16
(
B
);

41 
glm
::
vec2
 
D
 = glm::
	`u≈ackSn‹m2x16
(
C
);

42 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 32767.0f * 2.0f)) ? 0 : 1;

43 
	`as£π
(!
Eº‹
);

46  
Eº‹
;

47 
	}
}

49 
	$ã°_∑ckUn‹m4x8
()

51 
Eº‹
 = 0;

53 
glm
::
uöt32
 
Packed
 = glm::
	`∑ckUn‹m4x8
(glm::
	`vec4
(1.0f, 0.5f, 0.0f, 1.0f));

54 
glm
::
u8vec4
 
	`Vec
(255, 128, 0, 255);

55 
glm
::
uöt32
 & 
Ref
 = *
ªöãΩªt_ˇ°
<glm::uöt32*>(&
Vec
[0]);

57 
Eº‹
 +
Packed
 =
Ref
 ? 0 : 1;

59 
°d
::
ve˘‹
<
glm
::
vec4
> 
A
;

60 
A
.
	`push_back
(
glm
::
	`vec4
(1.0f, 0.7f, 0.3f, 0.0f));

61 
A
.
	`push_back
(
glm
::
	`vec4
(0.5f, 0.1f, 0.2f, 0.3f));

63 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

65 
glm
::
vec4
 
	`B
(
A
[
i
]);

66 
glm
::
uöt32
 
C
 = glm::
	`∑ckUn‹m4x8
(
B
);

67 
glm
::
vec4
 
D
 = glm::
	`u≈ackUn‹m4x8
(
C
);

68 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 255.f)) ? 0 : 1;

69 
	`as£π
(!
Eº‹
);

72  
Eº‹
;

73 
	}
}

75 
	$ã°_∑ckSn‹m4x8
()

77 
Eº‹
 = 0;

79 
°d
::
ve˘‹
<
glm
::
vec4
> 
A
;

80 
A
.
	`push_back
(
glm
::
	`vec4
( 1.0f, 0.0f,-0.5f,-1.0f));

81 
A
.
	`push_back
(
glm
::
	`vec4
(-0.7f,-0.1f, 0.1f, 0.7f));

83 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

85 
glm
::
vec4
 
	`B
(
A
[
i
]);

86 
glm
::
uöt32
 
C
 = glm::
	`∑ckSn‹m4x8
(
B
);

87 
glm
::
vec4
 
D
 = glm::
	`u≈ackSn‹m4x8
(
C
);

88 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 127.f)) ? 0 : 1;

89 
	`as£π
(!
Eº‹
);

92  
Eº‹
;

93 
	}
}

95 
	$ã°_∑ckHÆf2x16
()

97 
Eº‹
 = 0;

104 
°d
::
ve˘‹
<
glm
::
vec2
> 
A
;

105 
A
.
	`push_back
(
glm
::
	`vec2
( 1.0f, 2.0f));

106 
A
.
	`push_back
(
glm
::
	`vec2
(-1.0f,-2.0f));

107 
A
.
	`push_back
(
glm
::
	`vec2
(-1.1f, 1.1f));

109 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

111 
glm
::
vec2
 
	`B
(
A
[
i
]);

112 
glm
::
uöt
 
C
 = glm::
	`∑ckHÆf2x16
(
B
);

113 
glm
::
vec2
 
D
 = glm::
	`u≈ackHÆf2x16
(
C
);

115 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 127.f)) ? 0 : 1;

116 
	`as£π
(!
Eº‹
);

119  
Eº‹
;

120 
	}
}

122 
	$ã°_∑ckDoubÀ2x32
()

124 
Eº‹
 = 0;

126 
°d
::
ve˘‹
<
glm
::
uvec2
> 
A
;

127 
A
.
	`push_back
(
glm
::
	`uvec2
( 1, 2));

128 
A
.
	`push_back
(
glm
::
	`uvec2
(-1,-2));

129 
A
.
	`push_back
(
glm
::
	`uvec2
(-1000, 1100));

131 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

133 
glm
::
uvec2
 
	`B
(
A
[
i
]);

134 
C
 = 
glm
::
	`∑ckDoubÀ2x32
(
B
);

135 
glm
::
uvec2
 
D
 = glm::
	`u≈ackDoubÀ2x32
(
C
);

136 
Eº‹
 +
B
 =
D
 ? 0 : 1;

137 
	`as£π
(!
Eº‹
);

140  
Eº‹
;

141 
	}
}

143 
	$maö
()

145 
Eº‹
 = 0;

147 
Eº‹
 +
	`ã°_∑ckSn‹m4x8
();

148 
Eº‹
 +
	`ã°_∑ckUn‹m4x8
();

149 
Eº‹
 +
	`ã°_∑ckSn‹m2x16
();

150 
Eº‹
 +
	`ã°_∑ckUn‹m2x16
();

151 
Eº‹
 +
	`ã°_∑ckHÆf2x16
();

152 
Eº‹
 +
	`ã°_∑ckDoubÀ2x32
();

154  
Eº‹
;

155 
	}
}

	@glm/test/core/core_func_swizzle.cpp

1 
	#GLM_FORCE_MESSAGES


	)

2 
	#GLM_FORCE_SWIZZLE


	)

3 
	~<glm/glm.hµ
>

5 
	$ã°_ivec2_swizzÀ
()

7 
Eº‹
 = 0;

9 
glm
::
ivec2
 
	`A
(1, 2);

10 
glm
::
ivec2
 
B
 = 
A
.
	`yx
();

11 
glm
::
ivec2
 
C
 = 
B
.
	`yx
();

13 
Eº‹
 +
A
 !
B
 ? 0 : 1;

14 
Eº‹
 +
A
 =
C
 ? 0 : 1;

16  
Eº‹
;

17 
	}
}

19 
	$ã°_ivec3_swizzÀ
()

21 
Eº‹
 = 0;

23 
glm
::
ivec3
 
	`A
(1, 2, 3);

24 
glm
::
ivec3
 
B
 = 
A
.
	`zyx
();

25 
glm
::
ivec3
 
C
 = 
B
.
	`zyx
();

27 
Eº‹
 +
A
 !
B
 ? 0 : 1;

28 
Eº‹
 +
A
 =
C
 ? 0 : 1;

30  
Eº‹
;

31 
	}
}

33 
	$ã°_ivec4_swizzÀ
()

35 
Eº‹
 = 0;

37 
glm
::
ivec4
 
	`A
(1, 2, 3, 4);

38 
glm
::
ivec4
 
B
 = 
A
.
	`wzyx
();

39 
glm
::
ivec4
 
C
 = 
B
.
	`wzyx
();

41 
Eº‹
 +
A
 !
B
 ? 0 : 1;

42 
Eº‹
 +
A
 =
C
 ? 0 : 1;

44  
Eº‹
;

45 
	}
}

47 
	$ã°_vec4_swizzÀ
()

49 
Eº‹
 = 0;

51 
glm
::
vec4
 
	`A
(1, 2, 3, 4);

52 
glm
::
vec4
 
B
 = 
A
.
	`wzyx
();

53 
glm
::
vec4
 
C
 = 
B
.
	`wzyx
();

55 
Eº‹
 +
A
 !
B
 ? 0 : 1;

56 
Eº‹
 +
A
 =
C
 ? 0 : 1;

58 
f
 = 
glm
::
	`dŸ
(
C
.
	`wzyx
(), C.
	`xyzw
());

59 
Eº‹
 +
glm
::
	`abs
(
f
 - 20.f) < 0.01f ? 0 : 1;

61  
Eº‹
;

62 
	}
}

64 
	$maö
()

66 
Eº‹
 = 0;

68 
Eº‹
 +
	`ã°_ivec2_swizzÀ
();

69 
Eº‹
 +
	`ã°_ivec3_swizzÀ
();

70 
Eº‹
 +
	`ã°_ivec4_swizzÀ
();

72 
Eº‹
 +
	`ã°_vec4_swizzÀ
();

74  
Eº‹
;

75 
	}
}

	@glm/test/core/core_func_trigonometric.cpp

1 
	~<glm/åig⁄omëric.hµ
>

3 
	$maö
()

5 
Eº‹
 = 0;

8  
Eº‹
;

9 
	}
}

	@glm/test/core/core_func_vector_relational.cpp

1 
	~<glm/vec2.hµ
>

2 
	~<glm/vec3.hµ
>

3 
	~<glm/vec4.hµ
>

4 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

5 
	~<glm/gtc/vec1.hµ
>

7 
	$ã°_nŸ
()

9 
	`Eº‹
(0);

12 
glm
::
bvec1
 
	`v
(
Ál£
);

13 
Eº‹
 +
glm
::
	`Æl
(glm::
	`nŸ_
(
v
)) ? 0 : 1;

17 
glm
::
bvec2
 
	`v
(
Ál£
);

18 
Eº‹
 +
glm
::
	`Æl
(glm::
	`nŸ_
(
v
)) ? 0 : 1;

22 
glm
::
bvec3
 
	`v
(
Ál£
);

23 
Eº‹
 +
glm
::
	`Æl
(glm::
	`nŸ_
(
v
)) ? 0 : 1;

27 
glm
::
bvec4
 
	`v
(
Ál£
);

28 
Eº‹
 +
glm
::
	`Æl
(glm::
	`nŸ_
(
v
)) ? 0 : 1;

31  
Eº‹
;

32 
	}
}

34 
	$maö
()

36 
	`Eº‹
(0);

38 
Eº‹
 +
	`ã°_nŸ
();

40  
Eº‹
;

41 
	}
}

	@glm/test/core/core_setup_force_cxx98.cpp

1 
	#GLM_FORCE_CXX98


	)

2 
	~<glm/glm.hµ
>

3 
	~<glm/ext.hµ
>

5 
	$maö
()

7 
Eº‹
 = 0;

9  
Eº‹
;

10 
	}
}

	@glm/test/core/core_setup_message.cpp

1 
	#GLM_FORCE_MESSAGES


	)

2 
	~<glm/vec3.hµ
>

3 
	~<c°dio
>

5 
	$ã°_compûî
()

7 
	`Eº‹
(0);

9 if(
GLM_COMPILER
 & 
GLM_COMPILER_VC
)

11 
GLM_COMPILER
)

13 
GLM_COMPILER_VC10
:

14 
°d
::
	`¥ötf
("Visual C++ 10 - 2010\n");

16 
GLM_COMPILER_VC11
:

17 
°d
::
	`¥ötf
("Visual C++ 11 - 2012\n");

19 
GLM_COMPILER_VC12
:

20 
°d
::
	`¥ötf
("Visual C++ 12 - 2013\n");

22 
GLM_COMPILER_VC14
:

23 
°d
::
	`¥ötf
("Visual C++ 14 - 2015\n");

25 
GLM_COMPILER_VC15
:

26 
°d
::
	`¥ötf
("Visual C++ 15 - 201X\n");

29 
°d
::
	`¥ötf
("Visual C++ versionÇot detected\n");

30 
Eº‹
 += 1;

34 if(
GLM_COMPILER
 & 
GLM_COMPILER_GCC
)

36 
GLM_COMPILER
)

38 
GLM_COMPILER_GCC44
:

39 
°d
::
	`¥ötf
("GCC 4.4\n");

41 
GLM_COMPILER_GCC45
:

42 
°d
::
	`¥ötf
("GCC 4.5\n");

44 
GLM_COMPILER_GCC46
:

45 
°d
::
	`¥ötf
("GCC 4.6\n");

47 
GLM_COMPILER_GCC47
:

48 
°d
::
	`¥ötf
("GCC 4.7\n");

50 
GLM_COMPILER_GCC48
:

51 
°d
::
	`¥ötf
("GCC 4.8\n");

53 
GLM_COMPILER_GCC49
:

54 
°d
::
	`¥ötf
("GCC 4.9\n");

56 
GLM_COMPILER_GCC50
:

57 
°d
::
	`¥ötf
("GCC 5.0\n");

59 
GLM_COMPILER_GCC51
:

60 
°d
::
	`¥ötf
("GCC 5.1\n");

62 
GLM_COMPILER_GCC52
:

63 
°d
::
	`¥ötf
("GCC 5.2\n");

65 
GLM_COMPILER_GCC53
:

66 
°d
::
	`¥ötf
("GCC 5.3\n");

68 
GLM_COMPILER_GCC54
:

69 
°d
::
	`¥ötf
("GCC 5.4\n");

71 
GLM_COMPILER_GCC60
:

72 
°d
::
	`¥ötf
("GCC 6.0\n");

74 
GLM_COMPILER_GCC61
:

75 
°d
::
	`¥ötf
("GCC 6.1\n");

77 
GLM_COMPILER_GCC62
:

78 
°d
::
	`¥ötf
("GCC 6.2\n");

80 
GLM_COMPILER_GCC70
:

81 
°d
::
	`¥ötf
("GCC 7.0\n");

83 
GLM_COMPILER_GCC71
:

84 
°d
::
	`¥ötf
("GCC 7.1\n");

86 
GLM_COMPILER_GCC72
:

87 
°d
::
	`¥ötf
("GCC 7.2\n");

89 
GLM_COMPILER_GCC80
:

90 
°d
::
	`¥ötf
("GCC 8.0\n");

93 
°d
::
	`¥ötf
("GCC versionÇot detected\n");

94 
Eº‹
 += 1;

98 if(
GLM_COMPILER
 & 
GLM_COMPILER_CUDA
)

100 
°d
::
	`¥ötf
("CUDA\n");

102 if(
GLM_COMPILER
 & 
GLM_COMPILER_CLANG
)

104 
GLM_COMPILER
)

106 
GLM_COMPILER_CLANG32
:

107 
°d
::
	`¥ötf
("Clang 3.2\n");

109 
GLM_COMPILER_CLANG33
:

110 
°d
::
	`¥ötf
("Clang 3.3\n");

112 
GLM_COMPILER_CLANG34
:

113 
°d
::
	`¥ötf
("Clang 3.4\n");

115 
GLM_COMPILER_CLANG35
:

116 
°d
::
	`¥ötf
("Clang 3.5\n");

118 
GLM_COMPILER_CLANG36
:

119 
°d
::
	`¥ötf
("Clang 3.6\n");

121 
GLM_COMPILER_CLANG37
:

122 
°d
::
	`¥ötf
("Clang 3.7\n");

124 
GLM_COMPILER_CLANG38
:

125 
°d
::
	`¥ötf
("Clang 3.8\n");

127 
GLM_COMPILER_CLANG39
:

128 
°d
::
	`¥ötf
("Clang 3.9\n");

130 
GLM_COMPILER_CLANG40
:

131 
°d
::
	`¥ötf
("Clang 4.0\n");

133 
GLM_COMPILER_CLANG41
:

134 
°d
::
	`¥ötf
("Clang 4.1\n");

136 
GLM_COMPILER_CLANG42
:

137 
°d
::
	`¥ötf
("Clang 4.2\n");

140 
°d
::
	`¥ötf
("LLVM versionÇot detected\n");

144 if(
GLM_COMPILER
 & 
GLM_COMPILER_INTEL
)

146 
GLM_COMPILER
)

148 
GLM_COMPILER_INTEL12
:

149 
°d
::
	`¥ötf
("ICC 12\n");

151 
GLM_COMPILER_INTEL12_1
:

152 
°d
::
	`¥ötf
("ICC 12.1\n");

154 
GLM_COMPILER_INTEL13
:

155 
°d
::
	`¥ötf
("ICC 13\n");

157 
GLM_COMPILER_INTEL14
:

158 
°d
::
	`¥ötf
("ICC 14\n");

160 
GLM_COMPILER_INTEL15
:

161 
°d
::
	`¥ötf
("ICC 15\n");

163 
GLM_COMPILER_INTEL16
:

164 
°d
::
	`¥ötf
("ICC 16\n");

167 
°d
::
	`¥ötf
("Intel compiler versionÇot detected\n");

168 
Eº‹
 += 1;

174 
°d
::
	`¥ötf
("Undetected compiler\n");

175 
Eº‹
 += 1;

178  
Eº‹
;

179 
	}
}

181 
	$ã°_modñ
()

183 
Eº‹
 = 0;

185 
Eº‹
 +(((*Ë=4Ë&& (
GLM_MODEL
 =
GLM_MODEL_32
)Ë|| (((*Ë=8Ë&& (GLM_MODEL =
GLM_MODEL_64
)) ? 0 : 1;

187 if(
GLM_MODEL
 =
GLM_MODEL_32
)

188 
°d
::
	`¥ötf
("GLM_MODEL_32\n");

189 if(
GLM_MODEL
 =
GLM_MODEL_64
)

190 
°d
::
	`¥ötf
("GLM_MODEL_64\n");

192  
Eº‹
;

193 
	}
}

195 
	$ã°_ö°ru˘i⁄_£t
()

197 
Eº‹
 = 0;

199 
°d
::
	`¥ötf
("GLM_ARCH: ");

201 if(
GLM_ARCH
 =
GLM_ARCH_PURE
)

202 
°d
::
	`¥ötf
("GLM_ARCH_PURE ");

203 if(
GLM_ARCH
 & 
GLM_ARCH_ARM_BIT
)

204 
°d
::
	`¥ötf
("ARM ");

205 if(
GLM_ARCH
 & 
GLM_ARCH_NEON_BIT
)

206 
°d
::
	`¥ötf
("NEON ");

207 if(
GLM_ARCH
 & 
GLM_ARCH_AVX2
)

208 
°d
::
	`¥ötf
("AVX2 ");

209 if(
GLM_ARCH
 & 
GLM_ARCH_AVX
)

210 
°d
::
	`¥ötf
("AVX ");

211 if(
GLM_ARCH
 & 
GLM_ARCH_SSE42_BIT
)

212 
°d
::
	`¥ötf
("SSE4.2 ");

213 if(
GLM_ARCH
 & 
GLM_ARCH_SSE41_BIT
)

214 
°d
::
	`¥ötf
("SSE4.1 ");

215 if(
GLM_ARCH
 & 
GLM_ARCH_SSSE3_BIT
)

216 
°d
::
	`¥ötf
("SSSE3 ");

217 if(
GLM_ARCH
 & 
GLM_ARCH_SSE3_BIT
)

218 
°d
::
	`¥ötf
("SSE3 ");

219 if(
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT
)

220 
°d
::
	`¥ötf
("SSE2 ");

222 
°d
::
	`¥ötf
("\n");

224  
Eº‹
;

225 
	}
}

227 
	$ã°_˝p_vîsi⁄
()

229 
°d
::
	`¥ötf
("__˝lu•lus: %Œd\n", 
__˝lu•lus
);

232 
	}
}

234 
	$ã°_›î©‹s
()

236 
glm
::
vec3
 
	`A
(1.0f);

237 
glm
::
vec3
 
	`B
(1.0f);

238 
boﬁ
 
R
 = 
A
 !
B
;

239 
boﬁ
 
S
 = 
A
 =
B
;

241  (
S
 && !
R
) ? 0 : 1;

242 
	}
}

244 
	gãm∂©e
 <
ty≥«me
 
	gT
>

245 
	svec


250 
	gãm∂©e
 <ãm∂©ê<
	gty≥«me
> 
˛ass
 
	gC
, 
ty≥«me
 
	gT
>

251 
	sCœss


256 
	gãm∂©e
 <
ty≥«me
 
	gT
>

257 
	gCœss
<
	gvec
, 
	gT
>

262 
	$maö
()

266 
Eº‹
 = 0;

268 
Eº‹
 +
	`ã°_˝p_vîsi⁄
();

269 
Eº‹
 +
	`ã°_compûî
();

270 
Eº‹
 +
	`ã°_modñ
();

271 
Eº‹
 +
	`ã°_ö°ru˘i⁄_£t
();

272 
Eº‹
 +
	`ã°_›î©‹s
();

274  
Eº‹
;

275 
	}
}

	@glm/test/core/core_setup_precision.cpp

1 
	#GLM_FORCE_INLINE


	)

2 
	#GLM_PRECISION_HIGHP_FLOAT


	)

3 
	~<glm/glm.hµ
>

4 
	~<glm/ext.hµ
>

6 
	$ã°_m©
()

8 
Eº‹
 = 0;

10 
Eº‹
 +(
glm
::
m©2
Ë=(glm::
highp_m©2
) ? 0 : 1;

11 
Eº‹
 +(
glm
::
m©3
Ë=(glm::
highp_m©3
) ? 0 : 1;

12 
Eº‹
 +(
glm
::
m©4
Ë=(glm::
highp_m©4
) ? 0 : 1;

14 
Eº‹
 +(
glm
::
m©2x2
Ë=(glm::
highp_m©2x2
) ? 0 : 1;

15 
Eº‹
 +(
glm
::
m©2x3
Ë=(glm::
highp_m©2x3
) ? 0 : 1;

16 
Eº‹
 +(
glm
::
m©2x4
Ë=(glm::
highp_m©2x4
) ? 0 : 1;

17 
Eº‹
 +(
glm
::
m©3x2
Ë=(glm::
highp_m©3x2
) ? 0 : 1;

18 
Eº‹
 +(
glm
::
m©3x3
Ë=(glm::
highp_m©3x3
) ? 0 : 1;

19 
Eº‹
 +(
glm
::
m©3x4
Ë=(glm::
highp_m©3x4
) ? 0 : 1;

20 
Eº‹
 +(
glm
::
m©4x2
Ë=(glm::
highp_m©4x2
) ? 0 : 1;

21 
Eº‹
 +(
glm
::
m©4x3
Ë=(glm::
highp_m©4x3
) ? 0 : 1;

22 
Eº‹
 +(
glm
::
m©4x4
Ë=(glm::
highp_m©4x4
) ? 0 : 1;

24  
Eº‹
;

25 
	}
}

27 
	$ã°_vec
()

29 
Eº‹
 = 0;

31 
Eº‹
 +(
glm
::
vec2
Ë=(glm::
highp_vec2
) ? 0 : 1;

32 
Eº‹
 +(
glm
::
vec3
Ë=(glm::
highp_vec3
) ? 0 : 1;

33 
Eº‹
 +(
glm
::
vec4
Ë=(glm::
highp_vec4
) ? 0 : 1;

35  
Eº‹
;

36 
	}
}

38 
	$ã°_dvec
()

40 
Eº‹
 = 0;

42 
Eº‹
 +(
glm
::
dvec2
Ë=(glm::
highp_dvec2
) ? 0 : 1;

43 
Eº‹
 +(
glm
::
dvec3
Ë=(glm::
highp_dvec3
) ? 0 : 1;

44 
Eº‹
 +(
glm
::
dvec4
Ë=(glm::
highp_dvec4
) ? 0 : 1;

46  
Eº‹
;

47 
	}
}

49 
	$maö
()

51 
Eº‹
 = 0;

53 
Eº‹
 +
	`ã°_m©
();

54 
Eº‹
 +
	`ã°_vec
();

55 
Eº‹
 +
	`ã°_dvec
();

57  
Eº‹
;

58 
	}
}

	@glm/test/core/core_type_aligned.cpp

1 
	~<glm/glm.hµ
>

3 
	$ã°_Æig√d
()

5 
Eº‹
 = 0;

7 
size_t
 
size1_Æig√d
 = (
glm
::
dëaû
::
°‹age
<, 1, 
åue
>::
ty≥
);

8 
Eº‹
 +
size1_Æig√d
 == 1 ? 0 : 1;

9 
size_t
 
size2_Æig√d
 = (
glm
::
dëaû
::
°‹age
<, 2, 
åue
>::
ty≥
);

10 
Eº‹
 +
size2_Æig√d
 == 2 ? 0 : 1;

11 
size_t
 
size4_Æig√d
 = (
glm
::
dëaû
::
°‹age
<, 4, 
åue
>::
ty≥
);

12 
Eº‹
 +
size4_Æig√d
 == 4 ? 0 : 1;

13 
size_t
 
size8_Æig√d
 = (
glm
::
dëaû
::
°‹age
<, 8, 
åue
>::
ty≥
);

14 
Eº‹
 +
size8_Æig√d
 == 8 ? 0 : 1;

15 
size_t
 
size16_Æig√d
 = (
glm
::
dëaû
::
°‹age
<, 16, 
åue
>::
ty≥
);

16 
Eº‹
 +
size16_Æig√d
 == 16 ? 0 : 1;

17 
size_t
 
size32_Æig√d
 = (
glm
::
dëaû
::
°‹age
<, 32, 
åue
>::
ty≥
);

18 
Eº‹
 +
size32_Æig√d
 == 32 ? 0 : 1;

19 
size_t
 
size64_Æig√d
 = (
glm
::
dëaû
::
°‹age
<, 64, 
åue
>::
ty≥
);

20 
Eº‹
 +
size64_Æig√d
 == 64 ? 0 : 1;

22 #i‡
GLM_HAS_ALIGNOF


24 
size_t
 
Æign1_Æig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 1, 
åue
>::
ty≥
);

25 
Eº‹
 +
Æign1_Æig√d
 == 1 ? 0 : 1;

26 
size_t
 
Æign2_Æig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 2, 
åue
>::
ty≥
);

27 
Eº‹
 +
Æign2_Æig√d
 == 2 ? 0 : 1;

28 
size_t
 
Æign4_Æig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 4, 
åue
>::
ty≥
);

29 
Eº‹
 +
Æign4_Æig√d
 == 4 ? 0 : 1;

30 
size_t
 
Æign8_Æig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 8, 
åue
>::
ty≥
);

31 
Eº‹
 +
Æign8_Æig√d
 == 8 ? 0 : 1;

32 
size_t
 
Æign16_Æig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 16, 
åue
>::
ty≥
);

33 
Eº‹
 +
Æign16_Æig√d
 == 16 ? 0 : 1;

34 
size_t
 
Æign32_Æig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 32, 
åue
>::
ty≥
);

35 
Eº‹
 +
Æign32_Æig√d
 == 32 ? 0 : 1;

36 
size_t
 
Æign64_Æig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 64, 
åue
>::
ty≥
);

37 
Eº‹
 +
Æign64_Æig√d
 == 64 ? 0 : 1;

39 #ñi‡
GLM_COMPILER
 & 
GLM_COMPILER_GCC


41 
size_t
 
Æign1_Æig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 1, 
åue
>::
ty≥
);

42 
Eº‹
 +
Æign1_Æig√d
 == 1 ? 0 : 1;

43 
size_t
 
Æign2_Æig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 2, 
åue
>::
ty≥
);

44 
Eº‹
 +
Æign2_Æig√d
 == 2 ? 0 : 1;

45 
size_t
 
Æign4_Æig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 4, 
åue
>::
ty≥
);

46 
Eº‹
 +
Æign4_Æig√d
 == 4 ? 0 : 1;

47 
size_t
 
Æign8_Æig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 8, 
åue
>::
ty≥
);

48 
Eº‹
 +
Æign8_Æig√d
 == 8 ? 0 : 1;

49 
size_t
 
Æign16_Æig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 16, 
åue
>::
ty≥
);

50 
Eº‹
 +
Æign16_Æig√d
 == 16 ? 0 : 1;

51 
size_t
 
Æign32_Æig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 32, 
åue
>::
ty≥
);

52 
Eº‹
 +
Æign32_Æig√d
 == 32 ? 0 : 1;

53 
size_t
 
Æign64_Æig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 64, 
åue
>::
ty≥
);

54 
Eº‹
 +
Æign64_Æig√d
 == 64 ? 0 : 1;

58  
Eº‹
;

59 
	}
}

61 
	$ã°_u«lig√d
()

63 
Eº‹
 = 0;

65 
size_t
 
size1_u«lig√d
 = (
glm
::
dëaû
::
°‹age
<, 1, 
Ál£
>::
ty≥
);

66 
Eº‹
 +
size1_u«lig√d
 == 1 ? 0 : 1;

67 
size_t
 
size2_u«lig√d
 = (
glm
::
dëaû
::
°‹age
<, 2, 
Ál£
>::
ty≥
);

68 
Eº‹
 +
size2_u«lig√d
 == 2 ? 0 : 1;

69 
size_t
 
size4_u«lig√d
 = (
glm
::
dëaû
::
°‹age
<, 4, 
Ál£
>::
ty≥
);

70 
Eº‹
 +
size4_u«lig√d
 == 4 ? 0 : 1;

71 
size_t
 
size8_u«lig√d
 = (
glm
::
dëaû
::
°‹age
<, 8, 
Ál£
>::
ty≥
);

72 
Eº‹
 +
size8_u«lig√d
 == 8 ? 0 : 1;

73 
size_t
 
size16_u«lig√d
 = (
glm
::
dëaû
::
°‹age
<, 16, 
Ál£
>::
ty≥
);

74 
Eº‹
 +
size16_u«lig√d
 == 16 ? 0 : 1;

75 
size_t
 
size32_u«lig√d
 = (
glm
::
dëaû
::
°‹age
<, 32, 
Ál£
>::
ty≥
);

76 
Eº‹
 +
size32_u«lig√d
 == 32 ? 0 : 1;

77 
size_t
 
size64_u«lig√d
 = (
glm
::
dëaû
::
°‹age
<, 64, 
Ál£
>::
ty≥
);

78 
Eº‹
 +
size64_u«lig√d
 == 64 ? 0 : 1;

80 #i‡
GLM_HAS_ALIGNOF


82 
size_t
 
Æign1_u«lig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 1, 
Ál£
>::
ty≥
);

83 
Eº‹
 +
Æign1_u«lig√d
 == 1 ? 0 : 1;

84 
size_t
 
Æign2_u«lig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 2, 
Ál£
>::
ty≥
);

85 
Eº‹
 +
Æign2_u«lig√d
 == 1 ? 0 : 1;

86 
size_t
 
Æign4_u«lig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 4, 
Ál£
>::
ty≥
);

87 
Eº‹
 +
Æign4_u«lig√d
 == 1 ? 0 : 1;

88 
size_t
 
Æign8_u«lig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 8, 
Ál£
>::
ty≥
);

89 
Eº‹
 +
Æign8_u«lig√d
 == 1 ? 0 : 1;

90 
size_t
 
Æign16_u«lig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 16, 
Ál£
>::
ty≥
);

91 
Eº‹
 +
Æign16_u«lig√d
 == 1 ? 0 : 1;

92 
size_t
 
Æign32_u«lig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 32, 
Ál£
>::
ty≥
);

93 
Eº‹
 +
Æign32_u«lig√d
 == 1 ? 0 : 1;

94 
size_t
 
Æign64_u«lig√d
 = 
	`Æignof
(
glm
::
dëaû
::
°‹age
<, 64, 
Ál£
>::
ty≥
);

95 
Eº‹
 +
Æign64_u«lig√d
 == 1 ? 0 : 1;

99 
size_t
 
Æign1_u«lig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 1, 
Ál£
>::
ty≥
);

100 
Eº‹
 +
Æign1_u«lig√d
 == 1 ? 0 : 1;

101 
size_t
 
Æign2_u«lig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 2, 
Ál£
>::
ty≥
);

102 
Eº‹
 +
Æign2_u«lig√d
 == 1 ? 0 : 1;

103 
size_t
 
Æign4_u«lig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 4, 
Ál£
>::
ty≥
);

104 
Eº‹
 +
Æign4_u«lig√d
 == 1 ? 0 : 1;

105 
size_t
 
Æign8_u«lig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 8, 
Ál£
>::
ty≥
);

106 
Eº‹
 +
Æign8_u«lig√d
 == 1 ? 0 : 1;

107 
size_t
 
Æign16_u«lig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 16, 
Ál£
>::
ty≥
);

108 
Eº‹
 +
Æign16_u«lig√d
 == 1 ? 0 : 1;

109 
size_t
 
Æign32_u«lig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 32, 
Ál£
>::
ty≥
);

110 
Eº‹
 +
Æign32_u«lig√d
 == 1 ? 0 : 1;

111 
size_t
 
Æign64_u«lig√d
 = 
	`__Æignof__
(
glm
::
dëaû
::
°‹age
<, 64, 
Ál£
>::
ty≥
);

112 
Eº‹
 +
Æign64_u«lig√d
 == 1 ? 0 : 1;

116  
Eº‹
;

117 
	}
}

120 
	$maö
()

122 
Eº‹
 = 0;

124 
Eº‹
 +
	`ã°_Æig√d
();

125 
Eº‹
 +
	`ã°_u«lig√d
();

127  
Eº‹
;

128 
	}
}

	@glm/test/core/core_type_cast.cpp

1 
	~<glm/glm.hµ
>

2 
	~<Æg‹ôhm
>

3 
	~<ve˘‹
>

4 
	~<ôî©‹
>

6 
	smy_vec2


8 
›î©‹
 
	mglm
::
vec2
(Ë{  
glm
::vec2(
x
, 
y
); }

9 
	mx
, 
	my
;

12 
	$ã°_vec2_ˇ°
()

14 
glm
::
vec2
 
	`A
(1.0f, 2.0f);

15 
glm
::
lowp_vec2
 
	`B
(
A
);

16 
glm
::
mediump_vec2
 
	`C
(
A
);

17 
glm
::
highp_vec2
 
	`D
(
A
);

19 
glm
::
vec2
 
E
 = 
°©ic_ˇ°
<glm::vec2>(
A
);

20 
glm
::
lowp_vec2
 
F
 = 
°©ic_ˇ°
<glm::lowp_vec2>(
A
);

21 
glm
::
mediump_vec2
 
G
 = 
°©ic_ˇ°
<glm::mediump_vec2>(
A
);

22 
glm
::
highp_vec2
 
H
 = 
°©ic_ˇ°
<glm::highp_vec2>(
A
);

24 
my_vec2
 
I
;

25 
glm
::
vec2
 
J
 = 
°©ic_ˇ°
<glm::vec2>(
I
);

26 
glm
::
vec2
 
	`K
(7.8f);

28 
	`Eº‹
(0);

30 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
E
)) ? 0 : 1;

31 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
, 
F
)) ? 0 : 1;

32 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
C
, 
G
)) ? 0 : 1;

33 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
D
, 
H
)) ? 0 : 1;

35  
Eº‹
;

36 
	}
}

38 
	$ã°_vec3_ˇ°
()

40 
glm
::
vec3
 
	`A
(1.0f, 2.0f, 3.0f);

41 
glm
::
lowp_vec3
 
	`B
(
A
);

42 
glm
::
mediump_vec3
 
	`C
(
A
);

43 
glm
::
highp_vec3
 
	`D
(
A
);

45 
glm
::
vec3
 
E
 = 
°©ic_ˇ°
<glm::vec3>(
A
);

46 
glm
::
lowp_vec3
 
F
 = 
°©ic_ˇ°
<glm::lowp_vec3>(
A
);

47 
glm
::
mediump_vec3
 
G
 = 
°©ic_ˇ°
<glm::mediump_vec3>(
A
);

48 
glm
::
highp_vec3
 
H
 = 
°©ic_ˇ°
<glm::highp_vec3>(
A
);

50 
	`Eº‹
(0);

52 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
E
)) ? 0 : 1;

53 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
, 
F
)) ? 0 : 1;

54 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
C
, 
G
)) ? 0 : 1;

55 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
D
, 
H
)) ? 0 : 1;

57  
Eº‹
;

58 
	}
}

60 
	$ã°_vec4_ˇ°
()

62 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

63 
glm
::
lowp_vec4
 
	`B
(
A
);

64 
glm
::
mediump_vec4
 
	`C
(
A
);

65 
glm
::
highp_vec4
 
	`D
(
A
);

67 
glm
::
vec4
 
E
 = 
°©ic_ˇ°
<glm::vec4>(
A
);

68 
glm
::
lowp_vec4
 
F
 = 
°©ic_ˇ°
<glm::lowp_vec4>(
A
);

69 
glm
::
mediump_vec4
 
G
 = 
°©ic_ˇ°
<glm::mediump_vec4>(
A
);

70 
glm
::
highp_vec4
 
H
 = 
°©ic_ˇ°
<glm::highp_vec4>(
A
);

72 
	`Eº‹
(0);

74 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
E
)) ? 0 : 1;

75 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
, 
F
)) ? 0 : 1;

76 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
C
, 
G
)) ? 0 : 1;

77 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
D
, 
H
)) ? 0 : 1;

79  
Eº‹
;

80 
	}
}

82 
	$ã°_°d_c›y
()

84 
Eº‹
 = 0;

87 
°d
::
ve˘‹
<> 
High
;

88 
High
.
	`ªsize
(64);

89 
°d
::
ve˘‹
<> 
	`Medium
(
High
.
	`size
());

91 
°d
::
	`c›y
(
High
.
	`begö
(), High.
	`íd
(), 
Medium
.begin());

93 *
Medium
.
	`begö
(Ë*
High
.begin();

97 
°d
::
ve˘‹
<
glm
::
dvec4
> 
High4
;

98 
High4
.
	`ªsize
(64);

99 
°d
::
ve˘‹
<
glm
::
vec4
> 
	`Medium4
(
High4
.
	`size
());

101 
°d
::
	`c›y
(
High4
.
	`begö
(), High4.
	`íd
(), 
Medium4
.begin());

103 *
Medium4
.
	`begö
(Ë*
High4
.begin();

107 
°d
::
ve˘‹
<
glm
::
dvec3
> 
High3
;

108 
High3
.
	`ªsize
(64);

109 
°d
::
ve˘‹
<
glm
::
vec3
> 
	`Medium3
(
High3
.
	`size
());

111 
°d
::
	`c›y
(
High3
.
	`begö
(), High3.
	`íd
(), 
Medium3
.begin());

113 *
Medium3
.
	`begö
(Ë*
High3
.begin();

117 
°d
::
ve˘‹
<
glm
::
dvec2
> 
High2
;

118 
High2
.
	`ªsize
(64);

119 
°d
::
ve˘‹
<
glm
::
vec2
> 
	`Medium2
(
High2
.
	`size
());

121 
°d
::
	`c›y
(
High2
.
	`begö
(), High2.
	`íd
(), 
Medium2
.begin());

123 *
Medium2
.
	`begö
(Ë*
High2
.begin();

126 
glm
::
dvec4
 
v1
;

127 
glm
::
vec4
 
v2
;

129 
v2
 = 
v1
;

131  
Eº‹
;

132 
	}
}

134 
	$maö
()

136 
Eº‹
 = 0;

138 
Eº‹
 +
	`ã°_°d_c›y
();

139 
Eº‹
 +
	`ã°_vec2_ˇ°
();

140 
Eº‹
 +
	`ã°_vec3_ˇ°
();

141 
Eº‹
 +
	`ã°_vec4_ˇ°
();

143  
Eº‹
;

144 
	}
}

	@glm/test/core/core_type_ctor.cpp

1 
	#GLM_FORCE_NO_CTOR_INIT


	)

2 
	~<glm/glm.hµ
>

3 
	~<glm/gtc/vec1.hµ
>

4 
	~<glm/gtc/qu©îni⁄.hµ
>

6 
	$ã°_vec1_˘‹
()

8 
Eº‹
 = 0;

10 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


12 
	u∑ck


14 
glm
::
vec1
 
f
;

15 
glm
::
ivec1
 
i
;

16 } 
A
, 
B
;

18 
A
.
f
 = 
glm
::
	`vec1
(0);

19 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
, glm::
	`ivec1
(0))) ? 0 : 1;

21 
B
.
f
 = 
glm
::
	`vec1
(1);

22 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
, glm::
	`ivec1
(1065353216))) ? 0 : 1;

26  
Eº‹
;

27 
	}
}

29 
	$ã°_vec2_˘‹
()

31 
Eº‹
 = 0;

33 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


35 
	u∑ck


37 
glm
::
vec2
 
f
;

38 
glm
::
ivec2
 
i
;

39 } 
A
, 
B
;

41 
A
.
f
 = 
glm
::
	`vec2
(0);

42 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
, glm::
	`ivec2
(0))) ? 0 : 1;

44 
B
.
f
 = 
glm
::
	`vec2
(1);

45 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
, glm::
	`ivec2
(1065353216))) ? 0 : 1;

49  
Eº‹
;

50 
	}
}

52 
	$ã°_vec3_˘‹
()

54 
Eº‹
 = 0;

56 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


58 
	u∑ck


60 
glm
::
vec3
 
f
;

61 
glm
::
ivec3
 
i
;

62 } 
A
, 
B
;

64 
A
.
f
 = 
glm
::
	`vec3
(0);

65 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
, glm::
	`ivec3
(0))) ? 0 : 1;

67 
B
.
f
 = 
glm
::
	`vec3
(1);

68 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
, glm::
	`ivec3
(1065353216))) ? 0 : 1;

72  
Eº‹
;

73 
	}
}

75 
	$ã°_vec4_˘‹
()

77 
Eº‹
 = 0;

79 #i‚de‡
GLM_FORCE_NO_CTOR_INIT


81 
glm
::
vec4
 
A
;

82 
glm
::
vec4
 
	`B
(0);

83 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
B
)) ? 0 : 1;

87 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


89 
	u∑ck


91 
glm
::
vec4
 
f
;

92 
glm
::
ivec4
 
i
;

93 } 
A
, 
B
;

95 
A
.
f
 = 
glm
::
	`vec4
(0);

96 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
, glm::
	`ivec4
(0))) ? 0 : 1;

98 
B
.
f
 = 
glm
::
	`vec4
(1);

99 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
, glm::
	`ivec4
(1065353216))) ? 0 : 1;

103  
Eº‹
;

104 
	}
}

106 
	$ã°_m©2x2_˘‹
()

108 
Eº‹
 = 0;

110 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


112 
	u∑ck


114 
glm
::
m©2x2
 
f
;

115 
glm
::
m©2x2
 
i
;

116 } 
A
, 
B
;

118 
A
.
f
 = 
glm
::
	`m©2x2
(0);

119 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
[0], glm::
	`vec2
(0))) ? 0 : 1;

121 
B
.
f
 = 
glm
::
	`m©2x2
(1);

122 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
[0], glm::
	`vec2
(1, 0))) ? 0 : 1;

126  
Eº‹
;

127 
	}
}

129 
	$ã°_m©2x3_˘‹
()

131 
Eº‹
 = 0;

133 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


135 
	u∑ck


137 
glm
::
m©2x3
 
f
;

138 
glm
::
m©2x3
 
i
;

139 } 
A
, 
B
;

141 
A
.
f
 = 
glm
::
	`m©2x3
(0);

142 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
[0], glm::
	`vec3
(0))) ? 0 : 1;

144 
B
.
f
 = 
glm
::
	`m©2x3
(1);

145 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
[0], glm::
	`vec3
(1, 0, 0))) ? 0 : 1;

149  
Eº‹
;

150 
	}
}

152 
	$ã°_m©2x4_˘‹
()

154 
Eº‹
 = 0;

156 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


158 
	u∑ck


160 
glm
::
m©2x4
 
f
;

161 
glm
::
m©2x4
 
i
;

162 } 
A
, 
B
;

164 
A
.
f
 = 
glm
::
	`m©2x4
(0);

165 
glm
::
vec4
 c⁄° 
	`C
(0, 0, 0, 0);

166 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
[0], 
C
)) ? 0 : 1;

168 
B
.
f
 = 
glm
::
	`m©2x4
(1);

169 
glm
::
vec4
 c⁄° 
	`D
(1, 0, 0, 0);

170 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
[0], 
D
)) ? 0 : 1;

174  
Eº‹
;

175 
	}
}

177 
	$ã°_m©3x2_˘‹
()

179 
Eº‹
 = 0;

181 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


183 
	u∑ck


185 
glm
::
m©3x2
 
f
;

186 
glm
::
m©3x2
 
i
;

187 } 
A
, 
B
;

189 
A
.
f
 = 
glm
::
	`m©3x2
(0);

190 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
[0], glm::
	`vec2
(0))) ? 0 : 1;

192 
B
.
f
 = 
glm
::
	`m©3x2
(1);

193 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
[0], glm::
	`vec2
(1, 0))) ? 0 : 1;

197  
Eº‹
;

198 
	}
}

200 
	$ã°_m©3x3_˘‹
()

202 
Eº‹
 = 0;

204 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


206 
	u∑ck


208 
glm
::
m©3x3
 
f
;

209 
glm
::
m©3x3
 
i
;

210 } 
A
, 
B
;

212 
A
.
f
 = 
glm
::
	`m©3x3
(0);

213 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
[0], glm::
	`vec3
(0))) ? 0 : 1;

215 
B
.
f
 = 
glm
::
	`m©3x3
(1);

216 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
[0], glm::
	`vec3
(1, 0, 0))) ? 0 : 1;

220  
Eº‹
;

221 
	}
}

223 
	$ã°_m©3x4_˘‹
()

225 
Eº‹
 = 0;

227 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


229 
	u∑ck


231 
glm
::
m©3x4
 
f
;

232 
glm
::
m©3x4
 
i
;

233 } 
A
, 
B
;

235 
A
.
f
 = 
glm
::
	`m©3x4
(0);

236 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
[0], glm::
	`vec4
(0))) ? 0 : 1;

238 
B
.
f
 = 
glm
::
	`m©3x4
(1);

239 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
[0], glm::
	`vec4
(1, 0, 0, 0))) ? 0 : 1;

243  
Eº‹
;

244 
	}
}

246 
	$ã°_m©4x2_˘‹
()

248 
Eº‹
 = 0;

250 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


252 
	u∑ck


254 
glm
::
m©4x2
 
f
;

255 
glm
::
m©4x2
 
i
;

256 } 
A
, 
B
;

258 
A
.
f
 = 
glm
::
	`m©4x2
(0);

259 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
[0], glm::
	`vec2
(0))) ? 0 : 1;

261 
B
.
f
 = 
glm
::
	`m©4x2
(1);

262 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
[0], glm::
	`vec2
(1, 0))) ? 0 : 1;

266  
Eº‹
;

267 
	}
}

269 
	$ã°_m©4x3_˘‹
()

271 
Eº‹
 = 0;

273 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


275 
	u∑ck


277 
glm
::
m©4x3
 
f
;

278 
glm
::
m©4x3
 
i
;

279 } 
A
, 
B
;

281 
A
.
f
 = 
glm
::
	`m©4x3
(0);

282 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
[0], glm::
	`vec3
(0))) ? 0 : 1;

284 
B
.
f
 = 
glm
::
	`m©4x3
(1);

285 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
[0], glm::
	`vec3
(1, 0, 0))) ? 0 : 1;

289  
Eº‹
;

290 
	}
}

292 
	$ã°_m©4x4_˘‹
()

294 
Eº‹
 = 0;

296 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS


298 
	u∑ck


300 
glm
::
m©4
 
f
;

301 
glm
::
m©4
 
i
;

302 } 
A
, 
B
;

304 
A
.
f
 = 
glm
::
	`m©4
(0);

305 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
[0], glm::
	`vec4
(0))) ? 0 : 1;

307 
B
.
f
 = 
glm
::
	`m©4
(1);

308 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
[0], glm::
	`vec4
(1, 0, 0, 0))) ? 0 : 1;

312  
Eº‹
;

313 
	}
}

315 
	$ã°_qu©_˘‹
()

317 
Eº‹
 = 0;

319 #i‡
GLM_HAS_DEFAULTED_FUNCTIONS
 && 
	`deföed
(
GLM_FORCE_NO_CTOR_INIT
)

321 
	u∑ck


323 
glm
::
qu©
 
f
;

324 
glm
::
qu©
 
i
;

325 } 
A
, 
B
;

327 
A
.
f
 = 
glm
::
	`qu©
(0, 0, 0, 0);

328 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
.
i
, glm::
	`qu©
(0, 0, 0, 0))) ? 0 : 1;

330 
B
.
f
 = 
glm
::
	`qu©
(1, 1, 1, 1);

331 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
B
.
i
, glm::
	`qu©
(1, 1, 1, 1))) ? 0 : 1;

335  
Eº‹
;

336 
	}
}

338 
	$maö
()

340 
Eº‹
 = 0;

342 
Eº‹
 +
	`ã°_vec1_˘‹
();

343 
Eº‹
 +
	`ã°_vec2_˘‹
();

344 
Eº‹
 +
	`ã°_vec3_˘‹
();

345 
Eº‹
 +
	`ã°_vec4_˘‹
();

346 
Eº‹
 +
	`ã°_m©2x2_˘‹
();

347 
Eº‹
 +
	`ã°_m©2x3_˘‹
();

348 
Eº‹
 +
	`ã°_m©2x4_˘‹
();

349 
Eº‹
 +
	`ã°_m©3x2_˘‹
();

350 
Eº‹
 +
	`ã°_m©3x3_˘‹
();

351 
Eº‹
 +
	`ã°_m©3x4_˘‹
();

352 
Eº‹
 +
	`ã°_m©4x2_˘‹
();

353 
Eº‹
 +
	`ã°_m©4x3_˘‹
();

354 
Eº‹
 +
	`ã°_m©4x4_˘‹
();

355 
Eº‹
 +
	`ã°_qu©_˘‹
();

357  
Eº‹
;

358 
	}
}

	@glm/test/core/core_type_float.cpp

1 
	~<glm/glm.hµ
>

3 
	$ã°_Êﬂt_size
()

6 (
glm
::
Êﬂt_t
Ë!(glm::
lowp_Êﬂt
) &&

7 (
glm
::
Êﬂt_t
Ë!(glm::
mediump_Êﬂt
) &&

8 (
glm
::
Êﬂt_t
Ë!(glm::
highp_Êﬂt
);

9 
	}
}

11 
	$ã°_Êﬂt_¥ecisi⁄
()

14 (
glm
::
lowp_Êﬂt
Ë<(glm::
mediump_Êﬂt
) &&

15 (
glm
::
mediump_Êﬂt
Ë<(glm::
highp_Êﬂt
)) ? 0 : 1;

16 
	}
}

18 
	$ã°_vec2
()

21 
	}
}

23 
	$maö
()

25 
Eº‹
 = 0;

27 
Eº‹
 +
	`ã°_Êﬂt_size
();

28 
Eº‹
 +
	`ã°_Êﬂt_¥ecisi⁄
();

30  
Eº‹
;

31 
	}
}

	@glm/test/core/core_type_int.cpp

1 
	~<glm/glm.hµ
>

3 
	$ã°_öt_size
()

6 (
glm
::
öt_t
Ë!(glm::
lowp_öt
) &&

7 (
glm
::
öt_t
Ë!(glm::
mediump_öt
) &&

8 (
glm
::
öt_t
Ë!(glm::
highp_öt
);

9 
	}
}

11 
	$ã°_uöt_size
()

14 (
glm
::
uöt_t
Ë!(glm::
lowp_uöt
) &&

15 (
glm
::
uöt_t
Ë!(glm::
mediump_uöt
) &&

16 (
glm
::
uöt_t
Ë!(glm::
highp_uöt
);

17 
	}
}

19 
	$ã°_öt_¥ecisi⁄
()

22 (
glm
::
lowp_öt
Ë<(glm::
mediump_öt
) &&

23 (
glm
::
mediump_öt
Ë<(glm::
highp_öt
)) ? 0 : 1;

24 
	}
}

26 
	$ã°_uöt_¥ecisi⁄
()

29 (
glm
::
lowp_uöt
Ë<(glm::
mediump_uöt
) &&

30 (
glm
::
mediump_uöt
Ë<(glm::
highp_uöt
)) ? 0 : 1;

31 
	}
}

33 
	$maö
()

35 
Eº‹
 = 0;

37 
Eº‹
 +
	`ã°_öt_size
();

38 
Eº‹
 +
	`ã°_öt_¥ecisi⁄
();

39 
Eº‹
 +
	`ã°_uöt_size
();

40 
Eº‹
 +
	`ã°_uöt_¥ecisi⁄
();

42  
Eº‹
;

43 
	}
}

	@glm/test/core/core_type_length.cpp

1 
	~<glm/glm.hµ
>

3 
	$ã°_Àngth_m©_n⁄_squ¨ed
()

5 
Eº‹
 = 0;

7 
Eº‹
 +
glm
::
	`m©2x3
().
	`Àngth
() == 2 ? 0 : 1;

8 
Eº‹
 +
glm
::
	`m©2x4
().
	`Àngth
() == 2 ? 0 : 1;

9 
Eº‹
 +
glm
::
	`m©3x2
().
	`Àngth
() == 3 ? 0 : 1;

10 
Eº‹
 +
glm
::
	`m©3x4
().
	`Àngth
() == 3 ? 0 : 1;

11 
Eº‹
 +
glm
::
	`m©4x2
().
	`Àngth
() == 4 ? 0 : 1;

12 
Eº‹
 +
glm
::
	`m©4x3
().
	`Àngth
() == 4 ? 0 : 1;

14 
Eº‹
 +
glm
::
	`dm©2x3
().
	`Àngth
() == 2 ? 0 : 1;

15 
Eº‹
 +
glm
::
	`dm©2x4
().
	`Àngth
() == 2 ? 0 : 1;

16 
Eº‹
 +
glm
::
	`dm©3x2
().
	`Àngth
() == 3 ? 0 : 1;

17 
Eº‹
 +
glm
::
	`dm©3x4
().
	`Àngth
() == 3 ? 0 : 1;

18 
Eº‹
 +
glm
::
	`dm©4x2
().
	`Àngth
() == 4 ? 0 : 1;

19 
Eº‹
 +
glm
::
	`dm©4x3
().
	`Àngth
() == 4 ? 0 : 1;

21  
Eº‹
;

22 
	}
}

24 
	$ã°_Àngth_m©
()

26 
Eº‹
 = 0;

28 
Eº‹
 +
glm
::
	`m©2
().
	`Àngth
() == 2 ? 0 : 1;

29 
Eº‹
 +
glm
::
	`m©3
().
	`Àngth
() == 3 ? 0 : 1;

30 
Eº‹
 +
glm
::
	`m©4
().
	`Àngth
() == 4 ? 0 : 1;

31 
Eº‹
 +
glm
::
	`m©2x2
().
	`Àngth
() == 2 ? 0 : 1;

32 
Eº‹
 +
glm
::
	`m©3x3
().
	`Àngth
() == 3 ? 0 : 1;

33 
Eº‹
 +
glm
::
	`m©4x4
().
	`Àngth
() == 4 ? 0 : 1;

35 
Eº‹
 +
glm
::
	`dm©2
().
	`Àngth
() == 2 ? 0 : 1;

36 
Eº‹
 +
glm
::
	`dm©3
().
	`Àngth
() == 3 ? 0 : 1;

37 
Eº‹
 +
glm
::
	`dm©4
().
	`Àngth
() == 4 ? 0 : 1;

38 
Eº‹
 +
glm
::
	`dm©2x2
().
	`Àngth
() == 2 ? 0 : 1;

39 
Eº‹
 +
glm
::
	`dm©3x3
().
	`Àngth
() == 3 ? 0 : 1;

40 
Eº‹
 +
glm
::
	`dm©4x4
().
	`Àngth
() == 4 ? 0 : 1;

42  
Eº‹
;

43 
	}
}

45 
	$ã°_Àngth_vec
()

48 
Eº‹
 = 0;

50 
Eº‹
 +
glm
::
	`vec2
().
	`Àngth
() == 2 ? 0 : 1;

51 
Eº‹
 +
glm
::
	`vec3
().
	`Àngth
() == 3 ? 0 : 1;

52 
Eº‹
 +
glm
::
	`vec4
().
	`Àngth
() == 4 ? 0 : 1;

54 
Eº‹
 +
glm
::
	`ivec2
().
	`Àngth
() == 2 ? 0 : 1;

55 
Eº‹
 +
glm
::
	`ivec3
().
	`Àngth
() == 3 ? 0 : 1;

56 
Eº‹
 +
glm
::
	`ivec4
().
	`Àngth
() == 4 ? 0 : 1;

58 
Eº‹
 +
glm
::
	`uvec2
().
	`Àngth
() == 2 ? 0 : 1;

59 
Eº‹
 +
glm
::
	`uvec3
().
	`Àngth
() == 3 ? 0 : 1;

60 
Eº‹
 +
glm
::
	`uvec4
().
	`Àngth
() == 4 ? 0 : 1;

62 
Eº‹
 +
glm
::
	`dvec2
().
	`Àngth
() == 2 ? 0 : 1;

63 
Eº‹
 +
glm
::
	`dvec3
().
	`Àngth
() == 3 ? 0 : 1;

64 
Eº‹
 +
glm
::
	`dvec4
().
	`Àngth
() == 4 ? 0 : 1;

66  
Eº‹
;

67 
	}
}

69 
	$maö
()

71 
Eº‹
 = 0;

73 
Eº‹
 +
	`ã°_Àngth_vec
();

74 
Eº‹
 +
	`ã°_Àngth_m©
();

75 
Eº‹
 +
	`ã°_Àngth_m©_n⁄_squ¨ed
();

77  
Eº‹
;

78 
	}
}

	@glm/test/core/core_type_mat2x2.cpp

1 
	~<glm/gtc/ïsû⁄.hµ
>

2 
	~<glm/m©rix.hµ
>

3 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

4 
	~<glm/m©2x2.hµ
>

5 
	~<glm/m©2x3.hµ
>

6 
	~<glm/m©2x4.hµ
>

7 
	~<glm/m©3x2.hµ
>

8 
	~<glm/m©3x3.hµ
>

9 
	~<glm/m©3x4.hµ
>

10 
	~<glm/m©4x2.hµ
>

11 
	~<glm/m©4x3.hµ
>

12 
	~<glm/m©4x4.hµ
>

13 
	~<ve˘‹
>

15 
	$ã°_›î©‹s
()

17 
glm
::
m©2x2
 
	`l
(1.0f);

18 
glm
::
m©2x2
 
	`m
(1.0f);

19 
glm
::
vec2
 
	`u
(1.0f);

20 
glm
::
vec2
 
	`v
(1.0f);

21 
x
 = 1.0f;

22 
glm
::
vec2
 
a
 = 
m
 * 
u
;

23 
glm
::
vec2
 
b
 = 
v
 * 
m
;

24 
glm
::
m©2x2
 
n
 = 
x
 / 
m
;

25 
glm
::
m©2x2
 
o
 = 
m
 / 
x
;

26 
glm
::
m©2x2
 
p
 = 
x
 * 
m
;

27 
glm
::
m©2x2
 
q
 = 
m
 * 
x
;

28 
boﬁ
 
R
 = 
m
 !
q
;

29 
boﬁ
 
S
 = 
m
 =
l
;

31  (
S
 && !
R
) ? 0 : 1;

32 
	}
}

34 
	$ã°_övî£
()

36 
	`Eº‹
(0);

39 
glm
::
m©2
 c⁄° 
	`M©rix
(1, 2, 3, 4);

40 
glm
::
m©2
 c⁄° 
Invî£
 = glm::
	`övî£
(
M©rix
);

41 
glm
::
m©2
 c⁄° 
Idítôy
 = 
M©rix
 * 
Invî£
;

43 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[0], glm::
	`vec2
(1.0f, 0.0f), glm::vec2(0.01f))) ? 0 : 1;

44 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[1], glm::
	`vec2
(0.0f, 1.0f), glm::vec2(0.01f))) ? 0 : 1;

48 
glm
::
m©2
 c⁄° 
	`M©rix
(1, 2, 3, 4);

49 
glm
::
m©2
 c⁄° 
Idítôy
 = 
M©rix
 / Matrix;

51 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[0], glm::
	`vec2
(1.0f, 0.0f), glm::vec2(0.01f))) ? 0 : 1;

52 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[1], glm::
	`vec2
(0.0f, 1.0f), glm::vec2(0.01f))) ? 0 : 1;

55  
Eº‹
;

56 
	}
}

58 
	$ã°_˘r
()

60 
	`Eº‹
(0);

62 #i‡
GLM_HAS_INITIALIZER_LISTS


63 
glm
::
m©2x2
 
	`m0
(

64 
glm
::
	`vec2
(0, 1),

65 
glm
::
	`vec2
(2, 3));

67 
glm
::
m©2x2
 
m1
{0, 1, 2, 3};

69 
glm
::
m©2x2
 
m2
{

73 
glm
::
Àngth_t
 
i
 = 0; i < 
m0
.
	`Àngth
(); ++i)

74 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m0
[
i
], 
m2
[i])) ? 0 : 1;

76 
glm
::
Àngth_t
 
i
 = 0; i < 
m1
.
	`Àngth
(); ++i)

77 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m1
[
i
], 
m2
[i])) ? 0 : 1;

79 
°d
::
ve˘‹
<
glm
::
m©2x2
> 
v1
{

84 
°d
::
ve˘‹
<
glm
::
m©2x2
> 
v2
{

97  
Eº‹
;

98 
	}
}

100 
«me•a˚
 
	gˇ°


102 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

103 
íåy
()

105 
	gEº‹
 = 0;

107 
gíTy≥
 
A
(1.0f);

108 
	gglm
::
m©2
 
B
(
A
);

109 
	gglm
::
m©2
 
Idítôy
(1.0f);

111 
	gglm
::
Àngth_t
 
i
 = 0, 
	gÀngth
 = 
B
.
Àngth
(); 
	gi
 <Üength; ++i)

112 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B
[
i
], 
Idítôy
[i])) ? 0 : 1;

114  
	gEº‹
;

117 
ã°
()

119 
	gEº‹
 = 0;

121 
	gEº‹
 +
íåy
<
glm
::
m©2x2
>();

122 
	gEº‹
 +
íåy
<
glm
::
m©2x3
>();

123 
	gEº‹
 +
íåy
<
glm
::
m©2x4
>();

124 
	gEº‹
 +
íåy
<
glm
::
m©3x2
>();

125 
	gEº‹
 +
íåy
<
glm
::
m©3x3
>();

126 
	gEº‹
 +
íåy
<
glm
::
m©3x4
>();

127 
	gEº‹
 +
íåy
<
glm
::
m©4x2
>();

128 
	gEº‹
 +
íåy
<
glm
::
m©4x3
>();

129 
	gEº‹
 +
íåy
<
glm
::
m©4x4
>();

131  
	gEº‹
;

135 
	$ã°_size
()

137 
Eº‹
 = 0;

139 
Eº‹
 +16 =(
glm
::
m©2x2
) ? 0 : 1;

140 
Eº‹
 +32 =(
glm
::
dm©2x2
) ? 0 : 1;

141 
Eº‹
 +
glm
::
	`m©2x2
().
	`Àngth
() == 2 ? 0 : 1;

142 
Eº‹
 +
glm
::
	`dm©2x2
().
	`Àngth
() == 2 ? 0 : 1;

143 
Eº‹
 +
glm
::
m©2x2
::
	`Àngth
() == 2 ? 0 : 1;

144 
Eº‹
 +
glm
::
dm©2x2
::
	`Àngth
() == 2 ? 0 : 1;

146  
Eº‹
;

147 
	}
}

149 
	$maö
()

151 
	`Eº‹
(0);

153 
Eº‹
 +
ˇ°
::
	`ã°
();

154 
Eº‹
 +
	`ã°_˘r
();

155 
Eº‹
 +
	`ã°_›î©‹s
();

156 
Eº‹
 +
	`ã°_övî£
();

157 
Eº‹
 +
	`ã°_size
();

159  
Eº‹
;

160 
	}
}

	@glm/test/core/core_type_mat2x3.cpp

1 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

2 
	~<glm/m©2x2.hµ
>

3 
	~<glm/m©2x3.hµ
>

4 
	~<glm/m©2x4.hµ
>

5 
	~<glm/m©3x2.hµ
>

6 
	~<glm/m©3x3.hµ
>

7 
	~<glm/m©3x4.hµ
>

8 
	~<glm/m©4x2.hµ
>

9 
	~<glm/m©4x3.hµ
>

10 
	~<glm/m©4x4.hµ
>

11 
	~<ve˘‹
>

13 
	$ã°_›î©‹s
()

15 
glm
::
m©2x3
 
	`l
(1.0f);

16 
glm
::
m©2x3
 
	`m
(1.0f);

17 
glm
::
vec2
 
	`u
(1.0f);

18 
glm
::
vec3
 
	`v
(1.0f);

19 
x
 = 1.0f;

20 
glm
::
vec3
 
a
 = 
m
 * 
u
;

21 
glm
::
vec2
 
b
 = 
v
 * 
m
;

22 
glm
::
m©2x3
 
n
 = 
x
 / 
m
;

23 
glm
::
m©2x3
 
o
 = 
m
 / 
x
;

24 
glm
::
m©2x3
 
p
 = 
x
 * 
m
;

25 
glm
::
m©2x3
 
q
 = 
m
 * 
x
;

26 
boﬁ
 
R
 = 
m
 !
q
;

27 
boﬁ
 
S
 = 
m
 =
l
;

29  (
S
 && !
R
) ? 0 : 1;

30 
	}
}

32 
	$ã°_˘r
()

34 
	`Eº‹
(0);

36 #i‡
GLM_HAS_INITIALIZER_LISTS


37 
glm
::
m©2x3
 
	`m0
(

38 
glm
::
	`vec3
(0, 1, 2),

39 
glm
::
	`vec3
(3, 4, 5));

41 
glm
::
m©2x3
 
m1
{0, 1, 2, 3, 4, 5};

43 
glm
::
m©2x3
 
m2
{

47 
glm
::
Àngth_t
 
i
 = 0; i < 
m0
.
	`Àngth
(); ++i)

48 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m0
[
i
], 
m2
[i])) ? 0 : 1;

50 
glm
::
Àngth_t
 
i
 = 0; i < 
m1
.
	`Àngth
(); ++i)

51 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m1
[
i
], 
m2
[i])) ? 0 : 1;

53 
°d
::
ve˘‹
<
glm
::
m©2x3
> 
v1
{

58 
°d
::
ve˘‹
<
glm
::
m©2x3
> 
v2
{

71  
Eº‹
;

72 
	}
}

74 
«me•a˚
 
	gˇ°


76 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

77 
íåy
()

79 
	gEº‹
 = 0;

81 
gíTy≥
 
A
(1.0f);

82 
	gglm
::
m©2x3
 
B
(
A
);

83 
	gglm
::
m©2x3
 
Idítôy
(1.0f);

85 
	gglm
::
Àngth_t
 
i
 = 0, 
	gÀngth
 = 
B
.
Àngth
(); 
	gi
 <Üength; ++i)

86 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B
[
i
], 
Idítôy
[i])) ? 0 : 1;

88  
	gEº‹
;

91 
ã°
()

93 
	gEº‹
 = 0;

95 
	gEº‹
 +
íåy
<
glm
::
m©2x2
>();

96 
	gEº‹
 +
íåy
<
glm
::
m©2x3
>();

97 
	gEº‹
 +
íåy
<
glm
::
m©2x4
>();

98 
	gEº‹
 +
íåy
<
glm
::
m©3x2
>();

99 
	gEº‹
 +
íåy
<
glm
::
m©3x3
>();

100 
	gEº‹
 +
íåy
<
glm
::
m©3x4
>();

101 
	gEº‹
 +
íåy
<
glm
::
m©4x2
>();

102 
	gEº‹
 +
íåy
<
glm
::
m©4x3
>();

103 
	gEº‹
 +
íåy
<
glm
::
m©4x4
>();

105  
	gEº‹
;

109 
	$ã°_size
()

111 
Eº‹
 = 0;

113 
Eº‹
 +24 =(
glm
::
m©2x3
) ? 0 : 1;

114 
Eº‹
 +48 =(
glm
::
dm©2x3
) ? 0 : 1;

115 
Eº‹
 +
glm
::
	`m©2x3
().
	`Àngth
() == 2 ? 0 : 1;

116 
Eº‹
 +
glm
::
	`dm©2x3
().
	`Àngth
() == 2 ? 0 : 1;

117 
Eº‹
 +
glm
::
m©2x3
::
	`Àngth
() == 2 ? 0 : 1;

118 
Eº‹
 +
glm
::
dm©2x3
::
	`Àngth
() == 2 ? 0 : 1;

120  
Eº‹
;

121 
	}
}

123 
	$maö
()

125 
Eº‹
 = 0;

127 
Eº‹
 +
ˇ°
::
	`ã°
();

128 
Eº‹
 +
	`ã°_˘r
();

129 
Eº‹
 +
	`ã°_›î©‹s
();

130 
Eº‹
 +
	`ã°_size
();

132  
Eº‹
;

133 
	}
}

	@glm/test/core/core_type_mat2x4.cpp

1 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

2 
	~<glm/m©2x2.hµ
>

3 
	~<glm/m©2x3.hµ
>

4 
	~<glm/m©2x4.hµ
>

5 
	~<glm/m©3x2.hµ
>

6 
	~<glm/m©3x3.hµ
>

7 
	~<glm/m©3x4.hµ
>

8 
	~<glm/m©4x2.hµ
>

9 
	~<glm/m©4x3.hµ
>

10 
	~<glm/m©4x4.hµ
>

11 
	~<ve˘‹
>

13 
	$ã°_›î©‹s
()

15 
glm
::
m©2x4
 
	`l
(1.0f);

16 
glm
::
m©2x4
 
	`m
(1.0f);

17 
glm
::
vec2
 
	`u
(1.0f);

18 
glm
::
vec4
 
	`v
(1.0f);

19 
x
 = 1.0f;

20 
glm
::
vec4
 
a
 = 
m
 * 
u
;

21 
glm
::
vec2
 
b
 = 
v
 * 
m
;

22 
glm
::
m©2x4
 
n
 = 
x
 / 
m
;

23 
glm
::
m©2x4
 
o
 = 
m
 / 
x
;

24 
glm
::
m©2x4
 
p
 = 
x
 * 
m
;

25 
glm
::
m©2x4
 
q
 = 
m
 * 
x
;

26 
boﬁ
 
R
 = 
m
 !
q
;

27 
boﬁ
 
S
 = 
m
 =
l
;

29  (
S
 && !
R
) ? 0 : 1;

30 
	}
}

32 
	$ã°_˘r
()

34 
	`Eº‹
(0);

36 #if(
GLM_HAS_INITIALIZER_LISTS
)

37 
glm
::
m©2x4
 
	`m0
(

38 
glm
::
	`vec4
(0, 1, 2, 3),

39 
glm
::
	`vec4
(4, 5, 6, 7));

41 
glm
::
m©2x4
 
m1
{0, 1, 2, 3, 4, 5, 6, 7};

43 
glm
::
m©2x4
 
m2
{

47 
glm
::
Àngth_t
 
i
 = 0; i < 
m0
.
	`Àngth
(); ++i)

48 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m0
[
i
], 
m2
[i])) ? 0 : 1;

50 
glm
::
Àngth_t
 
i
 = 0; i < 
m1
.
	`Àngth
(); ++i)

51 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m1
[
i
], 
m2
[i])) ? 0 : 1;

53 
°d
::
ve˘‹
<
glm
::
m©2x4
> 
v1
{

58 
°d
::
ve˘‹
<
glm
::
m©2x4
> 
v2
{

71  
Eº‹
;

72 
	}
}

74 
«me•a˚
 
	gˇ°


76 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

77 
íåy
()

79 
	gEº‹
 = 0;

81 
gíTy≥
 
A
(1.0f);

82 
	gglm
::
m©2x4
 
B
(
A
);

83 
	gglm
::
m©2x4
 
Idítôy
(1.0f);

85 
	gglm
::
Àngth_t
 
i
 = 0, 
	gÀngth
 = 
B
.
Àngth
(); 
	gi
 <Üength; ++i)

86 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B
[
i
], 
Idítôy
[i])) ? 0 : 1;

88  
	gEº‹
;

91 
ã°
()

93 
	gEº‹
 = 0;

95 
	gEº‹
 +
íåy
<
glm
::
m©2x2
>();

96 
	gEº‹
 +
íåy
<
glm
::
m©2x3
>();

97 
	gEº‹
 +
íåy
<
glm
::
m©2x4
>();

98 
	gEº‹
 +
íåy
<
glm
::
m©3x2
>();

99 
	gEº‹
 +
íåy
<
glm
::
m©3x3
>();

100 
	gEº‹
 +
íåy
<
glm
::
m©3x4
>();

101 
	gEº‹
 +
íåy
<
glm
::
m©4x2
>();

102 
	gEº‹
 +
íåy
<
glm
::
m©4x3
>();

103 
	gEº‹
 +
íåy
<
glm
::
m©4x4
>();

105  
	gEº‹
;

109 
	$ã°_size
()

111 
Eº‹
 = 0;

113 
Eº‹
 +32 =(
glm
::
m©2x4
) ? 0 : 1;

114 
Eº‹
 +64 =(
glm
::
dm©2x4
) ? 0 : 1;

115 
Eº‹
 +
glm
::
	`m©2x4
().
	`Àngth
() == 2 ? 0 : 1;

116 
Eº‹
 +
glm
::
	`dm©2x4
().
	`Àngth
() == 2 ? 0 : 1;

117 
Eº‹
 +
glm
::
m©2x4
::
	`Àngth
() == 2 ? 0 : 1;

118 
Eº‹
 +
glm
::
dm©2x4
::
	`Àngth
() == 2 ? 0 : 1;

120  
Eº‹
;

121 
	}
}

123 
	$maö
()

125 
Eº‹
 = 0;

127 
Eº‹
 +
ˇ°
::
	`ã°
();

128 
Eº‹
 +
	`ã°_˘r
();

129 
Eº‹
 +
	`ã°_›î©‹s
();

130 
Eº‹
 +
	`ã°_size
();

132  
Eº‹
;

133 
	}
}

	@glm/test/core/core_type_mat3x2.cpp

1 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

2 
	~<glm/m©2x2.hµ
>

3 
	~<glm/m©2x3.hµ
>

4 
	~<glm/m©2x4.hµ
>

5 
	~<glm/m©3x2.hµ
>

6 
	~<glm/m©3x3.hµ
>

7 
	~<glm/m©3x4.hµ
>

8 
	~<glm/m©4x2.hµ
>

9 
	~<glm/m©4x3.hµ
>

10 
	~<glm/m©4x4.hµ
>

11 
	~<ve˘‹
>

13 
boﬁ
 
	$ã°_›î©‹s
()

15 
glm
::
m©3x2
 
	`l
(1.0f);

16 
glm
::
m©3x2
 
	`m
(1.0f);

17 
glm
::
vec3
 
	`u
(1.0f);

18 
glm
::
vec2
 
	`v
(1.0f);

19 
x
 = 1.0f;

20 
glm
::
vec2
 
a
 = 
m
 * 
u
;

21 
glm
::
vec3
 
b
 = 
v
 * 
m
;

22 
glm
::
m©3x2
 
n
 = 
x
 / 
m
;

23 
glm
::
m©3x2
 
o
 = 
m
 / 
x
;

24 
glm
::
m©3x2
 
p
 = 
x
 * 
m
;

25 
glm
::
m©3x2
 
q
 = 
m
 * 
x
;

26 
boﬁ
 
R
 = 
m
 !
q
;

27 
boﬁ
 
S
 = 
m
 =
l
;

29  (
S
 && !
R
) ? 0 : 1;

30 
	}
}

32 
	$ã°_˘r
()

34 
	`Eº‹
(0);

36 #if(
GLM_HAS_INITIALIZER_LISTS
)

37 
glm
::
m©3x2
 
	`m0
(

38 
glm
::
	`vec2
(0, 1),

39 
glm
::
	`vec2
(2, 3),

40 
glm
::
	`vec2
(4, 5));

42 
glm
::
m©3x2
 
m1
{0, 1, 2, 3, 4, 5};

44 
glm
::
m©3x2
 
m2
{

49 
glm
::
Àngth_t
 
i
 = 0; i < 
m0
.
	`Àngth
(); ++i)

50 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m0
[
i
], 
m2
[i])) ? 0 : 1;

52 
glm
::
Àngth_t
 
i
 = 0; i < 
m1
.
	`Àngth
(); ++i)

53 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m1
[
i
], 
m2
[i])) ? 0 : 1;

55 
°d
::
ve˘‹
<
glm
::
m©3x2
> 
v1
{

60 
°d
::
ve˘‹
<
glm
::
m©3x2
> 
v2
{

75  
Eº‹
;

76 
	}
}

78 
«me•a˚
 
	gˇ°


80 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

81 
íåy
()

83 
	gEº‹
 = 0;

85 
gíTy≥
 
A
(1.0f);

86 
	gglm
::
m©3x2
 
B
(
A
);

87 
	gglm
::
m©3x2
 
Idítôy
(1.0f);

89 
	gglm
::
Àngth_t
 
i
 = 0, 
	gÀngth
 = 
B
.
Àngth
(); 
	gi
 <Üength; ++i)

90 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B
[
i
], 
Idítôy
[i])) ? 0 : 1;

92  
	gEº‹
;

95 
ã°
()

97 
	gEº‹
 = 0;

99 
	gEº‹
 +
íåy
<
glm
::
m©2x2
>();

100 
	gEº‹
 +
íåy
<
glm
::
m©2x3
>();

101 
	gEº‹
 +
íåy
<
glm
::
m©2x4
>();

102 
	gEº‹
 +
íåy
<
glm
::
m©3x2
>();

103 
	gEº‹
 +
íåy
<
glm
::
m©3x3
>();

104 
	gEº‹
 +
íåy
<
glm
::
m©3x4
>();

105 
	gEº‹
 +
íåy
<
glm
::
m©4x2
>();

106 
	gEº‹
 +
íåy
<
glm
::
m©4x3
>();

107 
	gEº‹
 +
íåy
<
glm
::
m©4x4
>();

109  
	gEº‹
;

113 
	$ã°_size
()

115 
Eº‹
 = 0;

117 
Eº‹
 +24 =(
glm
::
m©3x2
) ? 0 : 1;

118 
Eº‹
 +48 =(
glm
::
dm©3x2
) ? 0 : 1;

119 
Eº‹
 +
glm
::
	`m©3x2
().
	`Àngth
() == 3 ? 0 : 1;

120 
Eº‹
 +
glm
::
	`dm©3x2
().
	`Àngth
() == 3 ? 0 : 1;

121 
Eº‹
 +
glm
::
m©3x2
::
	`Àngth
() == 3 ? 0 : 1;

122 
Eº‹
 +
glm
::
dm©3x2
::
	`Àngth
() == 3 ? 0 : 1;

124  
Eº‹
;

125 
	}
}

127 
	$maö
()

129 
Eº‹
 = 0;

131 
Eº‹
 +
ˇ°
::
	`ã°
();

132 
Eº‹
 +
	`ã°_˘r
();

133 
Eº‹
 +
	`ã°_›î©‹s
();

134 
Eº‹
 +
	`ã°_size
();

136  
Eº‹
;

137 
	}
}

	@glm/test/core/core_type_mat3x3.cpp

1 
	~<glm/gtc/ïsû⁄.hµ
>

2 
	~<glm/m©rix.hµ
>

3 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

4 
	~<glm/m©2x2.hµ
>

5 
	~<glm/m©2x3.hµ
>

6 
	~<glm/m©2x4.hµ
>

7 
	~<glm/m©3x2.hµ
>

8 
	~<glm/m©3x3.hµ
>

9 
	~<glm/m©3x4.hµ
>

10 
	~<glm/m©4x2.hµ
>

11 
	~<glm/m©4x3.hµ
>

12 
	~<glm/m©4x4.hµ
>

13 
	~<c°dio
>

14 
	~<ve˘‹
>

16 
	$¥öt
(
glm
::
dm©3
 c⁄° & 
M©0
)

18 
	`¥ötf
("mat3(\n");

19 
	`¥ötf
("\tvec3(%2.3f, %2.3f, %2.3f)\n", 
M©0
[0][0], Mat0[0][1], Mat0[0][2]);

20 
	`¥ötf
("\tvec3(%2.3f, %2.3f, %2.3f)\n", 
M©0
[1][0], Mat0[1][1], Mat0[1][2]);

21 
	`¥ötf
("\tvec3(%2.3f, %2.3f, %2.3f))\n\n", 
M©0
[2][0], Mat0[2][1], Mat0[2][2]);

22 
	}
}

24 
	$ã°_m©3x3
()

26 
glm
::
dm©3
 
	`M©0
(

27 
glm
::
	`dvec3
(0.6f, 0.2f, 0.3f),

28 
glm
::
	`dvec3
(0.2f, 0.7f, 0.5f),

29 
glm
::
	`dvec3
(0.3f, 0.5f, 0.7f));

30 
glm
::
dm©3
 
Inv0
 = glm::
	`övî£
(
M©0
);

31 
glm
::
dm©3
 
Res0
 = 
M©0
 * 
Inv0
;

33 
	`¥öt
(
M©0
);

34 
	`¥öt
(
Inv0
);

35 
	`¥öt
(
Res0
);

38 
	}
}

40 
	$ã°_›î©‹s
()

42 
glm
::
m©3x3
 
	`l
(1.0f);

43 
glm
::
m©3x3
 
	`m
(1.0f);

44 
glm
::
vec3
 
	`u
(1.0f);

45 
glm
::
vec3
 
	`v
(1.0f);

46 
x
 = 1.0f;

47 
glm
::
vec3
 
a
 = 
m
 * 
u
;

48 
glm
::
vec3
 
b
 = 
v
 * 
m
;

49 
glm
::
m©3x3
 
n
 = 
x
 / 
m
;

50 
glm
::
m©3x3
 
o
 = 
m
 / 
x
;

51 
glm
::
m©3x3
 
p
 = 
x
 * 
m
;

52 
glm
::
m©3x3
 
q
 = 
m
 * 
x
;

53 
boﬁ
 
R
 = 
m
 !
q
;

54 
boﬁ
 
S
 = 
m
 =
l
;

56  (
S
 && !
R
) ? 0 : 1;

57 
	}
}

59 
	$ã°_övî£
()

61 
	`Eº‹
(0);

64 
glm
::
m©3
 c⁄° 
	`M©rix
(

65 
glm
::
	`vec3
(0.6f, 0.2f, 0.3f),

66 
glm
::
	`vec3
(0.2f, 0.7f, 0.5f),

67 
glm
::
	`vec3
(0.3f, 0.5f, 0.7f));

68 
glm
::
m©3
 c⁄° 
Invî£
 = glm::
	`övî£
(
M©rix
);

69 
glm
::
m©3
 c⁄° 
Idítôy
 = 
M©rix
 * 
Invî£
;

71 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[0], glm::
	`vec3
(1.0f, 0.0f, 0.0f), glm::vec3(0.01f))) ? 0 : 1;

72 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[1], glm::
	`vec3
(0.0f, 1.0f, 0.0f), glm::vec3(0.01f))) ? 0 : 1;

73 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[2], glm::
	`vec3
(0.0f, 0.0f, 1.0f), glm::vec3(0.01f))) ? 0 : 1;

77 
glm
::
m©3
 c⁄° 
	`M©rix
(

78 
glm
::
	`vec3
(0.6f, 0.2f, 0.3f),

79 
glm
::
	`vec3
(0.2f, 0.7f, 0.5f),

80 
glm
::
	`vec3
(0.3f, 0.5f, 0.7f));

81 
glm
::
m©3
 c⁄° 
Idítôy
 = 
M©rix
 / Matrix;

83 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[0], glm::
	`vec3
(1.0f, 0.0f, 0.0f), glm::vec3(0.01f))) ? 0 : 1;

84 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[1], glm::
	`vec3
(0.0f, 1.0f, 0.0f), glm::vec3(0.01f))) ? 0 : 1;

85 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[2], glm::
	`vec3
(0.0f, 0.0f, 1.0f), glm::vec3(0.01f))) ? 0 : 1;

88  
Eº‹
;

89 
	}
}

91 
	$ã°_˘r
()

93 
	`Eº‹
(0);

95 #if(
GLM_HAS_INITIALIZER_LISTS
)

96 
glm
::
m©3x3
 
	`m0
(

97 
glm
::
	`vec3
(0, 1, 2),

98 
glm
::
	`vec3
(3, 4, 5),

99 
glm
::
	`vec3
(6, 7, 8));

101 
glm
::
m©3x3
 
m1
{0, 1, 2, 3, 4, 5, 6, 7, 8};

103 
glm
::
m©3x3
 
m2
{

108 
glm
::
Àngth_t
 
i
 = 0; i < 
m0
.
	`Àngth
(); ++i)

109 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m0
[
i
], 
m2
[i])) ? 0 : 1;

111 
glm
::
Àngth_t
 
i
 = 0; i < 
m1
.
	`Àngth
(); ++i)

112 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m1
[
i
], 
m2
[i])) ? 0 : 1;

114 
°d
::
ve˘‹
<
glm
::
m©3x3
> 
v1
{

119 
°d
::
ve˘‹
<
glm
::
m©3x3
> 
v2
{

134  
Eº‹
;

135 
	}
}

137 
«me•a˚
 
	gˇ°


139 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

140 
íåy
()

142 
	gEº‹
 = 0;

144 
gíTy≥
 
A
(1.0f);

145 
	gglm
::
m©3x3
 
B
(
A
);

146 
	gglm
::
m©3x3
 
Idítôy
(1.0f);

148 
	gglm
::
Àngth_t
 
i
 = 0, 
	gÀngth
 = 
B
.
Àngth
(); 
	gi
 <Üength; ++i)

149 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B
[
i
], 
Idítôy
[i])) ? 0 : 1;

151  
	gEº‹
;

154 
ã°
()

156 
	gEº‹
 = 0;

158 
	gEº‹
 +
íåy
<
glm
::
m©2x2
>();

159 
	gEº‹
 +
íåy
<
glm
::
m©2x3
>();

160 
	gEº‹
 +
íåy
<
glm
::
m©2x4
>();

161 
	gEº‹
 +
íåy
<
glm
::
m©3x2
>();

162 
	gEº‹
 +
íåy
<
glm
::
m©3x3
>();

163 
	gEº‹
 +
íåy
<
glm
::
m©3x4
>();

164 
	gEº‹
 +
íåy
<
glm
::
m©4x2
>();

165 
	gEº‹
 +
íåy
<
glm
::
m©4x3
>();

166 
	gEº‹
 +
íåy
<
glm
::
m©4x4
>();

168  
	gEº‹
;

172 
	$ã°_size
()

174 
Eº‹
 = 0;

176 
Eº‹
 +36 =(
glm
::
m©3x3
) ? 0 : 1;

177 
Eº‹
 +72 =(
glm
::
dm©3x3
) ? 0 : 1;

178 
Eº‹
 +
glm
::
	`m©3x3
().
	`Àngth
() == 3 ? 0 : 1;

179 
Eº‹
 +
glm
::
	`dm©3x3
().
	`Àngth
() == 3 ? 0 : 1;

180 
Eº‹
 +
glm
::
m©3x3
::
	`Àngth
() == 3 ? 0 : 1;

181 
Eº‹
 +
glm
::
dm©3x3
::
	`Àngth
() == 3 ? 0 : 1;

183  
Eº‹
;

184 
	}
}

186 
	$maö
()

188 
Eº‹
 = 0;

190 
Eº‹
 +
ˇ°
::
	`ã°
();

191 
Eº‹
 +
	`ã°_˘r
();

192 
Eº‹
 +
	`ã°_m©3x3
();

193 
Eº‹
 +
	`ã°_›î©‹s
();

194 
Eº‹
 +
	`ã°_övî£
();

195 
Eº‹
 +
	`ã°_size
();

197  
Eº‹
;

198 
	}
}

	@glm/test/core/core_type_mat3x4.cpp

1 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

2 
	~<glm/m©2x2.hµ
>

3 
	~<glm/m©2x3.hµ
>

4 
	~<glm/m©2x4.hµ
>

5 
	~<glm/m©3x2.hµ
>

6 
	~<glm/m©3x3.hµ
>

7 
	~<glm/m©3x4.hµ
>

8 
	~<glm/m©4x2.hµ
>

9 
	~<glm/m©4x3.hµ
>

10 
	~<glm/m©4x4.hµ
>

11 
	~<ve˘‹
>

13 
boﬁ
 
	$ã°_›î©‹s
()

15 
glm
::
m©3x4
 
	`l
(1.0f);

16 
glm
::
m©3x4
 
	`m
(1.0f);

17 
glm
::
vec3
 
	`u
(1.0f);

18 
glm
::
vec4
 
	`v
(1.0f);

19 
x
 = 1.0f;

20 
glm
::
vec4
 
a
 = 
m
 * 
u
;

21 
glm
::
vec3
 
b
 = 
v
 * 
m
;

22 
glm
::
m©3x4
 
n
 = 
x
 / 
m
;

23 
glm
::
m©3x4
 
o
 = 
m
 / 
x
;

24 
glm
::
m©3x4
 
p
 = 
x
 * 
m
;

25 
glm
::
m©3x4
 
q
 = 
m
 * 
x
;

26 
boﬁ
 
R
 = 
m
 !
q
;

27 
boﬁ
 
S
 = 
m
 =
l
;

29  (
S
 && !
R
) ? 0 : 1;

30 
	}
}

32 
	$ã°_˘r
()

34 
	`Eº‹
(0);

36 #if(
GLM_HAS_INITIALIZER_LISTS
)

37 
glm
::
m©3x4
 
	`m0
(

38 
glm
::
	`vec4
(0, 1, 2, 3),

39 
glm
::
	`vec4
(4, 5, 6, 7),

40 
glm
::
	`vec4
(8, 9, 10, 11));

42 
glm
::
m©3x4
 
m1
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

44 
glm
::
m©3x4
 
m2
{

49 
glm
::
Àngth_t
 
i
 = 0; i < 
m0
.
	`Àngth
(); ++i)

50 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m0
[
i
], 
m2
[i])) ? 0 : 1;

52 
glm
::
Àngth_t
 
i
 = 0; i < 
m1
.
	`Àngth
(); ++i)

53 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m1
[
i
], 
m2
[i])) ? 0 : 1;

55 
°d
::
ve˘‹
<
glm
::
m©3x4
> 
v1
{

60 
°d
::
ve˘‹
<
glm
::
m©3x4
> 
v2
{

75  
Eº‹
;

76 
	}
}

78 
«me•a˚
 
	gˇ°


80 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

81 
íåy
()

83 
	gEº‹
 = 0;

85 
gíTy≥
 
A
(1.0f);

86 
	gglm
::
m©3x4
 
B
(
A
);

87 
	gglm
::
m©3x4
 
Idítôy
(1.0f);

89 
	gglm
::
Àngth_t
 
i
 = 0, 
	gÀngth
 = 
B
.
Àngth
(); 
	gi
 <Üength; ++i)

90 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B
[
i
], 
Idítôy
[i])) ? 0 : 1;

92  
	gEº‹
;

95 
ã°
()

97 
	gEº‹
 = 0;

99 
	gEº‹
 +
íåy
<
glm
::
m©2x2
>();

100 
	gEº‹
 +
íåy
<
glm
::
m©2x3
>();

101 
	gEº‹
 +
íåy
<
glm
::
m©2x4
>();

102 
	gEº‹
 +
íåy
<
glm
::
m©3x2
>();

103 
	gEº‹
 +
íåy
<
glm
::
m©3x3
>();

104 
	gEº‹
 +
íåy
<
glm
::
m©3x4
>();

105 
	gEº‹
 +
íåy
<
glm
::
m©4x2
>();

106 
	gEº‹
 +
íåy
<
glm
::
m©4x3
>();

107 
	gEº‹
 +
íåy
<
glm
::
m©4x4
>();

109  
	gEº‹
;

113 
	$ã°_size
()

115 
Eº‹
 = 0;

117 
Eº‹
 +48 =(
glm
::
m©3x4
) ? 0 : 1;

118 
Eº‹
 +96 =(
glm
::
dm©3x4
) ? 0 : 1;

119 
Eº‹
 +
glm
::
	`m©3x4
().
	`Àngth
() == 3 ? 0 : 1;

120 
Eº‹
 +
glm
::
	`dm©3x4
().
	`Àngth
() == 3 ? 0 : 1;

121 
Eº‹
 +
glm
::
m©3x4
::
	`Àngth
() == 3 ? 0 : 1;

122 
Eº‹
 +
glm
::
dm©3x4
::
	`Àngth
() == 3 ? 0 : 1;

124  
Eº‹
;

125 
	}
}

127 
	$maö
()

129 
Eº‹
 = 0;

131 
Eº‹
 +
ˇ°
::
	`ã°
();

132 
Eº‹
 +
	`ã°_˘r
();

133 
Eº‹
 +
	`ã°_›î©‹s
();

134 
Eº‹
 +
	`ã°_size
();

136  
Eº‹
;

137 
	}
}

	@glm/test/core/core_type_mat4x2.cpp

1 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

2 
	~<glm/m©2x2.hµ
>

3 
	~<glm/m©2x3.hµ
>

4 
	~<glm/m©2x4.hµ
>

5 
	~<glm/m©3x2.hµ
>

6 
	~<glm/m©3x3.hµ
>

7 
	~<glm/m©3x4.hµ
>

8 
	~<glm/m©4x2.hµ
>

9 
	~<glm/m©4x3.hµ
>

10 
	~<glm/m©4x4.hµ
>

11 
	~<ve˘‹
>

13 
	$ã°_›î©‹s
()

15 
glm
::
m©4x2
 
	`l
(1.0f);

16 
glm
::
m©4x2
 
	`m
(1.0f);

17 
glm
::
vec4
 
	`u
(1.0f);

18 
glm
::
vec2
 
	`v
(1.0f);

19 
x
 = 1.0f;

20 
glm
::
vec2
 
a
 = 
m
 * 
u
;

21 
glm
::
vec4
 
b
 = 
v
 * 
m
;

22 
glm
::
m©4x2
 
n
 = 
x
 / 
m
;

23 
glm
::
m©4x2
 
o
 = 
m
 / 
x
;

24 
glm
::
m©4x2
 
p
 = 
x
 * 
m
;

25 
glm
::
m©4x2
 
q
 = 
m
 * 
x
;

26 
boﬁ
 
R
 = 
m
 !
q
;

27 
boﬁ
 
S
 = 
m
 =
l
;

29  (
S
 && !
R
) ? 0 : 1;

30 
	}
}

32 
	$ã°_˘r
()

34 
	`Eº‹
(0);

36 #if(
GLM_HAS_INITIALIZER_LISTS
)

37 
glm
::
m©4x2
 
	`m0
(

38 
glm
::
	`vec2
(0, 1),

39 
glm
::
	`vec2
(2, 3),

40 
glm
::
	`vec2
(4, 5),

41 
glm
::
	`vec2
(6, 7));

43 
glm
::
m©4x2
 
m1
{0, 1, 2, 3, 4, 5, 6, 7};

45 
glm
::
m©4x2
 
m2
{

51 
glm
::
Àngth_t
 
i
 = 0; i < 
m0
.
	`Àngth
(); ++i)

52 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m0
[
i
], 
m2
[i])) ? 0 : 1;

54 
glm
::
Àngth_t
 
i
 = 0; i < 
m1
.
	`Àngth
(); ++i)

55 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m1
[
i
], 
m2
[i])) ? 0 : 1;

57 
°d
::
ve˘‹
<
glm
::
m©4x2
> 
v1
{

62 
°d
::
ve˘‹
<
glm
::
m©4x2
> 
v2
{

79  
Eº‹
;

80 
	}
}

82 
«me•a˚
 
	gˇ°


84 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

85 
íåy
()

87 
	gEº‹
 = 0;

89 
gíTy≥
 
A
(1.0f);

90 
	gglm
::
m©4x2
 
B
(
A
);

91 
	gglm
::
m©4x2
 
Idítôy
(1.0f);

93 
	gglm
::
Àngth_t
 
i
 = 0, 
	gÀngth
 = 
B
.
Àngth
(); 
	gi
 <Üength; ++i)

94 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B
[
i
], 
Idítôy
[i])) ? 0 : 1;

96  
	gEº‹
;

99 
ã°
()

101 
	gEº‹
 = 0;

103 
	gEº‹
 +
íåy
<
glm
::
m©2x2
>();

104 
	gEº‹
 +
íåy
<
glm
::
m©2x3
>();

105 
	gEº‹
 +
íåy
<
glm
::
m©2x4
>();

106 
	gEº‹
 +
íåy
<
glm
::
m©3x2
>();

107 
	gEº‹
 +
íåy
<
glm
::
m©3x3
>();

108 
	gEº‹
 +
íåy
<
glm
::
m©3x4
>();

109 
	gEº‹
 +
íåy
<
glm
::
m©4x2
>();

110 
	gEº‹
 +
íåy
<
glm
::
m©4x3
>();

111 
	gEº‹
 +
íåy
<
glm
::
m©4x4
>();

113  
	gEº‹
;

117 
	$ã°_size
()

119 
Eº‹
 = 0;

121 
Eº‹
 +32 =(
glm
::
m©4x2
) ? 0 : 1;

122 
Eº‹
 +64 =(
glm
::
dm©4x2
) ? 0 : 1;

123 
Eº‹
 +
glm
::
	`m©4x2
().
	`Àngth
() == 4 ? 0 : 1;

124 
Eº‹
 +
glm
::
	`dm©4x2
().
	`Àngth
() == 4 ? 0 : 1;

125 
Eº‹
 +
glm
::
m©4x2
::
	`Àngth
() == 4 ? 0 : 1;

126 
Eº‹
 +
glm
::
dm©4x2
::
	`Àngth
() == 4 ? 0 : 1;

128  
Eº‹
;

129 
	}
}

131 
	$maö
()

133 
Eº‹
 = 0;

135 
Eº‹
 +
ˇ°
::
	`ã°
();

136 
Eº‹
 +
	`ã°_˘r
();

137 
Eº‹
 +
	`ã°_›î©‹s
();

138 
Eº‹
 +
	`ã°_size
();

140  
Eº‹
;

141 
	}
}

	@glm/test/core/core_type_mat4x3.cpp

1 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

2 
	~<glm/m©2x2.hµ
>

3 
	~<glm/m©2x3.hµ
>

4 
	~<glm/m©2x4.hµ
>

5 
	~<glm/m©3x2.hµ
>

6 
	~<glm/m©3x3.hµ
>

7 
	~<glm/m©3x4.hµ
>

8 
	~<glm/m©4x2.hµ
>

9 
	~<glm/m©4x3.hµ
>

10 
	~<glm/m©4x4.hµ
>

11 
	~<ve˘‹
>

13 
	$ã°_›î©‹s
()

15 
glm
::
m©4x3
 
	`l
(1.0f);

16 
glm
::
m©4x3
 
	`m
(1.0f);

17 
glm
::
vec4
 
	`u
(1.0f);

18 
glm
::
vec3
 
	`v
(1.0f);

19 
x
 = 1.0f;

20 
glm
::
vec3
 
a
 = 
m
 * 
u
;

21 
glm
::
vec4
 
b
 = 
v
 * 
m
;

22 
glm
::
m©4x3
 
n
 = 
x
 / 
m
;

23 
glm
::
m©4x3
 
o
 = 
m
 / 
x
;

24 
glm
::
m©4x3
 
p
 = 
x
 * 
m
;

25 
glm
::
m©4x3
 
q
 = 
m
 * 
x
;

26 
boﬁ
 
R
 = 
m
 !
q
;

27 
boﬁ
 
S
 = 
m
 =
l
;

29  (
S
 && !
R
) ? 0 : 1;

30 
	}
}

32 
	$ã°_˘r
()

34 
	`Eº‹
(0);

36 #if(
GLM_HAS_INITIALIZER_LISTS
)

37 
glm
::
m©4x3
 
	`m0
(

38 
glm
::
	`vec3
(0, 1, 2),

39 
glm
::
	`vec3
(3, 4, 5),

40 
glm
::
	`vec3
(6, 7, 8),

41 
glm
::
	`vec3
(9, 10, 11));

43 
glm
::
m©4x3
 
m1
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

45 
glm
::
m©4x3
 
m2
{

51 
glm
::
Àngth_t
 
i
 = 0; i < 
m0
.
	`Àngth
(); ++i)

52 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m0
[
i
], 
m2
[i])) ? 0 : 1;

54 
glm
::
Àngth_t
 
i
 = 0; i < 
m1
.
	`Àngth
(); ++i)

55 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m1
[
i
], 
m2
[i])) ? 0 : 1;

57 
°d
::
ve˘‹
<
glm
::
m©4x3
> 
v1
{

62 
°d
::
ve˘‹
<
glm
::
m©4x3
> 
v2
{

79  
Eº‹
;

80 
	}
}

82 
«me•a˚
 
	gˇ°


84 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

85 
íåy
()

87 
	gEº‹
 = 0;

89 
gíTy≥
 
A
(1.0f);

90 
	gglm
::
m©4x3
 
B
(
A
);

91 
	gglm
::
m©4x3
 
Idítôy
(1.0f);

93 
	gglm
::
Àngth_t
 
i
 = 0, 
	gÀngth
 = 
B
.
Àngth
(); 
	gi
 <Üength; ++i)

94 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B
[
i
], 
Idítôy
[i])) ? 0 : 1;

96  
	gEº‹
;

99 
ã°
()

101 
	gEº‹
 = 0;

103 
	gEº‹
 +
íåy
<
glm
::
m©2x2
>();

104 
	gEº‹
 +
íåy
<
glm
::
m©2x3
>();

105 
	gEº‹
 +
íåy
<
glm
::
m©2x4
>();

106 
	gEº‹
 +
íåy
<
glm
::
m©3x2
>();

107 
	gEº‹
 +
íåy
<
glm
::
m©3x3
>();

108 
	gEº‹
 +
íåy
<
glm
::
m©3x4
>();

109 
	gEº‹
 +
íåy
<
glm
::
m©4x2
>();

110 
	gEº‹
 +
íåy
<
glm
::
m©4x3
>();

111 
	gEº‹
 +
íåy
<
glm
::
m©4x4
>();

113  
	gEº‹
;

117 
	$ã°_size
()

119 
Eº‹
 = 0;

121 
Eº‹
 +48 =(
glm
::
m©4x3
) ? 0 : 1;

122 
Eº‹
 +96 =(
glm
::
dm©4x3
) ? 0 : 1;

123 
Eº‹
 +
glm
::
	`m©4x3
().
	`Àngth
() == 4 ? 0 : 1;

124 
Eº‹
 +
glm
::
	`dm©4x3
().
	`Àngth
() == 4 ? 0 : 1;

125 
Eº‹
 +
glm
::
m©4x3
::
	`Àngth
() == 4 ? 0 : 1;

126 
Eº‹
 +
glm
::
dm©4x3
::
	`Àngth
() == 4 ? 0 : 1;

128  
Eº‹
;

129 
	}
}

131 
	$maö
()

133 
Eº‹
 = 0;

135 
Eº‹
 +
ˇ°
::
	`ã°
();

136 
Eº‹
 +
	`ã°_˘r
();

137 
Eº‹
 +
	`ã°_›î©‹s
();

138 
Eº‹
 +
	`ã°_size
();

140  
Eº‹
;

141 
	}
}

	@glm/test/core/core_type_mat4x4.cpp

1 
	~<glm/gtc/ïsû⁄.hµ
>

2 
	~<glm/m©rix.hµ
>

3 
	~<glm/m©2x2.hµ
>

4 
	~<glm/m©2x3.hµ
>

5 
	~<glm/m©2x4.hµ
>

6 
	~<glm/m©3x2.hµ
>

7 
	~<glm/m©3x3.hµ
>

8 
	~<glm/m©3x4.hµ
>

9 
	~<glm/m©4x2.hµ
>

10 
	~<glm/m©4x3.hµ
>

11 
	~<glm/m©4x4.hµ
>

12 
	~<c°dio
>

13 
	~<ve˘‹
>

16 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

17 
	$¥öt
(
gíTy≥
 c⁄° & 
M©0
)

19 
	`¥ötf
("mat4(\n");

20 
	`¥ötf
("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", 
M©0
[0][0], Mat0[0][1], Mat0[0][2], Mat0[0][3]);

21 
	`¥ötf
("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", 
M©0
[1][0], Mat0[1][1], Mat0[1][2], Mat0[1][3]);

22 
	`¥ötf
("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", 
M©0
[2][0], Mat0[2][1], Mat0[2][2], Mat0[2][3]);

23 
	`¥ötf
("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f))\n\n", 
M©0
[3][0], Mat0[3][1], Mat0[3][2], Mat0[3][3]);

24 
	}
}

26 
	$ã°_övî£_m©4x4
()

28 
glm
::
m©4
 
	`M©0
(

29 
glm
::
	`vec4
(0.6f, 0.2f, 0.3f, 0.4f),

30 
glm
::
	`vec4
(0.2f, 0.7f, 0.5f, 0.3f),

31 
glm
::
	`vec4
(0.3f, 0.5f, 0.7f, 0.2f),

32 
glm
::
	`vec4
(0.4f, 0.3f, 0.2f, 0.6f));

33 
glm
::
m©4
 
Inv0
 = glm::
	`övî£
(
M©0
);

34 
glm
::
m©4
 
Res0
 = 
M©0
 * 
Inv0
;

36 
	`¥öt
(
M©0
);

37 
	`¥öt
(
Inv0
);

38 
	`¥öt
(
Res0
);

41 
	}
}

43 
	$ã°_övî£_dm©4x4
()

45 
glm
::
dm©4
 
	`M©0
(

46 
glm
::
	`dvec4
(0.6f, 0.2f, 0.3f, 0.4f),

47 
glm
::
	`dvec4
(0.2f, 0.7f, 0.5f, 0.3f),

48 
glm
::
	`dvec4
(0.3f, 0.5f, 0.7f, 0.2f),

49 
glm
::
	`dvec4
(0.4f, 0.3f, 0.2f, 0.6f));

50 
glm
::
dm©4
 
Inv0
 = glm::
	`övî£
(
M©0
);

51 
glm
::
dm©4
 
Res0
 = 
M©0
 * 
Inv0
;

53 
	`¥öt
(
M©0
);

54 
	`¥öt
(
Inv0
);

55 
	`¥öt
(
Res0
);

58 
	}
}

60 
boﬁ
 
	$ã°_›î©‹s
()

62 
glm
::
m©4x4
 
	`l
(1.0f);

63 
glm
::
m©4x4
 
	`m
(1.0f);

64 
glm
::
vec4
 
	`u
(1.0f);

65 
glm
::
vec4
 
	`v
(1.0f);

66 
x
 = 1.0f;

67 
glm
::
vec4
 
a
 = 
m
 * 
u
;

68 
glm
::
vec4
 
b
 = 
v
 * 
m
;

69 
glm
::
m©4x4
 
n
 = 
x
 / 
m
;

70 
glm
::
m©4x4
 
o
 = 
m
 / 
x
;

71 
glm
::
m©4x4
 
p
 = 
x
 * 
m
;

72 
glm
::
m©4x4
 
q
 = 
m
 * 
x
;

73 
boﬁ
 
R
 = 
m
 !
q
;

74 
boﬁ
 
S
 = 
m
 =
l
;

76  (
S
 && !
R
) ? 0 : 1;

77 
	}
}

79 
	$ã°_övî£
()

81 
	`Eº‹
(0);

84 
glm
::
m©4
 c⁄° 
	`M©rix
(

85 
glm
::
	`vec4
(0.6f, 0.2f, 0.3f, 0.4f),

86 
glm
::
	`vec4
(0.2f, 0.7f, 0.5f, 0.3f),

87 
glm
::
	`vec4
(0.3f, 0.5f, 0.7f, 0.2f),

88 
glm
::
	`vec4
(0.4f, 0.3f, 0.2f, 0.6f));

89 
glm
::
m©4
 c⁄° 
Invî£
 = glm::
	`övî£
(
M©rix
);

90 
glm
::
m©4
 c⁄° 
Idítôy
 = 
M©rix
 * 
Invî£
;

92 
	`¥öt
(
M©rix
);

93 
	`¥öt
(
Invî£
);

94 
	`¥öt
(
Idítôy
);

96 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[0], glm::
	`vec4
(1.0f, 0.0f, 0.0f, 0.0f), glm::vec4(0.01f))) ? 0 : 1;

97 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[1], glm::
	`vec4
(0.0f, 1.0f, 0.0f, 0.0f), glm::vec4(0.01f))) ? 0 : 1;

98 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[2], glm::
	`vec4
(0.0f, 0.0f, 1.0f, 0.0f), glm::vec4(0.01f))) ? 0 : 1;

99 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[3], glm::
	`vec4
(0.0f, 0.0f, 0.0f, 1.0f), glm::vec4(0.01f))) ? 0 : 1;

103 
glm
::
highp_m©4
 c⁄° 
	`M©rix
(

104 
glm
::
	`highp_vec4
(0.6f, 0.2f, 0.3f, 0.4f),

105 
glm
::
	`highp_vec4
(0.2f, 0.7f, 0.5f, 0.3f),

106 
glm
::
	`highp_vec4
(0.3f, 0.5f, 0.7f, 0.2f),

107 
glm
::
	`highp_vec4
(0.4f, 0.3f, 0.2f, 0.6f));

108 
glm
::
highp_m©4
 c⁄° 
Invî£
 = glm::
	`övî£
(
M©rix
);

109 
glm
::
highp_m©4
 c⁄° 
Idítôy
 = 
M©rix
 * 
Invî£
;

111 
	`¥ötf
("highp_mat4 inverse\n");

112 
	`¥öt
(
M©rix
);

113 
	`¥öt
(
Invî£
);

114 
	`¥öt
(
Idítôy
);

116 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[0], glm::
	`highp_vec4
(1.0f, 0.0f, 0.0f, 0.0f), glm::highp_vec4(0.01f))) ? 0 : 1;

117 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[1], glm::
	`highp_vec4
(0.0f, 1.0f, 0.0f, 0.0f), glm::highp_vec4(0.01f))) ? 0 : 1;

118 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[2], glm::
	`highp_vec4
(0.0f, 0.0f, 1.0f, 0.0f), glm::highp_vec4(0.01f))) ? 0 : 1;

119 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[3], glm::
	`highp_vec4
(0.0f, 0.0f, 0.0f, 1.0f), glm::highp_vec4(0.01f))) ? 0 : 1;

123 
glm
::
mediump_m©4
 c⁄° 
	`M©rix
(

124 
glm
::
	`mediump_vec4
(0.6f, 0.2f, 0.3f, 0.4f),

125 
glm
::
	`mediump_vec4
(0.2f, 0.7f, 0.5f, 0.3f),

126 
glm
::
	`mediump_vec4
(0.3f, 0.5f, 0.7f, 0.2f),

127 
glm
::
	`mediump_vec4
(0.4f, 0.3f, 0.2f, 0.6f));

128 
glm
::
mediump_m©4
 c⁄° 
Invî£
 = glm::
	`övî£
(
M©rix
);

129 
glm
::
mediump_m©4
 c⁄° 
Idítôy
 = 
M©rix
 * 
Invî£
;

131 
	`¥ötf
("mediump_mat4 inverse\n");

132 
	`¥öt
(
M©rix
);

133 
	`¥öt
(
Invî£
);

134 
	`¥öt
(
Idítôy
);

136 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[0], glm::
	`mediump_vec4
(1.0f, 0.0f, 0.0f, 0.0f), glm::mediump_vec4(0.01f))) ? 0 : 1;

137 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[1], glm::
	`mediump_vec4
(0.0f, 1.0f, 0.0f, 0.0f), glm::mediump_vec4(0.01f))) ? 0 : 1;

138 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[2], glm::
	`mediump_vec4
(0.0f, 0.0f, 1.0f, 0.0f), glm::mediump_vec4(0.01f))) ? 0 : 1;

139 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[3], glm::
	`mediump_vec4
(0.0f, 0.0f, 0.0f, 1.0f), glm::mediump_vec4(0.01f))) ? 0 : 1;

143 
glm
::
lowp_m©4
 c⁄° 
	`M©rix
(

144 
glm
::
	`lowp_vec4
(0.6f, 0.2f, 0.3f, 0.4f),

145 
glm
::
	`lowp_vec4
(0.2f, 0.7f, 0.5f, 0.3f),

146 
glm
::
	`lowp_vec4
(0.3f, 0.5f, 0.7f, 0.2f),

147 
glm
::
	`lowp_vec4
(0.4f, 0.3f, 0.2f, 0.6f));

148 
glm
::
lowp_m©4
 c⁄° 
Invî£
 = glm::
	`övî£
(
M©rix
);

149 
glm
::
lowp_m©4
 c⁄° 
Idítôy
 = 
M©rix
 * 
Invî£
;

151 
	`¥ötf
("lowp_mat4 inverse\n");

152 
	`¥öt
(
M©rix
);

153 
	`¥öt
(
Invî£
);

154 
	`¥öt
(
Idítôy
);

156 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[0], glm::
	`lowp_vec4
(1.0f, 0.0f, 0.0f, 0.0f), glm::lowp_vec4(0.01f))) ? 0 : 1;

157 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[1], glm::
	`lowp_vec4
(0.0f, 1.0f, 0.0f, 0.0f), glm::lowp_vec4(0.01f))) ? 0 : 1;

158 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[2], glm::
	`lowp_vec4
(0.0f, 0.0f, 1.0f, 0.0f), glm::lowp_vec4(0.01f))) ? 0 : 1;

159 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[3], glm::
	`lowp_vec4
(0.0f, 0.0f, 0.0f, 1.0f), glm::lowp_vec4(0.01f))) ? 0 : 1;

163 
glm
::
m©4
 c⁄° 
	`M©rix
(

164 
glm
::
	`vec4
(0.6f, 0.2f, 0.3f, 0.4f),

165 
glm
::
	`vec4
(0.2f, 0.7f, 0.5f, 0.3f),

166 
glm
::
	`vec4
(0.3f, 0.5f, 0.7f, 0.2f),

167 
glm
::
	`vec4
(0.4f, 0.3f, 0.2f, 0.6f));

168 
glm
::
m©4
 c⁄° 
Idítôy
 = 
M©rix
 / Matrix;

170 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[0], glm::
	`vec4
(1.0f, 0.0f, 0.0f, 0.0f), glm::vec4(0.01f))) ? 0 : 1;

171 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[1], glm::
	`vec4
(0.0f, 1.0f, 0.0f, 0.0f), glm::vec4(0.01f))) ? 0 : 1;

172 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[2], glm::
	`vec4
(0.0f, 0.0f, 1.0f, 0.0f), glm::vec4(0.01f))) ? 0 : 1;

173 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Idítôy
[3], glm::
	`vec4
(0.0f, 0.0f, 0.0f, 1.0f), glm::vec4(0.01f))) ? 0 : 1;

176  
Eº‹
;

177 
	}
}

179 
	$ã°_˘r
()

181 
	`Eº‹
(0);

183 #i‡
GLM_HAS_TRIVIAL_QUERIES


186 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
m©4
>::
vÆue
 ? 0 : 1;

191 #if(
GLM_HAS_INITIALIZER_LISTS
)

192 
glm
::
m©4
 
	`m0
(

193 
glm
::
	`vec4
(0, 1, 2, 3),

194 
glm
::
	`vec4
(4, 5, 6, 7),

195 
glm
::
	`vec4
(8, 9, 10, 11),

196 
glm
::
	`vec4
(12, 13, 14, 15));

198 
	`as£π
((
m0
) == 4 * 4 * 4);

200 
glm
::
vec4
 
V
{0, 1, 2, 3};

202 
glm
::
m©4
 
m1
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};

204 
glm
::
m©4
 
m2
{

210 
glm
::
Àngth_t
 
i
 = 0; i < 
m0
.
	`Àngth
(); ++i)

211 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m0
[
i
], 
m2
[i])) ? 0 : 1;

213 
glm
::
Àngth_t
 
i
 = 0; i < 
m1
.
	`Àngth
(); ++i)

214 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m1
[
i
], 
m2
[i])) ? 0 : 1;

216 
°d
::
ve˘‹
<
glm
::
m©4
> 
m3
{

222 
°d
::
ve˘‹
<
glm
::
m©4
> 
v1
{

226 
°d
::
ve˘‹
<
glm
::
m©4
> 
v2
{

242  
Eº‹
;

243 
	}
}

245 
	$≥rf_mul
()

247 
Eº‹
 = 0;

251  
Eº‹
;

252 
	}
}

254 
«me•a˚
 
	gˇ°


256 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

257 
íåy
()

259 
	gEº‹
 = 0;

261 
gíTy≥
 
A
(1.0f);

262 
	gglm
::
m©4x4
 
B
(
A
);

263 
	gglm
::
m©4x4
 
Idítôy
(1.0f);

265 
	gglm
::
Àngth_t
 
i
 = 0, 
	gÀngth
 = 
B
.
Àngth
(); 
	gi
 <Üength; ++i)

266 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B
[
i
], 
Idítôy
[i])) ? 0 : 1;

268  
	gEº‹
;

271 
ã°
()

273 
	gEº‹
 = 0;

275 
	gEº‹
 +
íåy
<
glm
::
m©2x2
>();

276 
	gEº‹
 +
íåy
<
glm
::
m©2x3
>();

277 
	gEº‹
 +
íåy
<
glm
::
m©2x4
>();

278 
	gEº‹
 +
íåy
<
glm
::
m©3x2
>();

279 
	gEº‹
 +
íåy
<
glm
::
m©3x3
>();

280 
	gEº‹
 +
íåy
<
glm
::
m©3x4
>();

281 
	gEº‹
 +
íåy
<
glm
::
m©4x2
>();

282 
	gEº‹
 +
íåy
<
glm
::
m©4x3
>();

283 
	gEº‹
 +
íåy
<
glm
::
m©4x4
>();

285  
	gEº‹
;

289 
	sª¥o


291 
ª¥o
(){ 
	mthis
->
	mm©rix
 = 
√w
 
glm
::
m©4
(); }

292 ~
ª¥o
(){
dñëe
 
	mthis
->
	mm©rix
;}

294 
	mglm
::
m©4
* 
m©rix
;

297 
	$ã°_size
()

299 
Eº‹
 = 0;

301 
Eº‹
 +64 =(
glm
::
m©4
) ? 0 : 1;

302 
Eº‹
 +128 =(
glm
::
dm©4
) ? 0 : 1;

303 
Eº‹
 +
glm
::
	`m©4
().
	`Àngth
() == 4 ? 0 : 1;

304 
Eº‹
 +
glm
::
	`dm©4
().
	`Àngth
() == 4 ? 0 : 1;

305 
Eº‹
 +
glm
::
m©4
::
	`Àngth
() == 4 ? 0 : 1;

306 
Eº‹
 +
glm
::
dm©4
::
	`Àngth
() == 4 ? 0 : 1;

308  
Eº‹
;

309 
	}
}

311 
	$maö
()

313 
Eº‹
 = 0;

315 
ª¥o
 
Rïro
;

317 
Eº‹
 +
ˇ°
::
	`ã°
();

318 
Eº‹
 +
	`ã°_˘r
();

319 
Eº‹
 +
	`ã°_övî£_dm©4x4
();

320 
Eº‹
 +
	`ã°_övî£_m©4x4
();

321 
Eº‹
 +
	`ã°_›î©‹s
();

322 
Eº‹
 +
	`ã°_övî£
();

323 
Eº‹
 +
	`ã°_size
();

325 
Eº‹
 +
	`≥rf_mul
();

327  
Eº‹
;

328 
	}
}

	@glm/test/core/core_type_vec1.cpp

1 
	#GLM_FORCE_SWIZZLE


	)

2 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

3 
	~<glm/gtc/vec1.hµ
>

4 
	~<ve˘‹
>

6 
	$ã°_vec1_›î©‹s
()

8 
	`Eº‹
(0);

10 
glm
::
vec1
 
	`A
(1.0f);

11 
glm
::
vec1
 
	`B
(1.0f);

13 
boﬁ
 
R
 = 
A
 !
B
;

14 
boﬁ
 
S
 = 
A
 =
B
;

16 
Eº‹
 +(
S
 && !
R
) ? 0 : 1;

20 
A
 *= 1.0f;

21 
B
 *= 1.0;

22 
A
 += 1.0f;

23 
B
 += 1.0;

25 
boﬁ
 
R
 = 
A
 !
B
;

26 
boﬁ
 
S
 = 
A
 =
B
;

28 
Eº‹
 +(
S
 && !
R
) ? 0 : 1;

31  
Eº‹
;

32 
	}
}

34 
	$ã°_vec1_˘‹
()

36 
Eº‹
 = 0;

38 #i‡
GLM_HAS_TRIVIAL_QUERIES


41 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
vec1
>::
vÆue
 ? 0 : 1;

42 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
dvec1
>::
vÆue
 ? 0 : 1;

43 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
ivec1
>::
vÆue
 ? 0 : 1;

44 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
uvec1
>::
vÆue
 ? 0 : 1;

46 
Eº‹
 +
°d
::
is_c›y_c⁄°ru˘ibÀ
<
glm
::
vec1
>::
vÆue
 ? 0 : 1;

68 #i‡
GLM_HAS_UNRESTRICTED_UNIONS
 && 
	`deföed
(
GLM_FORCE_SWIZZLE
)

70 
glm
::
vec2
 
A
 = glm::
	`vec2
(1.0f, 2.0f);

71 
glm
::
vec2
 
B
 = 
A
.
xy
;

72 
glm
::
vec2
 
	`C
(
A
.
xy
);

73 
glm
::
vec2
 
	`D
(
A
.
	`xy
());

75 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
B
)) ? 0 : 1;

76 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
C
)) ? 0 : 1;

77 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
D
)) ? 0 : 1;

82 
glm
::
vec2
 
A
 = glm::
	`vec2
(2.0f);

83 
glm
::
vec2
 
B
 = glm::
	`vec2
(2.0f, 3.0f);

84 
glm
::
vec2
 
C
 = glm::
	`vec2
(2.0f, 3.0);

86 
glm
::
vec2
 
	`E
(glm::
	`dvec2
(2.0));

87 
glm
::
vec2
 
	`F
(glm::
	`ivec2
(2));

90  
Eº‹
;

91 
	}
}

93 
	$ã°_vec1_size
()

95 
Eº‹
 = 0;

97 
Eº‹
 +(
glm
::
vec1
Ë=(glm::
mediump_vec1
) ? 0 : 1;

98 
Eº‹
 +4 =(
glm
::
mediump_vec1
) ? 0 : 1;

99 
Eº‹
 +(
glm
::
dvec1
Ë=(glm::
highp_dvec1
) ? 0 : 1;

100 
Eº‹
 +8 =(
glm
::
highp_dvec1
) ? 0 : 1;

101 
Eº‹
 +
glm
::
	`vec1
().
	`Àngth
() == 1 ? 0 : 1;

102 
Eº‹
 +
glm
::
	`dvec1
().
	`Àngth
() == 1 ? 0 : 1;

103 
Eº‹
 +
glm
::
vec1
::
	`Àngth
() == 1 ? 0 : 1;

104 
Eº‹
 +
glm
::
dvec1
::
	`Àngth
() == 1 ? 0 : 1;

106  
Eº‹
;

107 
	}
}

109 
	$ã°_vec1_›î©‹_ö¸emít
()

111 
	`Eº‹
(0);

113 
glm
::
ivec1
 
	`v0
(1);

114 
glm
::
ivec1
 
	`v1
(
v0
);

115 
glm
::
ivec1
 
	`v2
(
v0
);

116 
glm
::
ivec1
 
v3
 = ++
v1
;

117 
glm
::
ivec1
 
v4
 = 
v2
++;

119 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v0
, 
v4
)) ? 0 : 1;

120 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, 
v2
)) ? 0 : 1;

121 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, 
v3
)) ? 0 : 1;

123 
	`i0
(1);

124 
	`i1
(
i0
);

125 
	`i2
(
i0
);

126 
i3
 = ++
i1
;

127 
i4
 = 
i2
++;

129 
Eº‹
 +
i0
 =
i4
 ? 0 : 1;

130 
Eº‹
 +
i1
 =
i2
 ? 0 : 1;

131 
Eº‹
 +
i1
 =
i3
 ? 0 : 1;

133  
Eº‹
;

134 
	}
}

136 
	$maö
()

138 
Eº‹
 = 0;

140 
glm
::
vec1
 
v
;

141 
	`as£π
(
v
.
	`Àngth
() == 1);

143 
Eº‹
 +
	`ã°_vec1_size
();

144 
Eº‹
 +
	`ã°_vec1_˘‹
();

145 
Eº‹
 +
	`ã°_vec1_›î©‹s
();

146 
Eº‹
 +
	`ã°_vec1_›î©‹_ö¸emít
();

148  
Eº‹
;

149 
	}
}

	@glm/test/core/core_type_vec2.cpp

1 
	#GLM_FORCE_SWIZZLE


	)

2 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

3 
	~<glm/vec2.hµ
>

4 
	~<ve˘‹
>

5 #i‡
GLM_HAS_TRIVIAL_QUERIES


6 
	~<ty≥_åaôs
>

9 
	$ã°_vec2_›î©‹s
()

11 
Eº‹
 = 0;

14 
glm
::
vec2
 
	`A
(1.0f);

15 
glm
::
vec2
 
	`B
(1.0f);

16 
Eº‹
 +
A
 !
B
 ? 1 : 0;

17 
Eº‹
 +
A
 =
B
 ? 0 : 1;

21 
glm
::
vec2
 
	`A
(1.0f);

22 
glm
::
vec2
 
C
 = 
A
 + 1.0f;

23 
A
 += 1.0f;

24 
Eº‹
 +
A
.
x
 =2.0‡&& A.
y
 == 2.0f ? 0 : 1;

25 
Eº‹
 +
A
.
x
 =
C
.x && A.
y
 == C.y ? 0 : 1;

29 
glm
::
vec2
 
	`A
(1.0f);

30 
glm
::
vec2
 
	`B
(2.0f,-1.0f);

31 
glm
::
vec2
 
C
 = 
A
 + 
B
;

32 
A
 +
B
;

33 
Eº‹
 +
A
.
x
 =3.0‡&& A.
y
 == 0.0f ? 0 : 1;

34 
Eº‹
 +
A
.
x
 =
C
.x && A.
y
 == C.y ? 0 : 1;

38 
glm
::
vec2
 
	`A
(1.0f);

39 
glm
::
vec2
 
C
 = 
A
 - 1.0f;

40 
A
 -= 1.0f;

41 
Eº‹
 +
A
.
x
 =0.0‡&& A.
y
 == 0.0f ? 0 : 1;

42 
Eº‹
 +
A
.
x
 =
C
.x && A.
y
 == C.y ? 0 : 1;

46 
glm
::
vec2
 
	`A
(1.0f);

47 
glm
::
vec2
 
	`B
(2.0f,-1.0f);

48 
glm
::
vec2
 
C
 = 
A
 - 
B
;

49 
A
 -
B
;

50 
Eº‹
 +
A
.
x
 =-1.0‡&& A.
y
 == 2.0f ? 0 : 1;

51 
Eº‹
 +
A
.
x
 =
C
.x && A.
y
 == C.y ? 0 : 1;

55 
glm
::
vec2
 
	`A
(1.0f);

56 
glm
::
vec2
 
C
 = 
A
 * 2.0f;

57 
A
 *= 2.0f;

58 
Eº‹
 +
A
.
x
 =2.0‡&& A.
y
 == 2.0f ? 0 : 1;

59 
Eº‹
 +
A
.
x
 =
C
.x && A.
y
 == C.y ? 0 : 1;

63 
glm
::
vec2
 
	`A
(2.0f);

64 
glm
::
vec2
 
	`B
(2.0f);

65 
glm
::
vec2
 
C
 = 
A
 / 
B
;

66 
A
 /
B
;

67 
Eº‹
 +
A
.
x
 =1.0‡&& A.
y
 == 1.0f ? 0 : 1;

68 
Eº‹
 +
A
.
x
 =
C
.x && A.
y
 == C.y ? 0 : 1;

72 
glm
::
vec2
 
	`A
(1.0f, 2.0f);

73 
glm
::
vec2
 
	`B
(4.0f, 5.0f);

75 
glm
::
vec2
 
C
 = 
A
 + 
B
;

76 
Eº‹
 +
C
 =
glm
::
	`vec2
(5, 7) ? 0 : 1;

78 
glm
::
vec2
 
D
 = 
B
 - 
A
;

79 
Eº‹
 +
D
 =
glm
::
	`vec2
(3, 3) ? 0 : 1;

81 
glm
::
vec2
 
E
 = 
A
 * 
B
;

82 
Eº‹
 +
E
 =
glm
::
	`vec2
(4, 10) ? 0 : 1;

84 
glm
::
vec2
 
F
 = 
B
 / 
A
;

85 
Eº‹
 +
F
 =
glm
::
	`vec2
(4, 2.5) ? 0 : 1;

87 
glm
::
vec2
 
G
 = 
A
 + 1.0f;

88 
Eº‹
 +
G
 =
glm
::
	`vec2
(2, 3) ? 0 : 1;

90 
glm
::
vec2
 
H
 = 
B
 - 1.0f;

91 
Eº‹
 +
H
 =
glm
::
	`vec2
(3, 4) ? 0 : 1;

93 
glm
::
vec2
 
I
 = 
A
 * 2.0f;

94 
Eº‹
 +
I
 =
glm
::
	`vec2
(2, 4) ? 0 : 1;

96 
glm
::
vec2
 
J
 = 
B
 / 2.0f;

97 
Eº‹
 +
J
 =
glm
::
	`vec2
(2, 2.5) ? 0 : 1;

99 
glm
::
vec2
 
K
 = 1.0‡+ 
A
;

100 
Eº‹
 +
K
 =
glm
::
	`vec2
(2, 3) ? 0 : 1;

102 
glm
::
vec2
 
L
 = 1.0‡- 
B
;

103 
Eº‹
 +
L
 =
glm
::
	`vec2
(-3, -4) ? 0 : 1;

105 
glm
::
vec2
 
M
 = 2.0‡* 
A
;

106 
Eº‹
 +
M
 =
glm
::
	`vec2
(2, 4) ? 0 : 1;

108 
glm
::
vec2
 
N
 = 2.0‡/ 
B
;

109 
Eº‹
 +
N
 =
glm
::
	`vec2
(0.5, 2.0 / 5.0) ? 0 : 1;

113 
glm
::
vec2
 
	`A
(1.0f, 2.0f);

114 
glm
::
vec2
 
	`B
(4.0f, 5.0f);

116 
A
 +
B
;

117 
Eº‹
 +
A
 =
glm
::
	`vec2
(5, 7) ? 0 : 1;

119 
A
 += 1.0f;

120 
Eº‹
 +
A
 =
glm
::
	`vec2
(6, 8) ? 0 : 1;

123 
glm
::
vec2
 
	`A
(1.0f, 2.0f);

124 
glm
::
vec2
 
	`B
(4.0f, 5.0f);

126 
B
 -
A
;

127 
Eº‹
 +
B
 =
glm
::
	`vec2
(3, 3) ? 0 : 1;

129 
B
 -= 1.0f;

130 
Eº‹
 +
B
 =
glm
::
	`vec2
(2, 2) ? 0 : 1;

133 
glm
::
vec2
 
	`A
(1.0f, 2.0f);

134 
glm
::
vec2
 
	`B
(4.0f, 5.0f);

136 
A
 *
B
;

137 
Eº‹
 +
A
 =
glm
::
	`vec2
(4, 10) ? 0 : 1;

139 
A
 *= 2.0f;

140 
Eº‹
 +
A
 =
glm
::
	`vec2
(8, 20) ? 0 : 1;

143 
glm
::
vec2
 
	`A
(1.0f, 2.0f);

144 
glm
::
vec2
 
	`B
(4.0f, 5.0f);

146 
B
 /
A
;

147 
Eº‹
 +
B
 =
glm
::
	`vec2
(4, 2.5) ? 0 : 1;

149 
B
 /= 2.0f;

150 
Eº‹
 +
B
 =
glm
::
	`vec2
(2, 1.25) ? 0 : 1;

153 
glm
::
vec2
 
	`B
(2.0f);

155 
B
 /B.
y
;

156 
Eº‹
 +
B
 =
glm
::
	`vec2
(1.0f) ? 0 : 1;

160 
glm
::
vec2
 
	`A
(1.0f, 2.0f);

161 
glm
::
vec2
 
B
 = -
A
;

162 
Eº‹
 +
B
 =
glm
::
	`vec2
(-1.0f, -2.0f) ? 0 : 1;

166 
glm
::
vec2
 
	`A
(1.0f, 2.0f);

167 
glm
::
vec2
 
B
 = --
A
;

168 
Eº‹
 +
B
 =
glm
::
	`vec2
(0.0f, 1.0f) ? 0 : 1;

172 
glm
::
vec2
 
	`A
(1.0f, 2.0f);

173 
glm
::
vec2
 
B
 = 
A
--;

174 
Eº‹
 +
B
 =
glm
::
	`vec2
(1.0f, 2.0f) ? 0 : 1;

175 
Eº‹
 +
A
 =
glm
::
	`vec2
(0.0f, 1.0f) ? 0 : 1;

179 
glm
::
vec2
 
	`A
(1.0f, 2.0f);

180 
glm
::
vec2
 
B
 = ++
A
;

181 
Eº‹
 +
B
 =
glm
::
	`vec2
(2.0f, 3.0f) ? 0 : 1;

185 
glm
::
vec2
 
	`A
(1.0f, 2.0f);

186 
glm
::
vec2
 
B
 = 
A
++;

187 
Eº‹
 +
B
 =
glm
::
	`vec2
(1.0f, 2.0f) ? 0 : 1;

188 
Eº‹
 +
A
 =
glm
::
	`vec2
(2.0f, 3.0f) ? 0 : 1;

191  
Eº‹
;

192 
	}
}

194 
	$ã°_vec2_˘‹
()

196 
Eº‹
 = 0;

199 
glm
::
vec2
 
	`A
(1);

200 
glm
::
vec2
 
	`B
(
A
);

201 
Eº‹
 +
A
 =
B
 ? 0 : 1;

204 #i‡
GLM_HAS_TRIVIAL_QUERIES


207 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
vec2
>::
vÆue
 ? 0 : 1;

208 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
dvec2
>::
vÆue
 ? 0 : 1;

209 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
ivec2
>::
vÆue
 ? 0 : 1;

210 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
uvec2
>::
vÆue
 ? 0 : 1;

212 
Eº‹
 +
°d
::
is_c›y_c⁄°ru˘ibÀ
<
glm
::
vec2
>::
vÆue
 ? 0 : 1;

215 #i‡
GLM_HAS_INITIALIZER_LISTS


217 
glm
::
vec2
 
a
{ 0, 1 };

218 
°d
::
ve˘‹
<
glm
::
vec2
> 
v
 = {

225 
glm
::
dvec2
 
a
{ 0, 1 };

226 
°d
::
ve˘‹
<
glm
::
dvec2
> 
v
 = {

233 #i‡
GLM_HAS_UNRESTRICTED_UNIONS
 && 
	`deföed
(
GLM_FORCE_SWIZZLE
)

235 
glm
::
vec2
 
A
 = glm::
	`vec2
(1.0f, 2.0f);

236 
glm
::
vec2
 
B
 = 
A
.
xy
;

237 
glm
::
vec2
 
	`C
(
A
.
xy
);

238 
glm
::
vec2
 
	`D
(
A
.
	`xy
());

240 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
B
)) ? 0 : 1;

241 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
C
)) ? 0 : 1;

242 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
D
)) ? 0 : 1;

247 
glm
::
vec2
 
A
 = glm::
	`vec2
(2.0f);

248 
glm
::
vec2
 
B
 = glm::
	`vec2
(2.0f, 3.0f);

249 
glm
::
vec2
 
C
 = glm::
	`vec2
(2.0f, 3.0);

251 
glm
::
vec2
 
	`E
(glm::
	`dvec2
(2.0));

252 
glm
::
vec2
 
	`F
(glm::
	`ivec2
(2));

255  
Eº‹
;

256 
	}
}

258 
	$ã°_vec2_size
()

260 
Eº‹
 = 0;

262 
Eº‹
 +(
glm
::
vec2
Ë=(glm::
mediump_vec2
) ? 0 : 1;

263 
Eº‹
 +8 =(
glm
::
mediump_vec2
) ? 0 : 1;

264 
Eº‹
 +(
glm
::
dvec2
Ë=(glm::
highp_dvec2
) ? 0 : 1;

265 
Eº‹
 +16 =(
glm
::
highp_dvec2
) ? 0 : 1;

266 
Eº‹
 +
glm
::
	`vec2
().
	`Àngth
() == 2 ? 0 : 1;

267 
Eº‹
 +
glm
::
	`dvec2
().
	`Àngth
() == 2 ? 0 : 1;

268 
Eº‹
 +
glm
::
vec2
::
	`Àngth
() == 2 ? 0 : 1;

269 
Eº‹
 +
glm
::
dvec2
::
	`Àngth
() == 2 ? 0 : 1;

271  
Eº‹
;

272 
	}
}

274 
	$ã°_›î©‹_ö¸emít
()

276 
	`Eº‹
(0);

278 
glm
::
ivec2
 
	`v0
(1);

279 
glm
::
ivec2
 
	`v1
(
v0
);

280 
glm
::
ivec2
 
	`v2
(
v0
);

281 
glm
::
ivec2
 
v3
 = ++
v1
;

282 
glm
::
ivec2
 
v4
 = 
v2
++;

284 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v0
, 
v4
)) ? 0 : 1;

285 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, 
v2
)) ? 0 : 1;

286 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, 
v3
)) ? 0 : 1;

288 
	`i0
(1);

289 
	`i1
(
i0
);

290 
	`i2
(
i0
);

291 
i3
 = ++
i1
;

292 
i4
 = 
i2
++;

294 
Eº‹
 +
i0
 =
i4
 ? 0 : 1;

295 
Eº‹
 +
i1
 =
i2
 ? 0 : 1;

296 
Eº‹
 +
i1
 =
i3
 ? 0 : 1;

298  
Eº‹
;

299 
	}
}

301 
	$maö
()

303 
Eº‹
 = 0;

305 
glm
::
vec2
 
v
;

306 
	`as£π
(
v
.
	`Àngth
() == 2);

308 
Eº‹
 +
	`ã°_vec2_size
();

309 
Eº‹
 +
	`ã°_vec2_˘‹
();

310 
Eº‹
 +
	`ã°_vec2_›î©‹s
();

311 
Eº‹
 +
	`ã°_›î©‹_ö¸emít
();

313  
Eº‹
;

314 
	}
}

	@glm/test/core/core_type_vec3.cpp

1 
	#GLM_FORCE_SWIZZLE


	)

2 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

3 
	~<glm/geomëric.hµ
>

4 
	~<glm/vec2.hµ
>

5 
	~<glm/vec3.hµ
>

6 
	~<glm/vec4.hµ
>

7 
	~<c°dio
>

8 
	~<ve˘‹
>

10 
	$ã°_vec3_˘‹
()

12 
Eº‹
 = 0;

14 #i‡
GLM_HAS_TRIVIAL_QUERIES


17 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
vec3
>::
vÆue
 ? 0 : 1;

18 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
dvec3
>::
vÆue
 ? 0 : 1;

19 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
ivec3
>::
vÆue
 ? 0 : 1;

20 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
uvec3
>::
vÆue
 ? 0 : 1;

22 
Eº‹
 +
°d
::
is_c›y_c⁄°ru˘ibÀ
<
glm
::
vec3
>::
vÆue
 ? 0 : 1;

25 #i‡(
GLM_HAS_INITIALIZER_LISTS
)

27 
glm
::
vec3
 
a
{ 0, 1, 2 };

28 
°d
::
ve˘‹
<
glm
::
vec3
> 
v
 = {

35 
glm
::
dvec3
 
a
{ 0, 1, 2 };

36 
°d
::
ve˘‹
<
glm
::
dvec3
> 
v
 = {

43 #if(
GLM_HAS_UNRESTRICTED_UNIONS
 && 
	`deföed
(
GLM_FORCE_SWIZZLE
))

45 
glm
::
vec3
 
A
 = glm::
	`vec3
(1.0f, 2.0f, 3.0f);

46 
glm
::
vec3
 
B
 = 
A
.
xyz
;

47 
glm
::
vec3
 
	`C
(
A
.
xyz
);

48 
glm
::
vec3
 
	`D
(
A
.
	`xyz
());

49 
glm
::
vec3
 
	`E
(
A
.
x
, A.
yz
);

50 
glm
::
vec3
 
	`F
(
A
.
x
, A.
	`yz
());

51 
glm
::
vec3
 
	`G
(
A
.
xy
, A.
z
);

52 
glm
::
vec3
 
	`H
(
A
.
	`xy
(), A.
z
);

54 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
B
)) ? 0 : 1;

55 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
C
)) ? 0 : 1;

56 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
D
)) ? 0 : 1;

57 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
E
)) ? 0 : 1;

58 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
F
)) ? 0 : 1;

59 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
G
)) ? 0 : 1;

60 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
H
)) ? 0 : 1;

65 
glm
::
vec3
 
	`A
(1);

66 
glm
::
vec3
 
	`B
(1, 1, 1);

68 
Eº‹
 +
A
 =
B
 ? 0 : 1;

72 
°d
::
ve˘‹
<
glm
::
vec3
> 
Te°s
;

73 
Te°s
.
	`push_back
(
glm
::
	`vec3
(glm::
	`vec2
(1, 2), 3));

74 
Te°s
.
	`push_back
(
glm
::
	`vec3
(1, glm::
	`vec2
(2, 3)));

75 
Te°s
.
	`push_back
(
glm
::
	`vec3
(1, 2, 3));

76 
Te°s
.
	`push_back
(
glm
::
	`vec3
(glm::
	`vec4
(1, 2, 3, 4)));

78 
°d
::
size_t
 
i
 = 0; i < 
Te°s
.
	`size
(); ++i)

79 
Eº‹
 +
Te°s
[
i
] =
glm
::
	`vec3
(1, 2, 3) ? 0 : 1;

82  
Eº‹
;

83 
	}
}

85 
	$foo
()

87 
glm
::
vec3
 
b¨
 = glm::
	`vec3
(0.0f, 1.0f, 1.0f);

89  
glm
::
	`Àngth
(
b¨
);

90 
	}
}

92 
	$ã°_vec3_›î©‹s
()

94 
Eº‹
 = 0;

97 
glm
::
vec3
 
	`A
(1.0f);

98 
glm
::
vec3
 
	`B
(1.0f);

99 
boﬁ
 
R
 = 
A
 !
B
;

100 
boﬁ
 
S
 = 
A
 =
B
;

102 
Eº‹
 +(
S
 && !
R
) ? 0 : 1;

106 
glm
::
vec3
 
	`A
(1.0f, 2.0f, 3.0f);

107 
glm
::
vec3
 
	`B
(4.0f, 5.0f, 6.0f);

109 
glm
::
vec3
 
C
 = 
A
 + 
B
;

110 
Eº‹
 +
C
 =
glm
::
	`vec3
(5, 7, 9) ? 0 : 1;

112 
glm
::
vec3
 
D
 = 
B
 - 
A
;

113 
Eº‹
 +
D
 =
glm
::
	`vec3
(3, 3, 3) ? 0 : 1;

115 
glm
::
vec3
 
E
 = 
A
 * 
B
;

116 
Eº‹
 +
E
 =
glm
::
	`vec3
(4, 10, 18) ? 0 : 1;

118 
glm
::
vec3
 
F
 = 
B
 / 
A
;

119 
Eº‹
 +
F
 =
glm
::
	`vec3
(4, 2.5, 2) ? 0 : 1;

121 
glm
::
vec3
 
G
 = 
A
 + 1.0f;

122 
Eº‹
 +
G
 =
glm
::
	`vec3
(2, 3, 4) ? 0 : 1;

124 
glm
::
vec3
 
H
 = 
B
 - 1.0f;

125 
Eº‹
 +
H
 =
glm
::
	`vec3
(3, 4, 5) ? 0 : 1;

127 
glm
::
vec3
 
I
 = 
A
 * 2.0f;

128 
Eº‹
 +
I
 =
glm
::
	`vec3
(2, 4, 6) ? 0 : 1;

130 
glm
::
vec3
 
J
 = 
B
 / 2.0f;

131 
Eº‹
 +
J
 =
glm
::
	`vec3
(2, 2.5, 3) ? 0 : 1;

133 
glm
::
vec3
 
K
 = 1.0‡+ 
A
;

134 
Eº‹
 +
K
 =
glm
::
	`vec3
(2, 3, 4) ? 0 : 1;

136 
glm
::
vec3
 
L
 = 1.0‡- 
B
;

137 
Eº‹
 +
L
 =
glm
::
	`vec3
(-3, -4, -5) ? 0 : 1;

139 
glm
::
vec3
 
M
 = 2.0‡* 
A
;

140 
Eº‹
 +
M
 =
glm
::
	`vec3
(2, 4, 6) ? 0 : 1;

142 
glm
::
vec3
 
N
 = 2.0‡/ 
B
;

143 
Eº‹
 +
N
 =
glm
::
	`vec3
(0.5, 2.0 / 5.0, 2.0 / 6.0) ? 0 : 1;

147 
glm
::
vec3
 
	`A
(1.0f, 2.0f, 3.0f);

148 
glm
::
vec3
 
	`B
(4.0f, 5.0f, 6.0f);

150 
A
 +
B
;

151 
Eº‹
 +
A
 =
glm
::
	`vec3
(5, 7, 9) ? 0 : 1;

153 
A
 += 1.0f;

154 
Eº‹
 +
A
 =
glm
::
	`vec3
(6, 8, 10) ? 0 : 1;

157 
glm
::
vec3
 
	`A
(1.0f, 2.0f, 3.0f);

158 
glm
::
vec3
 
	`B
(4.0f, 5.0f, 6.0f);

160 
B
 -
A
;

161 
Eº‹
 +
B
 =
glm
::
	`vec3
(3, 3, 3) ? 0 : 1;

163 
B
 -= 1.0f;

164 
Eº‹
 +
B
 =
glm
::
	`vec3
(2, 2, 2) ? 0 : 1;

167 
glm
::
vec3
 
	`A
(1.0f, 2.0f, 3.0f);

168 
glm
::
vec3
 
	`B
(4.0f, 5.0f, 6.0f);

170 
A
 *
B
;

171 
Eº‹
 +
A
 =
glm
::
	`vec3
(4, 10, 18) ? 0 : 1;

173 
A
 *= 2.0f;

174 
Eº‹
 +
A
 =
glm
::
	`vec3
(8, 20, 36) ? 0 : 1;

177 
glm
::
vec3
 
	`A
(1.0f, 2.0f, 3.0f);

178 
glm
::
vec3
 
	`B
(4.0f, 5.0f, 6.0f);

180 
B
 /
A
;

181 
Eº‹
 +
B
 =
glm
::
	`vec3
(4, 2.5, 2) ? 0 : 1;

183 
B
 /= 2.0f;

184 
Eº‹
 +
B
 =
glm
::
	`vec3
(2, 1.25, 1) ? 0 : 1;

187 
glm
::
vec3
 
	`B
(2.0f);

189 
B
 /B.
y
;

190 
Eº‹
 +
B
 =
glm
::
	`vec3
(1.0f) ? 0 : 1;

194 
glm
::
vec3
 
	`A
(1.0f, 2.0f, 3.0f);

195 
glm
::
vec3
 
B
 = -
A
;

196 
Eº‹
 +
B
 =
glm
::
	`vec3
(-1.0f, -2.0f, -3.0f) ? 0 : 1;

200 
glm
::
vec3
 
	`A
(1.0f, 2.0f, 3.0f);

201 
glm
::
vec3
 
B
 = --
A
;

202 
Eº‹
 +
B
 =
glm
::
	`vec3
(0.0f, 1.0f, 2.0f) ? 0 : 1;

206 
glm
::
vec3
 
	`A
(1.0f, 2.0f, 3.0f);

207 
glm
::
vec3
 
B
 = 
A
--;

208 
Eº‹
 +
B
 =
glm
::
	`vec3
(1.0f, 2.0f, 3.0f) ? 0 : 1;

209 
Eº‹
 +
A
 =
glm
::
	`vec3
(0.0f, 1.0f, 2.0f) ? 0 : 1;

213 
glm
::
vec3
 
	`A
(1.0f, 2.0f, 3.0f);

214 
glm
::
vec3
 
B
 = ++
A
;

215 
Eº‹
 +
B
 =
glm
::
	`vec3
(2.0f, 3.0f, 4.0f) ? 0 : 1;

219 
glm
::
vec3
 
	`A
(1.0f, 2.0f, 3.0f);

220 
glm
::
vec3
 
B
 = 
A
++;

221 
Eº‹
 +
B
 =
glm
::
	`vec3
(1.0f, 2.0f, 3.0f) ? 0 : 1;

222 
Eº‹
 +
A
 =
glm
::
	`vec3
(2.0f, 3.0f, 4.0f) ? 0 : 1;

225  
Eº‹
;

226 
	}
}

228 
	$ã°_vec3_size
()

230 
Eº‹
 = 0;

232 
Eº‹
 +(
glm
::
vec3
Ë=(glm::
lowp_vec3
) ? 0 : 1;

233 
Eº‹
 +(
glm
::
vec3
Ë=(glm::
mediump_vec3
) ? 0 : 1;

234 
Eº‹
 +(
glm
::
vec3
Ë=(glm::
highp_vec3
) ? 0 : 1;

235 
Eº‹
 +12 =(
glm
::
mediump_vec3
) ? 0 : 1;

236 
Eº‹
 +(
glm
::
dvec3
Ë=(glm::
lowp_dvec3
) ? 0 : 1;

237 
Eº‹
 +(
glm
::
dvec3
Ë=(glm::
mediump_dvec3
) ? 0 : 1;

238 
Eº‹
 +(
glm
::
dvec3
Ë=(glm::
highp_dvec3
) ? 0 : 1;

239 
Eº‹
 +24 =(
glm
::
highp_dvec3
) ? 0 : 1;

240 
Eº‹
 +
glm
::
	`vec3
().
	`Àngth
() == 3 ? 0 : 1;

241 
Eº‹
 +
glm
::
	`dvec3
().
	`Àngth
() == 3 ? 0 : 1;

242 
Eº‹
 +
glm
::
vec3
::
	`Àngth
() == 3 ? 0 : 1;

243 
Eº‹
 +
glm
::
dvec3
::
	`Àngth
() == 3 ? 0 : 1;

245  
Eº‹
;

246 
	}
}

248 
	$ã°_vec3_swizzÀ3_2
()

250 
Eº‹
 = 0;

252 
glm
::
vec3
 
	`v
(1, 2, 3);

253 
glm
::
vec2
 
u
;

255 #if(
GLM_LANG
 & 
GLM_LANG_CXXMS_FLAG
)

261 
u
 = 
v
.
xx
; 
Eº‹
 +(u.
x
 =1.0‡&& u.
y
 == 1.0f) ? 0 : 1;

262 
u
 = 
v
.
xy
; 
Eº‹
 +(u.
x
 =1.0‡&& u.
y
 == 2.0f) ? 0 : 1;

263 
u
 = 
v
.
xz
; 
Eº‹
 +(u.
x
 =1.0‡&& u.
y
 == 3.0f) ? 0 : 1;

264 
u
 = 
v
.
yx
; 
Eº‹
 +(u.
x
 =2.0‡&& u.
y
 == 1.0f) ? 0 : 1;

265 
u
 = 
v
.
yy
; 
Eº‹
 +(u.
x
 =2.0‡&& u.
y
 == 2.0f) ? 0 : 1;

266 
u
 = 
v
.
yz
; 
Eº‹
 +(u.
x
 =2.0‡&& u.
y
 == 3.0f) ? 0 : 1;

267 
u
 = 
v
.
zx
; 
Eº‹
 +(u.
x
 =3.0‡&& u.
y
 == 1.0f) ? 0 : 1;

268 
u
 = 
v
.
zy
; 
Eº‹
 +(u.
x
 =3.0‡&& u.
y
 == 2.0f) ? 0 : 1;

269 
u
 = 
v
.
zz
; 
Eº‹
 +(u.
x
 =3.0‡&& u.
y
 == 3.0f) ? 0 : 1;

271 
u
 = 
v
.
º
; 
Eº‹
 +(u.
r
 =1.0‡&& u.
g
 == 1.0f) ? 0 : 1;

272 
u
 = 
v
.
rg
; 
Eº‹
 +(u.
r
 =1.0‡&& u.
g
 == 2.0f) ? 0 : 1;

273 
u
 = 
v
.
rb
; 
Eº‹
 +(u.
r
 =1.0‡&& u.
g
 == 3.0f) ? 0 : 1;

274 
u
 = 
v
.
gr
; 
Eº‹
 +(u.
r
 =2.0‡&& u.
g
 == 1.0f) ? 0 : 1;

275 
u
 = 
v
.
gg
; 
Eº‹
 +(u.
r
 =2.0‡&& u.
g
 == 2.0f) ? 0 : 1;

276 
u
 = 
v
.
gb
; 
Eº‹
 +(u.
r
 =2.0‡&& u.
g
 == 3.0f) ? 0 : 1;

277 
u
 = 
v
.
br
; 
Eº‹
 +(u.
r
 =3.0‡&& u.
g
 == 1.0f) ? 0 : 1;

278 
u
 = 
v
.
bg
; 
Eº‹
 +(u.
r
 =3.0‡&& u.
g
 == 2.0f) ? 0 : 1;

279 
u
 = 
v
.
bb
; 
Eº‹
 +(u.
r
 =3.0‡&& u.
g
 == 3.0f) ? 0 : 1;

281 
u
 = 
v
.
ss
; 
Eº‹
 +(u.
s
 =1.0‡&& u.
t
 == 1.0f) ? 0 : 1;

282 
u
 = 
v
.
°
; 
Eº‹
 +(u.
s
 =1.0‡&& u.
t
 == 2.0f) ? 0 : 1;

283 
u
 = 
v
.
•
; 
Eº‹
 +(u.
s
 =1.0‡&& u.
t
 == 3.0f) ? 0 : 1;

284 
u
 = 
v
.
ts
; 
Eº‹
 +(u.
s
 =2.0‡&& u.
t
 == 1.0f) ? 0 : 1;

285 
u
 = 
v
.
â
; 
Eº‹
 +(u.
s
 =2.0‡&& u.
t
 == 2.0f) ? 0 : 1;

286 
u
 = 
v
.
ç
; 
Eº‹
 +(u.
s
 =2.0‡&& u.
t
 == 3.0f) ? 0 : 1;

287 
u
 = 
v
.
ps
; 
Eº‹
 +(u.
s
 =3.0‡&& u.
t
 == 1.0f) ? 0 : 1;

288 
u
 = 
v
.
±
; 
Eº‹
 +(u.
s
 =3.0‡&& u.
t
 == 2.0f) ? 0 : 1;

289 
u
 = 
v
.
µ
; 
Eº‹
 +(u.
s
 =3.0‡&& u.
t
 == 3.0f) ? 0 : 1;

294 
u
 = 
glm
::
	`vec2
(1, 2);

295 
v
 = 
glm
::
	`vec3
(1, 2, 3);

297 
v
.
xy
 = 
u
; 
Eº‹
 +(v.
x
 =1.0‡&& v.
y
 =2.0‡&& v.
z
 == 3.0f) ? 0 : 1;

298 
v
.
xz
 = 
u
; 
Eº‹
 +(v.
x
 =1.0‡&& v.
y
 =2.0‡&& v.
z
 == 2.0f) ? 0 : 1;

299 
v
.
yx
 = 
u
; 
Eº‹
 +(v.
x
 =2.0‡&& v.
y
 =1.0‡&& v.
z
 == 2.0f) ? 0 : 1;

301 
v
.
yz
 = 
u
; 
Eº‹
 +(v.
x
 =2.0‡&& v.
y
 =1.0‡&& v.
z
 == 2.0f) ? 0 : 1;

302 
v
.
zx
 = 
u
; 
Eº‹
 +(v.
x
 =2.0‡&& v.
y
 =1.0‡&& v.
z
 == 1.0f) ? 0 : 1;

303 
v
.
zy
 = 
u
; 
Eº‹
 +(v.
x
 =2.0‡&& v.
y
 =2.0‡&& v.
z
 == 1.0f) ? 0 : 1;

308  
Eº‹
;

309 
	}
}

311 
	$ã°_vec3_swizzÀ3_3
()

313 
Eº‹
 = 0;

315 
glm
::
vec3
 
	`v
(1, 2, 3);

316 
glm
::
vec3
 
u
;

318 #if(
GLM_LANG
 & 
GLM_LANG_CXXMS_FLAG
)

319 
u
 = 
v
; 
Eº‹
 +(u.
x
 =1.0‡&& u.
y
 =2.0‡&& u.
z
 == 3.0f) ? 0 : 1;

321 
u
 = 
v
.
xyz
; 
Eº‹
 +(u.
x
 =1.0‡&& u.
y
 =2.0‡&& u.
z
 == 3.0f) ? 0 : 1;

322 
u
 = 
v
.
zyx
; 
Eº‹
 +(u.
x
 =3.0‡&& u.
y
 =2.0‡&& u.
z
 == 1.0f) ? 0 : 1;

323 
u
.
zyx
 = 
v
; 
Eº‹
 +(u.
x
 =3.0‡&& u.
y
 =2.0‡&& u.
z
 == 1.0f) ? 0 : 1;

325 
u
 = 
v
.
rgb
; 
Eº‹
 +(u.
x
 =1.0‡&& u.
y
 =2.0‡&& u.
z
 == 3.0f) ? 0 : 1;

326 
u
 = 
v
.
bgr
; 
Eº‹
 +(u.
x
 =3.0‡&& u.
y
 =2.0‡&& u.
z
 == 1.0f) ? 0 : 1;

327 
u
.
bgr
 = 
v
; 
Eº‹
 +(u.
x
 =3.0‡&& u.
y
 =2.0‡&& u.
z
 == 1.0f) ? 0 : 1;

329 
u
 = 
v
.
°p
; 
Eº‹
 +(u.
x
 =1.0‡&& u.
y
 =2.0‡&& u.
z
 == 3.0f) ? 0 : 1;

330 
u
 = 
v
.
±s
; 
Eº‹
 +(u.
x
 =3.0‡&& u.
y
 =2.0‡&& u.
z
 == 1.0f) ? 0 : 1;

331 
u
.
±s
 = 
v
; 
Eº‹
 +(u.
x
 =3.0‡&& u.
y
 =2.0‡&& u.
z
 == 1.0f) ? 0 : 1;

334  
Eº‹
;

335 
	}
}

337 
	$ã°_vec3_swizzÀ_›î©‹s
()

339 
Eº‹
 = 0;

341 
glm
::
vec3
 
q
, 
u
, 
v
;

343 
u
 = 
glm
::
	`vec3
(1, 2, 3);

344 
v
 = 
glm
::
	`vec3
(10, 20, 30);

346 #if(
GLM_LANG
 & 
GLM_LANG_CXXMS_FLAG
)

348 
q
 = 
u
.
xyz
 + 
v
.xyz; 
Eº‹
 += (q == (u + v)) ? 0 : 1;

349 
q
 = (
u
.
zyx
 + 
v
.zyx).zyx; 
Eº‹
 += (q == (u + v)) ? 0 : 1;

350 
q
 = (
u
.
xyz
 - 
v
.xyz); 
Eº‹
 += (q == (u - v)) ? 0 : 1;

351 
q
 = (
u
.
xyz
 * 
v
.xyz); 
Eº‹
 += (q == (u * v)) ? 0 : 1;

352 
q
 = (
u
.
xxx
 * 
v
.xxx); 
Eº‹
 +(q =
glm
::
	`vec3
(u.
x
 * v.x)) ? 0 : 1;

353 
q
 = (
u
.
xyz
 / 
v
.xyz); 
Eº‹
 += (q == (u / v)) ? 0 : 1;

356 
q
 = 
u
 + 
v
.
xyz
; 
Eº‹
 += (q == (u + v)) ? 0 : 1;

357 
q
 = (
u
 - 
v
.
xyz
); 
Eº‹
 += (q == (u - v)) ? 0 : 1;

358 
q
 = (
u
 * 
v
.
xyz
); 
Eº‹
 += (q == (u * v)) ? 0 : 1;

359 
q
 = (
u
 * 
v
.
xxx
); 
Eº‹
 +(q =v.
x
 * u) ? 0 : 1;

360 
q
 = (
u
 / 
v
.
xyz
); 
Eº‹
 += (q == (u / v)) ? 0 : 1;

363 
q
 = 
u
.
xyz
 + 
v
; 
Eº‹
 += (q == (u + v)) ? 0 : 1;

364 
q
 = (
u
.
xyz
 - 
v
); 
Eº‹
 += (q == (u - v)) ? 0 : 1;

365 
q
 = (
u
.
xyz
 * 
v
); 
Eº‹
 += (q == (u * v)) ? 0 : 1;

366 
q
 = (
u
.
xxx
 * 
v
); 
Eº‹
 +(q =u.
x
 * v) ? 0 : 1;

367 
q
 = (
u
.
xyz
 / 
v
); 
Eº‹
 += (q == (u / v)) ? 0 : 1;

374  
Eº‹
;

375 
	}
}

377 
	$ã°_vec3_swizzÀ_fun˘i⁄s
()

379 
Eº‹
 = 0;

388 
r
;

391 
glm
::
vec2
 
	`a
(1, 2);

392 
glm
::
vec2
 
	`b
(10, 20);

393 
r
 = 
glm
::
	`dŸ
(
a
, 
b
); 
Eº‹
 += ((r) == 50) ? 0 : 1;

394 
r
 = 
glm
::
	`dŸ
(glm::
	`vec2
(
a
.
	`xy
()), glm::vec2(
b
.xy())); 
Eº‹
 += ((r) == 50) ? 0 : 1;

395 
r
 = 
glm
::
	`dŸ
(glm::
	`vec2
(
a
.
	`xy
()), glm::vec2(
b
.
	`yy
())); 
Eº‹
 += ((r) == 60) ? 0 : 1;

398 
glm
::
vec3
 
q
, 
u
, 
v
;

399 
u
 = 
glm
::
	`vec3
(1, 2, 3);

400 
v
 = 
glm
::
	`vec3
(10, 20, 30);

401 
r
 = 
glm
::
	`dŸ
(
u
, 
v
); 
Eº‹
 += ((r) == 140) ? 0 : 1;

402 
r
 = 
glm
::
	`dŸ
(
u
.
	`xyz
(), 
v
.
	`zyz
()); 
Eº‹
 += ((r) == 160) ? 0 : 1;

403 
r
 = 
glm
::
	`dŸ
(
u
, 
v
.
	`zyx
()); 
Eº‹
 += ((r) == 100) ? 0 : 1;

404 
r
 = 
glm
::
	`dŸ
(
u
.
	`xyz
(), 
v
); 
Eº‹
 += ((r) == 140) ? 0 : 1;

405 
r
 = 
glm
::
	`dŸ
(
u
.
	`xy
(), 
v
.xy()); 
Eº‹
 += ((r) == 50) ? 0 : 1;

408 
glm
::
vec4
 
s
, 
t
;

409 
s
 = 
glm
::
	`vec4
(1, 2, 3, 4);

410 
t
 = 
glm
::
	`vec4
(10, 20, 30, 40);

411 
r
 = 
glm
::
	`dŸ
(
s
, 
t
); 
Eº‹
 += ((r) == 300) ? 0 : 1;

412 
r
 = 
glm
::
	`dŸ
(
s
.
	`xyzw
(), 
t
.xyzw()); 
Eº‹
 += ((r) == 300) ? 0 : 1;

413 
r
 = 
glm
::
	`dŸ
(
s
.
	`xyz
(), 
t
.xyz()); 
Eº‹
 += ((r) == 140) ? 0 : 1;

415  
Eº‹
;

416 
	}
}

418 
	$ã°_vec3_swizzÀ_∑πül
()

420 
Eº‹
 = 0;

422 
glm
::
vec3
 
	`A
(1, 2, 3);

424 #if(
GLM_LANG
 & 
GLM_LANG_CXXMS_FLAG
)

426 
glm
::
vec3
 
	`B
(
A
.
xy
, 3.0f);

427 
Eº‹
 +
A
 =
B
 ? 0 : 1;

431 
glm
::
vec3
 
	`B
(1.0f, 
A
.
yz
);

432 
Eº‹
 +
A
 =
B
 ? 0 : 1;

436 
glm
::
vec3
 
	`B
(
A
.
xyz
);

437 
Eº‹
 +
A
 =
B
 ? 0 : 1;

441  
Eº‹
;

442 
	}
}

444 
	$ã°_›î©‹_ö¸emít
()

446 
	`Eº‹
(0);

448 
glm
::
ivec3
 
	`v0
(1);

449 
glm
::
ivec3
 
	`v1
(
v0
);

450 
glm
::
ivec3
 
	`v2
(
v0
);

451 
glm
::
ivec3
 
v3
 = ++
v1
;

452 
glm
::
ivec3
 
v4
 = 
v2
++;

454 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v0
, 
v4
)) ? 0 : 1;

455 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, 
v2
)) ? 0 : 1;

456 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, 
v3
)) ? 0 : 1;

458 
	`i0
(1);

459 
	`i1
(
i0
);

460 
	`i2
(
i0
);

461 
i3
 = ++
i1
;

462 
i4
 = 
i2
++;

464 
Eº‹
 +
i0
 =
i4
 ? 0 : 1;

465 
Eº‹
 +
i1
 =
i2
 ? 0 : 1;

466 
Eº‹
 +
i1
 =
i3
 ? 0 : 1;

468  
Eº‹
;

469 
	}
}

471 
	$maö
()

473 
Eº‹
 = 0;

475 
glm
::
vec3
 
v
;

476 
	`as£π
(
v
.
	`Àngth
() == 3);

478 
Eº‹
 +
	`ã°_vec3_˘‹
();

479 
Eº‹
 +
	`ã°_vec3_›î©‹s
();

480 
Eº‹
 +
	`ã°_vec3_size
();

481 
Eº‹
 +
	`ã°_vec3_swizzÀ3_2
();

482 
Eº‹
 +
	`ã°_vec3_swizzÀ3_3
();

483 
Eº‹
 +
	`ã°_vec3_swizzÀ_∑πül
();

484 
Eº‹
 +
	`ã°_vec3_swizzÀ_›î©‹s
();

485 
Eº‹
 +
	`ã°_vec3_swizzÀ_fun˘i⁄s
();

486 
Eº‹
 +
	`ã°_›î©‹_ö¸emít
();

488  
Eº‹
;

489 
	}
}

	@glm/test/core/core_type_vec4.cpp

1 
	#GLM_FORCE_ALIGNED


	)

2 
	#GLM_FORCE_SWIZZLE


	)

3 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

4 
	~<glm/vec2.hµ
>

5 
	~<glm/vec3.hµ
>

6 
	~<glm/vec4.hµ
>

7 
	~<c°dio
>

8 
	~<˘ime
>

9 
	~<ve˘‹
>

11 
	gãm∂©e
 <
	gVÆue
>

12 
	smask


14 íum{
	mvÆue
 = 
VÆue
};

17 
	ecomp


19 
	mX
,

20 
	mY
,

21 
	mZ
,

22 
	mW


32 
	$ã°_vec4_˘‹
()

34 
Eº‹
 = 0;

37 
glm
::
ivec4
 
	`A
(1, 2, 3, 4);

38 
glm
::
ivec4
 
	`B
(
A
);

39 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
B
)) ? 0 : 1;

42 #i‡
GLM_HAS_TRIVIAL_QUERIES


45 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
vec4
>::
vÆue
 ? 0 : 1;

46 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
dvec4
>::
vÆue
 ? 0 : 1;

47 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
ivec4
>::
vÆue
 ? 0 : 1;

48 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
uvec4
>::
vÆue
 ? 0 : 1;

50 
Eº‹
 +
°d
::
is_c›y_c⁄°ru˘ibÀ
<
glm
::
vec4
>::
vÆue
 ? 0 : 1;

53 #i‡
GLM_HAS_INITIALIZER_LISTS


55 
glm
::
vec4
 
a
{ 0, 1, 2, 3 };

56 
°d
::
ve˘‹
<
glm
::
vec4
> 
v
 = {

63 
glm
::
dvec4
 
a
{ 0, 1, 2, 3 };

64 
°d
::
ve˘‹
<
glm
::
dvec4
> 
v
 = {

71 #i‡
GLM_HAS_UNRESTRICTED_UNIONS
 && 
	`deföed
(
GLM_FORCE_SWIZZLE
)

73 
glm
::
vec4
 
A
 = glm::
	`vec4
(1.0f, 2.0f, 3.0f, 4.0f);

74 
glm
::
vec4
 
B
 = 
A
.
xyzw
;

75 
glm
::
vec4
 
	`C
(
A
.
xyzw
);

76 
glm
::
vec4
 
	`D
(
A
.
	`xyzw
());

77 
glm
::
vec4
 
	`E
(
A
.
x
, A.
yzw
);

78 
glm
::
vec4
 
	`F
(
A
.
x
, A.
	`yzw
());

79 
glm
::
vec4
 
	`G
(
A
.
xyz
, A.
w
);

80 
glm
::
vec4
 
	`H
(
A
.
	`xyz
(), A.
w
);

81 
glm
::
vec4
 
	`I
(
A
.
xy
, A.
zw
);

82 
glm
::
vec4
 
	`J
(
A
.
	`xy
(), A.
	`zw
());

83 
glm
::
vec4
 
	`K
(
A
.
x
, A.
y
, A.
zw
);

84 
glm
::
vec4
 
	`L
(
A
.
x
, A.
yz
, A.
w
);

85 
glm
::
vec4
 
	`M
(
A
.
xy
, A.
z
, A.
w
);

87 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
B
)) ? 0 : 1;

88 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
C
)) ? 0 : 1;

89 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
D
)) ? 0 : 1;

90 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
E
)) ? 0 : 1;

91 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
F
)) ? 0 : 1;

92 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
G
)) ? 0 : 1;

93 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
H
)) ? 0 : 1;

94 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
I
)) ? 0 : 1;

95 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
J
)) ? 0 : 1;

96 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
K
)) ? 0 : 1;

97 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
L
)) ? 0 : 1;

98 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
A
, 
M
)) ? 0 : 1;

103 
glm
::
vec4
 
	`A
(1);

104 
glm
::
vec4
 
	`B
(1, 1, 1, 1);

106 
Eº‹
 +
A
 =
B
 ? 0 : 1;

110 
°d
::
ve˘‹
<
glm
::
vec4
> 
Te°s
;

111 
Te°s
.
	`push_back
(
glm
::
	`vec4
(glm::
	`vec2
(1, 2), 3, 4));

112 
Te°s
.
	`push_back
(
glm
::
	`vec4
(1, glm::
	`vec2
(2, 3), 4));

113 
Te°s
.
	`push_back
(
glm
::
	`vec4
(1, 2, glm::
	`vec2
(3, 4)));

114 
Te°s
.
	`push_back
(
glm
::
	`vec4
(glm::
	`vec3
(1, 2, 3), 4));

115 
Te°s
.
	`push_back
(
glm
::
	`vec4
(1, glm::
	`vec3
(2, 3, 4)));

116 
Te°s
.
	`push_back
(
glm
::
	`vec4
(glm::
	`vec2
(1, 2), glm::vec2(3, 4)));

117 
Te°s
.
	`push_back
(
glm
::
	`vec4
(1, 2, 3, 4));

118 
Te°s
.
	`push_back
(
glm
::
	`vec4
(glm::vec4(1, 2, 3, 4)));

120 
°d
::
size_t
 
i
 = 0; i < 
Te°s
.
	`size
(); ++i)

121 
Eº‹
 +
Te°s
[
i
] =
glm
::
	`vec4
(1, 2, 3, 4) ? 0 : 1;

124  
Eº‹
;

125 
	}
}

127 
	$ã°_bvec4_˘‹
()

129 
Eº‹
 = 0;

131 
glm
::
bvec4
 c⁄° 
	`A
(
åue
);

132 
glm
::
bvec4
 c⁄° 
	`B
(
åue
);

133 
glm
::
bvec4
 c⁄° 
	`C
(
Ál£
);

134 
glm
::
bvec4
 c⁄° 
D
 = 
A
 && 
B
;

135 
glm
::
bvec4
 c⁄° 
E
 = 
A
 && 
C
;

136 
glm
::
bvec4
 c⁄° 
F
 = 
A
 || 
C
;

137 
boﬁ
 c⁄° 
G
 = 
A
 =
C
;

138 
boﬁ
 c⁄° 
H
 = 
A
 !
C
;

140 
Eº‹
 +
D
 =
glm
::
	`bvec4
(
åue
) ? 0 : 1;

141 
Eº‹
 +
E
 =
glm
::
	`bvec4
(
Ál£
) ? 0 : 1;

142 
Eº‹
 +
F
 =
glm
::
	`bvec4
(
åue
) ? 0 : 1;

144  
Eº‹
;

145 
	}
}

147 
	$ã°_vec4_›î©‹s
()

149 
Eº‹
 = 0;

152 
glm
::
vec4
 
	`A
(1.0f);

153 
glm
::
vec4
 
	`B
(1.0f);

154 
boﬁ
 
R
 = 
A
 !
B
;

155 
boﬁ
 
S
 = 
A
 =
B
;

157 
Eº‹
 +(
S
 && !
R
) ? 0 : 1;

161 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

162 
glm
::
vec4
 
	`B
(4.0f, 5.0f, 6.0f, 7.0f);

164 
glm
::
vec4
 
C
 = 
A
 + 
B
;

165 
Eº‹
 +
C
 =
glm
::
	`vec4
(5, 7, 9, 11) ? 0 : 1;

167 
glm
::
vec4
 
D
 = 
B
 - 
A
;

168 
Eº‹
 +
D
 =
glm
::
	`vec4
(3, 3, 3, 3) ? 0 : 1;

170 
glm
::
vec4
 
E
 = 
A
 * 
B
;

171 
Eº‹
 +
E
 =
glm
::
	`vec4
(4, 10, 18, 28) ? 0 : 1;

173 
glm
::
vec4
 
F
 = 
B
 / 
A
;

174 
Eº‹
 +
F
 =
glm
::
	`vec4
(4, 2.5, 2, 7.0f / 4.0f) ? 0 : 1;

176 
glm
::
vec4
 
G
 = 
A
 + 1.0f;

177 
Eº‹
 +
G
 =
glm
::
	`vec4
(2, 3, 4, 5) ? 0 : 1;

179 
glm
::
vec4
 
H
 = 
B
 - 1.0f;

180 
Eº‹
 +
H
 =
glm
::
	`vec4
(3, 4, 5, 6) ? 0 : 1;

182 
glm
::
vec4
 
I
 = 
A
 * 2.0f;

183 
Eº‹
 +
I
 =
glm
::
	`vec4
(2, 4, 6, 8) ? 0 : 1;

185 
glm
::
vec4
 
J
 = 
B
 / 2.0f;

186 
Eº‹
 +
J
 =
glm
::
	`vec4
(2, 2.5, 3, 3.5) ? 0 : 1;

188 
glm
::
vec4
 
K
 = 1.0‡+ 
A
;

189 
Eº‹
 +
K
 =
glm
::
	`vec4
(2, 3, 4, 5) ? 0 : 1;

191 
glm
::
vec4
 
L
 = 1.0‡- 
B
;

192 
Eº‹
 +
L
 =
glm
::
	`vec4
(-3, -4, -5, -6) ? 0 : 1;

194 
glm
::
vec4
 
M
 = 2.0‡* 
A
;

195 
Eº‹
 +
M
 =
glm
::
	`vec4
(2, 4, 6, 8) ? 0 : 1;

197 
glm
::
vec4
 
N
 = 2.0‡/ 
B
;

198 
Eº‹
 +
N
 =
glm
::
	`vec4
(0.5, 2.0 / 5.0, 2.0 / 6.0, 2.0 / 7.0) ? 0 : 1;

202 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

203 
glm
::
vec4
 
	`B
(4.0f, 5.0f, 6.0f, 7.0f);

205 
A
 +
B
;

206 
Eº‹
 +
A
 =
glm
::
	`vec4
(5, 7, 9, 11) ? 0 : 1;

208 
A
 += 1.0f;

209 
Eº‹
 +
A
 =
glm
::
	`vec4
(6, 8, 10, 12) ? 0 : 1;

212 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

213 
glm
::
vec4
 
	`B
(4.0f, 5.0f, 6.0f, 7.0f);

215 
B
 -
A
;

216 
Eº‹
 +
B
 =
glm
::
	`vec4
(3, 3, 3, 3) ? 0 : 1;

218 
B
 -= 1.0f;

219 
Eº‹
 +
B
 =
glm
::
	`vec4
(2, 2, 2, 2) ? 0 : 1;

222 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

223 
glm
::
vec4
 
	`B
(4.0f, 5.0f, 6.0f, 7.0f);

225 
A
 *
B
;

226 
Eº‹
 +
A
 =
glm
::
	`vec4
(4, 10, 18, 28) ? 0 : 1;

228 
A
 *= 2.0f;

229 
Eº‹
 +
A
 =
glm
::
	`vec4
(8, 20, 36, 56) ? 0 : 1;

232 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

233 
glm
::
vec4
 
	`B
(4.0f, 5.0f, 6.0f, 7.0f);

235 
B
 /
A
;

236 
Eº‹
 +
B
 =
glm
::
	`vec4
(4, 2.5, 2, 7.0f / 4.0f) ? 0 : 1;

238 
B
 /= 2.0f;

239 
Eº‹
 +
B
 =
glm
::
	`vec4
(2, 1.25, 1, 7.0f / 4.0f / 2.0f) ? 0 : 1;

242 
glm
::
vec4
 
	`B
(2.0f);

244 
B
 /B.
y
;

245 
Eº‹
 +
B
 =
glm
::
	`vec4
(1.0f) ? 0 : 1;

249 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

250 
glm
::
vec4
 
B
 = -
A
;

251 
Eº‹
 +
B
 =
glm
::
	`vec4
(-1.0f, -2.0f, -3.0f, -4.0f) ? 0 : 1;

255 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

256 
glm
::
vec4
 
B
 = --
A
;

257 
Eº‹
 +
B
 =
glm
::
	`vec4
(0.0f, 1.0f, 2.0f, 3.0f) ? 0 : 1;

261 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

262 
glm
::
vec4
 
B
 = 
A
--;

263 
Eº‹
 +
B
 =
glm
::
	`vec4
(1.0f, 2.0f, 3.0f, 4.0f) ? 0 : 1;

264 
Eº‹
 +
A
 =
glm
::
	`vec4
(0.0f, 1.0f, 2.0f, 3.0f) ? 0 : 1;

268 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

269 
glm
::
vec4
 
B
 = ++
A
;

270 
Eº‹
 +
B
 =
glm
::
	`vec4
(2.0f, 3.0f, 4.0f, 5.0f) ? 0 : 1;

274 
glm
::
vec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

275 
glm
::
vec4
 
B
 = 
A
++;

276 
Eº‹
 +
B
 =
glm
::
	`vec4
(1.0f, 2.0f, 3.0f, 4.0f) ? 0 : 1;

277 
Eº‹
 +
A
 =
glm
::
	`vec4
(2.0f, 3.0f, 4.0f, 5.0f) ? 0 : 1;

280  
Eº‹
;

281 
	}
}

283 
	$ã°_vec4_equÆ
()

285 
Eº‹
 = 0;

288 
glm
::
vec4
 c⁄° 
	`A
(1, 2, 3, 4);

289 
glm
::
vec4
 c⁄° 
	`B
(1, 2, 3, 4);

290 
Eº‹
 +
A
 =
B
 ? 0 : 1;

291 
Eº‹
 +
A
 !
B
 ? 1 : 0;

295 
glm
::
ivec4
 c⁄° 
	`A
(1, 2, 3, 4);

296 
glm
::
ivec4
 c⁄° 
	`B
(1, 2, 3, 4);

297 
Eº‹
 +
A
 =
B
 ? 0 : 1;

298 
Eº‹
 +
A
 !
B
 ? 1 : 0;

301  
Eº‹
;

302 
	}
}

304 
	$ã°_vec4_size
()

306 
Eº‹
 = 0;

308 
Eº‹
 +(
glm
::
vec4
Ë=(glm::
lowp_vec4
) ? 0 : 1;

309 
Eº‹
 +(
glm
::
vec4
Ë=(glm::
mediump_vec4
) ? 0 : 1;

310 
Eº‹
 +(
glm
::
vec4
Ë=(glm::
highp_vec4
) ? 0 : 1;

311 
Eº‹
 +16 =(
glm
::
mediump_vec4
) ? 0 : 1;

312 
Eº‹
 +(
glm
::
dvec4
Ë=(glm::
lowp_dvec4
) ? 0 : 1;

313 
Eº‹
 +(
glm
::
dvec4
Ë=(glm::
mediump_dvec4
) ? 0 : 1;

314 
Eº‹
 +(
glm
::
dvec4
Ë=(glm::
highp_dvec4
) ? 0 : 1;

315 
Eº‹
 +32 =(
glm
::
highp_dvec4
) ? 0 : 1;

316 
Eº‹
 +
glm
::
	`vec4
().
	`Àngth
() == 4 ? 0 : 1;

317 
Eº‹
 +
glm
::
	`dvec4
().
	`Àngth
() == 4 ? 0 : 1;

318 
Eº‹
 +
glm
::
vec4
::
	`Àngth
() == 4 ? 0 : 1;

319 
Eº‹
 +
glm
::
dvec4
::
	`Àngth
() == 4 ? 0 : 1;

321  
Eº‹
;

322 
	}
}

324 
	$ã°_vec4_swizzÀ_∑πül
()

326 
Eº‹
 = 0;

328 
glm
::
vec4
 
	`A
(1, 2, 3, 4);

330 #i‡
GLM_HAS_UNRESTRICTED_UNIONS
 && 
	`deföed
(
GLM_SWIZZLE_RELAX
)

332 
glm
::
vec4
 
	`B
(
A
.
xy
, A.
zw
);

333 
Eº‹
 +
A
 =
B
 ? 0 : 1;

336 
glm
::
vec4
 
	`B
(
A
.
xy
, 3.0f, 4.0f);

337 
Eº‹
 +
A
 =
B
 ? 0 : 1;

340 
glm
::
vec4
 
	`B
(1.0f, 
A
.
yz
, 4.0f);

341 
Eº‹
 +
A
 =
B
 ? 0 : 1;

344 
glm
::
vec4
 
	`B
(1.0f, 2.0f, 
A
.
zw
);

345 
Eº‹
 +
A
 =
B
 ? 0 : 1;

349 
glm
::
vec4
 
	`B
(
A
.
xyz
, 4.0f);

350 
Eº‹
 +
A
 =
B
 ? 0 : 1;

353 
glm
::
vec4
 
	`B
(1.0f, 
A
.
yzw
);

354 
Eº‹
 +
A
 =
B
 ? 0 : 1;

358  
Eº‹
;

359 
	}
}

361 
	$ã°_›î©‹_ö¸emít
()

363 
	`Eº‹
(0);

365 
glm
::
ivec4
 
	`v0
(1);

366 
glm
::
ivec4
 
	`v1
(
v0
);

367 
glm
::
ivec4
 
	`v2
(
v0
);

368 
glm
::
ivec4
 
v3
 = ++
v1
;

369 
glm
::
ivec4
 
v4
 = 
v2
++;

371 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v0
, 
v4
)) ? 0 : 1;

372 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, 
v2
)) ? 0 : 1;

373 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, 
v3
)) ? 0 : 1;

375 
	`i0
(1);

376 
	`i1
(
i0
);

377 
	`i2
(
i0
);

378 
i3
 = ++
i1
;

379 
i4
 = 
i2
++;

381 
Eº‹
 +
i0
 =
i4
 ? 0 : 1;

382 
Eº‹
 +
i1
 =
i2
 ? 0 : 1;

383 
Eº‹
 +
i1
 =
i3
 ? 0 : 1;

385  
Eº‹
;

386 
	}
}

388 
	sAoS


390 
	mglm
::
vec4
 
A
;

391 
	mglm
::
vec3
 
B
;

392 
	mglm
::
vec3
 
C
;

393 
	mglm
::
vec2
 
D
;

396 
	$ã°_vec4_≥rf_AoS
(
°d
::
size_t
 
Size
)

398 
	`Eº‹
(0);

400 
°d
::
ve˘‹
<
AoS
> 
In
;

401 
°d
::
ve˘‹
<
AoS
> 
Out
;

402 
In
.
	`ªsize
(
Size
);

403 
Out
.
	`ªsize
(
Size
);

405 
°d
::
˛ock_t
 
SèπTime
 = std::
	`˛ock
();

407 
°d
::
size_t
 
i
 = 0; i < 
In
.
	`size
(); ++i)

408 
Out
[
i
] = 
In
[i];

410 
°d
::
˛ock_t
 
EndTime
 = std::
	`˛ock
();

412 
°d
::
	`¥ötf
("AoS: %ld\n", 
EndTime
 - 
SèπTime
);

414  
Eº‹
;

415 
	}
}

417 
	$ã°_vec4_≥rf_SoA
(
°d
::
size_t
 
Size
)

419 
	`Eº‹
(0);

421 
°d
::
ve˘‹
<
glm
::
vec4
> 
InA
;

422 
°d
::
ve˘‹
<
glm
::
vec3
> 
InB
;

423 
°d
::
ve˘‹
<
glm
::
vec3
> 
InC
;

424 
°d
::
ve˘‹
<
glm
::
vec2
> 
InD
;

425 
°d
::
ve˘‹
<
glm
::
vec4
> 
OutA
;

426 
°d
::
ve˘‹
<
glm
::
vec3
> 
OutB
;

427 
°d
::
ve˘‹
<
glm
::
vec3
> 
OutC
;

428 
°d
::
ve˘‹
<
glm
::
vec2
> 
OutD
;

430 
InA
.
	`ªsize
(
Size
);

431 
InB
.
	`ªsize
(
Size
);

432 
InC
.
	`ªsize
(
Size
);

433 
InD
.
	`ªsize
(
Size
);

434 
OutA
.
	`ªsize
(
Size
);

435 
OutB
.
	`ªsize
(
Size
);

436 
OutC
.
	`ªsize
(
Size
);

437 
OutD
.
	`ªsize
(
Size
);

439 
°d
::
˛ock_t
 
SèπTime
 = std::
	`˛ock
();

441 
°d
::
size_t
 
i
 = 0; i < 
InA
.
	`size
(); ++i)

443 
OutA
[
i
] = 
InA
[i];

444 
OutB
[
i
] = 
InB
[i];

445 
OutC
[
i
] = 
InC
[i];

446 
OutD
[
i
] = 
InD
[i];

449 
°d
::
˛ock_t
 
EndTime
 = std::
	`˛ock
();

451 
°d
::
	`¥ötf
("SoA: %ld\n", 
EndTime
 - 
SèπTime
);

453  
Eº‹
;

454 
	}
}

456 
«me•a˚
 
	ghóp


458 ˛as†
	cA


460 
	gf
;

463 ˛as†
	cB
 : 
public
 
A


465 
g
;

466 
	gglm
::
vec4
 
v
;

469 
	$ã°
()

471 
	`Eº‹
(0);

473 
A
* 
p
 = 
√w
 
B
;

474 
dñëe
 
p
;

476  
Eº‹
;

477 
	}
}

480 
	$ã°_vec4_simd
()

482 
Eº‹
 = 0;

484 
glm
::
vec4
 c⁄° 
	`a
(
°d
::
	`˛ock
(), std::clock(), std::clock(), std::clock());

485 
glm
::
vec4
 c⁄° 
	`b
(
°d
::
	`˛ock
(), std::clock(), std::clock(), std::clock());

487 
glm
::
vec4
 c⁄° 
	`c
(
b
 * 
a
);

488 
glm
::
vec4
 c⁄° 
	`d
(
a
 + 
c
);

490 
Eº‹
 +
glm
::
	`Æl
(glm::
	`gª©îTh™EquÆ
(
d
, glm::
	`vec4
(0))) ? 0 : 1;

492  
Eº‹
;

493 
	}
}

495 
	$maö
()

497 
	`Eº‹
(0);

540 
glm
::
vec4
 
v
;

541 
	`as£π
(
v
.
	`Àngth
() == 4);

543 #ifde‡
NDEBUG


544 
°d
::
size_t
 c⁄° 
	`Size
(1000000);

545 
Eº‹
 +
	`ã°_vec4_≥rf_AoS
(
Size
);

546 
Eº‹
 +
	`ã°_vec4_≥rf_SoA
(
Size
);

549 
Eº‹
 +
	`ã°_vec4_˘‹
();

550 
Eº‹
 +
	`ã°_bvec4_˘‹
();

551 
Eº‹
 +
	`ã°_vec4_size
();

552 
Eº‹
 +
	`ã°_vec4_›î©‹s
();

553 
Eº‹
 +
	`ã°_vec4_equÆ
();

554 
Eº‹
 +
	`ã°_vec4_swizzÀ_∑πül
();

555 
Eº‹
 +
	`ã°_vec4_simd
();

556 
Eº‹
 +
	`ã°_›î©‹_ö¸emít
();

557 
Eº‹
 +
hóp
::
	`ã°
();

559  
Eº‹
;

560 
	}
}

	@glm/test/external/gli/core/dummy.cpp

1 
	$maö
()

4 
	}
}

	@glm/test/external/gli/core/generate_mipmaps.hpp

10 #i‚de‡
GLI_GENERATE_MIPMAPS_INCLUDED


11 
	#GLI_GENERATE_MIPMAPS_INCLUDED


	)

13 
	~"ãxtuª2d.hµ
"

15 
«me•a˚
 
	ggli


17 
ãxtuª2D
 
gíî©eMùm≠s
(

18 
ãxtuª2D
 c⁄° & 
Textuª
,

19 
ãxtuª2D
::
Àvñ_ty≥
 c⁄° & 
Ba£Levñ
);

23 
	~"gíî©e_mùm≠s.öl
"

	@glm/test/external/gli/core/image2d.hpp

10 #i‚de‡
GLI_CORE_IMAGE2D_INCLUDED


11 
	#GLI_CORE_IMAGE2D_INCLUDED


	)

14 
	~<ve˘‹
>

15 
	~<ˇs£π
>

16 
	~<cm©h
>

17 
	~<c°rög
>

20 
	~<glm/glm.hµ
>

21 
	~<glm/gtx/numbî_¥ecisi⁄.hµ
>

22 
	~<glm/gtx/øw_d©a.hµ
>

23 
	~<glm/gtx/gødõ¡_∑öt.hµ
>

24 
	~<glm/gtx/comp⁄ít_wi£.hµ
>

26 
«me•a˚
 
	ggli


28 
	ef‹m©


30 
	gFORMAT_NULL
,

33 
	gR8U
,

34 
	gRG8U
,

35 
	gRGB8U
,

36 
	gRGBA8U
,

38 
	gR16U
,

39 
	gRG16U
,

40 
	gRGB16U
,

41 
	gRGBA16U
,

43 
	gR32U
,

44 
	gRG32U
,

45 
	gRGB32U
,

46 
	gRGBA32U
,

49 
	gR8I
,

50 
	gRG8I
,

51 
	gRGB8I
,

52 
	gRGBA8I
,

54 
	gR16I
,

55 
	gRG16I
,

56 
	gRGB16I
,

57 
	gRGBA16I
,

59 
	gR32I
,

60 
	gRG32I
,

61 
	gRGB32I
,

62 
	gRGBA32I
,

65 
	gR16F
,

66 
	gRG16F
,

67 
	gRGB16F
,

68 
	gRGBA16F
,

70 
	gR32F
,

71 
	gRG32F
,

72 
	gRGB32F
,

73 
	gRGBA32F
,

76 
	gRGBE8
,

77 
	gRGB9E5
,

78 
	gRG11B10F
,

79 
	gR5G6B5
,

80 
	gRGBA4
,

81 
	gRGB10A2
,

84 
	gD16
,

85 
	gD24X8
,

86 
	gD24S8
,

87 
	gD32F
,

88 
	gD32FS8X24
,

91 
	gDXT1
,

92 
	gDXT3
,

93 
	gDXT5
,

94 
	gATI1N_UNORM
,

95 
	gATI1N_SNORM
,

96 
	gATI2N_UNORM
,

97 
	gATI2N_SNORM
,

98 
	gBP_UF16
,

99 
	gBP_SF16
,

100 
	gBP
,

102 
	gFORMAT_MAX


105 
	esize_ty≥


107 
	gLINEAR_SIZE
,

108 
	gBLOCK_SIZE
,

109 
	gBIT_PER_PIXEL
,

110 
	gCOMPONENT


113 ˛as†
	cimage2D


115 
	gpublic
:

116 
glm
::
	tuvec2
 
	tdimísi⁄s_ty≥
;

117 
	gglm
::
	tvec2
 
	tãxco‹d_ty≥
;

118 
	gglm
::
	tuöt32
 
	tsize_ty≥
;

119 
	gglm
::
	tbyã
 
	tvÆue_ty≥
;

120 
	ggli
::
	tf‹m©
 
	tf‹m©_ty≥
;

121 
	g°d
::
	tve˘‹
<
	tvÆue_ty≥
> 
	td©a_ty≥
;

123 
	gpublic
:

124 
image2D
();

125 
image2D
(

126 
image2D
 c⁄° & 
Image
);

128 
ex∂icô
 
image2D
(

129 
dimísi⁄s_ty≥
 c⁄° & 
Dimísi⁄s
,

130 
f‹m©_ty≥
 c⁄° & 
F‹m©
);

132 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

133 
ex∂icô
 
image2D
(

134 
dimísi⁄s_ty≥
 c⁄° & 
Dimísi⁄s
,

135 
f‹m©_ty≥
 c⁄° & 
F‹m©
,

136 
gíTy≥
 c⁄° & 
VÆue
);

138 
ex∂icô
 
image2D
(

139 
dimísi⁄s_ty≥
 c⁄° & 
Dimísi⁄s
,

140 
f‹m©_ty≥
 c⁄° & 
F‹m©
,

141 
°d
::
ve˘‹
<
vÆue_ty≥
> c⁄° & 
D©a
);

143 ~
image2D
();

145 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

146 
£tPixñ
(

147 
dimísi⁄s_ty≥
 c⁄° & 
TexñCo‹d
,

148 
gíTy≥
 c⁄° & 
TexñD©a
);

150 
size_ty≥
 
vÆue_size
() const;

151 
size_ty≥
 
ˇ∑côy
() const;

152 
dimísi⁄s_ty≥
 
dimísi⁄s
() const;

153 
size_ty≥
 
comp⁄íts
() const;

154 
f‹m©_ty≥
 
f‹m©
() const;

156 
vÆue_ty≥
 * 
d©a
();

157 
vÆue_ty≥
 c⁄° * c⁄° 
d©a
() const;

159 
	g¥iv©e
:

160 
d©a_ty≥
 
D©a
;

161 
dimísi⁄s_ty≥
 
	gDimísi⁄s
;

162 
f‹m©_ty≥
 
	gF‹m©
;

167 
	~"image2d.öl
"

	@glm/test/external/gli/core/operation.hpp

10 #i‚de‡
GLI_OPERATION_INCLUDED


11 
	#GLI_OPERATION_INCLUDED


	)

13 
	~"ãxtuª2d.hµ
"

15 
«me•a˚
 
	ggli


17 
ãxtuª2D
 
du∂iˇã
—extuª2D c⁄° & 
Textuª
);

18 
ãxtuª2D
 
Êù
—extuª2D c⁄° & 
Textuª
);

19 
ãxtuª2D
 
múr‹
—extuª2D c⁄° & 
Textuª
);

20 
ãxtuª2D
 
swizzÀ
(

21 
ãxtuª2D
 c⁄° & 
Textuª
,

22 
glm
::
uvec4
 c⁄° & 
Ch™√l
);

23 
ãxtuª2D
 
¸›
(

24 
ãxtuª2D
 c⁄° & 
Textuª
,

25 
ãxtuª2D
::
dimísi⁄s_ty≥
 c⁄° & 
Posôi⁄
,

26 
ãxtuª2D
::
dimísi⁄s_ty≥
 c⁄° & 
Size
);

28 
image2D
 
¸›
(

29 
image2D
 c⁄° & 
Image
,

30 
ãxtuª2D
::
dimísi⁄s_ty≥
 c⁄° & 
Posôi⁄
,

31 
ãxtuª2D
::
dimísi⁄s_ty≥
 c⁄° & 
Size
);

33 
image2D
 
c›y
(

34 
image2D
 c⁄° & 
SrcImage
,

35 
image2D
::
dimísi⁄s_ty≥
 c⁄° & 
SrcPosôi⁄
,

36 
image2D
::
dimísi⁄s_ty≥
 c⁄° & 
SrcSize
,

37 
image2D
 & 
D°Image
,

38 
image2D
::
dimísi⁄s_ty≥
 c⁄° & 
D°Posôi⁄
);

80 
	~"›î©i⁄.öl
"

	@glm/test/external/gli/core/operator.hpp

10 #i‚de‡
GLI_OPERATOR_INCLUDED


11 
	#GLI_OPERATOR_INCLUDED


	)

13 
	~"ãxtuª2d.hµ
"

15 
«me•a˚
 
	ggli
{

16 
«me•a˚
 
	gdëaû


21 
ãxtuª2D
 
	g›î©‹
+—extuª2D c⁄° & 
	gTextuªA
,Åextuª2D c⁄° & 
	gTextuªB
);

22 
ãxtuª2D
 
	g›î©‹
-—extuª2D c⁄° & 
	gTextuªA
,Åextuª2D c⁄° & 
	gTextuªB
);

26 
	~"›î©‹.öl
"

	@glm/test/external/gli/core/shared_array.hpp

10 #i‚de‡
GLI_SHARED_ARRAY_INCLUDED


11 
	#GLI_SHARED_ARRAY_INCLUDED


	)

13 
«me•a˚
 
	ggli


15 
	gãm∂©e
 <
ty≥«me
 
	gT
>

16 ˛as†
	csh¨ed_¨øy


18 
	gpublic
:

20 
sh¨ed_¨øy
();

21 
sh¨ed_¨øy
(sh¨ed_¨øy c⁄° & 
Sh¨edAºay
);

22 
sh¨ed_¨øy
(
T
 * 
Poöãr
);

23 
	gvútuÆ
 ~
sh¨ed_¨øy
();

25 
ª£t
();

26 
ª£t
(
T
 * 
Poöãr
);

28 
	gT
 & 
	g›î©‹
*();

29 
T
 * 
	g›î©‹
->();

30 
T
 c⁄° & 
	g›î©‹
*() const;

31 
T
 c⁄° * c⁄° 
	g›î©‹
->() const;

33 
T
 * 
gë
();

34 
T
 c⁄° * c⁄° 
gë
() const;

36 
	gsh¨ed_¨øy
 & 
	g›î©‹
=(
sh¨ed_¨øy
 c⁄° & 
Sh¨edAºay
);

37 
boﬁ
 
	g›î©‹
==(
sh¨ed_¨øy
 c⁄° & 
Sh¨edAºay
) const;

38 
boﬁ
 
	g›î©‹
!=(
sh¨ed_¨øy
 c⁄° & 
Sh¨edAºay
) const;

40 
	g¥iv©e
:

41 * 
Cou¡î
;

42 
T
 * 
	gPoöãr
;

46 
	~"sh¨ed_¨øy.öl
"

	@glm/test/external/gli/core/shared_ptr.hpp

10 #i‚de‡
GLI_SHARED_PTR_INCLUDED


11 
	#GLI_SHARED_PTR_INCLUDED


	)

13 
«me•a˚
 
	ggli


15 
	gãm∂©e
 <
ty≥«me
 
	gT
>

16 ˛as†
	csh¨ed_±r


18 
	gpublic
:

19 
sh¨ed_±r
();

20 
sh¨ed_±r
(sh¨ed_±∏c⁄° & 
Sm¨tPå
);

21 
sh¨ed_±r
(
T
* 
pPoöãr
);

22 ~
sh¨ed_±r
();

24 
	gT
& 
	g›î©‹
*();

25 
T
* 
	g›î©‹
->();

26 c⁄° 
	gT
& 
	g›î©‹
*() const;

27 c⁄° 
T
* 
	g›î©‹
->() const;

28 
	gsh¨ed_±r
& 
	g›î©‹
=(
sh¨ed_±r
 c⁄° & 
Sm¨tPå
);

29 
	gsh¨ed_±r
& 
	g›î©‹
=(
T
* 
pPoöãr
);

30 
boﬁ
 
	g›î©‹
==(
sh¨ed_±r
 c⁄° & 
Sm¨tPå
) const;

31 
boﬁ
 
	g›î©‹
!=(
sh¨ed_±r
 c⁄° & 
Sm¨tPå
) const;

33 
	g¥iv©e
:

34 * 
m_pRe„ªn˚
;

35 
T
* 
	gm_pPoöãr
;

39 
	~"sh¨ed_±r.öl
"

	@glm/test/external/gli/core/size.hpp

10 #i‚de‡
GLI_CORE_SIZE_INCLUDED


11 
	#GLI_CORE_SIZE_INCLUDED


	)

13 
	~"ãxtuª2d.hµ
"

15 
«me•a˚
 
	ggli


18 
	gimage2D
::
size_ty≥
 
size
(

19 
image2D
 c⁄° & 
Image
,

20 
image2D
::
size_ty≥
 c⁄° & 
SizeTy≥
);

23 
	gãxtuª2D
::
size_ty≥
 
size
(

24 
ãxtuª2D
 c⁄° & 
Textuª
,

25 
ãxtuª2D
::
size_ty≥
 c⁄° & 
SizeTy≥
);

29 
	~"size.öl
"

	@glm/test/external/gli/core/texture2d.hpp

10 #i‚de‡
GLI_CORE_TEXTURE2D_INCLUDED


11 
	#GLI_CORE_TEXTURE2D_INCLUDED


	)

13 
	~"image2d.hµ
"

15 
«me•a˚
 
	ggli


17 
	ecomp


19 
	gX
 = 0,

20 
	gR
 = 0,

21 
	gS
 = 0,

22 
	gY
 = 1,

23 
	gG
 = 1,

24 
	gT
 = 1,

25 
	gZ
 = 2,

26 
	gB
 = 2,

27 
	gP
 = 2,

28 
	gW
 = 3,

29 
	gA
 = 3,

30 
	gQ
 = 3

34 ˛as†
	cãxtuª2D


36 
	gpublic
:

37 
image2D
::
	tdimísi⁄s_ty≥
 dimensions_type;

38 
	gimage2D
::
	tãxco‹d_ty≥
Åexcoord_type;

39 
	gimage2D
::
	tsize_ty≥
 size_type;

40 
	gimage2D
::
	tvÆue_ty≥
 value_type;

41 
	gimage2D
::
	tf‹m©_ty≥
 format_type;

42 
	gimage2D
::
	td©a_ty≥
 data_type;

43 
	g°d
::
	tsize_t
 
	tÀvñ_ty≥
;

45 
	gpublic
:

46 
ãxtuª2D
();

48 
ex∂icô
 
ãxtuª2D
(
Àvñ_ty≥
 c⁄° & 
Levñs
);

51 ~
ãxtuª2D
();

53 
	gimage2D
 & 
	g›î©‹
[] (

54 
Àvñ_ty≥
 c⁄° & 
	gLevñ
);

55 
image2D
 c⁄° & 
	g›î©‹
[] (

56 
Àvñ_ty≥
 c⁄° & 
	gLevñ
) const;

58 
boﬁ
 
em±y
() const;

59 
f‹m©_ty≥
 
f‹m©
() const;

60 
Àvñ_ty≥
 
Àvñs
() const;

61 
ªsize
(
Àvñ_ty≥
 c⁄° & 
Levñs
);

63 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

64 
swizzÀ
(
gli
::
comp
 
X
, gli::com∞
Y
, gli::com∞
Z
, gli::com∞
W
);

66 
	g¥iv©e
:

67 
°d
::
ve˘‹
<
image2D
> 
Images
;

120 
	~"ãxtuª2d.öl
"

	@glm/test/external/gli/core/texture2d_array.hpp

10 #i‚de‡
GLI_CORE_TEXTURE2D_ARRAY_INCLUDED


11 
	#GLI_CORE_TEXTURE2D_ARRAY_INCLUDED


	)

13 
	~"ãxtuª2d.hµ
"

15 
«me•a˚
 
	ggli


17 ˛as†
	cãxtuª2DAºay


19 
	gpublic
:

20 
ãxtuª2D
::
	tdimísi⁄s_ty≥
 dimensions_type;

21 
	gãxtuª2D
::
	tãxco‹d_ty≥
Åexcoord_type;

22 
	gãxtuª2D
::
	tsize_ty≥
 size_type;

23 
	gãxtuª2D
::
	tvÆue_ty≥
 value_type;

24 
	gãxtuª2D
::
	tf‹m©_ty≥
 format_type;

25 
	gãxtuª2D
::
	td©a_ty≥
 data_type;

26 
	gãxtuª2D
::
	tÀvñ_ty≥
Üevel_type;

27 
	g°d
::
	tve˘‹
<
	tãxtuª2D
>::
	tsize_ty≥
 
	tœyî_ty≥
;

29 
	gpublic
:

30 
ãxtuª2DAºay
();

32 
ex∂icô
 
ãxtuª2DAºay
(

33 
œyî_ty≥
 c⁄° & 
Layîs
,

34 
Àvñ_ty≥
 c⁄° & 
Levñs
);

36 ~
ãxtuª2DAºay
();

38 
	gãxtuª2D
 & 
	g›î©‹
[] (

39 
œyî_ty≥
 c⁄° & 
	gLayî
);

40 
ãxtuª2D
 c⁄° & 
	g›î©‹
[] (

41 
œyî_ty≥
 c⁄° & 
	gLayî
) const;

43 
boﬁ
 
em±y
() const;

44 
f‹m©_ty≥
 
f‹m©
() const;

45 
œyî_ty≥
 
œyîs
() const;

46 
Àvñ_ty≥
 
Àvñs
() const;

47 
ªsize
(

48 
œyî_ty≥
 c⁄° & 
Layîs
,

49 
Àvñ_ty≥
 c⁄° & 
Levñs
);

51 
	g¥iv©e
:

52 
°d
::
ve˘‹
<
ãxtuª2D
> 
Aºays
;

57 
	~"ãxtuª2d_¨øy.öl
"

	@glm/test/external/gli/core/texture_cube.hpp

10 #i‚de‡
GLI_CORE_TEXTURE_CUBE_INCLUDED


11 
	#GLI_CORE_TEXTURE_CUBE_INCLUDED


	)

13 
	~"ãxtuª2d.hµ
"

15 
«me•a˚
 
	ggli


17 
	eÁ˚


19 
	gPOSITIVE_X
,

20 
	gNEGATIVE_X
,

21 
	gPOSITIVE_Y
,

22 
	gNEGATIVE_Y
,

23 
	gPOSITIVE_Z
,

24 
	gNEGATIVE_Z
,

25 
	gFACE_MAX


28 ˛as†
	cãxtuªCube


30 
	gpublic
:

31 
ãxtuª2D
::
	tdimísi⁄s_ty≥
 dimensions_type;

32 
	gãxtuª2D
::
	tãxco‹d_ty≥
Åexcoord_type;

33 
	gãxtuª2D
::
	tsize_ty≥
 size_type;

34 
	gãxtuª2D
::
	tvÆue_ty≥
 value_type;

35 
	gãxtuª2D
::
	tf‹m©_ty≥
 format_type;

36 
	gãxtuª2D
::
	td©a_ty≥
 data_type;

37 
	gãxtuª2D
::
	tÀvñ_ty≥
Üevel_type;

38 
Á˚
 
	tÁ˚_ty≥
;

40 
	gpublic
:

41 
ãxtuªCube
();

43 
ex∂icô
 
ãxtuªCube
(
Àvñ_ty≥
 c⁄° & 
Levñs
);

45 ~
ãxtuªCube
();

47 
	gãxtuª2D
 & 
	g›î©‹
[] (

48 
Á˚_ty≥
 c⁄° & 
	gFa˚
);

49 
ãxtuª2D
 c⁄° & 
	g›î©‹
[] (

50 
Á˚_ty≥
 c⁄° & 
	gFa˚
) const;

52 
boﬁ
 
em±y
() const;

53 
f‹m©_ty≥
 
f‹m©
() const;

54 
Àvñ_ty≥
 
Àvñs
() const;

55 
ªsize
(
Àvñ_ty≥
 c⁄° & 
Levñs
);

57 
	g¥iv©e
:

58 
°d
::
ve˘‹
<
ãxtuª2D
> 
Fa˚s
;

63 
	~"ãxtuª_cube.öl
"

	@glm/test/external/gli/core/texture_cube_array.hpp

10 #i‚de‡
GLI_CORE_TEXTURE_CUBE_ARRAY_INCLUDED


11 
	#GLI_CORE_TEXTURE_CUBE_ARRAY_INCLUDED


	)

13 
	~"ãxtuª_cube.hµ
"

15 
«me•a˚
 
	ggli


17 ˛as†
	cãxtuªCubeAºay


19 
	gpublic
:

20 
ãxtuªCube
::
	tdimísi⁄s_ty≥
 dimensions_type;

21 
	gãxtuªCube
::
	tãxco‹d_ty≥
Åexcoord_type;

22 
	gãxtuªCube
::
	tsize_ty≥
 size_type;

23 
	gãxtuªCube
::
	tvÆue_ty≥
 value_type;

24 
	gãxtuªCube
::
	tf‹m©_ty≥
 format_type;

25 
	g°d
::
	tve˘‹
<
	tãxtuªCube
> 
	td©a_ty≥
;

26 
	gãxtuªCube
::
	tÀvñ_ty≥
Üevel_type;

27 
	gd©a_ty≥
::
	tsize_ty≥
 
	tœyî_ty≥
;

29 
	gpublic
:

30 
ãxtuªCubeAºay
();

32 
ex∂icô
 
ãxtuªCubeAºay
(

33 
œyî_ty≥
 c⁄° & 
Layîs
,

34 
Àvñ_ty≥
 c⁄° & 
Levñs
);

36 ~
ãxtuªCubeAºay
();

38 
	gãxtuªCube
 & 
	g›î©‹
[] (

39 
œyî_ty≥
 c⁄° & 
	gLayî
);

40 
ãxtuªCube
 c⁄° & 
	g›î©‹
[] (

41 
œyî_ty≥
 c⁄° & 
	gLayî
) const;

43 
boﬁ
 
em±y
() const;

44 
f‹m©_ty≥
 
f‹m©
() const;

45 
œyî_ty≥
 
œyîs
() const;

46 
Àvñ_ty≥
 
Àvñs
() const;

47 
ªsize
(

48 
œyî_ty≥
 c⁄° & 
Layîs
,

49 
Àvñ_ty≥
 c⁄° & 
Levñs
);

51 
	g¥iv©e
:

52 
d©a_ty≥
 
Aºays
;

57 
	~"ãxtuª_cube_¨øy.öl
"

	@glm/test/external/gli/gli.hpp

14 #i‚de‡
GLI_GLI_INCLUDED


15 
	#GLI_GLI_INCLUDED


	)

17 
	#GLI_VERSION
 31

	)

18 
	#GLI_VERSION_MAJOR
 0

	)

19 
	#GLI_VERSION_MINOR
 3

	)

20 
	#GLI_VERSION_PATCH
 1

	)

21 
	#GLI_VERSION_REVISION
 0

	)

23 
	~"c‹e/ãxtuª2d.hµ
"

24 
	~"c‹e/ãxtuª2d_¨øy.hµ
"

25 
	~"c‹e/ãxtuª_cube.hµ
"

26 
	~"c‹e/ãxtuª_cube_¨øy.hµ
"

27 
	~"c‹e/size.hµ
"

28 
	~"c‹e/›î©i⁄.hµ
"

29 
	~"c‹e/gíî©e_mùm≠s.hµ
"

	@glm/test/external/gli/gtx/compression.hpp

10 #i‚de‡
GLI_GTX_COMPRESSION_INCLUDED


11 
	#GLI_GTX_COMPRESSION_INCLUDED


	)

13 
«me•a˚
 
	ggli
{

14 
«me•a˚
 
	ggtx
{

15 
«me•a˚
 
	gcom¥essi⁄


23 
«me•a˚
 
	ggli
{
usög
Çame•a˚ 
	ggtx
::
com¥essi⁄
;}

25 
	~"com¥essi⁄.öl
"

	@glm/test/external/gli/gtx/fetch.hpp

10 #i‚de‡
GLI_GTX_FETCH_INCLUDED


11 
	#GLI_GTX_FETCH_INCLUDED


	)

13 
	~"../gli.hµ
"

15 
«me•a˚
 
	ggli
{

16 
«me•a˚
 
	ggtx
{

17 
«me•a˚
 
	g„tch


19 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

20 
gíTy≥
 
ãxñFëch
(

21 
ãxtuª2D
 c⁄° & 
Textuª
,

22 
ãxtuª2D
::
dimísi⁄s_ty≥
 c⁄° & 
Texco‹d
,

23 
ãxtuª2D
::
Àvñ_ty≥
 c⁄° & 
Levñ
);

25 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

26 
gíTy≥
 
ãxtuªLod
(

27 
ãxtuª2D
 c⁄° & 
Textuª
,

28 
ãxtuª2D
::
ãxco‹d_ty≥
 c⁄° & 
Texco‹d
,

29 
ãxtuª2D
::
Àvñ_ty≥
 c⁄° & 
Levñ
);

31 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

32 
ãxñWrôe
(

33 
ãxtuª2D
 & 
Textuª
,

34 
ãxtuª2D
::
dimísi⁄s_ty≥
 c⁄° & 
Texco‹d
,

35 
ãxtuª2D
::
Àvñ_ty≥
 c⁄° & 
Levñ
,

36 
gíTy≥
 c⁄° & 
Cﬁ‹
);

42 
«me•a˚
 
	ggli
{
usög
Çame•a˚ 
	ggtx
::
„tch
;}

44 
	~"„tch.öl
"

	@glm/test/external/gli/gtx/gl_texture2d.hpp

10 #i‚de‡
GLI_GTX_GL_TEXTURE2D_INCLUDED


11 
	#GLI_GTX_GL_TEXTURE2D_INCLUDED


	)

13 
	~"../gli.hµ
"

14 
	~"../gtx/lﬂdî.hµ
"

16 #i‚de‡
GL_VERSION_1_1


20 
«me•a˚
 
	ggli
{

21 
«me•a˚
 
	ggtx
{

22 
«me•a˚
 
	ggl_ãxtuª2d


24 
GLuöt
 
¸óãTextuª2D
(
°d
::
°rög
 c⁄° & 
Fûíame
);

29 
«me•a˚
 
	ggli
{
usög
Çame•a˚ 
	ggtx
::
gl_ãxtuª2d
;}

31 
	~"gl_ãxtuª2d.öl
"

	@glm/test/external/gli/gtx/gradient.hpp

10 #i‚de‡
GLI_GTX_GRADIENT_INCLUDED


11 
	#GLI_GTX_GRADIENT_INCLUDED


	)

13 
	~"../gli.hµ
"

15 
«me•a˚
 
	ggli
{

16 
«me•a˚
 
	ggtx
{

17 
«me•a˚
 
	ggødõ¡


19 
ãxtuª2D
 
ødül
(

20 
ãxtuª2D
::
dimísi⁄s_ty≥
 c⁄° & 
Size
,

21 
ãxtuª2D
::
ãxco‹d_ty≥
 c⁄° & 
Cíãr
,

22 c⁄° & 
Radius
,

23 
ãxtuª2D
::
ãxco‹d_ty≥
 c⁄° & 
Foˇl
);

25 
ãxtuª2D
 
löór
(

26 
ãxtuª2D
::
dimísi⁄s_ty≥
 c⁄° & 
Size
,

27 
ãxtuª2D
::
ãxco‹d_ty≥
 c⁄° & 
Poöt0
,

28 
ãxtuª2D
::
ãxco‹d_ty≥
 c⁄° & 
Poöt1
);

34 
«me•a˚
 
	ggli
{
usög
Çame•a˚ 
	ggtx
::
gødõ¡
;}

36 
	~"gødõ¡.öl
"

	@glm/test/external/gli/gtx/loader.hpp

10 #i‚de‡
GLI_GTX_LOADER_INCLUDED


11 
	#GLI_GTX_LOADER_INCLUDED


	)

13 
	~"../gli.hµ
"

14 
	~"../gtx/lﬂdî_dds9.hµ
"

15 
	~"../gtx/lﬂdî_dds10.hµ
"

16 
	~"../gtx/lﬂdî_tga.hµ
"

18 
«me•a˚
 
	ggli
{

19 
«me•a˚
 
	ggtx
{

20 
«me•a˚
 
	glﬂdî


22 
ölöe
 
ãxtuª2D
 
lﬂd
(

23 
°d
::
°rög
 c⁄° & 
Fûíame
);

25 
ölöe
 
ßve
(

26 
ãxtuª2D
 c⁄° & 
Image
,

27 
°d
::
°rög
 c⁄° & 
Fûíame
);

33 
«me•a˚
 
	ggli
{
usög
Çame•a˚ 
	ggtx
::
lﬂdî
;}

35 
	~"lﬂdî.öl
"

	@glm/test/external/gli/gtx/loader_dds10.hpp

10 #i‚de‡
GLI_GTX_LOADER_DDS10_INCLUDED


11 
	#GLI_GTX_LOADER_DDS10_INCLUDED


	)

13 
	~"../gli.hµ
"

14 
	~<f°ªam
>

16 
«me•a˚
 
	ggli
{

17 
«me•a˚
 
	ggtx
{

18 
«me•a˚
 
	glﬂdî_dds10


20 
ãxtuª2D
 
lﬂdDDS10
(

21 
°d
::
°rög
 c⁄° & 
Fûíame
);

23 
ßveDDS10
(

24 
ãxtuª2D
 c⁄° & 
Image
,

25 
°d
::
°rög
 c⁄° & 
Fûíame
);

31 
«me•a˚
 
	ggli
{
usög
Çame•a˚ 
	ggtx
::
lﬂdî_dds10
;}

33 
	~"lﬂdî_dds10.öl
"

	@glm/test/external/gli/gtx/loader_dds9.hpp

10 #i‚de‡
GLI_GTX_LOADER_DDS9_INCLUDED


11 
	#GLI_GTX_LOADER_DDS9_INCLUDED


	)

13 
	~"../gli.hµ
"

14 
	~<f°ªam
>

16 
«me•a˚
 
	ggli
{

17 
«me•a˚
 
	ggtx
{

18 
«me•a˚
 
	glﬂdî_dds9


20 
ãxtuª2D
 
lﬂdDDS9
(

21 
°d
::
°rög
 c⁄° & 
Fûíame
);

23 
ßveDDS9
(

24 
ãxtuª2D
 c⁄° & 
Textuª
,

25 
°d
::
°rög
 c⁄° & 
Fûíame
);

27 
ßveTextuªCubeDDS9
(

28 
ãxtuªCube
 c⁄° & 
Textuª
,

29 
°d
::
°rög
 c⁄° & 
Fûíame
);

35 
«me•a˚
 
	ggli
{
usög
Çame•a˚ 
	ggtx
::
lﬂdî_dds9
;}

37 
	~"lﬂdî_dds9.öl
"

	@glm/test/external/gli/gtx/loader_tga.hpp

10 #i‚de‡
GLI_GTX_LOADER_TGA_INCLUDED


11 
	#GLI_GTX_LOADER_TGA_INCLUDED


	)

13 
	~"../gli.hµ
"

14 
	~<°rög
>

15 
	~<f°ªam
>

17 
«me•a˚
 
	ggli
{

18 
«me•a˚
 
	ggtx
{

19 
«me•a˚
 
	glﬂdî_tga


21 
ãxtuª2D
 
lﬂdTGA
(

22 
°d
::
°rög
 c⁄° & 
Fûíame
);

24 
ßveTGA
(

25 
ãxtuª2D
 c⁄° & 
Image
,

26 
°d
::
°rög
 c⁄° & 
Fûíame
);

32 
«me•a˚
 
	ggli
{
usög
Çame•a˚ 
	ggtx
::
lﬂdî_tga
;}

34 
	~"lﬂdî_tga.öl
"

	@glm/test/external/gli/gtx/wavelet.hpp

10 #i‚de‡
GLI_GTX_WAVELET_INCLUDED


11 
	#GLI_GTX_WAVELET_INCLUDED


	)

13 
«me•a˚
 
	ggli
{

14 
«me•a˚
 
	ggtx
{

15 
«me•a˚
 
	gwavñë


23 
«me•a˚
 
	ggli
{
usög
Çame•a˚ 
	ggtx
::
wavñë
;}

25 
	~"wavñë.öl
"

	@glm/test/gtc/gtc_bitfield.cpp

1 
	~<glm/gtc/bôfõld.hµ
>

2 
	~<glm/gtc/ty≥_¥ecisi⁄.hµ
>

3 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

4 
	~<glm/öãgî.hµ
>

5 
	~<˘ime
>

6 
	~<c°dio
>

7 
	~<ve˘‹
>

9 
«me•a˚
 
	gmask


11 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

12 
	sty≥


14 
gíTy≥
 
	gVÆue
;

15 
gíTy≥
 
	gRëu∫
;

18 
ölöe
 
mask_zîo
(
Bôs
)

20  ~((~0Ë<< 
	gBôs
);

23 
ölöe
 
mask_mix
(
Bôs
)

25  
	gBôs
 >(Ë* 8 ? 0xfffffff‡: (
°©ic_ˇ°
<>(1Ë<< 
Bôs
) - static_cast<>(1);

28 
ölöe
 
mask_hÆf
(
Bôs
)

32 c⁄° 
	gHÆf
 = 
Bôs
 >> 1;

33 c⁄° 
	gFûl
 = ~0;

34 c⁄° 
	gShi·Ha·
 = (
Fûl
 << 
HÆf
);

35 c⁄° 
	gRe°
 = 
Bôs
 - 
HÆf
;

36 c⁄° 
	gRevî£d
 = 
Shi·Ha·
 << 
Re°
;

38  ~
	gRevî£d
;

41 
ölöe
 
mask_lo›
(
Bôs
)

43 
	gMask
 = 0;

44 
	gBô
 = 0; Bô < 
	gBôs
; ++Bit)

45 
	gMask
 |(
°©ic_ˇ°
<>(1Ë<< 
Bô
);

46  
	gMask
;

49 
≥rf
()

51 c⁄° 
	gCou¡
 = 100000000;

53 
	g°d
::
˛ock_t
 
Time°amp1
 = 
°d
::
˛ock
();

56 
	g°d
::
ve˘‹
<> 
Mask
;

57 
	gMask
.
ªsize
(
Cou¡
);

58 
	gi
 = 0; i < 
	gCou¡
; ++i)

59 
	gMask
[
i
] = 
mask_mix
(i % 32);

62 
	g°d
::
˛ock_t
 
Time°amp2
 = 
°d
::
˛ock
();

65 
	g°d
::
ve˘‹
<> 
Mask
;

66 
	gMask
.
ªsize
(
Cou¡
);

67 
	gi
 = 0; i < 
	gCou¡
; ++i)

68 
	gMask
[
i
] = 
mask_lo›
(i % 32);

71 
	g°d
::
˛ock_t
 
Time°amp3
 = 
°d
::
˛ock
();

74 
	g°d
::
ve˘‹
<> 
Mask
;

75 
	gMask
.
ªsize
(
Cou¡
);

76 
	gi
 = 0; i < 
	gCou¡
; ++i)

77 
	gMask
[
i
] = 
glm
::
mask
(i % 32);

80 
	g°d
::
˛ock_t
 
Time°amp4
 = 
°d
::
˛ock
();

83 
	g°d
::
ve˘‹
<> 
Mask
;

84 
	gMask
.
ªsize
(
Cou¡
);

85 
	gi
 = 0; i < 
	gCou¡
; ++i)

86 
	gMask
[
i
] = 
mask_zîo
(i % 32);

89 
	g°d
::
˛ock_t
 
Time°amp5
 = 
°d
::
˛ock
();

92 
	g°d
::
ve˘‹
<> 
Mask
;

93 
	gMask
.
ªsize
(
Cou¡
);

94 
	gi
 = 0; i < 
	gCou¡
; ++i)

95 
	gMask
[
i
] = 
mask_hÆf
(i % 32);

98 
	g°d
::
˛ock_t
 
Time°amp6
 = 
°d
::
˛ock
();

100 
	g°d
::
˛ock_t
 
TimeMix
 = 
Time°amp2
 - 
Time°amp1
;

101 
	g°d
::
˛ock_t
 
TimeLo›
 = 
Time°amp3
 - 
Time°amp2
;

102 
	g°d
::
˛ock_t
 
TimeDeÁu…
 = 
Time°amp4
 - 
Time°amp3
;

103 
	g°d
::
˛ock_t
 
TimeZîo
 = 
Time°amp5
 - 
Time°amp4
;

104 
	g°d
::
˛ock_t
 
TimeHÆf
 = 
Time°amp6
 - 
Time°amp5
;

106 
¥ötf
("mask[mix]: %d\n", 
°©ic_ˇ°
<>(
TimeMix
));

107 
¥ötf
("mask[lo›]: %d\n", 
°©ic_ˇ°
<>(
TimeLo›
));

108 
¥ötf
("mask[deÁu…]: %d\n", 
°©ic_ˇ°
<>(
TimeDeÁu…
));

109 
¥ötf
("mask[zîo]: %d\n", 
°©ic_ˇ°
<>(
TimeZîo
));

110 
¥ötf
("mask[hÆf]: %d\n", 
°©ic_ˇ°
<>(
TimeHÆf
));

112  
	gTimeDeÁu…
 < 
	gTimeLo›
 ? 0 : 1;

115 
ã°_uöt
()

117 
	gty≥
<
	gglm
::
uöt
> c⁄° 
D©a
[] =

127 
Eº‹
(0);

135 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<>); ++i)

137 
	gResu…
 = 
mask_mix
(
D©a
[
i
].
VÆue
);

138 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

141 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<>); ++i)

143 
	gResu…
 = 
mask_hÆf
(
D©a
[
i
].
VÆue
);

144 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

147 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<>); ++i)

149 
	gResu…
 = 
mask_lo›
(
D©a
[
i
].
VÆue
);

150 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

153 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < (
	gD©a
Ë/ (
	gty≥
<>); ++i)

155 
	gResu…
 = 
glm
::
mask
(
D©a
[
i
].
VÆue
);

156 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

159  
	gEº‹
;

162 
ã°_uvec4
()

164 
	gty≥
<
	gglm
::
ivec4
> c⁄° 
D©a
[] =

166 {
glm
::
ivec4
( 0), glm::ivec4(0x00000000)},

167 {
glm
::
ivec4
( 1), glm::ivec4(0x00000001)},

168 {
glm
::
ivec4
( 2), glm::ivec4(0x00000003)},

169 {
glm
::
ivec4
( 3), glm::ivec4(0x00000007)},

170 {
glm
::
ivec4
(31), glm::ivec4(0x7fffffff)},

171 {
glm
::
ivec4
(32), glm::ivec4(0xffffffff)}

174 
Eº‹
(0);

176 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<
glm
::
ivec4
>); 
	gi
 <Ç; ++i)

178 
	gglm
::
ivec4
 
Resu…
 = 
glm
::
mask
(
D©a
[
i
].
VÆue
);

179 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
D©a
[
i
].
Rëu∫
, 
Resu…
)) ? 0 : 1;

182  
	gEº‹
;

185 
ã°
()

187 
Eº‹
(0);

189 
	gEº‹
 +
ã°_uöt
();

190 
	gEº‹
 +
ã°_uvec4
();

192  
	gEº‹
;

196 
«me•a˚
 
	gbôfõldI¡îÀave3


198 
	gãm∂©e
 <
ty≥«me
 
	gPARAM
,Åy≥«mê
	gRET
>

199 
ölöe
 
RET
 
ªfBôfõldI¡îÀave
(
PARAM
 
x
, PARAM 
y
, PARAM 
z
)

201 
RET
 
	gResu…
 = 0;

202 
RET
 
	gi
 = 0; i < (
	gPARAM
) * 8; ++i)

204 
	gResu…
 |((
RET
(
x
Ë& (RET(1UË<< 
i
)) << ((i << 1) + 0));

205 
	gResu…
 |((
RET
(
y
Ë& (RET(1UË<< 
i
)) << ((i << 1) + 1));

206 
	gResu…
 |((
RET
(
z
Ë& (RET(1UË<< 
i
)) << ((i << 1) + 2));

208  
	gResu…
;

211 
ã°
()

213 
Eº‹
(0);

215 
	gglm
::
uöt16
 
x_max
 = 1 << 11;

216 
	gglm
::
uöt16
 
y_max
 = 1 << 11;

217 
	gglm
::
uöt16
 
z_max
 = 1 << 11;

219 
	gglm
::
uöt16
 
z
 = 0; 
	gz
 < 
	gz_max
; z += 27)

220 
glm
::
uöt16
 
y
 = 0; 
	gy
 < 
	gy_max
; y += 27)

221 
glm
::
uöt16
 
x
 = 0; 
	gx
 < 
	gx_max
; x += 27)

223 
glm
::
uöt64
 
Resu…A
 = 
ªfBôfõldI¡îÀave
<glm::
uöt16
, 
	gglm
::uöt64>(
x
, 
	gy
, 
	gz
);

224 
	gglm
::
uöt64
 
Resu…B
 = 
glm
::
bôfõldI¡îÀave
(
x
, 
y
, 
z
);

225 
	gEº‹
 +
Resu…A
 =
Resu…B
 ? 0 : 1;

228  
	gEº‹
;

232 
«me•a˚
 
	gbôfõldI¡îÀave4


234 
	gãm∂©e
 <
ty≥«me
 
	gPARAM
,Åy≥«mê
	gRET
>

235 
ölöe
 
RET
 
lo›BôfõldI¡îÀave
(
PARAM
 
x
, PARAM 
y
, PARAM 
z
, PARAM 
w
)

237 
RET
 c⁄° 
	gv
[4] = {
x
, 
y
, 
z
, 
w
};

238 
RET
 
	gResu…
 = 0;

239 
RET
 
	gi
 = 0; i < (
	gPARAM
) * 8; i++)

241 
	gResu…
 |((((
v
[0] >> 
i
) & 1U)) << ((i << 2) + 0));

242 
	gResu…
 |((((
v
[1] >> 
i
) & 1U)) << ((i << 2) + 1));

243 
	gResu…
 |((((
v
[2] >> 
i
) & 1U)) << ((i << 2) + 2));

244 
	gResu…
 |((((
v
[3] >> 
i
) & 1U)) << ((i << 2) + 3));

246  
	gResu…
;

249 
ã°
()

251 
Eº‹
(0);

253 
	gglm
::
uöt16
 
x_max
 = 1 << 11;

254 
	gglm
::
uöt16
 
y_max
 = 1 << 11;

255 
	gglm
::
uöt16
 
z_max
 = 1 << 11;

256 
	gglm
::
uöt16
 
w_max
 = 1 << 11;

258 
	gglm
::
uöt16
 
w
 = 0; 
	gw
 < 
	gw_max
; w += 27)

259 
glm
::
uöt16
 
z
 = 0; 
	gz
 < 
	gz_max
; z += 27)

260 
glm
::
uöt16
 
y
 = 0; 
	gy
 < 
	gy_max
; y += 27)

261 
glm
::
uöt16
 
x
 = 0; 
	gx
 < 
	gx_max
; x += 27)

263 
glm
::
uöt64
 
Resu…A
 = 
lo›BôfõldI¡îÀave
<glm::
uöt16
, 
	gglm
::uöt64>(
x
, 
	gy
, 
	gz
, 
	gw
);

264 
	gglm
::
uöt64
 
Resu…B
 = 
glm
::
bôfõldI¡îÀave
(
x
, 
y
, 
z
, 
w
);

265 
	gEº‹
 +
Resu…A
 =
Resu…B
 ? 0 : 1;

268  
	gEº‹
;

272 
«me•a˚
 
	gbôfõldI¡îÀave


274 
ölöe
 
	gglm
::
uöt64
 
Á°BôfõldI¡îÀave
(
glm
::
uöt32
 
x
, glm::uöt32 
y
)

276 
glm
::
uöt64
 
REG1
;

277 
	gglm
::
uöt64
 
REG2
;

279 
	gREG1
 = 
x
;

280 
	gREG1
 = ((
REG1
 << 16Ë| REG1Ë& 
glm
::
uöt64
(0x0000FFFF0000FFFF);

281 
	gREG1
 = ((
REG1
 << 8Ë| REG1Ë& 
glm
::
uöt64
(0x00FF00FF00FF00FF);

282 
	gREG1
 = ((
REG1
 << 4Ë| REG1Ë& 
glm
::
uöt64
(0x0F0F0F0F0F0F0F0F);

283 
	gREG1
 = ((
REG1
 << 2Ë| REG1Ë& 
glm
::
uöt64
(0x3333333333333333);

284 
	gREG1
 = ((
REG1
 << 1Ë| REG1Ë& 
glm
::
uöt64
(0x5555555555555555);

286 
	gREG2
 = 
y
;

287 
	gREG2
 = ((
REG2
 << 16Ë| REG2Ë& 
glm
::
uöt64
(0x0000FFFF0000FFFF);

288 
	gREG2
 = ((
REG2
 << 8Ë| REG2Ë& 
glm
::
uöt64
(0x00FF00FF00FF00FF);

289 
	gREG2
 = ((
REG2
 << 4Ë| REG2Ë& 
glm
::
uöt64
(0x0F0F0F0F0F0F0F0F);

290 
	gREG2
 = ((
REG2
 << 2Ë| REG2Ë& 
glm
::
uöt64
(0x3333333333333333);

291 
	gREG2
 = ((
REG2
 << 1Ë| REG2Ë& 
glm
::
uöt64
(0x5555555555555555);

293  
	gREG1
 | (
	gREG2
 << 1);

296 
ölöe
 
	gglm
::
uöt64
 
öãæóveBôfõldI¡îÀave
(
glm
::
uöt32
 
x
, glm::uöt32 
y
)

298 
glm
::
uöt64
 
REG1
;

299 
	gglm
::
uöt64
 
REG2
;

301 
	gREG1
 = 
x
;

302 
	gREG2
 = 
y
;

304 
	gREG1
 = ((
REG1
 << 16Ë| REG1Ë& 
glm
::
uöt64
(0x0000FFFF0000FFFF);

305 
	gREG2
 = ((
REG2
 << 16Ë| REG2Ë& 
glm
::
uöt64
(0x0000FFFF0000FFFF);

307 
	gREG1
 = ((
REG1
 << 8Ë| REG1Ë& 
glm
::
uöt64
(0x00FF00FF00FF00FF);

308 
	gREG2
 = ((
REG2
 << 8Ë| REG2Ë& 
glm
::
uöt64
(0x00FF00FF00FF00FF);

310 
	gREG1
 = ((
REG1
 << 4Ë| REG1Ë& 
glm
::
uöt64
(0x0F0F0F0F0F0F0F0F);

311 
	gREG2
 = ((
REG2
 << 4Ë| REG2Ë& 
glm
::
uöt64
(0x0F0F0F0F0F0F0F0F);

313 
	gREG1
 = ((
REG1
 << 2Ë| REG1Ë& 
glm
::
uöt64
(0x3333333333333333);

314 
	gREG2
 = ((
REG2
 << 2Ë| REG2Ë& 
glm
::
uöt64
(0x3333333333333333);

316 
	gREG1
 = ((
REG1
 << 1Ë| REG1Ë& 
glm
::
uöt64
(0x5555555555555555);

317 
	gREG2
 = ((
REG2
 << 1Ë| REG2Ë& 
glm
::
uöt64
(0x5555555555555555);

319  
	gREG1
 | (
	gREG2
 << 1);

344 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


345 
ölöe
 
	gglm
::
uöt64
 
s£BôfõldI¡îÀave
(
glm
::
uöt32
 
x
, glm::uöt32 
y
)

347 
GLM_ALIGN
(16Ë
glm
::
uöt32
 c⁄° 
Aºay
[4] = {
x
, 0, 
y
, 0};

349 
__m128i
 c⁄° 
	gMask4
 = 
_mm_£t1_ïi32
(0x0000FFFF);

350 
__m128i
 c⁄° 
	gMask3
 = 
_mm_£t1_ïi32
(0x00FF00FF);

351 
__m128i
 c⁄° 
	gMask2
 = 
_mm_£t1_ïi32
(0x0F0F0F0F);

352 
__m128i
 c⁄° 
	gMask1
 = 
_mm_£t1_ïi32
(0x33333333);

353 
__m128i
 c⁄° 
	gMask0
 = 
_mm_£t1_ïi32
(0x55555555);

355 
__m128i
 
	gReg1
;

356 
__m128i
 
	gReg2
;

360 
	gReg1
 = 
_mm_lﬂd_si128
((
__m128i
*)
Aºay
);

364 
	gReg2
 = 
_mm_¶li_si128
(
Reg1
, 2);

365 
	gReg1
 = 
_mm_‹_si128
(
Reg2
, 
Reg1
);

366 
	gReg1
 = 
_mm_™d_si128
(
Reg1
, 
Mask4
);

370 
	gReg2
 = 
_mm_¶li_si128
(
Reg1
, 1);

371 
	gReg1
 = 
_mm_‹_si128
(
Reg2
, 
Reg1
);

372 
	gReg1
 = 
_mm_™d_si128
(
Reg1
, 
Mask3
);

376 
	gReg2
 = 
_mm_¶li_ïi32
(
Reg1
, 4);

377 
	gReg1
 = 
_mm_‹_si128
(
Reg2
, 
Reg1
);

378 
	gReg1
 = 
_mm_™d_si128
(
Reg1
, 
Mask2
);

382 
	gReg2
 = 
_mm_¶li_ïi32
(
Reg1
, 2);

383 
	gReg1
 = 
_mm_‹_si128
(
Reg2
, 
Reg1
);

384 
	gReg1
 = 
_mm_™d_si128
(
Reg1
, 
Mask1
);

388 
	gReg2
 = 
_mm_¶li_ïi32
(
Reg1
, 1);

389 
	gReg1
 = 
_mm_‹_si128
(
Reg2
, 
Reg1
);

390 
	gReg1
 = 
_mm_™d_si128
(
Reg1
, 
Mask0
);

393 
	gReg2
 = 
_mm_¶li_ïi32
(
Reg1
, 1);

394 
	gReg2
 = 
_mm_§li_si128
(
Reg2
, 8);

395 
	gReg1
 = 
_mm_‹_si128
(
Reg1
, 
Reg2
);

397 
GLM_ALIGN
(16Ë
	gglm
::
uöt64
 
Resu…
[2];

398 
_mm_°‹e_si128
((
__m128i
*)
Resu…
, 
Reg1
);

400  
	gResu…
[0];

403 
ölöe
 
	gglm
::
uöt64
 
s£U«lig√dBôfõldI¡îÀave
(
glm
::
uöt32
 
x
, glm::uöt32 
y
)

405 
glm
::
uöt32
 c⁄° 
Aºay
[4] = {
x
, 0, 
y
, 0};

407 
__m128i
 c⁄° 
	gMask4
 = 
_mm_£t1_ïi32
(0x0000FFFF);

408 
__m128i
 c⁄° 
	gMask3
 = 
_mm_£t1_ïi32
(0x00FF00FF);

409 
__m128i
 c⁄° 
	gMask2
 = 
_mm_£t1_ïi32
(0x0F0F0F0F);

410 
__m128i
 c⁄° 
	gMask1
 = 
_mm_£t1_ïi32
(0x33333333);

411 
__m128i
 c⁄° 
	gMask0
 = 
_mm_£t1_ïi32
(0x55555555);

413 
__m128i
 
	gReg1
;

414 
__m128i
 
	gReg2
;

418 
	gReg1
 = 
_mm_lﬂdu_si128
((
__m128i
*)
Aºay
);

422 
	gReg2
 = 
_mm_¶li_si128
(
Reg1
, 2);

423 
	gReg1
 = 
_mm_‹_si128
(
Reg2
, 
Reg1
);

424 
	gReg1
 = 
_mm_™d_si128
(
Reg1
, 
Mask4
);

428 
	gReg2
 = 
_mm_¶li_si128
(
Reg1
, 1);

429 
	gReg1
 = 
_mm_‹_si128
(
Reg2
, 
Reg1
);

430 
	gReg1
 = 
_mm_™d_si128
(
Reg1
, 
Mask3
);

434 
	gReg2
 = 
_mm_¶li_ïi32
(
Reg1
, 4);

435 
	gReg1
 = 
_mm_‹_si128
(
Reg2
, 
Reg1
);

436 
	gReg1
 = 
_mm_™d_si128
(
Reg1
, 
Mask2
);

440 
	gReg2
 = 
_mm_¶li_ïi32
(
Reg1
, 2);

441 
	gReg1
 = 
_mm_‹_si128
(
Reg2
, 
Reg1
);

442 
	gReg1
 = 
_mm_™d_si128
(
Reg1
, 
Mask1
);

446 
	gReg2
 = 
_mm_¶li_ïi32
(
Reg1
, 1);

447 
	gReg1
 = 
_mm_‹_si128
(
Reg2
, 
Reg1
);

448 
	gReg1
 = 
_mm_™d_si128
(
Reg1
, 
Mask0
);

451 
	gReg2
 = 
_mm_¶li_ïi32
(
Reg1
, 1);

452 
	gReg2
 = 
_mm_§li_si128
(
Reg2
, 8);

453 
	gReg1
 = 
_mm_‹_si128
(
Reg1
, 
Reg2
);

455 
	gglm
::
uöt64
 
Resu…
[2];

456 
_mm_°‹eu_si128
((
__m128i
*)
Resu…
, 
Reg1
);

458  
	gResu…
[0];

462 
ã°
()

465 
	gglm
::
uöt32
 
y
 = 0; 
	gy
 < (1 << 10); ++y)

466 
	gglm
::
uöt32
 
x
 = 0; 
	gx
 < (1 << 10); ++x)

468 
	gglm
::
uöt64
 
A
 = 
glm
::
bôfõldI¡îÀave
(
x
, 
y
);

469 
	gglm
::
uöt64
 
B
 = 
Á°BôfõldI¡îÀave
(
x
, 
y
);

471 
	gglm
::
uöt64
 
D
 = 
öãæóveBôfõldI¡îÀave
(
x
, 
y
);

473 
as£π
(
A
 =
B
);

475 
as£π
(
A
 =
D
);

477 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


478 
	gglm
::
uöt64
 
E
 = 
s£BôfõldI¡îÀave
(
x
, 
y
);

479 
	gglm
::
uöt64
 
F
 = 
s£U«lig√dBôfõldI¡îÀave
(
x
, 
y
);

480 
as£π
(
A
 =
E
);

481 
as£π
(
A
 =
F
);

483 
__m128i
 
	gG
 = 
glm_i128_öãæóve
(
_mm_£t_ïi32
(0, 
y
, 0, 
x
));

484 
	gglm
::
uöt64
 
Resu…
[2];

485 
_mm_°‹eu_si128
((
__m128i
*)
Resu…
, 
G
);

486 
as£π
(
A
 =
Resu…
[0]);

492 
	gglm
::
uöt8
 
y
 = 0; 
	gy
 < 127; ++y)

493 
	gglm
::
uöt8
 
x
 = 0; 
	gx
 < 127; ++x)

495 
	gglm
::
uöt64
 
A
(
glm
::
bôfõldI¡îÀave
(glm::
uöt8
(
x
), glm::uöt8(
y
)));

496 
	gglm
::
uöt64
 
B
(
glm
::
bôfõldI¡îÀave
(glm::
uöt16
(
x
), glm::uöt16(
y
)));

497 
	gglm
::
uöt64
 
C
(
glm
::
bôfõldI¡îÀave
(glm::
uöt32
(
x
), glm::uöt32(
y
)));

499 
	gglm
::
öt64
 
D
(
glm
::
bôfõldI¡îÀave
(glm::
öt8
(
x
), glm::öt8(
y
)));

500 
	gglm
::
öt64
 
E
(
glm
::
bôfõldI¡îÀave
(glm::
öt16
(
x
), glm::öt16(
y
)));

501 
	gglm
::
öt64
 
F
(
glm
::
bôfõldI¡îÀave
(glm::
öt32
(
x
), glm::öt32(
y
)));

503 
as£π
(
D
 =
E
);

504 
as£π
(
D
 =
F
);

511 
≥rf
()

513 
	gglm
::
uöt32
 
x_max
 = 1 << 11;

514 
	gglm
::
uöt32
 
y_max
 = 1 << 10;

517 
	g°d
::
ve˘‹
<
glm
::
uöt64
> 
D©a
(
x_max
 * 
y_max
);

518 
	g°d
::
ve˘‹
<
glm
::
u32vec2
> 
P¨am
(
x_max
 * 
y_max
);

519 
	gglm
::
uöt32
 
i
 = 0; 
	gi
 < 
	gP¨am
.
size
(); ++i)

520 
	gP¨am
[
i
] = 
glm
::
u32vec2
(ò% 
x_max
, i / 
y_max
);

523 
	g°d
::
˛ock_t
 
La°Time
 = 
°d
::
˛ock
();

525 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gD©a
.
size
(); ++i)

526 
	gD©a
[
i
] = 
glm
::
bôfõldI¡îÀave
(
P¨am
[i].
x
, P¨am[i].
y
);

528 
	g°d
::
˛ock_t
 
Time
 = 
°d
::
˛ock
(Ë- 
La°Time
;

530 
	g°d
::
¥ötf
("glm::bôfõldI¡îÀavêTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time
));

534 
	g°d
::
˛ock_t
 
La°Time
 = 
°d
::
˛ock
();

536 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gD©a
.
size
(); ++i)

537 
	gD©a
[
i
] = 
Á°BôfõldI¡îÀave
(
P¨am
[i].
x
, P¨am[i].
y
);

539 
	g°d
::
˛ock_t
 
Time
 = 
°d
::
˛ock
(Ë- 
La°Time
;

541 
	g°d
::
¥ötf
("Á°BôfõldI¡îÀavêTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time
));

556 
	g°d
::
˛ock_t
 
La°Time
 = 
°d
::
˛ock
();

558 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gD©a
.
size
(); ++i)

559 
	gD©a
[
i
] = 
öãæóveBôfõldI¡îÀave
(
P¨am
[i].
x
, P¨am[i].
y
);

561 
	g°d
::
˛ock_t
 
Time
 = 
°d
::
˛ock
(Ë- 
La°Time
;

563 
	g°d
::
¥ötf
("öãæóveBôfõldI¡îÀavêTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time
));

566 #i‡
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT


568 
	g°d
::
˛ock_t
 
La°Time
 = 
°d
::
˛ock
();

570 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gD©a
.
size
(); ++i)

571 
	gD©a
[
i
] = 
s£BôfõldI¡îÀave
(
P¨am
[i].
x
, P¨am[i].
y
);

573 
	g°d
::
˛ock_t
 
Time
 = 
°d
::
˛ock
(Ë- 
La°Time
;

575 
	g°d
::
¥ötf
("s£BôfõldI¡îÀavêTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time
));

579 
	g°d
::
˛ock_t
 
La°Time
 = 
°d
::
˛ock
();

581 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gD©a
.
size
(); ++i)

582 
	gD©a
[
i
] = 
s£U«lig√dBôfõldI¡îÀave
(
P¨am
[i].
x
, P¨am[i].
y
);

584 
	g°d
::
˛ock_t
 
Time
 = 
°d
::
˛ock
(Ë- 
La°Time
;

586 
	g°d
::
¥ötf
("s£U«lig√dBôfõldI¡îÀavêTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time
));

591 
	g°d
::
˛ock_t
 
La°Time
 = 
°d
::
˛ock
();

593 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gD©a
.
size
(); ++i)

594 
	gD©a
[
i
] = 
glm
::
bôfõldI¡îÀave
(
P¨am
[i].
x
, P¨am[i].
y
, Param[i].x);

596 
	g°d
::
˛ock_t
 
Time
 = 
°d
::
˛ock
(Ë- 
La°Time
;

598 
	g°d
::
¥ötf
("glm::dëaû::bôfõldI¡îÀavêTimê%d clocks\n", 
°©ic_ˇ°
<>(
Time
));

601 #if(
GLM_ARCH
 & 
GLM_ARCH_SSE2_BIT
 && !(
GLM_COMPILER
 & 
GLM_COMPILER_GCC
))

604 
	g°d
::
ve˘‹
<
__m128i
> 
SimdD©a
;

605 
	gSimdD©a
.
ªsize
(
x_max
 * 
y_max
);

606 
	g°d
::
ve˘‹
<
__m128i
> 
SimdP¨am
;

607 
	gSimdP¨am
.
ªsize
(
x_max
 * 
y_max
);

608 
	gi
 = 0; i < 
	gSimdP¨am
.
size
(); ++i)

609 
	gSimdP¨am
[
i
] = 
_mm_£t_ïi32
(ò% 
x_max
, 0, i / 
y_max
, 0);

611 
	g°d
::
˛ock_t
 
La°Time
 = 
°d
::
˛ock
();

613 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gSimdD©a
.
size
(); ++i)

614 
	gSimdD©a
[
i
] = 
glm_i128_öãæóve
(
SimdP¨am
[i]);

616 
	g°d
::
˛ock_t
 
Time
 = 
°d
::
˛ock
(Ë- 
La°Time
;

618 
	g°d
::
¥ötf
("_mm_bô_öãæóve_si128 Timê%d clocks\n", 
°©ic_ˇ°
<>(
Time
));

626 
	$maö
()

628 
	`Eº‹
(0);

630 
Eº‹
 +::
mask
::
	`ã°
();

631 
Eº‹
 +::
bôfõldI¡îÀave3
::
	`ã°
();

632 
Eº‹
 +::
bôfõldI¡îÀave4
::
	`ã°
();

633 
Eº‹
 +::
bôfõldI¡îÀave
::
	`ã°
();

636 #ifde‡
NDEBUG


637 
Eº‹
 +::
mask
::
	`≥rf
();

638 
Eº‹
 +::
bôfõldI¡îÀave
::
	`≥rf
();

641  
Eº‹
;

642 
	}
}

	@glm/test/gtc/gtc_color_space.cpp

1 
	~<glm/gtc/cﬁ‹_•a˚.hµ
>

2 
	~<glm/gtc/ïsû⁄.hµ
>

3 
	~<glm/gtc/c⁄°™ts.hµ
>

5 
«me•a˚
 
	g§gb


7 
ã°
()

9 
Eº‹
(0);

11 
	gglm
::
vec3
 c⁄° 
Cﬁ‹Sour˚RGB
(1.0, 0.5, 0.0);

14 
	gglm
::
vec3
 c⁄° 
Cﬁ‹SRGB
 = 
glm
::
c⁄vîtLöórToSRGB
(
Cﬁ‹Sour˚RGB
);

15 
	gglm
::
vec3
 c⁄° 
Cﬁ‹RGB
 = 
glm
::
c⁄vîtSRGBToLöór
(
Cﬁ‹SRGB
);

16 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Cﬁ‹Sour˚RGB
, 
Cﬁ‹RGB
, 0.00001f)) ? 0 : 1;

20 
	gglm
::
vec3
 c⁄° 
Cﬁ‹SRGB
 = 
glm
::
c⁄vîtLöórToSRGB
(
Cﬁ‹Sour˚RGB
, 2.8f);

21 
	gglm
::
vec3
 c⁄° 
Cﬁ‹RGB
 = 
glm
::
c⁄vîtSRGBToLöór
(
Cﬁ‹SRGB
, 2.8f);

22 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Cﬁ‹Sour˚RGB
, 
Cﬁ‹RGB
, 0.00001f)) ? 0 : 1;

25 
	gglm
::
vec4
 c⁄° 
Cﬁ‹Sour˚RGBA
(1.0, 0.5, 0.0, 1.0);

28 
	gglm
::
vec4
 c⁄° 
Cﬁ‹SRGB
 = 
glm
::
c⁄vîtLöórToSRGB
(
Cﬁ‹Sour˚RGBA
);

29 
	gglm
::
vec4
 c⁄° 
Cﬁ‹RGB
 = 
glm
::
c⁄vîtSRGBToLöór
(
Cﬁ‹SRGB
);

30 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Cﬁ‹Sour˚RGBA
, 
Cﬁ‹RGB
, 0.00001f)) ? 0 : 1;

34 
	gglm
::
vec4
 c⁄° 
Cﬁ‹SRGB
 = 
glm
::
c⁄vîtLöórToSRGB
(
Cﬁ‹Sour˚RGBA
, 2.8f);

35 
	gglm
::
vec4
 c⁄° 
Cﬁ‹RGB
 = 
glm
::
c⁄vîtSRGBToLöór
(
Cﬁ‹SRGB
, 2.8f);

36 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Cﬁ‹Sour˚RGBA
, 
Cﬁ‹RGB
, 0.00001f)) ? 0 : 1;

39  
	gEº‹
;

43 
	$maö
()

45 
	`Eº‹
(0);

47 
Eº‹
 +
§gb
::
	`ã°
();

49  
Eº‹
;

50 
	}
}

	@glm/test/gtc/gtc_constants.cpp

1 
	~<glm/gtc/c⁄°™ts.hµ
>

3 
	$ã°_ïsû⁄
()

5 
	`Eº‹
(0);

8 
Te°
 = 
glm
::
ïsû⁄
<>();

12 
Te°
 = 
glm
::
ïsû⁄
<>();

15  
Eº‹
;

16 
	}
}

18 
	$maö
()

20 
	`Eº‹
(0);

25 
Eº‹
 +
	`ã°_ïsû⁄
();

27  
Eº‹
;

28 
	}
}

	@glm/test/gtc/gtc_epsilon.cpp

1 
	~<glm/gtc/ïsû⁄.hµ
>

2 
	~<glm/gtc/c⁄°™ts.hµ
>

3 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

5 
	$ã°_deföed
()

7 
glm
::
	`ïsû⁄EquÆ
(glm::
	`vec2
(), glm::vec2(), glm::vec2());

8 
glm
::
	`ïsû⁄EquÆ
(glm::
	`vec3
(), glm::vec3(), glm::vec3());

9 
glm
::
	`ïsû⁄EquÆ
(glm::
	`vec4
(), glm::vec4(), glm::vec4());

11 
glm
::
	`ïsû⁄NŸEquÆ
(glm::
	`vec2
(), glm::vec2(), glm::vec2());

12 
glm
::
	`ïsû⁄NŸEquÆ
(glm::
	`vec3
(), glm::vec3(), glm::vec3());

13 
glm
::
	`ïsû⁄NŸEquÆ
(glm::
	`vec4
(), glm::vec4(), glm::vec4());

15 
glm
::
	`ïsû⁄EquÆ
(glm::
	`vec2
(), glm::vec2(), 0.0f);

16 
glm
::
	`ïsû⁄EquÆ
(glm::
	`vec3
(), glm::vec3(), 0.0f);

17 
glm
::
	`ïsû⁄EquÆ
(glm::
	`vec4
(), glm::vec4(), 0.0f);

18 
glm
::
	`ïsû⁄EquÆ
(glm::
	`qu©
(), glm::quat(), 0.0f);

20 
glm
::
	`ïsû⁄NŸEquÆ
(glm::
	`vec2
(), glm::vec2(), 0.0f);

21 
glm
::
	`ïsû⁄NŸEquÆ
(glm::
	`vec3
(), glm::vec3(), 0.0f);

22 
glm
::
	`ïsû⁄NŸEquÆ
(glm::
	`vec4
(), glm::vec4(), 0.0f);

23 
glm
::
	`ïsû⁄NŸEquÆ
(glm::
	`qu©
(), glm::quat(), 0.0f);

26 
	}
}

28 
	gãm∂©e
 <
ty≥«me
 
	gT
>

29 
	$ã°_equÆ
()

31 
	`Eº‹
(0);

34 
T
 
A
 = 
glm
::
ïsû⁄
<T>();

35 
T
 
B
 = 
glm
::
ïsû⁄
<T>();

36 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
A
, 
B
, glm::
ïsû⁄
<
T
>(Ë* 
	`T
(2)) ? 0 : 1;

40 
T
 
	`A
(0);

41 
T
 
B
 = 
°©ic_ˇ°
<T>(0Ë+ 
glm
::
ïsû⁄
<T>();

42 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
A
, 
B
, glm::
ïsû⁄
<
T
>(Ë* 
	`T
(2)) ? 0 : 1;

46 
T
 
	`A
(0);

47 
T
 
B
 = 
°©ic_ˇ°
<T>(0Ë- 
glm
::
ïsû⁄
<T>();

48 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
A
, 
B
, glm::
ïsû⁄
<
T
>(Ë* 
	`T
(2)) ? 0 : 1;

52 
T
 
A
 = 
°©ic_ˇ°
<T>(0Ë+ 
glm
::
ïsû⁄
<T>();

53 
T
 
B
 = 
°©ic_ˇ°
<T>(0);

54 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
A
, 
B
, glm::
ïsû⁄
<
T
>(Ë* 
	`T
(2)) ? 0 : 1;

58 
T
 
A
 = 
°©ic_ˇ°
<T>(0Ë- 
glm
::
ïsû⁄
<T>();

59 
T
 
B
 = 
°©ic_ˇ°
<T>(0);

60 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
A
, 
B
, glm::
ïsû⁄
<
T
>(Ë* 
	`T
(2)) ? 0 : 1;

63  
Eº‹
;

64 
	}
}

66 
	$maö
()

68 
	`Eº‹
(0);

70 
Eº‹
 +
	`ã°_deföed
();

71 
Eº‹
 +
ã°_equÆ
<>();

72 
Eº‹
 +
ã°_equÆ
<>();

74  
Eº‹
;

75 
	}
}

	@glm/test/gtc/gtc_functions.cpp

1 
	~<glm/gtc/fun˘i⁄s.hµ
>

2 
	~<ve˘‹
>

4 
	$ã°_gauss_1d
()

6 
Eº‹
 = 0;

8 
°d
::
ve˘‹
<> 
	`Resu…
(20);

9 
°d
::
size_t
 
i
 = 0, 
n
 = 
Resu…
.
	`size
(); i <Ç; ++i)

10 
Resu…
[
i
] = 
glm
::
	`gauss
(
°©ic_ˇ°
<>(i) * 0.1f, 0.0f, 1.0f);

12  
Eº‹
;

13 
	}
}

15 
	$ã°_gauss_2d
()

17 
Eº‹
 = 0;

19 
°d
::
ve˘‹
<> 
	`Resu…
(20);

20 
°d
::
size_t
 
i
 = 0, 
n
 = 
Resu…
.
	`size
(); i <Ç; ++i)

21 
Resu…
[
i
] = 
glm
::
	`gauss
(glm::
	`vec2
(i) * 0.1f, glm::vec2(0.0f), glm::vec2(1.0f));

23  
Eº‹
;

24 
	}
}

26 
	$maö
()

28 
Eº‹
 = 0;

30 
Eº‹
 +
	`ã°_gauss_1d
();

31 
Eº‹
 +
	`ã°_gauss_2d
();

33  
Eº‹
;

34 
	}
}

	@glm/test/gtc/gtc_integer.cpp

1 
	#GLM_FORCE_INLINE


	)

2 
	~<glm/gtc/ïsû⁄.hµ
>

3 
	~<glm/gtc/öãgî.hµ
>

4 
	~<glm/gtc/ty≥_¥ecisi⁄.hµ
>

5 
	~<glm/gtc/vec1.hµ
>

6 
	~<glm/gtx/ty≥_Æig√d.hµ
>

7 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

8 
	~<glm/vec2.hµ
>

9 
	~<glm/vec3.hµ
>

10 
	~<glm/vec4.hµ
>

11 
	~<˘ime
>

12 
	~<c°dio
>

13 
	~<ve˘‹
>

14 
	~<cm©h
>

16 
«me•a˚
 
	glog2_


18 
ã°
()

20 
	gEº‹
 = 0;

22 
	gA0
 = 
°©ic_ˇ°
<>(
glm
::
log2
(16.f));

23 
	gglm
::
ivec1
 
B0
(
glm
::
log2
(glm::
vec1
(16.f)));

24 
	gglm
::
ivec2
 
C0
(
glm
::
log2
(glm::
vec2
(16.f)));

25 
	gglm
::
ivec3
 
D0
(
glm
::
log2
(glm::
vec3
(16.f)));

26 
	gglm
::
ivec4
 
E0
(
glm
::
log2
(glm::
vec4
(16.f)));

28 
	gA1
 = 
glm
::
log2
((16));

29 
	gglm
::
ivec1
 
B1
 = 
glm
::
log2
(glm::ivec1(16));

30 
	gglm
::
ivec2
 
C1
 = 
glm
::
log2
(glm::ivec2(16));

31 
	gglm
::
ivec3
 
D1
 = 
glm
::
log2
(glm::ivec3(16));

32 
	gglm
::
ivec4
 
E1
 = 
glm
::
log2
(glm::ivec4(16));

34 
	gEº‹
 +
A0
 =
A1
 ? 0 : 1;

35 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B0
, 
B1
)) ? 0 : 1;

36 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
C0
, 
C1
)) ? 0 : 1;

37 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
D0
, 
D1
)) ? 0 : 1;

38 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
E0
, 
E1
)) ? 0 : 1;

40 
	gglm
::
uöt64
 
A2
 = 
glm
::
log2
(glm::uint64(16));

41 
	gglm
::
u64vec1
 
B2
 = 
glm
::
log2
(glm::u64vec1(16));

42 
	gglm
::
u64vec2
 
C2
 = 
glm
::
log2
(glm::u64vec2(16));

43 
	gglm
::
u64vec3
 
D2
 = 
glm
::
log2
(glm::u64vec3(16));

44 
	gglm
::
u64vec4
 
E2
 = 
glm
::
log2
(glm::u64vec4(16));

46 
	gEº‹
 +
A2
 =
glm
::
uöt64
(4) ? 0 : 1;

47 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
B2
, glm::
u64vec1
(4))) ? 0 : 1;

48 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
C2
, glm::
u64vec2
(4))) ? 0 : 1;

49 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
D2
, glm::
u64vec3
(4))) ? 0 : 1;

50 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
E2
, glm::
u64vec4
(4))) ? 0 : 1;

52  
	gEº‹
;

55 
≥rf
(
°d
::
size_t
 
Cou¡
)

57 
Eº‹
 = 0;

60 
	g°d
::
ve˘‹
<> 
Resu…
;

61 
	gResu…
.
ªsize
(
Cou¡
);

63 
	g°d
::
˛ock_t
 
Begö
 = 
˛ock
();

65 
	gi
 = 0; i < 
	g°©ic_ˇ°
<>(
	gCou¡
); ++i)

66 
	gResu…
[
i
] = 
glm
::
log2
(
°©ic_ˇ°
<>(i));

68 
	g°d
::
˛ock_t
 
End
 = 
˛ock
();

70 
¥ötf
("glm::log2<öt>: %ld clocks\n", 
End
 - 
Begö
);

74 
	g°d
::
ve˘‹
<
glm
::
ivec4
> 
Resu…
;

75 
	gResu…
.
ªsize
(
Cou¡
);

77 
	g°d
::
˛ock_t
 
Begö
 = 
˛ock
();

79 
	gi
 = 0; i < 
	g°©ic_ˇ°
<>(
	gCou¡
); ++i)

80 
	gResu…
[
i
] = 
glm
::
log2
(glm::
ivec4
(i));

82 
	g°d
::
˛ock_t
 
End
 = 
˛ock
();

84 
¥ötf
("glm::log2<ivec4>: %ld clocks\n", 
End
 - 
Begö
);

87 #i‡
GLM_HAS_BITSCAN_WINDOWS


89 
	g°d
::
ve˘‹
<
glm
::
ivec4
> 
Resu…
;

90 
	gResu…
.
ªsize
(
Cou¡
);

92 
	g°d
::
˛ock_t
 
Begö
 = 
˛ock
();

94 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

96 
	gglm
::
tvec4
<, glm::
deÁu…p
> 
Tmp
(
glm
::
unöôülize
);

97 
_BôSˇnRevî£
(&
Tmp
.
x
, 
i
);

98 
_BôSˇnRevî£
(&
Tmp
.
y
, 
i
);

99 
_BôSˇnRevî£
(&
Tmp
.
z
, 
i
);

100 
_BôSˇnRevî£
(&
Tmp
.
w
, 
i
);

101 
	gResu…
[
i
] = 
glm
::
ivec4
(
Tmp
);

104 
	g°d
::
˛ock_t
 
End
 = 
˛ock
();

106 
¥ötf
("glm::log2<ivec4> i∆öed: %ld clocks\n", 
End
 - 
Begö
);

111 
	g°d
::
ve˘‹
<
glm
::
tvec4
<, 
	gglm
::
deÁu…p
> > 
Resu…
;

112 
	gResu…
.
ªsize
(
Cou¡
);

114 
	g°d
::
˛ock_t
 
Begö
 = 
˛ock
();

116 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

118 
_BôSˇnRevî£
(&
Resu…
[
i
].
x
, i);

119 
_BôSˇnRevî£
(&
Resu…
[
i
].
y
, i);

120 
_BôSˇnRevî£
(&
Resu…
[
i
].
z
, i);

121 
_BôSˇnRevî£
(&
Resu…
[
i
].
w
, i);

124 
	g°d
::
˛ock_t
 
End
 = 
˛ock
();

126 
¥ötf
("glm::log2<ivec4> i∆öedÇÿˇ°: %ld clocks\n", 
End
 - 
Begö
);

131 
	g°d
::
ve˘‹
<
glm
::
ivec4
> 
Resu…
;

132 
	gResu…
.
ªsize
(
Cou¡
);

134 
	g°d
::
˛ock_t
 
Begö
 = 
˛ock
();

136 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

138 
_BôSˇnRevî£
(
ªöãΩªt_ˇ°
<*>(&
Resu…
[
i
].
x
), i);

139 
_BôSˇnRevî£
(
ªöãΩªt_ˇ°
<*>(&
Resu…
[
i
].
y
), i);

140 
_BôSˇnRevî£
(
ªöãΩªt_ˇ°
<*>(&
Resu…
[
i
].
z
), i);

141 
_BôSˇnRevî£
(
ªöãΩªt_ˇ°
<*>(&
Resu…
[
i
].
w
), i);

144 
	g°d
::
˛ock_t
 
End
 = 
˛ock
();

146 
¥ötf
("glm::log2<ivec4>ÑeöãΩªt: %ld clocks\n", 
End
 - 
Begö
);

151 
	g°d
::
ve˘‹
<> 
Resu…
;

152 
	gResu…
.
ªsize
(
Cou¡
);

154 
	g°d
::
˛ock_t
 
Begö
 = 
˛ock
();

156 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gCou¡
; ++i)

157 
	gResu…
[
i
] = 
glm
::
log2
(
°©ic_ˇ°
<>(i));

159 
	g°d
::
˛ock_t
 
End
 = 
˛ock
();

161 
¥ötf
("glm::log2<Êﬂt>: %ld clocks\n", 
End
 - 
Begö
);

165 
	g°d
::
ve˘‹
<
glm
::
vec4
> 
Resu…
;

166 
	gResu…
.
ªsize
(
Cou¡
);

168 
	g°d
::
˛ock_t
 
Begö
 = 
˛ock
();

170 
	gi
 = 0; i < 
	g°©ic_ˇ°
<>(
	gCou¡
); ++i)

171 
	gResu…
[
i
] = 
glm
::
log2
(glm::
vec4
(i));

173 
	g°d
::
˛ock_t
 
End
 = 
˛ock
();

175 
¥ötf
("glm::log2<vec4>: %ld clocks\n", 
End
 - 
Begö
);

178  
	gEº‹
;

182 
«me•a˚
 
	gúound


184 
ã°
()

186 
	gEº‹
 = 0;

188 
	gf
 = 0.0f; f < 3.1f; f += 0.05f)

190 
RoundFa°
 = 
glm
::
úound
(
f
);

191 
	gRoundSTD
 = 
glm
::
round
(
f
);

192 
	gEº‹
 +
RoundFa°
 =
RoundSTD
 ? 0 : 1;

193 
as£π
(!
Eº‹
);

196  
	gEº‹
;

200 
«me•a˚
 
	guround


202 
ã°
()

204 
	gEº‹
 = 0;

206 
	gf
 = 0.0f; f < 3.1f; f += 0.05f)

208 
RoundFa°
 = 
glm
::
uround
(
f
);

209 
	gRoundSTD
 = 
glm
::
round
(
f
);

210 
	gEº‹
 +
RoundFa°
 =
RoundSTD
 ? 0 : 1;

211 
as£π
(!
Eº‹
);

214  
	gEº‹
;

218 
	$maö
()

220 
	`Eº‹
(0);

222 
Eº‹
 +::
log2_
::
	`ã°
();

223 
Eº‹
 +::
úound
::
	`ã°
();

224 
Eº‹
 +::
uround
::
	`ã°
();

226 #ifde‡
NDEBUG


227 
°d
::
size_t
 c⁄° 
	`Sam∂es
(1000);

228 
Eº‹
 +::
log2_
::
	`≥rf
(
Sam∂es
);

231  
Eº‹
;

232 
	}
}

	@glm/test/gtc/gtc_matrix_access.cpp

1 
	~<glm/gtc/m©rix_ac˚ss.hµ
>

2 
	~<glm/m©2x2.hµ
>

3 
	~<glm/m©2x3.hµ
>

4 
	~<glm/m©2x4.hµ
>

5 
	~<glm/m©3x2.hµ
>

6 
	~<glm/m©3x3.hµ
>

7 
	~<glm/m©3x4.hµ
>

8 
	~<glm/m©4x2.hµ
>

9 
	~<glm/m©4x3.hµ
>

10 
	~<glm/m©4x4.hµ
>

12 
	$ã°_m©2x2_row_£t
()

14 
Eº‹
 = 0;

16 
glm
::
m©2x2
 
	`m
(1);

18 
m
 = 
glm
::
	`row
(m, 0, glm::
	`vec2
( 0, 1));

19 
m
 = 
glm
::
	`row
(m, 1, glm::
	`vec2
( 4, 5));

21 
Eº‹
 +
glm
::
	`row
(
m
, 0Ë=glm::
	`vec2
( 0, 1) ? 0 : 1;

22 
Eº‹
 +
glm
::
	`row
(
m
, 1Ë=glm::
	`vec2
( 4, 5) ? 0 : 1;

24  
Eº‹
;

25 
	}
}

27 
	$ã°_m©2x2_cﬁ_£t
()

29 
Eº‹
 = 0;

31 
glm
::
m©2x2
 
	`m
(1);

33 
m
 = 
glm
::
	`cﬁumn
(m, 0, glm::
	`vec2
( 0, 1));

34 
m
 = 
glm
::
	`cﬁumn
(m, 1, glm::
	`vec2
( 4, 5));

36 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 0Ë=glm::
	`vec2
( 0, 1) ? 0 : 1;

37 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 1Ë=glm::
	`vec2
( 4, 5) ? 0 : 1;

39  
Eº‹
;

40 
	}
}

42 
	$ã°_m©2x3_row_£t
()

44 
Eº‹
 = 0;

46 
glm
::
m©2x3
 
	`m
(1);

48 
m
 = 
glm
::
	`row
(m, 0, glm::
	`vec2
( 0, 1));

49 
m
 = 
glm
::
	`row
(m, 1, glm::
	`vec2
( 4, 5));

50 
m
 = 
glm
::
	`row
(m, 2, glm::
	`vec2
( 8, 9));

52 
Eº‹
 +
glm
::
	`row
(
m
, 0Ë=glm::
	`vec2
( 0, 1) ? 0 : 1;

53 
Eº‹
 +
glm
::
	`row
(
m
, 1Ë=glm::
	`vec2
( 4, 5) ? 0 : 1;

54 
Eº‹
 +
glm
::
	`row
(
m
, 2Ë=glm::
	`vec2
( 8, 9) ? 0 : 1;

56  
Eº‹
;

57 
	}
}

59 
	$ã°_m©2x3_cﬁ_£t
()

61 
Eº‹
 = 0;

63 
glm
::
m©2x3
 
	`m
(1);

65 
m
 = 
glm
::
	`cﬁumn
(m, 0, glm::
	`vec3
( 0, 1, 2));

66 
m
 = 
glm
::
	`cﬁumn
(m, 1, glm::
	`vec3
( 4, 5, 6));

68 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 0Ë=glm::
	`vec3
( 0, 1, 2) ? 0 : 1;

69 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 1Ë=glm::
	`vec3
( 4, 5, 6) ? 0 : 1;

71  
Eº‹
;

72 
	}
}

74 
	$ã°_m©2x4_row_£t
()

76 
Eº‹
 = 0;

78 
glm
::
m©2x4
 
	`m
(1);

80 
m
 = 
glm
::
	`row
(m, 0, glm::
	`vec2
( 0, 1));

81 
m
 = 
glm
::
	`row
(m, 1, glm::
	`vec2
( 4, 5));

82 
m
 = 
glm
::
	`row
(m, 2, glm::
	`vec2
( 8, 9));

83 
m
 = 
glm
::
	`row
(m, 3, glm::
	`vec2
(12, 13));

85 
Eº‹
 +
glm
::
	`row
(
m
, 0Ë=glm::
	`vec2
( 0, 1) ? 0 : 1;

86 
Eº‹
 +
glm
::
	`row
(
m
, 1Ë=glm::
	`vec2
( 4, 5) ? 0 : 1;

87 
Eº‹
 +
glm
::
	`row
(
m
, 2Ë=glm::
	`vec2
( 8, 9) ? 0 : 1;

88 
Eº‹
 +
glm
::
	`row
(
m
, 3Ë=glm::
	`vec2
(12, 13) ? 0 : 1;

90  
Eº‹
;

91 
	}
}

93 
	$ã°_m©2x4_cﬁ_£t
()

95 
Eº‹
 = 0;

97 
glm
::
m©2x4
 
	`m
(1);

99 
m
 = 
glm
::
	`cﬁumn
(m, 0, glm::
	`vec4
( 0, 1, 2, 3));

100 
m
 = 
glm
::
	`cﬁumn
(m, 1, glm::
	`vec4
( 4, 5, 6, 7));

102 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 0Ë=glm::
	`vec4
( 0, 1, 2, 3) ? 0 : 1;

103 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 1Ë=glm::
	`vec4
( 4, 5, 6, 7) ? 0 : 1;

105  
Eº‹
;

106 
	}
}

108 
	$ã°_m©3x2_row_£t
()

110 
Eº‹
 = 0;

112 
glm
::
m©3x2
 
	`m
(1);

114 
m
 = 
glm
::
	`row
(m, 0, glm::
	`vec3
( 0, 1, 2));

115 
m
 = 
glm
::
	`row
(m, 1, glm::
	`vec3
( 4, 5, 6));

117 
Eº‹
 +
glm
::
	`row
(
m
, 0Ë=glm::
	`vec3
( 0, 1, 2) ? 0 : 1;

118 
Eº‹
 +
glm
::
	`row
(
m
, 1Ë=glm::
	`vec3
( 4, 5, 6) ? 0 : 1;

120  
Eº‹
;

121 
	}
}

123 
	$ã°_m©3x2_cﬁ_£t
()

125 
Eº‹
 = 0;

127 
glm
::
m©3x2
 
	`m
(1);

129 
m
 = 
glm
::
	`cﬁumn
(m, 0, glm::
	`vec2
( 0, 1));

130 
m
 = 
glm
::
	`cﬁumn
(m, 1, glm::
	`vec2
( 4, 5));

131 
m
 = 
glm
::
	`cﬁumn
(m, 2, glm::
	`vec2
( 8, 9));

133 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 0Ë=glm::
	`vec2
( 0, 1) ? 0 : 1;

134 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 1Ë=glm::
	`vec2
( 4, 5) ? 0 : 1;

135 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 2Ë=glm::
	`vec2
( 8, 9) ? 0 : 1;

137  
Eº‹
;

138 
	}
}

140 
	$ã°_m©3x3_row_£t
()

142 
Eº‹
 = 0;

144 
glm
::
m©3x3
 
	`m
(1);

146 
m
 = 
glm
::
	`row
(m, 0, glm::
	`vec3
( 0, 1, 2));

147 
m
 = 
glm
::
	`row
(m, 1, glm::
	`vec3
( 4, 5, 6));

148 
m
 = 
glm
::
	`row
(m, 2, glm::
	`vec3
( 8, 9, 10));

150 
Eº‹
 +
glm
::
	`row
(
m
, 0Ë=glm::
	`vec3
( 0, 1, 2) ? 0 : 1;

151 
Eº‹
 +
glm
::
	`row
(
m
, 1Ë=glm::
	`vec3
( 4, 5, 6) ? 0 : 1;

152 
Eº‹
 +
glm
::
	`row
(
m
, 2Ë=glm::
	`vec3
( 8, 9, 10) ? 0 : 1;

154  
Eº‹
;

155 
	}
}

157 
	$ã°_m©3x3_cﬁ_£t
()

159 
Eº‹
 = 0;

161 
glm
::
m©3x3
 
	`m
(1);

163 
m
 = 
glm
::
	`cﬁumn
(m, 0, glm::
	`vec3
( 0, 1, 2));

164 
m
 = 
glm
::
	`cﬁumn
(m, 1, glm::
	`vec3
( 4, 5, 6));

165 
m
 = 
glm
::
	`cﬁumn
(m, 2, glm::
	`vec3
( 8, 9, 10));

167 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 0Ë=glm::
	`vec3
( 0, 1, 2) ? 0 : 1;

168 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 1Ë=glm::
	`vec3
( 4, 5, 6) ? 0 : 1;

169 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 2Ë=glm::
	`vec3
( 8, 9, 10) ? 0 : 1;

171  
Eº‹
;

172 
	}
}

174 
	$ã°_m©3x4_row_£t
()

176 
Eº‹
 = 0;

178 
glm
::
m©3x4
 
	`m
(1);

180 
m
 = 
glm
::
	`row
(m, 0, glm::
	`vec3
( 0, 1, 2));

181 
m
 = 
glm
::
	`row
(m, 1, glm::
	`vec3
( 4, 5, 6));

182 
m
 = 
glm
::
	`row
(m, 2, glm::
	`vec3
( 8, 9, 10));

183 
m
 = 
glm
::
	`row
(m, 3, glm::
	`vec3
(12, 13, 14));

185 
Eº‹
 +
glm
::
	`row
(
m
, 0Ë=glm::
	`vec3
( 0, 1, 2) ? 0 : 1;

186 
Eº‹
 +
glm
::
	`row
(
m
, 1Ë=glm::
	`vec3
( 4, 5, 6) ? 0 : 1;

187 
Eº‹
 +
glm
::
	`row
(
m
, 2Ë=glm::
	`vec3
( 8, 9, 10) ? 0 : 1;

188 
Eº‹
 +
glm
::
	`row
(
m
, 3Ë=glm::
	`vec3
(12, 13, 14) ? 0 : 1;

190  
Eº‹
;

191 
	}
}

193 
	$ã°_m©3x4_cﬁ_£t
()

195 
Eº‹
 = 0;

197 
glm
::
m©3x4
 
	`m
(1);

199 
m
 = 
glm
::
	`cﬁumn
(m, 0, glm::
	`vec4
( 0, 1, 2, 3));

200 
m
 = 
glm
::
	`cﬁumn
(m, 1, glm::
	`vec4
( 4, 5, 6, 7));

201 
m
 = 
glm
::
	`cﬁumn
(m, 2, glm::
	`vec4
( 8, 9, 10, 11));

203 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 0Ë=glm::
	`vec4
( 0, 1, 2, 3) ? 0 : 1;

204 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 1Ë=glm::
	`vec4
( 4, 5, 6, 7) ? 0 : 1;

205 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 2Ë=glm::
	`vec4
( 8, 9, 10, 11) ? 0 : 1;

207  
Eº‹
;

208 
	}
}

210 
	$ã°_m©4x2_row_£t
()

212 
Eº‹
 = 0;

214 
glm
::
m©4x2
 
	`m
(1);

216 
m
 = 
glm
::
	`row
(m, 0, glm::
	`vec4
( 0, 1, 2, 3));

217 
m
 = 
glm
::
	`row
(m, 1, glm::
	`vec4
( 4, 5, 6, 7));

219 
Eº‹
 +
glm
::
	`row
(
m
, 0Ë=glm::
	`vec4
( 0, 1, 2, 3) ? 0 : 1;

220 
Eº‹
 +
glm
::
	`row
(
m
, 1Ë=glm::
	`vec4
( 4, 5, 6, 7) ? 0 : 1;

222  
Eº‹
;

223 
	}
}

225 
	$ã°_m©4x2_cﬁ_£t
()

227 
Eº‹
 = 0;

229 
glm
::
m©4x2
 
	`m
(1);

231 
m
 = 
glm
::
	`cﬁumn
(m, 0, glm::
	`vec2
( 0, 1));

232 
m
 = 
glm
::
	`cﬁumn
(m, 1, glm::
	`vec2
( 4, 5));

233 
m
 = 
glm
::
	`cﬁumn
(m, 2, glm::
	`vec2
( 8, 9));

234 
m
 = 
glm
::
	`cﬁumn
(m, 3, glm::
	`vec2
(12, 13));

236 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 0Ë=glm::
	`vec2
( 0, 1) ? 0 : 1;

237 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 1Ë=glm::
	`vec2
( 4, 5) ? 0 : 1;

238 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 2Ë=glm::
	`vec2
( 8, 9) ? 0 : 1;

239 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 3Ë=glm::
	`vec2
(12, 13) ? 0 : 1;

241  
Eº‹
;

242 
	}
}

244 
	$ã°_m©4x3_row_£t
()

246 
Eº‹
 = 0;

248 
glm
::
m©4x3
 
	`m
(1);

250 
m
 = 
glm
::
	`row
(m, 0, glm::
	`vec4
( 0, 1, 2, 3));

251 
m
 = 
glm
::
	`row
(m, 1, glm::
	`vec4
( 4, 5, 6, 7));

252 
m
 = 
glm
::
	`row
(m, 2, glm::
	`vec4
( 8, 9, 10, 11));

254 
Eº‹
 +
glm
::
	`row
(
m
, 0Ë=glm::
	`vec4
( 0, 1, 2, 3) ? 0 : 1;

255 
Eº‹
 +
glm
::
	`row
(
m
, 1Ë=glm::
	`vec4
( 4, 5, 6, 7) ? 0 : 1;

256 
Eº‹
 +
glm
::
	`row
(
m
, 2Ë=glm::
	`vec4
( 8, 9, 10, 11) ? 0 : 1;

258  
Eº‹
;

259 
	}
}

261 
	$ã°_m©4x3_cﬁ_£t
()

263 
Eº‹
 = 0;

265 
glm
::
m©4x3
 
	`m
(1);

267 
m
 = 
glm
::
	`cﬁumn
(m, 0, glm::
	`vec3
( 0, 1, 2));

268 
m
 = 
glm
::
	`cﬁumn
(m, 1, glm::
	`vec3
( 4, 5, 6));

269 
m
 = 
glm
::
	`cﬁumn
(m, 2, glm::
	`vec3
( 8, 9, 10));

270 
m
 = 
glm
::
	`cﬁumn
(m, 3, glm::
	`vec3
(12, 13, 14));

272 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 0Ë=glm::
	`vec3
( 0, 1, 2) ? 0 : 1;

273 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 1Ë=glm::
	`vec3
( 4, 5, 6) ? 0 : 1;

274 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 2Ë=glm::
	`vec3
( 8, 9, 10) ? 0 : 1;

275 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 3Ë=glm::
	`vec3
(12, 13, 14) ? 0 : 1;

277  
Eº‹
;

278 
	}
}

280 
	$ã°_m©4x4_row_£t
()

282 
Eº‹
 = 0;

284 
glm
::
m©4
 
	`m
(1);

286 
m
 = 
glm
::
	`row
(m, 0, glm::
	`vec4
( 0, 1, 2, 3));

287 
m
 = 
glm
::
	`row
(m, 1, glm::
	`vec4
( 4, 5, 6, 7));

288 
m
 = 
glm
::
	`row
(m, 2, glm::
	`vec4
( 8, 9, 10, 11));

289 
m
 = 
glm
::
	`row
(m, 3, glm::
	`vec4
(12, 13, 14, 15));

291 
Eº‹
 +
glm
::
	`row
(
m
, 0Ë=glm::
	`vec4
( 0, 1, 2, 3) ? 0 : 1;

292 
Eº‹
 +
glm
::
	`row
(
m
, 1Ë=glm::
	`vec4
( 4, 5, 6, 7) ? 0 : 1;

293 
Eº‹
 +
glm
::
	`row
(
m
, 2Ë=glm::
	`vec4
( 8, 9, 10, 11) ? 0 : 1;

294 
Eº‹
 +
glm
::
	`row
(
m
, 3Ë=glm::
	`vec4
(12, 13, 14, 15) ? 0 : 1;

296  
Eº‹
;

297 
	}
}

299 
	$ã°_m©4x4_cﬁ_£t
()

301 
Eº‹
 = 0;

303 
glm
::
m©4
 
	`m
(1);

305 
m
 = 
glm
::
	`cﬁumn
(m, 0, glm::
	`vec4
( 0, 1, 2, 3));

306 
m
 = 
glm
::
	`cﬁumn
(m, 1, glm::
	`vec4
( 4, 5, 6, 7));

307 
m
 = 
glm
::
	`cﬁumn
(m, 2, glm::
	`vec4
( 8, 9, 10, 11));

308 
m
 = 
glm
::
	`cﬁumn
(m, 3, glm::
	`vec4
(12, 13, 14, 15));

310 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 0Ë=glm::
	`vec4
( 0, 1, 2, 3) ? 0 : 1;

311 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 1Ë=glm::
	`vec4
( 4, 5, 6, 7) ? 0 : 1;

312 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 2Ë=glm::
	`vec4
( 8, 9, 10, 11) ? 0 : 1;

313 
Eº‹
 +
glm
::
	`cﬁumn
(
m
, 3Ë=glm::
	`vec4
(12, 13, 14, 15) ? 0 : 1;

315  
Eº‹
;

316 
	}
}

318 
	$ã°_m©4x4_row_gë
()

320 
Eº‹
 = 0;

322 
glm
::
m©4
 
	`m
(1);

324 
glm
::
vec4
 
A
 = glm::
	`row
(
m
, 0);

325 
Eº‹
 +
A
 =
glm
::
	`vec4
(1, 0, 0, 0) ? 0 : 1;

326 
glm
::
vec4
 
B
 = glm::
	`row
(
m
, 1);

327 
Eº‹
 +
B
 =
glm
::
	`vec4
(0, 1, 0, 0) ? 0 : 1;

328 
glm
::
vec4
 
C
 = glm::
	`row
(
m
, 2);

329 
Eº‹
 +
C
 =
glm
::
	`vec4
(0, 0, 1, 0) ? 0 : 1;

330 
glm
::
vec4
 
D
 = glm::
	`row
(
m
, 3);

331 
Eº‹
 +
D
 =
glm
::
	`vec4
(0, 0, 0, 1) ? 0 : 1;

333  
Eº‹
;

334 
	}
}

336 
	$ã°_m©4x4_cﬁ_gë
()

338 
Eº‹
 = 0;

340 
glm
::
m©4
 
	`m
(1);

342 
glm
::
vec4
 
A
 = glm::
	`cﬁumn
(
m
, 0);

343 
Eº‹
 +
A
 =
glm
::
	`vec4
(1, 0, 0, 0) ? 0 : 1;

344 
glm
::
vec4
 
B
 = glm::
	`cﬁumn
(
m
, 1);

345 
Eº‹
 +
B
 =
glm
::
	`vec4
(0, 1, 0, 0) ? 0 : 1;

346 
glm
::
vec4
 
C
 = glm::
	`cﬁumn
(
m
, 2);

347 
Eº‹
 +
C
 =
glm
::
	`vec4
(0, 0, 1, 0) ? 0 : 1;

348 
glm
::
vec4
 
D
 = glm::
	`cﬁumn
(
m
, 3);

349 
Eº‹
 +
D
 =
glm
::
	`vec4
(0, 0, 0, 1) ? 0 : 1;

351  
Eº‹
;

352 
	}
}

354 
	$maö
()

356 
Eº‹
 = 0;

358 
Eº‹
 +
	`ã°_m©2x2_row_£t
();

359 
Eº‹
 +
	`ã°_m©2x2_cﬁ_£t
();

360 
Eº‹
 +
	`ã°_m©2x3_row_£t
();

361 
Eº‹
 +
	`ã°_m©2x3_cﬁ_£t
();

362 
Eº‹
 +
	`ã°_m©2x4_row_£t
();

363 
Eº‹
 +
	`ã°_m©2x4_cﬁ_£t
();

364 
Eº‹
 +
	`ã°_m©3x2_row_£t
();

365 
Eº‹
 +
	`ã°_m©3x2_cﬁ_£t
();

366 
Eº‹
 +
	`ã°_m©3x3_row_£t
();

367 
Eº‹
 +
	`ã°_m©3x3_cﬁ_£t
();

368 
Eº‹
 +
	`ã°_m©3x4_row_£t
();

369 
Eº‹
 +
	`ã°_m©3x4_cﬁ_£t
();

370 
Eº‹
 +
	`ã°_m©4x2_row_£t
();

371 
Eº‹
 +
	`ã°_m©4x2_cﬁ_£t
();

372 
Eº‹
 +
	`ã°_m©4x3_row_£t
();

373 
Eº‹
 +
	`ã°_m©4x3_cﬁ_£t
();

374 
Eº‹
 +
	`ã°_m©4x4_row_£t
();

375 
Eº‹
 +
	`ã°_m©4x4_cﬁ_£t
();

377 
Eº‹
 +
	`ã°_m©4x4_row_gë
();

378 
Eº‹
 +
	`ã°_m©4x4_cﬁ_gë
();

380  
Eº‹
;

381 
	}
}

	@glm/test/gtc/gtc_matrix_integer.cpp

1 
	~<glm/gtc/m©rix_öãgî.hµ
>

3 
	$maö
()

5 
Eº‹
 = 0;

7  
Eº‹
;

8 
	}
}

	@glm/test/gtc/gtc_matrix_inverse.cpp

1 
	~<glm/gtc/m©rix_övî£.hµ
>

2 
	~<glm/gtc/ïsû⁄.hµ
>

4 
	$ã°_afföe
()

6 
Eº‹
 = 0;

9 
glm
::
m©3
 c⁄° 
	`M
(

13 
glm
::
m©3
 c⁄° 
A
 = glm::
	`afföeInvî£
(
M
);

14 
glm
::
m©3
 c⁄° 
I
 = glm::
	`övî£
(
M
);

15 
glm
::
m©3
 c⁄° 
R
 = glm::
	`afföeInvî£
(
A
);

17 
glm
::
Àngth_t
 
i
 = 0; i < 
A
.
	`Àngth
(); ++i)

19 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
M
[
i
], 
R
[i], 0.01f)) ? 0 : 1;

20 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
A
[
i
], 
I
[i], 0.01f)) ? 0 : 1;

25 
glm
::
m©4
 c⁄° 
	`M
(

30 
glm
::
m©4
 c⁄° 
A
 = glm::
	`afföeInvî£
(
M
);

31 
glm
::
m©4
 c⁄° 
I
 = glm::
	`övî£
(
M
);

32 
glm
::
m©4
 c⁄° 
R
 = glm::
	`afföeInvî£
(
A
);

34 
glm
::
Àngth_t
 
i
 = 0; i < 
A
.
	`Àngth
(); ++i)

36 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
M
[
i
], 
R
[i], 0.01f)) ? 0 : 1;

37 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
A
[
i
], 
I
[i], 0.01f)) ? 0 : 1;

41  
Eº‹
;

42 
	}
}

44 
	$maö
()

46 
Eº‹
 = 0;

48 
Eº‹
 +
	`ã°_afföe
();

50  
Eº‹
;

51 
	}
}

	@glm/test/gtc/gtc_matrix_transform.cpp

1 
	~<glm/gtc/m©rix_å™sf‹m.hµ
>

2 
	~<glm/gtc/c⁄°™ts.hµ
>

4 
	$ã°_≥r•e˘ive
()

6 
Eº‹
 = 0;

8 
glm
::
m©4
 
Proje˘i⁄
 = glm::
	`≥r•e˘ive
(glm::
pi
<>() * 0.25f, 4.0f / 3.0f, 0.1f, 100.0f);

10  
Eº‹
;

11 
	}
}

13 
	$ã°_pick
()

15 
Eº‹
 = 0;

17 
glm
::
m©4
 
Pick
 = glm::
	`pickM©rix
(glm::
	`vec2
(1, 2), glm::vec2(3, 4), glm::
	`ivec4
(0, 0, 320, 240));

19  
Eº‹
;

20 
	}
}

22 
	$ã°_twókedInföôePî•e˘ive
()

24 
Eº‹
 = 0;

26 
glm
::
m©4
 
Proje˘i⁄A
 = glm::
	`twókedInföôePî•e˘ive
(45.f, 640.f/480.f, 1.0f);

27 
glm
::
m©4
 
Proje˘i⁄B
 = glm::
	`twókedInföôePî•e˘ive
(45.f, 640.f/480.f, 1.0f, 0.001f);

30  
Eº‹
;

31 
	}
}

33 
	$ã°_å™¶©e
()

35 
Eº‹
 = 0;

37 
glm
::
lowp_vec3
 
	`v
(1.0);

38 
glm
::
lowp_m©4
 
	`m
(0);

39 
glm
::
lowp_m©4
 
t
 = glm::
	`å™¶©e
(
m
, 
v
);

41  
Eº‹
;

42 
	}
}

44 
	$maö
()

46 
Eº‹
 = 0;

48 
Eº‹
 +
	`ã°_å™¶©e
();

49 
Eº‹
 +
	`ã°_twókedInföôePî•e˘ive
();

50 
Eº‹
 +
	`ã°_pick
();

51 
Eº‹
 +
	`ã°_≥r•e˘ive
();

53  
Eº‹
;

54 
	}
}

	@glm/test/gtc/gtc_noise.cpp

1 
	~<glm/gtc/noi£.hµ
>

2 
	~<gli/gli.hµ
>

3 
	~<gli/gtx/lﬂdî.hµ
>

5 
	$ã°_sim∂ex
()

7 
°d
::
size_t
 c⁄° 
Size
 = 256;

10 
°d
::
ve˘‹
<
glm
::
byã
> 
	`ImageD©a
(
Size
 * Size * 3);

12 
°d
::
size_t
 
y
 = 0; y < 
Size
; ++y)

13 
°d
::
size_t
 
x
 = 0; x < 
Size
; ++x)

15 
ImageD©a
[(
x
 + 
y
 * 
Size
Ë* 3 + 0] = 
glm
::
	`byã
(glm::
	`sim∂ex
(glm::
	`vec2
(x / 64.f, y / 64.f)) * 128.f + 127.f);

16 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

17 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

20 
gli
::
ãxtuª2D
 
	`Textuª
(1);

21 
Textuª
[0] = 
gli
::
	`image2D
(
glm
::
	`uvec2
(
Size
), gli::
RGB8U
);

22 
	`mem˝y
(
Textuª
[0].
	`d©a
(), &
ImageD©a
[0], ImageD©a.
	`size
());

23 
gli
::
	`ßveDDS9
(
Textuª
, "texture_simplex2d_256.dds");

27 
°d
::
ve˘‹
<
glm
::
byã
> 
	`ImageD©a
(
Size
 * Size * 3);

29 
°d
::
size_t
 
y
 = 0; y < 
Size
; ++y)

30 
°d
::
size_t
 
x
 = 0; x < 
Size
; ++x)

32 
ImageD©a
[(
x
 + 
y
 * 
Size
Ë* 3 + 0] = 
glm
::
	`byã
(glm::
	`sim∂ex
(glm::
	`vec3
(x / 64.f, y / 64.f, 0.5f)) * 128.f + 127.f);

33 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

34 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

37 
gli
::
ãxtuª2D
 
	`Textuª
(1);

38 
Textuª
[0] = 
gli
::
	`image2D
(
glm
::
	`uvec2
(
Size
), gli::
RGB8U
);

39 
	`mem˝y
(
Textuª
[0].
	`d©a
(), &
ImageD©a
[0], ImageD©a.
	`size
());

40 
gli
::
	`ßveDDS9
(
Textuª
, "texture_simplex3d_256.dds");

44 
°d
::
ve˘‹
<
glm
::
byã
> 
	`ImageD©a
(
Size
 * Size * 3);

46 
°d
::
size_t
 
y
 = 0; y < 
Size
; ++y)

47 
°d
::
size_t
 
x
 = 0; x < 
Size
; ++x)

49 
ImageD©a
[(
x
 + 
y
 * 
Size
Ë* 3 + 0] = 
glm
::
	`byã
(glm::
	`sim∂ex
(glm::
	`vec4
(x / 64.f, y / 64.f, 0.5f, 0.5f)) * 128.f + 127.f);

50 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

51 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

54 
gli
::
ãxtuª2D
 
	`Textuª
(1);

55 
Textuª
[0] = 
gli
::
	`image2D
(
glm
::
	`uvec2
(
Size
), gli::
RGB8U
);

56 
	`mem˝y
(
Textuª
[0].
	`d©a
(), &
ImageD©a
[0], ImageD©a.
	`size
());

57 
gli
::
	`ßveDDS9
(
Textuª
, "texture_simplex4d_256.dds");

61 
	}
}

63 
	$ã°_≥æö
()

65 
°d
::
size_t
 c⁄° 
Size
 = 256;

68 
°d
::
ve˘‹
<
glm
::
byã
> 
	`ImageD©a
(
Size
 * Size * 3);

70 
°d
::
size_t
 
y
 = 0; y < 
Size
; ++y)

71 
°d
::
size_t
 
x
 = 0; x < 
Size
; ++x)

73 
ImageD©a
[(
x
 + 
y
 * 
Size
Ë* 3 + 0] = 
glm
::
	`byã
(glm::
	`≥æö
(glm::
	`vec2
(x / 64.f, y / 64.f)) * 128.f + 127.f);

74 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

75 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

78 
gli
::
ãxtuª2D
 
	`Textuª
(1);

79 
Textuª
[0] = 
gli
::
	`image2D
(
glm
::
	`uvec2
(
Size
), gli::
RGB8U
);

80 
	`mem˝y
(
Textuª
[0].
	`d©a
(), &
ImageD©a
[0], ImageD©a.
	`size
());

81 
gli
::
	`ßveDDS9
(
Textuª
, "texture_perlin2d_256.dds");

85 
°d
::
ve˘‹
<
glm
::
byã
> 
	`ImageD©a
(
Size
 * Size * 3);

87 
°d
::
size_t
 
y
 = 0; y < 
Size
; ++y)

88 
°d
::
size_t
 
x
 = 0; x < 
Size
; ++x)

90 
ImageD©a
[(
x
 + 
y
 * 
Size
Ë* 3 + 0] = 
glm
::
	`byã
(glm::
	`≥æö
(glm::
	`vec3
(x / 64.f, y / 64.f, 0.5f)) * 128.f + 127.f);

91 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

92 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

95 
gli
::
ãxtuª2D
 
	`Textuª
(1);

96 
Textuª
[0] = 
gli
::
	`image2D
(
glm
::
	`uvec2
(
Size
), gli::
RGB8U
);

97 
	`mem˝y
(
Textuª
[0].
	`d©a
(), &
ImageD©a
[0], ImageD©a.
	`size
());

98 
gli
::
	`ßveDDS9
(
Textuª
, "texture_perlin3d_256.dds");

102 
°d
::
ve˘‹
<
glm
::
byã
> 
	`ImageD©a
(
Size
 * Size * 3);

104 
°d
::
size_t
 
y
 = 0; y < 
Size
; ++y)

105 
°d
::
size_t
 
x
 = 0; x < 
Size
; ++x)

107 
ImageD©a
[(
x
 + 
y
 * 
Size
Ë* 3 + 0] = 
glm
::
	`byã
(glm::
	`≥æö
(glm::
	`vec4
(x / 64.f, y / 64.f, 0.5f, 0.5f)) * 128.f + 127.f);

108 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

109 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

112 
gli
::
ãxtuª2D
 
	`Textuª
(1);

113 
Textuª
[0] = 
gli
::
	`image2D
(
glm
::
	`uvec2
(
Size
), gli::
RGB8U
);

114 
	`mem˝y
(
Textuª
[0].
	`d©a
(), &
ImageD©a
[0], ImageD©a.
	`size
());

115 
gli
::
	`ßveDDS9
(
Textuª
, "texture_perlin4d_256.dds");

119 
	}
}

121 
	$ã°_≥æö_≥di‹ic
()

123 
°d
::
size_t
 c⁄° 
Size
 = 256;

126 
°d
::
ve˘‹
<
glm
::
byã
> 
	`ImageD©a
(
Size
 * Size * 3);

128 
°d
::
size_t
 
y
 = 0; y < 
Size
; ++y)

129 
°d
::
size_t
 
x
 = 0; x < 
Size
; ++x)

131 
ImageD©a
[(
x
 + 
y
 * 
Size
Ë* 3 + 0] = 
glm
::
	`byã
(glm::
	`≥æö
(glm::
	`vec2
(x / 64.f, y / 64.f), glm::vec2(2.0f)) * 128.f + 127.f);

132 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

133 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

136 
gli
::
ãxtuª2D
 
	`Textuª
(1);

137 
Textuª
[0] = 
gli
::
	`image2D
(
glm
::
	`uvec2
(
Size
), gli::
RGB8U
);

138 
	`mem˝y
(
Textuª
[0].
	`d©a
(), &
ImageD©a
[0], ImageD©a.
	`size
());

139 
gli
::
	`ßveDDS9
(
Textuª
, "texture_perlin_pedioric_2d_256.dds");

143 
°d
::
ve˘‹
<
glm
::
byã
> 
	`ImageD©a
(
Size
 * Size * 3);

145 
°d
::
size_t
 
y
 = 0; y < 
Size
; ++y)

146 
°d
::
size_t
 
x
 = 0; x < 
Size
; ++x)

148 
ImageD©a
[(
x
 + 
y
 * 
Size
Ë* 3 + 0] = 
glm
::
	`byã
(glm::
	`≥æö
(glm::
	`vec3
(x / 64.f, y / 64.f, 0.5f), glm::vec3(2.0f)) * 128.f + 127.f);

149 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

150 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

153 
gli
::
ãxtuª2D
 
	`Textuª
(1);

154 
Textuª
[0] = 
gli
::
	`image2D
(
glm
::
	`uvec2
(
Size
), gli::
RGB8U
);

155 
	`mem˝y
(
Textuª
[0].
	`d©a
(), &
ImageD©a
[0], ImageD©a.
	`size
());

156 
gli
::
	`ßveDDS9
(
Textuª
, "texture_perlin_pedioric_3d_256.dds");

160 
°d
::
ve˘‹
<
glm
::
byã
> 
	`ImageD©a
(
Size
 * Size * 3);

162 
°d
::
size_t
 
y
 = 0; y < 
Size
; ++y)

163 
°d
::
size_t
 
x
 = 0; x < 
Size
; ++x)

165 
ImageD©a
[(
x
 + 
y
 * 
Size
Ë* 3 + 0] = 
glm
::
	`byã
(glm::
	`≥æö
(glm::
	`vec4
(x / 64.f, y / 64.f, 0.5f, 0.5f), glm::vec4(2.0f)) * 128.f + 127.f);

166 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 1] = ImageData[(x + y * Size) * 3 + 0];

167 
ImageD©a
[(
x
 + 
y
 * 
Size
) * 3 + 2] = ImageData[(x + y * Size) * 3 + 0];

170 
gli
::
ãxtuª2D
 
	`Textuª
(1);

171 
Textuª
[0] = 
gli
::
	`image2D
(
glm
::
	`uvec2
(
Size
), gli::
RGB8U
);

172 
	`mem˝y
(
Textuª
[0].
	`d©a
(), &
ImageD©a
[0], ImageD©a.
	`size
());

173 
gli
::
	`ßveDDS9
(
Textuª
, "texture_perlin_pedioric_4d_256.dds");

177 
	}
}

179 
	$maö
()

181 
Eº‹
 = 0;

183 
Eº‹
 +
	`ã°_sim∂ex
();

184 
Eº‹
 +
	`ã°_≥æö
();

185 
Eº‹
 +
	`ã°_≥æö_≥di‹ic
();

187  
Eº‹
;

188 
	}
}

	@glm/test/gtc/gtc_packing.cpp

1 
	~<glm/gtc/∑ckög.hµ
>

2 
	~<glm/gtc/ïsû⁄.hµ
>

3 
	~<c°dio
>

4 
	~<ve˘‹
>

6 
	$¥öt_bôs
(c⁄° & 
s
)

10 
f
;

11 
i
;

12 } 
uif
;

14 
uif
.
f
 = 
s
;

16 
	`¥ötf
("f32: ");

17 
°d
::
size_t
 
j
 = (
s
) * 8; j > 0; --j)

19 if(
j
 == 23 || j == 31)

20 
	`¥ötf
(" ");

21 
	`¥ötf
("%d", (
uif
.
i
 & (1 << (
j
 - 1))) ? 1 : 0);

23 
	}
}

25 
	$¥öt_10bôs
(
glm
::
uöt
 c⁄° & 
s
)

27 
	`¥ötf
("10b: ");

28 
°d
::
size_t
 
j
 = 10; j > 0; --j)

30 if(
j
 == 5)

31 
	`¥ötf
(" ");

32 
	`¥ötf
("%d", (
s
 & (1 << (
j
 - 1))) ? 1 : 0);

34 
	}
}

36 
	$¥öt_11bôs
(
glm
::
uöt
 c⁄° & 
s
)

38 
	`¥ötf
("11b: ");

39 
°d
::
size_t
 
j
 = 11; j > 0; --j)

41 if(
j
 == 6)

42 
	`¥ötf
(" ");

43 
	`¥ötf
("%d", (
s
 & (1 << (
j
 - 1))) ? 1 : 0);

45 
	}
}

47 
	$¥öt_vÆue
(c⁄° & 
s
)

49 
	`¥ötf
("%2.5f, ", 
s
);

50 
	`¥öt_bôs
(
s
);

51 
	`¥ötf
(", ");

55 
	`¥ötf
("\n");

56 
	}
}

58 
	$ã°_HÆf1x16
()

60 
Eº‹
 = 0;

62 
°d
::
ve˘‹
<> 
Te°s
;

63 
Te°s
.
	`push_back
(0.0f);

64 
Te°s
.
	`push_back
(1.0f);

65 
Te°s
.
	`push_back
(-1.0f);

66 
Te°s
.
	`push_back
(2.0f);

67 
Te°s
.
	`push_back
(-2.0f);

68 
Te°s
.
	`push_back
(1.9f);

70 
°d
::
size_t
 
i
 = 0; i < 
Te°s
.
	`size
(); ++i)

72 
glm
::
uöt32
 
p0
 = glm::
	`∑ckHÆf1x16
(
Te°s
[
i
]);

73 
v0
 = 
glm
::
	`u≈ackHÆf1x16
(
p0
);

74 
glm
::
uöt32
 
p1
 = glm::
	`∑ckHÆf1x16
(
v0
);

75 
v1
 = 
glm
::
	`u≈ackHÆf1x16
(
p1
);

76 
Eº‹
 +(
v0
 =
v1
) ? 0 : 1;

79  
Eº‹
;

80 
	}
}

82 
	$ã°_HÆf4x16
()

84 
Eº‹
 = 0;

86 
°d
::
ve˘‹
<
glm
::
vec4
> 
Te°s
;

87 
Te°s
.
	`push_back
(
glm
::
	`vec4
(1.0f));

88 
Te°s
.
	`push_back
(
glm
::
	`vec4
(0.0f));

89 
Te°s
.
	`push_back
(
glm
::
	`vec4
(2.0f));

90 
Te°s
.
	`push_back
(
glm
::
	`vec4
(0.1f));

91 
Te°s
.
	`push_back
(
glm
::
	`vec4
(0.5f));

92 
Te°s
.
	`push_back
(
glm
::
	`vec4
(-0.9f));

94 
°d
::
size_t
 
i
 = 0; i < 
Te°s
.
	`size
(); ++i)

96 
glm
::
uöt64
 
p0
 = glm::
	`∑ckHÆf4x16
(
Te°s
[
i
]);

97 
glm
::
vec4
 
v0
 = glm::
	`u≈ackHÆf4x16
(
p0
);

98 
glm
::
uöt64
 
p1
 = glm::
	`∑ckHÆf4x16
(
v0
);

99 
glm
::
vec4
 
v1
 = glm::
	`u≈ackHÆf4x16
(
p1
);

100 
glm
::
u16vec4
 
p2
 = glm::
	`∑ckHÆf
(
v0
);

101 
glm
::
vec4
 
v2
 = glm::
	`u≈ackHÆf
(
p2
);

103 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v0
, 
v1
)) ? 0 : 1;

104 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v0
, 
v2
)) ? 0 : 1;

107  
Eº‹
;

108 
	}
}

110 
	$ã°_I3x10_1x2
()

112 
Eº‹
 = 0;

114 
°d
::
ve˘‹
<
glm
::
ivec4
> 
Te°s
;

115 
Te°s
.
	`push_back
(
glm
::
	`ivec4
(0));

116 
Te°s
.
	`push_back
(
glm
::
	`ivec4
(1));

117 
Te°s
.
	`push_back
(
glm
::
	`ivec4
(-1));

118 
Te°s
.
	`push_back
(
glm
::
	`ivec4
(2));

119 
Te°s
.
	`push_back
(
glm
::
	`ivec4
(-2));

120 
Te°s
.
	`push_back
(
glm
::
	`ivec4
(3));

122 
°d
::
size_t
 
i
 = 0; i < 
Te°s
.
	`size
(); ++i)

124 
glm
::
uöt32
 
p0
 = glm::
	`∑ckI3x10_1x2
(
Te°s
[
i
]);

125 
glm
::
ivec4
 
v0
 = glm::
	`u≈ackI3x10_1x2
(
p0
);

126 
glm
::
uöt32
 
p1
 = glm::
	`∑ckI3x10_1x2
(
v0
);

127 
glm
::
ivec4
 
v1
 = glm::
	`u≈ackI3x10_1x2
(
p1
);

128 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v0
, 
v1
)) ? 0 : 1;

131  
Eº‹
;

132 
	}
}

134 
	$ã°_U3x10_1x2
()

136 
Eº‹
 = 0;

138 
°d
::
ve˘‹
<
glm
::
uvec4
> 
Te°s
;

139 
Te°s
.
	`push_back
(
glm
::
	`uvec4
(0));

140 
Te°s
.
	`push_back
(
glm
::
	`uvec4
(1));

141 
Te°s
.
	`push_back
(
glm
::
	`uvec4
(2));

142 
Te°s
.
	`push_back
(
glm
::
	`uvec4
(3));

143 
Te°s
.
	`push_back
(
glm
::
	`uvec4
(4));

144 
Te°s
.
	`push_back
(
glm
::
	`uvec4
(5));

146 
°d
::
size_t
 
i
 = 0; i < 
Te°s
.
	`size
(); ++i)

148 
glm
::
uöt32
 
p0
 = glm::
	`∑ckU3x10_1x2
(
Te°s
[
i
]);

149 
glm
::
uvec4
 
v0
 = glm::
	`u≈ackU3x10_1x2
(
p0
);

150 
glm
::
uöt32
 
p1
 = glm::
	`∑ckU3x10_1x2
(
v0
);

151 
glm
::
uvec4
 
v1
 = glm::
	`u≈ackU3x10_1x2
(
p1
);

152 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v0
, 
v1
)) ? 0 : 1;

155  
Eº‹
;

156 
	}
}

158 
	$ã°_Sn‹m3x10_1x2
()

160 
Eº‹
 = 0;

162 
°d
::
ve˘‹
<
glm
::
vec4
> 
Te°s
;

163 
Te°s
.
	`push_back
(
glm
::
	`vec4
(1.0f));

164 
Te°s
.
	`push_back
(
glm
::
	`vec4
(0.0f));

165 
Te°s
.
	`push_back
(
glm
::
	`vec4
(2.0f));

166 
Te°s
.
	`push_back
(
glm
::
	`vec4
(0.1f));

167 
Te°s
.
	`push_back
(
glm
::
	`vec4
(0.5f));

168 
Te°s
.
	`push_back
(
glm
::
	`vec4
(0.9f));

170 
°d
::
size_t
 
i
 = 0; i < 
Te°s
.
	`size
(); ++i)

172 
glm
::
uöt32
 
p0
 = glm::
	`∑ckSn‹m3x10_1x2
(
Te°s
[
i
]);

173 
glm
::
vec4
 
v0
 = glm::
	`u≈ackSn‹m3x10_1x2
(
p0
);

174 
glm
::
uöt32
 
p1
 = glm::
	`∑ckSn‹m3x10_1x2
(
v0
);

175 
glm
::
vec4
 
v1
 = glm::
	`u≈ackSn‹m3x10_1x2
(
p1
);

176 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v0
, 
v1
)) ? 0 : 1;

179  
Eº‹
;

180 
	}
}

182 
	$ã°_Un‹m3x10_1x2
()

184 
Eº‹
 = 0;

186 
°d
::
ve˘‹
<
glm
::
vec4
> 
Te°s
;

187 
Te°s
.
	`push_back
(
glm
::
	`vec4
(1.0f));

188 
Te°s
.
	`push_back
(
glm
::
	`vec4
(0.0f));

189 
Te°s
.
	`push_back
(
glm
::
	`vec4
(2.0f));

190 
Te°s
.
	`push_back
(
glm
::
	`vec4
(0.1f));

191 
Te°s
.
	`push_back
(
glm
::
	`vec4
(0.5f));

192 
Te°s
.
	`push_back
(
glm
::
	`vec4
(0.9f));

194 
°d
::
size_t
 
i
 = 0; i < 
Te°s
.
	`size
(); ++i)

196 
glm
::
uöt32
 
p0
 = glm::
	`∑ckUn‹m3x10_1x2
(
Te°s
[
i
]);

197 
glm
::
vec4
 
v0
 = glm::
	`u≈ackUn‹m3x10_1x2
(
p0
);

198 
glm
::
uöt32
 
p1
 = glm::
	`∑ckUn‹m3x10_1x2
(
v0
);

199 
glm
::
vec4
 
v1
 = glm::
	`u≈ackUn‹m3x10_1x2
(
p1
);

200 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v0
, 
v1
)) ? 0 : 1;

203  
Eº‹
;

204 
	}
}

206 
	$ã°_F2x11_1x10
()

208 
Eº‹
 = 0;

210 
°d
::
ve˘‹
<
glm
::
vec3
> 
Te°s
;

211 
Te°s
.
	`push_back
(
glm
::
	`vec3
(1.0f));

212 
Te°s
.
	`push_back
(
glm
::
	`vec3
(0.0f));

213 
Te°s
.
	`push_back
(
glm
::
	`vec3
(2.0f));

214 
Te°s
.
	`push_back
(
glm
::
	`vec3
(0.1f));

215 
Te°s
.
	`push_back
(
glm
::
	`vec3
(0.5f));

216 
Te°s
.
	`push_back
(
glm
::
	`vec3
(0.9f));

218 
°d
::
size_t
 
i
 = 0; i < 
Te°s
.
	`size
(); ++i)

220 
glm
::
uöt32
 
p0
 = glm::
	`∑ckF2x11_1x10
(
Te°s
[
i
]);

221 
glm
::
vec3
 
v0
 = glm::
	`u≈ackF2x11_1x10
(
p0
);

222 
glm
::
uöt32
 
p1
 = glm::
	`∑ckF2x11_1x10
(
v0
);

223 
glm
::
vec3
 
v1
 = glm::
	`u≈ackF2x11_1x10
(
p1
);

224 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v0
, 
v1
)) ? 0 : 1;

227  
Eº‹
;

228 
	}
}

230 
	$ã°_F3x9_E1x5
()

232 
Eº‹
 = 0;

234 
°d
::
ve˘‹
<
glm
::
vec3
> 
Te°s
;

235 
Te°s
.
	`push_back
(
glm
::
	`vec3
(1.0f));

236 
Te°s
.
	`push_back
(
glm
::
	`vec3
(0.0f));

237 
Te°s
.
	`push_back
(
glm
::
	`vec3
(2.0f));

238 
Te°s
.
	`push_back
(
glm
::
	`vec3
(0.1f));

239 
Te°s
.
	`push_back
(
glm
::
	`vec3
(0.5f));

240 
Te°s
.
	`push_back
(
glm
::
	`vec3
(0.9f));

242 
°d
::
size_t
 
i
 = 0; i < 
Te°s
.
	`size
(); ++i)

244 
glm
::
uöt32
 
p0
 = glm::
	`∑ckF3x9_E1x5
(
Te°s
[
i
]);

245 
glm
::
vec3
 
v0
 = glm::
	`u≈ackF3x9_E1x5
(
p0
);

246 
glm
::
uöt32
 
p1
 = glm::
	`∑ckF3x9_E1x5
(
v0
);

247 
glm
::
vec3
 
v1
 = glm::
	`u≈ackF3x9_E1x5
(
p1
);

248 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
v0
, 
v1
, 0.01f)) ? 0 : 1;

251  
Eº‹
;

252 
	}
}

254 
	$ã°_∑ckUn‹m1x16
()

256 
Eº‹
 = 0;

258 
°d
::
ve˘‹
<
glm
::
vec1
> 
A
;

259 
A
.
	`push_back
(
glm
::
	`vec1
(1.0f));

260 
A
.
	`push_back
(
glm
::
	`vec1
(0.5f));

261 
A
.
	`push_back
(
glm
::
	`vec1
(0.1f));

262 
A
.
	`push_back
(
glm
::
	`vec1
(0.0f));

264 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

266 
glm
::
vec1
 
	`B
(
A
[
i
]);

267 
glm
::
uöt32
 
C
 = glm::
	`∑ckUn‹m1x16
(
B
.
x
);

268 
glm
::
vec1
 
	`D
(glm::
	`u≈ackUn‹m1x16
(
C
));

269 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 65535.f)) ? 0 : 1;

270 
	`as£π
(!
Eº‹
);

273  
Eº‹
;

274 
	}
}

276 
	$ã°_∑ckSn‹m1x16
()

278 
Eº‹
 = 0;

280 
°d
::
ve˘‹
<
glm
::
vec1
> 
A
;

281 
A
.
	`push_back
(
glm
::
	`vec1
( 1.0f));

282 
A
.
	`push_back
(
glm
::
	`vec1
( 0.0f));

283 
A
.
	`push_back
(
glm
::
	`vec1
(-0.5f));

284 
A
.
	`push_back
(
glm
::
	`vec1
(-0.1f));

286 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

288 
glm
::
vec1
 
	`B
(
A
[
i
]);

289 
glm
::
uöt32
 
C
 = glm::
	`∑ckSn‹m1x16
(
B
.
x
);

290 
glm
::
vec1
 
	`D
(glm::
	`u≈ackSn‹m1x16
(
C
));

291 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 32767.0f * 2.0f)) ? 0 : 1;

294  
Eº‹
;

295 
	}
}

297 
	$ã°_∑ckUn‹m2x16
()

299 
Eº‹
 = 0;

301 
°d
::
ve˘‹
<
glm
::
vec2
> 
A
;

302 
A
.
	`push_back
(
glm
::
	`vec2
(1.0f, 0.0f));

303 
A
.
	`push_back
(
glm
::
	`vec2
(0.5f, 0.7f));

304 
A
.
	`push_back
(
glm
::
	`vec2
(0.1f, 0.2f));

306 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

308 
glm
::
vec2
 
	`B
(
A
[
i
]);

309 
glm
::
uöt32
 
C
 = glm::
	`∑ckUn‹m2x16
(
B
);

310 
glm
::
vec2
 
D
 = glm::
	`u≈ackUn‹m2x16
(
C
);

311 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 65535.f)) ? 0 : 1;

312 
	`as£π
(!
Eº‹
);

315  
Eº‹
;

316 
	}
}

318 
	$ã°_∑ckSn‹m2x16
()

320 
Eº‹
 = 0;

322 
°d
::
ve˘‹
<
glm
::
vec2
> 
A
;

323 
A
.
	`push_back
(
glm
::
	`vec2
( 1.0f, 0.0f));

324 
A
.
	`push_back
(
glm
::
	`vec2
(-0.5f,-0.7f));

325 
A
.
	`push_back
(
glm
::
	`vec2
(-0.1f, 0.1f));

327 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

329 
glm
::
vec2
 
	`B
(
A
[
i
]);

330 
glm
::
uöt32
 
C
 = glm::
	`∑ckSn‹m2x16
(
B
);

331 
glm
::
vec2
 
D
 = glm::
	`u≈ackSn‹m2x16
(
C
);

332 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 32767.0f * 2.0f)) ? 0 : 1;

333 
	`as£π
(!
Eº‹
);

336  
Eº‹
;

337 
	}
}

339 
	$ã°_∑ckUn‹m4x16
()

341 
Eº‹
 = 0;

343 
°d
::
ve˘‹
<
glm
::
vec4
> 
A
;

344 
A
.
	`push_back
(
glm
::
	`vec4
(1.0f));

345 
A
.
	`push_back
(
glm
::
	`vec4
(0.5f));

346 
A
.
	`push_back
(
glm
::
	`vec4
(0.1f));

347 
A
.
	`push_back
(
glm
::
	`vec4
(0.0f));

349 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

351 
glm
::
vec4
 
	`B
(
A
[
i
]);

352 
glm
::
uöt64
 
C
 = glm::
	`∑ckUn‹m4x16
(
B
);

353 
glm
::
vec4
 
	`D
(glm::
	`u≈ackUn‹m4x16
(
C
));

354 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 65535.f)) ? 0 : 1;

355 
	`as£π
(!
Eº‹
);

358  
Eº‹
;

359 
	}
}

361 
	$ã°_∑ckSn‹m4x16
()

363 
Eº‹
 = 0;

365 
°d
::
ve˘‹
<
glm
::
vec4
> 
A
;

366 
A
.
	`push_back
(
glm
::
	`vec4
( 1.0f, 0.0f, -0.5f, 0.5f));

367 
A
.
	`push_back
(
glm
::
	`vec4
(-0.3f,-0.7f, 0.3f, 0.7f));

368 
A
.
	`push_back
(
glm
::
	`vec4
(-0.1f, 0.1f, -0.2f, 0.2f));

370 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

372 
glm
::
vec4
 
	`B
(
A
[
i
]);

373 
glm
::
uöt64
 
C
 = glm::
	`∑ckSn‹m4x16
(
B
);

374 
glm
::
vec4
 
	`D
(glm::
	`u≈ackSn‹m4x16
(
C
));

375 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 32767.0f * 2.0f)) ? 0 : 1;

376 
	`as£π
(!
Eº‹
);

379  
Eº‹
;

380 
	}
}

382 
	$ã°_∑ckUn‹m1x8
()

384 
Eº‹
 = 0;

386 
°d
::
ve˘‹
<
glm
::
vec1
> 
A
;

387 
A
.
	`push_back
(
glm
::
	`vec1
(1.0f));

388 
A
.
	`push_back
(
glm
::
	`vec1
(0.5f));

389 
A
.
	`push_back
(
glm
::
	`vec1
(0.0f));

391 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

393 
glm
::
vec1
 
	`B
(
A
[
i
]);

394 
glm
::
uöt8
 
C
 = glm::
	`∑ckUn‹m1x8
(
B
.
x
);

395 
glm
::
vec1
 
	`D
(glm::
	`u≈ackUn‹m1x8
(
C
));

396 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 255.f)) ? 0 : 1;

397 
	`as£π
(!
Eº‹
);

400  
Eº‹
;

401 
	}
}

403 
	$ã°_∑ckSn‹m1x8
()

405 
Eº‹
 = 0;

407 
°d
::
ve˘‹
<
glm
::
vec1
> 
A
;

408 
A
.
	`push_back
(
glm
::
	`vec1
( 1.0f));

409 
A
.
	`push_back
(
glm
::
	`vec1
(-0.7f));

410 
A
.
	`push_back
(
glm
::
	`vec1
(-1.0f));

412 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

414 
glm
::
vec1
 
	`B
(
A
[
i
]);

415 
glm
::
uöt8
 
C
 = glm::
	`∑ckSn‹m1x8
(
B
.
x
);

416 
glm
::
vec1
 
	`D
(glm::
	`u≈ackSn‹m1x8
(
C
));

417 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 127.f)) ? 0 : 1;

420  
Eº‹
;

421 
	}
}

423 
	$ã°_∑ckUn‹m2x8
()

425 
Eº‹
 = 0;

427 
°d
::
ve˘‹
<
glm
::
vec2
> 
A
;

428 
A
.
	`push_back
(
glm
::
	`vec2
(1.0f, 0.7f));

429 
A
.
	`push_back
(
glm
::
	`vec2
(0.5f, 0.1f));

431 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

433 
glm
::
vec2
 
	`B
(
A
[
i
]);

434 
glm
::
uöt16
 
C
 = glm::
	`∑ckUn‹m2x8
(
B
);

435 
glm
::
vec2
 
D
 = glm::
	`u≈ackUn‹m2x8
(
C
);

436 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 255.f)) ? 0 : 1;

437 
	`as£π
(!
Eº‹
);

440  
Eº‹
;

441 
	}
}

443 
	$ã°_∑ckSn‹m2x8
()

445 
Eº‹
 = 0;

447 
°d
::
ve˘‹
<
glm
::
vec2
> 
A
;

448 
A
.
	`push_back
(
glm
::
	`vec2
( 1.0f, 0.0f));

449 
A
.
	`push_back
(
glm
::
	`vec2
(-0.7f,-0.1f));

451 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

453 
glm
::
vec2
 
	`B
(
A
[
i
]);

454 
glm
::
uöt16
 
C
 = glm::
	`∑ckSn‹m2x8
(
B
);

455 
glm
::
vec2
 
D
 = glm::
	`u≈ackSn‹m2x8
(
C
);

456 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 127.f)) ? 0 : 1;

459  
Eº‹
;

460 
	}
}

462 
	$ã°_∑ckUn‹m4x8
()

464 
Eº‹
 = 0;

466 
°d
::
ve˘‹
<
glm
::
vec4
> 
A
;

467 
A
.
	`push_back
(
glm
::
	`vec4
(1.0f, 0.7f, 0.3f, 0.0f));

468 
A
.
	`push_back
(
glm
::
	`vec4
(0.5f, 0.1f, 0.2f, 0.3f));

470 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

472 
glm
::
vec4
 
	`B
(
A
[
i
]);

473 
glm
::
uöt32
 
C
 = glm::
	`∑ckUn‹m4x8
(
B
);

474 
glm
::
vec4
 
D
 = glm::
	`u≈ackUn‹m4x8
(
C
);

475 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 255.f)) ? 0 : 1;

476 
	`as£π
(!
Eº‹
);

479  
Eº‹
;

480 
	}
}

482 
	$ã°_∑ckSn‹m4x8
()

484 
Eº‹
 = 0;

486 
°d
::
ve˘‹
<
glm
::
vec4
> 
A
;

487 
A
.
	`push_back
(
glm
::
	`vec4
( 1.0f, 0.0f,-0.5f,-1.0f));

488 
A
.
	`push_back
(
glm
::
	`vec4
(-0.7f,-0.1f, 0.1f, 0.7f));

490 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

492 
glm
::
vec4
 
	`B
(
A
[
i
]);

493 
glm
::
uöt32
 
C
 = glm::
	`∑ckSn‹m4x8
(
B
);

494 
glm
::
vec4
 
D
 = glm::
	`u≈ackSn‹m4x8
(
C
);

495 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 127.f)) ? 0 : 1;

496 
	`as£π
(!
Eº‹
);

499  
Eº‹
;

500 
	}
}

502 
	$ã°_∑ckUn‹m
()

504 
Eº‹
 = 0;

506 
°d
::
ve˘‹
<
glm
::
vec2
> 
A
;

507 
A
.
	`push_back
(
glm
::
	`vec2
(1.0f, 0.7f));

508 
A
.
	`push_back
(
glm
::
	`vec2
(0.5f, 0.1f));

510 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

512 
glm
::
vec2
 
	`B
(
A
[
i
]);

513 
glm
::
u16vec2
 
C
 = glm::
∑ckUn‹m
<glm::
uöt16
>(
B
);

514 
glm
::
vec2
 
D
 = glm::
u≈ackUn‹m
<glm::
uöt16
, >(
C
);

515 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 255.f)) ? 0 : 1;

516 
	`as£π
(!
Eº‹
);

519  
Eº‹
;

520 
	}
}

522 
	$ã°_∑ckSn‹m
()

524 
Eº‹
 = 0;

526 
°d
::
ve˘‹
<
glm
::
vec2
> 
A
;

527 
A
.
	`push_back
(
glm
::
	`vec2
( 1.0f, 0.0f));

528 
A
.
	`push_back
(
glm
::
	`vec2
(-0.5f,-0.7f));

529 
A
.
	`push_back
(
glm
::
	`vec2
(-0.1f, 0.1f));

531 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

533 
glm
::
vec2
 
	`B
(
A
[
i
]);

534 
glm
::
i16vec2
 
C
 = glm::
∑ckSn‹m
<glm::
öt16
>(
B
);

535 
glm
::
vec2
 
D
 = glm::
u≈ackSn‹m
<glm::
öt16
, >(
C
);

536 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 32767.0f * 2.0f)) ? 0 : 1;

537 
	`as£π
(!
Eº‹
);

540  
Eº‹
;

541 
	}
}

543 
	$ã°_∑ckUn‹m2x4
()

545 
Eº‹
 = 0;

547 
°d
::
ve˘‹
<
glm
::
vec2
> 
A
;

548 
A
.
	`push_back
(
glm
::
	`vec2
(1.0f, 0.7f));

549 
A
.
	`push_back
(
glm
::
	`vec2
(0.5f, 0.0f));

551 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

553 
glm
::
vec2
 
	`B
(
A
[
i
]);

554 
glm
::
uöt8
 
C
 = glm::
	`∑ckUn‹m2x4
(
B
);

555 
glm
::
vec2
 
D
 = glm::
	`u≈ackUn‹m2x4
(
C
);

556 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 15.f)) ? 0 : 1;

557 
	`as£π
(!
Eº‹
);

560  
Eº‹
;

561 
	}
}

563 
	$ã°_∑ckUn‹m4x4
()

565 
Eº‹
 = 0;

567 
°d
::
ve˘‹
<
glm
::
vec4
> 
A
;

568 
A
.
	`push_back
(
glm
::
	`vec4
(1.0f, 0.7f, 0.5f, 0.0f));

569 
A
.
	`push_back
(
glm
::
	`vec4
(0.5f, 0.1f, 0.0f, 1.0f));

571 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

573 
glm
::
vec4
 
	`B
(
A
[
i
]);

574 
glm
::
uöt16
 
C
 = glm::
	`∑ckUn‹m4x4
(
B
);

575 
glm
::
vec4
 
D
 = glm::
	`u≈ackUn‹m4x4
(
C
);

576 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 15.f)) ? 0 : 1;

577 
	`as£π
(!
Eº‹
);

580  
Eº‹
;

581 
	}
}

583 
	$ã°_∑ckUn‹m3x5_1x1
()

585 
Eº‹
 = 0;

587 
°d
::
ve˘‹
<
glm
::
vec4
> 
A
;

588 
A
.
	`push_back
(
glm
::
	`vec4
(1.0f, 0.7f, 0.5f, 0.0f));

589 
A
.
	`push_back
(
glm
::
	`vec4
(0.5f, 0.1f, 0.0f, 1.0f));

591 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

593 
glm
::
vec4
 
	`B
(
A
[
i
]);

594 
glm
::
uöt16
 
C
 = glm::
	`∑ckUn‹m3x5_1x1
(
B
);

595 
glm
::
vec4
 
D
 = glm::
	`u≈ackUn‹m3x5_1x1
(
C
);

596 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 15.f)) ? 0 : 1;

597 
	`as£π
(!
Eº‹
);

600  
Eº‹
;

601 
	}
}

603 
	$ã°_∑ckUn‹m1x5_1x6_1x5
()

605 
Eº‹
 = 0;

607 
°d
::
ve˘‹
<
glm
::
vec3
> 
A
;

608 
A
.
	`push_back
(
glm
::
	`vec3
(1.0f, 0.7f, 0.5f));

609 
A
.
	`push_back
(
glm
::
	`vec3
(0.5f, 0.1f, 0.0f));

611 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

613 
glm
::
vec3
 
	`B
(
A
[
i
]);

614 
glm
::
uöt16
 
C
 = glm::
	`∑ckUn‹m1x5_1x6_1x5
(
B
);

615 
glm
::
vec3
 
D
 = glm::
	`u≈ackUn‹m1x5_1x6_1x5
(
C
);

616 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 15.f)) ? 0 : 1;

617 
	`as£π
(!
Eº‹
);

620  
Eº‹
;

621 
	}
}

623 
	$ã°_∑ckUn‹m2x3_1x2
()

625 
Eº‹
 = 0;

627 
°d
::
ve˘‹
<
glm
::
vec3
> 
A
;

628 
A
.
	`push_back
(
glm
::
	`vec3
(1.0f, 0.7f, 0.5f));

629 
A
.
	`push_back
(
glm
::
	`vec3
(0.5f, 0.1f, 0.0f));

631 
°d
::
size_t
 
i
 = 0; i < 
A
.
	`size
(); ++i)

633 
glm
::
vec3
 
	`B
(
A
[
i
]);

634 
glm
::
uöt8
 
C
 = glm::
	`∑ckUn‹m2x3_1x2
(
B
);

635 
glm
::
vec3
 
D
 = glm::
	`u≈ackUn‹m2x3_1x2
(
C
);

636 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
B
, 
D
, 1.0f / 3.f)) ? 0 : 1;

637 
	`as£π
(!
Eº‹
);

640  
Eº‹
;

641 
	}
}

643 
	$maö
()

645 
Eº‹
 = 0;

647 
Eº‹
 +
	`ã°_∑ckUn‹m
();

648 
Eº‹
 +
	`ã°_∑ckSn‹m
();

650 
Eº‹
 +
	`ã°_∑ckSn‹m1x16
();

651 
Eº‹
 +
	`ã°_∑ckSn‹m2x16
();

652 
Eº‹
 +
	`ã°_∑ckSn‹m4x16
();

654 
Eº‹
 +
	`ã°_∑ckSn‹m1x8
();

655 
Eº‹
 +
	`ã°_∑ckSn‹m2x8
();

656 
Eº‹
 +
	`ã°_∑ckSn‹m4x8
();

658 
Eº‹
 +
	`ã°_∑ckUn‹m1x16
();

659 
Eº‹
 +
	`ã°_∑ckUn‹m2x16
();

660 
Eº‹
 +
	`ã°_∑ckUn‹m4x16
();

662 
Eº‹
 +
	`ã°_∑ckUn‹m1x8
();

663 
Eº‹
 +
	`ã°_∑ckUn‹m2x8
();

664 
Eº‹
 +
	`ã°_∑ckUn‹m4x8
();

666 
Eº‹
 +
	`ã°_∑ckUn‹m2x4
();

667 
Eº‹
 +
	`ã°_∑ckUn‹m4x4
();

668 
Eº‹
 +
	`ã°_∑ckUn‹m3x5_1x1
();

669 
Eº‹
 +
	`ã°_∑ckUn‹m1x5_1x6_1x5
();

670 
Eº‹
 +
	`ã°_∑ckUn‹m2x3_1x2
();

672 
Eº‹
 +
	`ã°_F2x11_1x10
();

673 
Eº‹
 +
	`ã°_F3x9_E1x5
();

674 
Eº‹
 +
	`ã°_Sn‹m3x10_1x2
();

675 
Eº‹
 +
	`ã°_Un‹m3x10_1x2
();

676 
Eº‹
 +
	`ã°_I3x10_1x2
();

677 
Eº‹
 +
	`ã°_U3x10_1x2
();

678 
Eº‹
 +
	`ã°_HÆf1x16
();

679 
Eº‹
 +
	`ã°_HÆf4x16
();

681  
Eº‹
;

682 
	}
}

	@glm/test/gtc/gtc_quaternion.cpp

1 
	~<glm/gtc/qu©îni⁄.hµ
>

2 
	~<glm/gtc/ïsû⁄.hµ
>

3 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

4 
	~<ve˘‹
>

6 
	$ã°_qu©_™gÀ
()

8 
Eº‹
 = 0;

11 
glm
::
qu©
 
Q
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.25f, glm::
	`vec3
(0, 0, 1));

12 
glm
::
qu©
 
N
 = glm::
	`n‹mÆize
(
Q
);

13 
L
 = 
glm
::
	`Àngth
(
N
);

14 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
L
, 1.0f, 0.01f) ? 0 : 1;

15 
A
 = 
glm
::
	`™gÀ
(
N
);

16 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
A
, glm::
pi
<>() * 0.25f, 0.01f) ? 0 : 1;

19 
glm
::
qu©
 
Q
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.25f, glm::
	`n‹mÆize
(glm::
	`vec3
(0, 1, 1)));

20 
glm
::
qu©
 
N
 = glm::
	`n‹mÆize
(
Q
);

21 
L
 = 
glm
::
	`Àngth
(
N
);

22 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
L
, 1.0f, 0.01f) ? 0 : 1;

23 
A
 = 
glm
::
	`™gÀ
(
N
);

24 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
A
, glm::
pi
<>() * 0.25f, 0.01f) ? 0 : 1;

27 
glm
::
qu©
 
Q
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.25f, glm::
	`n‹mÆize
(glm::
	`vec3
(1, 2, 3)));

28 
glm
::
qu©
 
N
 = glm::
	`n‹mÆize
(
Q
);

29 
L
 = 
glm
::
	`Àngth
(
N
);

30 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
L
, 1.0f, 0.01f) ? 0 : 1;

31 
A
 = 
glm
::
	`™gÀ
(
N
);

32 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
A
, glm::
pi
<>() * 0.25f, 0.01f) ? 0 : 1;

35  
Eº‹
;

36 
	}
}

38 
	$ã°_qu©_™gÀAxis
()

40 
Eº‹
 = 0;

42 
glm
::
qu©
 
A
 = glm::
	`™gÀAxis
(0.0f, glm::
	`vec3
(0, 0, 1));

43 
glm
::
qu©
 
B
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.5f, glm::
	`vec3
(0, 0, 1));

44 
glm
::
qu©
 
C
 = glm::
	`mix
(
A
, 
B
, 0.5f);

45 
glm
::
qu©
 
D
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.25f, glm::
	`vec3
(0, 0, 1));

47 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
x
, 
D
.x, 0.01f) ? 0 : 1;

48 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
y
, 
D
.y, 0.01f) ? 0 : 1;

49 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
z
, 
D
.z, 0.01f) ? 0 : 1;

50 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
w
, 
D
.w, 0.01f) ? 0 : 1;

52  
Eº‹
;

53 
	}
}

55 
	$ã°_qu©_mix
()

57 
Eº‹
 = 0;

59 
glm
::
qu©
 
A
 = glm::
	`™gÀAxis
(0.0f, glm::
	`vec3
(0, 0, 1));

60 
glm
::
qu©
 
B
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.5f, glm::
	`vec3
(0, 0, 1));

61 
glm
::
qu©
 
C
 = glm::
	`mix
(
A
, 
B
, 0.5f);

62 
glm
::
qu©
 
D
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.25f, glm::
	`vec3
(0, 0, 1));

64 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
x
, 
D
.x, 0.01f) ? 0 : 1;

65 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
y
, 
D
.y, 0.01f) ? 0 : 1;

66 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
z
, 
D
.z, 0.01f) ? 0 : 1;

67 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
w
, 
D
.w, 0.01f) ? 0 : 1;

69  
Eº‹
;

70 
	}
}

72 
	$ã°_qu©_¥ecisi⁄
()

74 
Eº‹
 = 0;

76 
Eº‹
 +(
glm
::
lowp_qu©
Ë<(glm::
mediump_qu©
) ? 0 : 1;

77 
Eº‹
 +(
glm
::
mediump_qu©
Ë<(glm::
highp_qu©
) ? 0 : 1;

79  
Eº‹
;

80 
	}
}

82 
	$ã°_qu©_n‹mÆize
()

84 
	`Eº‹
(0);

87 
glm
::
qu©
 
Q
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.25f, glm::
	`vec3
(0, 0, 1));

88 
glm
::
qu©
 
N
 = glm::
	`n‹mÆize
(
Q
);

89 
L
 = 
glm
::
	`Àngth
(
N
);

90 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
L
, 1.0f, 0.000001f) ? 0 : 1;

93 
glm
::
qu©
 
Q
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.25f, glm::
	`vec3
(0, 0, 2));

94 
glm
::
qu©
 
N
 = glm::
	`n‹mÆize
(
Q
);

95 
L
 = 
glm
::
	`Àngth
(
N
);

96 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
L
, 1.0f, 0.000001f) ? 0 : 1;

99 
glm
::
qu©
 
Q
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.25f, glm::
	`vec3
(1, 2, 3));

100 
glm
::
qu©
 
N
 = glm::
	`n‹mÆize
(
Q
);

101 
L
 = 
glm
::
	`Àngth
(
N
);

102 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
L
, 1.0f, 0.000001f) ? 0 : 1;

105  
Eº‹
;

106 
	}
}

108 
	$ã°_qu©_euÀr
()

110 
	`Eº‹
(0);

113 
glm
::
qu©
 
	`q
(1.0f, 0.0f, 0.0f, 1.0f);

114 
Rﬁl
 = 
glm
::
	`rﬁl
(
q
);

115 
Pôch
 = 
glm
::
	`pôch
(
q
);

116 
Yaw
 = 
glm
::
	`yaw
(
q
);

117 
glm
::
vec3
 
AngÀs
 = glm::
	`euÀrAngÀs
(
q
);

121 
glm
::
dqu©
 
	`q
(1.0f, 0.0f, 0.0f, 1.0f);

122 
Rﬁl
 = 
glm
::
	`rﬁl
(
q
);

123 
Pôch
 = 
glm
::
	`pôch
(
q
);

124 
Yaw
 = 
glm
::
	`yaw
(
q
);

125 
glm
::
dvec3
 
AngÀs
 = glm::
	`euÀrAngÀs
(
q
);

128  
Eº‹
;

129 
	}
}

131 
	$ã°_qu©_¶îp
()

133 
	`Eº‹
(0);

135 c⁄° 
Epsû⁄
 = 0.0001f;

137 
sqπ2
 = 
	`sqπ
(2.0f)/2.0f;

138 
glm
::
qu©
 
id
;

139 
glm
::
qu©
 
	`Y90rŸ
(
sqπ2
, 0.0f, sqrt2, 0.0f);

140 
glm
::
qu©
 
	`Y180rŸ
(0.0f, 0.0f, 1.0f, 0.0f);

144 
glm
::
qu©
 
id2
 = glm::
	`¶îp
(
id
, 
Y90rŸ
, 0.0f);

145 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
id
, 
id2
, 
Epsû⁄
)) ? 0 : 1;

149 
glm
::
qu©
 
Y90rŸ2
 = glm::
	`¶îp
(
id
, 
Y90rŸ
, 1.0f);

150 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Y90rŸ
, 
Y90rŸ2
, 
Epsû⁄
)) ? 0 : 1;

154 
glm
::
qu©
 
Y45rŸ1
 = glm::
	`¶îp
(
id
, 
Y90rŸ
, 0.5f);

158 
glm
::
qu©
 
Ym45rŸ2
 = glm::
	`¶îp
(
Y90rŸ
, 
id
, 0.5f);

163 
glm
::
qu©
 
Y45rŸ3
 = glm::
	`¶îp
(
id
 , -
Y90rŸ
, 0.5f);

164 
Y45™gÀ3
 = 
glm
::
	`™gÀ
(
Y45rŸ3
);

165 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
Y45™gÀ3
, glm::
pi
<>(Ë* 0.25f, 
Epsû⁄
) ? 0 : 1;

166 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Ym45rŸ2
, 
Y45rŸ3
, 
Epsû⁄
)) ? 0 : 1;

171 
glm
::
qu©
 
Y45rŸ4
 = glm::
	`¶îp
(-
Y90rŸ
, 
id
, 0.5f);

172 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Ym45rŸ2
, -
Y45rŸ4
, 
Epsû⁄
)) ? 0 : 1;

176 
glm
::
qu©
 
Y90rŸ3
 = glm::
	`¶îp
(
Y90rŸ
, Y90rot, 0.5f);

177 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
Y90rŸ
, 
Y90rŸ3
, 
Epsû⁄
)) ? 0 : 1;

181 
glm
::
qu©
 
XZ90rŸ
 = glm::
	`¶îp
(
id
, -
Y90rŸ
, 0.5f);

182 
XZ90™gÀ
 = 
glm
::
	`™gÀ
(
XZ90rŸ
);

183 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
XZ90™gÀ
, glm::
pi
<>(Ë* 0.25f, 
Epsû⁄
) ? 0 : 1;

187 
glm
::
qu©
 
Æmo°id
 = glm::
	`¶îp
(
id
, glm::
	`™gÀAxis
(0.1f, glm::
	`vec3
(0.0f, 1.0f, 0.0f)), 0.5f);

191 
glm
::
qu©
 
	`a
(-1, 0, 0, 0);

193 
glm
::
qu©
 
ªsu…
 = glm::
	`¶îp
(
a
, 
id
, 0.5f);

195 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(glm::
	`pow
(glm::
	`dŸ
(
id
, 
ªsu…
), 2.f), 1.f, 0.01f) ? 0 : 1;

198  
Eº‹
;

199 
	}
}

201 
	$ã°_qu©_mul
()

203 
	`Eº‹
(0);

205 
glm
::
qu©
 
ãmp1
 = glm::
	`n‹mÆize
(glm::
	`qu©
(1.0f, glm::
	`vec3
(0.0, 1.0, 0.0)));

206 
glm
::
qu©
 
ãmp2
 = glm::
	`n‹mÆize
(glm::
	`qu©
(0.5f, glm::
	`vec3
(1.0, 0.0, 0.0)));

208 
glm
::
vec3
 
å™sf‹med0
 = (
ãmp1
 * glm::
	`vec3
(0.0, 1.0, 0.0Ë* glm::
	`övî£
(temp1));

209 
glm
::
vec3
 
ãmp4
 = 
ãmp2
 * 
å™sf‹med0
 * glm::
	`övî£
(temp2);

211 
glm
::
qu©
 
ãmp5
 = glm::
	`n‹mÆize
(
ãmp1
 * 
ãmp2
);

212 
glm
::
vec3
 
ãmp6
 = 
ãmp5
 * glm::
	`vec3
(0.0, 1.0, 0.0Ë* glm::
	`övî£
(temp5);

214 #i‚de‡
GLM_FORCE_NO_CTOR_INIT


216 
glm
::
qu©
 
ãmp7
;

218 
ãmp7
 *
ãmp5
;

219 
ãmp7
 *
glm
::
	`övî£
(
ãmp5
);

221 
Eº‹
 +
ãmp7
 !
glm
::
	`qu©
();

225  
Eº‹
;

226 
	}
}

228 
	$ã°_qu©_two_axis_˘r
()

230 
	`Eº‹
(0);

232 
glm
::
qu©
 
	`q1
(glm::
	`vec3
(1, 0, 0), glm::vec3(0, 1, 0));

233 
glm
::
vec3
 
v1
 = 
q1
 * glm::
	`vec3
(1, 0, 0);

234 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
v1
, glm::
	`vec3
(0, 1, 0), 0.0001f)) ? 0 : 1;

236 
glm
::
qu©
 
q2
 = 
q1
 * q1;

237 
glm
::
vec3
 
v2
 = 
q2
 * glm::
	`vec3
(1, 0, 0);

238 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
v2
, glm::
	`vec3
(-1, 0, 0), 0.0001f)) ? 0 : 1;

240  
Eº‹
;

241 
	}
}

243 
	$ã°_qu©_ty≥
()

245 
glm
::
qu©
 
A
;

246 
glm
::
dqu©
 
B
;

249 
	}
}

251 
	$ã°_qu©_mul_vec
()

253 
	`Eº‹
(0);

255 
glm
::
qu©
 
q
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.5f, glm::
	`vec3
(0, 0, 1));

256 
glm
::
vec3
 
	`v
(1, 0, 0);

257 
glm
::
vec3
 
	`u
(
q
 * 
v
);

258 
glm
::
vec3
 
	`w
(
u
 * 
q
);

260 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
v
, 
w
, 0.01f)) ? 0 : 1;

262  
Eº‹
;

263 
	}
}

265 
	$ã°_qu©_˘r
()

267 
	`Eº‹
(0);

269 #i‡
GLM_HAS_TRIVIAL_QUERIES


274 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
qu©
>::
vÆue
 ? 0 : 1;

275 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
dqu©
>::
vÆue
 ? 0 : 1;

277 
Eº‹
 +
°d
::
is_c›y_c⁄°ru˘ibÀ
<
glm
::
qu©
>::
vÆue
 ? 0 : 1;

278 
Eº‹
 +
°d
::
is_c›y_c⁄°ru˘ibÀ
<
glm
::
dqu©
>::
vÆue
 ? 0 : 1;

281 #i‡
GLM_HAS_INITIALIZER_LISTS


283 
glm
::
qu©
 
A
{0, 1, 2, 3};

285 
°d
::
ve˘‹
<
glm
::
qu©
> 
B
{

291  
Eº‹
;

292 
	}
}

294 
	$ã°_size
()

296 
Eº‹
 = 0;

298 
Eº‹
 +16 =(
glm
::
qu©
) ? 0 : 1;

299 
Eº‹
 +32 =(
glm
::
dqu©
) ? 0 : 1;

300 
Eº‹
 +
glm
::
	`qu©
().
	`Àngth
() == 4 ? 0 : 1;

301 
Eº‹
 +
glm
::
	`dqu©
().
	`Àngth
() == 4 ? 0 : 1;

302 
Eº‹
 +
glm
::
qu©
::
	`Àngth
() == 4 ? 0 : 1;

303 
Eº‹
 +
glm
::
dqu©
::
	`Àngth
() == 4 ? 0 : 1;

305  
Eº‹
;

306 
	}
}

308 
	$maö
()

310 
Eº‹
 = 0;

312 
Eº‹
 +
	`ã°_qu©_˘r
();

313 
Eº‹
 +
	`ã°_qu©_mul_vec
();

314 
Eº‹
 +
	`ã°_qu©_two_axis_˘r
();

315 
Eº‹
 +
	`ã°_qu©_mul
();

316 
Eº‹
 +
	`ã°_qu©_¥ecisi⁄
();

317 
Eº‹
 +
	`ã°_qu©_ty≥
();

318 
Eº‹
 +
	`ã°_qu©_™gÀ
();

319 
Eº‹
 +
	`ã°_qu©_™gÀAxis
();

320 
Eº‹
 +
	`ã°_qu©_mix
();

321 
Eº‹
 +
	`ã°_qu©_n‹mÆize
();

322 
Eº‹
 +
	`ã°_qu©_euÀr
();

323 
Eº‹
 +
	`ã°_qu©_¶îp
();

324 
Eº‹
 +
	`ã°_size
();

326  
Eº‹
;

327 
	}
}

	@glm/test/gtc/gtc_random.cpp

1 
	~<glm/gtc/øndom.hµ
>

2 
	~<glm/gtc/ïsû⁄.hµ
>

3 #i‡
GLM_LANG
 & 
GLM_LANG_CXX0X_FLAG


4 
	~<¨øy
>

7 
	$ã°_löórR™d
()

9 
Eº‹
 = 0;

11 
glm
::
öt32
 c⁄° 
Mö
 = 16;

12 
glm
::
öt32
 c⁄° 
Max
 = 32;

15 
glm
::
u8vec2
 
	`AMö
(
°d
::
numîic_limôs
<glm::
u8
>::
	`max
());

16 
glm
::
u8vec2
 
	`AMax
(
°d
::
numîic_limôs
<glm::
u8
>::
	`mö
());

18 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

20 
glm
::
u8vec2
 
A
 = glm::
	`löórR™d
(glm::
	`u8vec2
(
Mö
), glm::u8vec2(
Max
));

21 
AMö
 = 
glm
::
	`mö
(AMö, 
A
);

22 
AMax
 = 
glm
::
	`max
(AMax, 
A
);

24 if(!
glm
::
	`Æl
(glm::
	`ÀssTh™EquÆ
(
A
, glm::
	`u8vec2
(
Max
))))

25 ++
Eº‹
;

26 if(!
glm
::
	`Æl
(glm::
	`gª©îTh™EquÆ
(
A
, glm::
	`u8vec2
(
Mö
))))

27 ++
Eº‹
;

28 
	`as£π
(!
Eº‹
);

31 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
AMö
, glm::
	`u8vec2
(
Mö
))) ? 0 : 1;

32 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
AMax
, glm::
	`u8vec2
(
Max
))) ? 0 : 1;

33 
	`as£π
(!
Eº‹
);

36 
glm
::
u16vec2
 
	`BMö
(
°d
::
numîic_limôs
<glm::
u16
>::
	`max
());

37 
glm
::
u16vec2
 
	`BMax
(
°d
::
numîic_limôs
<glm::
u16
>::
	`mö
());

39 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

41 
glm
::
u16vec2
 
B
 = glm::
	`löórR™d
(glm::
	`u16vec2
(
Mö
), glm::u16vec2(
Max
));

42 
BMö
 = 
glm
::
	`mö
(BMö, 
B
);

43 
BMax
 = 
glm
::
	`max
(BMax, 
B
);

45 if(!
glm
::
	`Æl
(glm::
	`ÀssTh™EquÆ
(
B
, glm::
	`u16vec2
(
Max
))))

46 ++
Eº‹
;

47 if(!
glm
::
	`Æl
(glm::
	`gª©îTh™EquÆ
(
B
, glm::
	`u16vec2
(
Mö
))))

48 ++
Eº‹
;

49 
	`as£π
(!
Eº‹
);

52 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
BMö
, glm::
	`u16vec2
(
Mö
))) ? 0 : 1;

53 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
BMax
, glm::
	`u16vec2
(
Max
))) ? 0 : 1;

54 
	`as£π
(!
Eº‹
);

57 
glm
::
u32vec2
 
	`CMö
(
°d
::
numîic_limôs
<glm::
u32
>::
	`max
());

58 
glm
::
u32vec2
 
	`CMax
(
°d
::
numîic_limôs
<glm::
u32
>::
	`mö
());

60 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

62 
glm
::
u32vec2
 
C
 = glm::
	`löórR™d
(glm::
	`u32vec2
(
Mö
), glm::u32vec2(
Max
));

63 
CMö
 = 
glm
::
	`mö
(CMö, 
C
);

64 
CMax
 = 
glm
::
	`max
(CMax, 
C
);

66 if(!
glm
::
	`Æl
(glm::
	`ÀssTh™EquÆ
(
C
, glm::
	`u32vec2
(
Max
))))

67 ++
Eº‹
;

68 if(!
glm
::
	`Æl
(glm::
	`gª©îTh™EquÆ
(
C
, glm::
	`u32vec2
(
Mö
))))

69 ++
Eº‹
;

70 
	`as£π
(!
Eº‹
);

73 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
CMö
, glm::
	`u32vec2
(
Mö
))) ? 0 : 1;

74 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
CMax
, glm::
	`u32vec2
(
Max
))) ? 0 : 1;

75 
	`as£π
(!
Eº‹
);

78 
glm
::
u64vec2
 
	`DMö
(
°d
::
numîic_limôs
<glm::
u64
>::
	`max
());

79 
glm
::
u64vec2
 
	`DMax
(
°d
::
numîic_limôs
<glm::
u64
>::
	`mö
());

81 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

83 
glm
::
u64vec2
 
D
 = glm::
	`löórR™d
(glm::
	`u64vec2
(
Mö
), glm::u64vec2(
Max
));

84 
DMö
 = 
glm
::
	`mö
(DMö, 
D
);

85 
DMax
 = 
glm
::
	`max
(DMax, 
D
);

87 if(!
glm
::
	`Æl
(glm::
	`ÀssTh™EquÆ
(
D
, glm::
	`u64vec2
(
Max
))))

88 ++
Eº‹
;

89 if(!
glm
::
	`Æl
(glm::
	`gª©îTh™EquÆ
(
D
, glm::
	`u64vec2
(
Mö
))))

90 ++
Eº‹
;

91 
	`as£π
(!
Eº‹
);

94 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
DMö
, glm::
	`u64vec2
(
Mö
))) ? 0 : 1;

95 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
DMax
, glm::
	`u64vec2
(
Max
))) ? 0 : 1;

96 
	`as£π
(!
Eº‹
);

101 
glm
::
i8vec2
 
	`AMö
(
°d
::
numîic_limôs
<glm::
i8
>::
	`max
());

102 
glm
::
i8vec2
 
	`AMax
(
°d
::
numîic_limôs
<glm::
i8
>::
	`mö
());

104 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

106 
glm
::
i8vec2
 
A
 = glm::
	`löórR™d
(glm::
	`i8vec2
(
Mö
), glm::i8vec2(
Max
));

107 
AMö
 = 
glm
::
	`mö
(AMö, 
A
);

108 
AMax
 = 
glm
::
	`max
(AMax, 
A
);

110 if(!
glm
::
	`Æl
(glm::
	`ÀssTh™EquÆ
(
A
, glm::
	`i8vec2
(
Max
))))

111 ++
Eº‹
;

112 if(!
glm
::
	`Æl
(glm::
	`gª©îTh™EquÆ
(
A
, glm::
	`i8vec2
(
Mö
))))

113 ++
Eº‹
;

114 
	`as£π
(!
Eº‹
);

117 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
AMö
, glm::
	`i8vec2
(
Mö
))) ? 0 : 1;

118 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
AMax
, glm::
	`i8vec2
(
Max
))) ? 0 : 1;

119 
	`as£π
(!
Eº‹
);

122 
glm
::
i16vec2
 
	`BMö
(
°d
::
numîic_limôs
<glm::
i16
>::
	`max
());

123 
glm
::
i16vec2
 
	`BMax
(
°d
::
numîic_limôs
<glm::
i16
>::
	`mö
());

125 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

127 
glm
::
i16vec2
 
B
 = glm::
	`löórR™d
(glm::
	`i16vec2
(
Mö
), glm::i16vec2(
Max
));

128 
BMö
 = 
glm
::
	`mö
(BMö, 
B
);

129 
BMax
 = 
glm
::
	`max
(BMax, 
B
);

131 if(!
glm
::
	`Æl
(glm::
	`ÀssTh™EquÆ
(
B
, glm::
	`i16vec2
(
Max
))))

132 ++
Eº‹
;

133 if(!
glm
::
	`Æl
(glm::
	`gª©îTh™EquÆ
(
B
, glm::
	`i16vec2
(
Mö
))))

134 ++
Eº‹
;

135 
	`as£π
(!
Eº‹
);

138 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
BMö
, glm::
	`i16vec2
(
Mö
))) ? 0 : 1;

139 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
BMax
, glm::
	`i16vec2
(
Max
))) ? 0 : 1;

140 
	`as£π
(!
Eº‹
);

143 
glm
::
i32vec2
 
	`CMö
(
°d
::
numîic_limôs
<glm::
i32
>::
	`max
());

144 
glm
::
i32vec2
 
	`CMax
(
°d
::
numîic_limôs
<glm::
i32
>::
	`mö
());

146 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

148 
glm
::
i32vec2
 
C
 = glm::
	`löórR™d
(glm::
	`i32vec2
(
Mö
), glm::i32vec2(
Max
));

149 
CMö
 = 
glm
::
	`mö
(CMö, 
C
);

150 
CMax
 = 
glm
::
	`max
(CMax, 
C
);

152 if(!
glm
::
	`Æl
(glm::
	`ÀssTh™EquÆ
(
C
, glm::
	`i32vec2
(
Max
))))

153 ++
Eº‹
;

154 if(!
glm
::
	`Æl
(glm::
	`gª©îTh™EquÆ
(
C
, glm::
	`i32vec2
(
Mö
))))

155 ++
Eº‹
;

156 
	`as£π
(!
Eº‹
);

159 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
CMö
, glm::
	`i32vec2
(
Mö
))) ? 0 : 1;

160 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
CMax
, glm::
	`i32vec2
(
Max
))) ? 0 : 1;

161 
	`as£π
(!
Eº‹
);

164 
glm
::
i64vec2
 
	`DMö
(
°d
::
numîic_limôs
<glm::
i64
>::
	`max
());

165 
glm
::
i64vec2
 
	`DMax
(
°d
::
numîic_limôs
<glm::
i64
>::
	`mö
());

167 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

169 
glm
::
i64vec2
 
D
 = glm::
	`löórR™d
(glm::
	`i64vec2
(
Mö
), glm::i64vec2(
Max
));

170 
DMö
 = 
glm
::
	`mö
(DMö, 
D
);

171 
DMax
 = 
glm
::
	`max
(DMax, 
D
);

173 if(!
glm
::
	`Æl
(glm::
	`ÀssTh™EquÆ
(
D
, glm::
	`i64vec2
(
Max
))))

174 ++
Eº‹
;

175 if(!
glm
::
	`Æl
(glm::
	`gª©îTh™EquÆ
(
D
, glm::
	`i64vec2
(
Mö
))))

176 ++
Eº‹
;

177 
	`as£π
(!
Eº‹
);

180 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
DMö
, glm::
	`i64vec2
(
Mö
))) ? 0 : 1;

181 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
DMax
, glm::
	`i64vec2
(
Max
))) ? 0 : 1;

182 
	`as£π
(!
Eº‹
);

186 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

188 
glm
::
f32vec2
 c⁄° 
	`A
(glm::
	`löórR™d
(glm::
	`f32vec2
(
°©ic_ˇ°
<>(
Mö
)), glm::f32vec2(°©ic_ˇ°<>(
Max
))));

189 if(!
glm
::
	`Æl
(glm::
	`ÀssTh™EquÆ
(
A
, glm::
	`f32vec2
(
°©ic_ˇ°
<>(
Max
)))))

190 ++
Eº‹
;

191 if(!
glm
::
	`Æl
(glm::
	`gª©îTh™EquÆ
(
A
, glm::
	`f32vec2
(
°©ic_ˇ°
<>(
Mö
)))))

192 ++
Eº‹
;

194 
glm
::
f64vec2
 c⁄° 
	`B
(glm::
	`löórR™d
(glm::
	`f64vec2
(
Mö
), glm::f64vec2(
Max
)));

195 if(!
glm
::
	`Æl
(glm::
	`ÀssTh™EquÆ
(
B
, glm::
	`f64vec2
(
Max
))))

196 ++
Eº‹
;

197 if(!
glm
::
	`Æl
(glm::
	`gª©îTh™EquÆ
(
B
, glm::
	`f64vec2
(
Mö
))))

198 ++
Eº‹
;

199 
	`as£π
(!
Eº‹
);

203 
Resu…Flﬂt
 = 0.0f;

204 
Resu…DoubÀ
 = 0.0f;

205 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

207 
Resu…Flﬂt
 +
glm
::
	`löórR™d
(-1.0f, 1.0f);

208 
Resu…DoubÀ
 +
glm
::
	`löórR™d
(-1.0, 1.0);

211 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
Resu…Flﬂt
, 0.0f, 0.0001f);

212 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
Resu…DoubÀ
, 0.0, 0.0001);

213 
	`as£π
(!
Eº‹
);

216  
Eº‹
;

217 
	}
}

219 
	$ã°_cúcuœrR™d
()

221 
Eº‹
 = 0;

224 
°d
::
size_t
 
Max
 = 100000;

225 
Resu…Flﬂt
 = 0.0f;

226 
Resu…DoubÀ
 = 0.0f;

227 
Radius
 = 2.0f;

229 
°d
::
size_t
 
i
 = 0; i < 
Max
; ++i)

231 
Resu…Flﬂt
 +
glm
::
	`Àngth
(glm::
	`cúcuœrR™d
(1.0f));

232 
Resu…DoubÀ
 +
glm
::
	`Àngth
(glm::
	`cúcuœrR™d
(
Radius
));

235 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
Resu…Flﬂt
, (
Max
), 0.01f) ? 0 : 1;

236 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
Resu…DoubÀ
, (
Max
Ë* (
Radius
), 0.01) ? 0 : 1;

237 
	`as£π
(!
Eº‹
);

240  
Eº‹
;

241 
	}
}

243 
	$ã°_•hîiˇlR™d
()

245 
Eº‹
 = 0;

248 
°d
::
size_t
 
Max
 = 100000;

249 
Resu…FlﬂtA
 = 0.0f;

250 
Resu…FlﬂtB
 = 0.0f;

251 
Resu…FlﬂtC
 = 0.0f;

252 
Resu…DoubÀA
 = 0.0f;

253 
Resu…DoubÀB
 = 0.0f;

254 
Resu…DoubÀC
 = 0.0f;

256 
°d
::
size_t
 
i
 = 0; i < 
Max
; ++i)

258 
Resu…FlﬂtA
 +
glm
::
	`Àngth
(glm::
	`•hîiˇlR™d
(1.0f));

259 
Resu…DoubÀA
 +
glm
::
	`Àngth
(glm::
	`•hîiˇlR™d
(1.0));

260 
Resu…FlﬂtB
 +
glm
::
	`Àngth
(glm::
	`•hîiˇlR™d
(2.0f));

261 
Resu…DoubÀB
 +
glm
::
	`Àngth
(glm::
	`•hîiˇlR™d
(2.0));

262 
Resu…FlﬂtC
 +
glm
::
	`Àngth
(glm::
	`•hîiˇlR™d
(3.0f));

263 
Resu…DoubÀC
 +
glm
::
	`Àngth
(glm::
	`•hîiˇlR™d
(3.0));

266 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
Resu…FlﬂtA
, (
Max
), 0.01f) ? 0 : 1;

267 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
Resu…DoubÀA
, (
Max
), 0.0001) ? 0 : 1;

268 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
Resu…FlﬂtB
, (
Max
 * 2), 0.01f) ? 0 : 1;

269 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
Resu…DoubÀB
, (
Max
 * 2), 0.0001) ? 0 : 1;

270 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
Resu…FlﬂtC
, (
Max
 * 3), 0.01f) ? 0 : 1;

271 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
Resu…DoubÀC
, (
Max
 * 3), 0.01) ? 0 : 1;

272 
	`as£π
(!
Eº‹
);

275  
Eº‹
;

276 
	}
}

278 
	$ã°_diskR™d
()

280 
Eº‹
 = 0;

283 
Resu…Flﬂt
 = 0.0f;

284 
Resu…DoubÀ
 = 0.0f;

286 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

288 
Resu…Flﬂt
 +
glm
::
	`Àngth
(glm::
	`diskR™d
(2.0f));

289 
Resu…DoubÀ
 +
glm
::
	`Àngth
(glm::
	`diskR™d
(2.0));

292 
Eº‹
 +
Resu…Flﬂt
 < 200000.f ? 0 : 1;

293 
Eº‹
 +
Resu…DoubÀ
 < 200000.0 ? 0 : 1;

294 
	`as£π
(!
Eº‹
);

297  
Eº‹
;

298 
	}
}

300 
	$ã°_bÆlR™d
()

302 
Eº‹
 = 0;

305 
Resu…Flﬂt
 = 0.0f;

306 
Resu…DoubÀ
 = 0.0f;

308 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

310 
Resu…Flﬂt
 +
glm
::
	`Àngth
(glm::
	`bÆlR™d
(2.0f));

311 
Resu…DoubÀ
 +
glm
::
	`Àngth
(glm::
	`bÆlR™d
(2.0));

314 
Eº‹
 +
Resu…Flﬂt
 < 200000.f ? 0 : 1;

315 
Eº‹
 +
Resu…DoubÀ
 < 200000.0 ? 0 : 1;

316 
	`as£π
(!
Eº‹
);

319  
Eº‹
;

320 
	}
}

362 
	$maö
()

364 
Eº‹
 = 0;

366 
Eº‹
 +
	`ã°_löórR™d
();

367 
Eº‹
 +
	`ã°_cúcuœrR™d
();

368 
Eº‹
 +
	`ã°_•hîiˇlR™d
();

369 
Eº‹
 +
	`ã°_diskR™d
();

370 
Eº‹
 +
	`ã°_bÆlR™d
();

376  
Eº‹
;

377 
	}
}

	@glm/test/gtc/gtc_reciprocal.cpp

1 
	~<glm/gtc/ªcùroˇl.hµ
>

2 
	~<˘ime
>

4 
	$maö
()

7 
	}
}

	@glm/test/gtc/gtc_round.cpp

1 
	~<glm/gtc/round.hµ
>

2 
	~<glm/gtc/ty≥_¥ecisi⁄.hµ
>

3 
	~<glm/gtc/vec1.hµ
>

4 
	~<glm/gtc/ïsû⁄.hµ
>

5 
	~<ve˘‹
>

6 
	~<˘ime
>

7 
	~<c°dio
>

9 
«me•a˚
 
	gisPowîOfTwo


11 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

12 
	sty≥


14 
gíTy≥
 
	gVÆue
;

15 
boﬁ
 
	gRëu∫
;

18 
ã°_öt16
()

20 
	gty≥
<
	gglm
::
öt16
> c⁄° 
D©a
[] =

22 {0x0001, 
åue
},

23 {0x0002, 
åue
},

24 {0x0004, 
åue
},

25 {0x0080, 
åue
},

26 {0x0000, 
åue
},

27 {0x0003, 
Ál£
}

30 
Eº‹
(0);

32 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<
glm
::
öt16
>); 
	gi
 <Ç; ++i)

34 
boﬁ
 
	gResu…
 = 
glm
::
isPowîOfTwo
(
D©a
[
i
].
VÆue
);

35 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

38  
	gEº‹
;

41 
ã°_uöt16
()

43 
	gty≥
<
	gglm
::
uöt16
> c⁄° 
D©a
[] =

45 {0x0001, 
åue
},

46 {0x0002, 
åue
},

47 {0x0004, 
åue
},

48 {0x0000, 
åue
},

49 {0x0000, 
åue
},

50 {0x0003, 
Ál£
}

53 
Eº‹
(0);

55 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<
glm
::
uöt16
>); 
	gi
 <Ç; ++i)

57 
boﬁ
 
	gResu…
 = 
glm
::
isPowîOfTwo
(
D©a
[
i
].
VÆue
);

58 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

61  
	gEº‹
;

64 
ã°_öt32
()

66 
	gty≥
<> c⁄° 
	gD©a
[] =

68 {0x00000001, 
åue
},

69 {0x00000002, 
åue
},

70 {0x00000004, 
åue
},

71 {0x0000000f, 
Ál£
},

72 {0x00000000, 
åue
},

73 {0x00000003, 
Ál£
}

76 
Eº‹
(0);

78 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<>); 
	gi
 <Ç; ++i)

80 
boﬁ
 
	gResu…
 = 
glm
::
isPowîOfTwo
(
D©a
[
i
].
VÆue
);

81 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

84 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<>); 
	gi
 <Ç; ++i)

86 
	gglm
::
bvec1
 
Resu…
 = 
glm
::
isPowîOfTwo
(glm::
ivec1
(
D©a
[
i
].
VÆue
));

87 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(glm::
bvec1
(
D©a
[
i
].
Rëu∫
), 
Resu…
)) ? 0 : 1;

90 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<>); 
	gi
 <Ç; ++i)

92 
	gglm
::
bvec2
 
Resu…
 = 
glm
::
isPowîOfTwo
(glm::
ivec2
(
D©a
[
i
].
VÆue
));

93 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(glm::
bvec2
(
D©a
[
i
].
Rëu∫
), 
Resu…
)) ? 0 : 1;

96 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<>); 
	gi
 <Ç; ++i)

98 
	gglm
::
bvec3
 
Resu…
 = 
glm
::
isPowîOfTwo
(glm::
ivec3
(
D©a
[
i
].
VÆue
));

99 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(glm::
bvec3
(
D©a
[
i
].
Rëu∫
), 
Resu…
)) ? 0 : 1;

102 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<>); 
	gi
 <Ç; ++i)

104 
	gglm
::
bvec4
 
Resu…
 = 
glm
::
isPowîOfTwo
(glm::
ivec4
(
D©a
[
i
].
VÆue
));

105 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(glm::
bvec4
(
D©a
[
i
].
Rëu∫
), 
Resu…
)) ? 0 : 1;

108  
	gEº‹
;

111 
ã°_uöt32
()

113 
	gty≥
<
	gglm
::
uöt
> c⁄° 
D©a
[] =

115 {0x00000001, 
åue
},

116 {0x00000002, 
åue
},

117 {0x00000004, 
åue
},

118 {0x80000000, 
åue
},

119 {0x00000000, 
åue
},

120 {0x00000003, 
Ál£
}

123 
Eº‹
(0);

125 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<
glm
::
uöt
>); 
	gi
 <Ç; ++i)

127 
boﬁ
 
	gResu…
 = 
glm
::
isPowîOfTwo
(
D©a
[
i
].
VÆue
);

128 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

131  
	gEº‹
;

134 
ã°
()

136 
Eº‹
(0);

138 
	gEº‹
 +
ã°_öt16
();

139 
	gEº‹
 +
ã°_uöt16
();

140 
	gEº‹
 +
ã°_öt32
();

141 
	gEº‹
 +
ã°_uöt32
();

143  
	gEº‹
;

147 
«me•a˚
 
	g˚ûPowîOfTwo_adv™˚d


149 
	gãm∂©e
 <
ty≥«me
 
	ggíIUTy≥
>

150 
GLM_FUNC_QUALIFIER
 
gíIUTy≥
 
highe°BôVÆue
(gíIUTy≥ 
VÆue
)

152 
gíIUTy≥
 
	gtmp
 = 
VÆue
;

153 
gíIUTy≥
 
	gªsu…
 = genIUType(0);

154 
	gtmp
)

156 
	gªsu…
 = (
tmp
 & (~tmp + 1));

157 
	gtmp
 &~
ªsu…
;

159  
	gªsu…
;

162 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

163 
GLM_FUNC_QUALIFIER
 
gíTy≥
 
˚ûPowîOfTwo_lo›
(gíTy≥ 
vÆue
)

165  
	gglm
::
isPowîOfTwo
(
vÆue
Ë? vÆuê: 
highe°BôVÆue
(value) << 1;

168 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

169 
	sty≥


171 
gíTy≥
 
	gVÆue
;

172 
gíTy≥
 
	gRëu∫
;

175 
ã°_öt32
()

177 
	gty≥
<
	gglm
::
öt32
> c⁄° 
D©a
[] =

193 
Eº‹
(0);

195 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<
glm
::
öt32
>); 
	gi
 <Ç; ++i)

197 
	gglm
::
öt32
 
Resu…
 = 
glm
::
˚ûPowîOfTwo
(
D©a
[
i
].
VÆue
);

198 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

201  
	gEº‹
;

204 
ã°_uöt32
()

206 
	gty≥
<
	gglm
::
uöt32
> c⁄° 
D©a
[] =

220 
Eº‹
(0);

222 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<
glm
::
uöt32
>); 
	gi
 <Ç; ++i)

224 
	gglm
::
uöt32
 
Resu…
 = 
glm
::
˚ûPowîOfTwo
(
D©a
[
i
].
VÆue
);

225 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

228  
	gEº‹
;

231 
≥rf
()

233 
Eº‹
(0);

235 
	g°d
::
ve˘‹
<
glm
::
uöt
> 
v
;

236 
	gv
.
ªsize
(100000000);

238 
	g°d
::
˛ock_t
 
Time°ømp0
 = 
°d
::
˛ock
();

240 
	gglm
::
uöt32
 
i
 = 0, 
	gn
 = 
°©ic_ˇ°
<
glm
::
uöt
>(
v
.
size
()); 
	gi
 <Ç; ++i)

241 
	gv
[
i
] = 
˚ûPowîOfTwo_lo›
(i);

243 
	g°d
::
˛ock_t
 
Time°ømp1
 = 
°d
::
˛ock
();

245 
	gglm
::
uöt32
 
i
 = 0, 
	gn
 = 
°©ic_ˇ°
<
glm
::
uöt
>(
v
.
size
()); 
	gi
 <Ç; ++i)

246 
	gv
[
i
] = 
glm
::
˚ûPowîOfTwo
(i);

248 
	g°d
::
˛ock_t
 
Time°ømp2
 = 
°d
::
˛ock
();

250 
	g°d
::
¥ötf
("˚ûPowîOfTwo_lo›: %d clocks\n", 
°©ic_ˇ°
<>(
Time°ømp1
 - 
Time°ømp0
));

251 
	g°d
::
¥ötf
("glm::˚ûPowîOfTwo: %d clocks\n", 
°©ic_ˇ°
<>(
Time°ømp2
 - 
Time°ømp1
));

253  
	gEº‹
;

256 
ã°
()

258 
Eº‹
(0);

260 
	gEº‹
 +
ã°_öt32
();

261 
	gEº‹
 +
ã°_uöt32
();

263  
	gEº‹
;

267 
«me•a˚
 
	groundPowîOfTwo


269 
ã°
()

271 
	gEº‹
 = 0;

273 
	gglm
::
uöt32
 c⁄° 
A
 = 
glm
::
roundPowîOfTwo
(7u);

274 
	gEº‹
 +
A
 == 8u ? 0 : 1;

276 
	gglm
::
uöt32
 c⁄° 
B
 = 
glm
::
roundPowîOfTwo
(15u);

277 
	gEº‹
 +
B
 == 16u ? 0 : 1;

279 
	gglm
::
uöt32
 c⁄° 
C
 = 
glm
::
roundPowîOfTwo
(31u);

280 
	gEº‹
 +
C
 == 32u ? 0 : 1;

282 
	gglm
::
uöt32
 c⁄° 
D
 = 
glm
::
roundPowîOfTwo
(9u);

283 
	gEº‹
 +
D
 == 8u ? 0 : 1;

285 
	gglm
::
uöt32
 c⁄° 
E
 = 
glm
::
roundPowîOfTwo
(17u);

286 
	gEº‹
 +
E
 == 16u ? 0 : 1;

288 
	gglm
::
uöt32
 c⁄° 
F
 = 
glm
::
roundPowîOfTwo
(33u);

289 
	gEº‹
 +
F
 == 32u ? 0 : 1;

291  
	gEº‹
;

295 
«me•a˚
 
	gÊo‹PowîOfTwo


297 
ã°
()

299 
	gEº‹
 = 0;

301 
	gglm
::
uöt32
 c⁄° 
A
 = 
glm
::
Êo‹PowîOfTwo
(7u);

302 
	gEº‹
 +
A
 == 4u ? 0 : 1;

304 
	gglm
::
uöt32
 c⁄° 
B
 = 
glm
::
Êo‹PowîOfTwo
(15u);

305 
	gEº‹
 +
B
 == 8u ? 0 : 1;

307 
	gglm
::
uöt32
 c⁄° 
C
 = 
glm
::
Êo‹PowîOfTwo
(31u);

308 
	gEº‹
 +
C
 == 16u ? 0 : 1;

310  
	gEº‹
;

314 
«me•a˚
 
	g˚ûPowîOfTwo


316 
ã°
()

318 
	gEº‹
 = 0;

320 
	gglm
::
uöt32
 c⁄° 
A
 = 
glm
::
˚ûPowîOfTwo
(7u);

321 
	gEº‹
 +
A
 == 8u ? 0 : 1;

323 
	gglm
::
uöt32
 c⁄° 
B
 = 
glm
::
˚ûPowîOfTwo
(15u);

324 
	gEº‹
 +
B
 == 16u ? 0 : 1;

326 
	gglm
::
uöt32
 c⁄° 
C
 = 
glm
::
˚ûPowîOfTwo
(31u);

327 
	gEº‹
 +
C
 == 32u ? 0 : 1;

329  
	gEº‹
;

333 
«me•a˚
 
	gÊo‹Mu…ùÀ


335 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

336 
	sty≥


338 
gíTy≥
 
	gSour˚
;

339 
gíTy≥
 
	gMu…ùÀ
;

340 
gíTy≥
 
	gRëu∫
;

341 
gíTy≥
 
	gEpsû⁄
;

344 
ã°_Êﬂt
()

346 
	gty≥
<
	gglm
::
Êﬂt64
> c⁄° 
D©a
[] =

352 
Eº‹
(0);

354 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<
glm
::
Êﬂt64
>); 
	gi
 <Ç; ++i)

356 
	gglm
::
Êﬂt64
 
Resu…
 = 
glm
::
Êo‹Mu…ùÀ
(
D©a
[
i
].
Sour˚
, D©a[i].
Mu…ùÀ
);

357 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
D©a
[
i
].
Rëu∫
, 
Resu…
, D©a[i].
Epsû⁄
) ? 0 : 1;

360  
	gEº‹
;

363 
ã°
()

365 
Eº‹
(0);

367 
	gEº‹
 +
ã°_Êﬂt
();

369  
	gEº‹
;

373 
«me•a˚
 
	g˚ûMu…ùÀ


375 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

376 
	sty≥


378 
gíTy≥
 
	gSour˚
;

379 
gíTy≥
 
	gMu…ùÀ
;

380 
gíTy≥
 
	gRëu∫
;

381 
gíTy≥
 
	gEpsû⁄
;

384 
ã°_Êﬂt
()

386 
	gty≥
<
	gglm
::
Êﬂt64
> c⁄° 
D©a
[] =

392 
Eº‹
(0);

394 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<
glm
::
Êﬂt64
>); 
	gi
 <Ç; ++i)

396 
	gglm
::
Êﬂt64
 
Resu…
 = 
glm
::
˚ûMu…ùÀ
(
D©a
[
i
].
Sour˚
, D©a[i].
Mu…ùÀ
);

397 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
D©a
[
i
].
Rëu∫
, 
Resu…
, D©a[i].
Epsû⁄
) ? 0 : 1;

400  
	gEº‹
;

403 
ã°_öt
()

405 
	gty≥
<> c⁄° 
	gD©a
[] =

418 
Eº‹
(0);

420 
	g°d
::
size_t
 
i
 = 0, 
	gn
 = (
D©a
Ë/ (
ty≥
<>); 
	gi
 <Ç; ++i)

422 
	gResu…
 = 
glm
::
˚ûMu…ùÀ
(
D©a
[
i
].
Sour˚
, D©a[i].
Mu…ùÀ
);

423 
	gEº‹
 +
D©a
[
i
].
Rëu∫
 =
Resu…
 ? 0 : 1;

426  
	gEº‹
;

429 
ã°
()

431 
Eº‹
(0);

433 
	gEº‹
 +
ã°_öt
();

434 
	gEº‹
 +
ã°_Êﬂt
();

436  
	gEº‹
;

440 
	$maö
()

442 
	`Eº‹
(0);

444 
Eº‹
 +
isPowîOfTwo
::
	`ã°
();

445 
Eº‹
 +
Êo‹PowîOfTwo
::
	`ã°
();

446 
Eº‹
 +
roundPowîOfTwo
::
	`ã°
();

447 
Eº‹
 +
˚ûPowîOfTwo
::
	`ã°
();

448 
Eº‹
 +
˚ûPowîOfTwo_adv™˚d
::
	`ã°
();

450 #ifde‡
NDEBUG


451 
Eº‹
 +
˚ûPowîOfTwo_adv™˚d
::
	`≥rf
();

454 
Eº‹
 +
Êo‹Mu…ùÀ
::
	`ã°
();

455 
Eº‹
 +
˚ûMu…ùÀ
::
	`ã°
();

457  
Eº‹
;

458 
	}
}

	@glm/test/gtc/gtc_type_aligned.cpp

1 
	#GLM_FORCE_MESSAGES


	)

2 
	~<glm/glm.hµ
>

4 #i‡
GLM_HAS_ALIGNED_TYPE


5 
	~<glm/gtc/ty≥_Æig√d.hµ
>

7 
GLM_STATIC_ASSERT
(
glm
::
dëaû
::
is_Æig√d
<glm::
Æig√d_lowp
>::
vÆue
, "aligned_lowp isÇotáligned");

8 
GLM_STATIC_ASSERT
(
glm
::
dëaû
::
is_Æig√d
<glm::
Æig√d_mediump
>::
vÆue
, "aligned_mediump isÇotáligned");

9 
GLM_STATIC_ASSERT
(
glm
::
dëaû
::
is_Æig√d
<glm::
Æig√d_highp
>::
vÆue
, "aligned_highp isÇotáligned");

10 
GLM_STATIC_ASSERT
(!
glm
::
dëaû
::
is_Æig√d
<glm::
∑cked_highp
>::
vÆue
, "packed_highp isáligned");

11 
GLM_STATIC_ASSERT
(!
glm
::
dëaû
::
is_Æig√d
<glm::
∑cked_mediump
>::
vÆue
, "packed_mediump isáligned");

12 
GLM_STATIC_ASSERT
(!
glm
::
dëaû
::
is_Æig√d
<glm::
∑cked_lowp
>::
vÆue
, "packed_lowp isáligned");

14 
	smy_vec4_∑cked


16 
	mglm
::
uöt32
 
a
;

17 
	mglm
::
vec4
 
b
;

19 
GLM_STATIC_ASSERT
((
my_vec4_∑cked
Ë=(
glm
::
uöt32
Ë+ (glm::
vec4
), "glm::vec4Öacked isÇot correct");

21 
	smy_vec4_Æig√d


23 
	mglm
::
uöt32
 
a
;

24 
	mglm
::
Æig√d_vec4
 
b
;

26 
GLM_STATIC_ASSERT
((
my_vec4_Æig√d
Ë=(
glm
::
Æig√d_vec4
) * 2, "glm::vec4áligned isÇot correct");

28 
	smy_dvec4_∑cked


30 
	mglm
::
uöt64
 
a
;

31 
	mglm
::
dvec4
 
b
;

33 
GLM_STATIC_ASSERT
((
my_dvec4_∑cked
Ë=(
glm
::
uöt64
Ë+ (glm::
dvec4
), "glm::dvec4Öacked isÇot correct");

35 
	smy_dvec4_Æig√d


37 
	mglm
::
uöt64
 
a
;

38 
	mglm
::
Æig√d_dvec4
 
b
;

42 
	smy_ivec4_∑cked


44 
	mglm
::
uöt32
 
a
;

45 
	mglm
::
ivec4
 
b
;

47 
GLM_STATIC_ASSERT
((
my_ivec4_∑cked
Ë=(
glm
::
uöt32
Ë+ (glm::
ivec4
), "glm::ivec4Öacked isÇot correct");

49 
	smy_ivec4_Æig√d


51 
	mglm
::
uöt32
 
a
;

52 
	mglm
::
Æig√d_ivec4
 
b
;

54 
GLM_STATIC_ASSERT
((
my_ivec4_Æig√d
Ë=(
glm
::
Æig√d_ivec4
) * 2, "glm::ivec4áligned isÇot correct");

56 
	smy_u8vec4_∑cked


58 
	mglm
::
uöt32
 
a
;

59 
	mglm
::
u8vec4
 
b
;

61 
GLM_STATIC_ASSERT
((
my_u8vec4_∑cked
Ë=(
glm
::
uöt32
Ë+ (glm::
u8vec4
), "glm::u8vec4Öacked isÇot correct");

63 
	$ã°_c›y
()

65 
Eº‹
 = 0;

68 
glm
::
Æig√d_ivec4
 c⁄° 
	`a
(1, 2, 3, 4);

69 
glm
::
ivec4
 c⁄° 
	`u
(
a
);

71 
Eº‹
 +
a
.
x
 =
u
.x ? 0 : 1;

72 
Eº‹
 +
a
.
y
 =
u
.y ? 0 : 1;

73 
Eº‹
 +
a
.
z
 =
u
.z ? 0 : 1;

74 
Eº‹
 +
a
.
w
 =
u
.w ? 0 : 1;

78 
my_ivec4_Æig√d
 
a
;

79 
a
.
b
 = 
glm
::
	`ivec4
(1, 2, 3, 4);

81 
my_ivec4_∑cked
 
u
;

82 
u
.
b
 = 
a
.b;

84 
Eº‹
 +
a
.
b
.
x
 =
u
.b.x ? 0 : 1;

85 
Eº‹
 +
a
.
b
.
y
 =
u
.b.y ? 0 : 1;

86 
Eº‹
 +
a
.
b
.
z
 =
u
.b.z ? 0 : 1;

87 
Eº‹
 +
a
.
b
.
w
 =
u
.b.w ? 0 : 1;

90  
Eº‹
;

91 
	}
}

93 
	$maö
()

95 
Eº‹
 = 0;

97 
my_vec4_Æig√d
 
GNA
;

98 
my_dvec4_Æig√d
 
GNI
;

100 
°d
::
size_t
 
A0
 = (
my_dvec4_Æig√d
);

101 
°d
::
size_t
 
B0
 = (
my_dvec4_∑cked
);

102 
°d
::
size_t
 
C0
 = (
glm
::
Æig√d_dvec4
);

104 
°d
::
size_t
 
A1
 = (
my_vec4_Æig√d
);

105 
°d
::
size_t
 
B1
 = (
my_vec4_∑cked
);

106 
°d
::
size_t
 
C1
 = (
glm
::
Æig√d_vec4
);

108  
Eº‹
;

109 
	}
}

113 
	$maö
()

116 
	}
}

	@glm/test/gtc/gtc_type_precision.cpp

1 
	~<glm/gtc/ty≥_¥ecisi⁄.hµ
>

2 
	~<glm/gtc/qu©îni⁄.hµ
>

3 
	~<ve˘‹
>

4 #i‡
GLM_HAS_OPENMP


5 
	~<omp.h
>

8 
	$ã°_sˇœr_size
()

10 
	`Eº‹
(0);

11 
Eº‹
 +(
glm
::
öt8
) != 1;

12 
Eº‹
 +(
glm
::
öt16
) != 2;

13 
Eº‹
 +(
glm
::
öt32
) != 4;

14 
Eº‹
 +(
glm
::
öt64
) != 8;

15 
Eº‹
 +(
glm
::
uöt8
) != 1;

16 
Eº‹
 +(
glm
::
uöt16
) != 2;

17 
Eº‹
 +(
glm
::
uöt32
) != 4;

18 
Eº‹
 +(
glm
::
uöt64
) != 8;

19 
Eº‹
 +(
glm
::
Êﬂt32
) != 4;

20 
Eº‹
 +(
glm
::
Êﬂt64
) != 8;

22 
Eº‹
 +(
glm
::
lowp_öt8
) != 1;

23 
Eº‹
 +(
glm
::
lowp_öt16
) != 2;

24 
Eº‹
 +(
glm
::
lowp_öt32
) != 4;

25 
Eº‹
 +(
glm
::
lowp_öt64
) != 8;

26 
Eº‹
 +(
glm
::
lowp_uöt8
) != 1;

27 
Eº‹
 +(
glm
::
lowp_uöt16
) != 2;

28 
Eº‹
 +(
glm
::
lowp_uöt32
) != 4;

29 
Eº‹
 +(
glm
::
lowp_uöt64
) != 8;

30 
Eº‹
 +(
glm
::
lowp_Êﬂt32
) != 4;

31 
Eº‹
 +(
glm
::
lowp_Êﬂt64
) != 8;

33 
Eº‹
 +(
glm
::
mediump_öt8
) != 1;

34 
Eº‹
 +(
glm
::
mediump_öt16
) != 2;

35 
Eº‹
 +(
glm
::
mediump_öt32
) != 4;

36 
Eº‹
 +(
glm
::
mediump_öt64
) != 8;

37 
Eº‹
 +(
glm
::
mediump_uöt8
) != 1;

38 
Eº‹
 +(
glm
::
mediump_uöt16
) != 2;

39 
Eº‹
 +(
glm
::
mediump_uöt32
) != 4;

40 
Eº‹
 +(
glm
::
mediump_uöt64
) != 8;

41 
Eº‹
 +(
glm
::
mediump_Êﬂt32
) != 4;

42 
Eº‹
 +(
glm
::
mediump_Êﬂt64
) != 8;

44 
Eº‹
 +(
glm
::
highp_öt8
) != 1;

45 
Eº‹
 +(
glm
::
highp_öt16
) != 2;

46 
Eº‹
 +(
glm
::
highp_öt32
) != 4;

47 
Eº‹
 +(
glm
::
highp_öt64
) != 8;

48 
Eº‹
 +(
glm
::
highp_uöt8
) != 1;

49 
Eº‹
 +(
glm
::
highp_uöt16
) != 2;

50 
Eº‹
 +(
glm
::
highp_uöt32
) != 4;

51 
Eº‹
 +(
glm
::
highp_uöt64
) != 8;

52 
Eº‹
 +(
glm
::
highp_Êﬂt32
) != 4;

53 
Eº‹
 +(
glm
::
highp_Êﬂt64
) != 8;

54  
Eº‹
;

55 
	}
}

57 
	$ã°_fvec_size
()

59 
	`Eº‹
(0);

60 
Eº‹
 +(
glm
::
f32vec2
) != 8;

61 
Eº‹
 +(
glm
::
f32vec3
) != 12;

62 
Eº‹
 +(
glm
::
f32vec4
) != 16;

63 
Eº‹
 +(
glm
::
f64vec2
) != 16;

64 
Eº‹
 +(
glm
::
f64vec3
) != 24;

65 
Eº‹
 +(
glm
::
f64vec4
) != 32;

67 
Eº‹
 +(
glm
::
lowp_f32vec2
) != 8;

68 
Eº‹
 +(
glm
::
lowp_f32vec3
) != 12;

69 
Eº‹
 +(
glm
::
lowp_f32vec4
) != 16;

70 
Eº‹
 +(
glm
::
lowp_f64vec2
) != 16;

71 
Eº‹
 +(
glm
::
lowp_f64vec3
) != 24;

72 
Eº‹
 +(
glm
::
lowp_f64vec4
) != 32;

74 
Eº‹
 +(
glm
::
mediump_f32vec2
) != 8;

75 
Eº‹
 +(
glm
::
mediump_f32vec3
) != 12;

76 
Eº‹
 +(
glm
::
mediump_f32vec4
) != 16;

77 
Eº‹
 +(
glm
::
mediump_f64vec2
) != 16;

78 
Eº‹
 +(
glm
::
mediump_f64vec3
) != 24;

79 
Eº‹
 +(
glm
::
mediump_f64vec4
) != 32;

81 
Eº‹
 +(
glm
::
highp_f32vec2
) != 8;

82 
Eº‹
 +(
glm
::
highp_f32vec3
) != 12;

83 
Eº‹
 +(
glm
::
highp_f32vec4
) != 16;

84 
Eº‹
 +(
glm
::
highp_f64vec2
) != 16;

85 
Eº‹
 +(
glm
::
highp_f64vec3
) != 24;

86 
Eº‹
 +(
glm
::
highp_f64vec4
) != 32;

87  
Eº‹
;

88 
	}
}

90 
	$ã°_fvec_¥ecisi⁄
()

92 
	`Eº‹
(0);

106 
glm
::
f32vec2
 
v1
;

107 
glm
::
lowp_f32vec2
 
	`v2
(
v1
);

108 
glm
::
mediump_f32vec2
 
	`v3
(
v1
);

109 
glm
::
highp_f32vec2
 
	`v4
(
v1
);

111 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f32vec2
(
v2
))) ? 0 : 1;

112 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f32vec2
(
v3
))) ? 0 : 1;

113 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f32vec2
(
v4
))) ? 0 : 1;

117 
glm
::
f32vec3
 
v1
;

118 
glm
::
lowp_f32vec3
 
	`v2
(
v1
);

119 
glm
::
mediump_f32vec3
 
	`v3
(
v1
);

120 
glm
::
highp_f32vec3
 
	`v4
(
v1
);

122 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f32vec3
(
v2
))) ? 0 : 1;

123 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f32vec3
(
v3
))) ? 0 : 1;

124 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f32vec3
(
v4
))) ? 0 : 1;

128 
glm
::
f32vec4
 
v1
;

129 
glm
::
lowp_f32vec4
 
	`v2
(
v1
);

130 
glm
::
mediump_f32vec4
 
	`v3
(
v1
);

131 
glm
::
highp_f32vec4
 
	`v4
(
v1
);

133 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f32vec4
(
v2
))) ? 0 : 1;

134 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f32vec4
(
v3
))) ? 0 : 1;

135 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f32vec4
(
v4
))) ? 0 : 1;

138  
Eº‹
;

139 
	}
}

141 
	$ã°_dvec_¥ecisi⁄
()

143 
	`Eº‹
(0);

146 
glm
::
f64vec2
 
v1
;

147 
glm
::
lowp_f64vec2
 
	`v2
(
v1
);

148 
glm
::
mediump_f64vec2
 
	`v3
(
v1
);

149 
glm
::
highp_f64vec2
 
	`v4
(
v1
);

151 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f64vec2
(
v2
))) ? 0 : 1;

152 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f64vec2
(
v3
))) ? 0 : 1;

153 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f64vec2
(
v4
))) ? 0 : 1;

157 
glm
::
f64vec3
 
v1
;

158 
glm
::
lowp_f64vec3
 
	`v2
(
v1
);

159 
glm
::
mediump_f64vec3
 
	`v3
(
v1
);

160 
glm
::
highp_f64vec3
 
	`v4
(
v1
);

162 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f64vec3
(
v2
))) ? 0 : 1;

163 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f64vec3
(
v3
))) ? 0 : 1;

164 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f64vec3
(
v4
))) ? 0 : 1;

168 
glm
::
f64vec4
 
v1
;

169 
glm
::
lowp_f64vec4
 
	`v2
(
v1
);

170 
glm
::
mediump_f64vec4
 
	`v3
(
v1
);

171 
glm
::
highp_f64vec4
 
	`v4
(
v1
);

173 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f64vec4
(
v2
))) ? 0 : 1;

174 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f64vec4
(
v3
))) ? 0 : 1;

175 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`f64vec4
(
v4
))) ? 0 : 1;

178  
Eº‹
;

179 
	}
}

181 
	$ã°_ivec_size
()

183 
	`Eº‹
(0);

184 
Eº‹
 +(
glm
::
i8vec2
) != 2;

185 
Eº‹
 +(
glm
::
i8vec3
) != 3;

186 
Eº‹
 +(
glm
::
i8vec4
) != 4;

187 
Eº‹
 +(
glm
::
i16vec2
) != 4;

188 
Eº‹
 +(
glm
::
i16vec3
) != 6;

189 
Eº‹
 +(
glm
::
i16vec4
) != 8;

190 
Eº‹
 +(
glm
::
i32vec2
) != 8;

191 
Eº‹
 +(
glm
::
i32vec3
) != 12;

192 
Eº‹
 +(
glm
::
i32vec4
) != 16;

193 
Eº‹
 +(
glm
::
i64vec2
) != 16;

194 
Eº‹
 +(
glm
::
i64vec3
) != 24;

195 
Eº‹
 +(
glm
::
i64vec4
) != 32;

197 
Eº‹
 +(
glm
::
lowp_i8vec2
) != 2;

198 
Eº‹
 +(
glm
::
lowp_i8vec3
) != 3;

199 
Eº‹
 +(
glm
::
lowp_i8vec4
) != 4;

200 
Eº‹
 +(
glm
::
lowp_i16vec2
) != 4;

201 
Eº‹
 +(
glm
::
lowp_i16vec3
) != 6;

202 
Eº‹
 +(
glm
::
lowp_i16vec4
) != 8;

203 
Eº‹
 +(
glm
::
lowp_i32vec2
) != 8;

204 
Eº‹
 +(
glm
::
lowp_i32vec3
) != 12;

205 
Eº‹
 +(
glm
::
lowp_i32vec4
) != 16;

206 
Eº‹
 +(
glm
::
lowp_i64vec2
) != 16;

207 
Eº‹
 +(
glm
::
lowp_i64vec3
) != 24;

208 
Eº‹
 +(
glm
::
lowp_i64vec4
) != 32;

210 
Eº‹
 +(
glm
::
mediump_i8vec2
) != 2;

211 
Eº‹
 +(
glm
::
mediump_i8vec3
) != 3;

212 
Eº‹
 +(
glm
::
mediump_i8vec4
) != 4;

213 
Eº‹
 +(
glm
::
mediump_i16vec2
) != 4;

214 
Eº‹
 +(
glm
::
mediump_i16vec3
) != 6;

215 
Eº‹
 +(
glm
::
mediump_i16vec4
) != 8;

216 
Eº‹
 +(
glm
::
mediump_i32vec2
) != 8;

217 
Eº‹
 +(
glm
::
mediump_i32vec3
) != 12;

218 
Eº‹
 +(
glm
::
mediump_i32vec4
) != 16;

219 
Eº‹
 +(
glm
::
mediump_i64vec2
) != 16;

220 
Eº‹
 +(
glm
::
mediump_i64vec3
) != 24;

221 
Eº‹
 +(
glm
::
mediump_i64vec4
) != 32;

223 
Eº‹
 +(
glm
::
highp_i8vec2
) != 2;

224 
Eº‹
 +(
glm
::
highp_i8vec3
) != 3;

225 
Eº‹
 +(
glm
::
highp_i8vec4
) != 4;

226 
Eº‹
 +(
glm
::
highp_i16vec2
) != 4;

227 
Eº‹
 +(
glm
::
highp_i16vec3
) != 6;

228 
Eº‹
 +(
glm
::
highp_i16vec4
) != 8;

229 
Eº‹
 +(
glm
::
highp_i32vec2
) != 8;

230 
Eº‹
 +(
glm
::
highp_i32vec3
) != 12;

231 
Eº‹
 +(
glm
::
highp_i32vec4
) != 16;

232 
Eº‹
 +(
glm
::
highp_i64vec2
) != 16;

233 
Eº‹
 +(
glm
::
highp_i64vec3
) != 24;

234 
Eº‹
 +(
glm
::
highp_i64vec4
) != 32;

235  
Eº‹
;

236 
	}
}

238 
	$ã°_ivec_¥ecisi⁄
()

240 
	`Eº‹
(0);

243 
glm
::
i8vec2
 
v1
;

244 
glm
::
lowp_i8vec2
 
	`v2
(
v1
);

245 
glm
::
mediump_i8vec2
 
	`v3
(
v1
);

246 
glm
::
highp_i8vec2
 
	`v4
(
v1
);

248 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i8vec2
(
v2
))) ? 0 : 1;

249 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i8vec2
(
v3
))) ? 0 : 1;

250 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i8vec2
(
v4
))) ? 0 : 1;

254 
glm
::
i8vec3
 
v1
;

255 
glm
::
lowp_i8vec3
 
	`v2
(
v1
);

256 
glm
::
mediump_i8vec3
 
	`v3
(
v1
);

257 
glm
::
highp_i8vec3
 
	`v4
(
v1
);

259 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i8vec3
(
v2
))) ? 0 : 1;

260 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i8vec3
(
v3
))) ? 0 : 1;

261 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i8vec3
(
v4
))) ? 0 : 1;

265 
glm
::
i8vec4
 
v1
;

266 
glm
::
lowp_i8vec4
 
	`v2
(
v1
);

267 
glm
::
mediump_i8vec4
 
	`v3
(
v1
);

268 
glm
::
highp_i8vec4
 
	`v4
(
v1
);

270 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i8vec4
(
v2
))) ? 0 : 1;

271 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i8vec4
(
v3
))) ? 0 : 1;

272 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i8vec4
(
v4
))) ? 0 : 1;

276 
glm
::
i16vec2
 
v1
;

277 
glm
::
lowp_i16vec2
 
	`v2
(
v1
);

278 
glm
::
mediump_i16vec2
 
	`v3
(
v1
);

279 
glm
::
highp_i16vec2
 
	`v4
(
v1
);

281 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i16vec2
(
v2
))) ? 0 : 1;

282 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i16vec2
(
v3
))) ? 0 : 1;

283 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i16vec2
(
v4
))) ? 0 : 1;

287 
glm
::
i16vec3
 
v1
;

288 
glm
::
lowp_i16vec3
 
	`v2
(
v1
);

289 
glm
::
mediump_i16vec3
 
	`v3
(
v1
);

290 
glm
::
highp_i16vec3
 
	`v4
(
v1
);

292 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i16vec3
(
v2
))) ? 0 : 1;

293 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i16vec3
(
v3
))) ? 0 : 1;

294 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i16vec3
(
v4
))) ? 0 : 1;

298 
glm
::
i16vec4
 
v1
;

299 
glm
::
lowp_i16vec4
 
	`v2
(
v1
);

300 
glm
::
mediump_i16vec4
 
	`v3
(
v1
);

301 
glm
::
highp_i16vec4
 
	`v4
(
v1
);

303 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i16vec4
(
v2
))) ? 0 : 1;

304 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i16vec4
(
v3
))) ? 0 : 1;

305 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i16vec4
(
v4
))) ? 0 : 1;

309 
glm
::
i32vec2
 
v1
;

310 
glm
::
lowp_i32vec2
 
	`v2
(
v1
);

311 
glm
::
mediump_i32vec2
 
	`v3
(
v1
);

312 
glm
::
highp_i32vec2
 
	`v4
(
v1
);

314 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i32vec2
(
v2
))) ? 0 : 1;

315 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i32vec2
(
v3
))) ? 0 : 1;

316 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i32vec2
(
v4
))) ? 0 : 1;

320 
glm
::
i32vec3
 
v1
;

321 
glm
::
lowp_i32vec3
 
	`v2
(
v1
);

322 
glm
::
mediump_i32vec3
 
	`v3
(
v1
);

323 
glm
::
highp_i32vec3
 
	`v4
(
v1
);

325 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i32vec3
(
v2
))) ? 0 : 1;

326 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i32vec3
(
v3
))) ? 0 : 1;

327 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i32vec3
(
v4
))) ? 0 : 1;

331 
glm
::
i32vec4
 
v1
;

332 
glm
::
lowp_i32vec4
 
	`v2
(
v1
);

333 
glm
::
mediump_i32vec4
 
	`v3
(
v1
);

334 
glm
::
highp_i32vec4
 
	`v4
(
v1
);

336 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i32vec4
(
v2
))) ? 0 : 1;

337 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i32vec4
(
v3
))) ? 0 : 1;

338 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i32vec4
(
v4
))) ? 0 : 1;

342 
glm
::
i64vec2
 
v1
;

343 
glm
::
lowp_i64vec2
 
	`v2
(
v1
);

344 
glm
::
mediump_i64vec2
 
	`v3
(
v1
);

345 
glm
::
highp_i64vec2
 
	`v4
(
v1
);

347 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i64vec2
(
v2
))) ? 0 : 1;

348 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i64vec2
(
v3
))) ? 0 : 1;

349 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i64vec2
(
v4
))) ? 0 : 1;

353 
glm
::
i64vec3
 
v1
;

354 
glm
::
lowp_i64vec3
 
	`v2
(
v1
);

355 
glm
::
mediump_i64vec3
 
	`v3
(
v1
);

356 
glm
::
highp_i64vec3
 
	`v4
(
v1
);

358 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i64vec3
(
v2
))) ? 0 : 1;

359 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i64vec3
(
v3
))) ? 0 : 1;

360 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i64vec3
(
v4
))) ? 0 : 1;

364 
glm
::
i64vec4
 
v1
;

365 
glm
::
lowp_i64vec4
 
	`v2
(
v1
);

366 
glm
::
mediump_i64vec4
 
	`v3
(
v1
);

367 
glm
::
highp_i64vec4
 
	`v4
(
v1
);

369 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i64vec4
(
v2
))) ? 0 : 1;

370 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i64vec4
(
v3
))) ? 0 : 1;

371 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`i64vec4
(
v4
))) ? 0 : 1;

374  
Eº‹
;

375 
	}
}

377 
	$ã°_uvec_size
()

379 
	`Eº‹
(0);

380 
Eº‹
 +(
glm
::
u8vec2
) != 2;

381 
Eº‹
 +(
glm
::
u8vec3
) != 3;

382 
Eº‹
 +(
glm
::
u8vec4
) != 4;

383 
Eº‹
 +(
glm
::
u16vec2
) != 4;

384 
Eº‹
 +(
glm
::
u16vec3
) != 6;

385 
Eº‹
 +(
glm
::
u16vec4
) != 8;

386 
Eº‹
 +(
glm
::
u32vec2
) != 8;

387 
Eº‹
 +(
glm
::
u32vec3
) != 12;

388 
Eº‹
 +(
glm
::
u32vec4
) != 16;

389 
Eº‹
 +(
glm
::
u64vec2
) != 16;

390 
Eº‹
 +(
glm
::
u64vec3
) != 24;

391 
Eº‹
 +(
glm
::
u64vec4
) != 32;

393 
Eº‹
 +(
glm
::
lowp_u8vec2
) != 2;

394 
Eº‹
 +(
glm
::
lowp_u8vec3
) != 3;

395 
Eº‹
 +(
glm
::
lowp_u8vec4
) != 4;

396 
Eº‹
 +(
glm
::
lowp_u16vec2
) != 4;

397 
Eº‹
 +(
glm
::
lowp_u16vec3
) != 6;

398 
Eº‹
 +(
glm
::
lowp_u16vec4
) != 8;

399 
Eº‹
 +(
glm
::
lowp_u32vec2
) != 8;

400 
Eº‹
 +(
glm
::
lowp_u32vec3
) != 12;

401 
Eº‹
 +(
glm
::
lowp_u32vec4
) != 16;

402 
Eº‹
 +(
glm
::
lowp_u64vec2
) != 16;

403 
Eº‹
 +(
glm
::
lowp_u64vec3
) != 24;

404 
Eº‹
 +(
glm
::
lowp_u64vec4
) != 32;

406 
Eº‹
 +(
glm
::
mediump_u8vec2
) != 2;

407 
Eº‹
 +(
glm
::
mediump_u8vec3
) != 3;

408 
Eº‹
 +(
glm
::
mediump_u8vec4
) != 4;

409 
Eº‹
 +(
glm
::
mediump_u16vec2
) != 4;

410 
Eº‹
 +(
glm
::
mediump_u16vec3
) != 6;

411 
Eº‹
 +(
glm
::
mediump_u16vec4
) != 8;

412 
Eº‹
 +(
glm
::
mediump_u32vec2
) != 8;

413 
Eº‹
 +(
glm
::
mediump_u32vec3
) != 12;

414 
Eº‹
 +(
glm
::
mediump_u32vec4
) != 16;

415 
Eº‹
 +(
glm
::
mediump_u64vec2
) != 16;

416 
Eº‹
 +(
glm
::
mediump_u64vec3
) != 24;

417 
Eº‹
 +(
glm
::
mediump_u64vec4
) != 32;

419 
Eº‹
 +(
glm
::
highp_u8vec2
) != 2;

420 
Eº‹
 +(
glm
::
highp_u8vec3
) != 3;

421 
Eº‹
 +(
glm
::
highp_u8vec4
) != 4;

422 
Eº‹
 +(
glm
::
highp_u16vec2
) != 4;

423 
Eº‹
 +(
glm
::
highp_u16vec3
) != 6;

424 
Eº‹
 +(
glm
::
highp_u16vec4
) != 8;

425 
Eº‹
 +(
glm
::
highp_u32vec2
) != 8;

426 
Eº‹
 +(
glm
::
highp_u32vec3
) != 12;

427 
Eº‹
 +(
glm
::
highp_u32vec4
) != 16;

428 
Eº‹
 +(
glm
::
highp_u64vec2
) != 16;

429 
Eº‹
 +(
glm
::
highp_u64vec3
) != 24;

430 
Eº‹
 +(
glm
::
highp_u64vec4
) != 32;

431  
Eº‹
;

432 
	}
}

434 
	$ã°_uvec_¥ecisi⁄
()

436 
	`Eº‹
(0);

439 
glm
::
u8vec2
 
v1
;

440 
glm
::
lowp_u8vec2
 
	`v2
(
v1
);

441 
glm
::
mediump_u8vec2
 
	`v3
(
v1
);

442 
glm
::
highp_u8vec2
 
	`v4
(
v1
);

444 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u8vec2
(
v2
))) ? 0 : 1;

445 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u8vec2
(
v3
))) ? 0 : 1;

446 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u8vec2
(
v4
))) ? 0 : 1;

450 
glm
::
u8vec3
 
v1
;

451 
glm
::
lowp_u8vec3
 
	`v2
(
v1
);

452 
glm
::
mediump_u8vec3
 
	`v3
(
v1
);

453 
glm
::
highp_u8vec3
 
	`v4
(
v1
);

455 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u8vec3
(
v2
))) ? 0 : 1;

456 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u8vec3
(
v3
))) ? 0 : 1;

457 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u8vec3
(
v4
))) ? 0 : 1;

461 
glm
::
u8vec4
 
v1
;

462 
glm
::
lowp_u8vec4
 
	`v2
(
v1
);

463 
glm
::
mediump_u8vec4
 
	`v3
(
v1
);

464 
glm
::
highp_u8vec4
 
	`v4
(
v1
);

466 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u8vec4
(
v2
))) ? 0 : 1;

467 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u8vec4
(
v3
))) ? 0 : 1;

468 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u8vec4
(
v4
))) ? 0 : 1;

472 
glm
::
u16vec2
 
v1
;

473 
glm
::
lowp_u16vec2
 
	`v2
(
v1
);

474 
glm
::
mediump_u16vec2
 
	`v3
(
v1
);

475 
glm
::
highp_u16vec2
 
	`v4
(
v1
);

477 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u16vec2
(
v2
))) ? 0 : 1;

478 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u16vec2
(
v3
))) ? 0 : 1;

479 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u16vec2
(
v4
))) ? 0 : 1;

483 
glm
::
u16vec3
 
v1
;

484 
glm
::
lowp_u16vec3
 
	`v2
(
v1
);

485 
glm
::
mediump_u16vec3
 
	`v3
(
v1
);

486 
glm
::
highp_u16vec3
 
	`v4
(
v1
);

488 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u16vec3
(
v2
))) ? 0 : 1;

489 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u16vec3
(
v3
))) ? 0 : 1;

490 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u16vec3
(
v4
))) ? 0 : 1;

494 
glm
::
u16vec4
 
v1
;

495 
glm
::
lowp_u16vec4
 
	`v2
(
v1
);

496 
glm
::
mediump_u16vec4
 
	`v3
(
v1
);

497 
glm
::
highp_u16vec4
 
	`v4
(
v1
);

499 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u16vec4
(
v2
))) ? 0 : 1;

500 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u16vec4
(
v3
))) ? 0 : 1;

501 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u16vec4
(
v4
))) ? 0 : 1;

505 
glm
::
u32vec2
 
v1
;

506 
glm
::
lowp_u32vec2
 
	`v2
(
v1
);

507 
glm
::
mediump_u32vec2
 
	`v3
(
v1
);

508 
glm
::
highp_u32vec2
 
	`v4
(
v1
);

510 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u32vec2
(
v2
))) ? 0 : 1;

511 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u32vec2
(
v3
))) ? 0 : 1;

512 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u32vec2
(
v4
))) ? 0 : 1;

516 
glm
::
u32vec3
 
v1
;

517 
glm
::
lowp_u32vec3
 
	`v2
(
v1
);

518 
glm
::
mediump_u32vec3
 
	`v3
(
v1
);

519 
glm
::
highp_u32vec3
 
	`v4
(
v1
);

521 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u32vec3
(
v2
))) ? 0 : 1;

522 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u32vec3
(
v3
))) ? 0 : 1;

523 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u32vec3
(
v4
))) ? 0 : 1;

527 
glm
::
u32vec4
 
v1
;

528 
glm
::
lowp_u32vec4
 
	`v2
(
v1
);

529 
glm
::
mediump_u32vec4
 
	`v3
(
v1
);

530 
glm
::
highp_u32vec4
 
	`v4
(
v1
);

532 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u32vec4
(
v2
))) ? 0 : 1;

533 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u32vec4
(
v3
))) ? 0 : 1;

534 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u32vec4
(
v4
))) ? 0 : 1;

538 
glm
::
u64vec2
 
v1
;

539 
glm
::
lowp_u64vec2
 
	`v2
(
v1
);

540 
glm
::
mediump_u64vec2
 
	`v3
(
v1
);

541 
glm
::
highp_u64vec2
 
	`v4
(
v1
);

543 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u64vec2
(
v2
))) ? 0 : 1;

544 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u64vec2
(
v3
))) ? 0 : 1;

545 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u64vec2
(
v4
))) ? 0 : 1;

549 
glm
::
u64vec3
 
v1
;

550 
glm
::
lowp_u64vec3
 
	`v2
(
v1
);

551 
glm
::
mediump_u64vec3
 
	`v3
(
v1
);

552 
glm
::
highp_u64vec3
 
	`v4
(
v1
);

554 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u64vec3
(
v2
))) ? 0 : 1;

555 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u64vec3
(
v3
))) ? 0 : 1;

556 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u64vec3
(
v4
))) ? 0 : 1;

560 
glm
::
u64vec4
 
v1
;

561 
glm
::
lowp_u64vec4
 
	`v2
(
v1
);

562 
glm
::
mediump_u64vec4
 
	`v3
(
v1
);

563 
glm
::
highp_u64vec4
 
	`v4
(
v1
);

565 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u64vec4
(
v2
))) ? 0 : 1;

566 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u64vec4
(
v3
))) ? 0 : 1;

567 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v1
, glm::
	`u64vec4
(
v4
))) ? 0 : 1;

570  
Eº‹
;

571 
	}
}

573 
	$ã°_fm©_size
()

575 
	`Eº‹
(0);

576 
Eº‹
 +(
glm
::
m©2
) != 16;

577 
Eº‹
 +(
glm
::
m©3
) != 36;

578 
Eº‹
 +(
glm
::
m©4
) != 64;

579 
Eº‹
 +(
glm
::
m©2x2
) != 16;

580 
Eº‹
 +(
glm
::
m©2x3
) != 24;

581 
Eº‹
 +(
glm
::
m©2x4
) != 32;

582 
Eº‹
 +(
glm
::
m©3x2
) != 24;

583 
Eº‹
 +(
glm
::
m©3x3
) != 36;

584 
Eº‹
 +(
glm
::
m©3x4
) != 48;

585 
Eº‹
 +(
glm
::
m©4x2
) != 32;

586 
Eº‹
 +(
glm
::
m©4x3
) != 48;

587 
Eº‹
 +(
glm
::
m©4x4
) != 64;

589 
Eº‹
 +(
glm
::
fm©2
) != 16;

590 
Eº‹
 +(
glm
::
fm©3
) != 36;

591 
Eº‹
 +(
glm
::
fm©4
) != 64;

592 
Eº‹
 +(
glm
::
fm©2x2
) != 16;

593 
Eº‹
 +(
glm
::
fm©2x3
) != 24;

594 
Eº‹
 +(
glm
::
fm©2x4
) != 32;

595 
Eº‹
 +(
glm
::
fm©3x2
) != 24;

596 
Eº‹
 +(
glm
::
fm©3x3
) != 36;

597 
Eº‹
 +(
glm
::
fm©3x4
) != 48;

598 
Eº‹
 +(
glm
::
fm©4x2
) != 32;

599 
Eº‹
 +(
glm
::
fm©4x3
) != 48;

600 
Eº‹
 +(
glm
::
fm©4x4
) != 64;

602 
Eº‹
 +(
glm
::
f32m©2
) != 16;

603 
Eº‹
 +(
glm
::
f32m©3
) != 36;

604 
Eº‹
 +(
glm
::
f32m©4
) != 64;

605 
Eº‹
 +(
glm
::
f32m©2x2
) != 16;

606 
Eº‹
 +(
glm
::
f32m©2x3
) != 24;

607 
Eº‹
 +(
glm
::
f32m©2x4
) != 32;

608 
Eº‹
 +(
glm
::
f32m©3x2
) != 24;

609 
Eº‹
 +(
glm
::
f32m©3x3
) != 36;

610 
Eº‹
 +(
glm
::
f32m©3x4
) != 48;

611 
Eº‹
 +(
glm
::
f32m©4x2
) != 32;

612 
Eº‹
 +(
glm
::
f32m©4x3
) != 48;

613 
Eº‹
 +(
glm
::
f32m©4x4
) != 64;

616 
Eº‹
 +(
glm
::
lowp_m©2
) != 16;

617 
Eº‹
 +(
glm
::
lowp_m©3
) != 36;

618 
Eº‹
 +(
glm
::
lowp_m©4
) != 64;

619 
Eº‹
 +(
glm
::
lowp_m©2x2
) != 16;

620 
Eº‹
 +(
glm
::
lowp_m©2x3
) != 24;

621 
Eº‹
 +(
glm
::
lowp_m©2x4
) != 32;

622 
Eº‹
 +(
glm
::
lowp_m©3x2
) != 24;

623 
Eº‹
 +(
glm
::
lowp_m©3x3
) != 36;

624 
Eº‹
 +(
glm
::
lowp_m©3x4
) != 48;

625 
Eº‹
 +(
glm
::
lowp_m©4x2
) != 32;

626 
Eº‹
 +(
glm
::
lowp_m©4x3
) != 48;

627 
Eº‹
 +(
glm
::
lowp_m©4x4
) != 64;

629 
Eº‹
 +(
glm
::
lowp_fm©2
) != 16;

630 
Eº‹
 +(
glm
::
lowp_fm©3
) != 36;

631 
Eº‹
 +(
glm
::
lowp_fm©4
) != 64;

632 
Eº‹
 +(
glm
::
lowp_fm©2x2
) != 16;

633 
Eº‹
 +(
glm
::
lowp_fm©2x3
) != 24;

634 
Eº‹
 +(
glm
::
lowp_fm©2x4
) != 32;

635 
Eº‹
 +(
glm
::
lowp_fm©3x2
) != 24;

636 
Eº‹
 +(
glm
::
lowp_fm©3x3
) != 36;

637 
Eº‹
 +(
glm
::
lowp_fm©3x4
) != 48;

638 
Eº‹
 +(
glm
::
lowp_fm©4x2
) != 32;

639 
Eº‹
 +(
glm
::
lowp_fm©4x3
) != 48;

640 
Eº‹
 +(
glm
::
lowp_fm©4x4
) != 64;

642 
Eº‹
 +(
glm
::
lowp_f32m©2
) != 16;

643 
Eº‹
 +(
glm
::
lowp_f32m©3
) != 36;

644 
Eº‹
 +(
glm
::
lowp_f32m©4
) != 64;

645 
Eº‹
 +(
glm
::
lowp_f32m©2x2
) != 16;

646 
Eº‹
 +(
glm
::
lowp_f32m©2x3
) != 24;

647 
Eº‹
 +(
glm
::
lowp_f32m©2x4
) != 32;

648 
Eº‹
 +(
glm
::
lowp_f32m©3x2
) != 24;

649 
Eº‹
 +(
glm
::
lowp_f32m©3x3
) != 36;

650 
Eº‹
 +(
glm
::
lowp_f32m©3x4
) != 48;

651 
Eº‹
 +(
glm
::
lowp_f32m©4x2
) != 32;

652 
Eº‹
 +(
glm
::
lowp_f32m©4x3
) != 48;

653 
Eº‹
 +(
glm
::
lowp_f32m©4x4
) != 64;

656 
Eº‹
 +(
glm
::
mediump_m©2
) != 16;

657 
Eº‹
 +(
glm
::
mediump_m©3
) != 36;

658 
Eº‹
 +(
glm
::
mediump_m©4
) != 64;

659 
Eº‹
 +(
glm
::
mediump_m©2x2
) != 16;

660 
Eº‹
 +(
glm
::
mediump_m©2x3
) != 24;

661 
Eº‹
 +(
glm
::
mediump_m©2x4
) != 32;

662 
Eº‹
 +(
glm
::
mediump_m©3x2
) != 24;

663 
Eº‹
 +(
glm
::
mediump_m©3x3
) != 36;

664 
Eº‹
 +(
glm
::
mediump_m©3x4
) != 48;

665 
Eº‹
 +(
glm
::
mediump_m©4x2
) != 32;

666 
Eº‹
 +(
glm
::
mediump_m©4x3
) != 48;

667 
Eº‹
 +(
glm
::
mediump_m©4x4
) != 64;

669 
Eº‹
 +(
glm
::
mediump_fm©2
) != 16;

670 
Eº‹
 +(
glm
::
mediump_fm©3
) != 36;

671 
Eº‹
 +(
glm
::
mediump_fm©4
) != 64;

672 
Eº‹
 +(
glm
::
mediump_fm©2x2
) != 16;

673 
Eº‹
 +(
glm
::
mediump_fm©2x3
) != 24;

674 
Eº‹
 +(
glm
::
mediump_fm©2x4
) != 32;

675 
Eº‹
 +(
glm
::
mediump_fm©3x2
) != 24;

676 
Eº‹
 +(
glm
::
mediump_fm©3x3
) != 36;

677 
Eº‹
 +(
glm
::
mediump_fm©3x4
) != 48;

678 
Eº‹
 +(
glm
::
mediump_fm©4x2
) != 32;

679 
Eº‹
 +(
glm
::
mediump_fm©4x3
) != 48;

680 
Eº‹
 +(
glm
::
mediump_fm©4x4
) != 64;

682 
Eº‹
 +(
glm
::
mediump_f32m©2
) != 16;

683 
Eº‹
 +(
glm
::
mediump_f32m©3
) != 36;

684 
Eº‹
 +(
glm
::
mediump_f32m©4
) != 64;

685 
Eº‹
 +(
glm
::
mediump_f32m©2x2
) != 16;

686 
Eº‹
 +(
glm
::
mediump_f32m©2x3
) != 24;

687 
Eº‹
 +(
glm
::
mediump_f32m©2x4
) != 32;

688 
Eº‹
 +(
glm
::
mediump_f32m©3x2
) != 24;

689 
Eº‹
 +(
glm
::
mediump_f32m©3x3
) != 36;

690 
Eº‹
 +(
glm
::
mediump_f32m©3x4
) != 48;

691 
Eº‹
 +(
glm
::
mediump_f32m©4x2
) != 32;

692 
Eº‹
 +(
glm
::
mediump_f32m©4x3
) != 48;

693 
Eº‹
 +(
glm
::
mediump_f32m©4x4
) != 64;

696 
Eº‹
 +(
glm
::
highp_m©2
) != 16;

697 
Eº‹
 +(
glm
::
highp_m©3
) != 36;

698 
Eº‹
 +(
glm
::
highp_m©4
) != 64;

699 
Eº‹
 +(
glm
::
highp_m©2x2
) != 16;

700 
Eº‹
 +(
glm
::
highp_m©2x3
) != 24;

701 
Eº‹
 +(
glm
::
highp_m©2x4
) != 32;

702 
Eº‹
 +(
glm
::
highp_m©3x2
) != 24;

703 
Eº‹
 +(
glm
::
highp_m©3x3
) != 36;

704 
Eº‹
 +(
glm
::
highp_m©3x4
) != 48;

705 
Eº‹
 +(
glm
::
highp_m©4x2
) != 32;

706 
Eº‹
 +(
glm
::
highp_m©4x3
) != 48;

707 
Eº‹
 +(
glm
::
highp_m©4x4
) != 64;

709 
Eº‹
 +(
glm
::
highp_fm©2
) != 16;

710 
Eº‹
 +(
glm
::
highp_fm©3
) != 36;

711 
Eº‹
 +(
glm
::
highp_fm©4
) != 64;

712 
Eº‹
 +(
glm
::
highp_fm©2x2
) != 16;

713 
Eº‹
 +(
glm
::
highp_fm©2x3
) != 24;

714 
Eº‹
 +(
glm
::
highp_fm©2x4
) != 32;

715 
Eº‹
 +(
glm
::
highp_fm©3x2
) != 24;

716 
Eº‹
 +(
glm
::
highp_fm©3x3
) != 36;

717 
Eº‹
 +(
glm
::
highp_fm©3x4
) != 48;

718 
Eº‹
 +(
glm
::
highp_fm©4x2
) != 32;

719 
Eº‹
 +(
glm
::
highp_fm©4x3
) != 48;

720 
Eº‹
 +(
glm
::
highp_fm©4x4
) != 64;

722 
Eº‹
 +(
glm
::
highp_f32m©2
) != 16;

723 
Eº‹
 +(
glm
::
highp_f32m©3
) != 36;

724 
Eº‹
 +(
glm
::
highp_f32m©4
) != 64;

725 
Eº‹
 +(
glm
::
highp_f32m©2x2
) != 16;

726 
Eº‹
 +(
glm
::
highp_f32m©2x3
) != 24;

727 
Eº‹
 +(
glm
::
highp_f32m©2x4
) != 32;

728 
Eº‹
 +(
glm
::
highp_f32m©3x2
) != 24;

729 
Eº‹
 +(
glm
::
highp_f32m©3x3
) != 36;

730 
Eº‹
 +(
glm
::
highp_f32m©3x4
) != 48;

731 
Eº‹
 +(
glm
::
highp_f32m©4x2
) != 32;

732 
Eº‹
 +(
glm
::
highp_f32m©4x3
) != 48;

733 
Eº‹
 +(
glm
::
highp_f32m©4x4
) != 64;

734  
Eº‹
;

735 
	}
}

737 
	$ã°_dm©_size
()

739 
	`Eº‹
(0);

740 
Eº‹
 +(
glm
::
f64m©2
) != 32;

741 
Eº‹
 +(
glm
::
f64m©3
) != 72;

742 
Eº‹
 +(
glm
::
f64m©4
) != 128;

743 
Eº‹
 +(
glm
::
f64m©2x2
) != 32;

744 
Eº‹
 +(
glm
::
f64m©2x3
) != 48;

745 
Eº‹
 +(
glm
::
f64m©2x4
) != 64;

746 
Eº‹
 +(
glm
::
f64m©3x2
) != 48;

747 
Eº‹
 +(
glm
::
f64m©3x3
) != 72;

748 
Eº‹
 +(
glm
::
f64m©3x4
) != 96;

749 
Eº‹
 +(
glm
::
f64m©4x2
) != 64;

750 
Eº‹
 +(
glm
::
f64m©4x3
) != 96;

751 
Eº‹
 +(
glm
::
f64m©4x4
) != 128;

753 
Eº‹
 +(
glm
::
lowp_f64m©2
) != 32;

754 
Eº‹
 +(
glm
::
lowp_f64m©3
) != 72;

755 
Eº‹
 +(
glm
::
lowp_f64m©4
) != 128;

756 
Eº‹
 +(
glm
::
lowp_f64m©2x2
) != 32;

757 
Eº‹
 +(
glm
::
lowp_f64m©2x3
) != 48;

758 
Eº‹
 +(
glm
::
lowp_f64m©2x4
) != 64;

759 
Eº‹
 +(
glm
::
lowp_f64m©3x2
) != 48;

760 
Eº‹
 +(
glm
::
lowp_f64m©3x3
) != 72;

761 
Eº‹
 +(
glm
::
lowp_f64m©3x4
) != 96;

762 
Eº‹
 +(
glm
::
lowp_f64m©4x2
) != 64;

763 
Eº‹
 +(
glm
::
lowp_f64m©4x3
) != 96;

764 
Eº‹
 +(
glm
::
lowp_f64m©4x4
) != 128;

766 
Eº‹
 +(
glm
::
mediump_f64m©2
) != 32;

767 
Eº‹
 +(
glm
::
mediump_f64m©3
) != 72;

768 
Eº‹
 +(
glm
::
mediump_f64m©4
) != 128;

769 
Eº‹
 +(
glm
::
mediump_f64m©2x2
) != 32;

770 
Eº‹
 +(
glm
::
mediump_f64m©2x3
) != 48;

771 
Eº‹
 +(
glm
::
mediump_f64m©2x4
) != 64;

772 
Eº‹
 +(
glm
::
mediump_f64m©3x2
) != 48;

773 
Eº‹
 +(
glm
::
mediump_f64m©3x3
) != 72;

774 
Eº‹
 +(
glm
::
mediump_f64m©3x4
) != 96;

775 
Eº‹
 +(
glm
::
mediump_f64m©4x2
) != 64;

776 
Eº‹
 +(
glm
::
mediump_f64m©4x3
) != 96;

777 
Eº‹
 +(
glm
::
mediump_f64m©4x4
) != 128;

779 
Eº‹
 +(
glm
::
highp_f64m©2
) != 32;

780 
Eº‹
 +(
glm
::
highp_f64m©3
) != 72;

781 
Eº‹
 +(
glm
::
highp_f64m©4
) != 128;

782 
Eº‹
 +(
glm
::
highp_f64m©2x2
) != 32;

783 
Eº‹
 +(
glm
::
highp_f64m©2x3
) != 48;

784 
Eº‹
 +(
glm
::
highp_f64m©2x4
) != 64;

785 
Eº‹
 +(
glm
::
highp_f64m©3x2
) != 48;

786 
Eº‹
 +(
glm
::
highp_f64m©3x3
) != 72;

787 
Eº‹
 +(
glm
::
highp_f64m©3x4
) != 96;

788 
Eº‹
 +(
glm
::
highp_f64m©4x2
) != 64;

789 
Eº‹
 +(
glm
::
highp_f64m©4x3
) != 96;

790 
Eº‹
 +(
glm
::
highp_f64m©4x4
) != 128;

792  
Eº‹
;

793 
	}
}

795 
	$ã°_qu©_size
()

797 
Eº‹
 = 0;

798 
Eº‹
 +(
glm
::
f32qu©
) != 16;

799 
Eº‹
 +(
glm
::
f64qu©
) != 32;

801 
Eº‹
 +(
glm
::
lowp_f32qu©
) != 16;

802 
Eº‹
 +(
glm
::
lowp_f64qu©
) != 32;

804 
Eº‹
 +(
glm
::
mediump_f32qu©
) != 16;

805 
Eº‹
 +(
glm
::
mediump_f64qu©
) != 32;

807 
Eº‹
 +(
glm
::
highp_f32qu©
) != 16;

808 
Eº‹
 +(
glm
::
highp_f64qu©
) != 32;

809  
Eº‹
;

810 
	}
}

812 
	$ã°_qu©_¥ecisi⁄
()

814 
	`Eº‹
(0);

817 
glm
::
f32qu©
 
q1
;

818 
glm
::
lowp_f32qu©
 
	`qA
(
q1
);

819 
glm
::
mediump_f32qu©
 
	`qB
(
q1
);

820 
glm
::
highp_f32qu©
 
	`qC
(
q1
);

821 
glm
::
f32qu©
 
	`q2
(
qA
);

822 
glm
::
f32qu©
 
	`q3
(
qB
);

823 
glm
::
f32qu©
 
	`q4
(
qC
);

825 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
q1
, 
q2
)) ? 0 : 1;

826 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
q1
, 
q3
)) ? 0 : 1;

827 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
q1
, 
q4
)) ? 0 : 1;

830  
Eº‹
;

831 
	}
}

833 
	$ã°_fvec_c⁄vîsi⁄
()

835 
	`Eº‹
(0);

838 
glm
::
highp_vec4
 
a
 = glm::
	`vec4
(1, 2, 3, 4);

839 
glm
::
mediump_vec4
 
b
 = glm::
	`vec4
(1, 2, 3, 4);

840 
glm
::
lowp_vec4
 
c
 = 
b
;

841 
glm
::
mediump_vec4
 
d
 = 
c
;

842 
glm
::
lowp_ivec4
 
e
 = glm::
	`ivec4
(
d
);

843 
glm
::
lowp_ivec3
 
f
 = glm::
	`ivec3
(
e
);

845 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
b
, 
d
)) ? 0 : 1;

848  
Eº‹
;

849 
	}
}

851 
	$ã°_›ímp
()

853 
°d
::
ve˘‹
<
glm
::
u8vec3
> 
	`Ve˘‹A
(1000);

854 
°d
::
ve˘‹
<
glm
::
u8vec3
> 
	`Ve˘‹B
(1000);

855 
°d
::
ve˘‹
<
glm
::
u8vec3
> 
	`Ve˘‹C
(1000);

857 
°d
::
size_t
 
i
 = 0; i < 
Ve˘‹A
.
	`size
(); ++i)

859 
Ve˘‹A
[
i
] = 
glm
::
	`u8vec3
(1, 1, 1);

860 
Ve˘‹B
[
i
] = 
glm
::
	`u8vec3
(1, 1, 1);

863 #¥agm®
omp
 
∑øŒñ
 (
n⁄e
Ë
	`sh¨ed
(
Ve˘‹A
, 
Ve˘‹B
, 
Ve˘‹C
)

864 
i
 = 0; i < 
Ve˘‹C
.
	`size
(); ++i)

866 
Ve˘‹C
[
i
] = 
Ve˘‹A
[i] + 
Ve˘‹B
[i];

870 
	}
}

872 
	$maö
()

874 
	`Eº‹
(0);

875 
Eº‹
 +
	`ã°_›ímp
();

876 
Eº‹
 +
	`ã°_sˇœr_size
();

877 
Eº‹
 +
	`ã°_fvec_size
();

878 
Eº‹
 +
	`ã°_fvec_¥ecisi⁄
();

879 
Eº‹
 +
	`ã°_fvec_c⁄vîsi⁄
();

880 
Eº‹
 +
	`ã°_dvec_¥ecisi⁄
();

881 
Eº‹
 +
	`ã°_ivec_size
();

882 
Eº‹
 +
	`ã°_ivec_¥ecisi⁄
();

883 
Eº‹
 +
	`ã°_uvec_size
();

884 
Eº‹
 +
	`ã°_uvec_¥ecisi⁄
();

885 
Eº‹
 +
	`ã°_fm©_size
();

886 
Eº‹
 +
	`ã°_dm©_size
();

887 
Eº‹
 +
	`ã°_qu©_size
();

888 
Eº‹
 +
	`ã°_qu©_¥ecisi⁄
();

889  
Eº‹
;

890 
	}
}

	@glm/test/gtc/gtc_type_ptr.cpp

1 
	~<glm/gtc/ty≥_±r.hµ
>

3 
	$ã°_vÆue_±r_vec
()

5 
Eº‹
 = 0;

8 
glm
::
vec2
 
	`v
(1.0);

9 * 
p
 = 
glm
::
	`vÆue_±r
(
v
);

10 
Eº‹
 +
p
 =&
v
[0] ? 0 : 1;

13 
glm
::
vec3
 
	`v
(1.0);

14 * 
p
 = 
glm
::
	`vÆue_±r
(
v
);

15 
Eº‹
 +
p
 =&
v
[0] ? 0 : 1;

18 
glm
::
vec4
 
	`v
(1.0);

19 * 
p
 = 
glm
::
	`vÆue_±r
(
v
);

20 
Eº‹
 +
p
 =&
v
[0] ? 0 : 1;

24 
glm
::
dvec2
 
	`v
(1.0);

25 * 
p
 = 
glm
::
	`vÆue_±r
(
v
);

26 
Eº‹
 +
p
 =&
v
[0] ? 0 : 1;

29 
glm
::
dvec3
 
	`v
(1.0);

30 * 
p
 = 
glm
::
	`vÆue_±r
(
v
);

31 
Eº‹
 +
p
 =&
v
[0] ? 0 : 1;

34 
glm
::
dvec4
 
	`v
(1.0);

35 * 
p
 = 
glm
::
	`vÆue_±r
(
v
);

36 
Eº‹
 +
p
 =&
v
[0] ? 0 : 1;

39  
Eº‹
;

40 
	}
}

42 
	$ã°_vÆue_±r_vec_c⁄°
()

44 
Eº‹
 = 0;

47 
glm
::
vec2
 c⁄° 
	`v
(1.0);

48 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
v
);

49 
Eº‹
 +
p
 =&
v
[0] ? 0 : 1;

52 
glm
::
vec3
 c⁄° 
	`v
(1.0);

53 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
v
);

54 
Eº‹
 +
p
 =&
v
[0] ? 0 : 1;

57 
glm
::
vec4
 c⁄° 
	`v
(1.0);

58 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
v
);

59 
Eº‹
 +
p
 =&
v
[0] ? 0 : 1;

63 
glm
::
dvec2
 c⁄° 
	`v
(1.0);

64 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
v
);

65 
Eº‹
 +
p
 =&
v
[0] ? 0 : 1;

68 
glm
::
dvec3
 c⁄° 
	`v
(1.0);

69 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
v
);

70 
Eº‹
 +
p
 =&
v
[0] ? 0 : 1;

73 
glm
::
dvec4
 c⁄° 
	`v
(1.0);

74 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
v
);

75 
Eº‹
 +
p
 =&
v
[0] ? 0 : 1;

78  
Eº‹
;

79 
	}
}

81 
	$ã°_vÆue_±r_m©
()

83 
Eº‹
 = 0;

86 
glm
::
m©2x2
 
	`m
(1.0);

87 * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

88 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

91 
glm
::
m©2x3
 
	`m
(1.0);

92 * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

93 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

96 
glm
::
m©2x4
 
	`m
(1.0);

97 * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

98 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

101 
glm
::
m©3x2
 
	`m
(1.0);

102 * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

103 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

106 
glm
::
m©3x3
 
	`m
(1.0);

107 * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

108 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

111 
glm
::
m©3x4
 
	`m
(1.0);

112 * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

113 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

116 
glm
::
m©4x2
 
	`m
(1.0);

117 * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

118 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

121 
glm
::
m©4x3
 
	`m
(1.0);

122 * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

123 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

126 
glm
::
m©4x4
 
	`m
(1.0);

127 * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

128 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

131  
Eº‹
;

132 
	}
}

134 
	$ã°_vÆue_±r_m©_c⁄°
()

136 
Eº‹
 = 0;

139 
glm
::
m©2x2
 c⁄° 
	`m
(1.0);

140 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

141 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

144 
glm
::
m©2x3
 c⁄° 
	`m
(1.0);

145 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

146 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

149 
glm
::
m©2x4
 c⁄° 
	`m
(1.0);

150 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

151 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

154 
glm
::
m©3x2
 c⁄° 
	`m
(1.0);

155 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

156 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

159 
glm
::
m©3x3
 c⁄° 
	`m
(1.0);

160 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

161 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

164 
glm
::
m©3x4
 c⁄° 
	`m
(1.0);

165 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

166 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

169 
glm
::
m©4x2
 c⁄° 
	`m
(1.0);

170 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

171 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

174 
glm
::
m©4x3
 c⁄° 
	`m
(1.0);

175 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

176 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

179 
glm
::
m©4x4
 c⁄° 
	`m
(1.0);

180 c⁄° * 
p
 = 
glm
::
	`vÆue_±r
(
m
);

181 
Eº‹
 +
p
 =&
m
[0][0] ? 0 : 1;

184  
Eº‹
;

185 
	}
}

187 
	$ã°_make_poöãr_m©
()

189 
Eº‹
 = 0;

191 
AºayA
[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};

192 
AºayB
[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};

194 
glm
::
m©2x2
 
M©2x2A
 = glm::
	`make_m©2x2
(
AºayA
);

195 
glm
::
m©2x3
 
M©2x3A
 = glm::
	`make_m©2x3
(
AºayA
);

196 
glm
::
m©2x4
 
M©2x4A
 = glm::
	`make_m©2x4
(
AºayA
);

197 
glm
::
m©3x2
 
M©3x2A
 = glm::
	`make_m©3x2
(
AºayA
);

198 
glm
::
m©3x3
 
M©3x3A
 = glm::
	`make_m©3x3
(
AºayA
);

199 
glm
::
m©3x4
 
M©3x4A
 = glm::
	`make_m©3x4
(
AºayA
);

200 
glm
::
m©4x2
 
M©4x2A
 = glm::
	`make_m©4x2
(
AºayA
);

201 
glm
::
m©4x3
 
M©4x3A
 = glm::
	`make_m©4x3
(
AºayA
);

202 
glm
::
m©4x4
 
M©4x4A
 = glm::
	`make_m©4x4
(
AºayA
);

204 
glm
::
dm©2x2
 
M©2x2B
 = glm::
	`make_m©2x2
(
AºayB
);

205 
glm
::
dm©2x3
 
M©2x3B
 = glm::
	`make_m©2x3
(
AºayB
);

206 
glm
::
dm©2x4
 
M©2x4B
 = glm::
	`make_m©2x4
(
AºayB
);

207 
glm
::
dm©3x2
 
M©3x2B
 = glm::
	`make_m©3x2
(
AºayB
);

208 
glm
::
dm©3x3
 
M©3x3B
 = glm::
	`make_m©3x3
(
AºayB
);

209 
glm
::
dm©3x4
 
M©3x4B
 = glm::
	`make_m©3x4
(
AºayB
);

210 
glm
::
dm©4x2
 
M©4x2B
 = glm::
	`make_m©4x2
(
AºayB
);

211 
glm
::
dm©4x3
 
M©4x3B
 = glm::
	`make_m©4x3
(
AºayB
);

212 
glm
::
dm©4x4
 
M©4x4B
 = glm::
	`make_m©4x4
(
AºayB
);

214  
Eº‹
;

215 
	}
}

217 
	$ã°_make_poöãr_vec
()

219 
Eº‹
 = 0;

221 
AºayA
[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};

222 
AºayB
[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};

223 
boﬁ
 
AºayC
[] = {
åue
, 
Ál£
,Årue, false,Årue, false,Årue, false,Årue, false,Årue, false,Årue, false,Årue, false};

225 
glm
::
vec2
 
Vec2A
 = glm::
	`make_vec2
(
AºayA
);

226 
glm
::
vec3
 
Vec3A
 = glm::
	`make_vec3
(
AºayA
);

227 
glm
::
vec4
 
Vec4A
 = glm::
	`make_vec4
(
AºayA
);

229 
glm
::
ivec2
 
Vec2B
 = glm::
	`make_vec2
(
AºayB
);

230 
glm
::
ivec3
 
Vec3B
 = glm::
	`make_vec3
(
AºayB
);

231 
glm
::
ivec4
 
Vec4B
 = glm::
	`make_vec4
(
AºayB
);

233 
glm
::
bvec2
 
Vec2C
 = glm::
	`make_vec2
(
AºayC
);

234 
glm
::
bvec3
 
Vec3C
 = glm::
	`make_vec3
(
AºayC
);

235 
glm
::
bvec4
 
Vec4C
 = glm::
	`make_vec4
(
AºayC
);

237  
Eº‹
;

238 
	}
}

240 
	$maö
()

242 
Eº‹
 = 0;

244 
Eº‹
 +
	`ã°_make_poöãr_vec
();

245 
Eº‹
 +
	`ã°_make_poöãr_m©
();

246 
Eº‹
 +
	`ã°_vÆue_±r_vec
();

247 
Eº‹
 +
	`ã°_vÆue_±r_vec_c⁄°
();

248 
Eº‹
 +
	`ã°_vÆue_±r_m©
();

249 
Eº‹
 +
	`ã°_vÆue_±r_m©_c⁄°
();

251  
Eº‹
;

252 
	}
}

	@glm/test/gtc/gtc_ulp.cpp

1 
	~<glm/gtc/uÕ.hµ
>

2 
	~<limôs
>

4 
	$ã°_uÕ_Êﬂt_di°
()

6 
Eº‹
 = 0;

8 
A
 = 1.0f;

10 
B
 = 
glm
::
	`√xt_Êﬂt
(
A
);

11 
Eº‹
 +
A
 !
B
 ? 0 : 1;

12 
C
 = 
glm
::
	`¥ev_Êﬂt
(
B
);

13 
Eº‹
 +
A
 =
C
 ? 0 : 1;

15 
D
 = 
glm
::
	`Êﬂt_di°™˚
(
A
, 
B
);

16 
Eº‹
 +
D
 == 1 ? 0 : 1;

17 
E
 = 
glm
::
	`Êﬂt_di°™˚
(
A
, 
C
);

18 
Eº‹
 +
E
 == 0 ? 0 : 1;

20  
Eº‹
;

21 
	}
}

23 
	$ã°_uÕ_Êﬂt_°ï
()

25 
Eº‹
 = 0;

27 
A
 = 1.0f;

29 
i
 = 10; i < 1000; i *= 10)

31 
B
 = 
glm
::
	`√xt_Êﬂt
(
A
, 
i
);

32 
Eº‹
 +
A
 !
B
 ? 0 : 1;

33 
C
 = 
glm
::
	`¥ev_Êﬂt
(
B
, 
i
);

34 
Eº‹
 +
A
 =
C
 ? 0 : 1;

36 
D
 = 
glm
::
	`Êﬂt_di°™˚
(
A
, 
B
);

37 
Eº‹
 +
D
 =
i
 ? 0 : 1;

38 
E
 = 
glm
::
	`Êﬂt_di°™˚
(
A
, 
C
);

39 
Eº‹
 +
E
 == 0 ? 0 : 1;

42  
Eº‹
;

43 
	}
}

45 
	$ã°_uÕ_doubÀ_di°
()

47 
Eº‹
 = 0;

49 
A
 = 1.0;

51 
B
 = 
glm
::
	`√xt_Êﬂt
(
A
);

52 
Eº‹
 +
A
 !
B
 ? 0 : 1;

53 
C
 = 
glm
::
	`¥ev_Êﬂt
(
B
);

54 
Eº‹
 +
A
 =
C
 ? 0 : 1;

56 
D
 = 
glm
::
	`Êﬂt_di°™˚
(
A
, 
B
);

57 
Eº‹
 +
D
 == 1 ? 0 : 1;

58 
E
 = 
glm
::
	`Êﬂt_di°™˚
(
A
, 
C
);

59 
Eº‹
 +
E
 == 0 ? 0 : 1;

61  
Eº‹
;

62 
	}
}

64 
	$ã°_uÕ_doubÀ_°ï
()

66 
Eº‹
 = 0;

68 
A
 = 1.0;

70 
i
 = 10; i < 1000; i *= 10)

72 
B
 = 
glm
::
	`√xt_Êﬂt
(
A
, 
i
);

73 
Eº‹
 +
A
 !
B
 ? 0 : 1;

74 
C
 = 
glm
::
	`¥ev_Êﬂt
(
B
, 
i
);

75 
Eº‹
 +
A
 =
C
 ? 0 : 1;

77 
D
 = 
glm
::
	`Êﬂt_di°™˚
(
A
, 
B
);

78 
Eº‹
 +
D
 =
i
 ? 0 : 1;

79 
E
 = 
glm
::
	`Êﬂt_di°™˚
(
A
, 
C
);

80 
Eº‹
 +
E
 == 0 ? 0 : 1;

83  
Eº‹
;

84 
	}
}

86 
	$maö
()

88 
Eº‹
 = 0;

89 
Eº‹
 +
	`ã°_uÕ_Êﬂt_di°
();

90 
Eº‹
 +
	`ã°_uÕ_Êﬂt_°ï
();

91 
Eº‹
 +
	`ã°_uÕ_doubÀ_di°
();

92 
Eº‹
 +
	`ã°_uÕ_doubÀ_°ï
();

93  
Eº‹
;

94 
	}
}

	@glm/test/gtc/gtc_user_defined_types.cpp

10 
	#GLM_FORCE_RADIANS


	)

11 
	~<glm/gtc/u£r_deföed_ty≥.hµ
>

13 
	$ã°_make_poöãr_vec
()

15 
Eº‹
 = 0;

17 
glm
::
	`func
();

20  
Eº‹
;

21 
	}
}

23 
	$maö
()

25 
Eº‹
 = 0;

27 
Eº‹
 +
	`ã°_make_poöãr_vec
();

29  
Eº‹
;

30 
	}
}

	@glm/test/gtc/gtc_vec1.cpp

1 
	~<glm/gtc/vec1.hµ
>

3 
	$maö
()

5 
Eº‹
 = 0;

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_associated_min_max.cpp

1 
	~<glm/gtc/ty≥_¥ecisi⁄.hµ
>

2 
	~<glm/gtx/assocüãd_mö_max.hµ
>

4 
	$maö
()

6 
	`Eº‹
(0);

8  
Eº‹
;

9 
	}
}

	@glm/test/gtx/gtx_closest_point.cpp

1 
	~<glm/gtx/˛o£°_poöt.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_color_space.cpp

1 
	~<glm/gtx/cﬁ‹_•a˚.hµ
>

3 
	$ã°_ßtuøti⁄
()

5 
	`Eº‹
(0);

7 
glm
::
vec4
 
Cﬁ‹
 = glm::
	`ßtuøti⁄
(1.0f, glm::
	`vec4
(1.0, 0.5, 0.0, 1.0));

9  
Eº‹
;

10 
	}
}

12 
	$maö
()

14 
	`Eº‹
(0);

16 
Eº‹
 +
	`ã°_ßtuøti⁄
();

18  
Eº‹
;

19 
	}
}

	@glm/test/gtx/gtx_color_space_YCoCg.cpp

1 
	~<glm/gtx/cﬁ‹_•a˚_YCoCg.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_common.cpp

1 
	~<glm/gtx/comm⁄.hµ
>

2 
	~<glm/gtc/öãgî.hµ
>

3 
	~<glm/gtc/ïsû⁄.hµ
>

4 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

5 
	~<glm/comm⁄.hµ
>

7 
«me•a˚
 
	gfmod_


9 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

10 
GLM_FUNC_QUALIFIER
 
gíTy≥
 
modTrunc
(gíTy≥ 
a
, gíTy≥ 
b
)

12  
	ga
 - 
b
 * 
	gglm
::
åunc
(
a
 / b);

15 
ã°
()

17 
Eº‹
(0);

20 
A0
(3.0);

21 
B0
(2.0f);

22 
	gC0
 = 
glm
::
fmod
(
A0
, 
B0
);

24 
	gEº‹
 +
glm
::
abs
(
C0
 - 1.0f) < 0.00001f ? 0 : 1;

26 
	gglm
::
vec4
 
A1
(3.0);

27 
B1
(2.0f);

28 
	gglm
::
vec4
 
C1
 = 
glm
::
fmod
(
A1
, 
B1
);

30 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
C1
, glm::
vec4
(1.0f), 0.00001f)) ? 0 : 1;

32 
	gglm
::
vec4
 
A2
(3.0);

33 
	gglm
::
vec4
 
B2
(2.0f);

34 
	gglm
::
vec4
 
C2
 = 
glm
::
fmod
(
A2
, 
B2
);

36 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
C2
, glm::
vec4
(1.0f), 0.00001f)) ? 0 : 1;

38 
	gglm
::
ivec4
 
A3
(3);

39 
B3
(2);

40 
	gglm
::
ivec4
 
C3
 = 
glm
::
fmod
(
A3
, 
B3
);

42 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
C3
, glm::
ivec4
(1))) ? 0 : 1;

44 
	gglm
::
ivec4
 
A4
(3);

45 
	gglm
::
ivec4
 
B4
(2);

46 
	gglm
::
ivec4
 
C4
 = 
glm
::
fmod
(
A4
, 
B4
);

48 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
C4
, glm::
ivec4
(1))) ? 0 : 1;

52 
A0
(22.0);

53 
B0
(-10.0f);

54 
	gC0
 = 
glm
::
fmod
(
A0
, 
B0
);

56 
	gEº‹
 +
glm
::
abs
(
C0
 - 2.0f) < 0.00001f ? 0 : 1;

58 
	gglm
::
vec4
 
A1
(22.0);

59 
B1
(-10.0f);

60 
	gglm
::
vec4
 
C1
 = 
glm
::
fmod
(
A1
, 
B1
);

62 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
C1
, glm::
vec4
(2.0f), 0.00001f)) ? 0 : 1;

64 
	gglm
::
vec4
 
A2
(22.0);

65 
	gglm
::
vec4
 
B2
(-10.0f);

66 
	gglm
::
vec4
 
C2
 = 
glm
::
fmod
(
A2
, 
B2
);

68 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
C2
, glm::
vec4
(2.0f), 0.00001f)) ? 0 : 1;

70 
	gglm
::
ivec4
 
A3
(22);

71 
B3
(-10);

72 
	gglm
::
ivec4
 
C3
 = 
glm
::
fmod
(
A3
, 
B3
);

74 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
C3
, glm::
ivec4
(2))) ? 0 : 1;

76 
	gglm
::
ivec4
 
A4
(22);

77 
	gglm
::
ivec4
 
B4
(-10);

78 
	gglm
::
ivec4
 
C4
 = 
glm
::
fmod
(
A4
, 
B4
);

80 
	gEº‹
 +
glm
::
Æl
(glm::
equÆ
(
C4
, glm::
ivec4
(2))) ? 0 : 1;

85 
	gy
 = -10.0f; y < 10.0f; y += 0.1f)

86 
x
 = -10.0f; 
	gx
 < 10.0f; x += 0.1f)

88 c⁄° 
A
(
°d
::
fmod
(
x
, 
y
));

90 c⁄° 
C
(
glm
::
fmod
(
x
, 
y
));

91 c⁄° 
D
(
modTrunc
(
x
, 
y
));

95 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
, 
C
, 0.0001f) ? 0 : 1;

96 
as£π
(!
Eº‹
);

97 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
, 
D
, 0.00001f) ? 0 : 1;

98 
as£π
(!
Eº‹
);

102  
	gEº‹
;

106 
	$ã°_isdí‹mÆ
()

108 
	`Eº‹
(0);

110 
boﬁ
 
A
 = 
glm
::
	`isdí‹mÆ
(1.0f);

111 
glm
::
bvec1
 
B
 = glm::
	`isdí‹mÆ
(glm::
	`vec1
(1.0f));

112 
glm
::
bvec2
 
C
 = glm::
	`isdí‹mÆ
(glm::
	`vec2
(1.0f));

113 
glm
::
bvec3
 
D
 = glm::
	`isdí‹mÆ
(glm::
	`vec3
(1.0f));

114 
glm
::
bvec4
 
E
 = glm::
	`isdí‹mÆ
(glm::
	`vec4
(1.0f));

116  
Eº‹
;

117 
	}
}

119 
	$maö
()

121 
Eº‹
 = 0;

123 
Eº‹
 +
	`ã°_isdí‹mÆ
();

124 
Eº‹
 +::
fmod_
::
	`ã°
();

126  
Eº‹
;

127 
	}
}

	@glm/test/gtx/gtx_compatibility.cpp

1 
	~<glm/gtx/com∑tibûôy.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7 
Eº‹
 +
glm
::
	`isföôe
(1.0f) ? 0 : 1;

8 
Eº‹
 +
glm
::
	`isföôe
(1.0) ? 0 : 1;

9 
Eº‹
 +
glm
::
	`isföôe
(-1.0f) ? 0 : 1;

10 
Eº‹
 +
glm
::
	`isföôe
(-1.0) ? 0 : 1;

12 
Eº‹
 +
glm
::
	`Æl
(glm::
	`isföôe
(glm::
	`vec4
(1.0f))) ? 0 : 1;

13 
Eº‹
 +
glm
::
	`Æl
(glm::
	`isföôe
(glm::
	`dvec4
(1.0))) ? 0 : 1;

14 
Eº‹
 +
glm
::
	`Æl
(glm::
	`isföôe
(glm::
	`vec4
(-1.0f))) ? 0 : 1;

15 
Eº‹
 +
glm
::
	`Æl
(glm::
	`isföôe
(glm::
	`dvec4
(-1.0))) ? 0 : 1;

17  
Eº‹
;

18 
	}
}

	@glm/test/gtx/gtx_component_wise.cpp

1 
	~<glm/gtx/comp⁄ít_wi£.hµ
>

2 
	~<glm/gtc/ty≥_¥ecisi⁄.hµ
>

3 
	~<glm/gtc/ïsû⁄.hµ
>

4 
	~<glm/gtc/c⁄°™ts.hµ
>

5 
	~<limôs
>

7 
«me•a˚
 
	gcompN‹mÆize


9 
run
()

11 
Eº‹
(0);

14 
	gglm
::
vec4
 c⁄° 
A
 = 
glm
::
compN‹mÆize
<>(glm::
u8vec4
(0, 127, 128, 255));

16 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
.
x
, 0.0f, glm::
ïsû⁄
<>()) ? 0 : 1;

17 
	gEº‹
 +
A
.
y
 < 0.5f ? 0 : 1;

18 
	gEº‹
 +
A
.
z
 > 0.5f ? 0 : 1;

19 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
.
w
, 1.0f, glm::
ïsû⁄
<>()) ? 0 : 1;

23 
	gglm
::
vec4
 c⁄° 
A
 = 
glm
::
compN‹mÆize
<>(glm::
i8vec4
(-128, -1, 0, 127));

25 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
.
x
,-1.0f, glm::
ïsû⁄
<>()) ? 0 : 1;

26 
	gEº‹
 +
A
.
y
 < 0.0f ? 0 : 1;

27 
	gEº‹
 +
A
.
z
 > 0.0f ? 0 : 1;

28 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
.
w
, 1.0f, glm::
ïsû⁄
<>()) ? 0 : 1;

32 
	gglm
::
vec4
 c⁄° 
A
 = 
glm
::
compN‹mÆize
<>(glm::
u16vec4
(

33 
°d
::
numîic_limôs
<
glm
::
u16
>::
mö
(),

34 (
°d
::
numîic_limôs
<
glm
::
u16
>::
max
() >> 1) + 0,

35 (
°d
::
numîic_limôs
<
glm
::
u16
>::
max
() >> 1) + 1,

36 
°d
::
numîic_limôs
<
glm
::
u16
>::
max
()));

38 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
.
x
, 0.0f, glm::
ïsû⁄
<>()) ? 0 : 1;

39 
	gEº‹
 +
A
.
y
 < 0.5f ? 0 : 1;

40 
	gEº‹
 +
A
.
z
 > 0.5f ? 0 : 1;

41 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
.
w
, 1.0f, glm::
ïsû⁄
<>()) ? 0 : 1;

45 
	gglm
::
vec4
 c⁄° 
A
 = 
glm
::
compN‹mÆize
<>(glm::
i16vec4
(

46 
°d
::
numîic_limôs
<
glm
::
i16
>::
mö
(),

47 
°©ic_ˇ°
<
glm
::
i16
>(-1),

48 
°©ic_ˇ°
<
glm
::
i16
>(0),

49 
°d
::
numîic_limôs
<
glm
::
i16
>::
max
()));

51 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
.
x
,-1.0f, glm::
ïsû⁄
<>()) ? 0 : 1;

52 
	gEº‹
 +
A
.
y
 < 0.0f ? 0 : 1;

53 
	gEº‹
 +
A
.
z
 > 0.0f ? 0 : 1;

54 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
.
w
, 1.0f, glm::
ïsû⁄
<>()) ? 0 : 1;

57  
	gEº‹
;

61 
«me•a˚
 
	gcompSˇÀ


63 
run
()

65 
Eº‹
(0);

68 
	gglm
::
u8vec4
 c⁄° 
A
 = 
glm
::
compSˇÀ
<glm::
u8
>(glm::
vec4
(0.0f, 0.2f, 0.5f, 1.0f));

70 
	gEº‹
 +
A
.
x
 =
°d
::
numîic_limôs
<
glm
::
u8
>::
mö
() ? 0 : 1;

71 
	gEº‹
 +
A
.
y
 < (
°d
::
numîic_limôs
<
glm
::
u8
>::
max
() >> 2) ? 0 : 1;

72 
	gEº‹
 +
A
.
z
 == 127 ? 0 : 1;

73 
	gEº‹
 +
A
.
w
 == 255 ? 0 : 1;

77 
	gglm
::
i8vec4
 c⁄° 
A
 = 
glm
::
compSˇÀ
<glm::
i8
>(glm::
vec4
(0.0f,-1.0f, 0.5f, 1.0f));

79 
	gEº‹
 +
A
.
x
 == 0 ? 0 : 1;

80 
	gEº‹
 +
A
.
y
 == -128 ? 0 : 1;

81 
	gEº‹
 +
A
.
z
 == 63 ? 0 : 1;

82 
	gEº‹
 +
A
.
w
 == 127 ? 0 : 1;

86 
	gglm
::
u16vec4
 c⁄° 
A
 = 
glm
::
compSˇÀ
<glm::
u16
>(glm::
vec4
(0.0f, 0.2f, 0.5f, 1.0f));

88 
	gEº‹
 +
A
.
x
 =
°d
::
numîic_limôs
<
glm
::
u16
>::
mö
() ? 0 : 1;

89 
	gEº‹
 +
A
.
y
 < (
°d
::
numîic_limôs
<
glm
::
u16
>::
max
() >> 2) ? 0 : 1;

90 
	gEº‹
 +
A
.
z
 == 32767 ? 0 : 1;

91 
	gEº‹
 +
A
.
w
 == 65535 ? 0 : 1;

95 
	gglm
::
i16vec4
 c⁄° 
A
 = 
glm
::
compSˇÀ
<glm::
i16
>(glm::
vec4
(0.0f,-1.0f, 0.5f, 1.0f));

97 
	gEº‹
 +
A
.
x
 == 0 ? 0 : 1;

98 
	gEº‹
 +
A
.
y
 == -32768 ? 0 : 1;

99 
	gEº‹
 +
A
.
z
 == 16383 ? 0 : 1;

100 
	gEº‹
 +
A
.
w
 == 32767 ? 0 : 1;

103  
	gEº‹
;

107 
	$maö
()

109 
	`Eº‹
(0);

111 
Eº‹
 +
compN‹mÆize
::
	`run
();

112 
Eº‹
 +
compSˇÀ
::
	`run
();

114  
Eº‹
;

115 
	}
}

	@glm/test/gtx/gtx_dual_quaternion.cpp

1 
	~<glm/gtx/duÆ_qu©îni⁄.hµ
>

2 
	~<glm/gtc/m©rix_å™sf‹m.hµ
>

3 
	~<glm/gtc/ïsû⁄.hµ
>

4 
	~<glm/gtx/euÀr_™gÀs.hµ
>

5 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

6 #i‡
GLM_HAS_TRIVIAL_QUERIES


7 
	~<ty≥_åaôs
>

10 
	$myønd
()

12 
hﬁdønd
 = 1;

13  (((
hﬁdønd
 = holdrand * 214013L + 2531011L) >> 16) & 0x7fff);

14 
	}
}

16 
	$my‰™d
()

18  ((
	`myønd
()) / ( 0x7ffff )) * 2.0f - 1.0f;

19 
	}
}

21 
	$ã°_dqu©_ty≥
()

23 
glm
::
dvec3
 
vA
;

24 
glm
::
dqu©
 
dqA
,
dqB
;

25 
glm
::
dduÆqu©
 
	`C
(
dqA
,
dqB
);

26 
glm
::
dduÆqu©
 
	`B
(
dqA
);

27 
glm
::
dduÆqu©
 
	`D
(
dqA
,
vA
);

29 
	}
}

31 
	$ã°_sˇœrs
()

33 c⁄° 
Epsû⁄
 = 0.0001f;

35 
	`Eº‹
(0);

37 
glm
::
qu©
 
§c_q1
 = glm::
	`qu©
(1.0f,2.0f,3.0f,4.0f);

38 
glm
::
qu©
 
§c_q2
 = glm::
	`qu©
(5.0f,6.0f,7.0f,8.0f);

39 
glm
::
duÆqu©
 
	`§c1
(
§c_q1
,
§c_q2
);

42 
glm
::
duÆqu©
 
d°1
 = 
§c1
 * 2.0f;

43 
glm
::
duÆqu©
 
d°2
 = 2.0‡* 
§c1
;

44 
glm
::
duÆqu©
 
d°3
 = 
§c1
;

45 
d°3
 *= 2.0f;

46 
glm
::
duÆqu©
 
	`d°Cmp
(
§c_q1
 * 2.0f,
§c_q2
 * 2.0f);

47 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
d°1
.
ªÆ
,
d°Cmp
.ªÆ, 
Epsû⁄
)Ë&& glm::Æl(glm::ïsû⁄EquÆ(d°1.
duÆ
,dstCmp.dual, Epsilon)) ? 0 : 1;

48 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
d°2
.
ªÆ
,
d°Cmp
.ªÆ, 
Epsû⁄
)Ë&& glm::Æl(glm::ïsû⁄EquÆ(d°2.
duÆ
,dstCmp.dual, Epsilon)) ? 0 : 1;

49 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
d°3
.
ªÆ
,
d°Cmp
.ªÆ, 
Epsû⁄
)Ë&& glm::Æl(glm::ïsû⁄EquÆ(d°3.
duÆ
,dstCmp.dual, Epsilon)) ? 0 : 1;

53 
glm
::
duÆqu©
 
d°1
 = 
§c1
 / 2.0f;

54 
glm
::
duÆqu©
 
d°2
 = 
§c1
;

55 
d°2
 /= 2.0f;

56 
glm
::
duÆqu©
 
	`d°Cmp
(
§c_q1
 / 2.0f,
§c_q2
 / 2.0f);

57 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
d°1
.
ªÆ
,
d°Cmp
.ªÆ, 
Epsû⁄
)Ë&& glm::Æl(glm::ïsû⁄EquÆ(d°1.
duÆ
,dstCmp.dual, Epsilon)) ? 0 : 1;

58 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
d°2
.
ªÆ
,
d°Cmp
.ªÆ, 
Epsû⁄
)Ë&& glm::Æl(glm::ïsû⁄EquÆ(d°2.
duÆ
,dstCmp.dual, Epsilon)) ? 0 : 1;

60  
Eº‹
;

61 
	}
}

63 
	$ã°_övî£
()

65 
	`Eº‹
(0);

67 c⁄° 
Epsû⁄
 = 0.0001f;

69 
glm
::
duÆqu©
 
dqid
;

70 
glm
::
m©4x4
 
	`mid
(1.0f);

72 
j
 = 0; j < 100; ++j)

74 
glm
::
m©4x4
 
rŸ
 = glm::
	`yawPôchRﬁl
(
	`my‰™d
() * 360.0f, myfrand() * 360.0f, myfrand() * 360.0f);

75 
glm
::
vec3
 
vt
 = glm::
	`vec3
(
	`my‰™d
() * 10.0f, myfrand() * 10.0f, myfrand() * 10.0f);

77 
glm
::
m©4x4
 
m
 = glm::
	`å™¶©e
(
mid
, 
vt
Ë* 
rŸ
;

79 
glm
::
qu©
 
qr
 = glm::
	`qu©_ˇ°
(
m
);

81 
glm
::
duÆqu©
 
	`dq
(
qr
);

83 
glm
::
duÆqu©
 
övdq
 = glm::
	`övî£
(
dq
);

85 
glm
::
duÆqu©
 
r1
 = 
övdq
 * 
dq
;

86 
glm
::
duÆqu©
 
r2
 = 
dq
 * 
övdq
;

88 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
r1
.
ªÆ
, 
dqid
.ªÆ, 
Epsû⁄
)Ë&& glm::Æl(glm::ïsû⁄EquÆ‘1.
duÆ
, dqid.dual, Epsilon)) ? 0 : 1;

89 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
r2
.
ªÆ
, 
dqid
.ªÆ, 
Epsû⁄
)Ë&& glm::Æl(glm::ïsû⁄EquÆ‘2.
duÆ
, dqid.dual, Epsilon)) ? 0 : 1;

92 
glm
::
duÆqu©
 
	`r
 ( glm::
	`qu©
–
	`my‰™d
(Ë* glm::
pi
<>() * 2.0f, myfrand(), myfrand(), myfrand() ),

93 
glm
::
	`vec3
(
	`my‰™d
() * 10.0f, myfrand() * 10.0f, myfrand() * 10.0f) );

94 
glm
::
duÆqu©
 
riq
 = (
r
 * 
övdq
Ë* 
dq
;

95 
glm
::
duÆqu©
 
rqi
 = (
r
 * 
dq
Ë* 
övdq
;

97 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
riq
.
ªÆ
, 
rqi
.ªÆ, 
Epsû⁄
)Ë&& glm::Æl(glm::ïsû⁄EquÆ‘iq.
duÆ
,Ñqi.dual, Epsilon)) ? 0 : 1;

100  
Eº‹
;

101 
	}
}

103 
	$ã°_mul
()

105 
	`Eº‹
(0);

107 c⁄° 
Epsû⁄
 = 0.0001f;

109 
glm
::
m©4x4
 
	`mid
(1.0f);

111 
j
 = 0; j < 100; ++j)

114 
glm
::
vec3
 
vt1
 = glm::
	`vec3
(
	`my‰™d
() * 10.0f, myfrand() * 10.0f, myfrand() * 10.0f);

115 
glm
::
vec3
 
vt2
 = glm::
	`vec3
(
	`my‰™d
() * 10.0f, myfrand() * 10.0f, myfrand() * 10.0f);

117 
glm
::
m©4x4
 
rŸ1
 = glm::
	`yawPôchRﬁl
(
	`my‰™d
() * 360.0f, myfrand() * 360.0f, myfrand() * 360.0f);

118 
glm
::
m©4x4
 
rŸ2
 = glm::
	`yawPôchRﬁl
(
	`my‰™d
() * 360.0f, myfrand() * 360.0f, myfrand() * 360.0f);

119 
glm
::
m©4x4
 
m1
 = glm::
	`å™¶©e
(
mid
, 
vt1
Ë* 
rŸ1
;

120 
glm
::
m©4x4
 
m2
 = glm::
	`å™¶©e
(
mid
, 
vt2
Ë* 
rŸ2
;

121 
glm
::
m©4x4
 
m3
 = 
m2
 * 
m1
;

122 
glm
::
m©4x4
 
m4
 = 
m1
 * 
m2
;

124 
glm
::
qu©
 
qrŸ1
 = glm::
	`qu©_ˇ°
(
rŸ1
);

125 
glm
::
qu©
 
qrŸ2
 = glm::
	`qu©_ˇ°
(
rŸ2
);

127 
glm
::
duÆqu©
 
dq1
 = glm::
	`duÆqu©
(
qrŸ1
,
vt1
);

128 
glm
::
duÆqu©
 
dq2
 = glm::
	`duÆqu©
(
qrŸ2
,
vt2
);

129 
glm
::
duÆqu©
 
dq3
 = 
dq2
 * 
dq1
;

130 
glm
::
duÆqu©
 
dq4
 = 
dq1
 * 
dq2
;

132 
i
 = 0; i < 100; ++i)

134 
glm
::
vec4
 
§c_±
 = glm::
	`vec4
(
	`my‰™d
() * 4.0f, myfrand() * 5.0f, myfrand() * 3.0f,1.0f);

136 
glm
::
vec4
 
d°_±_m3
 = 
m3
 * 
§c_±
;

137 
glm
::
vec4
 
d°_±_dq3
 = 
dq3
 * 
§c_±
;

139 
glm
::
vec4
 
d°_±_m3_i
 = glm::
	`övî£
(
m3
Ë* 
§c_±
;

140 
glm
::
vec4
 
d°_±_dq3_i
 = 
§c_±
 * 
dq3
;

142 
glm
::
vec4
 
d°_±_m4
 = 
m4
 * 
§c_±
;

143 
glm
::
vec4
 
d°_±_dq4
 = 
dq4
 * 
§c_±
;

145 
glm
::
vec4
 
d°_±_m4_i
 = glm::
	`övî£
(
m4
Ë* 
§c_±
;

146 
glm
::
vec4
 
d°_±_dq4_i
 = 
§c_±
 * 
dq4
;

148 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
d°_±_m3
, 
d°_±_dq3
, 
Epsû⁄
)) ? 0 : 1;

149 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
d°_±_m4
, 
d°_±_dq4
, 
Epsû⁄
)) ? 0 : 1;

150 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
d°_±_m3_i
, 
d°_±_dq3_i
, 
Epsû⁄
)) ? 0 : 1;

151 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(
d°_±_m4_i
, 
d°_±_dq4_i
, 
Epsû⁄
)) ? 0 : 1;

155  
Eº‹
;

156 
	}
}

158 
	$ã°_duÆ_qu©_˘r
()

160 
	`Eº‹
(0);

162 #i‡
GLM_HAS_TRIVIAL_QUERIES


167 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
duÆqu©
>::
vÆue
 ? 0 : 1;

168 
Eº‹
 +
°d
::
is_åivüŒy_c›yabÀ
<
glm
::
dduÆqu©
>::
vÆue
 ? 0 : 1;

170 
Eº‹
 +
°d
::
is_c›y_c⁄°ru˘ibÀ
<
glm
::
duÆqu©
>::
vÆue
 ? 0 : 1;

171 
Eº‹
 +
°d
::
is_c›y_c⁄°ru˘ibÀ
<
glm
::
dduÆqu©
>::
vÆue
 ? 0 : 1;

174  
Eº‹
;

175 
	}
}

177 
	$ã°_size
()

179 
Eº‹
 = 0;

181 
Eº‹
 +32 =(
glm
::
duÆqu©
) ? 0 : 1;

182 
Eº‹
 +64 =(
glm
::
dduÆqu©
) ? 0 : 1;

183 
Eº‹
 +
glm
::
	`duÆqu©
().
	`Àngth
() == 2 ? 0 : 1;

184 
Eº‹
 +
glm
::
	`dduÆqu©
().
	`Àngth
() == 2 ? 0 : 1;

185 
Eº‹
 +
glm
::
duÆqu©
::
	`Àngth
() == 2 ? 0 : 1;

186 
Eº‹
 +
glm
::
dduÆqu©
::
	`Àngth
() == 2 ? 0 : 1;

188  
Eº‹
;

189 
	}
}

191 
	$maö
()

193 
Eº‹
 = 0;

195 
Eº‹
 +
	`ã°_duÆ_qu©_˘r
();

196 
Eº‹
 +
	`ã°_dqu©_ty≥
();

197 
Eº‹
 +
	`ã°_sˇœrs
();

198 
Eº‹
 +
	`ã°_övî£
();

199 
Eº‹
 +
	`ã°_mul
();

200 
Eº‹
 +
	`ã°_size
();

202  
Eº‹
;

203 
	}
}

	@glm/test/gtx/gtx_euler_angle.cpp

3 
	~<glm/gtc/m©rix_å™sf‹m.hµ
>

4 
	~<glm/gtc/ïsû⁄.hµ
>

5 
	~<glm/gtx/°rög_ˇ°.hµ
>

6 
	~<glm/gtx/euÀr_™gÀs.hµ
>

7 
	~<c°dio
>

9 
«me•a˚
 
	gã°_euÀrAngÀX


11 
ã°
()

13 
	gEº‹
 = 0;

15 c⁄° 
AngÀ
(
glm
::
pi
<>() * 0.5f);

16 
	gglm
::
vec3
 c⁄° 
X
(1.0f, 0.0f, 0.0f);

18 
	gglm
::
vec4
 c⁄° 
Y
(0.0f, 1.0f, 0.0f, 1.0f);

19 
	gglm
::
vec4
 c⁄° 
Y1
 = 
glm
::
rŸ©e
(glm::
m©4
(1.0f), 
AngÀ
, 
X
Ë* 
	gY
;

20 
	gglm
::
vec4
 c⁄° 
Y2
 = 
glm
::
euÀrAngÀX
(
AngÀ
Ë* 
Y
;

21 
	gglm
::
vec4
 c⁄° 
Y3
 = 
glm
::
euÀrAngÀXY
(
AngÀ
, 0.0fË* 
	gY
;

22 
	gglm
::
vec4
 c⁄° 
Y4
 = 
glm
::
euÀrAngÀYX
(0.0f, 
AngÀ
Ë* 
	gY
;

23 
	gglm
::
vec4
 c⁄° 
Y5
 = 
glm
::
euÀrAngÀXZ
(
AngÀ
, 0.0fË* 
	gY
;

24 
	gglm
::
vec4
 c⁄° 
Y6
 = 
glm
::
euÀrAngÀZX
(0.0f, 
AngÀ
Ë* 
	gY
;

25 
	gglm
::
vec4
 c⁄° 
Y7
 = 
glm
::
euÀrAngÀYXZ
(0.0f, 
AngÀ
, 0.0fË* 
	gY
;

26 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Y1
, 
Y2
, 0.00001f)) ? 0 : 1;

27 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Y1
, 
Y3
, 0.00001f)) ? 0 : 1;

28 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Y1
, 
Y4
, 0.00001f)) ? 0 : 1;

29 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Y1
, 
Y5
, 0.00001f)) ? 0 : 1;

30 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Y1
, 
Y6
, 0.00001f)) ? 0 : 1;

31 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Y1
, 
Y7
, 0.00001f)) ? 0 : 1;

33 
	gglm
::
vec4
 c⁄° 
Z
(0.0f, 0.0f, 1.0f, 1.0f);

34 
	gglm
::
vec4
 c⁄° 
Z1
 = 
glm
::
rŸ©e
(glm::
m©4
(1.0f), 
AngÀ
, 
X
Ë* 
	gZ
;

35 
	gglm
::
vec4
 c⁄° 
Z2
 = 
glm
::
euÀrAngÀX
(
AngÀ
Ë* 
Z
;

36 
	gglm
::
vec4
 c⁄° 
Z3
 = 
glm
::
euÀrAngÀXY
(
AngÀ
, 0.0fË* 
	gZ
;

37 
	gglm
::
vec4
 c⁄° 
Z4
 = 
glm
::
euÀrAngÀYX
(0.0f, 
AngÀ
Ë* 
	gZ
;

38 
	gglm
::
vec4
 c⁄° 
Z5
 = 
glm
::
euÀrAngÀXZ
(
AngÀ
, 0.0fË* 
	gZ
;

39 
	gglm
::
vec4
 c⁄° 
Z6
 = 
glm
::
euÀrAngÀZX
(0.0f, 
AngÀ
Ë* 
	gZ
;

40 
	gglm
::
vec4
 c⁄° 
Z7
 = 
glm
::
euÀrAngÀYXZ
(0.0f, 
AngÀ
, 0.0fË* 
	gZ
;

41 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z2
, 0.00001f)) ? 0 : 1;

42 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z3
, 0.00001f)) ? 0 : 1;

43 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z4
, 0.00001f)) ? 0 : 1;

44 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z5
, 0.00001f)) ? 0 : 1;

45 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z6
, 0.00001f)) ? 0 : 1;

46 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z7
, 0.00001f)) ? 0 : 1;

48  
	gEº‹
;

52 
«me•a˚
 
	gã°_euÀrAngÀY


54 
ã°
()

56 
	gEº‹
 = 0;

58 c⁄° 
AngÀ
(
glm
::
pi
<>() * 0.5f);

59 
	gglm
::
vec3
 c⁄° 
Y
(0.0f, 1.0f, 0.0f);

61 
	gglm
::
vec4
 c⁄° 
X
(1.0f, 0.0f, 0.0f, 1.0f);

62 
	gglm
::
vec4
 c⁄° 
X1
 = 
glm
::
rŸ©e
(glm::
m©4
(1.0f), 
AngÀ
, 
Y
Ë* 
	gX
;

63 
	gglm
::
vec4
 c⁄° 
X2
 = 
glm
::
euÀrAngÀY
(
AngÀ
Ë* 
X
;

64 
	gglm
::
vec4
 c⁄° 
X3
 = 
glm
::
euÀrAngÀYX
(
AngÀ
, 0.0fË* 
	gX
;

65 
	gglm
::
vec4
 c⁄° 
X4
 = 
glm
::
euÀrAngÀXY
(0.0f, 
AngÀ
Ë* 
	gX
;

66 
	gglm
::
vec4
 c⁄° 
X5
 = 
glm
::
euÀrAngÀYZ
(
AngÀ
, 0.0fË* 
	gX
;

67 
	gglm
::
vec4
 c⁄° 
X6
 = 
glm
::
euÀrAngÀZY
(0.0f, 
AngÀ
Ë* 
	gX
;

68 
	gglm
::
vec4
 c⁄° 
X7
 = 
glm
::
euÀrAngÀYXZ
(
AngÀ
, 0.0f, 0.0fË* 
	gX
;

69 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
X1
, 
X2
, 0.00001f)) ? 0 : 1;

70 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
X1
, 
X3
, 0.00001f)) ? 0 : 1;

71 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
X1
, 
X4
, 0.00001f)) ? 0 : 1;

72 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
X1
, 
X5
, 0.00001f)) ? 0 : 1;

73 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
X1
, 
X6
, 0.00001f)) ? 0 : 1;

74 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
X1
, 
X7
, 0.00001f)) ? 0 : 1;

76 
	gglm
::
vec4
 c⁄° 
Z
(0.0f, 0.0f, 1.0f, 1.0f);

77 
	gglm
::
vec4
 c⁄° 
Z1
 = 
glm
::
euÀrAngÀY
(
AngÀ
Ë* 
Z
;

78 
	gglm
::
vec4
 c⁄° 
Z2
 = 
glm
::
rŸ©e
(glm::
m©4
(1.0f), 
AngÀ
, 
Y
Ë* 
	gZ
;

79 
	gglm
::
vec4
 c⁄° 
Z3
 = 
glm
::
euÀrAngÀYX
(
AngÀ
, 0.0fË* 
	gZ
;

80 
	gglm
::
vec4
 c⁄° 
Z4
 = 
glm
::
euÀrAngÀXY
(0.0f, 
AngÀ
Ë* 
	gZ
;

81 
	gglm
::
vec4
 c⁄° 
Z5
 = 
glm
::
euÀrAngÀYZ
(
AngÀ
, 0.0fË* 
	gZ
;

82 
	gglm
::
vec4
 c⁄° 
Z6
 = 
glm
::
euÀrAngÀZY
(0.0f, 
AngÀ
Ë* 
	gZ
;

83 
	gglm
::
vec4
 c⁄° 
Z7
 = 
glm
::
euÀrAngÀYXZ
(
AngÀ
, 0.0f, 0.0fË* 
	gZ
;

84 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z2
, 0.00001f)) ? 0 : 1;

85 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z3
, 0.00001f)) ? 0 : 1;

86 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z4
, 0.00001f)) ? 0 : 1;

87 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z5
, 0.00001f)) ? 0 : 1;

88 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z6
, 0.00001f)) ? 0 : 1;

89 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z7
, 0.00001f)) ? 0 : 1;

91  
	gEº‹
;

95 
«me•a˚
 
	gã°_euÀrAngÀZ


97 
ã°
()

99 
	gEº‹
 = 0;

101 c⁄° 
AngÀ
(
glm
::
pi
<>() * 0.5f);

102 
	gglm
::
vec3
 c⁄° 
Z
(0.0f, 0.0f, 1.0f);

104 
	gglm
::
vec4
 c⁄° 
X
(1.0f, 0.0f, 0.0f, 1.0f);

105 
	gglm
::
vec4
 c⁄° 
X1
 = 
glm
::
rŸ©e
(glm::
m©4
(1.0f), 
AngÀ
, 
Z
Ë* 
	gX
;

106 
	gglm
::
vec4
 c⁄° 
X2
 = 
glm
::
euÀrAngÀZ
(
AngÀ
Ë* 
X
;

107 
	gglm
::
vec4
 c⁄° 
X3
 = 
glm
::
euÀrAngÀZX
(
AngÀ
, 0.0fË* 
	gX
;

108 
	gglm
::
vec4
 c⁄° 
X4
 = 
glm
::
euÀrAngÀXZ
(0.0f, 
AngÀ
Ë* 
	gX
;

109 
	gglm
::
vec4
 c⁄° 
X5
 = 
glm
::
euÀrAngÀZY
(
AngÀ
, 0.0fË* 
	gX
;

110 
	gglm
::
vec4
 c⁄° 
X6
 = 
glm
::
euÀrAngÀYZ
(0.0f, 
AngÀ
Ë* 
	gX
;

111 
	gglm
::
vec4
 c⁄° 
X7
 = 
glm
::
euÀrAngÀYXZ
(0.0f, 0.0f, 
AngÀ
Ë* 
	gX
;

112 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
X1
, 
X2
, 0.00001f)) ? 0 : 1;

113 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
X1
, 
X3
, 0.00001f)) ? 0 : 1;

114 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
X1
, 
X4
, 0.00001f)) ? 0 : 1;

115 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
X1
, 
X5
, 0.00001f)) ? 0 : 1;

116 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
X1
, 
X6
, 0.00001f)) ? 0 : 1;

117 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
X1
, 
X7
, 0.00001f)) ? 0 : 1;

119 
	gglm
::
vec4
 c⁄° 
Y
(1.0f, 0.0f, 0.0f, 1.0f);

120 
	gglm
::
vec4
 c⁄° 
Z1
 = 
glm
::
rŸ©e
(glm::
m©4
(1.0f), 
AngÀ
, 
Z
Ë* 
	gY
;

121 
	gglm
::
vec4
 c⁄° 
Z2
 = 
glm
::
euÀrAngÀZ
(
AngÀ
Ë* 
Y
;

122 
	gglm
::
vec4
 c⁄° 
Z3
 = 
glm
::
euÀrAngÀZX
(
AngÀ
, 0.0fË* 
	gY
;

123 
	gglm
::
vec4
 c⁄° 
Z4
 = 
glm
::
euÀrAngÀXZ
(0.0f, 
AngÀ
Ë* 
	gY
;

124 
	gglm
::
vec4
 c⁄° 
Z5
 = 
glm
::
euÀrAngÀZY
(
AngÀ
, 0.0fË* 
	gY
;

125 
	gglm
::
vec4
 c⁄° 
Z6
 = 
glm
::
euÀrAngÀYZ
(0.0f, 
AngÀ
Ë* 
	gY
;

126 
	gglm
::
vec4
 c⁄° 
Z7
 = 
glm
::
euÀrAngÀYXZ
(0.0f, 0.0f, 
AngÀ
Ë* 
	gY
;

127 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z2
, 0.00001f)) ? 0 : 1;

128 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z3
, 0.00001f)) ? 0 : 1;

129 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z4
, 0.00001f)) ? 0 : 1;

130 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z5
, 0.00001f)) ? 0 : 1;

131 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z6
, 0.00001f)) ? 0 : 1;

132 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
Z1
, 
Z7
, 0.00001f)) ? 0 : 1;

134  
	gEº‹
;

138 
«me•a˚
 
	gã°_euÀrAngÀXY


140 
ã°
()

142 
	gEº‹
 = 0;

144 
	gglm
::
vec4
 c⁄° 
V
(1.0f);

146 c⁄° 
AngÀX
(
glm
::
pi
<>() * 0.5f);

147 c⁄° 
AngÀY
(
glm
::
pi
<>() * 0.25f);

149 
	gglm
::
vec3
 c⁄° 
axisX
(1.0f, 0.0f, 0.0f);

150 
	gglm
::
vec3
 c⁄° 
axisY
(0.0f, 1.0f, 0.0f);

152 
	gglm
::
vec4
 c⁄° 
V1
 = (
glm
::
rŸ©e
(glm::
m©4
(1.0f), 
AngÀX
, 
axisX
Ë* glm::rŸ©e(glm::m©4(1.0f), 
AngÀY
, 
axisY
)Ë* 
	gV
;

153 
	gglm
::
vec4
 c⁄° 
V2
 = 
glm
::
euÀrAngÀXY
(
AngÀX
, 
AngÀY
Ë* 
	gV
;

154 
	gglm
::
vec4
 c⁄° 
V3
 = 
glm
::
euÀrAngÀX
(
AngÀX
Ë* glm::
euÀrAngÀY
(
AngÀY
Ë* 
V
;

155 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
V1
, 
V2
, 0.00001f)) ? 0 : 1;

156 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
V1
, 
V3
, 0.00001f)) ? 0 : 1;

158  
	gEº‹
;

162 
«me•a˚
 
	gã°_euÀrAngÀYX


164 
ã°
()

166 
	gEº‹
 = 0;

168 
	gglm
::
vec4
 c⁄° 
V
(1.0f);

170 c⁄° 
AngÀX
(
glm
::
pi
<>() * 0.5f);

171 c⁄° 
AngÀY
(
glm
::
pi
<>() * 0.25f);

173 
	gglm
::
vec3
 c⁄° 
axisX
(1.0f, 0.0f, 0.0f);

174 
	gglm
::
vec3
 c⁄° 
axisY
(0.0f, 1.0f, 0.0f);

176 
	gglm
::
vec4
 c⁄° 
V1
 = (
glm
::
rŸ©e
(glm::
m©4
(1.0f), 
AngÀY
, 
axisY
Ë* glm::rŸ©e(glm::m©4(1.0f), 
AngÀX
, 
axisX
)Ë* 
	gV
;

177 
	gglm
::
vec4
 c⁄° 
V2
 = 
glm
::
euÀrAngÀYX
(
AngÀY
, 
AngÀX
Ë* 
	gV
;

178 
	gglm
::
vec4
 c⁄° 
V3
 = 
glm
::
euÀrAngÀY
(
AngÀY
Ë* glm::
euÀrAngÀX
(
AngÀX
Ë* 
V
;

179 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
V1
, 
V2
, 0.00001f)) ? 0 : 1;

180 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
V1
, 
V3
, 0.00001f)) ? 0 : 1;

182  
	gEº‹
;

186 
«me•a˚
 
	gã°_euÀrAngÀXZ


188 
ã°
()

190 
	gEº‹
 = 0;

192 
	gglm
::
vec4
 c⁄° 
V
(1.0f);

194 c⁄° 
AngÀX
(
glm
::
pi
<>() * 0.5f);

195 c⁄° 
AngÀZ
(
glm
::
pi
<>() * 0.25f);

197 
	gglm
::
vec3
 c⁄° 
axisX
(1.0f, 0.0f, 0.0f);

198 
	gglm
::
vec3
 c⁄° 
axisZ
(0.0f, 0.0f, 1.0f);

200 
	gglm
::
vec4
 c⁄° 
V1
 = (
glm
::
rŸ©e
(glm::
m©4
(1.0f), 
AngÀX
, 
axisX
Ë* glm::rŸ©e(glm::m©4(1.0f), 
AngÀZ
, 
axisZ
)Ë* 
	gV
;

201 
	gglm
::
vec4
 c⁄° 
V2
 = 
glm
::
euÀrAngÀXZ
(
AngÀX
, 
AngÀZ
Ë* 
	gV
;

202 
	gglm
::
vec4
 c⁄° 
V3
 = 
glm
::
euÀrAngÀX
(
AngÀX
Ë* glm::
euÀrAngÀZ
(
AngÀZ
Ë* 
V
;

203 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
V1
, 
V2
, 0.00001f)) ? 0 : 1;

204 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
V1
, 
V3
, 0.00001f)) ? 0 : 1;

206  
	gEº‹
;

210 
«me•a˚
 
	gã°_euÀrAngÀZX


212 
ã°
()

214 
	gEº‹
 = 0;

216 
	gglm
::
vec4
 c⁄° 
V
(1.0f);

218 c⁄° 
AngÀX
(
glm
::
pi
<>() * 0.5f);

219 c⁄° 
AngÀZ
(
glm
::
pi
<>() * 0.25f);

221 
	gglm
::
vec3
 c⁄° 
axisX
(1.0f, 0.0f, 0.0f);

222 
	gglm
::
vec3
 c⁄° 
axisZ
(0.0f, 0.0f, 1.0f);

224 
	gglm
::
vec4
 c⁄° 
V1
 = (
glm
::
rŸ©e
(glm::
m©4
(1.0f), 
AngÀZ
, 
axisZ
Ë* glm::rŸ©e(glm::m©4(1.0f), 
AngÀX
, 
axisX
)Ë* 
	gV
;

225 
	gglm
::
vec4
 c⁄° 
V2
 = 
glm
::
euÀrAngÀZX
(
AngÀZ
, 
AngÀX
Ë* 
	gV
;

226 
	gglm
::
vec4
 c⁄° 
V3
 = 
glm
::
euÀrAngÀZ
(
AngÀZ
Ë* glm::
euÀrAngÀX
(
AngÀX
Ë* 
V
;

227 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
V1
, 
V2
, 0.00001f)) ? 0 : 1;

228 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
V1
, 
V3
, 0.00001f)) ? 0 : 1;

230  
	gEº‹
;

234 
«me•a˚
 
	gã°_euÀrAngÀYZ


236 
ã°
()

238 
	gEº‹
 = 0;

240 
	gglm
::
vec4
 c⁄° 
V
(1.0f);

242 c⁄° 
AngÀY
(
glm
::
pi
<>() * 0.5f);

243 c⁄° 
AngÀZ
(
glm
::
pi
<>() * 0.25f);

245 
	gglm
::
vec3
 c⁄° 
axisX
(1.0f, 0.0f, 0.0f);

246 
	gglm
::
vec3
 c⁄° 
axisY
(0.0f, 1.0f, 0.0f);

247 
	gglm
::
vec3
 c⁄° 
axisZ
(0.0f, 0.0f, 1.0f);

249 
	gglm
::
vec4
 c⁄° 
V1
 = (
glm
::
rŸ©e
(glm::
m©4
(1.0f), 
AngÀY
, 
axisY
Ë* glm::rŸ©e(glm::m©4(1.0f), 
AngÀZ
, 
axisZ
)Ë* 
	gV
;

250 
	gglm
::
vec4
 c⁄° 
V2
 = 
glm
::
euÀrAngÀYZ
(
AngÀY
, 
AngÀZ
Ë* 
	gV
;

251 
	gglm
::
vec4
 c⁄° 
V3
 = 
glm
::
euÀrAngÀY
(
AngÀY
Ë* glm::
euÀrAngÀZ
(
AngÀZ
Ë* 
V
;

252 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
V1
, 
V2
, 0.00001f)) ? 0 : 1;

253 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
V1
, 
V3
, 0.00001f)) ? 0 : 1;

255  
	gEº‹
;

259 
«me•a˚
 
	gã°_euÀrAngÀZY


261 
ã°
()

263 
	gEº‹
 = 0;

265 
	gglm
::
vec4
 c⁄° 
V
(1.0f);

267 c⁄° 
AngÀY
(
glm
::
pi
<>() * 0.5f);

268 c⁄° 
AngÀZ
(
glm
::
pi
<>() * 0.25f);

270 
	gglm
::
vec3
 c⁄° 
axisX
(1.0f, 0.0f, 0.0f);

271 
	gglm
::
vec3
 c⁄° 
axisY
(0.0f, 1.0f, 0.0f);

272 
	gglm
::
vec3
 c⁄° 
axisZ
(0.0f, 0.0f, 1.0f);

274 
	gglm
::
vec4
 c⁄° 
V1
 = (
glm
::
rŸ©e
(glm::
m©4
(1.0f), 
AngÀZ
, 
axisZ
Ë* glm::rŸ©e(glm::m©4(1.0f), 
AngÀY
, 
axisY
)Ë* 
	gV
;

275 
	gglm
::
vec4
 c⁄° 
V2
 = 
glm
::
euÀrAngÀZY
(
AngÀZ
, 
AngÀY
Ë* 
	gV
;

276 
	gglm
::
vec4
 c⁄° 
V3
 = 
glm
::
euÀrAngÀZ
(
AngÀZ
Ë* glm::
euÀrAngÀY
(
AngÀY
Ë* 
V
;

277 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
V1
, 
V2
, 0.00001f)) ? 0 : 1;

278 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
V1
, 
V3
, 0.00001f)) ? 0 : 1;

280  
	gEº‹
;

284 
«me•a˚
 
	gã°_euÀrAngÀYXZ


286 
ã°
()

288 
	gglm
::
f32
 
fú°
 = 1.046f;

289 
	gglm
::
f32
 
£c⁄d
 = 0.52f;

290 
	gglm
::
f32
 
thúd
 = -0.785f;

292 
	gglm
::
fm©4
 
rŸ©i⁄EuÀr
 = 
glm
::
euÀrAngÀYXZ
(
fú°
, 
£c⁄d
, 
thúd
);

294 
	gglm
::
fm©4
 
rŸ©i⁄InvîãdY
 = 
glm
::
euÀrAngÀY
(-1.f*
fú°
Ë* glm::
euÀrAngÀX
(
£c⁄d
Ë* glm::
euÀrAngÀZ
(
thúd
);

295 
	gglm
::
fm©4
 
rŸ©i⁄Dumb
 = 
glm
::fmat4();

296 
	grŸ©i⁄Dumb
 = 
glm
::
rŸ©e
(
rŸ©i⁄Dumb
, 
fú°
, glm::
fvec3
(0,1,0));

297 
	grŸ©i⁄Dumb
 = 
glm
::
rŸ©e
(
rŸ©i⁄Dumb
, 
£c⁄d
, glm::
fvec3
(1,0,0));

298 
	grŸ©i⁄Dumb
 = 
glm
::
rŸ©e
(
rŸ©i⁄Dumb
, 
thúd
, glm::
fvec3
(0,0,1));

300 
	g°d
::
¥ötf
("%s\n", 
glm
::
to_°rög
(glm::
fm©3
(
rŸ©i⁄EuÀr
)).
c_°r
());

301 
	g°d
::
¥ötf
("%s\n", 
glm
::
to_°rög
(glm::
fm©3
(
rŸ©i⁄Dumb
)).
c_°r
());

302 
	g°d
::
¥ötf
("%s\n", 
glm
::
to_°rög
(glm::
fm©3
(
rŸ©i⁄InvîãdY
)).
c_°r
());

304 
	g°d
::
¥ötf
("\nRESIDUAL\n");

305 
	g°d
::
¥ötf
("%s\n", 
glm
::
to_°rög
(glm::
fm©3
(
rŸ©i⁄EuÀr
-(
rŸ©i⁄Dumb
))).
c_°r
());

306 
	g°d
::
¥ötf
("%s\n", 
glm
::
to_°rög
(glm::
fm©3
(
rŸ©i⁄EuÀr
-(
rŸ©i⁄InvîãdY
))).
c_°r
());

312 
	$maö
()

314 
Eº‹
 = 0;

316 
Eº‹
 +
ã°_euÀrAngÀX
::
	`ã°
();

317 
Eº‹
 +
ã°_euÀrAngÀY
::
	`ã°
();

318 
Eº‹
 +
ã°_euÀrAngÀZ
::
	`ã°
();

319 
Eº‹
 +
ã°_euÀrAngÀXY
::
	`ã°
();

320 
Eº‹
 +
ã°_euÀrAngÀYX
::
	`ã°
();

321 
Eº‹
 +
ã°_euÀrAngÀXZ
::
	`ã°
();

322 
Eº‹
 +
ã°_euÀrAngÀZX
::
	`ã°
();

323 
Eº‹
 +
ã°_euÀrAngÀYZ
::
	`ã°
();

324 
Eº‹
 +
ã°_euÀrAngÀZY
::
	`ã°
();

325 
Eº‹
 +
ã°_euÀrAngÀYXZ
::
	`ã°
();

327  
Eº‹
;

328 
	}
}

	@glm/test/gtx/gtx_extend.cpp

1 
	~<glm/gtx/exãnd.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_extended_min_max.cpp

1 
	~<glm/gtx/exãnded_mö_max.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_extented_min_max.cpp

32 
	~<glm/gtx/exãnded_mö_max.hµ
>

34 
	$maö
()

36 
	`Eº‹
(0);

38  
Eº‹
;

39 
	}
}

	@glm/test/gtx/gtx_fast_exponential.cpp

1 
	~<glm/gtx/Á°_exp⁄ítül.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_fast_square_root.cpp

1 
	~<glm/gtx/Á°_squ¨e_roŸ.hµ
>

2 
	~<glm/gtc/ty≥_¥ecisi⁄.hµ
>

3 
	~<glm/gtc/ïsû⁄.hµ
>

4 
	~<glm/ve˘‹_ªœti⁄Æ.hµ
>

6 
	$ã°_Á°Invî£Sqπ
()

8 
	`Eº‹
(0);

10 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(glm::
	`Á°Invî£Sqπ
(1.0f), 1.0f, 0.01f) ? 0 : 1;

11 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(glm::
	`Á°Invî£Sqπ
(1.0), 1.0, 0.01) ? 0 : 1;

12 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(glm::
	`Á°Invî£Sqπ
(glm::
	`vec2
(1.0f)), glm::vec2(1.0f), 0.01f)) ? 0 : 1;

13 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(glm::
	`Á°Invî£Sqπ
(glm::
	`dvec3
(1.0)), glm::dvec3(1.0), 0.01)) ? 0 : 1;

14 
Eº‹
 +
glm
::
	`Æl
(glm::
	`ïsû⁄EquÆ
(glm::
	`Á°Invî£Sqπ
(glm::
	`dvec4
(1.0)), glm::dvec4(1.0), 0.01)) ? 0 : 1;

18 
	}
}

20 
	$ã°_Á°Di°™˚
()

22 
	`Eº‹
(0);

24 
glm
::
mediump_f32
 
A
 = glm::
	`Á°Di°™˚
(glm::
	`mediump_f32
(0.0f), glm::mediump_f32(1.0f));

25 
glm
::
mediump_f32
 
B
 = glm::
	`Á°Di°™˚
(glm::
	`mediump_f32vec2
(0.0f), glm::mediump_f32vec2(1.0f, 0.0f));

26 
glm
::
mediump_f32
 
C
 = glm::
	`Á°Di°™˚
(glm::
	`mediump_f32vec3
(0.0f), glm::mediump_f32vec3(1.0f, 0.0f, 0.0f));

27 
glm
::
mediump_f32
 
D
 = glm::
	`Á°Di°™˚
(glm::
	`mediump_f32vec4
(0.0f), glm::mediump_f32vec4(1.0f, 0.0f, 0.0f, 0.0f));

29 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
A
, glm::
	`mediump_f32
(1.0f), glm::mediump_f32(0.01f)) ? 0 : 1;

30 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
B
, glm::
	`mediump_f32
(1.0f), glm::mediump_f32(0.01f)) ? 0 : 1;

31 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
, glm::
	`mediump_f32
(1.0f), glm::mediump_f32(0.01f)) ? 0 : 1;

32 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
D
, glm::
	`mediump_f32
(1.0f), glm::mediump_f32(0.01f)) ? 0 : 1;

34  
Eº‹
;

35 
	}
}

37 
	$maö
()

39 
	`Eº‹
(0);

41 
Eº‹
 +
	`ã°_Á°Invî£Sqπ
();

42 
Eº‹
 +
	`ã°_Á°Di°™˚
();

44  
Eº‹
;

45 
	}
}

	@glm/test/gtx/gtx_fast_trigonometry.cpp

1 
	~<glm/gtc/ty≥_¥ecisi⁄.hµ
>

2 
	~<glm/gtx/Á°_åig⁄omëry.hµ
>

3 
	~<glm/gtx/öãgî.hµ
>

4 
	~<glm/gtx/comm⁄.hµ
>

5 
	~<glm/gtc/c⁄°™ts.hµ
>

6 
	~<glm/gtc/uÕ.hµ
>

7 
	~<glm/gtc/vec1.hµ
>

8 
	~<glm/åig⁄omëric.hµ
>

9 
	~<cm©h
>

10 
	~<˘ime
>

11 
	~<c°dio
>

12 
	~<ve˘‹
>

14 
«me•a˚
 
	gÁ°Cos


16 
≥rf
(
boﬁ
 
NextFlﬂt
)

18 c⁄° 
	gbegö
 = -
glm
::
pi
<>();

19 c⁄° 
	gíd
 = 
glm
::
pi
<>();

20 
	gªsu…
 = 0.f;

22 c⁄° 
	g°d
::
˛ock_t
 
time°amp1
 = 
°d
::
˛ock
();

23 
	gi
 = 
begö
; i < 
	gíd
; i = 
NextFlﬂt
 ? 
glm
::
√xt_Êﬂt
(
i
) : i += 0.1f)

24 
ªsu…
 = 
glm
::
Á°Cos
(
i
);

26 c⁄° 
	g°d
::
˛ock_t
 
time°amp2
 = 
°d
::
˛ock
();

27 
	gi
 = 
begö
; i < 
	gíd
; i = 
NextFlﬂt
 ? 
glm
::
√xt_Êﬂt
(
i
) : i += 0.1f)

28 
ªsu…
 = 
glm
::
cos
(
i
);

30 c⁄° 
	g°d
::
˛ock_t
 
time°amp3
 = 
°d
::
˛ock
();

31 c⁄° 
	g°d
::
˛ock_t
 
time_Á°
 = 
time°amp2
 - 
time°amp1
;

32 c⁄° 
	g°d
::
˛ock_t
 
time_deÁu…
 = 
time°amp3
 - 
time°amp2
;

33 
	g°d
::
¥ötf
("Á°Co†Timê%d clocks\n", 
°©ic_ˇ°
<>(
time_Á°
));

34 
	g°d
::
¥ötf
("co†Timê%d clocks\n", 
°©ic_ˇ°
<>(
time_deÁu…
));

36  
	gtime_Á°
 <
time_deÁu…
 ? 0 : 1;

40 
«me•a˚
 
	gÁ°Sö


50 
≥rf
(
boﬁ
 
NextFlﬂt
)

52 c⁄° 
	gbegö
 = -
glm
::
pi
<>();

53 c⁄° 
	gíd
 = 
glm
::
pi
<>();

54 
	gªsu…
 = 0.f;

56 c⁄° 
	g°d
::
˛ock_t
 
time°amp1
 = 
°d
::
˛ock
();

57 
	gi
 = 
begö
; i < 
	gíd
; i = 
NextFlﬂt
 ? 
glm
::
√xt_Êﬂt
(
i
) : i += 0.1f)

58 
ªsu…
 = 
glm
::
Á°Sö
(
i
);

60 c⁄° 
	g°d
::
˛ock_t
 
time°amp2
 = 
°d
::
˛ock
();

61 
	gi
 = 
begö
; i < 
	gíd
; i = 
NextFlﬂt
 ? 
glm
::
√xt_Êﬂt
(
i
) : i += 0.1f)

62 
ªsu…
 = 
glm
::
sö
(
i
);

64 c⁄° 
	g°d
::
˛ock_t
 
time°amp3
 = 
°d
::
˛ock
();

65 c⁄° 
	g°d
::
˛ock_t
 
time_Á°
 = 
time°amp2
 - 
time°amp1
;

66 c⁄° 
	g°d
::
˛ock_t
 
time_deÁu…
 = 
time°amp3
 - 
time°amp2
;

67 
	g°d
::
¥ötf
("Á°Sö Timê%d clocks\n", 
°©ic_ˇ°
<>(
time_Á°
));

68 
	g°d
::
¥ötf
("sö Timê%d clocks\n", 
°©ic_ˇ°
<>(
time_deÁu…
));

70  
	gtime_Á°
 <
time_deÁu…
 ? 0 : 1;

74 
«me•a˚
 
	gÁ°T™


76 
≥rf
(
boﬁ
 
NextFlﬂt
)

78 c⁄° 
	gbegö
 = -
glm
::
pi
<>();

79 c⁄° 
	gíd
 = 
glm
::
pi
<>();

80 
	gªsu…
 = 0.f;

82 c⁄° 
	g°d
::
˛ock_t
 
time°amp1
 = 
°d
::
˛ock
();

83 
	gi
 = 
begö
; i < 
	gíd
; i = 
NextFlﬂt
 ? 
glm
::
√xt_Êﬂt
(
i
) : i += 0.1f)

84 
ªsu…
 = 
glm
::
Á°T™
(
i
);

86 c⁄° 
	g°d
::
˛ock_t
 
time°amp2
 = 
°d
::
˛ock
();

87 
	gi
 = 
begö
; i < 
	gíd
; i = 
NextFlﬂt
 ? 
glm
::
√xt_Êﬂt
(
i
) : i += 0.1f)

88 
ªsu…
 = 
glm
::
èn
(
i
);

90 c⁄° 
	g°d
::
˛ock_t
 
time°amp3
 = 
°d
::
˛ock
();

91 c⁄° 
	g°d
::
˛ock_t
 
time_Á°
 = 
time°amp2
 - 
time°amp1
;

92 c⁄° 
	g°d
::
˛ock_t
 
time_deÁu…
 = 
time°amp3
 - 
time°amp2
;

93 
	g°d
::
¥ötf
("Á°T™ Timê%d clocks\n", 
°©ic_ˇ°
<>(
time_Á°
));

94 
	g°d
::
¥ötf
("è¿Timê%d clocks\n", 
°©ic_ˇ°
<>(
time_deÁu…
));

96  
	gtime_Á°
 <
time_deÁu…
 ? 0 : 1;

100 
«me•a˚
 
	gÁ°Acos


102 
≥rf
(
boﬁ
 
NextFlﬂt
)

104 c⁄° 
	gbegö
 = -
glm
::
pi
<>();

105 c⁄° 
	gíd
 = 
glm
::
pi
<>();

106 
	gªsu…
 = 0.f;

108 c⁄° 
	g°d
::
˛ock_t
 
time°amp1
 = 
°d
::
˛ock
();

109 
	gi
 = 
begö
; i < 
	gíd
; i = 
NextFlﬂt
 ? 
glm
::
√xt_Êﬂt
(
i
) : i += 0.1f)

110 
ªsu…
 = 
glm
::
Á°Acos
(
i
);

112 c⁄° 
	g°d
::
˛ock_t
 
time°amp2
 = 
°d
::
˛ock
();

113 
	gi
 = 
begö
; i < 
	gíd
; i = 
NextFlﬂt
 ? 
glm
::
√xt_Êﬂt
(
i
) : i += 0.1f)

114 
ªsu…
 = 
glm
::
acos
(
i
);

116 c⁄° 
	g°d
::
˛ock_t
 
time°amp3
 = 
°d
::
˛ock
();

117 c⁄° 
	g°d
::
˛ock_t
 
time_Á°
 = 
time°amp2
 - 
time°amp1
;

118 c⁄° 
	g°d
::
˛ock_t
 
time_deÁu…
 = 
time°amp3
 - 
time°amp2
;

120 
	g°d
::
¥ötf
("Á°Aco†Timê%d clocks\n", 
°©ic_ˇ°
<>(
time_Á°
));

121 
	g°d
::
¥ötf
("aco†Timê%d clocks\n", 
°©ic_ˇ°
<>(
time_deÁu…
));

123  
	gtime_Á°
 <
time_deÁu…
 ? 0 : 1;

127 
«me•a˚
 
	gÁ°Asö


129 
≥rf
(
boﬁ
 
NextFlﬂt
)

131 c⁄° 
	gbegö
 = -
glm
::
pi
<>();

132 c⁄° 
	gíd
 = 
glm
::
pi
<>();

133 
	gªsu…
 = 0.f;

134 c⁄° 
	g°d
::
˛ock_t
 
time°amp1
 = 
°d
::
˛ock
();

135 
	gi
 = 
begö
; i < 
	gíd
; i = 
NextFlﬂt
 ? 
glm
::
√xt_Êﬂt
(
i
) : i += 0.1f)

136 
ªsu…
 = 
glm
::
Á°Asö
(
i
);

137 c⁄° 
	g°d
::
˛ock_t
 
time°amp2
 = 
°d
::
˛ock
();

138 
	gi
 = 
begö
; i < 
	gíd
; i = 
NextFlﬂt
 ? 
glm
::
√xt_Êﬂt
(
i
) : i += 0.1f)

139 
ªsu…
 = 
glm
::
asö
(
i
);

140 c⁄° 
	g°d
::
˛ock_t
 
time°amp3
 = 
°d
::
˛ock
();

141 c⁄° 
	g°d
::
˛ock_t
 
time_Á°
 = 
time°amp2
 - 
time°amp1
;

142 c⁄° 
	g°d
::
˛ock_t
 
time_deÁu…
 = 
time°amp3
 - 
time°amp2
;

143 
	g°d
::
¥ötf
("Á°Asö Timê%d clocks\n", 
°©ic_ˇ°
<>(
time_Á°
));

144 
	g°d
::
¥ötf
("asö Timê%d clocks\n", 
°©ic_ˇ°
<>(
time_deÁu…
));

146  
	gtime_Á°
 <
time_deÁu…
 ? 0 : 1;

150 
«me•a˚
 
	gÁ°Aèn


152 
≥rf
(
boﬁ
 
NextFlﬂt
)

154 c⁄° 
	gbegö
 = -
glm
::
pi
<>();

155 c⁄° 
	gíd
 = 
glm
::
pi
<>();

156 
	gªsu…
 = 0.f;

157 c⁄° 
	g°d
::
˛ock_t
 
time°amp1
 = 
°d
::
˛ock
();

158 
	gi
 = 
begö
; i < 
	gíd
; i = 
NextFlﬂt
 ? 
glm
::
√xt_Êﬂt
(
i
) : i += 0.1f)

159 
ªsu…
 = 
glm
::
Á°Aèn
(
i
);

160 c⁄° 
	g°d
::
˛ock_t
 
time°amp2
 = 
°d
::
˛ock
();

161 
	gi
 = 
begö
; i < 
	gíd
; i = 
NextFlﬂt
 ? 
glm
::
√xt_Êﬂt
(
i
) : i += 0.1f)

162 
ªsu…
 = 
glm
::
©™
(
i
);

163 c⁄° 
	g°d
::
˛ock_t
 
time°amp3
 = 
°d
::
˛ock
();

164 c⁄° 
	g°d
::
˛ock_t
 
time_Á°
 = 
time°amp2
 - 
time°amp1
;

165 c⁄° 
	g°d
::
˛ock_t
 
time_deÁu…
 = 
time°amp3
 - 
time°amp2
;

166 
	g°d
::
¥ötf
("Á°Aè¿Timê%d clocks\n", 
°©ic_ˇ°
<>(
time_Á°
));

167 
	g°d
::
¥ötf
("©™ Timê%d clocks\n", 
°©ic_ˇ°
<>(
time_deÁu…
));

169  
	gtime_Á°
 <
time_deÁu…
 ? 0 : 1;

173 
«me•a˚
 
	gèyl‹Cos


175 
	gglm
::
vec4
 c⁄° 
AngÀShi·
(0.0f, 
glm
::
pi
<>() * 0.5f, glm::pi<>() * 1.0f, glm::pi<>() * 1.5f);

177 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	gty≥«me
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

178 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
	gP
> 
èyl‹SîõsNewCos
(vecTy≥<T, 
P
> c⁄° & 
x
)

180 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
Powed2
(
x
 * x);

181 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
Powed4
(
Powed2
 * Powed2);

182 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
Powed6
(
Powed4
 * 
Powed2
);

183 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
Powed8
(
Powed4
 * Powed4);

185  
	g°©ic_ˇ°
<
	gT
>(1)

186 - 
Powed2
 * 
	g°©ic_ˇ°
<
	gT
>(0.5)

187 + 
Powed4
 * 
	g°©ic_ˇ°
<
	gT
>(0.04166666666666666666666666666667)

188 - 
Powed6
 * 
	g°©ic_ˇ°
<
	gT
>(0.00138888888888888888888888888889)

189 + 
Powed8
 * 
	g°©ic_ˇ°
<
	gT
>(2.4801587301587301587301587301587e-5);

192 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	gty≥«me
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

193 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
	gP
> 
èyl‹SîõsNewCos6
(vecTy≥<T, 
P
> c⁄° & 
x
)

195 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
Powed2
(
x
 * x);

196 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
Powed4
(
Powed2
 * Powed2);

197 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
Powed6
(
Powed4
 * 
Powed2
);

199  
	g°©ic_ˇ°
<
	gT
>(1)

200 - 
Powed2
 * 
	g°©ic_ˇ°
<
	gT
>(0.5)

201 + 
Powed4
 * 
	g°©ic_ˇ°
<
	gT
>(0.04166666666666666666666666666667)

202 - 
Powed6
 * 
	g°©ic_ˇ°
<
	gT
>(0.00138888888888888888888888888889);

205 
	gãm∂©e
 <
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	gty≥«me
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

206 
GLM_FUNC_QUALIFIER
 
vecTy≥
<, 
	gP
> 
Á°Abs
(vecTy≥<, 
P
> 
x
)

208 * 
	gPoöãr
 = 
ªöãΩªt_ˇ°
<*>(&
x
[0]);

209 
	gPoöãr
[0] &= 0x7fffffff;

210 
	gPoöãr
[1] &= 0x7fffffff;

211 
	gPoöãr
[2] &= 0x7fffffff;

212 
	gPoöãr
[3] &= 0x7fffffff;

213  
	gx
;

216 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	gty≥«me
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

217 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
	gP
> 
Á°CosNew
(vecTy≥<T, 
P
> c⁄° & 
x
)

219 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
AngÀ0_PI
(
Á°Abs
(
fmod
(
x
 + 
glm
::
pi
<
T
>(), glm::
two_pi
<T>()) - glm::pi<T>()));

220  
èyl‹SîõsNewCos6
(
x
);

232 
≥rf_Á°CosNew
(
Begö
, 
End
, 
°d
::
size_t
 
Sam∂es
)

234 
°d
::
ve˘‹
<
glm
::
vec4
> 
Resu…s
;

235 
	gResu…s
.
ªsize
(
Sam∂es
);

237 
	gSãps
 = (
End
 - 
Begö
Ë/ 
Sam∂es
;

239 
	g°d
::
˛ock_t
 c⁄° 
TimeSèmpBegö
 = 
°d
::
˛ock
();

241 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gSam∂es
; ++i)

242 
	gResu…s
[
i
] = 
Á°CosNew
(
AngÀShi·
 + 
glm
::
vec4
(
Begö
 + 
Sãps
 * i));

244 
	g°d
::
˛ock_t
 c⁄° 
TimeSèmpEnd
 = 
°d
::
˛ock
();

246 
	g°d
::
¥ötf
("Á°CosNew %ld clocks\n", 
TimeSèmpEnd
 - 
TimeSèmpBegö
);

248 
	gEº‹
 = 0;

249 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gSam∂es
; ++i)

250 
	gEº‹
 +
Resu…s
[
i
].
x
 >= -1.0f && Results[i].x <= 1.0f ? 0 : 1;

251  
	gEº‹
;

254 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	gty≥«me
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

255 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
	gP
> 
dëîmöi°ic_fmod
(vecTy≥<T, 
P
> c⁄° & 
x
, T 
y
)

257  
	gx
 - 
y
 * 
åunc
(
x
 / y);

260 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	gty≥«me
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

261 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
	gP
> 
Á°CosDëîmöis˘ic
(vecTy≥<T, 
P
> c⁄° & 
x
)

263 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
AngÀ0_PI
(
abs
(
dëîmöi°ic_fmod
(
x
 + 
glm
::
pi
<
T
>(), glm::
two_pi
<T>()) - glm::pi<T>()));

264 
	gvecTy≥
<
	gboﬁ
, 
	gP
> c⁄° 
Fú°Qu¨ãrPi
(
ÀssTh™EquÆ
(
AngÀ0_PI
, 
vecTy≥
<
T
, 
P
>(
glm
::
hÆf_pi
<T>())));

266 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
RevîtAngÀ
(
mix
(
vecTy≥
<
T
, 
P
>(
glm
::
pi
<T>()), vecTy≥<T, P>(0), 
Fú°Qu¨ãrPi
));

267 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
Rëu∫Sign
(
mix
(
vecTy≥
<
T
, 
P
>(-1), vecTy≥<T, P>(1), 
Fú°Qu¨ãrPi
));

268 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
Se˘i⁄AngÀ
(
RevîtAngÀ
 - 
AngÀ0_PI
);

270  
Rëu∫Sign
 * 
èyl‹SîõsNewCos
(
Se˘i⁄AngÀ
);

273 
≥rf_Á°CosDëîmöis˘ic
(
Begö
, 
End
, 
°d
::
size_t
 
Sam∂es
)

275 
°d
::
ve˘‹
<
glm
::
vec4
> 
Resu…s
;

276 
	gResu…s
.
ªsize
(
Sam∂es
);

278 
	gSãps
 = (
End
 - 
Begö
Ë/ 
Sam∂es
;

280 
	g°d
::
˛ock_t
 c⁄° 
TimeSèmpBegö
 = 
°d
::
˛ock
();

282 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gSam∂es
; ++i)

283 
	gResu…s
[
i
] = 
èyl‹Cos
::
Á°CosDëîmöis˘ic
(
AngÀShi·
 + 
glm
::
vec4
(
Begö
 + 
Sãps
 * i));

285 
	g°d
::
˛ock_t
 c⁄° 
TimeSèmpEnd
 = 
°d
::
˛ock
();

287 
	g°d
::
¥ötf
("Á°CosDëîmöis˘i¯%ld clocks\n", 
TimeSèmpEnd
 - 
TimeSèmpBegö
);

289 
	gEº‹
 = 0;

290 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gSam∂es
; ++i)

291 
	gEº‹
 +
Resu…s
[
i
].
x
 >= -1.0f && Results[i].x <= 1.0f ? 0 : 1;

292  
	gEº‹
;

295 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	gty≥«me
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

296 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
	gP
> 
èyl‹SîõsRefCos
(vecTy≥<T, 
P
> c⁄° & 
x
)

298  
	g°©ic_ˇ°
<
	gT
>(1)

299 - (
x
 * 
	gx
Ë/ 
	gglm
::
Á˘‹ül
(
°©ic_ˇ°
<
T
>(2))

300 + (
x
 * x * x * xË/ 
glm
::
Á˘‹ül
(
°©ic_ˇ°
<
T
>(4))

301 - (
x
 * x * x * x * x * xË/ 
glm
::
Á˘‹ül
(
°©ic_ˇ°
<
T
>(6))

302 + (
x
 * x * x * x * x * x * x * xË/ 
glm
::
Á˘‹ül
(
°©ic_ˇ°
<
T
>(8));

305 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åem∂©ê<
	gty≥«me
, glm::¥ecisi⁄> 
˛ass
 
vecTy≥
>

306 
GLM_FUNC_QUALIFIER
 
vecTy≥
<
T
, 
	gP
> 
Á°RefCos
(vecTy≥<T, 
P
> c⁄° & 
x
)

308 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
AngÀ0_PI
(
glm
::
abs
(
fmod
(
x
 + glm::
pi
<
T
>(), glm::
two_pi
<T>()) - glm::pi<T>()));

311 
	gvecTy≥
<
	gboﬁ
, 
	gP
> c⁄° 
Fú°Qu¨ãrPi
(
ÀssTh™EquÆ
(
AngÀ0_PI
, 
vecTy≥
<
T
, 
P
>(
glm
::
hÆf_pi
<T>())));

313 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
RevîtAngÀ
(
mix
(
vecTy≥
<
T
, 
P
>(
glm
::
pi
<T>()), vecTy≥<T, P>(0), 
Fú°Qu¨ãrPi
));

314 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
Rëu∫Sign
(
mix
(
vecTy≥
<
T
, 
P
>(-1), vecTy≥<T, P>(1), 
Fú°Qu¨ãrPi
));

315 
	gvecTy≥
<
	gT
, 
	gP
> c⁄° 
Se˘i⁄AngÀ
(
RevîtAngÀ
 - 
AngÀ0_PI
);

317  
Rëu∫Sign
 * 
èyl‹SîõsRefCos
(
Se˘i⁄AngÀ
);

320 
≥rf_Á°CosRef
(
Begö
, 
End
, 
°d
::
size_t
 
Sam∂es
)

322 
°d
::
ve˘‹
<
glm
::
vec4
> 
Resu…s
;

323 
	gResu…s
.
ªsize
(
Sam∂es
);

325 
	gSãps
 = (
End
 - 
Begö
Ë/ 
Sam∂es
;

327 
	g°d
::
˛ock_t
 c⁄° 
TimeSèmpBegö
 = 
°d
::
˛ock
();

329 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gSam∂es
; ++i)

330 
	gResu…s
[
i
] = 
èyl‹Cos
::
Á°RefCos
(
AngÀShi·
 + 
glm
::
vec4
(
Begö
 + 
Sãps
 * i));

332 
	g°d
::
˛ock_t
 c⁄° 
TimeSèmpEnd
 = 
°d
::
˛ock
();

334 
	g°d
::
¥ötf
("Á°CosRe‡%ld clocks\n", 
TimeSèmpEnd
 - 
TimeSèmpBegö
);

336 
	gEº‹
 = 0;

337 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gSam∂es
; ++i)

338 
	gEº‹
 +
Resu…s
[
i
].
x
 >= -1.0f && Results[i].x <= 1.0f ? 0 : 1;

339  
	gEº‹
;

342 
≥rf_Á°CosOld
(
Begö
, 
End
, 
°d
::
size_t
 
Sam∂es
)

344 
°d
::
ve˘‹
<
glm
::
vec4
> 
Resu…s
;

345 
	gResu…s
.
ªsize
(
Sam∂es
);

347 
	gSãps
 = (
End
 - 
Begö
Ë/ 
Sam∂es
;

349 
	g°d
::
˛ock_t
 c⁄° 
TimeSèmpBegö
 = 
°d
::
˛ock
();

351 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gSam∂es
; ++i)

352 
	gResu…s
[
i
] = 
glm
::
Á°Cos
(
AngÀShi·
 + glm::
vec4
(
Begö
 + 
Sãps
 * i));

354 
	g°d
::
˛ock_t
 c⁄° 
TimeSèmpEnd
 = 
°d
::
˛ock
();

356 
	g°d
::
¥ötf
("Á°CosOld %ld clocks\n", 
TimeSèmpEnd
 - 
TimeSèmpBegö
);

358 
	gEº‹
 = 0;

359 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gSam∂es
; ++i)

360 
	gEº‹
 +
Resu…s
[
i
].
x
 >= -1.0f && Results[i].x <= 1.0f ? 0 : 1;

361  
	gEº‹
;

364 
≥rf_cos
(
Begö
, 
End
, 
°d
::
size_t
 
Sam∂es
)

366 
°d
::
ve˘‹
<
glm
::
vec4
> 
Resu…s
;

367 
	gResu…s
.
ªsize
(
Sam∂es
);

369 
	gSãps
 = (
End
 - 
Begö
Ë/ 
Sam∂es
;

371 
	g°d
::
˛ock_t
 c⁄° 
TimeSèmpBegö
 = 
°d
::
˛ock
();

373 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gSam∂es
; ++i)

374 
	gResu…s
[
i
] = 
glm
::
cos
(
AngÀShi·
 + glm::
vec4
(
Begö
 + 
Sãps
 * i));

376 
	g°d
::
˛ock_t
 c⁄° 
TimeSèmpEnd
 = 
°d
::
˛ock
();

378 
	g°d
::
¥ötf
("co†%ld clocks\n", 
TimeSèmpEnd
 - 
TimeSèmpBegö
);

380 
	gEº‹
 = 0;

381 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gSam∂es
; ++i)

382 
	gEº‹
 +
Resu…s
[
i
].
x
 >= -1.0f && Results[i].x <= 1.0f ? 0 : 1;

383  
	gEº‹
;

386 
≥rf
(
°d
::
size_t
 c⁄° 
Sam∂es
)

388 
Eº‹
 = 0;

390 c⁄° 
	gBegö
 = -
glm
::
pi
<>();

391 c⁄° 
	gEnd
 = 
glm
::
pi
<>();

393 
	gEº‹
 +
≥rf_cos
(
Begö
, 
End
, 
Sam∂es
);

394 
	gEº‹
 +
≥rf_Á°CosOld
(
Begö
, 
End
, 
Sam∂es
);

395 
	gEº‹
 +
≥rf_Á°CosRef
(
Begö
, 
End
, 
Sam∂es
);

397 
	gEº‹
 +
≥rf_Á°CosDëîmöis˘ic
(
Begö
, 
End
, 
Sam∂es
);

399  
	gEº‹
;

402 
ã°
()

404 
	gEº‹
 = 0;

408 
	gAngÀ
 = 0.0f; Angle < 180.0f; Angle += 0.1f)

410 c⁄° 
modAngÀ
 = 
°d
::
fmod
(
glm
::
abs
(
AngÀ
), 360.f);

411 
as£π
(
modAngÀ
 >= 0.0f && modAngle <= 360.f);

412 c⁄° 
	gødAngÀ
 = 
glm
::
ødüns
(
modAngÀ
);

413 c⁄° 
	gCos0
 = 
°d
::
cos
(
ødAngÀ
);

415 c⁄° 
	gCos1
 = 
èyl‹Cos
::
Á°RefCos
(
glm
::
fvec1
(
ødAngÀ
)).
x
;

416 
	gEº‹
 +
glm
::
abs
(
Cos1
 - 
Cos0
) < 0.1f ? 0 : 1;

418 c⁄° 
	gCos2
 = 
èyl‹Cos
::
Á°CosNew
(
glm
::
fvec1
(
ødAngÀ
)).
x
;

421 
as£π
(!
Eº‹
);

424  
	gEº‹
;

428 
	$maö
()

430 
	`Eº‹
(0);

432 
Eº‹
 +::
èyl‹Cos
::
	`ã°
();

433 
Eº‹
 +::
èyl‹Cos
::
	`≥rf
(1000);

435 #ifde‡
NDEBUG


436 ::
Á°Cos
::
	`≥rf
(
Ál£
);

437 ::
Á°Sö
::
	`≥rf
(
Ál£
);

438 ::
Á°T™
::
	`≥rf
(
Ál£
);

439 ::
Á°Acos
::
	`≥rf
(
Ál£
);

440 ::
Á°Asö
::
	`≥rf
(
Ál£
);

441 ::
Á°Aèn
::
	`≥rf
(
Ál£
);

444  
Eº‹
;

445 
	}
}

	@glm/test/gtx/gtx_gradient_paint.cpp

1 
	~<glm/gtx/gødõ¡_∑öt.hµ
>

3 
	$ã°_ødülGødõ¡
()

5 
Eº‹
 = 0;

7 
Gødõ¡
 = 
glm
::
	`ødülGødõ¡
(glm::
	`vec2
(0), 1.0f, glm::vec2(1), glm::vec2(0.5));

8 
Eº‹
 +
Gødõ¡
 != 0.0f ? 0 : 1;

10  
Eº‹
;

11 
	}
}

13 
	$ã°_löórGødõ¡
()

15 
Eº‹
 = 0;

17 
Gødõ¡
 = 
glm
::
	`löórGødõ¡
(glm::
	`vec2
(0), glm::vec2(1), glm::vec2(0.5));

18 
Eº‹
 +
Gødõ¡
 != 0.0f ? 0 : 1;

20  
Eº‹
;

21 
	}
}

23 
	$maö
()

25 
Eº‹
 = 0;

27 
Eº‹
 +
	`ã°_ødülGødõ¡
();

28 
Eº‹
 +
	`ã°_löórGødõ¡
();

30  
Eº‹
;

31 
	}
}

	@glm/test/gtx/gtx_handed_coordinate_space.cpp

1 
	~<glm/gtx/h™ded_co‹dö©e_•a˚.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_int_10_10_10_2.cpp

10 
	~<glm/gtc/ty≥_¥ecisi⁄.hµ
>

11 
	~<glm/gtx/assocüãd_mö_max.hµ
>

13 
	$maö
()

15 
	`Eº‹
(0);

17  
Eº‹
;

18 
	}
}

	@glm/test/gtx/gtx_integer.cpp

1 
	~<glm/exp⁄ítül.hµ
>

2 
	~<glm/gtc/ïsû⁄.hµ
>

3 
	~<glm/gtx/öãgî.hµ
>

4 
	~<c°dio
>

22 
	$ã°_log2
()

24 
Eº‹
 = 0;

26 
°d
::
size_t
 
i
 = 1; i < 24; ++i)

28 
glm
::
uöt
 
A
 = glm::
	`log2
(glm::
	`uöt
(1 << 
i
));

29 
glm
::
uöt
 
B
 = glm::
	`uöt
(glm::
	`log2
((1 << 
i
)));

32 
Eº‹
 +
glm
::
	`abs
((
A
Ë- 
B
) <= 24 ? 0 : 1;

33 
	`as£π
(!
Eº‹
);

35 
	`¥ötf
("Log2(%dËîr‹ A=%d, B=%d\n", 1 << 
i
, 
A
, 
B
);

38 
	`¥ötf
("log2Éº‹=%d\n", 
Eº‹
);

40  
Eº‹
;

41 
	}
}

43 
	$ã°_∆z
()

45 
Eº‹
 = 0;

47 
glm
::
uöt
 
i
 = 1; i < glm::
	`uöt
(33); ++i)

48 
Eº‹
 +
glm
::
	`∆z
(
i
Ë=glm::
	`uöt
(31uË- glm::
	`födMSB
(i) ? 0 : 1;

51  
Eº‹
;

52 
	}
}

54 
	$maö
()

56 
Eº‹
 = 0;

58 
Eº‹
 +
	`ã°_∆z
();

60 
Eº‹
 +
	`ã°_log2
();

62  
Eº‹
;

63 
	}
}

	@glm/test/gtx/gtx_intersect.cpp

1 
	~<glm/gtx/öãr£˘.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_io.cpp

1 
	~<glm/gtc/ty≥_¥ecisi⁄.hµ
>

2 
	~<glm/gtx/io.hµ
>

3 
	~<io°ªam
>

4 
	~<s°ªam
>

5 
	~<ty≥öfo
>

7 
	g«me•a˚


9 
	gãm∂©e
 <
ty≥«me
 
	gCTy
,Åy≥«mê
	gCTr
>

10 
	g°d
::
basic_o°ªam
<
CTy
,
	gCTr
>& 
	g›î©‹
<<(°d::basic_o°ªam<CTy,CTr>& 
	gos
, 
	gglm
::
¥ecisi⁄
 c⁄°& 
a
)

12 
ty≥«me
 
°d
::
basic_o°ªam
<
CTy
,
	gCTr
>::
£¡ry
 c⁄° 
˚rbîus
(
os
);

14 i‡(
	g˚rbîus
)

16 
	ga
) {

17 
	gglm
::
highp
: 
os
 << "uhi"; ;

18 
	gglm
::
mediump
: 
os
 << "umd"; ;

19 
	gglm
::
lowp
: 
os
 << "ulo"; ;

20 #i‡
GLM_HAS_ALIGNED_TYPE


21 
	gglm
::
Æig√d_highp
: 
os
 << "ahi"; ;

22 
	gglm
::
Æig√d_mediump
: 
os
 << "amd"; ;

23 
	gglm
::
Æig√d_lowp
: 
os
 << "alo"; ;

28  
	gos
;

31 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
	gglm
::
¥ecisi⁄
 
P
,Åy≥«mê
	gT
,Åy≥«mê
	gCTy
,Åy≥«mê
	gCTr
>

32 
	g°d
::
basic_°rög
<
CTy
> 
ty≥_«me
(
°d
::
basic_o°ªam
<CTy,
CTr
>& 
os
, 
T
 const&)

34 
	g°d
::
basic_o°rög°ªam
<
CTy
,
	gCTr
> 
	go°r
;

36 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tqu©
<
U
,
P
>)Ë{ 
	go°r
 << "quat"; }

37 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tvec2
<
U
,
P
>)Ë{ 
	go°r
 << "vec2"; }

38 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tvec3
<
U
,
P
>)Ë{ 
	go°r
 << "vec3"; }

39 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tvec4
<
U
,
P
>)Ë{ 
	go°r
 << "vec4"; }

40 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tm©2x2
<
U
,
P
>)Ë{ 
	go°r
 << "mat2x2"; }

41 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tm©2x3
<
U
,
P
>)Ë{ 
	go°r
 << "mat2x3"; }

42 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tm©2x4
<
U
,
P
>)Ë{ 
	go°r
 << "mat2x4"; }

43 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tm©3x2
<
U
,
P
>)Ë{ 
	go°r
 << "mat3x2"; }

44 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tm©3x3
<
U
,
P
>)Ë{ 
	go°r
 << "mat3x3"; }

45 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tm©3x4
<
U
,
P
>)Ë{ 
	go°r
 << "mat3x4"; }

46 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tm©4x2
<
U
,
P
>)Ë{ 
	go°r
 << "mat4x2"; }

47 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tm©4x3
<
U
,
P
>)Ë{ 
	go°r
 << "mat4x3"; }

48 i‡(
ty≥id
(
T
Ë=ty≥id(
glm
::
tm©4x4
<
U
,
P
>)Ë{ 
	go°r
 << "mat4x4"; }

49 { 
	go°r
 << "unknown"; }

51 
	go°r
 << '<' << 
ty≥id
(
U
).
«me
(Ë<< ',' << 
	gP
 << '>';

53  
	go°r
.
°r
();

57 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åy≥«mê
	gOS
>

58 
	$ã°_io_qu©
(
OS
& 
os
)

60 
os
 << '\n' << 
	`ty≥id
(
OS
).
	`«me
() << '\n';

62 
glm
::
tqu©
<
T
,
P
> c⁄° 
	`q
(1, 0, 0, 0);

65 
glm
::
io
::
basic_f‹m©_ßvî
<
ty≥«me
 
OS
::
ch¨_ty≥
> c⁄° 
	`iofs
(
os
);

67 
os
 << 
glm
::
io
::
	`¥ecisi⁄
(2Ë<< glm::io::
	`width
(1 + 2 + 1 + 2)

68 << 
ty≥_«me
<
T
,
P
>(
os
, 
q
) << ": " << q << '\n';

72 
glm
::
io
::
basic_f‹m©_ßvî
<
ty≥«me
 
OS
::
ch¨_ty≥
> c⁄° 
	`iofs
(
os
);

74 
os
 << 
glm
::
io
::
unf‹m©ãd


75 << 
ty≥_«me
<
T
,
P
>(
os
, 
q
) << ": " << q << '\n';

79 
	}
}

81 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åy≥«mê
	gOS
>

82 
	$ã°_io_vec
(
OS
& 
os
)

84 
os
 << '\n' << 
	`ty≥id
(
OS
).
	`«me
() << '\n';

86 
glm
::
tvec2
<
T
,
P
> c⁄° 
	`v2
(0, 1);

87 
glm
::
tvec3
<
T
,
P
> c⁄° 
	`v3
(2, 3, 4);

88 
glm
::
tvec4
<
T
,
P
> c⁄° 
	`v4
(5, 6, 7, 8);

90 
os
 << 
ty≥_«me
<
T
,
P
>(os, 
v2
) << ": " << v2 << '\n'

91 << 
ty≥_«me
<
T
,
P
>(
os
, 
v3
) << ": " << v3 << '\n'

92 << 
ty≥_«me
<
T
,
P
>(
os
, 
v4
) << ": " << v4 << '\n';

94 
glm
::
io
::
basic_f‹m©_ßvî
<
ty≥«me
 
OS
::
ch¨_ty≥
> c⁄° 
	`iofs
(
os
);

96 
os
 << 
glm
::
io
::
	`¥ecisi⁄
(2Ë<< glm::io::
	`width
(1 + 2 + 1 + 2)

97 << 
ty≥_«me
<
T
,
P
>(
os
, 
v2
) << ": " << v2 << '\n'

98 << 
ty≥_«me
<
T
,
P
>(
os
, 
v3
) << ": " << v3 << '\n'

99 << 
ty≥_«me
<
T
,
P
>(
os
, 
v4
) << ": " << v4 << '\n';

102 
	}
}

104 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gglm
::
¥ecisi⁄
 
P
,Åy≥«mê
	gOS
>

105 
	$ã°_io_m©
(
OS
& 
os
, 
glm
::
io
::
‹dî_ty≥
 
Ÿy≥
)

107 
os
 << '\n' << 
	`ty≥id
(
OS
).
	`«me
() << '\n';

109 
glm
::
tvec2
<
T
,
P
> c⁄° 
	`v2_1
( 0, 1);

110 
glm
::
tvec2
<
T
,
P
> c⁄° 
	`v2_2
( 2, 3);

111 
glm
::
tvec2
<
T
,
P
> c⁄° 
	`v2_3
( 4, 5);

112 
glm
::
tvec2
<
T
,
P
> c⁄° 
	`v2_4
( 6, 7);

113 
glm
::
tvec3
<
T
,
P
> c⁄° 
	`v3_1
( 8, 9, 10);

114 
glm
::
tvec3
<
T
,
P
> c⁄° 
	`v3_2
(11, 12, 13);

115 
glm
::
tvec3
<
T
,
P
> c⁄° 
	`v3_3
(14, 15, 16);

116 
glm
::
tvec3
<
T
,
P
> c⁄° 
	`v3_4
(17, 18, 19);

117 
glm
::
tvec4
<
T
,
P
> c⁄° 
	`v4_1
(20, 21, 22, 23);

118 
glm
::
tvec4
<
T
,
P
> c⁄° 
	`v4_2
(24, 25, 26, 27);

119 
glm
::
tvec4
<
T
,
P
> c⁄° 
	`v4_3
(28, 29, 30, 31);

120 
glm
::
tvec4
<
T
,
P
> c⁄° 
	`v4_4
(32, 33, 34, 35);

122 
glm
::
io
::
basic_f‹m©_ßvî
<
ty≥«me
 
OS
::
ch¨_ty≥
> c⁄° 
	`iofs
(
os
);

124 
os
 << 
glm
::
io
::
	`¥ecisi⁄
(2Ë<< glm::io::
	`width
(1 + 2 + 1 + 2)

125 << 
glm
::
io
::
	`‹dî
(
Ÿy≥
)

126 << "m©2x2<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©2x2
<T,P>(
v2_1
, 
v2_2
) << '\n'

127 << "m©2x3<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©2x3
<T,P>(
v3_1
, 
v3_2
) << '\n'

128 << "m©2x4<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©2x4
<T,P>(
v4_1
, 
v4_2
) << '\n'

129 << "m©3x2<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©3x2
<T,P>(
v2_1
, 
v2_2
, 
v2_3
) << '\n'

130 << "m©3x3<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©3x3
<T,P>(
v3_1
, 
v3_2
, 
v3_3
) << '\n'

131 << "m©3x4<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©3x4
<T,P>(
v4_1
, 
v4_2
, 
v4_3
) << '\n'

132 << "m©4x2<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©4x2
<T,P>(
v2_1
, 
v2_2
, 
v2_3
, 
v2_4
) << '\n'

133 << "m©4x3<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©4x3
<T,P>(
v3_1
, 
v3_2
, 
v3_3
, 
v3_4
) << '\n'

134 << "m©4x4<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©4x4
<T,P>(
v4_1
, 
v4_2
, 
v4_3
, 
v4_4
) << '\n';

136 
os
 << 
glm
::
io
::
unf‹m©ãd


137 << 
glm
::
io
::
	`‹dî
(
Ÿy≥
)

138 << "m©2x2<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©2x2
<T,P>(
v2_1
, 
v2_2
) << '\n'

139 << "m©2x3<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©2x3
<T,P>(
v3_1
, 
v3_2
) << '\n'

140 << "m©2x4<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©2x4
<T,P>(
v4_1
, 
v4_2
) << '\n'

141 << "m©3x2<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©3x2
<T,P>(
v2_1
, 
v2_2
, 
v2_3
) << '\n'

142 << "m©3x3<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©3x3
<T,P>(
v3_1
, 
v3_2
, 
v3_3
) << '\n'

143 << "m©3x4<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©3x4
<T,P>(
v4_1
, 
v4_2
, 
v4_3
) << '\n'

144 << "m©4x2<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©4x2
<T,P>(
v2_1
, 
v2_2
, 
v2_3
, 
v2_4
) << '\n'

145 << "m©4x3<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©4x3
<T,P>(
v3_1
, 
v3_2
, 
v3_3
, 
v3_4
) << '\n'

146 << "m©4x4<" << 
	`ty≥id
(
T
).
	`«me
(Ë<< ',' << 
P
 << ">: " << 
glm
::
tm©4x4
<T,P>(
v4_1
, 
v4_2
, 
v4_3
, 
v4_4
) << '\n';

149 
	}
}

151 
	$maö
()

153 
	`Eº‹
(0);

155 
Eº‹
 +
ã°_io_qu©
<, 
glm
::
highp
>(
°d
::
cout
);

156 
Eº‹
 +
ã°_io_qu©
<, 
glm
::
highp
>(
°d
::
wcout
);

157 
Eº‹
 +
ã°_io_qu©
<, 
glm
::
mediump
>(
°d
::
cout
);

158 
Eº‹
 +
ã°_io_qu©
<, 
glm
::
mediump
>(
°d
::
wcout
);

159 
Eº‹
 +
ã°_io_qu©
<
glm
::
uöt
, glm::
lowp
>(
°d
::
cout
);

160 
Eº‹
 +
ã°_io_qu©
<
glm
::
uöt
, glm::
lowp
>(
°d
::
wcout
);

162 
Eº‹
 +
ã°_io_vec
<, 
glm
::
highp
>(
°d
::
cout
);

163 
Eº‹
 +
ã°_io_vec
<, 
glm
::
highp
>(
°d
::
wcout
);

164 
Eº‹
 +
ã°_io_vec
<, 
glm
::
mediump
>(
°d
::
cout
);

165 
Eº‹
 +
ã°_io_vec
<, 
glm
::
mediump
>(
°d
::
wcout
);

166 
Eº‹
 +
ã°_io_vec
<
glm
::
uöt
, glm::
lowp
>(
°d
::
cout
);

167 
Eº‹
 +
ã°_io_vec
<
glm
::
uöt
, glm::
lowp
>(
°d
::
wcout
);

169 
Eº‹
 +
ã°_io_m©
<, 
glm
::
highp
>(
°d
::
cout
, glm::
io
::
cﬁumn_maj‹
);

170 
Eº‹
 +
ã°_io_m©
<, 
glm
::
lowp
>(
°d
::
wcout
, glm::
io
::
cﬁumn_maj‹
);

171 
Eº‹
 +
ã°_io_m©
<, 
glm
::
highp
>(
°d
::
cout
, glm::
io
::
row_maj‹
);

172 
Eº‹
 +
ã°_io_m©
<, 
glm
::
lowp
>(
°d
::
wcout
, glm::
io
::
row_maj‹
);

174  
Eº‹
;

175 
	}
}

	@glm/test/gtx/gtx_log_base.cpp

1 
	~<glm/gtx/log_ba£.hµ
>

2 
	~<glm/gtc/vec1.hµ
>

3 
	~<glm/gtc/ïsû⁄.hµ
>

4 
	~<glm/exp⁄ítül.hµ
>

6 
«me•a˚
 
	gã°_log


8 
run
()

10 
	gEº‹
 = 0;

13 
	gA
 = 
glm
::
log
(10.f, 2.0f);

14 
	gB
 = 
glm
::
log2
(10.f);

15 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
, 
B
, 0.00001f) ? 0 : 1;

19 
	gglm
::
vec1
 
A
 = 
glm
::
log
(glm::vec1(10.f), glm::vec1(2.0f));

20 
	gglm
::
vec1
 
B
 = 
glm
::
log2
(glm::vec1(10.f));

21 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
A
, 
B
, glm::
vec1
(0.00001f))) ? 0 : 1;

25 
	gglm
::
vec2
 
A
 = 
glm
::
log
(glm::vec2(10.f), glm::vec2(2.0f));

26 
	gglm
::
vec2
 
B
 = 
glm
::
log2
(glm::vec2(10.f));

27 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
A
, 
B
, glm::
vec2
(0.00001f))) ? 0 : 1;

31 
	gglm
::
vec3
 
A
 = 
glm
::
log
(glm::vec3(10.f), glm::vec3(2.0f));

32 
	gglm
::
vec3
 
B
 = 
glm
::
log2
(glm::vec3(10.f));

33 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
A
, 
B
, glm::
vec3
(0.00001f))) ? 0 : 1;

37 
	gglm
::
vec4
 
A
 = 
glm
::
log
(glm::vec4(10.f), glm::vec4(2.0f));

38 
	gglm
::
vec4
 
B
 = 
glm
::
log2
(glm::vec4(10.f));

39 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
A
, 
B
, glm::
vec4
(0.00001f))) ? 0 : 1;

42  
	gEº‹
;

46 
	$maö
()

48 
	`Eº‹
(0);

50 
Eº‹
 +
ã°_log
::
	`run
();

52  
Eº‹
;

53 
	}
}

	@glm/test/gtx/gtx_matrix_cross_product.cpp

1 
	~<glm/gtx/m©rix_¸oss_¥odu˘.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_matrix_decompose.cpp

1 
	~<glm/gtx/m©rix_decompo£.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7 
glm
::
m©4
 
	`M©rix
(1);

9 
glm
::
vec3
 
SˇÀ
;

10 
glm
::
qu©
 
Orõ¡©i⁄
;

11 
glm
::
vec3
 
Tøn¶©i⁄
;

12 
glm
::
vec3
 
	`Skew
(1);

13 
glm
::
vec4
 
	`Pî•e˘ive
(1);

15 
glm
::
	`decompo£
(
M©rix
, 
SˇÀ
, 
Orõ¡©i⁄
, 
Tøn¶©i⁄
, 
Skew
, 
Pî•e˘ive
);

17  
Eº‹
;

18 
	}
}

	@glm/test/gtx/gtx_matrix_interpolation.cpp

1 
	~<glm/gtx/m©rix_öãΩﬁ©i⁄.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_matrix_major_storage.cpp

1 
	~<glm/gtx/m©rix_maj‹_°‹age.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_matrix_operation.cpp

1 
	~<glm/gtx/m©rix_›î©i⁄.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_matrix_query.cpp

1 
	~<glm/gtx/m©rix_quîy.hµ
>

3 
	$ã°_isNuŒ
()

5 
	`Eº‹
(0);

7 
boﬁ
 
Te°A
 = 
glm
::
	`isNuŒ
(glm::
	`m©4
(0), 0.00001f);

8 
Eº‹
 +
Te°A
 ? 0 : 1;

10  
Eº‹
;

11 
	}
}

13 
	$ã°_isIdítôy
()

15 
	`Eº‹
(0);

18 
boﬁ
 
Te°A
 = 
glm
::
	`isIdítôy
(glm::
	`m©2
(1), 0.00001f);

19 
Eº‹
 +
Te°A
 ? 0 : 1;

22 
boﬁ
 
Te°A
 = 
glm
::
	`isIdítôy
(glm::
	`m©3
(1), 0.00001f);

23 
Eº‹
 +
Te°A
 ? 0 : 1;

26 
boﬁ
 
Te°A
 = 
glm
::
	`isIdítôy
(glm::
	`m©4
(1), 0.00001f);

27 
Eº‹
 +
Te°A
 ? 0 : 1;

30  
Eº‹
;

31 
	}
}

33 
	$ã°_isN‹mÆized
()

35 
	`Eº‹
(0);

37 
boﬁ
 
Te°A
 = 
glm
::
	`isN‹mÆized
(glm::
	`m©4
(1), 0.00001f);

38 
Eº‹
 +
Te°A
 ? 0 : 1;

40  
Eº‹
;

41 
	}
}

43 
	$ã°_isOπhog⁄Æ
()

45 
	`Eº‹
(0);

47 
boﬁ
 
Te°A
 = 
glm
::
	`isOπhog⁄Æ
(glm::
	`m©4
(1), 0.00001f);

48 
Eº‹
 +
Te°A
 ? 0 : 1;

50  
Eº‹
;

51 
	}
}

53 
	$maö
()

55 
	`Eº‹
(0);

57 
Eº‹
 +
	`ã°_isNuŒ
();

58 
Eº‹
 +
	`ã°_isIdítôy
();

59 
Eº‹
 +
	`ã°_isN‹mÆized
();

60 
Eº‹
 +
	`ã°_isOπhog⁄Æ
();

62  
Eº‹
;

63 
	}
}

	@glm/test/gtx/gtx_matrix_transform_2d.cpp

1 
	~<glm/gtx/m©rix_å™sf‹m_2d.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_mixed_product.cpp

10 
	~<glm/gtc/ty≥_¥ecisi⁄.hµ
>

11 
	~<glm/gtx/assocüãd_mö_max.hµ
>

13 
	$maö
()

15 
	`Eº‹
(0);

17  
Eº‹
;

18 
	}
}

	@glm/test/gtx/gtx_norm.cpp

1 
	~<glm/gtx/n‹m.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_normal.cpp

1 
	~<glm/gtx/n‹mÆ.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_normalize_dot.cpp

1 
	~<glm/gtx/n‹mÆize_dŸ.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_number_precision.cpp

1 
	~<glm/gtx/numbî_¥ecisi⁄.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_optimum_pow.cpp

1 
	~<glm/gtx/›timum_pow.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_orthonormalize.cpp

1 
	~<glm/gtx/‹th⁄‹mÆize.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_perpendicular.cpp

1 
	~<glm/gtx/≥Ωídicuœr.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_polar_coordinates.cpp

1 
	~<glm/gtx/pﬁ¨_co‹dö©es.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_projection.cpp

1 
	~<glm/gtx/¥oje˘i⁄.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_quaternion.cpp

1 
	~<glm/gtc/ïsû⁄.hµ
>

2 
	~<glm/gtc/ty≥_±r.hµ
>

3 
	~<glm/gtc/m©rix_å™sf‹m.hµ
>

4 
	~<glm/gtx/å™sf‹m.hµ
>

5 
	~<glm/gtx/qu©îni⁄.hµ
>

6 
	~<glm/gtx/com∑tibûôy.hµ
>

7 
	~<glm/ext.hµ
>

9 
	$ã°_qu©_Á°Mix
()

11 
Eº‹
 = 0;

13 
glm
::
qu©
 
A
 = glm::
	`™gÀAxis
(0.0f, glm::
	`vec3
(0, 0, 1));

14 
glm
::
qu©
 
B
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.5f, glm::
	`vec3
(0, 0, 1));

15 
glm
::
qu©
 
C
 = glm::
	`Á°Mix
(
A
, 
B
, 0.5f);

16 
glm
::
qu©
 
D
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.25f, glm::
	`vec3
(0, 0, 1));

18 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
x
, 
D
.x, 0.01f) ? 0 : 1;

19 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
y
, 
D
.y, 0.01f) ? 0 : 1;

20 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
z
, 
D
.z, 0.01f) ? 0 : 1;

21 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
w
, 
D
.w, 0.01f) ? 0 : 1;

23  
Eº‹
;

24 
	}
}

26 
	$ã°_qu©_sh‹tMix
()

28 
	`Eº‹
(0);

30 
glm
::
qu©
 
A
 = glm::
	`™gÀAxis
(0.0f, glm::
	`vec3
(0, 0, 1));

31 
glm
::
qu©
 
B
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.5f, glm::
	`vec3
(0, 0, 1));

32 
glm
::
qu©
 
C
 = glm::
	`sh‹tMix
(
A
, 
B
, 0.5f);

33 
glm
::
qu©
 
D
 = glm::
	`™gÀAxis
(glm::
pi
<>(Ë* 0.25f, glm::
	`vec3
(0, 0, 1));

35 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
x
, 
D
.x, 0.01f) ? 0 : 1;

36 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
y
, 
D
.y, 0.01f) ? 0 : 1;

37 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
z
, 
D
.z, 0.01f) ? 0 : 1;

38 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
C
.
w
, 
D
.w, 0.01f) ? 0 : 1;

40  
Eº‹
;

41 
	}
}

43 
	$ã°_‹õ¡©i⁄
()

45 
	`Eº‹
(0);

48 
glm
::
qu©
 
	`q
(1.0f, 0.0f, 0.0f, 1.0f);

49 
p
 = 
glm
::
	`rﬁl
(
q
);

53 
glm
::
qu©
 
	`q
(1.0f, 0.0f, 0.0f, 1.0f);

54 
p
 = 
glm
::
	`pôch
(
q
);

58 
glm
::
qu©
 
	`q
(1.0f, 0.0f, 0.0f, 1.0f);

59 
p
 = 
glm
::
	`yaw
(
q
);

62  
Eº‹
;

63 
	}
}

65 
	$ã°_rŸ©i⁄
()

67 
	`Eº‹
(0);

69 
glm
::
vec3
 
	`v
(1, 0, 0);

70 
glm
::
vec3
 
	`u
(0, 1, 0);

72 
glm
::
qu©
 
RŸ©i⁄
 = glm::
	`rŸ©i⁄
(
v
, 
u
);

74 
AngÀ
 = 
glm
::
	`™gÀ
(
RŸ©i⁄
);

76 
Eº‹
 +
glm
::
	`abs
(
AngÀ
 - glm::
pi
<>(Ë* 0.5fË< glm::
ïsû⁄
<>() ? 0 : 1;

78  
Eº‹
;

79 
	}
}

81 
	$ã°_log
()

83 
	`Eº‹
(0);

85 
glm
::
qu©
 
q
;

86 
glm
::
qu©
 
p
 = glm::
	`log
(
q
);

87 
glm
::
qu©
 
r
 = glm::
	`exp
(
p
);

89  
Eº‹
;

90 
	}
}

92 
	$maö
()

94 
Eº‹
 = 0;

96 
Eº‹
 +
	`ã°_log
();

97 
Eº‹
 +
	`ã°_rŸ©i⁄
();

98 
Eº‹
 +
	`ã°_qu©_Á°Mix
();

99 
Eº‹
 +
	`ã°_qu©_sh‹tMix
();

101  
Eº‹
;

102 
	}
}

	@glm/test/gtx/gtx_random.cpp

10 
	~<glm/glm.hµ
>

11 
	~<glm/gtx/øndom.hµ
>

12 
	~<glm/gtx/ïsû⁄.hµ
>

13 
	~<io°ªam
>

15 
	$ã°_sig√dR™d1
()

17 
Eº‹
 = 0;

20 
Resu…Flﬂt
 = 0.0f;

21 
Resu…DoubÀ
 = 0.0f;

22 
°d
::
size_t
 
i
 = 0; i < 100000; ++i)

24 
Resu…Flﬂt
 +
glm
::
sig√dR™d1
<>();

25 
Resu…DoubÀ
 +
glm
::
sig√dR™d1
<>();

28 
Eº‹
 +
glm
::
	`equÆEpsû⁄
(
Resu…Flﬂt
, 0.0f, 0.0001f);

29 
Eº‹
 +
glm
::
	`equÆEpsû⁄
(
Resu…DoubÀ
, 0.0, 0.0001);

32  
Eº‹
;

33 
	}
}

35 
	$ã°_n‹mÆizedR™d2
()

37 
Eº‹
 = 0;

40 
°d
::
size_t
 
Max
 = 100000;

41 
Resu…Flﬂt
 = 0.0f;

42 
Resu…DoubÀ
 = 0.0f;

43 
°d
::
size_t
 
i
 = 0; i < 
Max
; ++i)

45 
Resu…Flﬂt
 +
glm
::
	`Àngth
(glm::
n‹mÆizedR™d2
<>());

46 
Resu…DoubÀ
 +
glm
::
	`Àngth
(glm::
n‹mÆizedR™d2
<>());

49 
Eº‹
 +
glm
::
	`equÆEpsû⁄
(
Resu…Flﬂt
, (
Max
), 0.000001f) ? 0 : 1;

50 
Eº‹
 +
glm
::
	`equÆEpsû⁄
(
Resu…DoubÀ
, (
Max
), 0.000001) ? 0 : 1;

51 
	`as£π
(!
Eº‹
);

54  
Eº‹
;

55 
	}
}

57 
	$ã°_n‹mÆizedR™d3
()

59 
Eº‹
 = 0;

62 
°d
::
size_t
 
Max
 = 100000;

63 
Resu…FlﬂtA
 = 0.0f;

64 
Resu…FlﬂtB
 = 0.0f;

65 
Resu…FlﬂtC
 = 0.0f;

66 
Resu…DoubÀA
 = 0.0f;

67 
Resu…DoubÀB
 = 0.0f;

68 
Resu…DoubÀC
 = 0.0f;

69 
°d
::
size_t
 
i
 = 0; i < 
Max
; ++i)

71 
Resu…FlﬂtA
 +
glm
::
	`Àngth
(glm::
n‹mÆizedR™d3
<>());

72 
Resu…DoubÀA
 +
glm
::
	`Àngth
(glm::
n‹mÆizedR™d3
<>());

73 
Resu…FlﬂtB
 +
glm
::
	`Àngth
(glm::
	`n‹mÆizedR™d3
(2.0f, 2.0f));

74 
Resu…DoubÀB
 +
glm
::
	`Àngth
(glm::
	`n‹mÆizedR™d3
(2.0, 2.0));

75 
Resu…FlﬂtC
 +
glm
::
	`Àngth
(glm::
	`n‹mÆizedR™d3
(1.0f, 3.0f));

76 
Resu…DoubÀC
 +
glm
::
	`Àngth
(glm::
	`n‹mÆizedR™d3
(1.0, 3.0));

79 
Eº‹
 +
glm
::
	`equÆEpsû⁄
(
Resu…FlﬂtA
, (
Max
), 0.0001f) ? 0 : 1;

80 
Eº‹
 +
glm
::
	`equÆEpsû⁄
(
Resu…DoubÀA
, (
Max
), 0.0001) ? 0 : 1;

81 
Eº‹
 +
glm
::
	`equÆEpsû⁄
(
Resu…FlﬂtB
, (
Max
 * 2), 0.0001f) ? 0 : 1;

82 
Eº‹
 +
glm
::
	`equÆEpsû⁄
(
Resu…DoubÀB
, (
Max
 * 2), 0.0001) ? 0 : 1;

83 
Eº‹
 +(
Resu…FlﬂtC
 >(
Max
) && ResultFloatC <= (Max * 3)) ? 0 : 1;

84 
Eº‹
 +(
Resu…DoubÀC
 >(
Max
) && ResultDoubleC <= (Max * 3)) ? 0 : 1;

87  
Eº‹
;

88 
	}
}

90 
	$maö
()

92 
Eº‹
 = 0;

94 
Eº‹
 +
	`ã°_sig√dR™d1
();

95 
Eº‹
 +
	`ã°_n‹mÆizedR™d2
();

96 
Eº‹
 +
	`ã°_n‹mÆizedR™d3
();

98  
Eº‹
;

99 
	}
}

	@glm/test/gtx/gtx_range.cpp

1 
	~<glm/glm.hµ
>

2 
	~<glm/gtc/ïsû⁄.hµ
>

4 #i‡
GLM_HAS_RANGE_FOR


6 
	~<glm/gtx/ønge.hµ
>

8 
	$ã°Vec
()

10 
	`Eº‹
(0);

11 
glm
::
vec3
 
	`v
(1, 2, 3);

13 
cou¡
 = 0;

14 
x
 : 
v
){ 
cou¡
++; }

15 
Eº‹
 +
cou¡
 == 3 ? 0 : 1;

17 & 
x
 : 
v
){ x = 0; }

18 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v
, glm::
	`vec3
(0, 0, 0))) ? 0 : 1;

19  
Eº‹
;

20 
	}
}

22 
	$ã°M©
()

24 
	`Eº‹
(0);

25 
glm
::
m©4x3
 
	`m
(1);

27 
cou¡
 = 0;

28 
x
 : 
m
){ 
cou¡
++; }

29 
Eº‹
 +
cou¡
 == 12 ? 0 : 1;

31 & 
x
 : 
m
){ x = 0; }

32 
glm
::
vec4
 
	`v
(1, 1, 1, 1);

33 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m
*
v
, glm::
	`vec3
(0, 0, 0))) ? 0 : 1;

34  
Eº‹
;

35 
	}
}

37 
	$maö
()

39 
	`Eº‹
(0);

40 
Eº‹
 +
	`ã°Vec
();

41 
Eº‹
 +
	`ã°M©
();

42  
Eº‹
;

43 
	}
}

47 
	$maö
()

50 
	}
}

	@glm/test/gtx/gtx_rotate_normalized_axis.cpp

1 
	~<glm/gtx/rŸ©e_n‹mÆized_axis.hµ
>

3 
	$maö
()

5 
	`Eº‹
(0);

7  
Eº‹
;

8 
	}
}

	@glm/test/gtx/gtx_rotate_vector.cpp

1 
	~<glm/gtc/c⁄°™ts.hµ
>

2 
	~<glm/gtx/rŸ©e_ve˘‹.hµ
>

4 
	$ã°_rŸ©e
()

6 
Eº‹
 = 0;

8 
glm
::
vec2
 
A
 = glm::
	`rŸ©e
(glm::
	`vec2
(1, 0), glm::
pi
<>() * 0.5f);

9 
glm
::
vec3
 
B
 = glm::
	`rŸ©e
(glm::
	`vec3
(1, 0, 0), glm::
pi
<>() * 0.5f, glm::vec3(0, 0, 1));

10 
glm
::
vec4
 
C
 = glm::
	`rŸ©e
(glm::
	`vec4
(1, 0, 0, 1), glm::
pi
<>(Ë* 0.5f, glm::
	`vec3
(0, 0, 1));

11 
glm
::
vec3
 
D
 = glm::
	`rŸ©eX
(glm::
	`vec3
(1, 0, 0), glm::
pi
<>() * 0.5f);

12 
glm
::
vec4
 
E
 = glm::
	`rŸ©eX
(glm::
	`vec4
(1, 0, 0, 1), glm::
pi
<>() * 0.5f);

13 
glm
::
vec3
 
F
 = glm::
	`rŸ©eY
(glm::
	`vec3
(1, 0, 0), glm::
pi
<>() * 0.5f);

14 
glm
::
vec4
 
G
 = glm::
	`rŸ©eY
(glm::
	`vec4
(1, 0, 0, 1), glm::
pi
<>() * 0.5f);

15 
glm
::
vec3
 
H
 = glm::
	`rŸ©eZ
(glm::
	`vec3
(1, 0, 0), glm::
pi
<>() * 0.5f);

16 
glm
::
vec4
 
I
 = glm::
	`rŸ©eZ
(glm::
	`vec4
(1, 0, 0,1 ), glm::
pi
<>() * 0.5f);

17 
glm
::
m©4
 
O
 = glm::
	`‹õ¡©i⁄
(glm::
	`n‹mÆize
(glm::
	`vec3
(1)), glm::vec3(0, 0, 1));

19  
Eº‹
;

20 
	}
}

22 
	$ã°_rŸ©eX
()

24 
Eº‹
 = 0;

26 
glm
::
vec3
 
D
 = glm::
	`rŸ©eX
(glm::
	`vec3
(1, 0, 0), glm::
pi
<>() * 0.5f);

27 
glm
::
vec4
 
E
 = glm::
	`rŸ©eX
(glm::
	`vec4
(1, 0, 0, 1), glm::
pi
<>() * 0.5f);

29  
Eº‹
;

30 
	}
}

32 
	$ã°_rŸ©eY
()

34 
Eº‹
 = 0;

36 
glm
::
vec3
 
F
 = glm::
	`rŸ©eY
(glm::
	`vec3
(1, 0, 0), glm::
pi
<>() * 0.5f);

37 
glm
::
vec4
 
G
 = glm::
	`rŸ©eY
(glm::
	`vec4
(1, 0, 0, 1), glm::
pi
<>() * 0.5f);

39  
Eº‹
;

40 
	}
}

43 
	$ã°_rŸ©eZ
()

45 
Eº‹
 = 0;

47 
glm
::
vec3
 
H
 = glm::
	`rŸ©eZ
(glm::
	`vec3
(1, 0, 0), glm::
pi
<>() * 0.5f);

48 
glm
::
vec4
 
I
 = glm::
	`rŸ©eZ
(glm::
	`vec4
(1, 0, 0,1 ), glm::
pi
<>() * 0.5f);

50  
Eº‹
;

51 
	}
}

53 
	$ã°_‹õ¡©i⁄
()

55 
Eº‹
 = 0;

57 
glm
::
m©4
 
O
 = glm::
	`‹õ¡©i⁄
(glm::
	`n‹mÆize
(glm::
	`vec3
(1)), glm::vec3(0, 0, 1));

59  
Eº‹
;

60 
	}
}

62 
	$maö
()

64 
Eº‹
 = 0;

66 
Eº‹
 +
	`ã°_rŸ©e
();

67 
Eº‹
 +
	`ã°_rŸ©eX
();

68 
Eº‹
 +
	`ã°_rŸ©eY
();

69 
Eº‹
 +
	`ã°_rŸ©eZ
();

70 
Eº‹
 +
	`ã°_‹õ¡©i⁄
();

72  
Eº‹
;

73 
	}
}

	@glm/test/gtx/gtx_scalar_multiplication.cpp

1 
	~<glm/glm.hµ
>

3 #i‡
GLM_HAS_TEMPLATE_ALIASES
 && !(
GLM_COMPILER
 & 
GLM_COMPILER_GCC
)

4 
	~<glm/gtx/sˇœr_mu…ùliˇti⁄.hµ
>

6 
	$maö
()

8 
	`Eº‹
(0);

9 
glm
::
vec3
 
	`v
(0.5, 3.1, -9.1);

11 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v
, 1.0 * v)) ? 0 : 1;

12 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v
, 1 * v)) ? 0 : 1;

13 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
v
, 1u * v)) ? 0 : 1;

15 
glm
::
m©3
 
	`m
(1, 2, 3, 4, 5, 6, 7, 8, 9);

16 
glm
::
vec3
 
w
 = 0.5‡* 
m
 * 
v
;

18 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
((
m
*
v
)/2, 
w
)) ? 0 : 1;

19 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(
m
*(
v
/2), 
w
)) ? 0 : 1;

20 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
((
m
/2)*
v
, 
w
)) ? 0 : 1;

21 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
((0.5*
m
)*
v
, 
w
)) ? 0 : 1;

22 
Eº‹
 +
glm
::
	`Æl
(glm::
	`equÆ
(0.5*(
m
*
v
), 
w
)) ? 0 : 1;

24  
Eº‹
;

25 
	}
}

29 
	$maö
()

32 
	}
}

	@glm/test/gtx/gtx_scalar_relational.cpp

1 
	~<glm/glm.hµ
>

2 
	~<glm/gtx/sˇœr_ªœti⁄Æ.hµ
>

3 
	~<c°dio
>

5 
	$ã°_ÀssTh™
()

7 
	`Eº‹
(0);

9 
Eº‹
 +
glm
::
	`ÀssTh™
(0, 1) ? 0 : 1;

10 
Eº‹
 +
glm
::
	`ÀssTh™
(1, 0) ? 1 : 0;

11 
Eº‹
 +
glm
::
	`ÀssTh™
(0, 0) ? 1 : 0;

12 
Eº‹
 +
glm
::
	`ÀssTh™
(1, 1) ? 1 : 0;

13 
Eº‹
 +
glm
::
	`ÀssTh™
(0.0f, 1.0f) ? 0 : 1;

14 
Eº‹
 +
glm
::
	`ÀssTh™
(1.0f, 0.0f) ? 1 : 0;

15 
Eº‹
 +
glm
::
	`ÀssTh™
(0.0f, 0.0f) ? 1 : 0;

16 
Eº‹
 +
glm
::
	`ÀssTh™
(1.0f, 1.0f) ? 1 : 0;

17 
Eº‹
 +
glm
::
	`ÀssTh™
(0.0, 1.0) ? 0 : 1;

18 
Eº‹
 +
glm
::
	`ÀssTh™
(1.0, 0.0) ? 1 : 0;

19 
Eº‹
 +
glm
::
	`ÀssTh™
(0.0, 0.0) ? 1 : 0;

20 
Eº‹
 +
glm
::
	`ÀssTh™
(1.0, 1.0) ? 1 : 0;

22  
Eº‹
;

23 
	}
}

25 
	$ã°_ÀssTh™EquÆ
()

27 
	`Eº‹
(0);

29 
Eº‹
 +
glm
::
	`ÀssTh™EquÆ
(0, 1) ? 0 : 1;

30 
Eº‹
 +
glm
::
	`ÀssTh™EquÆ
(1, 0) ? 1 : 0;

31 
Eº‹
 +
glm
::
	`ÀssTh™EquÆ
(0, 0) ? 0 : 1;

32 
Eº‹
 +
glm
::
	`ÀssTh™EquÆ
(1, 1) ? 0 : 1;

33 
Eº‹
 +
glm
::
	`ÀssTh™EquÆ
(0.0f, 1.0f) ? 0 : 1;

34 
Eº‹
 +
glm
::
	`ÀssTh™EquÆ
(1.0f, 0.0f) ? 1 : 0;

35 
Eº‹
 +
glm
::
	`ÀssTh™EquÆ
(0.0f, 0.0f) ? 0 : 1;

36 
Eº‹
 +
glm
::
	`ÀssTh™EquÆ
(1.0f, 1.0f) ? 0 : 1;

37 
Eº‹
 +
glm
::
	`ÀssTh™EquÆ
(0.0, 1.0) ? 0 : 1;

38 
Eº‹
 +
glm
::
	`ÀssTh™EquÆ
(1.0, 0.0) ? 1 : 0;

39 
Eº‹
 +
glm
::
	`ÀssTh™EquÆ
(0.0, 0.0) ? 0 : 1;

40 
Eº‹
 +
glm
::
	`ÀssTh™EquÆ
(1.0, 1.0) ? 0 : 1;

42  
Eº‹
;

43 
	}
}

45 
	$ã°_gª©îTh™
()

47 
	`Eº‹
(0);

49 
Eº‹
 +
glm
::
	`gª©îTh™
(0, 1) ? 1 : 0;

50 
Eº‹
 +
glm
::
	`gª©îTh™
(1, 0) ? 0 : 1;

51 
Eº‹
 +
glm
::
	`gª©îTh™
(0, 0) ? 1 : 0;

52 
Eº‹
 +
glm
::
	`gª©îTh™
(1, 1) ? 1 : 0;

53 
Eº‹
 +
glm
::
	`gª©îTh™
(0.0f, 1.0f) ? 1 : 0;

54 
Eº‹
 +
glm
::
	`gª©îTh™
(1.0f, 0.0f) ? 0 : 1;

55 
Eº‹
 +
glm
::
	`gª©îTh™
(0.0f, 0.0f) ? 1 : 0;

56 
Eº‹
 +
glm
::
	`gª©îTh™
(1.0f, 1.0f) ? 1 : 0;

57 
Eº‹
 +
glm
::
	`gª©îTh™
(0.0, 1.0) ? 1 : 0;

58 
Eº‹
 +
glm
::
	`gª©îTh™
(1.0, 0.0) ? 0 : 1;

59 
Eº‹
 +
glm
::
	`gª©îTh™
(0.0, 0.0) ? 1 : 0;

60 
Eº‹
 +
glm
::
	`gª©îTh™
(1.0, 1.0) ? 1 : 0;

62  
Eº‹
;

63 
	}
}

65 
	$ã°_gª©îTh™EquÆ
()

67 
	`Eº‹
(0);

69 
Eº‹
 +
glm
::
	`gª©îTh™EquÆ
(0, 1) ? 1 : 0;

70 
Eº‹
 +
glm
::
	`gª©îTh™EquÆ
(1, 0) ? 0 : 1;

71 
Eº‹
 +
glm
::
	`gª©îTh™EquÆ
(0, 0) ? 0 : 1;

72 
Eº‹
 +
glm
::
	`gª©îTh™EquÆ
(1, 1) ? 0 : 1;

73 
Eº‹
 +
glm
::
	`gª©îTh™EquÆ
(0.0f, 1.0f) ? 1 : 0;

74 
Eº‹
 +
glm
::
	`gª©îTh™EquÆ
(1.0f, 0.0f) ? 0 : 1;

75 
Eº‹
 +
glm
::
	`gª©îTh™EquÆ
(0.0f, 0.0f) ? 0 : 1;

76 
Eº‹
 +
glm
::
	`gª©îTh™EquÆ
(1.0f, 1.0f) ? 0 : 1;

77 
Eº‹
 +
glm
::
	`gª©îTh™EquÆ
(0.0, 1.0) ? 1 : 0;

78 
Eº‹
 +
glm
::
	`gª©îTh™EquÆ
(1.0, 0.0) ? 0 : 1;

79 
Eº‹
 +
glm
::
	`gª©îTh™EquÆ
(0.0, 0.0) ? 0 : 1;

80 
Eº‹
 +
glm
::
	`gª©îTh™EquÆ
(1.0, 1.0) ? 0 : 1;

82  
Eº‹
;

83 
	}
}

85 
	$ã°_equÆ
()

87 
	`Eº‹
(0);

89 
Eº‹
 +
glm
::
	`equÆ
(0, 1) ? 1 : 0;

90 
Eº‹
 +
glm
::
	`equÆ
(1, 0) ? 1 : 0;

91 
Eº‹
 +
glm
::
	`equÆ
(0, 0) ? 0 : 1;

92 
Eº‹
 +
glm
::
	`equÆ
(1, 1) ? 0 : 1;

93 
Eº‹
 +
glm
::
	`equÆ
(0.0f, 1.0f) ? 1 : 0;

94 
Eº‹
 +
glm
::
	`equÆ
(1.0f, 0.0f) ? 1 : 0;

95 
Eº‹
 +
glm
::
	`equÆ
(0.0f, 0.0f) ? 0 : 1;

96 
Eº‹
 +
glm
::
	`equÆ
(1.0f, 1.0f) ? 0 : 1;

97 
Eº‹
 +
glm
::
	`equÆ
(0.0, 1.0) ? 1 : 0;

98 
Eº‹
 +
glm
::
	`equÆ
(1.0, 0.0) ? 1 : 0;

99 
Eº‹
 +
glm
::
	`equÆ
(0.0, 0.0) ? 0 : 1;

100 
Eº‹
 +
glm
::
	`equÆ
(1.0, 1.0) ? 0 : 1;

102  
Eº‹
;

103 
	}
}

105 
	$ã°_nŸEquÆ
()

107 
	`Eº‹
(0);

109 
Eº‹
 +
glm
::
	`nŸEquÆ
(0, 1) ? 0 : 1;

110 
Eº‹
 +
glm
::
	`nŸEquÆ
(1, 0) ? 0 : 1;

111 
Eº‹
 +
glm
::
	`nŸEquÆ
(0, 0) ? 1 : 0;

112 
Eº‹
 +
glm
::
	`nŸEquÆ
(1, 1) ? 1 : 0;

113 
Eº‹
 +
glm
::
	`nŸEquÆ
(0.0f, 1.0f) ? 0 : 1;

114 
Eº‹
 +
glm
::
	`nŸEquÆ
(1.0f, 0.0f) ? 0 : 1;

115 
Eº‹
 +
glm
::
	`nŸEquÆ
(0.0f, 0.0f) ? 1 : 0;

116 
Eº‹
 +
glm
::
	`nŸEquÆ
(1.0f, 1.0f) ? 1 : 0;

117 
Eº‹
 +
glm
::
	`nŸEquÆ
(0.0, 1.0) ? 0 : 1;

118 
Eº‹
 +
glm
::
	`nŸEquÆ
(1.0, 0.0) ? 0 : 1;

119 
Eº‹
 +
glm
::
	`nŸEquÆ
(0.0, 0.0) ? 1 : 0;

120 
Eº‹
 +
glm
::
	`nŸEquÆ
(1.0, 1.0) ? 1 : 0;

122  
Eº‹
;

123 
	}
}

125 
	$ã°_™y
()

127 
	`Eº‹
(0);

129 
Eº‹
 +
glm
::
	`™y
(
åue
) ? 0 : 1;

130 
Eº‹
 +
glm
::
	`™y
(
Ál£
) ? 1 : 0;

132  
Eº‹
;

133 
	}
}

135 
	$ã°_Æl
()

137 
	`Eº‹
(0);

139 
Eº‹
 +
glm
::
	`Æl
(
åue
) ? 0 : 1;

140 
Eº‹
 +
glm
::
	`Æl
(
Ál£
) ? 1 : 0;

142  
Eº‹
;

143 
	}
}

145 
	$ã°_nŸ
()

147 
	`Eº‹
(0);

149 
Eº‹
 +
glm
::
	`nŸ_
(
åue
) ? 1 : 0;

150 
Eº‹
 +
glm
::
	`nŸ_
(
Ál£
) ? 0 : 1;

152  
Eº‹
;

153 
	}
}

155 
	$maö
()

157 
Eº‹
 = 0;

159 
Eº‹
 +
	`ã°_ÀssTh™
();

160 
Eº‹
 +
	`ã°_ÀssTh™EquÆ
();

161 
Eº‹
 +
	`ã°_gª©îTh™
();

162 
Eº‹
 +
	`ã°_gª©îTh™EquÆ
();

163 
Eº‹
 +
	`ã°_equÆ
();

164 
Eº‹
 +
	`ã°_nŸEquÆ
();

165 
Eº‹
 +
	`ã°_™y
();

166 
Eº‹
 +
	`ã°_Æl
();

167 
Eº‹
 +
	`ã°_nŸ
();

169  
Eº‹
;

170 
	}
}

	@glm/test/gtx/gtx_simd_mat4.cpp

32 
	~<glm/glm.hµ
>

33 
	~<glm/gtc/m©rix_å™sf‹m.hµ
>

34 
	~<glm/gtc/qu©îni⁄.hµ
>

35 
	~<glm/gtc/øndom.hµ
>

36 
	~<glm/gtx/simd_vec4.hµ
>

37 
	~<glm/gtx/simd_m©4.hµ
>

38 
	~<c°dio
>

39 
	~<˘ime
>

40 
	~<ve˘‹
>

42 #if(
GLM_ARCH
 !
GLM_ARCH_PURE
)

44 
	g°d
::
ve˘‹
<> 
ã°_dëA
(
°d
::ve˘‹<
glm
::
m©4
> c⁄° & 
D©a
)

46 
°d
::
ve˘‹
<> 
Te°
(
D©a
.
size
());

48 
	g°d
::
˛ock_t
 
TimeSèπ
 = 
˛ock
();

50 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gTe°
.
size
() - 1; ++i)

51 
	gTe°
[
i
] = 
glm
::
dëîmö™t
(
D©a
[i]);

53 
	g°d
::
˛ock_t
 
TimeEnd
 = 
˛ock
();

54 
¥ötf
("Dë A: %ld\n", 
TimeEnd
 - 
TimeSèπ
);

56  
	gTe°
;

59 
	g°d
::
ve˘‹
<> 
ã°_dëB
(
°d
::ve˘‹<
glm
::
m©4
> c⁄° & 
D©a
)

61 
°d
::
ve˘‹
<> 
Te°
(
D©a
.
size
());

63 
	g°d
::
˛ock_t
 
TimeSèπ
 = 
˛ock
();

65 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gTe°
.
size
() - 1; ++i)

67 
_mm_¥e„tch
((*)&
D©a
[
i
 + 1], 
_MM_HINT_T0
);

68 
	gglm
::
simdM©4
 
m
(
D©a
[
i
]);

69 
	gglm
::
simdVec4
 
d
(
glm
::
dëaû
::
s£_¶ow_dë_ps
((
__m128
 c⁄° * c⁄°)&
m
));

70 
	gglm
::
vec4
 
v
;

71 
	gTe°
[
i
] = 
v
.
x
;

74 
	g°d
::
˛ock_t
 
TimeEnd
 = 
˛ock
();

75 
¥ötf
("Dë B: %ld\n", 
TimeEnd
 - 
TimeSèπ
);

77  
	gTe°
;

80 
	g°d
::
ve˘‹
<> 
ã°_dëC
(
°d
::ve˘‹<
glm
::
m©4
> c⁄° & 
D©a
)

82 
°d
::
ve˘‹
<> 
Te°
(
D©a
.
size
());

84 
	g°d
::
˛ock_t
 
TimeSèπ
 = 
˛ock
();

86 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gTe°
.
size
() - 1; ++i)

88 
_mm_¥e„tch
((*)&
D©a
[
i
 + 1], 
_MM_HINT_T0
);

89 
	gglm
::
simdM©4
 
m
(
D©a
[
i
]);

90 
	gglm
::
simdVec4
 
d
(
glm
::
dëaû
::
s£_dë_ps
((
__m128
 c⁄° * c⁄°)&
m
));

91 
	gglm
::
vec4
 
v
;

92 
	gTe°
[
i
] = 
v
.
x
;

95 
	g°d
::
˛ock_t
 
TimeEnd
 = 
˛ock
();

96 
¥ötf
("Dë C: %ld\n", 
TimeEnd
 - 
TimeSèπ
);

98  
	gTe°
;

101 
	g°d
::
ve˘‹
<> 
ã°_dëD
(
°d
::ve˘‹<
glm
::
m©4
> c⁄° & 
D©a
)

103 
°d
::
ve˘‹
<> 
Te°
(
D©a
.
size
());

105 
	g°d
::
˛ock_t
 
TimeSèπ
 = 
˛ock
();

107 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gTe°
.
size
() - 1; ++i)

109 
_mm_¥e„tch
((*)&
D©a
[
i
 + 1], 
_MM_HINT_T0
);

110 
	gglm
::
simdM©4
 
m
(
D©a
[
i
]);

111 
	gglm
::
simdVec4
 
d
(
glm
::
dëaû
::
s£_dëd_ps
((
__m128
 c⁄° * c⁄°)&
m
));

112 
	gglm
::
vec4
 
v
;

113 
	gTe°
[
i
] = 
v
.
x
;

116 
	g°d
::
˛ock_t
 
TimeEnd
 = 
˛ock
();

117 
¥ötf
("Dë D: %ld\n", 
TimeEnd
 - 
TimeSèπ
);

119  
	gTe°
;

122 
ã°_övA
(
°d
::
ve˘‹
<
glm
::
m©4
> c⁄° & 
D©a
, std::ve˘‹<glm::m©4> & 
Out
)

125 
Out
.
ªsize
(
D©a
.
size
());

127 
	g°d
::
˛ock_t
 
TimeSèπ
 = 
˛ock
();

129 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gOut
.
size
() - 1; ++i)

131 
	gOut
[
i
] = 
glm
::
övî£
(
D©a
[i]);

134 
	g°d
::
˛ock_t
 
TimeEnd
 = 
˛ock
();

135 
¥ötf
("Inv A: %ld\n", 
TimeEnd
 - 
TimeSèπ
);

138 
ã°_övC
(
°d
::
ve˘‹
<
glm
::
m©4
> c⁄° & 
D©a
, std::ve˘‹<glm::m©4> & 
Out
)

141 
Out
.
ªsize
(
D©a
.
size
());

143 
	g°d
::
˛ock_t
 
TimeSèπ
 = 
˛ock
();

145 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gOut
.
size
() - 1; ++i)

147 
_mm_¥e„tch
((*)&
D©a
[
i
 + 1], 
_MM_HINT_T0
);

148 
	gglm
::
simdM©4
 
m
(
D©a
[
i
]);

149 
	gglm
::
simdM©4
 
o
;

150 
	gglm
::
dëaû
::
s£_övî£_Á°_ps
((
__m128
 c⁄° * c⁄°)&
m
, (__m128 *)&
o
);

151 
	gOut
[
i
] = *(
glm
::
m©4
*)&
o
;

154 
	g°d
::
˛ock_t
 
TimeEnd
 = 
˛ock
();

155 
¥ötf
("Inv C: %ld\n", 
TimeEnd
 - 
TimeSèπ
);

158 
ã°_övD
(
°d
::
ve˘‹
<
glm
::
m©4
> c⁄° & 
D©a
, std::ve˘‹<glm::m©4> & 
Out
)

161 
Out
.
ªsize
(
D©a
.
size
());

163 
	g°d
::
˛ock_t
 
TimeSèπ
 = 
˛ock
();

165 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gOut
.
size
() - 1; ++i)

167 
_mm_¥e„tch
((*)&
D©a
[
i
 + 1], 
_MM_HINT_T0
);

168 
	gglm
::
simdM©4
 
m
(
D©a
[
i
]);

169 
	gglm
::
simdM©4
 
o
;

170 
	gglm
::
dëaû
::
s£_övî£_ps
((
__m128
 c⁄° * c⁄°)&
m
, (__m128 *)&
o
);

171 
	gOut
[
i
] = *(
glm
::
m©4
*)&
o
;

174 
	g°d
::
˛ock_t
 
TimeEnd
 = 
˛ock
();

175 
¥ötf
("Inv D: %ld\n", 
TimeEnd
 - 
TimeSèπ
);

178 
ã°_mulA
(
°d
::
ve˘‹
<
glm
::
m©4
> c⁄° & 
D©a
, std::ve˘‹<glm::m©4> & 
Out
)

181 
Out
.
ªsize
(
D©a
.
size
());

183 
	g°d
::
˛ock_t
 
TimeSèπ
 = 
˛ock
();

185 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gOut
.
size
() - 1; ++i)

187 
	gOut
[
i
] = 
D©a
[i] * Data[i];

190 
	g°d
::
˛ock_t
 
TimeEnd
 = 
˛ock
();

191 
¥ötf
("Mu»A: %ld\n", 
TimeEnd
 - 
TimeSèπ
);

194 
ã°_mulD
(
°d
::
ve˘‹
<
glm
::
m©4
> c⁄° & 
D©a
, std::ve˘‹<glm::m©4> & 
Out
)

197 
Out
.
ªsize
(
D©a
.
size
());

199 
	g°d
::
˛ock_t
 
TimeSèπ
 = 
˛ock
();

201 
	g°d
::
size_t
 
i
 = 0; 
	gi
 < 
	gOut
.
size
() - 1; ++i)

203 
_mm_¥e„tch
((*)&
D©a
[
i
 + 1], 
_MM_HINT_T0
);

204 
	gglm
::
simdM©4
 
m
(
D©a
[
i
]);

205 
	gglm
::
simdM©4
 
o
;

206 
	gglm
::
dëaû
::
s£_mul_ps
((
__m128
 c⁄° * c⁄°)&
m
, (__m128 c⁄° * c⁄°)&m, (__m128*)&
o
);

207 
	gOut
[
i
] = *(
glm
::
m©4
*)&
o
;

210 
	g°d
::
˛ock_t
 
TimeEnd
 = 
˛ock
();

211 
¥ötf
("Mu»D: %ld\n", 
TimeEnd
 - 
TimeSèπ
);

214 
	$ã°_compuã_glm
()

217 
	}
}

219 
	$ã°_compuã_gtx
()

221 
°d
::
ve˘‹
<
glm
::
vec4
> 
	`Ouçut
(1000000);

223 
°d
::
˛ock_t
 
TimeSèπ
 = 
	`˛ock
();

225 
°d
::
size_t
 
k
 = 0; k < 
Ouçut
.
	`size
(); ++k)

227 
i
 = (
k
) / 1000.f + 0.001f;

228 
glm
::
vec3
 
A
 = glm::
	`n‹mÆize
(glm::
	`vec3
(
i
));

229 
glm
::
vec3
 
B
 = glm::
	`¸oss
(
A
, glm::
	`n‹mÆize
(glm::
	`vec3
(1, 1, 2)));

230 
glm
::
m©4
 
C
 = glm::
	`rŸ©e
(glm::
	`m©4
(1.0f), 
i
, 
B
);

231 
glm
::
m©4
 
D
 = glm::
	`sˇÀ
(
C
, glm::
	`vec3
(0.8f, 1.0f, 1.2f));

232 
glm
::
m©4
 
E
 = glm::
	`å™¶©e
(
D
, glm::
	`vec3
(1.4f, 1.2f, 1.1f));

233 
glm
::
m©4
 
F
 = glm::
	`≥r•e˘ive
(
i
, 1.5f, 0.1f, 1000.f);

234 
glm
::
m©4
 
G
 = glm::
	`övî£
(
F
 * 
E
);

235 
glm
::
vec3
 
H
 = glm::
	`unProje˘
(glm::
	`vec3
(
i
), 
G
, 
F
, 
E
[3]);

236 
glm
::
vec3
 
I
 = glm::
	`™y
(glm::
	`i¢™
(glm::
	`¥oje˘
(
H
, 
G
, 
F
, 
E
[3]))Ë? glm::
	`vec3
(2) : glm::vec3(1);

237 
glm
::
m©4
 
J
 = glm::
	`lookAt
(glm::
	`n‹mÆize
(glm::
	`max
(
B
, glm::
	`vec3
(0.001f))), 
H
, 
I
);

238 
glm
::
m©4
 
K
 = glm::
	`å™•o£
(
J
);

239 
glm
::
qu©
 
L
 = glm::
	`n‹mÆize
(glm::
	`qu©_ˇ°
(
K
));

240 
glm
::
vec4
 
M
 = 
L
 * glm::
	`smoŸh°ï
(
K
[3], 
J
[3], glm::
	`vec4
(
i
));

241 
glm
::
m©4
 
N
 = glm::
	`m©4
(glm::
	`n‹mÆize
(glm::
	`max
(
M
, glm::
	`vec4
(0.001f))), 
K
[3], 
J
[3], glm::vec4(
i
));

242 
glm
::
m©4
 
O
 = 
N
 * glm::
	`övî£
(N);

243 
glm
::
vec4
 
P
 = 
O
 * glm::
	`ªÊe˘
(
N
[3], glm::
	`vec4
(
A
, 1.0f));

244 
glm
::
vec4
 
Q
 = glm::
	`vec4
(glm::
	`dŸ
(
M
, 
P
));

245 
glm
::
vec4
 
R
 = glm::
	`qu©
(
Q
.
w
, glm::
	`vec3
(Q)Ë* 
P
;

246 
Ouçut
[
k
] = 
R
;

249 
°d
::
˛ock_t
 
TimeEnd
 = 
	`˛ock
();

250 
	`¥ötf
("ã°_compuã_gtx: %ld\n", 
TimeEnd
 - 
TimeSèπ
);

253 
	}
}

255 
	$maö
()

257 
Eº‹
 = 0;

259 
°d
::
ve˘‹
<
glm
::
m©4
> 
	`D©a
(64 * 64 * 1);

260 
°d
::
size_t
 
i
 = 0; i < 
D©a
.
	`size
(); ++i)

261 
D©a
[
i
] = 
glm
::
	`m©4
(

262 
glm
::
	`vec4
(glm::
	`löórR™d
(glm::vec4(-2.0f), glm::vec4(2.0f))),

263 
glm
::
	`vec4
(glm::
	`löórR™d
(glm::vec4(-2.0f), glm::vec4(2.0f))),

264 
glm
::
	`vec4
(glm::
	`löórR™d
(glm::vec4(-2.0f), glm::vec4(2.0f))),

265 
glm
::
	`vec4
(glm::
	`löórR™d
(glm::vec4(-2.0f), glm::vec4(2.0f))));

268 
°d
::
ve˘‹
<
glm
::
m©4
> 
Te°InvA
;

269 
	`ã°_övA
(
D©a
, 
Te°InvA
);

272 
°d
::
ve˘‹
<
glm
::
m©4
> 
Te°InvC
;

273 
	`ã°_övC
(
D©a
, 
Te°InvC
);

276 
°d
::
ve˘‹
<
glm
::
m©4
> 
Te°InvD
;

277 
	`ã°_övD
(
D©a
, 
Te°InvD
);

281 
°d
::
ve˘‹
<
glm
::
m©4
> 
Te°A
;

282 
	`ã°_mulA
(
D©a
, 
Te°A
);

285 
°d
::
ve˘‹
<
glm
::
m©4
> 
Te°D
;

286 
	`ã°_mulD
(
D©a
, 
Te°D
);

290 
°d
::
ve˘‹
<> 
Te°DëA
 = 
	`ã°_dëA
(
D©a
);

291 
°d
::
ve˘‹
<> 
Te°DëB
 = 
	`ã°_dëB
(
D©a
);

292 
°d
::
ve˘‹
<> 
Te°DëD
 = 
	`ã°_dëD
(
D©a
);

293 
°d
::
ve˘‹
<> 
Te°DëC
 = 
	`ã°_dëC
(
D©a
);

295 
°d
::
size_t
 
i
 = 0; i < 
Te°DëA
.
	`size
(); ++i)

296 if(
Te°DëA
[
i
] !
Te°DëB
[i] && 
Te°DëC
[i] !Te°DëB[i] && Te°DëC[i] !
Te°DëD
[i])

301 
glm
::
simdVec4
 
	`A
(1.0f, 2.0f, 3.0f, 4.0f);

302 
glm
::
simdVec4
 
	`B
(5.0f, 6.0f, 7.0f, 8.0f);

305 
Eº‹
 +
	`ã°_compuã_glm
();

306 
Eº‹
 +
	`ã°_compuã_gtx
();

307 
Dë
 = 
glm
::
	`dëîmö™t
(glm::
	`simdM©4
(1.0));

308 
Eº‹
 +
Dë
 == 1.0f ? 0 : 1;

310 
glm
::
simdM©4
 
D
 = glm::
	`m©rixCompMu…
(glm::
	`simdM©4
(1.0), glm::simdMat4(1.0));

312  
Eº‹
;

313 
	}
}

317 
	$maö
()

319 
Eº‹
 = 0;

321  
Eº‹
;

322 
	}
}

	@glm/test/gtx/gtx_simd_vec4.cpp

32 
	~<glm/glm.hµ
>

33 
	~<glm/gtx/simd_vec4.hµ
>

34 
	~<c°dio
>

36 #if(
GLM_ARCH
 !
GLM_ARCH_PURE
)

38 
	$maö
()

40 
glm
::
simdVec4
 
	`A1
(0.0f, 0.1f, 0.2f, 0.3f);

41 
glm
::
simdVec4
 
	`B1
(0.4f, 0.5f, 0.6f, 0.7f);

42 
glm
::
simdVec4
 
C1
 = 
A1
 + 
B1
;

43 
glm
::
simdVec4
 
D1
 = 
A1
.
swizzÀ
<glm::
X
, glm::
Z
, glm::
Y
, glm::
W
>();

44 
glm
::
simdVec4
 
	`E1
(glm::
	`vec4
(1.0f));

45 
glm
::
vec4
 
F1
 = glm::
	`vec4_ˇ°
(
E1
);

53 
__m128
 
vÆue
 = 
	`_mm_£t1_ps
(0.0f);

54 
__m128
 
d©a
 = 
	`_mm_cm≥q_ps
(
vÆue
, value);

55 
__m128
 
add0
 = 
	`_mm_add_ps
(
d©a
, data);

57 
glm
::
simdVec4
 
	`GNI
(
add0
);

60 
	}
}

64 
	$maö
()

66 
Eº‹
 = 0;

68  
Eº‹
;

69 
	}
}

	@glm/test/gtx/gtx_spline.cpp

1 
	~<glm/vec2.hµ
>

2 
	~<glm/vec3.hµ
>

3 
	~<glm/vec4.hµ
>

4 
	~<glm/gtx/•löe.hµ
>

6 
«me•a˚
 
	gˇtmuŒRom


8 
ã°
()

10 
Eº‹
(0);

12 
	gglm
::
vec2
 
Resu…2
 = 
glm
::
ˇtmuŒRom
(

13 
glm
::
vec2
(0.0f, 0.0f),

14 
glm
::
vec2
(1.0f, 0.0f),

15 
glm
::
vec2
(1.0f, 1.0f),

16 
glm
::
vec2
(0.0f, 1.0f), 0.5f);

18 
	gglm
::
vec3
 
Resu…3
 = 
glm
::
ˇtmuŒRom
(

19 
glm
::
vec3
(0.0f, 0.0f, 0.0f),

20 
glm
::
vec3
(1.0f, 0.0f, 0.0f),

21 
glm
::
vec3
(1.0f, 1.0f, 0.0f),

22 
glm
::
vec3
(0.0f, 1.0f, 0.0f), 0.5f);

24 
	gglm
::
vec4
 
Resu…4
 = 
glm
::
ˇtmuŒRom
(

25 
glm
::
vec4
(0.0f, 0.0f, 0.0f, 1.0f),

26 
glm
::
vec4
(1.0f, 0.0f, 0.0f, 1.0f),

27 
glm
::
vec4
(1.0f, 1.0f, 0.0f, 1.0f),

28 
glm
::
vec4
(0.0f, 1.0f, 0.0f, 1.0f), 0.5f);

30  
	gEº‹
;

34 
«me•a˚
 
	ghîmôe


36 
ã°
()

38 
Eº‹
(0);

40 
	gglm
::
vec2
 
Resu…2
 = 
glm
::
hîmôe
(

41 
glm
::
vec2
(0.0f, 0.0f),

42 
glm
::
vec2
(1.0f, 0.0f),

43 
glm
::
vec2
(1.0f, 1.0f),

44 
glm
::
vec2
(0.0f, 1.0f), 0.5f);

46 
	gglm
::
vec3
 
Resu…3
 = 
glm
::
hîmôe
(

47 
glm
::
vec3
(0.0f, 0.0f, 0.0f),

48 
glm
::
vec3
(1.0f, 0.0f, 0.0f),

49 
glm
::
vec3
(1.0f, 1.0f, 0.0f),

50 
glm
::
vec3
(0.0f, 1.0f, 0.0f), 0.5f);

52 
	gglm
::
vec4
 
Resu…4
 = 
glm
::
hîmôe
(

53 
glm
::
vec4
(0.0f, 0.0f, 0.0f, 1.0f),

54 
glm
::
vec4
(1.0f, 0.0f, 0.0f, 1.0f),

55 
glm
::
vec4
(1.0f, 1.0f, 0.0f, 1.0f),

56 
glm
::
vec4
(0.0f, 1.0f, 0.0f, 1.0f), 0.5f);

58  
	gEº‹
;

62 
«me•a˚
 
	gcubic


64 
ã°
()

66 
Eº‹
(0);

68 
	gglm
::
vec2
 
Resu…2
 = 
glm
::
cubic
(

69 
glm
::
vec2
(0.0f, 0.0f),

70 
glm
::
vec2
(1.0f, 0.0f),

71 
glm
::
vec2
(1.0f, 1.0f),

72 
glm
::
vec2
(0.0f, 1.0f), 0.5f);

74 
	gglm
::
vec3
 
Resu…3
 = 
glm
::
cubic
(

75 
glm
::
vec3
(0.0f, 0.0f, 0.0f),

76 
glm
::
vec3
(1.0f, 0.0f, 0.0f),

77 
glm
::
vec3
(1.0f, 1.0f, 0.0f),

78 
glm
::
vec3
(0.0f, 1.0f, 0.0f), 0.5f);

80 
	gglm
::
vec4
 
Resu…
 = 
glm
::
cubic
(

81 
glm
::
vec4
(0.0f, 0.0f, 0.0f, 1.0f),

82 
glm
::
vec4
(1.0f, 0.0f, 0.0f, 1.0f),

83 
glm
::
vec4
(1.0f, 1.0f, 0.0f, 1.0f),

84 
glm
::
vec4
(0.0f, 1.0f, 0.0f, 1.0f), 0.5f);

86  
	gEº‹
;

90 
	$maö
()

92 
	`Eº‹
(0);

94 
Eº‹
 +
ˇtmuŒRom
::
	`ã°
();

95 
Eº‹
 +
hîmôe
::
	`ã°
();

96 
Eº‹
 +
cubic
::
	`ã°
();

98  
Eº‹
;

99 
	}
}

	@glm/test/gtx/gtx_string_cast.cpp

1 
	~<glm/glm.hµ
>

2 
	~<glm/gtx/°rög_ˇ°.hµ
>

3 
	~<limôs
>

5 
	$ã°_°rög_ˇ°_ve˘‹
()

7 
Eº‹
 = 0;

10 
glm
::
vec2
 
	`A1
(1, 2);

11 
°d
::
°rög
 
A2
 = 
glm
::
	`to_°rög
(
A1
);

12 
Eº‹
 +
A2
 !
°d
::
	`°rög
("vec2(1.000000, 2.000000)") ? 1 : 0;

14 
glm
::
vec3
 
	`B1
(1, 2, 3);

15 
°d
::
°rög
 
B2
 = 
glm
::
	`to_°rög
(
B1
);

16 
Eº‹
 +
B2
 !
°d
::
	`°rög
("vec3(1.000000, 2.000000, 3.000000)") ? 1 : 0;

18 
glm
::
vec4
 
	`C1
(1, 2, 3, 4);

19 
°d
::
°rög
 
C2
 = 
glm
::
	`to_°rög
(
C1
);

20 
Eº‹
 +
C2
 !
°d
::
	`°rög
("vec4(1.000000, 2.000000, 3.000000, 4.000000)") ? 1 : 0;

22 
glm
::
dvec2
 
	`J1
(1, 2);

23 
°d
::
°rög
 
J2
 = 
glm
::
	`to_°rög
(
J1
);

24 
Eº‹
 +
J2
 !
°d
::
	`°rög
("dvec2(1.000000, 2.000000)") ? 1 : 0;

26 
glm
::
dvec3
 
	`K1
(1, 2, 3);

27 
°d
::
°rög
 
K2
 = 
glm
::
	`to_°rög
(
K1
);

28 
Eº‹
 +
K2
 !
°d
::
	`°rög
("dvec3(1.000000, 2.000000, 3.000000)") ? 1 : 0;

30 
glm
::
dvec4
 
	`L1
(1, 2, 3, 4);

31 
°d
::
°rög
 
L2
 = 
glm
::
	`to_°rög
(
L1
);

32 
Eº‹
 +
L2
 !
°d
::
	`°rög
("dvec4(1.000000, 2.000000, 3.000000, 4.000000)") ? 1 : 0;

36 
glm
::
bvec2
 
	`M1
(
Ál£
, 
åue
);

37 
°d
::
°rög
 
M2
 = 
glm
::
	`to_°rög
(
M1
);

38 
Eº‹
 +
M2
 !
°d
::
	`°rög
("bvec2(false,Årue)") ? 1 : 0;

40 
glm
::
bvec3
 
	`O1
(
Ál£
, 
åue
, false);

41 
°d
::
°rög
 
O2
 = 
glm
::
	`to_°rög
(
O1
);

42 
Eº‹
 +
O2
 !
°d
::
	`°rög
("bvec3(false,Årue, false)") ? 1 : 0;

44 
glm
::
bvec4
 
	`P1
(
Ál£
, 
åue
, false,Årue);

45 
°d
::
°rög
 
P2
 = 
glm
::
	`to_°rög
(
P1
);

46 
Eº‹
 +
P2
 !
°d
::
	`°rög
("bvec4(false,Årue, false,Årue)") ? 1 : 0;

50 
glm
::
ivec2
 
	`D1
(1, 2);

51 
°d
::
°rög
 
D2
 = 
glm
::
	`to_°rög
(
D1
);

52 
Eº‹
 +
D2
 !
°d
::
	`°rög
("ivec2(1, 2)") ? 1 : 0;

54 
glm
::
ivec3
 
	`E1
(1, 2, 3);

55 
°d
::
°rög
 
E2
 = 
glm
::
	`to_°rög
(
E1
);

56 
Eº‹
 +
E2
 !
°d
::
	`°rög
("ivec3(1, 2, 3)") ? 1 : 0;

58 
glm
::
ivec4
 
	`F1
(1, 2, 3, 4);

59 
°d
::
°rög
 
F2
 = 
glm
::
	`to_°rög
(
F1
);

60 
Eº‹
 +
F2
 !
°d
::
	`°rög
("ivec4(1, 2, 3, 4)") ? 1 : 0;

64 
glm
::
i8vec2
 
	`D1
(1, 2);

65 
°d
::
°rög
 
D2
 = 
glm
::
	`to_°rög
(
D1
);

66 
Eº‹
 +
D2
 !
°d
::
	`°rög
("i8vec2(1, 2)") ? 1 : 0;

68 
glm
::
i8vec3
 
	`E1
(1, 2, 3);

69 
°d
::
°rög
 
E2
 = 
glm
::
	`to_°rög
(
E1
);

70 
Eº‹
 +
E2
 !
°d
::
	`°rög
("i8vec3(1, 2, 3)") ? 1 : 0;

72 
glm
::
i8vec4
 
	`F1
(1, 2, 3, 4);

73 
°d
::
°rög
 
F2
 = 
glm
::
	`to_°rög
(
F1
);

74 
Eº‹
 +
F2
 !
°d
::
	`°rög
("i8vec4(1, 2, 3, 4)") ? 1 : 0;

78 
glm
::
i16vec2
 
	`D1
(1, 2);

79 
°d
::
°rög
 
D2
 = 
glm
::
	`to_°rög
(
D1
);

80 
Eº‹
 +
D2
 !
°d
::
	`°rög
("i16vec2(1, 2)") ? 1 : 0;

82 
glm
::
i16vec3
 
	`E1
(1, 2, 3);

83 
°d
::
°rög
 
E2
 = 
glm
::
	`to_°rög
(
E1
);

84 
Eº‹
 +
E2
 !
°d
::
	`°rög
("i16vec3(1, 2, 3)") ? 1 : 0;

86 
glm
::
i16vec4
 
	`F1
(1, 2, 3, 4);

87 
°d
::
°rög
 
F2
 = 
glm
::
	`to_°rög
(
F1
);

88 
Eº‹
 +
F2
 !
°d
::
	`°rög
("i16vec4(1, 2, 3, 4)") ? 1 : 0;

92 
glm
::
i64vec2
 
	`D1
(1, 2);

93 
°d
::
°rög
 
D2
 = 
glm
::
	`to_°rög
(
D1
);

94 
Eº‹
 +
D2
 !
°d
::
	`°rög
("i64vec2(1, 2)") ? 1 : 0;

96 
glm
::
i64vec3
 
	`E1
(1, 2, 3);

97 
°d
::
°rög
 
E2
 = 
glm
::
	`to_°rög
(
E1
);

98 
Eº‹
 +
E2
 !
°d
::
	`°rög
("i64vec3(1, 2, 3)") ? 1 : 0;

100 
glm
::
i64vec4
 
	`F1
(1, 2, 3, 4);

101 
°d
::
°rög
 
F2
 = 
glm
::
	`to_°rög
(
F1
);

102 
Eº‹
 +
F2
 !
°d
::
	`°rög
("i64vec4(1, 2, 3, 4)") ? 1 : 0;

105  
Eº‹
;

106 
	}
}

108 
	$ã°_°rög_ˇ°_m©rix
()

110 
Eº‹
 = 0;

112 
glm
::
m©2x2
 
	`A1
(1.000000, 2.000000, 3.000000, 4.000000);

113 
°d
::
°rög
 
A2
 = 
glm
::
	`to_°rög
(
A1
);

114 
Eº‹
 +
A2
 !
°d
::
	`°rög
("mat2x2((1.000000, 2.000000), (3.000000, 4.000000))") ? 1 : 0;

116  
Eº‹
;

117 
	}
}

119 
	$maö
()

121 
Eº‹
 = 0;

122 
Eº‹
 +
	`ã°_°rög_ˇ°_ve˘‹
();

123 
Eº‹
 +
	`ã°_°rög_ˇ°_m©rix
();

125  
Eº‹
;

126 
	}
}

	@glm/test/gtx/gtx_type_aligned.cpp

1 
	~<glm/gtx/ty≥_Æig√d.hµ
>

2 
	~<c°dio
>

4 
	$ã°_de˛
()

6 
	`Eº‹
(0);

9 
	sS1


11 
glm
::
Æig√d_vec4
 
B
;

14 
	sS2


16 
glm
::
vec4
 
B
;

19 
	`¥ötf
("vec4 - Alig√d: %d, u«lig√d: %d\n", 
°©ic_ˇ°
<>((
S1
)), sètic_ˇ°<>((
S2
)));

21 
Eº‹
 +(
S1
Ë>(
S2
) ? 0 : 1;

25 
	sS1


27 
boﬁ
 
A
;

28 
glm
::
vec3
 
B
;

31 
	sS2


33 
boﬁ
 
A
;

34 
glm
::
Æig√d_vec3
 
B
;

37 
	`¥ötf
("vec3 - Alig√d: %d, u«lig√d: %d\n", 
°©ic_ˇ°
<>((
S1
)), sètic_ˇ°<>((
S2
)));

39 
Eº‹
 +(
S1
Ë<(
S2
) ? 0 : 1;

43 
	sS1


45 
boﬁ
 
A
;

46 
glm
::
Æig√d_vec4
 
B
;

49 
	sS2


51 
boﬁ
 
A
;

52 
glm
::
vec4
 
B
;

55 
	`¥ötf
("vec4 - Alig√d: %d, u«lig√d: %d\n", 
°©ic_ˇ°
<>((
S1
)), sètic_ˇ°<>((
S2
)));

57 
Eº‹
 +(
S1
Ë>(
S2
) ? 0 : 1;

61 
	sS1


63 
boﬁ
 
A
;

64 
glm
::
Æig√d_dvec4
 
B
;

67 
	sS2


69 
boﬁ
 
A
;

70 
glm
::
dvec4
 
B
;

73 
	`¥ötf
("dvec4 - Alig√d: %d, u«lig√d: %d\n", 
°©ic_ˇ°
<>((
S1
)), sètic_ˇ°<>((
S2
)));

75 
Eº‹
 +(
S1
Ë>(
S2
) ? 0 : 1;

78  
Eº‹
;

79 
	}
}

81 
	gãm∂©e
 <
ty≥«me
 
	ggíTy≥
>

82 
	$¥öt
(
gíTy≥
 c⁄° & 
M©0
)

84 
	`¥ötf
("mat4(\n");

85 
	`¥ötf
("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", 
M©0
[0][0], Mat0[0][1], Mat0[0][2], Mat0[0][3]);

86 
	`¥ötf
("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", 
M©0
[1][0], Mat0[1][1], Mat0[1][2], Mat0[1][3]);

87 
	`¥ötf
("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", 
M©0
[2][0], Mat0[2][1], Mat0[2][2], Mat0[2][3]);

88 
	`¥ötf
("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f))\n\n", 
M©0
[3][0], Mat0[3][1], Mat0[3][2], Mat0[3][3]);

89 
	}
}

91 
	$≥rf_mul
()

93 
Eº‹
 = 0;

95 
glm
::
m©4
 
	`A
(1.0f);

96 
glm
::
m©4
 
	`B
(1.0f);

98 
glm
::
m©4
 
C
 = 
A
 * 
B
;

100 
	`¥öt
(
C
);

102  
Eº‹
;

103 
	}
}

105 
	$maö
()

107 
	`Eº‹
(0);

109 
Eº‹
 +
	`ã°_de˛
();

110 
Eº‹
 +
	`≥rf_mul
();

112  
Eº‹
;

113 
	}
}

	@glm/test/gtx/gtx_type_trait.cpp

1 
	~<glm/vec4.hµ
>

2 
	~<glm/gtx/ty≥_åaô.hµ
>

4 
	$maö
()

6 
Eº‹
 = 0;

10  
Eº‹
;

11 
	}
}

	@glm/test/gtx/gtx_vector_angle.cpp

1 
	~<glm/gtc/c⁄°™ts.hµ
>

2 
	~<glm/gtx/ve˘‹_™gÀ.hµ
>

3 
	~<limôs
>

5 
	$ã°_™gÀ
()

7 
Eº‹
 = 0;

9 
AngÀA
 = 
glm
::
	`™gÀ
(glm::
	`vec2
(1, 0), glm::
	`n‹mÆize
(glm::vec2(1, 1)));

10 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
AngÀA
, glm::
pi
<>() * 0.25f, 0.01f) ? 0 : 1;

11 
AngÀB
 = 
glm
::
	`™gÀ
(glm::
	`vec3
(1, 0, 0), glm::
	`n‹mÆize
(glm::vec3(1, 1, 0)));

12 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
AngÀB
, glm::
pi
<>() * 0.25f, 0.01f) ? 0 : 1;

13 
AngÀC
 = 
glm
::
	`™gÀ
(glm::
	`vec4
(1, 0, 0, 0), glm::
	`n‹mÆize
(glm::vec4(1, 1, 0, 0)));

14 
Eº‹
 +
glm
::
	`ïsû⁄EquÆ
(
AngÀC
, glm::
pi
<>() * 0.25f, 0.01f) ? 0 : 1;

16  
Eº‹
;

17 
	}
}

19 
	$ã°_‹õ¡edAngÀ_vec2
()

21 
Eº‹
 = 0;

23 
AngÀA
 = 
glm
::
	`‹õ¡edAngÀ
(glm::
	`vec2
(1, 0), glm::
	`n‹mÆize
(glm::vec2(1, 1)));

24 
Eº‹
 +
AngÀA
 =
glm
::
pi
<>() * 0.25f ? 0 : 1;

25 
AngÀB
 = 
glm
::
	`‹õ¡edAngÀ
(glm::
	`vec2
(0, 1), glm::
	`n‹mÆize
(glm::vec2(1, 1)));

26 
Eº‹
 +
AngÀB
 =-
glm
::
pi
<>() * 0.25f ? 0 : 1;

27 
AngÀC
 = 
glm
::
	`‹õ¡edAngÀ
(glm::
	`n‹mÆize
(glm::
	`vec2
(1, 1)), glm::vec2(0, 1));

28 
Eº‹
 +
AngÀC
 =
glm
::
pi
<>() * 0.25f ? 0 : 1;

30  
Eº‹
;

31 
	}
}

33 
	$ã°_‹õ¡edAngÀ_vec3
()

35 
Eº‹
 = 0;

37 
AngÀA
 = 
glm
::
	`‹õ¡edAngÀ
(glm::
	`vec3
(1, 0, 0), glm::
	`n‹mÆize
(glm::vec3(1, 1, 0)), glm::vec3(0, 0, 1));

38 
Eº‹
 +
AngÀA
 =
glm
::
pi
<>() * 0.25f ? 0 : 1;

39 
AngÀB
 = 
glm
::
	`‹õ¡edAngÀ
(glm::
	`vec3
(0, 1, 0), glm::
	`n‹mÆize
(glm::vec3(1, 1, 0)), glm::vec3(0, 0, 1));

40 
Eº‹
 +
AngÀB
 =-
glm
::
pi
<>() * 0.25f ? 0 : 1;

41 
AngÀC
 = 
glm
::
	`‹õ¡edAngÀ
(glm::
	`n‹mÆize
(glm::
	`vec3
(1, 1, 0)), glm::vec3(0, 1, 0), glm::vec3(0, 0, 1));

42 
Eº‹
 +
AngÀC
 =
glm
::
pi
<>() * 0.25f ? 0 : 1;

44  
Eº‹
;

45 
	}
}

47 
	$maö
()

49 
	`Eº‹
(0);

51 
Eº‹
 +
	`ã°_™gÀ
();

52 
Eº‹
 +
	`ã°_‹õ¡edAngÀ_vec2
();

53 
Eº‹
 +
	`ã°_‹õ¡edAngÀ_vec3
();

55  
Eº‹
;

56 
	}
}

	@glm/test/gtx/gtx_vector_query.cpp

1 
	~<glm/vec2.hµ
>

2 
	~<glm/vec3.hµ
>

3 
	~<glm/vec4.hµ
>

4 
	~<glm/gtx/ve˘‹_quîy.hµ
>

6 
	$ã°_¨eCﬁlöór
()

8 
	`Eº‹
(0);

11 
boﬁ
 
Te°A
 = 
glm
::
	`¨eCﬁlöór
(glm::
	`vec2
(-1), glm::vec2(1), 0.00001f);

12 
Eº‹
 +
Te°A
 ? 0 : 1;

16 
boﬁ
 
Te°A
 = 
glm
::
	`¨eCﬁlöór
(glm::
	`vec3
(-1), glm::vec3(1), 0.00001f);

17 
Eº‹
 +
Te°A
 ? 0 : 1;

21 
boﬁ
 
Te°A
 = 
glm
::
	`¨eCﬁlöór
(glm::
	`vec4
(-1), glm::vec4(1), 0.00001f);

22 
Eº‹
 +
Te°A
 ? 0 : 1;

25  
Eº‹
;

26 
	}
}

28 
	$ã°_¨eOπhog⁄Æ
()

30 
	`Eº‹
(0);

32 
boﬁ
 
Te°A
 = 
glm
::
	`¨eOπhog⁄Æ
(glm::
	`vec2
(1, 0), glm::vec2(0, 1), 0.00001f);

33 
Eº‹
 +
Te°A
 ? 0 : 1;

35  
Eº‹
;

36 
	}
}

38 
	$ã°_isN‹mÆized
()

40 
	`Eº‹
(0);

42 
boﬁ
 
Te°A
 = 
glm
::
	`isN‹mÆized
(glm::
	`vec4
(1, 0, 0, 0), 0.00001f);

43 
Eº‹
 +
Te°A
 ? 0 : 1;

45  
Eº‹
;

46 
	}
}

48 
	$ã°_isNuŒ
()

50 
	`Eº‹
(0);

52 
boﬁ
 
Te°A
 = 
glm
::
	`isNuŒ
(glm::
	`vec4
(0), 0.00001f);

53 
Eº‹
 +
Te°A
 ? 0 : 1;

55  
Eº‹
;

56 
	}
}

58 
	$ã°_¨eOπh⁄‹mÆ
()

60 
	`Eº‹
(0);

62 
boﬁ
 
Te°A
 = 
glm
::
	`¨eOπh⁄‹mÆ
(glm::
	`vec2
(1, 0), glm::vec2(0, 1), 0.00001f);

63 
Eº‹
 +
Te°A
 ? 0 : 1;

65  
Eº‹
;

66 
	}
}

68 
	$maö
()

70 
	`Eº‹
(0);

72 
Eº‹
 +
	`ã°_¨eCﬁlöór
();

73 
Eº‹
 +
	`ã°_¨eOπhog⁄Æ
();

74 
Eº‹
 +
	`ã°_isN‹mÆized
();

75 
Eº‹
 +
	`ã°_isNuŒ
();

76 
Eº‹
 +
	`ã°_¨eOπh⁄‹mÆ
();

78  
Eº‹
;

79 
	}
}

	@glm/test/gtx/gtx_wrap.cpp

1 
	~<glm/gtx/wøp.hµ
>

2 
	~<glm/gtc/ïsû⁄.hµ
>

4 
«me•a˚
 
	g˛amp


6 
ã°
()

8 
Eº‹
(0);

10 
	gA
 = 
glm
::
˛amp
(0.5f);

11 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
, 0.5f, 0.00001f) ? 0 : 1;

13 
	gB
 = 
glm
::
˛amp
(0.0f);

14 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
B
, 0.0f, 0.00001f) ? 0 : 1;

16 
	gC
 = 
glm
::
˛amp
(1.0f);

17 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
C
, 1.0f, 0.00001f) ? 0 : 1;

19 
	gD
 = 
glm
::
˛amp
(-0.5f);

20 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
D
, 0.0f, 0.00001f) ? 0 : 1;

22 
	gE
 = 
glm
::
˛amp
(1.5f);

23 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
E
, 1.0f, 0.00001f) ? 0 : 1;

25 
	gglm
::
vec2
 
K
 = 
glm
::
˛amp
(glm::vec2(0.5f));

26 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
K
, glm::
vec2
(0.5f), glm::vec2(0.00001f))) ? 0 : 1;

28 
	gglm
::
vec3
 
L
 = 
glm
::
˛amp
(glm::vec3(0.5f));

29 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
L
, glm::
vec3
(0.5f), glm::vec3(0.00001f))) ? 0 : 1;

31 
	gglm
::
vec4
 
M
 = 
glm
::
˛amp
(glm::vec4(0.5f));

32 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
M
, glm::
vec4
(0.5f), glm::vec4(0.00001f))) ? 0 : 1;

34 
	gglm
::
vec1
 
N
 = 
glm
::
˛amp
(glm::vec1(0.5f));

35 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
N
, glm::
vec1
(0.5f), glm::vec1(0.00001f))) ? 0 : 1;

37  
	gEº‹
;

41 
«me•a˚
 
	gª≥©


43 
ã°
()

45 
Eº‹
(0);

47 
	gA
 = 
glm
::
ª≥©
(0.5f);

48 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
, 0.5f, 0.00001f) ? 0 : 1;

50 
	gB
 = 
glm
::
ª≥©
(0.0f);

51 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
B
, 0.0f, 0.00001f) ? 0 : 1;

53 
	gC
 = 
glm
::
ª≥©
(1.0f);

54 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
C
, 0.0f, 0.00001f) ? 0 : 1;

56 
	gD
 = 
glm
::
ª≥©
(-0.5f);

57 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
D
, 0.5f, 0.00001f) ? 0 : 1;

59 
	gE
 = 
glm
::
ª≥©
(1.5f);

60 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
E
, 0.5f, 0.00001f) ? 0 : 1;

62 
	gF
 = 
glm
::
ª≥©
(0.9f);

63 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
F
, 0.9f, 0.00001f) ? 0 : 1;

65 
	gglm
::
vec2
 
K
 = 
glm
::
ª≥©
(glm::vec2(0.5f));

66 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
K
, glm::
vec2
(0.5f), glm::vec2(0.00001f))) ? 0 : 1;

68 
	gglm
::
vec3
 
L
 = 
glm
::
ª≥©
(glm::vec3(0.5f));

69 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
L
, glm::
vec3
(0.5f), glm::vec3(0.00001f))) ? 0 : 1;

71 
	gglm
::
vec4
 
M
 = 
glm
::
ª≥©
(glm::vec4(0.5f));

72 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
M
, glm::
vec4
(0.5f), glm::vec4(0.00001f))) ? 0 : 1;

74 
	gglm
::
vec1
 
N
 = 
glm
::
ª≥©
(glm::vec1(0.5f));

75 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
N
, glm::
vec1
(0.5f), glm::vec1(0.00001f))) ? 0 : 1;

77  
	gEº‹
;

81 
«me•a˚
 
	gmúr‹Cœmp


83 
ã°
()

85 
Eº‹
(0);

87 
	gA
 = 
glm
::
múr‹Cœmp
(0.5f);

88 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
, 0.5f, 0.00001f) ? 0 : 1;

90 
	gB
 = 
glm
::
múr‹Cœmp
(0.0f);

91 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
B
, 0.0f, 0.00001f) ? 0 : 1;

93 
	gC
 = 
glm
::
múr‹Cœmp
(1.1f);

94 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
C
, 0.1f, 0.00001f) ? 0 : 1;

96 
	gD
 = 
glm
::
múr‹Cœmp
(-0.5f);

97 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
D
, 0.5f, 0.00001f) ? 0 : 1;

99 
	gE
 = 
glm
::
múr‹Cœmp
(1.5f);

100 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
E
, 0.5f, 0.00001f) ? 0 : 1;

102 
	gF
 = 
glm
::
múr‹Cœmp
(0.9f);

103 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
F
, 0.9f, 0.00001f) ? 0 : 1;

105 
	gG
 = 
glm
::
múr‹Cœmp
(3.1f);

106 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
G
, 0.1f, 0.00001f) ? 0 : 1;

108 
	gH
 = 
glm
::
múr‹Cœmp
(-3.1f);

109 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
H
, 0.1f, 0.00001f) ? 0 : 1;

111 
	gI
 = 
glm
::
múr‹Cœmp
(-0.9f);

112 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
I
, 0.9f, 0.00001f) ? 0 : 1;

114 
	gglm
::
vec2
 
K
 = 
glm
::
múr‹Cœmp
(glm::vec2(0.5f));

115 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
K
, glm::
vec2
(0.5f), glm::vec2(0.00001f))) ? 0 : 1;

117 
	gglm
::
vec3
 
L
 = 
glm
::
múr‹Cœmp
(glm::vec3(0.5f));

118 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
L
, glm::
vec3
(0.5f), glm::vec3(0.00001f))) ? 0 : 1;

120 
	gglm
::
vec4
 
M
 = 
glm
::
múr‹Cœmp
(glm::vec4(0.5f));

121 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
M
, glm::
vec4
(0.5f), glm::vec4(0.00001f))) ? 0 : 1;

123 
	gglm
::
vec1
 
N
 = 
glm
::
múr‹Cœmp
(glm::vec1(0.5f));

124 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
N
, glm::
vec1
(0.5f), glm::vec1(0.00001f))) ? 0 : 1;

126  
	gEº‹
;

130 
«me•a˚
 
	gmúr‹Rïót


132 
ã°
()

134 
Eº‹
(0);

136 
	gA
 = 
glm
::
múr‹Rïót
(0.5f);

137 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
A
, 0.5f, 0.00001f) ? 0 : 1;

139 
	gB
 = 
glm
::
múr‹Rïót
(0.0f);

140 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
B
, 0.0f, 0.00001f) ? 0 : 1;

142 
	gC
 = 
glm
::
múr‹Rïót
(1.0f);

143 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
C
, 1.0f, 0.00001f) ? 0 : 1;

145 
	gD
 = 
glm
::
múr‹Rïót
(-0.5f);

146 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
D
, 0.5f, 0.00001f) ? 0 : 1;

148 
	gE
 = 
glm
::
múr‹Rïót
(1.5f);

149 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
E
, 0.5f, 0.00001f) ? 0 : 1;

151 
	gF
 = 
glm
::
múr‹Rïót
(0.9f);

152 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
F
, 0.9f, 0.00001f) ? 0 : 1;

154 
	gG
 = 
glm
::
múr‹Rïót
(3.0f);

155 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
G
, 1.0f, 0.00001f) ? 0 : 1;

157 
	gH
 = 
glm
::
múr‹Rïót
(-3.0f);

158 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
H
, 1.0f, 0.00001f) ? 0 : 1;

160 
	gI
 = 
glm
::
múr‹Rïót
(-1.0f);

161 
	gEº‹
 +
glm
::
ïsû⁄EquÆ
(
I
, 1.0f, 0.00001f) ? 0 : 1;

163 
	gglm
::
vec2
 
K
 = 
glm
::
múr‹Rïót
(glm::vec2(0.5f));

164 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
K
, glm::
vec2
(0.5f), glm::vec2(0.00001f))) ? 0 : 1;

166 
	gglm
::
vec3
 
L
 = 
glm
::
múr‹Rïót
(glm::vec3(0.5f));

167 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
L
, glm::
vec3
(0.5f), glm::vec3(0.00001f))) ? 0 : 1;

169 
	gglm
::
vec4
 
M
 = 
glm
::
múr‹Rïót
(glm::vec4(0.5f));

170 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
M
, glm::
vec4
(0.5f), glm::vec4(0.00001f))) ? 0 : 1;

172 
	gglm
::
vec1
 
N
 = 
glm
::
múr‹Rïót
(glm::vec1(0.5f));

173 
	gEº‹
 +
glm
::
Æl
(glm::
ïsû⁄EquÆ
(
N
, glm::
vec1
(0.5f), glm::vec1(0.00001f))) ? 0 : 1;

175  
	gEº‹
;

179 
	$maö
()

181 
	`Eº‹
(0);

183 
Eº‹
 +
˛amp
::
	`ã°
();

184 
Eº‹
 +
ª≥©
::
	`ã°
();

185 
Eº‹
 +
múr‹Cœmp
::
	`ã°
();

186 
Eº‹
 +
múr‹Rïót
::
	`ã°
();

188  
Eº‹
;

189 
	}
}

	@main.cpp

1 
	~<io°ªam
>

2 
	~<°döt.h
>

3 
	~<SDL.h
>

4 
	~<Ra°îizî.h
>

5 
	~<glm.hµ
>

6 
	~<m©rix_å™sf‹m.hµ
>

7 
	~<Obj2.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<time.h
>

11 
usög
 
«me•a˚
 
	g°d
;

17 
SDL_SurÁ˚
 *
	gs¸ìn
 = 
NULL
;

59 
	$maö
(
¨gc
, *
¨gv
[])

62 i‡(
	`SDL_Inô
(
SDL_INIT_EVERYTHING
) == -1)

67 
s¸ìn
 = 
	`SDL_SëVideoMode
(
SCREEN_WIDTH
, 
SCREEN_HEIGHT
, 
SCREEN_BPP
, 
SDL_SWSURFACE
);

69 i‡(
s¸ìn
 =
NULL
)

74 
	`SDL_WM_SëC≠ti⁄
("HñlÿW‹ld", 
NULL
);

76 
Ra°îizî
 
ø°îizî
;

77 
ø°îizî
.
	`SëFømeBuf„r
((
uöt32_t
*)
s¸ìn
->
pixñs
, 
SCREEN_WIDTH
, 
SCREEN_HEIGHT
);

78 
Obj2
 
	`obj
("cube_VT_VN.obj" );

79 
obj
.
	`lﬂdAŒ
();

83 
˛ock_t
 
œ°Time
 = 
	`SDL_GëTicks
();

84 
⁄eSecCou¡
 = 0.0f;

86 
yAngÀ
 = 0.0f;

87 
boﬁ
 
go
 = 
åue
;

89 
go
)

93 
˛ock_t
 
cuºítTime
 = 
	`SDL_GëTicks
();

94 
dñèTs
 = (Ë(
cuºítTime
 - 
œ°Time
) / 1000.0f;

95 
œ°Time
 = 
cuºítTime
;

96 
	`¥ötf
("%‡\n", 
dñèTs
);

100 if(
⁄eSecCou¡
 >= 1.0f)

106 
⁄eSecCou¡
 = 0.0f;

110 
⁄eSecCou¡
 +
dñèTs
;

112 
yAngÀ
++;

114 
SDL_Evít
 
evít
;

115 
	`SDL_PﬁlEvít
(&
evít
))

118 
evít
.
ty≥
){

119 
SDL_KEYDOWN
:

120 
evít
.
key
.
keysym
.
sym
)

122 
SDLK_d
:

123 
	`¥ötf
("d");

124 
yAngÀ
++;

126 
SDLK_ESCAPE
:

127 
go
 = 
Ál£
;

132 
SDL_KEYUP
:

133 
evít
.
key
.
keysym
.
sym
)

135 
SDLK_d
:

136 
	`¥ötf
("d");

146 
SDL_Re˘
 
s¸
;

147 
s¸
.
x
 = 0;

148 
s¸
.
y
 = 0;

149 
s¸
.
w
 = 
SCREEN_WIDTH
;

150 
s¸
.
h
 = 
SCREEN_HEIGHT
;

151 
	`SDL_FûlRe˘
(
s¸ìn
, &
s¸
, 
	`SDL_M≠RGB
(s¸ìn->
f‹m©
, 0, 0, 0));

153 
Cﬁ‹
 
	`cﬁ‹0
(1.0f, 0.0f, 0.0f, 1.0f);

154 
Cﬁ‹
 
	`cﬁ‹1
(0.0f, 1.0f, 0.0f, 1.0f);

155 
Cﬁ‹
 
	`cﬁ‹2
(0.0f, 0.0f, 1.0f, 1.0f);

157 
Cﬁ‹
 
	`cﬁ‹3
(1.0f,1.0f,1.0f,1.0f);

172 
glm
::
vec4
 
	`v0
(
obj
.
VRTE
[0], obj.VRTE[1], obj.VRTE[2], 1.0f);

173 
glm
::
vec4
 
	`v1
(
obj
.
VRTE
[3], obj.VRTE[4], obj.VRTE[5], 1.0f);

174 
glm
::
vec4
 
	`v2
(
obj
.
VRTE
[6], obj.VRTE[7], obj.VRTE[8], 1.0f);

176 
glm
::
m©4
 
_modñM©rix
 = glm::
	`å™¶©e
(glm::
	`sˇÀ
(glm::
	`rŸ©e
(glm::
	`m©4
(1.0f), (
yAngÀ
 *glm::
pi
<>(Ë)/180.0f, glm::
	`vec3
(0.0f, 1.0f, .0f)), glm::vec3(1.0f, 1.0f, 1.0f)), glm::vec3(0.0f, 0.0f, 0.0f));

177 
glm
::
m©4
 
_võwM©rix
 = glm::
	`å™¶©e
–glm::
	`rŸ©e
(glm::
	`m©4
(1.0f), (0.0‡*glm::
pi
<>(Ë)/180.0f, glm::
	`vec3
(0.0f, 1.0f, .0f)), glm::vec3(0.0f, 0.0f, -5.0f));

178 
glm
::
m©4
 
_¥oje˘i⁄M©rix
 = glm::
≥r•e˘iveFov
<>(45.0f,
SCREEN_WIDTH
, 
SCREEN_HEIGHT
, 0.0f, 2000.0f);

179 
glm
::
m©4
 
_MVP
 = 
_¥oje˘i⁄M©rix
 * 
_võwM©rix
 * 
_modñM©rix
;

183 
ø°îizî
.
	`DøwLöe
(&
cﬁ‹3
, 
glm
::
	`ivec2
(0, 0), &cﬁ‹3, glm::ivec2(
SCREEN_WIDTH
-1, 0));

184 
ø°îizî
.
	`DøwLöe
(&
cﬁ‹3
, 
glm
::
	`ivec2
(0, 
SCREEN_HEIGHT
-1), &cﬁ‹3, glm::ivec2(
SCREEN_WIDTH
 - 1, SCREEN_HEIGHT - 1));

185 
ø°îizî
.
	`DøwLöe
(&
cﬁ‹3
, 
glm
::
	`ivec2
(0, 0), &cﬁ‹3, glm::ivec2(0, 
SCREEN_HEIGHT
-1));

186 
ø°îizî
.
	`DøwLöe
(&
cﬁ‹3
, 
glm
::
	`ivec2
(
SCREEN_WIDTH
-1, 0), &cﬁ‹3, glm::ivec2(SCREEN_WIDTH-1, 
SCREEN_HEIGHT
-1));

204 
ø°îizî
.
	`DøwTrüngÀs
(&
obj
.
vîti˚s
, 
_MVP
);

206 
	`SDL_Flù
(
s¸ìn
);

207 
	`SDL_Dñay
(10);

210 
	`SDL_Quô
();

213 
	}
}

	@/usr/include/GL/gl.h

27 #i‚de‡
__gl_h_


28 
	#__gl_h_


	)

30 #i‡
deföed
(
USE_MGL_NAMESPACE
)

31 
	~"gl_m™gÀ.h
"

39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

40 
	#__WIN32__


	)

43 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

44 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GL32
)

45 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

46 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

47 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

49 
	#GLAPI
 

	)

51 #i‡
deföed
(
__MINGW32__
Ë&& deföed(
GL_NO_STDCALL
Ë|| deföed(
UNDER_CE
)

52 
	#GLAPIENTRY


	)

54 
	#GLAPIENTRY
 
__°dˇŒ


	)

56 #ñi‡
deföed
(
__CYGWIN__
Ë&& deföed(
USE_OPENGL32
)

57 
	#GLAPI
 

	)

58 
	#GLAPIENTRY
 
__°dˇŒ


	)

59 #ñi‡(
deföed
(
__GNUC__
Ë&& __GNUC__ >4Ë|| (deföed(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

60 
	#GLAPI
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

61 
	#GLAPIENTRY


	)

72 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
)

73 #i‚de‡
WIN32_LEAN_AND_MEAN


74 
	#WIN32_LEAN_AND_MEAN
 1

	)

76 
	~<wödows.h
>

79 #i‚de‡
GLAPI


80 
	#GLAPI
 

	)

83 #i‚de‡
GLAPIENTRY


84 
	#GLAPIENTRY


	)

87 #i‚de‡
APIENTRY


88 
	#APIENTRY
 
GLAPIENTRY


	)

92 #i‚de‡
APIENTRYP


93 
	#APIENTRYP
 
APIENTRY
 *

	)

96 #i‚de‡
GLAPIENTRYP


97 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

106 #ifde‡
__˝lu•lus


112 
	#GL_VERSION_1_1
 1

	)

113 
	#GL_VERSION_1_2
 1

	)

114 
	#GL_VERSION_1_3
 1

	)

115 
	#GL_ARB_imagög
 1

	)

121 
	tGLíum
;

122 
	tGLboﬁón
;

123 
	tGLbôfõld
;

124 
	tGLvoid
;

125 sig√d 
	tGLbyã
;

126 
	tGLsh‹t
;

127 
	tGLöt
;

128 
	tGLubyã
;

129 
	tGLush‹t
;

130 
	tGLuöt
;

131 
	tGLsizei
;

132 
	tGLÊﬂt
;

133 
	tGL˛ampf
;

134 
	tGLdoubÀ
;

135 
	tGL˛ampd
;

144 
	#GL_FALSE
 0

	)

145 
	#GL_TRUE
 1

	)

148 
	#GL_BYTE
 0x1400

	)

149 
	#GL_UNSIGNED_BYTE
 0x1401

	)

150 
	#GL_SHORT
 0x1402

	)

151 
	#GL_UNSIGNED_SHORT
 0x1403

	)

152 
	#GL_INT
 0x1404

	)

153 
	#GL_UNSIGNED_INT
 0x1405

	)

154 
	#GL_FLOAT
 0x1406

	)

155 
	#GL_2_BYTES
 0x1407

	)

156 
	#GL_3_BYTES
 0x1408

	)

157 
	#GL_4_BYTES
 0x1409

	)

158 
	#GL_DOUBLE
 0x140A

	)

161 
	#GL_POINTS
 0x0000

	)

162 
	#GL_LINES
 0x0001

	)

163 
	#GL_LINE_LOOP
 0x0002

	)

164 
	#GL_LINE_STRIP
 0x0003

	)

165 
	#GL_TRIANGLES
 0x0004

	)

166 
	#GL_TRIANGLE_STRIP
 0x0005

	)

167 
	#GL_TRIANGLE_FAN
 0x0006

	)

168 
	#GL_QUADS
 0x0007

	)

169 
	#GL_QUAD_STRIP
 0x0008

	)

170 
	#GL_POLYGON
 0x0009

	)

173 
	#GL_VERTEX_ARRAY
 0x8074

	)

174 
	#GL_NORMAL_ARRAY
 0x8075

	)

175 
	#GL_COLOR_ARRAY
 0x8076

	)

176 
	#GL_INDEX_ARRAY
 0x8077

	)

177 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

178 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

179 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

180 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

181 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

182 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

183 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

184 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

185 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

186 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

187 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

188 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

189 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

190 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

191 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

192 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

193 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

194 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

195 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

196 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

197 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

198 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

199 
	#GL_V2F
 0x2A20

	)

200 
	#GL_V3F
 0x2A21

	)

201 
	#GL_C4UB_V2F
 0x2A22

	)

202 
	#GL_C4UB_V3F
 0x2A23

	)

203 
	#GL_C3F_V3F
 0x2A24

	)

204 
	#GL_N3F_V3F
 0x2A25

	)

205 
	#GL_C4F_N3F_V3F
 0x2A26

	)

206 
	#GL_T2F_V3F
 0x2A27

	)

207 
	#GL_T4F_V4F
 0x2A28

	)

208 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

209 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

210 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

211 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

212 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

215 
	#GL_MATRIX_MODE
 0x0BA0

	)

216 
	#GL_MODELVIEW
 0x1700

	)

217 
	#GL_PROJECTION
 0x1701

	)

218 
	#GL_TEXTURE
 0x1702

	)

221 
	#GL_POINT_SMOOTH
 0x0B10

	)

222 
	#GL_POINT_SIZE
 0x0B11

	)

223 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

224 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

227 
	#GL_LINE_SMOOTH
 0x0B20

	)

228 
	#GL_LINE_STIPPLE
 0x0B24

	)

229 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

230 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

231 
	#GL_LINE_WIDTH
 0x0B21

	)

232 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

233 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

236 
	#GL_POINT
 0x1B00

	)

237 
	#GL_LINE
 0x1B01

	)

238 
	#GL_FILL
 0x1B02

	)

239 
	#GL_CW
 0x0900

	)

240 
	#GL_CCW
 0x0901

	)

241 
	#GL_FRONT
 0x0404

	)

242 
	#GL_BACK
 0x0405

	)

243 
	#GL_POLYGON_MODE
 0x0B40

	)

244 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

245 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

246 
	#GL_EDGE_FLAG
 0x0B43

	)

247 
	#GL_CULL_FACE
 0x0B44

	)

248 
	#GL_CULL_FACE_MODE
 0x0B45

	)

249 
	#GL_FRONT_FACE
 0x0B46

	)

250 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

251 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

252 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

253 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

254 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

257 
	#GL_COMPILE
 0x1300

	)

258 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

259 
	#GL_LIST_BASE
 0x0B32

	)

260 
	#GL_LIST_INDEX
 0x0B33

	)

261 
	#GL_LIST_MODE
 0x0B30

	)

264 
	#GL_NEVER
 0x0200

	)

265 
	#GL_LESS
 0x0201

	)

266 
	#GL_EQUAL
 0x0202

	)

267 
	#GL_LEQUAL
 0x0203

	)

268 
	#GL_GREATER
 0x0204

	)

269 
	#GL_NOTEQUAL
 0x0205

	)

270 
	#GL_GEQUAL
 0x0206

	)

271 
	#GL_ALWAYS
 0x0207

	)

272 
	#GL_DEPTH_TEST
 0x0B71

	)

273 
	#GL_DEPTH_BITS
 0x0D56

	)

274 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

275 
	#GL_DEPTH_FUNC
 0x0B74

	)

276 
	#GL_DEPTH_RANGE
 0x0B70

	)

277 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

278 
	#GL_DEPTH_COMPONENT
 0x1902

	)

281 
	#GL_LIGHTING
 0x0B50

	)

282 
	#GL_LIGHT0
 0x4000

	)

283 
	#GL_LIGHT1
 0x4001

	)

284 
	#GL_LIGHT2
 0x4002

	)

285 
	#GL_LIGHT3
 0x4003

	)

286 
	#GL_LIGHT4
 0x4004

	)

287 
	#GL_LIGHT5
 0x4005

	)

288 
	#GL_LIGHT6
 0x4006

	)

289 
	#GL_LIGHT7
 0x4007

	)

290 
	#GL_SPOT_EXPONENT
 0x1205

	)

291 
	#GL_SPOT_CUTOFF
 0x1206

	)

292 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

293 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

294 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

295 
	#GL_AMBIENT
 0x1200

	)

296 
	#GL_DIFFUSE
 0x1201

	)

297 
	#GL_SPECULAR
 0x1202

	)

298 
	#GL_SHININESS
 0x1601

	)

299 
	#GL_EMISSION
 0x1600

	)

300 
	#GL_POSITION
 0x1203

	)

301 
	#GL_SPOT_DIRECTION
 0x1204

	)

302 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

303 
	#GL_COLOR_INDEXES
 0x1603

	)

304 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

305 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

306 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

307 
	#GL_FRONT_AND_BACK
 0x0408

	)

308 
	#GL_SHADE_MODEL
 0x0B54

	)

309 
	#GL_FLAT
 0x1D00

	)

310 
	#GL_SMOOTH
 0x1D01

	)

311 
	#GL_COLOR_MATERIAL
 0x0B57

	)

312 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

313 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

314 
	#GL_NORMALIZE
 0x0BA1

	)

317 
	#GL_CLIP_PLANE0
 0x3000

	)

318 
	#GL_CLIP_PLANE1
 0x3001

	)

319 
	#GL_CLIP_PLANE2
 0x3002

	)

320 
	#GL_CLIP_PLANE3
 0x3003

	)

321 
	#GL_CLIP_PLANE4
 0x3004

	)

322 
	#GL_CLIP_PLANE5
 0x3005

	)

325 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

326 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

327 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

328 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

329 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

330 
	#GL_ACCUM
 0x0100

	)

331 
	#GL_ADD
 0x0104

	)

332 
	#GL_LOAD
 0x0101

	)

333 
	#GL_MULT
 0x0103

	)

334 
	#GL_RETURN
 0x0102

	)

337 
	#GL_ALPHA_TEST
 0x0BC0

	)

338 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

339 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

342 
	#GL_BLEND
 0x0BE2

	)

343 
	#GL_BLEND_SRC
 0x0BE1

	)

344 
	#GL_BLEND_DST
 0x0BE0

	)

345 
	#GL_ZERO
 0

	)

346 
	#GL_ONE
 1

	)

347 
	#GL_SRC_COLOR
 0x0300

	)

348 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

349 
	#GL_SRC_ALPHA
 0x0302

	)

350 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

351 
	#GL_DST_ALPHA
 0x0304

	)

352 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

353 
	#GL_DST_COLOR
 0x0306

	)

354 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

355 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

358 
	#GL_FEEDBACK
 0x1C01

	)

359 
	#GL_RENDER
 0x1C00

	)

360 
	#GL_SELECT
 0x1C02

	)

363 
	#GL_2D
 0x0600

	)

364 
	#GL_3D
 0x0601

	)

365 
	#GL_3D_COLOR
 0x0602

	)

366 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

367 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

368 
	#GL_POINT_TOKEN
 0x0701

	)

369 
	#GL_LINE_TOKEN
 0x0702

	)

370 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

371 
	#GL_POLYGON_TOKEN
 0x0703

	)

372 
	#GL_BITMAP_TOKEN
 0x0704

	)

373 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

374 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

375 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

376 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

377 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

378 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

381 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

382 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

385 
	#GL_FOG
 0x0B60

	)

386 
	#GL_FOG_MODE
 0x0B65

	)

387 
	#GL_FOG_DENSITY
 0x0B62

	)

388 
	#GL_FOG_COLOR
 0x0B66

	)

389 
	#GL_FOG_INDEX
 0x0B61

	)

390 
	#GL_FOG_START
 0x0B63

	)

391 
	#GL_FOG_END
 0x0B64

	)

392 
	#GL_LINEAR
 0x2601

	)

393 
	#GL_EXP
 0x0800

	)

394 
	#GL_EXP2
 0x0801

	)

397 
	#GL_LOGIC_OP
 0x0BF1

	)

398 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

399 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

400 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

401 
	#GL_CLEAR
 0x1500

	)

402 
	#GL_SET
 0x150F

	)

403 
	#GL_COPY
 0x1503

	)

404 
	#GL_COPY_INVERTED
 0x150C

	)

405 
	#GL_NOOP
 0x1505

	)

406 
	#GL_INVERT
 0x150A

	)

407 
	#GL_AND
 0x1501

	)

408 
	#GL_NAND
 0x150E

	)

409 
	#GL_OR
 0x1507

	)

410 
	#GL_NOR
 0x1508

	)

411 
	#GL_XOR
 0x1506

	)

412 
	#GL_EQUIV
 0x1509

	)

413 
	#GL_AND_REVERSE
 0x1502

	)

414 
	#GL_AND_INVERTED
 0x1504

	)

415 
	#GL_OR_REVERSE
 0x150B

	)

416 
	#GL_OR_INVERTED
 0x150D

	)

419 
	#GL_STENCIL_BITS
 0x0D57

	)

420 
	#GL_STENCIL_TEST
 0x0B90

	)

421 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

422 
	#GL_STENCIL_FUNC
 0x0B92

	)

423 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

424 
	#GL_STENCIL_FAIL
 0x0B94

	)

425 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

426 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

427 
	#GL_STENCIL_REF
 0x0B97

	)

428 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

429 
	#GL_STENCIL_INDEX
 0x1901

	)

430 
	#GL_KEEP
 0x1E00

	)

431 
	#GL_REPLACE
 0x1E01

	)

432 
	#GL_INCR
 0x1E02

	)

433 
	#GL_DECR
 0x1E03

	)

436 
	#GL_NONE
 0

	)

437 
	#GL_LEFT
 0x0406

	)

438 
	#GL_RIGHT
 0x0407

	)

442 
	#GL_FRONT_LEFT
 0x0400

	)

443 
	#GL_FRONT_RIGHT
 0x0401

	)

444 
	#GL_BACK_LEFT
 0x0402

	)

445 
	#GL_BACK_RIGHT
 0x0403

	)

446 
	#GL_AUX0
 0x0409

	)

447 
	#GL_AUX1
 0x040A

	)

448 
	#GL_AUX2
 0x040B

	)

449 
	#GL_AUX3
 0x040C

	)

450 
	#GL_COLOR_INDEX
 0x1900

	)

451 
	#GL_RED
 0x1903

	)

452 
	#GL_GREEN
 0x1904

	)

453 
	#GL_BLUE
 0x1905

	)

454 
	#GL_ALPHA
 0x1906

	)

455 
	#GL_LUMINANCE
 0x1909

	)

456 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

457 
	#GL_ALPHA_BITS
 0x0D55

	)

458 
	#GL_RED_BITS
 0x0D52

	)

459 
	#GL_GREEN_BITS
 0x0D53

	)

460 
	#GL_BLUE_BITS
 0x0D54

	)

461 
	#GL_INDEX_BITS
 0x0D51

	)

462 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

463 
	#GL_AUX_BUFFERS
 0x0C00

	)

464 
	#GL_READ_BUFFER
 0x0C02

	)

465 
	#GL_DRAW_BUFFER
 0x0C01

	)

466 
	#GL_DOUBLEBUFFER
 0x0C32

	)

467 
	#GL_STEREO
 0x0C33

	)

468 
	#GL_BITMAP
 0x1A00

	)

469 
	#GL_COLOR
 0x1800

	)

470 
	#GL_DEPTH
 0x1801

	)

471 
	#GL_STENCIL
 0x1802

	)

472 
	#GL_DITHER
 0x0BD0

	)

473 
	#GL_RGB
 0x1907

	)

474 
	#GL_RGBA
 0x1908

	)

477 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

478 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

479 
	#GL_MAX_LIGHTS
 0x0D31

	)

480 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

481 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

482 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

483 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

484 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

485 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

486 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

487 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

488 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

489 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

492 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

493 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

494 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

495 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

496 
	#GL_CURRENT_INDEX
 0x0B01

	)

497 
	#GL_CURRENT_COLOR
 0x0B00

	)

498 
	#GL_CURRENT_NORMAL
 0x0B02

	)

499 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

500 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

501 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

502 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

503 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

504 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

505 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

506 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

507 
	#GL_INDEX_MODE
 0x0C30

	)

508 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

509 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

510 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

511 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

512 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

513 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

514 
	#GL_RENDER_MODE
 0x0C40

	)

515 
	#GL_RGBA_MODE
 0x0C31

	)

516 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

517 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

518 
	#GL_VIEWPORT
 0x0BA2

	)

521 
	#GL_AUTO_NORMAL
 0x0D80

	)

522 
	#GL_MAP1_COLOR_4
 0x0D90

	)

523 
	#GL_MAP1_INDEX
 0x0D91

	)

524 
	#GL_MAP1_NORMAL
 0x0D92

	)

525 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

526 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

527 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

528 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

529 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

530 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

531 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

532 
	#GL_MAP2_INDEX
 0x0DB1

	)

533 
	#GL_MAP2_NORMAL
 0x0DB2

	)

534 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

535 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

536 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

537 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

538 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

539 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

540 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

541 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

542 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

543 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

544 
	#GL_COEFF
 0x0A00

	)

545 
	#GL_ORDER
 0x0A01

	)

546 
	#GL_DOMAIN
 0x0A02

	)

549 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

550 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

551 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

552 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

553 
	#GL_FOG_HINT
 0x0C54

	)

554 
	#GL_DONT_CARE
 0x1100

	)

555 
	#GL_FASTEST
 0x1101

	)

556 
	#GL_NICEST
 0x1102

	)

559 
	#GL_SCISSOR_BOX
 0x0C10

	)

560 
	#GL_SCISSOR_TEST
 0x0C11

	)

563 
	#GL_MAP_COLOR
 0x0D10

	)

564 
	#GL_MAP_STENCIL
 0x0D11

	)

565 
	#GL_INDEX_SHIFT
 0x0D12

	)

566 
	#GL_INDEX_OFFSET
 0x0D13

	)

567 
	#GL_RED_SCALE
 0x0D14

	)

568 
	#GL_RED_BIAS
 0x0D15

	)

569 
	#GL_GREEN_SCALE
 0x0D18

	)

570 
	#GL_GREEN_BIAS
 0x0D19

	)

571 
	#GL_BLUE_SCALE
 0x0D1A

	)

572 
	#GL_BLUE_BIAS
 0x0D1B

	)

573 
	#GL_ALPHA_SCALE
 0x0D1C

	)

574 
	#GL_ALPHA_BIAS
 0x0D1D

	)

575 
	#GL_DEPTH_SCALE
 0x0D1E

	)

576 
	#GL_DEPTH_BIAS
 0x0D1F

	)

577 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

578 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

579 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

580 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

581 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

582 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

583 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

584 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

585 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

586 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

587 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

588 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

589 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

590 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

591 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

592 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

593 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

594 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

595 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

596 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

597 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

598 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

599 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

600 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

601 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

602 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

603 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

604 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

605 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

606 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

607 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

608 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

609 
	#GL_ZOOM_X
 0x0D16

	)

610 
	#GL_ZOOM_Y
 0x0D17

	)

613 
	#GL_TEXTURE_ENV
 0x2300

	)

614 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

615 
	#GL_TEXTURE_1D
 0x0DE0

	)

616 
	#GL_TEXTURE_2D
 0x0DE1

	)

617 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

618 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

619 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

620 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

621 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

622 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

623 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

624 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

625 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

626 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

627 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

628 
	#GL_TEXTURE_WIDTH
 0x1000

	)

629 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

630 
	#GL_TEXTURE_BORDER
 0x1005

	)

631 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

632 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

633 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

634 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

635 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

636 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

637 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

638 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

639 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

640 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

641 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

642 
	#GL_OBJECT_LINEAR
 0x2401

	)

643 
	#GL_OBJECT_PLANE
 0x2501

	)

644 
	#GL_EYE_LINEAR
 0x2400

	)

645 
	#GL_EYE_PLANE
 0x2502

	)

646 
	#GL_SPHERE_MAP
 0x2402

	)

647 
	#GL_DECAL
 0x2101

	)

648 
	#GL_MODULATE
 0x2100

	)

649 
	#GL_NEAREST
 0x2600

	)

650 
	#GL_REPEAT
 0x2901

	)

651 
	#GL_CLAMP
 0x2900

	)

652 
	#GL_S
 0x2000

	)

653 
	#GL_T
 0x2001

	)

654 
	#GL_R
 0x2002

	)

655 
	#GL_Q
 0x2003

	)

658 
	#GL_VENDOR
 0x1F00

	)

659 
	#GL_RENDERER
 0x1F01

	)

660 
	#GL_VERSION
 0x1F02

	)

661 
	#GL_EXTENSIONS
 0x1F03

	)

664 
	#GL_NO_ERROR
 0

	)

665 
	#GL_INVALID_ENUM
 0x0500

	)

666 
	#GL_INVALID_VALUE
 0x0501

	)

667 
	#GL_INVALID_OPERATION
 0x0502

	)

668 
	#GL_STACK_OVERFLOW
 0x0503

	)

669 
	#GL_STACK_UNDERFLOW
 0x0504

	)

670 
	#GL_OUT_OF_MEMORY
 0x0505

	)

673 
	#GL_CURRENT_BIT
 0x00000001

	)

674 
	#GL_POINT_BIT
 0x00000002

	)

675 
	#GL_LINE_BIT
 0x00000004

	)

676 
	#GL_POLYGON_BIT
 0x00000008

	)

677 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

678 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

679 
	#GL_LIGHTING_BIT
 0x00000040

	)

680 
	#GL_FOG_BIT
 0x00000080

	)

681 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

682 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

683 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

684 
	#GL_VIEWPORT_BIT
 0x00000800

	)

685 
	#GL_TRANSFORM_BIT
 0x00001000

	)

686 
	#GL_ENABLE_BIT
 0x00002000

	)

687 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

688 
	#GL_HINT_BIT
 0x00008000

	)

689 
	#GL_EVAL_BIT
 0x00010000

	)

690 
	#GL_LIST_BIT
 0x00020000

	)

691 
	#GL_TEXTURE_BIT
 0x00040000

	)

692 
	#GL_SCISSOR_BIT
 0x00080000

	)

693 
	#GL_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

697 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

698 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

699 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

700 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

701 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

702 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

703 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

704 
	#GL_ALPHA4
 0x803B

	)

705 
	#GL_ALPHA8
 0x803C

	)

706 
	#GL_ALPHA12
 0x803D

	)

707 
	#GL_ALPHA16
 0x803E

	)

708 
	#GL_LUMINANCE4
 0x803F

	)

709 
	#GL_LUMINANCE8
 0x8040

	)

710 
	#GL_LUMINANCE12
 0x8041

	)

711 
	#GL_LUMINANCE16
 0x8042

	)

712 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

713 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

714 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

715 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

716 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

717 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

718 
	#GL_INTENSITY
 0x8049

	)

719 
	#GL_INTENSITY4
 0x804A

	)

720 
	#GL_INTENSITY8
 0x804B

	)

721 
	#GL_INTENSITY12
 0x804C

	)

722 
	#GL_INTENSITY16
 0x804D

	)

723 
	#GL_R3_G3_B2
 0x2A10

	)

724 
	#GL_RGB4
 0x804F

	)

725 
	#GL_RGB5
 0x8050

	)

726 
	#GL_RGB8
 0x8051

	)

727 
	#GL_RGB10
 0x8052

	)

728 
	#GL_RGB12
 0x8053

	)

729 
	#GL_RGB16
 0x8054

	)

730 
	#GL_RGBA2
 0x8055

	)

731 
	#GL_RGBA4
 0x8056

	)

732 
	#GL_RGB5_A1
 0x8057

	)

733 
	#GL_RGBA8
 0x8058

	)

734 
	#GL_RGB10_A2
 0x8059

	)

735 
	#GL_RGBA12
 0x805A

	)

736 
	#GL_RGBA16
 0x805B

	)

737 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

738 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

739 
	#GL_ALL_CLIENT_ATTRIB_BITS
 0xFFFFFFFF

	)

740 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

748 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Index
–
GLÊﬂt
 
c
 );

750 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Cﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
 );

752 
GLAPI
 
GLAPIENTRY
 
glCÀ¨
–
GLbôfõld
 
mask
 );

754 
GLAPI
 
GLAPIENTRY
 
glIndexMask
–
GLuöt
 
mask
 );

756 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Mask
–
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
 );

758 
GLAPI
 
GLAPIENTRY
 
glAÕhaFunc
–
GLíum
 
func
, 
GL˛ampf
 
ªf
 );

760 
GLAPI
 
GLAPIENTRY
 
glBÀndFunc
–
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
 );

762 
GLAPI
 
GLAPIENTRY
 
glLogicOp
–
GLíum
 
›code
 );

764 
GLAPI
 
GLAPIENTRY
 
glCuŒFa˚
–
GLíum
 
mode
 );

766 
GLAPI
 
GLAPIENTRY
 
glFr⁄tFa˚
–
GLíum
 
mode
 );

768 
GLAPI
 
GLAPIENTRY
 
glPoötSize
–
GLÊﬂt
 
size
 );

770 
GLAPI
 
GLAPIENTRY
 
glLöeWidth
–
GLÊﬂt
 
width
 );

772 
GLAPI
 
GLAPIENTRY
 
glLöeStù∂e
–
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
 );

774 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Mode
–
GLíum
 
Á˚
, GLíum 
mode
 );

776 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Off£t
–
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
 );

778 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Stù∂e
–c⁄° 
GLubyã
 *
mask
 );

780 
GLAPI
 
GLAPIENTRY
 
glGëPﬁyg⁄Stù∂e
–
GLubyã
 *
mask
 );

782 
GLAPI
 
GLAPIENTRY
 
glEdgeFœg
–
GLboﬁón
 
Êag
 );

784 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgv
–c⁄° 
GLboﬁón
 *
Êag
 );

786 
GLAPI
 
GLAPIENTRY
 
glSciss‹
–
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

788 
GLAPI
 
GLAPIENTRY
 
glClùPœ√
–
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
 );

790 
GLAPI
 
GLAPIENTRY
 
glGëClùPœ√
–
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
 );

792 
GLAPI
 
GLAPIENTRY
 
glDøwBuf„r
–
GLíum
 
mode
 );

794 
GLAPI
 
GLAPIENTRY
 
glRódBuf„r
–
GLíum
 
mode
 );

796 
GLAPI
 
GLAPIENTRY
 
glE«bÀ
–
GLíum
 
ˇp
 );

798 
GLAPI
 
GLAPIENTRY
 
glDißbÀ
–
GLíum
 
ˇp
 );

800 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsE«bÀd
–
GLíum
 
ˇp
 );

803 
GLAPI
 
GLAPIENTRY
 
glE«bÀClõ¡Sèã
–
GLíum
 
ˇp
 );

805 
GLAPI
 
GLAPIENTRY
 
glDißbÀClõ¡Sèã
–
GLíum
 
ˇp
 );

808 
GLAPI
 
GLAPIENTRY
 
glGëBoﬁónv
–
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
 );

810 
GLAPI
 
GLAPIENTRY
 
glGëDoubÀv
–
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

812 
GLAPI
 
GLAPIENTRY
 
glGëFlﬂtv
–
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

814 
GLAPI
 
GLAPIENTRY
 
glGëI¡egîv
–
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

817 
GLAPI
 
GLAPIENTRY
 
glPushAârib
–
GLbôfõld
 
mask
 );

819 
GLAPI
 
GLAPIENTRY
 
glP›Aârib
( );

822 
GLAPI
 
GLAPIENTRY
 
glPushClõ¡Aârib
–
GLbôfõld
 
mask
 );

824 
GLAPI
 
GLAPIENTRY
 
glP›Clõ¡Aârib
( );

827 
GLAPI
 
GLöt
 
GLAPIENTRY
 
glRídîMode
–
GLíum
 
mode
 );

829 
GLAPI
 
GLíum
 
GLAPIENTRY
 
glGëEº‹
( );

831 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
glGëSåög
–
GLíum
 
«me
 );

833 
GLAPI
 
GLAPIENTRY
 
glFöish
( );

835 
GLAPI
 
GLAPIENTRY
 
glFlush
( );

837 
GLAPI
 
GLAPIENTRY
 
glHöt
–
GLíum
 
èrgë
, GLíum 
mode
 );

844 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Dïth
–
GL˛ampd
 
dïth
 );

846 
GLAPI
 
GLAPIENTRY
 
glDïthFunc
–
GLíum
 
func
 );

848 
GLAPI
 
GLAPIENTRY
 
glDïthMask
–
GLboﬁón
 
Êag
 );

850 
GLAPI
 
GLAPIENTRY
 
glDïthR™ge
–
GL˛ampd
 
√¨_vÆ
, GL˛ampd 
Ár_vÆ
 );

857 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Accum
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
 );

859 
GLAPI
 
GLAPIENTRY
 
glAccum
–
GLíum
 
›
, 
GLÊﬂt
 
vÆue
 );

866 
GLAPI
 
GLAPIENTRY
 
glM©rixMode
–
GLíum
 
mode
 );

868 
GLAPI
 
GLAPIENTRY
 
glOπho
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

869 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

870 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

872 
GLAPI
 
GLAPIENTRY
 
glFru°um
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

873 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

874 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

876 
GLAPI
 
GLAPIENTRY
 
glVõwp‹t
–
GLöt
 
x
, GLöà
y
,

877 
GLsizei
 
width
, GLsizeò
height
 );

879 
GLAPI
 
GLAPIENTRY
 
glPushM©rix
( );

881 
GLAPI
 
GLAPIENTRY
 
glP›M©rix
( );

883 
GLAPI
 
GLAPIENTRY
 
glLﬂdIdítôy
( );

885 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

886 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

888 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

889 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

891 
GLAPI
 
GLAPIENTRY
 
glRŸ©ed
–
GLdoubÀ
 
™gÀ
,

892 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

893 
GLAPI
 
GLAPIENTRY
 
glRŸ©ef
–
GLÊﬂt
 
™gÀ
,

894 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

896 
GLAPI
 
GLAPIENTRY
 
glSˇÀd
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

897 
GLAPI
 
GLAPIENTRY
 
glSˇÀf
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

899 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ed
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

900 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ef
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

907 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsLi°
–
GLuöt
 
li°
 );

909 
GLAPI
 
GLAPIENTRY
 
glDñëeLi°s
–
GLuöt
 
li°
, 
GLsizei
 
ønge
 );

911 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
glGíLi°s
–
GLsizei
 
ønge
 );

913 
GLAPI
 
GLAPIENTRY
 
glNewLi°
–
GLuöt
 
li°
, 
GLíum
 
mode
 );

915 
GLAPI
 
GLAPIENTRY
 
glEndLi°
( );

917 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°
–
GLuöt
 
li°
 );

919 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°s
–
GLsizei
 
n
, 
GLíum
 
ty≥
,

920 c⁄° 
GLvoid
 *
li°s
 );

922 
GLAPI
 
GLAPIENTRY
 
glLi°Ba£
–
GLuöt
 
ba£
 );

929 
GLAPI
 
GLAPIENTRY
 
glBegö
–
GLíum
 
mode
 );

931 
GLAPI
 
GLAPIENTRY
 
glEnd
( );

934 
GLAPI
 
GLAPIENTRY
 
glVîãx2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

935 
GLAPI
 
GLAPIENTRY
 
glVîãx2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

936 
GLAPI
 
GLAPIENTRY
 
glVîãx2i
–
GLöt
 
x
, GLöà
y
 );

937 
GLAPI
 
GLAPIENTRY
 
glVîãx2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

939 
GLAPI
 
GLAPIENTRY
 
glVîãx3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

940 
GLAPI
 
GLAPIENTRY
 
glVîãx3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

941 
GLAPI
 
GLAPIENTRY
 
glVîãx3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

942 
GLAPI
 
GLAPIENTRY
 
glVîãx3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

944 
GLAPI
 
GLAPIENTRY
 
glVîãx4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

945 
GLAPI
 
GLAPIENTRY
 
glVîãx4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

946 
GLAPI
 
GLAPIENTRY
 
glVîãx4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

947 
GLAPI
 
GLAPIENTRY
 
glVîãx4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

949 
GLAPI
 
GLAPIENTRY
 
glVîãx2dv
–c⁄° 
GLdoubÀ
 *
v
 );

950 
GLAPI
 
GLAPIENTRY
 
glVîãx2fv
–c⁄° 
GLÊﬂt
 *
v
 );

951 
GLAPI
 
GLAPIENTRY
 
glVîãx2iv
–c⁄° 
GLöt
 *
v
 );

952 
GLAPI
 
GLAPIENTRY
 
glVîãx2sv
–c⁄° 
GLsh‹t
 *
v
 );

954 
GLAPI
 
GLAPIENTRY
 
glVîãx3dv
–c⁄° 
GLdoubÀ
 *
v
 );

955 
GLAPI
 
GLAPIENTRY
 
glVîãx3fv
–c⁄° 
GLÊﬂt
 *
v
 );

956 
GLAPI
 
GLAPIENTRY
 
glVîãx3iv
–c⁄° 
GLöt
 *
v
 );

957 
GLAPI
 
GLAPIENTRY
 
glVîãx3sv
–c⁄° 
GLsh‹t
 *
v
 );

959 
GLAPI
 
GLAPIENTRY
 
glVîãx4dv
–c⁄° 
GLdoubÀ
 *
v
 );

960 
GLAPI
 
GLAPIENTRY
 
glVîãx4fv
–c⁄° 
GLÊﬂt
 *
v
 );

961 
GLAPI
 
GLAPIENTRY
 
glVîãx4iv
–c⁄° 
GLöt
 *
v
 );

962 
GLAPI
 
GLAPIENTRY
 
glVîãx4sv
–c⁄° 
GLsh‹t
 *
v
 );

965 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3b
–
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
 );

966 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3d
–
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
 );

967 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3f
–
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
 );

968 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3i
–
GLöt
 
nx
, GLöà
ny
, GLöà
nz
 );

969 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3s
–
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
 );

971 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3bv
–c⁄° 
GLbyã
 *
v
 );

972 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3dv
–c⁄° 
GLdoubÀ
 *
v
 );

973 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3fv
–c⁄° 
GLÊﬂt
 *
v
 );

974 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3iv
–c⁄° 
GLöt
 *
v
 );

975 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3sv
–c⁄° 
GLsh‹t
 *
v
 );

978 
GLAPI
 
GLAPIENTRY
 
glIndexd
–
GLdoubÀ
 
c
 );

979 
GLAPI
 
GLAPIENTRY
 
glIndexf
–
GLÊﬂt
 
c
 );

980 
GLAPI
 
GLAPIENTRY
 
glIndexi
–
GLöt
 
c
 );

981 
GLAPI
 
GLAPIENTRY
 
glIndexs
–
GLsh‹t
 
c
 );

982 
GLAPI
 
GLAPIENTRY
 
glIndexub
–
GLubyã
 
c
 );

984 
GLAPI
 
GLAPIENTRY
 
glIndexdv
–c⁄° 
GLdoubÀ
 *
c
 );

985 
GLAPI
 
GLAPIENTRY
 
glIndexfv
–c⁄° 
GLÊﬂt
 *
c
 );

986 
GLAPI
 
GLAPIENTRY
 
glIndexiv
–c⁄° 
GLöt
 *
c
 );

987 
GLAPI
 
GLAPIENTRY
 
glIndexsv
–c⁄° 
GLsh‹t
 *
c
 );

988 
GLAPI
 
GLAPIENTRY
 
glIndexubv
–c⁄° 
GLubyã
 *
c
 );

990 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3b
–
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
 );

991 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
 );

992 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
 );

993 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3i
–
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
 );

994 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
 );

995 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ub
–
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
 );

996 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ui
–
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
 );

997 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3us
–
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
 );

999 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4b
–
GLbyã
 
ªd
, GLbyã 
gªí
,

1000 
GLbyã
 
blue
, GLbyã 
Æpha
 );

1001 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
,

1002 
GLdoubÀ
 
blue
, GLdoubÀ 
Æpha
 );

1003 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
,

1004 
GLÊﬂt
 
blue
, GLÊﬂà
Æpha
 );

1005 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4i
–
GLöt
 
ªd
, GLöà
gªí
,

1006 
GLöt
 
blue
, GLöà
Æpha
 );

1007 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
,

1008 
GLsh‹t
 
blue
, GLsh‹à
Æpha
 );

1009 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ub
–
GLubyã
 
ªd
, GLubyã 
gªí
,

1010 
GLubyã
 
blue
, GLubyã 
Æpha
 );

1011 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ui
–
GLuöt
 
ªd
, GLuöà
gªí
,

1012 
GLuöt
 
blue
, GLuöà
Æpha
 );

1013 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4us
–
GLush‹t
 
ªd
, GLush‹à
gªí
,

1014 
GLush‹t
 
blue
, GLush‹à
Æpha
 );

1017 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3bv
–c⁄° 
GLbyã
 *
v
 );

1018 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1019 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1020 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3iv
–c⁄° 
GLöt
 *
v
 );

1021 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3sv
–c⁄° 
GLsh‹t
 *
v
 );

1022 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ubv
–c⁄° 
GLubyã
 *
v
 );

1023 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3uiv
–c⁄° 
GLuöt
 *
v
 );

1024 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3usv
–c⁄° 
GLush‹t
 *
v
 );

1026 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4bv
–c⁄° 
GLbyã
 *
v
 );

1027 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1028 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1029 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4iv
–c⁄° 
GLöt
 *
v
 );

1030 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4sv
–c⁄° 
GLsh‹t
 *
v
 );

1031 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ubv
–c⁄° 
GLubyã
 *
v
 );

1032 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4uiv
–c⁄° 
GLuöt
 *
v
 );

1033 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4usv
–c⁄° 
GLush‹t
 *
v
 );

1036 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1d
–
GLdoubÀ
 
s
 );

1037 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1f
–
GLÊﬂt
 
s
 );

1038 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1i
–
GLöt
 
s
 );

1039 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1s
–
GLsh‹t
 
s
 );

1041 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1042 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2f
–
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1043 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2i
–
GLöt
 
s
, GLöà
t
 );

1044 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2s
–
GLsh‹t
 
s
, GLsh‹à
t
 );

1046 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1047 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1048 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3i
–
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1049 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1051 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1052 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1053 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4i
–
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1054 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1056 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1dv
–c⁄° 
GLdoubÀ
 *
v
 );

1057 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1fv
–c⁄° 
GLÊﬂt
 *
v
 );

1058 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1iv
–c⁄° 
GLöt
 *
v
 );

1059 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1sv
–c⁄° 
GLsh‹t
 *
v
 );

1061 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1062 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1063 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2iv
–c⁄° 
GLöt
 *
v
 );

1064 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2sv
–c⁄° 
GLsh‹t
 *
v
 );

1066 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1067 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1068 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3iv
–c⁄° 
GLöt
 *
v
 );

1069 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3sv
–c⁄° 
GLsh‹t
 *
v
 );

1071 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1072 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1073 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4iv
–c⁄° 
GLöt
 *
v
 );

1074 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4sv
–c⁄° 
GLsh‹t
 *
v
 );

1077 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

1078 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

1079 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2i
–
GLöt
 
x
, GLöà
y
 );

1080 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

1082 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

1083 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

1084 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

1085 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

1087 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

1088 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

1089 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

1090 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

1092 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1093 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1094 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2iv
–c⁄° 
GLöt
 *
v
 );

1095 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2sv
–c⁄° 
GLsh‹t
 *
v
 );

1097 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1098 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1099 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3iv
–c⁄° 
GLöt
 *
v
 );

1100 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3sv
–c⁄° 
GLsh‹t
 *
v
 );

1102 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1103 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1104 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4iv
–c⁄° 
GLöt
 *
v
 );

1105 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4sv
–c⁄° 
GLsh‹t
 *
v
 );

1108 
GLAPI
 
GLAPIENTRY
 
glRe˘d
–
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
 );

1109 
GLAPI
 
GLAPIENTRY
 
glRe˘f
–
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
 );

1110 
GLAPI
 
GLAPIENTRY
 
glRe˘i
–
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
 );

1111 
GLAPI
 
GLAPIENTRY
 
glRe˘s
–
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
 );

1114 
GLAPI
 
GLAPIENTRY
 
glRe˘dv
–c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
 );

1115 
GLAPI
 
GLAPIENTRY
 
glRe˘fv
–c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
 );

1116 
GLAPI
 
GLAPIENTRY
 
glRe˘iv
–c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
 );

1117 
GLAPI
 
GLAPIENTRY
 
glRe˘sv
–c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
 );

1124 
GLAPI
 
GLAPIENTRY
 
glVîãxPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1125 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1127 
GLAPI
 
GLAPIENTRY
 
glN‹mÆPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1128 c⁄° 
GLvoid
 *
±r
 );

1130 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Poöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1131 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1133 
GLAPI
 
GLAPIENTRY
 
glIndexPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1134 c⁄° 
GLvoid
 *
±r
 );

1136 
GLAPI
 
GLAPIENTRY
 
glTexCo‹dPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1137 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1139 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgPoöãr
–
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1141 
GLAPI
 
GLAPIENTRY
 
glGëPoöãrv
–
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
 );

1143 
GLAPI
 
GLAPIENTRY
 
glAºayEÀmít
–
GLöt
 
i
 );

1145 
GLAPI
 
GLAPIENTRY
 
glDøwAºays
–
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
 );

1147 
GLAPI
 
GLAPIENTRY
 
glDøwEÀmíts
–
GLíum
 
mode
, 
GLsizei
 
cou¡
,

1148 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1150 
GLAPI
 
GLAPIENTRY
 
glI¡îÀavedAºays
–
GLíum
 
f‹m©
, 
GLsizei
 
°ride
,

1151 c⁄° 
GLvoid
 *
poöãr
 );

1157 
GLAPI
 
GLAPIENTRY
 
glShadeModñ
–
GLíum
 
mode
 );

1159 
GLAPI
 
GLAPIENTRY
 
glLightf
–
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1160 
GLAPI
 
GLAPIENTRY
 
glLighti
–
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1161 
GLAPI
 
GLAPIENTRY
 
glLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1162 c⁄° 
GLÊﬂt
 *
∑øms
 );

1163 
GLAPI
 
GLAPIENTRY
 
glLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1164 c⁄° 
GLöt
 *
∑øms
 );

1166 
GLAPI
 
GLAPIENTRY
 
glGëLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1167 
GLÊﬂt
 *
∑øms
 );

1168 
GLAPI
 
GLAPIENTRY
 
glGëLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1169 
GLöt
 *
∑øms
 );

1171 
GLAPI
 
GLAPIENTRY
 
glLightModñf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1172 
GLAPI
 
GLAPIENTRY
 
glLightModñi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1173 
GLAPI
 
GLAPIENTRY
 
glLightModñfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1174 
GLAPI
 
GLAPIENTRY
 
glLightModñiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1176 
GLAPI
 
GLAPIENTRY
 
glM©îülf
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1177 
GLAPI
 
GLAPIENTRY
 
glM©îüli
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1178 
GLAPI
 
GLAPIENTRY
 
glM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1179 
GLAPI
 
GLAPIENTRY
 
glM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1181 
GLAPI
 
GLAPIENTRY
 
glGëM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1182 
GLAPI
 
GLAPIENTRY
 
glGëM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1184 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹M©îül
–
GLíum
 
Á˚
, GLíum 
mode
 );

1191 
GLAPI
 
GLAPIENTRY
 
glPixñZoom
–
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
 );

1193 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ef
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1194 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ei
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1196 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„rf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1197 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„ri
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1199 
GLAPI
 
GLAPIENTRY
 
glPixñM≠fv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1200 c⁄° 
GLÊﬂt
 *
vÆues
 );

1201 
GLAPI
 
GLAPIENTRY
 
glPixñM≠uiv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1202 c⁄° 
GLuöt
 *
vÆues
 );

1203 
GLAPI
 
GLAPIENTRY
 
glPixñM≠usv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1204 c⁄° 
GLush‹t
 *
vÆues
 );

1206 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠fv
–
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
 );

1207 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠uiv
–
GLíum
 
m≠
, 
GLuöt
 *
vÆues
 );

1208 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠usv
–
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
 );

1210 
GLAPI
 
GLAPIENTRY
 
glBôm≠
–
GLsizei
 
width
, GLsizeò
height
,

1211 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
,

1212 
GLÊﬂt
 
xmove
, GLÊﬂà
ymove
,

1213 c⁄° 
GLubyã
 *
bôm≠
 );

1215 
GLAPI
 
GLAPIENTRY
 
glRódPixñs
–
GLöt
 
x
, GLöà
y
,

1216 
GLsizei
 
width
, GLsizeò
height
,

1217 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1218 
GLvoid
 *
pixñs
 );

1220 
GLAPI
 
GLAPIENTRY
 
glDøwPixñs
–
GLsizei
 
width
, GLsizeò
height
,

1221 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1222 c⁄° 
GLvoid
 *
pixñs
 );

1224 
GLAPI
 
GLAPIENTRY
 
glC›yPixñs
–
GLöt
 
x
, GLöà
y
,

1225 
GLsizei
 
width
, GLsizeò
height
,

1226 
GLíum
 
ty≥
 );

1232 
GLAPI
 
GLAPIENTRY
 
glSãncûFunc
–
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
 );

1234 
GLAPI
 
GLAPIENTRY
 
glSãncûMask
–
GLuöt
 
mask
 );

1236 
GLAPI
 
GLAPIENTRY
 
glSãncûOp
–
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
 );

1238 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Sãncû
–
GLöt
 
s
 );

1246 
GLAPI
 
GLAPIENTRY
 
glTexGíd
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
 );

1247 
GLAPI
 
GLAPIENTRY
 
glTexGíf
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1248 
GLAPI
 
GLAPIENTRY
 
glTexGíi
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1250 
GLAPI
 
GLAPIENTRY
 
glTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
 );

1251 
GLAPI
 
GLAPIENTRY
 
glTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1252 
GLAPI
 
GLAPIENTRY
 
glTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1254 
GLAPI
 
GLAPIENTRY
 
glGëTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

1255 
GLAPI
 
GLAPIENTRY
 
glGëTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1256 
GLAPI
 
GLAPIENTRY
 
glGëTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1259 
GLAPI
 
GLAPIENTRY
 
glTexEnvf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1260 
GLAPI
 
GLAPIENTRY
 
glTexEnvi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1262 
GLAPI
 
GLAPIENTRY
 
glTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1263 
GLAPI
 
GLAPIENTRY
 
glTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1265 
GLAPI
 
GLAPIENTRY
 
glGëTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1266 
GLAPI
 
GLAPIENTRY
 
glGëTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1269 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1270 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1272 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1273 c⁄° 
GLÊﬂt
 *
∑øms
 );

1274 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1275 c⁄° 
GLöt
 *
∑øms
 );

1277 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîfv
–
GLíum
 
èrgë
,

1278 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1279 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîiv
–
GLíum
 
èrgë
,

1280 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1282 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîfv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1283 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1284 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîiv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1285 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1288 
GLAPI
 
GLAPIENTRY
 
glTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1289 
GLöt
 
öã∫ÆF‹m©
,

1290 
GLsizei
 
width
, 
GLöt
 
b‹dî
,

1291 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1292 c⁄° 
GLvoid
 *
pixñs
 );

1294 
GLAPI
 
GLAPIENTRY
 
glTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1295 
GLöt
 
öã∫ÆF‹m©
,

1296 
GLsizei
 
width
, GLsizeò
height
,

1297 
GLöt
 
b‹dî
, 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1298 c⁄° 
GLvoid
 *
pixñs
 );

1300 
GLAPI
 
GLAPIENTRY
 
glGëTexImage
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1301 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1302 
GLvoid
 *
pixñs
 );

1307 
GLAPI
 
GLAPIENTRY
 
glGíTextuªs
–
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
 );

1309 
GLAPI
 
GLAPIENTRY
 
glDñëeTextuªs
–
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

1311 
GLAPI
 
GLAPIENTRY
 
glBödTextuª
–
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
 );

1313 
GLAPI
 
GLAPIENTRY
 
glPri‹ôizeTextuªs
–
GLsizei
 
n
,

1314 c⁄° 
GLuöt
 *
ãxtuªs
,

1315 c⁄° 
GL˛ampf
 *
¥i‹ôõs
 );

1317 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glAªTextuªsResidít
–
GLsizei
 
n
,

1318 c⁄° 
GLuöt
 *
ãxtuªs
,

1319 
GLboﬁón
 *
ªsidí˚s
 );

1321 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsTextuª
–
GLuöt
 
ãxtuª
 );

1324 
GLAPI
 
GLAPIENTRY
 
glTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1325 
GLöt
 
xoff£t
,

1326 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1327 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
 );

1330 
GLAPI
 
GLAPIENTRY
 
glTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1331 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1332 
GLsizei
 
width
, GLsizeò
height
,

1333 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1334 c⁄° 
GLvoid
 *
pixñs
 );

1337 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1338 
GLíum
 
öã∫Æf‹m©
,

1339 
GLöt
 
x
, GLöà
y
,

1340 
GLsizei
 
width
, 
GLöt
 
b‹dî
 );

1343 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1344 
GLíum
 
öã∫Æf‹m©
,

1345 
GLöt
 
x
, GLöà
y
,

1346 
GLsizei
 
width
, GLsizeò
height
,

1347 
GLöt
 
b‹dî
 );

1350 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1351 
GLöt
 
xoff£t
, GLöà
x
, GLöà
y
,

1352 
GLsizei
 
width
 );

1355 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1356 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1357 
GLöt
 
x
, GLöà
y
,

1358 
GLsizei
 
width
, GLsizeò
height
 );

1365 
GLAPI
 
GLAPIENTRY
 
glM≠1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1366 
GLöt
 
°ride
,

1367 
GLöt
 
‹dî
, c⁄° 
GLdoubÀ
 *
poöts
 );

1368 
GLAPI
 
GLAPIENTRY
 
glM≠1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1369 
GLöt
 
°ride
,

1370 
GLöt
 
‹dî
, c⁄° 
GLÊﬂt
 *
poöts
 );

1372 
GLAPI
 
GLAPIENTRY
 
glM≠2d
–
GLíum
 
èrgë
,

1373 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1374 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1375 c⁄° 
GLdoubÀ
 *
poöts
 );

1376 
GLAPI
 
GLAPIENTRY
 
glM≠2f
–
GLíum
 
èrgë
,

1377 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1378 
GLÊﬂt
 
v1
, GLÊﬂà
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1379 c⁄° 
GLÊﬂt
 *
poöts
 );

1381 
GLAPI
 
GLAPIENTRY
 
glGëM≠dv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
 );

1382 
GLAPI
 
GLAPIENTRY
 
glGëM≠fv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
 );

1383 
GLAPI
 
GLAPIENTRY
 
glGëM≠iv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
 );

1385 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1d
–
GLdoubÀ
 
u
 );

1386 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1f
–
GLÊﬂt
 
u
 );

1388 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1dv
–c⁄° 
GLdoubÀ
 *
u
 );

1389 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1fv
–c⁄° 
GLÊﬂt
 *
u
 );

1391 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2d
–
GLdoubÀ
 
u
, GLdoubÀ 
v
 );

1392 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2f
–
GLÊﬂt
 
u
, GLÊﬂà
v
 );

1394 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2dv
–c⁄° 
GLdoubÀ
 *
u
 );

1395 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2fv
–c⁄° 
GLÊﬂt
 *
u
 );

1397 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
 );

1398 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
 );

1400 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1401 
GLöt
 
vn
, 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
 );

1402 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1403 
GLöt
 
vn
, 
GLÊﬂt
 
v1
, GLÊﬂà
v2
 );

1405 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt1
–
GLöt
 
i
 );

1407 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt2
–
GLöt
 
i
, GLöà
j
 );

1409 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh1
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
 );

1411 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh2
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
 );

1418 
GLAPI
 
GLAPIENTRY
 
glFogf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1420 
GLAPI
 
GLAPIENTRY
 
glFogi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1422 
GLAPI
 
GLAPIENTRY
 
glFogfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1424 
GLAPI
 
GLAPIENTRY
 
glFogiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1431 
GLAPI
 
GLAPIENTRY
 
glFìdbackBuf„r
–
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
 );

1433 
GLAPI
 
GLAPIENTRY
 
glPassThrough
–
GLÊﬂt
 
tokí
 );

1435 
GLAPI
 
GLAPIENTRY
 
glSñe˘Buf„r
–
GLsizei
 
size
, 
GLuöt
 *
buf„r
 );

1437 
GLAPI
 
GLAPIENTRY
 
glInôNames
( );

1439 
GLAPI
 
GLAPIENTRY
 
glLﬂdName
–
GLuöt
 
«me
 );

1441 
GLAPI
 
GLAPIENTRY
 
glPushName
–
GLuöt
 
«me
 );

1443 
GLAPI
 
GLAPIENTRY
 
glP›Name
( );

1451 
	#GL_RESCALE_NORMAL
 0x803A

	)

1452 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1453 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1454 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1455 
	#GL_BGR
 0x80E0

	)

1456 
	#GL_BGRA
 0x80E1

	)

1457 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1458 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1459 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1460 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1461 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1462 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1463 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1464 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1465 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1466 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1467 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1468 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

1469 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1470 
	#GL_SINGLE_COLOR
 0x81F9

	)

1471 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1472 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1473 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1474 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1475 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1476 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1477 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1478 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1479 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1480 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1481 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1482 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1483 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1484 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1485 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1486 
	#GL_TEXTURE_3D
 0x806F

	)

1487 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1488 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1489 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1490 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1491 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1493 
GLAPI
 
GLAPIENTRY
 
glDøwR™geEÀmíts
–
GLíum
 
mode
, 
GLuöt
 
°¨t
,

1494 
GLuöt
 
íd
, 
GLsizei
 
cou¡
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1496 
GLAPI
 
GLAPIENTRY
 
glTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1497 
GLöt
 
öã∫ÆF‹m©
,

1498 
GLsizei
 
width
, GLsizeò
height
,

1499 
GLsizei
 
dïth
, 
GLöt
 
b‹dî
,

1500 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1501 c⁄° 
GLvoid
 *
pixñs
 );

1503 
GLAPI
 
GLAPIENTRY
 
glTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1504 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1505 
GLöt
 
zoff£t
, 
GLsizei
 
width
,

1506 
GLsizei
 
height
, GLsizeò
dïth
,

1507 
GLíum
 
f‹m©
,

1508 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1510 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1511 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1512 
GLöt
 
zoff£t
, GLöà
x
,

1513 
GLöt
 
y
, 
GLsizei
 
width
,

1514 
GLsizei
 
height
 );

1516 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1517 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1518 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1519 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1526 
	#GL_CONSTANT_COLOR
 0x8001

	)

1527 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

1528 
	#GL_CONSTANT_ALPHA
 0x8003

	)

1529 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

1530 
	#GL_COLOR_TABLE
 0x80D0

	)

1531 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

1532 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

1533 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

1534 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

1535 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

1536 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

1537 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

1538 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

1539 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

1540 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

1541 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

1542 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

1543 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

1544 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

1545 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

1546 
	#GL_CONVOLUTION_1D
 0x8010

	)

1547 
	#GL_CONVOLUTION_2D
 0x8011

	)

1548 
	#GL_SEPARABLE_2D
 0x8012

	)

1549 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

1550 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

1551 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

1552 
	#GL_REDUCE
 0x8016

	)

1553 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

1554 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

1555 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

1556 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

1557 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

1558 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

1559 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

1560 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

1561 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

1562 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

1563 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

1564 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

1565 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

1566 
	#GL_CONSTANT_BORDER
 0x8151

	)

1567 
	#GL_REPLICATE_BORDER
 0x8153

	)

1568 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

1569 
	#GL_COLOR_MATRIX
 0x80B1

	)

1570 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

1571 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

1572 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

1573 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

1574 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

1575 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

1576 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

1577 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

1578 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

1579 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

1580 
	#GL_HISTOGRAM
 0x8024

	)

1581 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

1582 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

1583 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

1584 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

1585 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

1586 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

1587 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

1588 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

1589 
	#GL_HISTOGRAM_SINK
 0x802D

	)

1590 
	#GL_MINMAX
 0x802E

	)

1591 
	#GL_MINMAX_FORMAT
 0x802F

	)

1592 
	#GL_MINMAX_SINK
 0x8030

	)

1593 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

1594 
	#GL_BLEND_EQUATION
 0x8009

	)

1595 
	#GL_MIN
 0x8007

	)

1596 
	#GL_MAX
 0x8008

	)

1597 
	#GL_FUNC_ADD
 0x8006

	)

1598 
	#GL_FUNC_SUBTRACT
 0x800A

	)

1599 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

1600 
	#GL_BLEND_COLOR
 0x8005

	)

1603 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1604 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1605 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
 );

1607 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹SubTabÀ
–
GLíum
 
èrgë
,

1608 
GLsizei
 
°¨t
, GLsizeò
cou¡
,

1609 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1610 c⁄° 
GLvoid
 *
d©a
 );

1612 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîiv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1613 c⁄° 
GLöt
 *
∑øms
);

1615 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîfv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1616 c⁄° 
GLÊﬂt
 *
∑øms
);

1618 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹SubTabÀ
–
GLíum
 
èrgë
, 
GLsizei
 
°¨t
,

1619 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1621 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1622 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1624 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1625 
GLíum
 
ty≥
, 
GLvoid
 *
èbÀ
 );

1627 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1628 
GLÊﬂt
 *
∑øms
 );

1630 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1631 
GLöt
 *
∑øms
 );

1633 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄
–
GLíum
 
mode
 );

1635 
GLAPI
 
GLAPIENTRY
 
glBÀndCﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
,

1636 
GL˛ampf
 
blue
, GL˛amp‡
Æpha
 );

1638 
GLAPI
 
GLAPIENTRY
 
glHi°ogøm
–
GLíum
 
èrgë
, 
GLsizei
 
width
,

1639 
GLíum
 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
 );

1641 
GLAPI
 
GLAPIENTRY
 
glRe£tHi°ogøm
–
GLíum
 
èrgë
 );

1643 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogøm
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1644 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1645 
GLvoid
 *
vÆues
 );

1647 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1648 
GLÊﬂt
 *
∑øms
 );

1650 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1651 
GLöt
 *
∑øms
 );

1653 
GLAPI
 
GLAPIENTRY
 
glMömax
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1654 
GLboﬁón
 
sök
 );

1656 
GLAPI
 
GLAPIENTRY
 
glRe£tMömax
–
GLíum
 
èrgë
 );

1658 
GLAPI
 
GLAPIENTRY
 
glGëMömax
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1659 
GLíum
 
f‹m©
, GLíum 
ty≥s
,

1660 
GLvoid
 *
vÆues
 );

1662 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1663 
GLÊﬂt
 *
∑øms
 );

1665 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1666 
GLöt
 *
∑øms
 );

1668 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1669 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
,

1670 c⁄° 
GLvoid
 *
image
 );

1672 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1673 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1674 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
image
 );

1676 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1677 
GLÊﬂt
 
∑øms
 );

1679 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1680 c⁄° 
GLÊﬂt
 *
∑øms
 );

1682 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1683 
GLöt
 
∑øms
 );

1685 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1686 c⁄° 
GLöt
 *
∑øms
 );

1688 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1689 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1691 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1692 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
,

1693 
GLsizei
 
height
);

1695 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1696 
GLíum
 
ty≥
, 
GLvoid
 *
image
 );

1698 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1699 
GLÊﬂt
 *
∑øms
 );

1701 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1702 
GLöt
 *
∑øms
 );

1704 
GLAPI
 
GLAPIENTRY
 
glSï¨abÀFûãr2D
–
GLíum
 
èrgë
,

1705 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1706 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
 );

1708 
GLAPI
 
GLAPIENTRY
 
glGëSï¨abÀFûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1709 
GLíum
 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
 );

1719 
	#GL_TEXTURE0
 0x84C0

	)

1720 
	#GL_TEXTURE1
 0x84C1

	)

1721 
	#GL_TEXTURE2
 0x84C2

	)

1722 
	#GL_TEXTURE3
 0x84C3

	)

1723 
	#GL_TEXTURE4
 0x84C4

	)

1724 
	#GL_TEXTURE5
 0x84C5

	)

1725 
	#GL_TEXTURE6
 0x84C6

	)

1726 
	#GL_TEXTURE7
 0x84C7

	)

1727 
	#GL_TEXTURE8
 0x84C8

	)

1728 
	#GL_TEXTURE9
 0x84C9

	)

1729 
	#GL_TEXTURE10
 0x84CA

	)

1730 
	#GL_TEXTURE11
 0x84CB

	)

1731 
	#GL_TEXTURE12
 0x84CC

	)

1732 
	#GL_TEXTURE13
 0x84CD

	)

1733 
	#GL_TEXTURE14
 0x84CE

	)

1734 
	#GL_TEXTURE15
 0x84CF

	)

1735 
	#GL_TEXTURE16
 0x84D0

	)

1736 
	#GL_TEXTURE17
 0x84D1

	)

1737 
	#GL_TEXTURE18
 0x84D2

	)

1738 
	#GL_TEXTURE19
 0x84D3

	)

1739 
	#GL_TEXTURE20
 0x84D4

	)

1740 
	#GL_TEXTURE21
 0x84D5

	)

1741 
	#GL_TEXTURE22
 0x84D6

	)

1742 
	#GL_TEXTURE23
 0x84D7

	)

1743 
	#GL_TEXTURE24
 0x84D8

	)

1744 
	#GL_TEXTURE25
 0x84D9

	)

1745 
	#GL_TEXTURE26
 0x84DA

	)

1746 
	#GL_TEXTURE27
 0x84DB

	)

1747 
	#GL_TEXTURE28
 0x84DC

	)

1748 
	#GL_TEXTURE29
 0x84DD

	)

1749 
	#GL_TEXTURE30
 0x84DE

	)

1750 
	#GL_TEXTURE31
 0x84DF

	)

1751 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1752 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1753 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1755 
	#GL_NORMAL_MAP
 0x8511

	)

1756 
	#GL_REFLECTION_MAP
 0x8512

	)

1757 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1758 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1759 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1760 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1761 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1762 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1763 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1764 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1765 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1766 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1768 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1769 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1770 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1771 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1772 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1773 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1774 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1775 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1776 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1777 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1778 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1780 
	#GL_MULTISAMPLE
 0x809D

	)

1781 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1782 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1783 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1784 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1785 
	#GL_SAMPLES
 0x80A9

	)

1786 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1787 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1788 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1790 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1791 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1792 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1793 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1795 
	#GL_COMBINE
 0x8570

	)

1796 
	#GL_COMBINE_RGB
 0x8571

	)

1797 
	#GL_COMBINE_ALPHA
 0x8572

	)

1798 
	#GL_SOURCE0_RGB
 0x8580

	)

1799 
	#GL_SOURCE1_RGB
 0x8581

	)

1800 
	#GL_SOURCE2_RGB
 0x8582

	)

1801 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1802 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1803 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1804 
	#GL_OPERAND0_RGB
 0x8590

	)

1805 
	#GL_OPERAND1_RGB
 0x8591

	)

1806 
	#GL_OPERAND2_RGB
 0x8592

	)

1807 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1808 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1809 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1810 
	#GL_RGB_SCALE
 0x8573

	)

1811 
	#GL_ADD_SIGNED
 0x8574

	)

1812 
	#GL_INTERPOLATE
 0x8575

	)

1813 
	#GL_SUBTRACT
 0x84E7

	)

1814 
	#GL_CONSTANT
 0x8576

	)

1815 
	#GL_PRIMARY_COLOR
 0x8577

	)

1816 
	#GL_PREVIOUS
 0x8578

	)

1818 
	#GL_DOT3_RGB
 0x86AE

	)

1819 
	#GL_DOT3_RGBA
 0x86AF

	)

1821 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1823 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuª
–
GLíum
 
ãxtuª
 );

1825 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuª
–
GLíum
 
ãxtuª
 );

1827 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1829 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1831 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1833 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1835 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1837 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1839 
GLAPI
 
GLAPIENTRY
 
glGëCom¥es£dTexImage
–
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
 );

1841 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
 );

1843 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1845 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
 );

1847 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1849 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1i
–
GLíum
 
èrgë
, 
GLöt
 
s
 );

1851 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1853 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
 );

1855 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1857 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1859 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1861 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1863 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1865 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
 );

1867 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1869 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
 );

1871 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1873 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1875 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1877 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1879 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1881 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1883 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1885 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1887 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1889 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1891 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1893 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1895 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1897 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1899 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1901 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1903 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1906 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1908 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1910 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1912 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1914 
GLAPI
 
GLAPIENTRY
 
glSam∂eCovîage
–
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
 );

1917 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1918 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

1919 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1920 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1921 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1922 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1923 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1924 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1925 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

1932 #i‚de‡
GL_ARB_mu…ôextuª


1933 
	#GL_ARB_mu…ôextuª
 1

	)

1935 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1936 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1937 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1938 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1939 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1940 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1941 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1942 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1943 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1944 
	#GL_TEXTURE9_ARB
 0x84C9

	)

1945 
	#GL_TEXTURE10_ARB
 0x84CA

	)

1946 
	#GL_TEXTURE11_ARB
 0x84CB

	)

1947 
	#GL_TEXTURE12_ARB
 0x84CC

	)

1948 
	#GL_TEXTURE13_ARB
 0x84CD

	)

1949 
	#GL_TEXTURE14_ARB
 0x84CE

	)

1950 
	#GL_TEXTURE15_ARB
 0x84CF

	)

1951 
	#GL_TEXTURE16_ARB
 0x84D0

	)

1952 
	#GL_TEXTURE17_ARB
 0x84D1

	)

1953 
	#GL_TEXTURE18_ARB
 0x84D2

	)

1954 
	#GL_TEXTURE19_ARB
 0x84D3

	)

1955 
	#GL_TEXTURE20_ARB
 0x84D4

	)

1956 
	#GL_TEXTURE21_ARB
 0x84D5

	)

1957 
	#GL_TEXTURE22_ARB
 0x84D6

	)

1958 
	#GL_TEXTURE23_ARB
 0x84D7

	)

1959 
	#GL_TEXTURE24_ARB
 0x84D8

	)

1960 
	#GL_TEXTURE25_ARB
 0x84D9

	)

1961 
	#GL_TEXTURE26_ARB
 0x84DA

	)

1962 
	#GL_TEXTURE27_ARB
 0x84DB

	)

1963 
	#GL_TEXTURE28_ARB
 0x84DC

	)

1964 
	#GL_TEXTURE29_ARB
 0x84DD

	)

1965 
	#GL_TEXTURE30_ARB
 0x84DE

	)

1966 
	#GL_TEXTURE31_ARB
 0x84DF

	)

1967 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

1968 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

1969 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

1971 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuªARB
(
GLíum
 
ãxtuª
);

1972 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuªARB
(
GLíum
 
ãxtuª
);

1973 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

1974 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1975 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

1976 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1977 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
);

1978 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1979 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

1980 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1981 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

1982 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1983 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

1984 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1985 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

1986 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1987 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

1988 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1989 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

1990 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1991 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

1992 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1993 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

1994 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1995 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

1996 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1997 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

1998 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1999 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

2000 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2001 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

2002 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2003 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

2004 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2006 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2007 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2008 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

2009 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2010 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

2011 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2012 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

2013 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2014 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

2015 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2016 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

2017 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2018 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

2019 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2020 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

2021 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2022 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

2023 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2024 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

2025 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2026 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

2027 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2028 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

2029 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2030 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

2031 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2032 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

2033 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2034 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

2035 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2036 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

2037 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2038 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

2039 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2049 #i‡
deföed
(
GL_GLEXT_LEGACY
)

2055 
	~<GL/gÀxt.h
>

2065 #i‚de‡
GL_MESA_∑cked_dïth_°ícû


2066 
	#GL_MESA_∑cked_dïth_°ícû
 1

	)

2068 
	#GL_DEPTH_STENCIL_MESA
 0x8750

	)

2069 
	#GL_UNSIGNED_INT_24_8_MESA
 0x8751

	)

2070 
	#GL_UNSIGNED_INT_8_24_REV_MESA
 0x8752

	)

2071 
	#GL_UNSIGNED_SHORT_15_1_MESA
 0x8753

	)

2072 
	#GL_UNSIGNED_SHORT_1_15_REV_MESA
 0x8754

	)

2077 #i‚de‡
GL_ATI_bÀnd_equ©i⁄_£∑øã


2078 
	#GL_ATI_bÀnd_equ©i⁄_£∑øã
 1

	)

2080 
	#GL_ALPHA_BLEND_EQUATION_ATI
 0x883D

	)

2082 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄Sï¨©eATI
–
GLíum
 
modeRGB
, GLíum 
modeA
 );

2083 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEATIPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeA
);

2089 #i‚de‡
GL_OES_EGL_image


2090 * 
	tGLeglImageOES
;

2093 #i‚de‡
GL_OES_EGL_image


2094 
	#GL_OES_EGL_image
 1

	)

2095 #ifde‡
GL_GLEXT_PROTOTYPES


2096 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2097 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2099 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2100 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2111 #ifde‡
__˝lu•lus


	@/usr/include/GL/glu.h

31 #i‚de‡
__glu_h__


32 
	#__glu_h__


	)

34 #i‡
deföed
(
USE_MGL_NAMESPACE
)

35 
	~"glu_m™gÀ.h
"

38 
	~<GL/gl.h
>

40 #i‚de‡
GLAPIENTRY


41 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)

42 
	#GLAPIENTRY
 
__°dˇŒ


	)

44 
	#GLAPIENTRY


	)

48 #i‚de‡
GLAPIENTRYP


49 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

52 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GLU32
)

53 #unde‡
GLAPI


54 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

55 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

57 #unde‡
GLAPI


58 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

59 #ñi‡!
deföed
(
GLAPI
)

61 
	#GLAPI
 

	)

64 #ifde‡
__˝lu•lus


71 
	#GLU_EXT_obje˘_•a˚_ãss
 1

	)

72 
	#GLU_EXT_nurbs_ãs£Œ©‹
 1

	)

75 
	#GLU_FALSE
 0

	)

76 
	#GLU_TRUE
 1

	)

79 
	#GLU_VERSION_1_1
 1

	)

80 
	#GLU_VERSION_1_2
 1

	)

81 
	#GLU_VERSION_1_3
 1

	)

84 
	#GLU_VERSION
 100800

	)

85 
	#GLU_EXTENSIONS
 100801

	)

88 
	#GLU_INVALID_ENUM
 100900

	)

89 
	#GLU_INVALID_VALUE
 100901

	)

90 
	#GLU_OUT_OF_MEMORY
 100902

	)

91 
	#GLU_INCOMPATIBLE_GL_VERSION
 100903

	)

92 
	#GLU_INVALID_OPERATION
 100904

	)

96 
	#GLU_OUTLINE_POLYGON
 100240

	)

97 
	#GLU_OUTLINE_PATCH
 100241

	)

100 
	#GLU_NURBS_ERROR
 100103

	)

101 
	#GLU_ERROR
 100103

	)

102 
	#GLU_NURBS_BEGIN
 100164

	)

103 
	#GLU_NURBS_BEGIN_EXT
 100164

	)

104 
	#GLU_NURBS_VERTEX
 100165

	)

105 
	#GLU_NURBS_VERTEX_EXT
 100165

	)

106 
	#GLU_NURBS_NORMAL
 100166

	)

107 
	#GLU_NURBS_NORMAL_EXT
 100166

	)

108 
	#GLU_NURBS_COLOR
 100167

	)

109 
	#GLU_NURBS_COLOR_EXT
 100167

	)

110 
	#GLU_NURBS_TEXTURE_COORD
 100168

	)

111 
	#GLU_NURBS_TEX_COORD_EXT
 100168

	)

112 
	#GLU_NURBS_END
 100169

	)

113 
	#GLU_NURBS_END_EXT
 100169

	)

114 
	#GLU_NURBS_BEGIN_DATA
 100170

	)

115 
	#GLU_NURBS_BEGIN_DATA_EXT
 100170

	)

116 
	#GLU_NURBS_VERTEX_DATA
 100171

	)

117 
	#GLU_NURBS_VERTEX_DATA_EXT
 100171

	)

118 
	#GLU_NURBS_NORMAL_DATA
 100172

	)

119 
	#GLU_NURBS_NORMAL_DATA_EXT
 100172

	)

120 
	#GLU_NURBS_COLOR_DATA
 100173

	)

121 
	#GLU_NURBS_COLOR_DATA_EXT
 100173

	)

122 
	#GLU_NURBS_TEXTURE_COORD_DATA
 100174

	)

123 
	#GLU_NURBS_TEX_COORD_DATA_EXT
 100174

	)

124 
	#GLU_NURBS_END_DATA
 100175

	)

125 
	#GLU_NURBS_END_DATA_EXT
 100175

	)

128 
	#GLU_NURBS_ERROR1
 100251

	)

129 
	#GLU_NURBS_ERROR2
 100252

	)

130 
	#GLU_NURBS_ERROR3
 100253

	)

131 
	#GLU_NURBS_ERROR4
 100254

	)

132 
	#GLU_NURBS_ERROR5
 100255

	)

133 
	#GLU_NURBS_ERROR6
 100256

	)

134 
	#GLU_NURBS_ERROR7
 100257

	)

135 
	#GLU_NURBS_ERROR8
 100258

	)

136 
	#GLU_NURBS_ERROR9
 100259

	)

137 
	#GLU_NURBS_ERROR10
 100260

	)

138 
	#GLU_NURBS_ERROR11
 100261

	)

139 
	#GLU_NURBS_ERROR12
 100262

	)

140 
	#GLU_NURBS_ERROR13
 100263

	)

141 
	#GLU_NURBS_ERROR14
 100264

	)

142 
	#GLU_NURBS_ERROR15
 100265

	)

143 
	#GLU_NURBS_ERROR16
 100266

	)

144 
	#GLU_NURBS_ERROR17
 100267

	)

145 
	#GLU_NURBS_ERROR18
 100268

	)

146 
	#GLU_NURBS_ERROR19
 100269

	)

147 
	#GLU_NURBS_ERROR20
 100270

	)

148 
	#GLU_NURBS_ERROR21
 100271

	)

149 
	#GLU_NURBS_ERROR22
 100272

	)

150 
	#GLU_NURBS_ERROR23
 100273

	)

151 
	#GLU_NURBS_ERROR24
 100274

	)

152 
	#GLU_NURBS_ERROR25
 100275

	)

153 
	#GLU_NURBS_ERROR26
 100276

	)

154 
	#GLU_NURBS_ERROR27
 100277

	)

155 
	#GLU_NURBS_ERROR28
 100278

	)

156 
	#GLU_NURBS_ERROR29
 100279

	)

157 
	#GLU_NURBS_ERROR30
 100280

	)

158 
	#GLU_NURBS_ERROR31
 100281

	)

159 
	#GLU_NURBS_ERROR32
 100282

	)

160 
	#GLU_NURBS_ERROR33
 100283

	)

161 
	#GLU_NURBS_ERROR34
 100284

	)

162 
	#GLU_NURBS_ERROR35
 100285

	)

163 
	#GLU_NURBS_ERROR36
 100286

	)

164 
	#GLU_NURBS_ERROR37
 100287

	)

167 
	#GLU_AUTO_LOAD_MATRIX
 100200

	)

168 
	#GLU_CULLING
 100201

	)

169 
	#GLU_SAMPLING_TOLERANCE
 100203

	)

170 
	#GLU_DISPLAY_MODE
 100204

	)

171 
	#GLU_PARAMETRIC_TOLERANCE
 100202

	)

172 
	#GLU_SAMPLING_METHOD
 100205

	)

173 
	#GLU_U_STEP
 100206

	)

174 
	#GLU_V_STEP
 100207

	)

175 
	#GLU_NURBS_MODE
 100160

	)

176 
	#GLU_NURBS_MODE_EXT
 100160

	)

177 
	#GLU_NURBS_TESSELLATOR
 100161

	)

178 
	#GLU_NURBS_TESSELLATOR_EXT
 100161

	)

179 
	#GLU_NURBS_RENDERER
 100162

	)

180 
	#GLU_NURBS_RENDERER_EXT
 100162

	)

183 
	#GLU_OBJECT_PARAMETRIC_ERROR
 100208

	)

184 
	#GLU_OBJECT_PARAMETRIC_ERROR_EXT
 100208

	)

185 
	#GLU_OBJECT_PATH_LENGTH
 100209

	)

186 
	#GLU_OBJECT_PATH_LENGTH_EXT
 100209

	)

187 
	#GLU_PATH_LENGTH
 100215

	)

188 
	#GLU_PARAMETRIC_ERROR
 100216

	)

189 
	#GLU_DOMAIN_DISTANCE
 100217

	)

192 
	#GLU_MAP1_TRIM_2
 100210

	)

193 
	#GLU_MAP1_TRIM_3
 100211

	)

196 
	#GLU_POINT
 100010

	)

197 
	#GLU_LINE
 100011

	)

198 
	#GLU_FILL
 100012

	)

199 
	#GLU_SILHOUETTE
 100013

	)

205 
	#GLU_SMOOTH
 100000

	)

206 
	#GLU_FLAT
 100001

	)

207 
	#GLU_NONE
 100002

	)

210 
	#GLU_OUTSIDE
 100020

	)

211 
	#GLU_INSIDE
 100021

	)

214 
	#GLU_TESS_BEGIN
 100100

	)

215 
	#GLU_BEGIN
 100100

	)

216 
	#GLU_TESS_VERTEX
 100101

	)

217 
	#GLU_VERTEX
 100101

	)

218 
	#GLU_TESS_END
 100102

	)

219 
	#GLU_END
 100102

	)

220 
	#GLU_TESS_ERROR
 100103

	)

221 
	#GLU_TESS_EDGE_FLAG
 100104

	)

222 
	#GLU_EDGE_FLAG
 100104

	)

223 
	#GLU_TESS_COMBINE
 100105

	)

224 
	#GLU_TESS_BEGIN_DATA
 100106

	)

225 
	#GLU_TESS_VERTEX_DATA
 100107

	)

226 
	#GLU_TESS_END_DATA
 100108

	)

227 
	#GLU_TESS_ERROR_DATA
 100109

	)

228 
	#GLU_TESS_EDGE_FLAG_DATA
 100110

	)

229 
	#GLU_TESS_COMBINE_DATA
 100111

	)

232 
	#GLU_CW
 100120

	)

233 
	#GLU_CCW
 100121

	)

234 
	#GLU_INTERIOR
 100122

	)

235 
	#GLU_EXTERIOR
 100123

	)

236 
	#GLU_UNKNOWN
 100124

	)

239 
	#GLU_TESS_WINDING_RULE
 100140

	)

240 
	#GLU_TESS_BOUNDARY_ONLY
 100141

	)

241 
	#GLU_TESS_TOLERANCE
 100142

	)

244 
	#GLU_TESS_ERROR1
 100151

	)

245 
	#GLU_TESS_ERROR2
 100152

	)

246 
	#GLU_TESS_ERROR3
 100153

	)

247 
	#GLU_TESS_ERROR4
 100154

	)

248 
	#GLU_TESS_ERROR5
 100155

	)

249 
	#GLU_TESS_ERROR6
 100156

	)

250 
	#GLU_TESS_ERROR7
 100157

	)

251 
	#GLU_TESS_ERROR8
 100158

	)

252 
	#GLU_TESS_MISSING_BEGIN_POLYGON
 100151

	)

253 
	#GLU_TESS_MISSING_BEGIN_CONTOUR
 100152

	)

254 
	#GLU_TESS_MISSING_END_POLYGON
 100153

	)

255 
	#GLU_TESS_MISSING_END_CONTOUR
 100154

	)

256 
	#GLU_TESS_COORD_TOO_LARGE
 100155

	)

257 
	#GLU_TESS_NEED_COMBINE_CALLBACK
 100156

	)

260 
	#GLU_TESS_WINDING_ODD
 100130

	)

261 
	#GLU_TESS_WINDING_NONZERO
 100131

	)

262 
	#GLU_TESS_WINDING_POSITIVE
 100132

	)

263 
	#GLU_TESS_WINDING_NEGATIVE
 100133

	)

264 
	#GLU_TESS_WINDING_ABS_GEQ_TWO
 100134

	)

269 #ifde‡
__˝lu•lus


270 
˛ass
 
GLUnurbs
;

271 
˛ass
 
GLUquadric
;

272 
˛ass
 
GLUãs£œt‹
;

274 
GLUnurbs
 
	tGLUnurbs
;

275 
GLUquadric
 
	tGLUquadric
;

276 
GLUãs£œt‹
 
	tGLUãs£œt‹
;

279 
GLUnurbs
 
	tGLUnurbsObj
;

280 
GLUquadric
 
	tGLUquadricObj
;

281 
GLUãs£œt‹
 
	tGLUãs£œt‹Obj
;

282 
GLUãs£œt‹
 
	tGLUåünguœt‹Obj
;

284 
	#GLU_TESS_MAX_COORD
 1.0e150

	)

287 (
GLAPIENTRYP
 
	t_GLUfun˝å
)();

289 
GLAPI
 
GLAPIENTRY
 
gluBegöCurve
 (
GLUnurbs
* 
nurb
);

290 
GLAPI
 
GLAPIENTRY
 
gluBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

291 
GLAPI
 
GLAPIENTRY
 
gluBegöSurÁ˚
 (
GLUnurbs
* 
nurb
);

292 
GLAPI
 
GLAPIENTRY
 
gluBegöTrim
 (
GLUnurbs
* 
nurb
);

293 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

294 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

295 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

296 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

297 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

298 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

299 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
gluCheckExãnsi⁄
 (c⁄° 
GLubyã
 *
extName
, c⁄° GLubyã *
extSåög
);

300 
GLAPI
 
GLAPIENTRY
 
gluCylödî
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ba£
, GLdoubÀ 
t›
, GLdoubÀ 
height
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

301 
GLAPI
 
GLAPIENTRY
 
gluDñëeNurbsRídîî
 (
GLUnurbs
* 
nurb
);

302 
GLAPI
 
GLAPIENTRY
 
gluDñëeQuadric
 (
GLUquadric
* 
quad
);

303 
GLAPI
 
GLAPIENTRY
 
gluDñëeTess
 (
GLUãs£œt‹
* 
ãss
);

304 
GLAPI
 
GLAPIENTRY
 
gluDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
);

305 
GLAPI
 
GLAPIENTRY
 
gluEndCurve
 (
GLUnurbs
* 
nurb
);

306 
GLAPI
 
GLAPIENTRY
 
gluEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

307 
GLAPI
 
GLAPIENTRY
 
gluEndSurÁ˚
 (
GLUnurbs
* 
nurb
);

308 
GLAPI
 
GLAPIENTRY
 
gluEndTrim
 (
GLUnurbs
* 
nurb
);

309 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluEº‹Såög
 (
GLíum
 
îr‹
);

310 
GLAPI
 
GLAPIENTRY
 
gluGëNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
* 
d©a
);

311 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluGëSåög
 (
GLíum
 
«me
);

312 
GLAPI
 
GLAPIENTRY
 
gluGëTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
* 
d©a
);

313 
GLAPI
 
GLAPIENTRY
 
gluLﬂdSam∂ögM©ri˚s
 (
GLUnurbs
* 
nurb
, c⁄° 
GLÊﬂt
 *
modñ
, c⁄° GLÊﬂà*
≥r•e˘ive
, c⁄° 
GLöt
 *
võw
);

314 
GLAPI
 
GLAPIENTRY
 
gluLookAt
 (
GLdoubÀ
 
eyeX
, GLdoubÀ 
eyeY
, GLdoubÀ 
eyeZ
, GLdoubÀ 
˚¡îX
, GLdoubÀ 
˚¡îY
, GLdoubÀ 
˚¡îZ
, GLdoubÀ 
upX
, GLdoubÀ 
upY
, GLdoubÀ 
upZ
);

315 
GLAPI
 
GLUnurbs
* 
GLAPIENTRY
 
gluNewNurbsRídîî
 ();

316 
GLAPI
 
GLUquadric
* 
GLAPIENTRY
 
gluNewQuadric
 ();

317 
GLAPI
 
GLUãs£œt‹
* 
GLAPIENTRY
 
gluNewTess
 ();

318 
GLAPI
 
GLAPIENTRY
 
gluNextC⁄tour
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
ty≥
);

319 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlback
 (
GLUnurbs
* 
nurb
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

320 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©a
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

321 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©aEXT
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

322 
GLAPI
 
GLAPIENTRY
 
gluNurbsCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
knŸCou¡
, 
GLÊﬂt
 *
knŸs
, GLöà
°ride
, GLÊﬂà*
c⁄åﬁ
, GLöà
‹dî
, 
GLíum
 
ty≥
);

323 
GLAPI
 
GLAPIENTRY
 
gluNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
 
vÆue
);

324 
GLAPI
 
GLAPIENTRY
 
gluNurbsSurÁ˚
 (
GLUnurbs
* 
nurb
, 
GLöt
 
sKnŸCou¡
, 
GLÊﬂt
* 
sKnŸs
, GLöà
tKnŸCou¡
, GLÊﬂt* 
tKnŸs
, GLöà
sSåide
, GLöà
tSåide
, GLÊﬂt* 
c⁄åﬁ
, GLöà
sOrdî
, GLöà
tOrdî
, 
GLíum
 
ty≥
);

325 
GLAPI
 
GLAPIENTRY
 
gluOπho2D
 (
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
);

326 
GLAPI
 
GLAPIENTRY
 
gluP¨tülDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
, GLdoubÀ 
°¨t
, GLdoubÀ 
swìp
);

327 
GLAPI
 
GLAPIENTRY
 
gluPî•e˘ive
 (
GLdoubÀ
 
fovy
, GLdoubÀ 
a•e˘
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

328 
GLAPI
 
GLAPIENTRY
 
gluPickM©rix
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
dñX
, GLdoubÀ 
dñY
, 
GLöt
 *
võwp‹t
);

329 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluProje˘
 (
GLdoubÀ
 
objX
, GLdoubÀ 
objY
, GLdoubÀ 
objZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
wöX
, GLdoubÀ* 
wöY
, GLdoubÀ* 
wöZ
);

330 
GLAPI
 
GLAPIENTRY
 
gluPwlCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
cou¡
, 
GLÊﬂt
* 
d©a
, GLöà
°ride
, 
GLíum
 
ty≥
);

331 
GLAPI
 
GLAPIENTRY
 
gluQuadricCÆlback
 (
GLUquadric
* 
quad
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

332 
GLAPI
 
GLAPIENTRY
 
gluQuadricDøwStyÀ
 (
GLUquadric
* 
quad
, 
GLíum
 
døw
);

333 
GLAPI
 
GLAPIENTRY
 
gluQuadricN‹mÆs
 (
GLUquadric
* 
quad
, 
GLíum
 
n‹mÆ
);

334 
GLAPI
 
GLAPIENTRY
 
gluQuadricOrõ¡©i⁄
 (
GLUquadric
* 
quad
, 
GLíum
 
‹õ¡©i⁄
);

335 
GLAPI
 
GLAPIENTRY
 
gluQuadricTextuª
 (
GLUquadric
* 
quad
, 
GLboﬁón
 
ãxtuª
);

336 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluSˇÀImage
 (
GLíum
 
f‹m©
, 
GLsizei
 
wIn
, GLsizeò
hIn
, GLíum 
ty≥In
, c⁄° *
d©aIn
, GLsizeò
wOut
, GLsizeò
hOut
, GLíum 
ty≥Out
, 
GLvoid
* 
d©aOut
);

337 
GLAPI
 
GLAPIENTRY
 
gluSphîe
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ødius
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

338 
GLAPI
 
GLAPIENTRY
 
gluTessBegöC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

339 
GLAPI
 
GLAPIENTRY
 
gluTessBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
, 
GLvoid
* 
d©a
);

340 
GLAPI
 
GLAPIENTRY
 
gluTessCÆlback
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

341 
GLAPI
 
GLAPIENTRY
 
gluTessEndC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

342 
GLAPI
 
GLAPIENTRY
 
gluTessEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

343 
GLAPI
 
GLAPIENTRY
 
gluTessN‹mÆ
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 
vÆueX
, GLdoubÀ 
vÆueY
, GLdoubÀ 
vÆueZ
);

344 
GLAPI
 
GLAPIENTRY
 
gluTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
 
d©a
);

345 
GLAPI
 
GLAPIENTRY
 
gluTessVîãx
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 *
loˇti⁄
, 
GLvoid
* 
d©a
);

346 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
);

347 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘4
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, GLdoubÀ 
˛ùW
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ 
√¨VÆ
, GLdoubÀ 
ÁrVÆ
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
, GLdoubÀ* 
objW
);

349 #ifde‡
__˝lu•lus


	@/usr/include/X11/Xatom.h

1 #i‚de‡
XATOM_H


2 
	#XATOM_H
 1

	)

9 
	#XA_PRIMARY
 ((
Atom
Ë1)

	)

10 
	#XA_SECONDARY
 ((
Atom
Ë2)

	)

11 
	#XA_ARC
 ((
Atom
Ë3)

	)

12 
	#XA_ATOM
 ((
Atom
Ë4)

	)

13 
	#XA_BITMAP
 ((
Atom
Ë5)

	)

14 
	#XA_CARDINAL
 ((
Atom
Ë6)

	)

15 
	#XA_COLORMAP
 ((
Atom
Ë7)

	)

16 
	#XA_CURSOR
 ((
Atom
Ë8)

	)

17 
	#XA_CUT_BUFFER0
 ((
Atom
Ë9)

	)

18 
	#XA_CUT_BUFFER1
 ((
Atom
Ë10)

	)

19 
	#XA_CUT_BUFFER2
 ((
Atom
Ë11)

	)

20 
	#XA_CUT_BUFFER3
 ((
Atom
Ë12)

	)

21 
	#XA_CUT_BUFFER4
 ((
Atom
Ë13)

	)

22 
	#XA_CUT_BUFFER5
 ((
Atom
Ë14)

	)

23 
	#XA_CUT_BUFFER6
 ((
Atom
Ë15)

	)

24 
	#XA_CUT_BUFFER7
 ((
Atom
Ë16)

	)

25 
	#XA_DRAWABLE
 ((
Atom
Ë17)

	)

26 
	#XA_FONT
 ((
Atom
Ë18)

	)

27 
	#XA_INTEGER
 ((
Atom
Ë19)

	)

28 
	#XA_PIXMAP
 ((
Atom
Ë20)

	)

29 
	#XA_POINT
 ((
Atom
Ë21)

	)

30 
	#XA_RECTANGLE
 ((
Atom
Ë22)

	)

31 
	#XA_RESOURCE_MANAGER
 ((
Atom
Ë23)

	)

32 
	#XA_RGB_COLOR_MAP
 ((
Atom
Ë24)

	)

33 
	#XA_RGB_BEST_MAP
 ((
Atom
Ë25)

	)

34 
	#XA_RGB_BLUE_MAP
 ((
Atom
Ë26)

	)

35 
	#XA_RGB_DEFAULT_MAP
 ((
Atom
Ë27)

	)

36 
	#XA_RGB_GRAY_MAP
 ((
Atom
Ë28)

	)

37 
	#XA_RGB_GREEN_MAP
 ((
Atom
Ë29)

	)

38 
	#XA_RGB_RED_MAP
 ((
Atom
Ë30)

	)

39 
	#XA_STRING
 ((
Atom
Ë31)

	)

40 
	#XA_VISUALID
 ((
Atom
Ë32)

	)

41 
	#XA_WINDOW
 ((
Atom
Ë33)

	)

42 
	#XA_WM_COMMAND
 ((
Atom
Ë34)

	)

43 
	#XA_WM_HINTS
 ((
Atom
Ë35)

	)

44 
	#XA_WM_CLIENT_MACHINE
 ((
Atom
Ë36)

	)

45 
	#XA_WM_ICON_NAME
 ((
Atom
Ë37)

	)

46 
	#XA_WM_ICON_SIZE
 ((
Atom
Ë38)

	)

47 
	#XA_WM_NAME
 ((
Atom
Ë39)

	)

48 
	#XA_WM_NORMAL_HINTS
 ((
Atom
Ë40)

	)

49 
	#XA_WM_SIZE_HINTS
 ((
Atom
Ë41)

	)

50 
	#XA_WM_ZOOM_HINTS
 ((
Atom
Ë42)

	)

51 
	#XA_MIN_SPACE
 ((
Atom
Ë43)

	)

52 
	#XA_NORM_SPACE
 ((
Atom
Ë44)

	)

53 
	#XA_MAX_SPACE
 ((
Atom
Ë45)

	)

54 
	#XA_END_SPACE
 ((
Atom
Ë46)

	)

55 
	#XA_SUPERSCRIPT_X
 ((
Atom
Ë47)

	)

56 
	#XA_SUPERSCRIPT_Y
 ((
Atom
Ë48)

	)

57 
	#XA_SUBSCRIPT_X
 ((
Atom
Ë49)

	)

58 
	#XA_SUBSCRIPT_Y
 ((
Atom
Ë50)

	)

59 
	#XA_UNDERLINE_POSITION
 ((
Atom
Ë51)

	)

60 
	#XA_UNDERLINE_THICKNESS
 ((
Atom
Ë52)

	)

61 
	#XA_STRIKEOUT_ASCENT
 ((
Atom
Ë53)

	)

62 
	#XA_STRIKEOUT_DESCENT
 ((
Atom
Ë54)

	)

63 
	#XA_ITALIC_ANGLE
 ((
Atom
Ë55)

	)

64 
	#XA_X_HEIGHT
 ((
Atom
Ë56)

	)

65 
	#XA_QUAD_WIDTH
 ((
Atom
Ë57)

	)

66 
	#XA_WEIGHT
 ((
Atom
Ë58)

	)

67 
	#XA_POINT_SIZE
 ((
Atom
Ë59)

	)

68 
	#XA_RESOLUTION
 ((
Atom
Ë60)

	)

69 
	#XA_COPYRIGHT
 ((
Atom
Ë61)

	)

70 
	#XA_NOTICE
 ((
Atom
Ë62)

	)

71 
	#XA_FONT_NAME
 ((
Atom
Ë63)

	)

72 
	#XA_FAMILY_NAME
 ((
Atom
Ë64)

	)

73 
	#XA_FULL_NAME
 ((
Atom
Ë65)

	)

74 
	#XA_CAP_HEIGHT
 ((
Atom
Ë66)

	)

75 
	#XA_WM_CLASS
 ((
Atom
Ë67)

	)

76 
	#XA_WM_TRANSIENT_FOR
 ((
Atom
Ë68)

	)

78 
	#XA_LAST_PREDEFINED
 ((
Atom
Ë68)

	)

	@/usr/include/X11/Xlib.h

33 #i‚de‡
_X11_XLIB_H_


34 
	#_X11_XLIB_H_


	)

36 
	#XlibS≥cifiˇti⁄Rñó£
 6

	)

38 
	~<sys/ty≥s.h
>

40 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

41 
	~<°döt.h
>

44 
	~<X11/X.h
>

47 
	~<X11/Xfun˝rŸo.h
>

48 
	~<X11/Xosdefs.h
>

50 #i‚de‡
X_WCHAR


51 
	~<°ddef.h
>

53 #ifde‡
__UNIXOS2__


54 
	~<°dlib.h
>

57 
	twch¨_t
;

63 
_XmbÀn
(

64 *
°r
,

65 
Àn


70 
	#X_HAVE_UTF8_STRING
 1

	)

75 #ifde‡
__˛™g__


76 #¥agm®
˛™g
 
dügno°ic
 
push


77 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

80 *
	tXPoöãr
;

82 
	#Boﬁ
 

	)

83 
	#Sètus
 

	)

84 
	#True
 1

	)

85 
	#FÆ£
 0

	)

87 
	#QueuedAÃódy
 0

	)

88 
	#QueuedA·îRódög
 1

	)

89 
	#QueuedA·îFlush
 2

	)

91 
	#C⁄√˘i⁄Numbî
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
fd
)

	)

92 
	#RoŸWödow
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ
)

	)

93 
	#DeÁu…S¸ìn
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
deÁu…_s¸ìn
)

	)

94 
	#DeÁu…RoŸWödow
(
dpy
Ë(
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))->
roŸ
)

	)

95 
	#DeÁu…VisuÆ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_visuÆ
)

	)

96 
	#DeÁu…GC
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
deÁu…_gc
)

	)

97 
	#BœckPixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
bœck_pixñ
)

	)

98 
	#WhôePixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
whôe_pixñ
)

	)

99 
	#AŒPœ√s
 (()~0L)

	)

100 
	#QLígth
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
qÀn
)

	)

101 
	#Di•œyWidth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
width
)

	)

102 
	#Di•œyHeight
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
height
)

	)

103 
	#Di•œyWidthMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mwidth
)

	)

104 
	#Di•œyHeightMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mheight
)

	)

105 
	#Di•œyPœ√s
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

106 
	#Di•œyCñls
(
dpy
, 
s¸
Ë(
	`DeÁu…VisuÆ
(dpy,s¸)->
m≠_íåõs
)

	)

107 
	#S¸ìnCou¡
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
ns¸ìns
)

	)

108 
	#SîvîVíd‹
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
víd‹
)

	)

109 
	#PrŸocﬁVîsi⁄
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
¥Ÿo_maj‹_vîsi⁄
)

	)

110 
	#PrŸocﬁRevisi⁄
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
¥Ÿo_mö‹_vîsi⁄
)

	)

111 
	#Víd‹Rñó£
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
ªÀa£
)

	)

112 
	#Di•œySåög
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
di•œy_«me
)

	)

113 
	#DeÁu…Dïth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

114 
	#DeÁu…Cﬁ‹m≠
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
cm≠
)

	)

115 
	#Bôm≠Unô
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
bôm≠_unô
)

	)

116 
	#Bôm≠BôOrdî
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
bôm≠_bô_‹dî
)

	)

117 
	#Bôm≠Pad
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
bôm≠_∑d
)

	)

118 
	#ImageByãOrdî
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
byã_‹dî
)

	)

119 
	#NextReque°
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
ªque°
 + 1)

	)

120 
	#La°KnownReque°Pro˚s£d
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
œ°_ªque°_ªad
)

	)

123 
	#S¸ìnOfDi•œy
(
dpy
, 
s¸
)(&((
_XPrivDi•œy
)(dpy))->
s¸ìns
[s¸])

	)

124 
	#DeÁu…S¸ìnOfDi•œy
(
dpy
Ë
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))

	)

125 
	#Di•œyOfS¸ìn
(
s
Ë((s)->
di•œy
)

	)

126 
	#RoŸWödowOfS¸ìn
(
s
Ë((s)->
roŸ
)

	)

127 
	#BœckPixñOfS¸ìn
(
s
Ë((s)->
bœck_pixñ
)

	)

128 
	#WhôePixñOfS¸ìn
(
s
Ë((s)->
whôe_pixñ
)

	)

129 
	#DeÁu…Cﬁ‹m≠OfS¸ìn
(
s
)((s)->
cm≠
)

	)

130 
	#DeÁu…DïthOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

131 
	#DeÁu…GCOfS¸ìn
(
s
Ë((s)->
deÁu…_gc
)

	)

132 
	#DeÁu…VisuÆOfS¸ìn
(
s
)((s)->
roŸ_visuÆ
)

	)

133 
	#WidthOfS¸ìn
(
s
Ë((s)->
width
)

	)

134 
	#HeightOfS¸ìn
(
s
Ë((s)->
height
)

	)

135 
	#WidthMMOfS¸ìn
(
s
Ë((s)->
mwidth
)

	)

136 
	#HeightMMOfS¸ìn
(
s
Ë((s)->
mheight
)

	)

137 
	#Pœ√sOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

138 
	#CñlsOfS¸ìn
(
s
Ë(
	`DeÁu…VisuÆOfS¸ìn
((s))->
m≠_íåõs
)

	)

139 
	#MöCm≠sOfS¸ìn
(
s
Ë((s)->
mö_m≠s
)

	)

140 
	#MaxCm≠sOfS¸ìn
(
s
Ë((s)->
max_m≠s
)

	)

141 
	#D€sSaveUndîs
(
s
Ë((s)->
ßve_undîs
)

	)

142 
	#D€sBackögSt‹e
(
s
Ë((s)->
backög_°‹e
)

	)

143 
	#EvítMaskOfS¸ìn
(
s
Ë((s)->
roŸ_öput_mask
)

	)

148 
	s_XExtD©a
 {

149 
	mnumbî
;

150 
_XExtD©a
 *
	m√xt
;

151 (*
	m‰ì_¥iv©e
)(

152 
_XExtD©a
 *
	mexãnsi⁄


154 
XPoöãr
 
	m¥iv©e_d©a
;

155 } 
	tXExtD©a
;

161 
	mexãnsi⁄
;

162 
	mmaj‹_›code
;

163 
	mfú°_evít
;

164 
	mfú°_îr‹
;

165 } 
	tXExtCodes
;

172 
	mdïth
;

173 
	mbôs_≥r_pixñ
;

174 
	msˇ∆öe_∑d
;

175 } 
	tXPixm≠F‹m©VÆues
;

182 
	mfun˘i⁄
;

183 
	m∂™e_mask
;

184 
	mf‹eground
;

185 
	mbackground
;

186 
	mlöe_width
;

187 
	mlöe_°yÀ
;

188 
	mˇp_°yÀ
;

190 
	mjoö_°yÀ
;

191 
	mfûl_°yÀ
;

193 
	mfûl_ruÀ
;

194 
	m¨c_mode
;

195 
Pixm≠
 
	mtûe
;

196 
Pixm≠
 
	m°ù∂e
;

197 
	mts_x_‹igö
;

198 
	mts_y_‹igö
;

199 
F⁄t
 
	mf⁄t
;

200 
	msubwödow_mode
;

201 
Boﬁ
 
	mgøphics_exposuªs
;

202 
	m˛ù_x_‹igö
;

203 
	m˛ù_y_‹igö
;

204 
Pixm≠
 
	m˛ù_mask
;

205 
	mdash_off£t
;

206 
	mdashes
;

207 } 
	tXGCVÆues
;

214 
	g_XGC


215 #ifde‡
	tXLIB_ILLEGAL_ACCESS


217 
XExtD©a
 *
	gext_d©a
;

218 
GC⁄ãxt
 
	ggid
;

222 *
	tGC
;

228 
XExtD©a
 *
	mext_d©a
;

229 
VisuÆID
 
	mvisuÆid
;

230 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

231 
	mc_˛ass
;

233 
	m˛ass
;

235 
	mªd_mask
, 
	mgªí_mask
, 
	mblue_mask
;

236 
	mbôs_≥r_rgb
;

237 
	mm≠_íåõs
;

238 } 
	tVisuÆ
;

244 
	mdïth
;

245 
	mnvisuÆs
;

246 
VisuÆ
 *
	mvisuÆs
;

247 } 
	tDïth
;

255 
	g_XDi•œy
;

258 
XExtD©a
 *
	mext_d©a
;

259 
_XDi•œy
 *
	mdi•œy
;

260 
Wödow
 
	mroŸ
;

261 
	mwidth
, 
	mheight
;

262 
	mmwidth
, 
	mmheight
;

263 
	mndïths
;

264 
Dïth
 *
	mdïths
;

265 
	mroŸ_dïth
;

266 
VisuÆ
 *
	mroŸ_visuÆ
;

267 
GC
 
	mdeÁu…_gc
;

268 
Cﬁ‹m≠
 
	mcm≠
;

269 
	mwhôe_pixñ
;

270 
	mbœck_pixñ
;

271 
	mmax_m≠s
, 
	mmö_m≠s
;

272 
	mbackög_°‹e
;

273 
Boﬁ
 
	mßve_undîs
;

274 
	mroŸ_öput_mask
;

275 } 
	tS¸ìn
;

281 
XExtD©a
 *
	mext_d©a
;

282 
	mdïth
;

283 
	mbôs_≥r_pixñ
;

284 
	msˇ∆öe_∑d
;

285 } 
	tS¸ìnF‹m©
;

291 
Pixm≠
 
	mbackground_pixm≠
;

292 
	mbackground_pixñ
;

293 
Pixm≠
 
	mb‹dî_pixm≠
;

294 
	mb‹dî_pixñ
;

295 
	mbô_gøvôy
;

296 
	mwö_gøvôy
;

297 
	mbackög_°‹e
;

298 
	mbackög_∂™es
;

299 
	mbackög_pixñ
;

300 
Boﬁ
 
	mßve_undî
;

301 
	mevít_mask
;

302 
	mdo_nŸ_¥›ag©e_mask
;

303 
Boﬁ
 
	movîride_ªdúe˘
;

304 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

305 
Curs‹
 
	mcurs‹
;

306 } 
	tXSëWödowAâribuãs
;

309 
	mx
, 
	my
;

310 
	mwidth
, 
	mheight
;

311 
	mb‹dî_width
;

312 
	mdïth
;

313 
VisuÆ
 *
	mvisuÆ
;

314 
Wödow
 
	mroŸ
;

315 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

316 
	mc_˛ass
;

318 
	m˛ass
;

320 
	mbô_gøvôy
;

321 
	mwö_gøvôy
;

322 
	mbackög_°‹e
;

323 
	mbackög_∂™es
;

324 
	mbackög_pixñ
;

325 
Boﬁ
 
	mßve_undî
;

326 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

327 
Boﬁ
 
	mm≠_ö°ÆÀd
;

328 
	mm≠_°©e
;

329 
	mÆl_evít_masks
;

330 
	myour_evít_mask
;

331 
	mdo_nŸ_¥›ag©e_mask
;

332 
Boﬁ
 
	movîride_ªdúe˘
;

333 
S¸ìn
 *
	ms¸ìn
;

334 } 
	tXWödowAâribuãs
;

342 
	mÁmûy
;

343 
	mÀngth
;

344 *
	maddªss
;

345 } 
	tXHo°Addªss
;

351 
	mty≥Àngth
;

352 
	mvÆuñígth
;

353 *
	mty≥
;

354 *
	mvÆue
;

355 } 
	tXSîvîI¡î¥ëedAddªss
;

360 
	s_XImage
 {

361 
	mwidth
, 
	mheight
;

362 
	mxoff£t
;

363 
	mf‹m©
;

364 *
	md©a
;

365 
	mbyã_‹dî
;

366 
	mbôm≠_unô
;

367 
	mbôm≠_bô_‹dî
;

368 
	mbôm≠_∑d
;

369 
	mdïth
;

370 
	mbyãs_≥r_löe
;

371 
	mbôs_≥r_pixñ
;

372 
	mªd_mask
;

373 
	mgªí_mask
;

374 
	mblue_mask
;

375 
XPoöãr
 
	mobd©a
;

376 
	sfuncs
 {

377 
	m_XImage
 *(*
	m¸óã_image
)(

378 
	m_XDi•œy
* ,

379 
	mVisuÆ
* ,

388 (*
	mde°roy_image
Ë(
	m_XImage
 *);

389 (*
	mgë_pixñ
Ë(
	m_XImage
 *, , );

390 (*
	mput_pixñ
Ë(
	m_XImage
 *, , , );

391 
	m_XImage
 *(*
	msub_image
)(_XImage *, , , , );

392 (*
	madd_pixñ
Ë(
	m_XImage
 *, );

393 } 
	mf
;

394 } 
	tXImage
;

400 
	mx
, 
	my
;

401 
	mwidth
, 
	mheight
;

402 
	mb‹dî_width
;

403 
Wödow
 
	msiblög
;

404 
	m°ack_mode
;

405 } 
	tXWödowCh™ges
;

411 
	mpixñ
;

412 
	mªd
, 
	mgªí
, 
	mblue
;

413 
	mÊags
;

414 
	m∑d
;

415 } 
	tXCﬁ‹
;

423 
	mx1
, 
	my1
, 
	mx2
, 
	my2
;

424 } 
	tXSegmít
;

427 
	mx
, 
	my
;

428 } 
	tXPoöt
;

431 
	mx
, 
	my
;

432 
	mwidth
, 
	mheight
;

433 } 
	tXRe˘™gÀ
;

436 
	mx
, 
	my
;

437 
	mwidth
, 
	mheight
;

438 
	m™gÀ1
, 
	m™gÀ2
;

439 } 
	tXArc
;

445 
	mkey_˛ick_≥r˚¡
;

446 
	mbñl_≥r˚¡
;

447 
	mbñl_pôch
;

448 
	mbñl_duøti⁄
;

449 
	mÀd
;

450 
	mÀd_mode
;

451 
	mkey
;

452 
	mauto_ª≥©_mode
;

453 } 
	tXKeybﬂrdC⁄åﬁ
;

458 
	mkey_˛ick_≥r˚¡
;

459 
	mbñl_≥r˚¡
;

460 
	mbñl_pôch
, 
	mbñl_duøti⁄
;

461 
	mÀd_mask
;

462 
	mglobÆ_auto_ª≥©
;

463 
	mauto_ª≥©s
[32];

464 } 
	tXKeybﬂrdSèã
;

469 
Time
 
	mtime
;

470 
	mx
, 
	my
;

471 } 
	tXTimeCo‹d
;

476 
	mmax_key≥rmod
;

477 
KeyCode
 *
	mmodifõrm≠
;

478 } 
	tXModifõrKeym≠
;

486 #i‚de‡
XLIB_ILLEGAL_ACCESS


487 
_XDi•œy
 
	tDi•œy
;

490 
	g_XPriv©e
;

491 
	g_XrmHashBuckëRec
;

494 #ifde‡
XLIB_ILLEGAL_ACCESS


495 
	t_XDi•œy


498 
XExtD©a
 *
	gext_d©a
;

499 
_XPriv©e
 *
	g¥iv©e1
;

500 
	gfd
;

501 
	g¥iv©e2
;

502 
	g¥Ÿo_maj‹_vîsi⁄
;

503 
	g¥Ÿo_mö‹_vîsi⁄
;

504 *
	gvíd‹
;

505 
XID
 
	g¥iv©e3
;

506 
XID
 
	g¥iv©e4
;

507 
XID
 
	g¥iv©e5
;

508 
	g¥iv©e6
;

509 
XID
 (*
ªsour˚_Æloc
)(

510 
	g_XDi•œy
*

512 
	gbyã_‹dî
;

513 
	gbôm≠_unô
;

514 
	gbôm≠_∑d
;

515 
	gbôm≠_bô_‹dî
;

516 
	gnf‹m©s
;

517 
S¸ìnF‹m©
 *
	gpixm≠_f‹m©
;

518 
	g¥iv©e8
;

519 
	gªÀa£
;

520 
_XPriv©e
 *
	g¥iv©e9
, *
	g¥iv©e10
;

521 
	gqÀn
;

522 
	gœ°_ªque°_ªad
;

523 
	gªque°
;

524 
XPoöãr
 
	g¥iv©e11
;

525 
XPoöãr
 
	g¥iv©e12
;

526 
XPoöãr
 
	g¥iv©e13
;

527 
XPoöãr
 
	g¥iv©e14
;

528 
	gmax_ªque°_size
;

529 
_XrmHashBuckëRec
 *
	gdb
;

530 (*
	g¥iv©e15
)(

531 
	g_XDi•œy
*

533 *
	gdi•œy_«me
;

534 
	gdeÁu…_s¸ìn
;

535 
	gns¸ìns
;

536 
S¸ìn
 *
	gs¸ìns
;

537 
	gmŸi⁄_buf„r
;

538 
	g¥iv©e16
;

539 
	gmö_keycode
;

540 
	gmax_keycode
;

541 
XPoöãr
 
	g¥iv©e17
;

542 
XPoöãr
 
	g¥iv©e18
;

543 
	g¥iv©e19
;

544 *
	gxdeÁu…s
;

547 #ifde‡
	tXLIB_ILLEGAL_ACCESS


548 
	tDi•œy
,

550 *
	t_XPrivDi•œy
;

552 #unde‡
_XEVENT_


553 #i‚de‡
_XEVENT_


558 
	mty≥
;

559 
	m£rül
;

560 
Boﬁ
 
	m£nd_evít
;

561 
Di•œy
 *
	mdi•œy
;

562 
Wödow
 
	mwödow
;

563 
Wödow
 
	mroŸ
;

564 
Wödow
 
	msubwödow
;

565 
Time
 
	mtime
;

566 
	mx
, 
	my
;

567 
	mx_roŸ
, 
	my_roŸ
;

568 
	m°©e
;

569 
	mkeycode
;

570 
Boﬁ
 
	mßme_s¸ìn
;

571 } 
	tXKeyEvít
;

572 
XKeyEvít
 
	tXKeyPªs£dEvít
;

573 
XKeyEvít
 
	tXKeyRñó£dEvít
;

576 
	mty≥
;

577 
	m£rül
;

578 
Boﬁ
 
	m£nd_evít
;

579 
Di•œy
 *
	mdi•œy
;

580 
Wödow
 
	mwödow
;

581 
Wödow
 
	mroŸ
;

582 
Wödow
 
	msubwödow
;

583 
Time
 
	mtime
;

584 
	mx
, 
	my
;

585 
	mx_roŸ
, 
	my_roŸ
;

586 
	m°©e
;

587 
	mbuâ⁄
;

588 
Boﬁ
 
	mßme_s¸ìn
;

589 } 
	tXBuâ⁄Evít
;

590 
XBuâ⁄Evít
 
	tXBuâ⁄Pªs£dEvít
;

591 
XBuâ⁄Evít
 
	tXBuâ⁄Rñó£dEvít
;

594 
	mty≥
;

595 
	m£rül
;

596 
Boﬁ
 
	m£nd_evít
;

597 
Di•œy
 *
	mdi•œy
;

598 
Wödow
 
	mwödow
;

599 
Wödow
 
	mroŸ
;

600 
Wödow
 
	msubwödow
;

601 
Time
 
	mtime
;

602 
	mx
, 
	my
;

603 
	mx_roŸ
, 
	my_roŸ
;

604 
	m°©e
;

605 
	mis_höt
;

606 
Boﬁ
 
	mßme_s¸ìn
;

607 } 
	tXMŸi⁄Evít
;

608 
XMŸi⁄Evít
 
	tXPoöãrMovedEvít
;

611 
	mty≥
;

612 
	m£rül
;

613 
Boﬁ
 
	m£nd_evít
;

614 
Di•œy
 *
	mdi•œy
;

615 
Wödow
 
	mwödow
;

616 
Wödow
 
	mroŸ
;

617 
Wödow
 
	msubwödow
;

618 
Time
 
	mtime
;

619 
	mx
, 
	my
;

620 
	mx_roŸ
, 
	my_roŸ
;

621 
	mmode
;

622 
	mdëaû
;

627 
Boﬁ
 
	mßme_s¸ìn
;

628 
Boﬁ
 
	mfocus
;

629 
	m°©e
;

630 } 
	tXCrossögEvít
;

631 
XCrossögEvít
 
	tXE¡îWödowEvít
;

632 
XCrossögEvít
 
	tXLóveWödowEvít
;

635 
	mty≥
;

636 
	m£rül
;

637 
Boﬁ
 
	m£nd_evít
;

638 
Di•œy
 *
	mdi•œy
;

639 
Wödow
 
	mwödow
;

640 
	mmode
;

642 
	mdëaû
;

648 } 
	tXFocusCh™geEvít
;

649 
XFocusCh™geEvít
 
	tXFocusInEvít
;

650 
XFocusCh™geEvít
 
	tXFocusOutEvít
;

654 
	mty≥
;

655 
	m£rül
;

656 
Boﬁ
 
	m£nd_evít
;

657 
Di•œy
 *
	mdi•œy
;

658 
Wödow
 
	mwödow
;

659 
	mkey_ve˘‹
[32];

660 } 
	tXKeym≠Evít
;

663 
	mty≥
;

664 
	m£rül
;

665 
Boﬁ
 
	m£nd_evít
;

666 
Di•œy
 *
	mdi•œy
;

667 
Wödow
 
	mwödow
;

668 
	mx
, 
	my
;

669 
	mwidth
, 
	mheight
;

670 
	mcou¡
;

671 } 
	tXExpo£Evít
;

674 
	mty≥
;

675 
	m£rül
;

676 
Boﬁ
 
	m£nd_evít
;

677 
Di•œy
 *
	mdi•œy
;

678 
DøwabÀ
 
	mdøwabÀ
;

679 
	mx
, 
	my
;

680 
	mwidth
, 
	mheight
;

681 
	mcou¡
;

682 
	mmaj‹_code
;

683 
	mmö‹_code
;

684 } 
	tXGøphicsExpo£Evít
;

687 
	mty≥
;

688 
	m£rül
;

689 
Boﬁ
 
	m£nd_evít
;

690 
Di•œy
 *
	mdi•œy
;

691 
DøwabÀ
 
	mdøwabÀ
;

692 
	mmaj‹_code
;

693 
	mmö‹_code
;

694 } 
	tXNoExpo£Evít
;

697 
	mty≥
;

698 
	m£rül
;

699 
Boﬁ
 
	m£nd_evít
;

700 
Di•œy
 *
	mdi•œy
;

701 
Wödow
 
	mwödow
;

702 
	m°©e
;

703 } 
	tXVisibûôyEvít
;

706 
	mty≥
;

707 
	m£rül
;

708 
Boﬁ
 
	m£nd_evít
;

709 
Di•œy
 *
	mdi•œy
;

710 
Wödow
 
	m∑ª¡
;

711 
Wödow
 
	mwödow
;

712 
	mx
, 
	my
;

713 
	mwidth
, 
	mheight
;

714 
	mb‹dî_width
;

715 
Boﬁ
 
	movîride_ªdúe˘
;

716 } 
	tXCª©eWödowEvít
;

719 
	mty≥
;

720 
	m£rül
;

721 
Boﬁ
 
	m£nd_evít
;

722 
Di•œy
 *
	mdi•œy
;

723 
Wödow
 
	mevít
;

724 
Wödow
 
	mwödow
;

725 } 
	tXDe°royWödowEvít
;

728 
	mty≥
;

729 
	m£rül
;

730 
Boﬁ
 
	m£nd_evít
;

731 
Di•œy
 *
	mdi•œy
;

732 
Wödow
 
	mevít
;

733 
Wödow
 
	mwödow
;

734 
Boﬁ
 
	m‰om_c⁄figuª
;

735 } 
	tXUnm≠Evít
;

738 
	mty≥
;

739 
	m£rül
;

740 
Boﬁ
 
	m£nd_evít
;

741 
Di•œy
 *
	mdi•œy
;

742 
Wödow
 
	mevít
;

743 
Wödow
 
	mwödow
;

744 
Boﬁ
 
	movîride_ªdúe˘
;

745 } 
	tXM≠Evít
;

748 
	mty≥
;

749 
	m£rül
;

750 
Boﬁ
 
	m£nd_evít
;

751 
Di•œy
 *
	mdi•œy
;

752 
Wödow
 
	m∑ª¡
;

753 
Wödow
 
	mwödow
;

754 } 
	tXM≠Reque°Evít
;

757 
	mty≥
;

758 
	m£rül
;

759 
Boﬁ
 
	m£nd_evít
;

760 
Di•œy
 *
	mdi•œy
;

761 
Wödow
 
	mevít
;

762 
Wödow
 
	mwödow
;

763 
Wödow
 
	m∑ª¡
;

764 
	mx
, 
	my
;

765 
Boﬁ
 
	movîride_ªdúe˘
;

766 } 
	tXRï¨ítEvít
;

769 
	mty≥
;

770 
	m£rül
;

771 
Boﬁ
 
	m£nd_evít
;

772 
Di•œy
 *
	mdi•œy
;

773 
Wödow
 
	mevít
;

774 
Wödow
 
	mwödow
;

775 
	mx
, 
	my
;

776 
	mwidth
, 
	mheight
;

777 
	mb‹dî_width
;

778 
Wödow
 
	mabove
;

779 
Boﬁ
 
	movîride_ªdúe˘
;

780 } 
	tXC⁄figuªEvít
;

783 
	mty≥
;

784 
	m£rül
;

785 
Boﬁ
 
	m£nd_evít
;

786 
Di•œy
 *
	mdi•œy
;

787 
Wödow
 
	mevít
;

788 
Wödow
 
	mwödow
;

789 
	mx
, 
	my
;

790 } 
	tXGøvôyEvít
;

793 
	mty≥
;

794 
	m£rül
;

795 
Boﬁ
 
	m£nd_evít
;

796 
Di•œy
 *
	mdi•œy
;

797 
Wödow
 
	mwödow
;

798 
	mwidth
, 
	mheight
;

799 } 
	tXResizeReque°Evít
;

802 
	mty≥
;

803 
	m£rül
;

804 
Boﬁ
 
	m£nd_evít
;

805 
Di•œy
 *
	mdi•œy
;

806 
Wödow
 
	m∑ª¡
;

807 
Wödow
 
	mwödow
;

808 
	mx
, 
	my
;

809 
	mwidth
, 
	mheight
;

810 
	mb‹dî_width
;

811 
Wödow
 
	mabove
;

812 
	mdëaû
;

813 
	mvÆue_mask
;

814 } 
	tXC⁄figuªReque°Evít
;

817 
	mty≥
;

818 
	m£rül
;

819 
Boﬁ
 
	m£nd_evít
;

820 
Di•œy
 *
	mdi•œy
;

821 
Wödow
 
	mevít
;

822 
Wödow
 
	mwödow
;

823 
	m∂a˚
;

824 } 
	tXCúcuœãEvít
;

827 
	mty≥
;

828 
	m£rül
;

829 
Boﬁ
 
	m£nd_evít
;

830 
Di•œy
 *
	mdi•œy
;

831 
Wödow
 
	m∑ª¡
;

832 
Wödow
 
	mwödow
;

833 
	m∂a˚
;

834 } 
	tXCúcuœãReque°Evít
;

837 
	mty≥
;

838 
	m£rül
;

839 
Boﬁ
 
	m£nd_evít
;

840 
Di•œy
 *
	mdi•œy
;

841 
Wödow
 
	mwödow
;

842 
Atom
 
	m©om
;

843 
Time
 
	mtime
;

844 
	m°©e
;

845 } 
	tXPr›îtyEvít
;

848 
	mty≥
;

849 
	m£rül
;

850 
Boﬁ
 
	m£nd_evít
;

851 
Di•œy
 *
	mdi•œy
;

852 
Wödow
 
	mwödow
;

853 
Atom
 
	m£À˘i⁄
;

854 
Time
 
	mtime
;

855 } 
	tXSñe˘i⁄CÀ¨Evít
;

858 
	mty≥
;

859 
	m£rül
;

860 
Boﬁ
 
	m£nd_evít
;

861 
Di•œy
 *
	mdi•œy
;

862 
Wödow
 
	mow√r
;

863 
Wödow
 
	mªque°‹
;

864 
Atom
 
	m£À˘i⁄
;

865 
Atom
 
	mèrgë
;

866 
Atom
 
	m¥›îty
;

867 
Time
 
	mtime
;

868 } 
	tXSñe˘i⁄Reque°Evít
;

871 
	mty≥
;

872 
	m£rül
;

873 
Boﬁ
 
	m£nd_evít
;

874 
Di•œy
 *
	mdi•œy
;

875 
Wödow
 
	mªque°‹
;

876 
Atom
 
	m£À˘i⁄
;

877 
Atom
 
	mèrgë
;

878 
Atom
 
	m¥›îty
;

879 
Time
 
	mtime
;

880 } 
	tXSñe˘i⁄Evít
;

883 
	mty≥
;

884 
	m£rül
;

885 
Boﬁ
 
	m£nd_evít
;

886 
Di•œy
 *
	mdi•œy
;

887 
Wödow
 
	mwödow
;

888 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

889 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

890 
Boﬁ
 
	mc_√w
;

892 
Boﬁ
 
	m√w
;

894 
	m°©e
;

895 } 
	tXCﬁ‹m≠Evít
;

898 
	mty≥
;

899 
	m£rül
;

900 
Boﬁ
 
	m£nd_evít
;

901 
Di•œy
 *
	mdi•œy
;

902 
Wödow
 
	mwödow
;

903 
Atom
 
	mmesßge_ty≥
;

904 
	mf‹m©
;

906 
	mb
[20];

907 
	ms
[10];

908 
	ml
[5];

909 } 
	md©a
;

910 } 
	tXClõ¡MesßgeEvít
;

913 
	mty≥
;

914 
	m£rül
;

915 
Boﬁ
 
	m£nd_evít
;

916 
Di•œy
 *
	mdi•œy
;

917 
Wödow
 
	mwödow
;

918 
	mªque°
;

920 
	mfú°_keycode
;

921 
	mcou¡
;

922 } 
	tXM≠pögEvít
;

925 
	mty≥
;

926 
Di•œy
 *
	mdi•œy
;

927 
XID
 
	mªsour˚id
;

928 
	m£rül
;

929 
	mîr‹_code
;

930 
	mªque°_code
;

931 
	mmö‹_code
;

932 } 
	tXEº‹Evít
;

935 
	mty≥
;

936 
	m£rül
;

937 
Boﬁ
 
	m£nd_evít
;

938 
Di•œy
 *
	mdi•œy
;

939 
Wödow
 
	mwödow
;

940 } 
	tXAnyEvít
;

950 
	mty≥
;

951 
	m£rül
;

952 
Boﬁ
 
	m£nd_evít
;

953 
Di•œy
 *
	mdi•œy
;

954 
	mexãnsi⁄
;

955 
	mevty≥
;

956 } 
	tXGíîicEvít
;

959 
	mty≥
;

960 
	m£rül
;

961 
Boﬁ
 
	m£nd_evít
;

962 
Di•œy
 *
	mdi•œy
;

963 
	mexãnsi⁄
;

964 
	mevty≥
;

965 
	mcookõ
;

966 *
	md©a
;

967 } 
	tXGíîicEvítCookõ
;

973 
	u_XEvít
 {

974 
	mty≥
;

975 
XAnyEvít
 
	mx™y
;

976 
XKeyEvít
 
	mxkey
;

977 
XBuâ⁄Evít
 
	mxbuâ⁄
;

978 
XMŸi⁄Evít
 
	mxmŸi⁄
;

979 
XCrossögEvít
 
	mx¸ossög
;

980 
XFocusCh™geEvít
 
	mxfocus
;

981 
XExpo£Evít
 
	mxexpo£
;

982 
XGøphicsExpo£Evít
 
	mxgøphic£xpo£
;

983 
XNoExpo£Evít
 
	mxn€xpo£
;

984 
XVisibûôyEvít
 
	mxvisibûôy
;

985 
XCª©eWödowEvít
 
	mx¸óãwödow
;

986 
XDe°royWödowEvít
 
	mxde°roywödow
;

987 
XUnm≠Evít
 
	mxunm≠
;

988 
XM≠Evít
 
	mxm≠
;

989 
XM≠Reque°Evít
 
	mxm≠ªque°
;

990 
XRï¨ítEvít
 
	mxª∑ª¡
;

991 
XC⁄figuªEvít
 
	mxc⁄figuª
;

992 
XGøvôyEvít
 
	mxgøvôy
;

993 
XResizeReque°Evít
 
	mxªsizîeque°
;

994 
XC⁄figuªReque°Evít
 
	mxc⁄figuªªque°
;

995 
XCúcuœãEvít
 
	mxcúcuœã
;

996 
XCúcuœãReque°Evít
 
	mxcúcuœãªque°
;

997 
XPr›îtyEvít
 
	mx¥›îty
;

998 
XSñe˘i⁄CÀ¨Evít
 
	mx£À˘i⁄˛ór
;

999 
XSñe˘i⁄Reque°Evít
 
	mx£À˘i⁄ªque°
;

1000 
XSñe˘i⁄Evít
 
	mx£À˘i⁄
;

1001 
XCﬁ‹m≠Evít
 
	mxcﬁ‹m≠
;

1002 
XClõ¡MesßgeEvít
 
	mx˛õ¡
;

1003 
XM≠pögEvít
 
	mxm≠pög
;

1004 
XEº‹Evít
 
	mxîr‹
;

1005 
XKeym≠Evít
 
	mxkeym≠
;

1006 
XGíîicEvít
 
	mxgíîic
;

1007 
XGíîicEvítCookõ
 
	mxcookõ
;

1008 
	m∑d
[24];

1009 } 
	tXEvít
;

1012 
	#XAŒocID
(
dpy
Ë((*((
_XPrivDi•œy
)(dpy))->
ªsour˚_Æloc
)((dpy)))

	)

1018 
	mlbórög
;

1019 
	mrbórög
;

1020 
	mwidth
;

1021 
	mas˚¡
;

1022 
	mdes˚¡
;

1023 
	m©åibuãs
;

1024 } 
	tXCh¨Såu˘
;

1031 
Atom
 
	m«me
;

1032 
	mˇrd32
;

1033 } 
	tXF⁄tPr›
;

1036 
XExtD©a
 *
	mext_d©a
;

1037 
F⁄t
 
	mfid
;

1038 
	mdúe˘i⁄
;

1039 
	mmö_ch¨_‹_byã2
;

1040 
	mmax_ch¨_‹_byã2
;

1041 
	mmö_byã1
;

1042 
	mmax_byã1
;

1043 
Boﬁ
 
	mÆl_ch¨s_exi°
;

1044 
	mdeÁu…_ch¨
;

1045 
	mn_¥›îtõs
;

1046 
XF⁄tPr›
 *
	m¥›îtõs
;

1047 
XCh¨Såu˘
 
	mmö_bounds
;

1048 
XCh¨Såu˘
 
	mmax_bounds
;

1049 
XCh¨Såu˘
 *
	m≥r_ch¨
;

1050 
	mas˚¡
;

1051 
	mdes˚¡
;

1052 } 
	tXF⁄tSåu˘
;

1058 *
	mch¨s
;

1059 
	mnch¨s
;

1060 
	mdñè
;

1061 
F⁄t
 
	mf⁄t
;

1062 } 
	tXTextIãm
;

1065 
	mbyã1
;

1066 
	mbyã2
;

1067 } 
	tXCh¨2b
;

1070 
XCh¨2b
 *
	mch¨s
;

1071 
	mnch¨s
;

1072 
	mdñè
;

1073 
F⁄t
 
	mf⁄t
;

1074 } 
	tXTextIãm16
;

1077 uni⁄ { 
Di•œy
 *
	mdi•œy
;

1078 
GC
 
	mgc
;

1079 
VisuÆ
 *
	mvisuÆ
;

1080 
S¸ìn
 *
	ms¸ìn
;

1081 
S¸ìnF‹m©
 *
	mpixm≠_f‹m©
;

1082 
XF⁄tSåu˘
 *
	mf⁄t
; } 
	tXED©aObje˘
;

1085 
XRe˘™gÀ
 
	mmax_ök_exã¡
;

1086 
XRe˘™gÀ
 
	mmax_logiˇl_exã¡
;

1087 } 
	tXF⁄tSëExã¡s
;

1093 
_XOM
 *
	tXOM
;

1094 
_XOC
 *
	tXOC
, *
	tXF⁄tSë
;

1097 *
	mch¨s
;

1098 
	mnch¨s
;

1099 
	mdñè
;

1100 
XF⁄tSë
 
	mf⁄t_£t
;

1101 } 
	tXmbTextIãm
;

1104 
wch¨_t
 *
	mch¨s
;

1105 
	mnch¨s
;

1106 
	mdñè
;

1107 
XF⁄tSë
 
	mf⁄t_£t
;

1108 } 
	tXwcTextIãm
;

1110 
	#XNRequúedCh¨Së
 "ªquúedCh¨Së"

	)

1111 
	#XNQuîyOrõ¡©i⁄
 "quîyOrõ¡©i⁄"

	)

1112 
	#XNBa£F⁄tName
 "ba£F⁄tName"

	)

1113 
	#XNOMAutom©ic
 "omAutom©ic"

	)

1114 
	#XNMissögCh¨Së
 "missögCh¨Së"

	)

1115 
	#XNDeÁu…Såög
 "deÁu…Såög"

	)

1116 
	#XNOrõ¡©i⁄
 "‹õ¡©i⁄"

	)

1117 
	#XNDúe˘i⁄ÆDïídítDøwög
 "dúe˘i⁄ÆDïídítDøwög"

	)

1118 
	#XNC⁄ãxtuÆDøwög
 "c⁄ãxtuÆDøwög"

	)

1119 
	#XNF⁄tInfo
 "f⁄tInfo"

	)

1122 
	mch¨£t_cou¡
;

1123 **
	mch¨£t_li°
;

1124 } 
	tXOMCh¨SëLi°
;

1127 
	mXOMOrõ¡©i⁄_LTR_TTB
,

1128 
	mXOMOrõ¡©i⁄_RTL_TTB
,

1129 
	mXOMOrõ¡©i⁄_TTB_LTR
,

1130 
	mXOMOrõ¡©i⁄_TTB_RTL
,

1131 
	mXOMOrõ¡©i⁄_C⁄ãxt


1132 } 
	tXOrõ¡©i⁄
;

1135 
	mnum_‹õ¡©i⁄
;

1136 
XOrõ¡©i⁄
 *
	m‹õ¡©i⁄
;

1137 } 
	tXOMOrõ¡©i⁄
;

1140 
	mnum_f⁄t
;

1141 
XF⁄tSåu˘
 **
	mf⁄t_°ru˘_li°
;

1142 **
	mf⁄t_«me_li°
;

1143 } 
	tXOMF⁄tInfo
;

1145 
_XIM
 *
	tXIM
;

1146 
_XIC
 *
	tXIC
;

1148 (*
	tXIMProc
)(

1149 
	tXIM
,

1150 
	tXPoöãr
,

1151 
	tXPoöãr


1154 
	$Boﬁ
 (*
	tXICProc
)(

1155 
	tXIC
,

1156 
	tXPoöãr
,

1157 
	tXPoöãr


1160 (*
	tXIDProc
)(

1161 
	tDi•œy
*,

1162 
	tXPoöãr
,

1163 
	tXPoöãr


1166 
	tXIMStyÀ
;

1169 
cou¡_°yÀs
;

1170 
XIMStyÀ
 *
suµ‹ãd_°yÀs
;

1171 } 
	tXIMStyÀs
;

1173 
	#XIMPªedôAªa
 0x0001L

	)

1174 
	#XIMPªedôCÆlbacks
 0x0002L

	)

1175 
	#XIMPªedôPosôi⁄
 0x0004L

	)

1176 
	#XIMPªedôNŸhög
 0x0008L

	)

1177 
	#XIMPªedôN⁄e
 0x0010L

	)

1178 
	#XIMSètusAªa
 0x0100L

	)

1179 
	#XIMSètusCÆlbacks
 0x0200L

	)

1180 
	#XIMSètusNŸhög
 0x0400L

	)

1181 
	#XIMSètusN⁄e
 0x0800L

	)

1183 
	#XNVaNe°edLi°
 "XNVaNe°edLi°"

	)

1184 
	#XNQuîyI≈utStyÀ
 "quîyI≈utStyÀ"

	)

1185 
	#XNClõ¡Wödow
 "˛õ¡Wödow"

	)

1186 
	#XNI≈utStyÀ
 "öputStyÀ"

	)

1187 
	#XNFocusWödow
 "focusWödow"

	)

1188 
	#XNResour˚Name
 "ªsour˚Name"

	)

1189 
	#XNResour˚Cœss
 "ªsour˚Cœss"

	)

1190 
	#XNGeomëryCÆlback
 "geomëryCÆlback"

	)

1191 
	#XNDe°royCÆlback
 "de°royCÆlback"

	)

1192 
	#XNFûãrEvíts
 "fûãrEvíts"

	)

1193 
	#XNPªedôSèπCÆlback
 "¥ìdôSèπCÆlback"

	)

1194 
	#XNPªedôD⁄eCÆlback
 "¥ìdôD⁄eCÆlback"

	)

1195 
	#XNPªedôDøwCÆlback
 "¥ìdôDøwCÆlback"

	)

1196 
	#XNPªedôC¨ëCÆlback
 "¥ìdôC¨ëCÆlback"

	)

1197 
	#XNPªedôSèãNŸifyCÆlback
 "¥ìdôSèãNŸifyCÆlback"

	)

1198 
	#XNPªedôAâribuãs
 "¥ìdôAâribuãs"

	)

1199 
	#XNSètusSèπCÆlback
 "°©usSèπCÆlback"

	)

1200 
	#XNSètusD⁄eCÆlback
 "°©usD⁄eCÆlback"

	)

1201 
	#XNSètusDøwCÆlback
 "°©usDøwCÆlback"

	)

1202 
	#XNSètusAâribuãs
 "°©usAâribuãs"

	)

1203 
	#XNAªa
 "¨ó"

	)

1204 
	#XNAªaNìded
 "¨óNìded"

	)

1205 
	#XNSpŸLoˇti⁄
 "•ŸLoˇti⁄"

	)

1206 
	#XNCﬁ‹m≠
 "cﬁ‹M≠"

	)

1207 
	#XNStdCﬁ‹m≠
 "°dCﬁ‹M≠"

	)

1208 
	#XNF‹eground
 "f‹eground"

	)

1209 
	#XNBackground
 "background"

	)

1210 
	#XNBackgroundPixm≠
 "backgroundPixm≠"

	)

1211 
	#XNF⁄tSë
 "f⁄tSë"

	)

1212 
	#XNLöeS∑˚
 "löeS∑˚"

	)

1213 
	#XNCurs‹
 "curs‹"

	)

1215 
	#XNQuîyIMVÆuesLi°
 "quîyIMVÆuesLi°"

	)

1216 
	#XNQuîyICVÆuesLi°
 "quîyICVÆuesLi°"

	)

1217 
	#XNVisibÀPosôi⁄
 "visibÀPosôi⁄"

	)

1218 
	#XNR6PªedôCÆlback
 "r6PªedôCÆlback"

	)

1219 
	#XNSåögC⁄vîsi⁄CÆlback
 "°rögC⁄vîsi⁄CÆlback"

	)

1220 
	#XNSåögC⁄vîsi⁄
 "°rögC⁄vîsi⁄"

	)

1221 
	#XNRe£tSèã
 "ª£tSèã"

	)

1222 
	#XNHŸKey
 "hŸKey"

	)

1223 
	#XNHŸKeySèã
 "hŸKeySèã"

	)

1224 
	#XNPªedôSèã
 "¥ìdôSèã"

	)

1225 
	#XNSï¨©‹ofNe°edLi°
 "£∑øt‹ofNe°edLi°"

	)

1227 
	#XBuf„rOvîÊow
 -1

	)

1228 
	#XLookupN⁄e
 1

	)

1229 
	#XLookupCh¨s
 2

	)

1230 
	#XLookupKeySym
 3

	)

1231 
	#XLookupBŸh
 4

	)

1233 *
	tXVaNe°edLi°
;

1236 
XPoöãr
 
˛õ¡_d©a
;

1237 
XIMProc
 
ˇŒback
;

1238 } 
	tXIMCÆlback
;

1241 
XPoöãr
 
˛õ¡_d©a
;

1242 
XICProc
 
ˇŒback
;

1243 } 
	tXICCÆlback
;

1245 
	tXIMFìdback
;

1247 
	#XIMRevî£
 1L

	)

1248 
	#XIMUndîlöe
 (1L<<1)

	)

1249 
	#XIMHighlight
 (1L<<2)

	)

1250 
	#XIMPrim¨y
 (1L<<5)

	)

1251 
	#XIMSec⁄d¨y
 (1L<<6)

	)

1252 
	#XIMTîtüry
 (1L<<7)

	)

1253 
	#XIMVisibÀToF‹w¨d
 (1L<<8)

	)

1254 
	#XIMVisibÀToBackw‹d
 (1L<<9)

	)

1255 
	#XIMVisibÀToCíãr
 (1L<<10)

	)

1257 
	s_XIMText
 {

1258 
Àngth
;

1259 
XIMFìdback
 *
„edback
;

1260 
Boﬁ
 
ícodög_is_wch¨
;

1262 *
mu…i_byã
;

1263 
wch¨_t
 *
wide_ch¨
;

1264 } 
°rög
;

1265 } 
	tXIMText
;

1267 
	tXIMPªedôSèã
;

1269 
	#XIMPªedôUnKnown
 0L

	)

1270 
	#XIMPªedôE«bÀ
 1L

	)

1271 
	#XIMPªedôDißbÀ
 (1L<<1)

	)

1273 
	s_XIMPªedôSèãNŸifyCÆlbackSåu˘
 {

1274 
XIMPªedôSèã
 
°©e
;

1275 } 
	tXIMPªedôSèãNŸifyCÆlbackSåu˘
;

1277 
	tXIMRe£tSèã
;

1279 
	#XIMInôülSèã
 1L

	)

1280 
	#XIMPª£rveSèã
 (1L<<1)

	)

1282 
	tXIMSåögC⁄vîsi⁄Fìdback
;

1284 
	#XIMSåögC⁄vîsi⁄Le·Edge
 (0x00000001)

	)

1285 
	#XIMSåögC⁄vîsi⁄RightEdge
 (0x00000002)

	)

1286 
	#XIMSåögC⁄vîsi⁄T›Edge
 (0x00000004)

	)

1287 
	#XIMSåögC⁄vîsi⁄BŸtomEdge
 (0x00000008)

	)

1288 
	#XIMSåögC⁄vîsi⁄C⁄˚Æed
 (0x00000010)

	)

1289 
	#XIMSåögC⁄vîsi⁄Wøµed
 (0x00000020)

	)

1291 
	s_XIMSåögC⁄vîsi⁄Text
 {

1292 
Àngth
;

1293 
XIMSåögC⁄vîsi⁄Fìdback
 *
„edback
;

1294 
Boﬁ
 
ícodög_is_wch¨
;

1296 *
mbs
;

1297 
wch¨_t
 *
wcs
;

1298 } 
°rög
;

1299 } 
	tXIMSåögC⁄vîsi⁄Text
;

1301 
	tXIMSåögC⁄vîsi⁄Posôi⁄
;

1303 
	tXIMSåögC⁄vîsi⁄Ty≥
;

1305 
	#XIMSåögC⁄vîsi⁄Buf„r
 (0x0001)

	)

1306 
	#XIMSåögC⁄vîsi⁄Löe
 (0x0002)

	)

1307 
	#XIMSåögC⁄vîsi⁄W‹d
 (0x0003)

	)

1308 
	#XIMSåögC⁄vîsi⁄Ch¨
 (0x0004)

	)

1310 
	tXIMSåögC⁄vîsi⁄O≥øti⁄
;

1312 
	#XIMSåögC⁄vîsi⁄Sub°ôuti⁄
 (0x0001)

	)

1313 
	#XIMSåögC⁄vîsi⁄RërõvÆ
 (0x0002)

	)

1316 
XIMF‹w¨dCh¨
, 
XIMBackw¨dCh¨
,

1317 
XIMF‹w¨dW‹d
, 
XIMBackw¨dW‹d
,

1318 
XIMC¨ëUp
, 
XIMC¨ëDown
,

1319 
XIMNextLöe
, 
XIMPªviousLöe
,

1320 
XIMLöeSèπ
, 
XIMLöeEnd
,

1321 
XIMAbsﬁuãPosôi⁄
,

1322 
XIMD⁄tCh™ge


1323 } 
	tXIMC¨ëDúe˘i⁄
;

1325 
	s_XIMSåögC⁄vîsi⁄CÆlbackSåu˘
 {

1326 
XIMSåögC⁄vîsi⁄Posôi⁄
 
posôi⁄
;

1327 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1328 
XIMSåögC⁄vîsi⁄O≥øti⁄
 
›î©i⁄
;

1329 
Á˘‹
;

1330 
XIMSåögC⁄vîsi⁄Text
 *
ãxt
;

1331 } 
	tXIMSåögC⁄vîsi⁄CÆlbackSåu˘
;

1333 
	s_XIMPªedôDøwCÆlbackSåu˘
 {

1334 
ˇªt
;

1335 
chg_fú°
;

1336 
chg_Àngth
;

1337 
XIMText
 *
ãxt
;

1338 } 
	tXIMPªedôDøwCÆlbackSåu˘
;

1341 
XIMIsInvisibÀ
,

1342 
XIMIsPrim¨y
,

1343 
XIMIsSec⁄d¨y


1344 } 
	tXIMC¨ëStyÀ
;

1346 
	s_XIMPªedôC¨ëCÆlbackSåu˘
 {

1347 
posôi⁄
;

1348 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1349 
XIMC¨ëStyÀ
 
°yÀ
;

1350 } 
	tXIMPªedôC¨ëCÆlbackSåu˘
;

1353 
XIMTextTy≥
,

1354 
XIMBôm≠Ty≥


1355 } 
	tXIMSètusD©aTy≥
;

1357 
	s_XIMSètusDøwCÆlbackSåu˘
 {

1358 
XIMSètusD©aTy≥
 
ty≥
;

1360 
XIMText
 *
ãxt
;

1361 
Pixm≠
 
bôm≠
;

1362 } 
d©a
;

1363 } 
	tXIMSètusDøwCÆlbackSåu˘
;

1365 
	s_XIMHŸKeyTriggî
 {

1366 
KeySym
 
keysym
;

1367 
modifõr
;

1368 
modifõr_mask
;

1369 } 
	tXIMHŸKeyTriggî
;

1371 
	s_XIMHŸKeyTriggîs
 {

1372 
num_hŸ_key
;

1373 
XIMHŸKeyTriggî
 *
key
;

1374 } 
	tXIMHŸKeyTriggîs
;

1376 
	tXIMHŸKeySèã
;

1378 
	#XIMHŸKeySèãON
 (0x0001L)

	)

1379 
	#XIMHŸKeySèãOFF
 (0x0002L)

	)

1382 
cou¡_vÆues
;

1383 **
suµ‹ãd_vÆues
;

1384 } 
	tXIMVÆuesLi°
;

1386 
_XFUNCPROTOBEGIN


1388 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
_XLIBINT_
)

1389 
	#_Xdebug
 (*
_Xdebug_p
)

	)

1392 
_Xdebug
;

1394 
XF⁄tSåu˘
 *
	`XLﬂdQuîyF⁄t
(

1395 
Di•œy
* ,

1396 
_Xc⁄°
 *

1399 
XF⁄tSåu˘
 *
	`XQuîyF⁄t
(

1400 
Di•œy
* ,

1401 
XID


1405 
XTimeCo‹d
 *
	`XGëMŸi⁄Evíts
(

1406 
Di•œy
* ,

1407 
Wödow
 ,

1408 
Time
 ,

1409 
Time
 ,

1413 
XModifõrKeym≠
 *
	`XDñëeModifõrm≠E¡ry
(

1414 
XModifõrKeym≠
* ,

1415 #i‡
NìdWidePrŸŸy≥s


1418 
KeyCode
 ,

1423 
XModifõrKeym≠
 *
	`XGëModifõrM≠pög
(

1424 
Di•œy
*

1427 
XModifõrKeym≠
 *
	`XIn£πModifõrm≠E¡ry
(

1428 
XModifõrKeym≠
* ,

1429 #i‡
NìdWidePrŸŸy≥s


1432 
KeyCode
 ,

1437 
XModifõrKeym≠
 *
	`XNewModifõrm≠
(

1441 
XImage
 *
	`XCª©eImage
(

1442 
Di•œy
* ,

1443 
VisuÆ
* ,

1453 
Sètus
 
	`XInôImage
(

1454 
XImage
*

1456 
XImage
 *
	`XGëImage
(

1457 
Di•œy
* ,

1458 
DøwabÀ
 ,

1466 
XImage
 *
	`XGëSubImage
(

1467 
Di•œy
* ,

1468 
DøwabÀ
 ,

1475 
XImage
* ,

1483 
Di•œy
 *
	`XO≥nDi•œy
(

1484 
_Xc⁄°
 *

1487 
	`XrmInôülize
(

1491 *
	`XFëchByãs
(

1492 
Di•œy
* ,

1495 *
	`XFëchBuf„r
(

1496 
Di•œy
* ,

1500 *
	`XGëAtomName
(

1501 
Di•œy
* ,

1502 
Atom


1504 
Sètus
 
	`XGëAtomNames
(

1505 
Di•œy
* ,

1506 
Atom
* ,

1510 *
	`XGëDeÁu…
(

1511 
Di•œy
* ,

1512 
_Xc⁄°
 * ,

1513 
_Xc⁄°
 *

1515 *
	`XDi•œyName
(

1516 
_Xc⁄°
 *

1518 *
	`XKeysymToSåög
(

1519 
KeySym


1522 (*
	$XSynchr⁄ize
(

1523 
Di•œy
* ,

1524 
Boﬁ


1526 
Di•œy
*

1528 (*
	`XSëA·îFun˘i⁄
(

1529 
Di•œy
* ,

1531 
Di•œy
*

1534 
Di•œy
*

1536 
Atom
 
	`XI¡înAtom
(

1537 
Di•œy
* ,

1538 
_Xc⁄°
 * ,

1539 
Boﬁ


1541 
Sètus
 
	`XI¡înAtoms
(

1542 
Di•œy
* ,

1545 
Boﬁ
 ,

1546 
Atom
*

1548 
Cﬁ‹m≠
 
	`XC›yCﬁ‹m≠AndFªe
(

1549 
Di•œy
* ,

1550 
Cﬁ‹m≠


1552 
Cﬁ‹m≠
 
	`XCª©eCﬁ‹m≠
(

1553 
Di•œy
* ,

1554 
Wödow
 ,

1555 
VisuÆ
* ,

1558 
Curs‹
 
	`XCª©ePixm≠Curs‹
(

1559 
Di•œy
* ,

1560 
Pixm≠
 ,

1561 
Pixm≠
 ,

1562 
XCﬁ‹
* ,

1563 
XCﬁ‹
* ,

1567 
Curs‹
 
	`XCª©eGlyphCurs‹
(

1568 
Di•œy
* ,

1569 
F⁄t
 ,

1570 
F⁄t
 ,

1573 
XCﬁ‹
 
_Xc⁄°
 * ,

1574 
XCﬁ‹
 
_Xc⁄°
 *

1576 
Curs‹
 
	`XCª©eF⁄tCurs‹
(

1577 
Di•œy
* ,

1580 
F⁄t
 
	`XLﬂdF⁄t
(

1581 
Di•œy
* ,

1582 
_Xc⁄°
 *

1584 
GC
 
	`XCª©eGC
(

1585 
Di•œy
* ,

1586 
DøwabÀ
 ,

1588 
XGCVÆues
*

1590 
GC⁄ãxt
 
	`XGC⁄ãxtFromGC
(

1591 
GC


1593 
	`XFlushGC
(

1594 
Di•œy
* ,

1595 
GC


1597 
Pixm≠
 
	`XCª©ePixm≠
(

1598 
Di•œy
* ,

1599 
DøwabÀ
 ,

1604 
Pixm≠
 
	`XCª©eBôm≠FromD©a
(

1605 
Di•œy
* ,

1606 
DøwabÀ
 ,

1607 
_Xc⁄°
 * ,

1611 
Pixm≠
 
	`XCª©ePixm≠FromBôm≠D©a
(

1612 
Di•œy
* ,

1613 
DøwabÀ
 ,

1621 
Wödow
 
	`XCª©eSim∂eWödow
(

1622 
Di•œy
* ,

1623 
Wödow
 ,

1632 
Wödow
 
	`XGëSñe˘i⁄Ow√r
(

1633 
Di•œy
* ,

1634 
Atom


1636 
Wödow
 
	`XCª©eWödow
(

1637 
Di•œy
* ,

1638 
Wödow
 ,

1646 
VisuÆ
* ,

1648 
XSëWödowAâribuãs
*

1650 
Cﬁ‹m≠
 *
	`XLi°In°ÆÀdCﬁ‹m≠s
(

1651 
Di•œy
* ,

1652 
Wödow
 ,

1655 **
	`XLi°F⁄ts
(

1656 
Di•œy
* ,

1657 
_Xc⁄°
 * ,

1661 **
	`XLi°F⁄tsWôhInfo
(

1662 
Di•œy
* ,

1663 
_Xc⁄°
 * ,

1666 
XF⁄tSåu˘
**

1668 **
	`XGëF⁄tP©h
(

1669 
Di•œy
* ,

1672 **
	`XLi°Exãnsi⁄s
(

1673 
Di•œy
* ,

1676 
Atom
 *
	`XLi°Pr›îtõs
(

1677 
Di•œy
* ,

1678 
Wödow
 ,

1681 
XHo°Addªss
 *
	`XLi°Ho°s
(

1682 
Di•œy
* ,

1684 
Boﬁ
*

1686 
_X_DEPRECATED


1687 
KeySym
 
	`XKeycodeToKeysym
(

1688 
Di•œy
* ,

1689 #i‡
NìdWidePrŸŸy≥s


1692 
KeyCode
 ,

1696 
KeySym
 
	`XLookupKeysym
(

1697 
XKeyEvít
* ,

1700 
KeySym
 *
	`XGëKeybﬂrdM≠pög
(

1701 
Di•œy
* ,

1702 #i‡
NìdWidePrŸŸy≥s


1705 
KeyCode
 ,

1710 
KeySym
 
	`XSåögToKeysym
(

1711 
_Xc⁄°
 *

1713 
	`XMaxReque°Size
(

1714 
Di•œy
*

1716 
	`XExãndedMaxReque°Size
(

1717 
Di•œy
*

1719 *
	`XResour˚M™agîSåög
(

1720 
Di•œy
*

1722 *
	`XS¸ìnResour˚Såög
(

1723 
S¸ìn
*

1725 
	`XDi•œyMŸi⁄Buf„rSize
(

1726 
Di•œy
*

1728 
VisuÆID
 
	`XVisuÆIDFromVisuÆ
(

1729 
VisuÆ
*

1734 
Sètus
 
	`XInôThªads
(

1738 
	`XLockDi•œy
(

1739 
Di•œy
*

1742 
	`XU∆ockDi•œy
(

1743 
Di•œy
*

1748 
XExtCodes
 *
	`XInôExãnsi⁄
(

1749 
Di•œy
* ,

1750 
_Xc⁄°
 *

1753 
XExtCodes
 *
	`XAddExãnsi⁄
(

1754 
Di•œy
*

1756 
XExtD©a
 *
	`XFödOnExãnsi⁄Li°
(

1757 
XExtD©a
** ,

1760 
XExtD©a
 **
	`XEHódOfExãnsi⁄Li°
(

1761 
XED©aObje˘


1765 
Wödow
 
	`XRoŸWödow
(

1766 
Di•œy
* ,

1769 
Wödow
 
	`XDeÁu…RoŸWödow
(

1770 
Di•œy
*

1772 
Wödow
 
	`XRoŸWödowOfS¸ìn
(

1773 
S¸ìn
*

1775 
VisuÆ
 *
	`XDeÁu…VisuÆ
(

1776 
Di•œy
* ,

1779 
VisuÆ
 *
	`XDeÁu…VisuÆOfS¸ìn
(

1780 
S¸ìn
*

1782 
GC
 
	`XDeÁu…GC
(

1783 
Di•œy
* ,

1786 
GC
 
	`XDeÁu…GCOfS¸ìn
(

1787 
S¸ìn
*

1789 
	`XBœckPixñ
(

1790 
Di•œy
* ,

1793 
	`XWhôePixñ
(

1794 
Di•œy
* ,

1797 
	`XAŒPœ√s
(

1800 
	`XBœckPixñOfS¸ìn
(

1801 
S¸ìn
*

1803 
	`XWhôePixñOfS¸ìn
(

1804 
S¸ìn
*

1806 
	`XNextReque°
(

1807 
Di•œy
*

1809 
	`XLa°KnownReque°Pro˚s£d
(

1810 
Di•œy
*

1812 *
	`XSîvîVíd‹
(

1813 
Di•œy
*

1815 *
	`XDi•œySåög
(

1816 
Di•œy
*

1818 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠
(

1819 
Di•œy
* ,

1822 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠OfS¸ìn
(

1823 
S¸ìn
*

1825 
Di•œy
 *
	`XDi•œyOfS¸ìn
(

1826 
S¸ìn
*

1828 
S¸ìn
 *
	`XS¸ìnOfDi•œy
(

1829 
Di•œy
* ,

1832 
S¸ìn
 *
	`XDeÁu…S¸ìnOfDi•œy
(

1833 
Di•œy
*

1835 
	`XEvítMaskOfS¸ìn
(

1836 
S¸ìn
*

1839 
	`XS¸ìnNumbîOfS¸ìn
(

1840 
S¸ìn
*

1843 (*
	tXEº‹H™dÀr
) (

1844 
	tDi•œy
* ,

1845 
	tXEº‹Evít
*

1848 
XEº‹H™dÀr
 
	`XSëEº‹H™dÀr
 (

1849 
XEº‹H™dÀr


1853 (*
	tXIOEº‹H™dÀr
) (

1854 
	tDi•œy
*

1857 
XIOEº‹H™dÀr
 
	`XSëIOEº‹H™dÀr
 (

1858 
XIOEº‹H™dÀr


1862 
XPixm≠F‹m©VÆues
 *
	`XLi°Pixm≠F‹m©s
(

1863 
Di•œy
* ,

1866 *
	`XLi°Dïths
(

1867 
Di•œy
* ,

1874 
Sètus
 
	`XRec⁄figuªWMWödow
(

1875 
Di•œy
* ,

1876 
Wödow
 ,

1879 
XWödowCh™ges
*

1882 
Sètus
 
	`XGëWMPrŸocﬁs
(

1883 
Di•œy
* ,

1884 
Wödow
 ,

1885 
Atom
** ,

1888 
Sètus
 
	`XSëWMPrŸocﬁs
(

1889 
Di•œy
* ,

1890 
Wödow
 ,

1891 
Atom
* ,

1894 
Sètus
 
	`XIc⁄ifyWödow
(

1895 
Di•œy
* ,

1896 
Wödow
 ,

1899 
Sètus
 
	`XWôhdøwWödow
(

1900 
Di•œy
* ,

1901 
Wödow
 ,

1904 
Sètus
 
	`XGëComm™d
(

1905 
Di•œy
* ,

1906 
Wödow
 ,

1910 
Sètus
 
	`XGëWMCﬁ‹m≠Wödows
(

1911 
Di•œy
* ,

1912 
Wödow
 ,

1913 
Wödow
** ,

1916 
Sètus
 
	`XSëWMCﬁ‹m≠Wödows
(

1917 
Di•œy
* ,

1918 
Wödow
 ,

1919 
Wödow
* ,

1922 
	`XFªeSåögLi°
(

1925 
	`XSëTønsõ¡F‹Höt
(

1926 
Di•œy
* ,

1927 
Wödow
 ,

1928 
Wödow


1933 
	`XA˘iv©eS¸ìnSavî
(

1934 
Di•œy
*

1937 
	`XAddHo°
(

1938 
Di•œy
* ,

1939 
XHo°Addªss
*

1942 
	`XAddHo°s
(

1943 
Di•œy
* ,

1944 
XHo°Addªss
* ,

1948 
	`XAddToExãnsi⁄Li°
(

1949 
_XExtD©a
** ,

1950 
XExtD©a
*

1953 
	`XAddToSaveSë
(

1954 
Di•œy
* ,

1955 
Wödow


1958 
Sètus
 
	`XAŒocCﬁ‹
(

1959 
Di•œy
* ,

1960 
Cﬁ‹m≠
 ,

1961 
XCﬁ‹
*

1964 
Sètus
 
	`XAŒocCﬁ‹Cñls
(

1965 
Di•œy
* ,

1966 
Cﬁ‹m≠
 ,

1967 
Boﬁ
 ,

1974 
Sètus
 
	`XAŒocCﬁ‹Pœ√s
(

1975 
Di•œy
* ,

1976 
Cﬁ‹m≠
 ,

1977 
Boﬁ
 ,

1988 
Sètus
 
	`XAŒocNamedCﬁ‹
(

1989 
Di•œy
* ,

1990 
Cﬁ‹m≠
 ,

1991 
_Xc⁄°
 * ,

1992 
XCﬁ‹
* ,

1993 
XCﬁ‹
*

1996 
	`XAŒowEvíts
(

1997 
Di•œy
* ,

1999 
Time


2002 
	`XAutoRïótOff
(

2003 
Di•œy
*

2006 
	`XAutoRïótOn
(

2007 
Di•œy
*

2010 
	`XBñl
(

2011 
Di•œy
* ,

2015 
	`XBôm≠BôOrdî
(

2016 
Di•œy
*

2019 
	`XBôm≠Pad
(

2020 
Di•œy
*

2023 
	`XBôm≠Unô
(

2024 
Di•œy
*

2027 
	`XCñlsOfS¸ìn
(

2028 
S¸ìn
*

2031 
	`XCh™geA˘ivePoöãrGøb
(

2032 
Di•œy
* ,

2034 
Curs‹
 ,

2035 
Time


2038 
	`XCh™geGC
(

2039 
Di•œy
* ,

2040 
GC
 ,

2042 
XGCVÆues
*

2045 
	`XCh™geKeybﬂrdC⁄åﬁ
(

2046 
Di•œy
* ,

2048 
XKeybﬂrdC⁄åﬁ
*

2051 
	`XCh™geKeybﬂrdM≠pög
(

2052 
Di•œy
* ,

2055 
KeySym
* ,

2059 
	`XCh™gePoöãrC⁄åﬁ
(

2060 
Di•œy
* ,

2061 
Boﬁ
 ,

2062 
Boﬁ
 ,

2068 
	`XCh™gePr›îty
(

2069 
Di•œy
* ,

2070 
Wödow
 ,

2071 
Atom
 ,

2072 
Atom
 ,

2075 
_Xc⁄°
 * ,

2079 
	`XCh™geSaveSë
(

2080 
Di•œy
* ,

2081 
Wödow
 ,

2085 
	`XCh™geWödowAâribuãs
(

2086 
Di•œy
* ,

2087 
Wödow
 ,

2089 
XSëWödowAâribuãs
*

2092 
Boﬁ
 
	`XCheckIfEvít
(

2093 
Di•œy
* ,

2094 
XEvít
* ,

2095 
	$Boﬁ
 (*) (

2096 
Di•œy
* ,

2097 
XEvít
* ,

2098 
XPoöãr


2100 
XPoöãr


2103 
Boﬁ
 
	`XCheckMaskEvít
(

2104 
Di•œy
* ,

2106 
XEvít
*

2109 
Boﬁ
 
	`XCheckTy≥dEvít
(

2110 
Di•œy
* ,

2112 
XEvít
*

2115 
Boﬁ
 
	`XCheckTy≥dWödowEvít
(

2116 
Di•œy
* ,

2117 
Wödow
 ,

2119 
XEvít
*

2122 
Boﬁ
 
	`XCheckWödowEvít
(

2123 
Di•œy
* ,

2124 
Wödow
 ,

2126 
XEvít
*

2129 
	`XCúcuœãSubwödows
(

2130 
Di•œy
* ,

2131 
Wödow
 ,

2135 
	`XCúcuœãSubwödowsDown
(

2136 
Di•œy
* ,

2137 
Wödow


2140 
	`XCúcuœãSubwödowsUp
(

2141 
Di•œy
* ,

2142 
Wödow


2145 
	`XCÀ¨Aªa
(

2146 
Di•œy
* ,

2147 
Wödow
 ,

2152 
Boﬁ


2155 
	`XCÀ¨Wödow
(

2156 
Di•œy
* ,

2157 
Wödow


2160 
	`XClo£Di•œy
(

2161 
Di•œy
*

2164 
	`XC⁄figuªWödow
(

2165 
Di•œy
* ,

2166 
Wödow
 ,

2168 
XWödowCh™ges
*

2171 
	`XC⁄√˘i⁄Numbî
(

2172 
Di•œy
*

2175 
	`XC⁄vîtSñe˘i⁄
(

2176 
Di•œy
* ,

2177 
Atom
 ,

2178 
Atom
 ,

2179 
Atom
 ,

2180 
Wödow
 ,

2181 
Time


2184 
	`XC›yAªa
(

2185 
Di•œy
* ,

2186 
DøwabÀ
 ,

2187 
DøwabÀ
 ,

2188 
GC
 ,

2197 
	`XC›yGC
(

2198 
Di•œy
* ,

2199 
GC
 ,

2201 
GC


2204 
	`XC›yPœ√
(

2205 
Di•œy
* ,

2206 
DøwabÀ
 ,

2207 
DøwabÀ
 ,

2208 
GC
 ,

2218 
	`XDeÁu…Dïth
(

2219 
Di•œy
* ,

2223 
	`XDeÁu…DïthOfS¸ìn
(

2224 
S¸ìn
*

2227 
	`XDeÁu…S¸ìn
(

2228 
Di•œy
*

2231 
	`XDeföeCurs‹
(

2232 
Di•œy
* ,

2233 
Wödow
 ,

2234 
Curs‹


2237 
	`XDñëePr›îty
(

2238 
Di•œy
* ,

2239 
Wödow
 ,

2240 
Atom


2243 
	`XDe°royWödow
(

2244 
Di•œy
* ,

2245 
Wödow


2248 
	`XDe°roySubwödows
(

2249 
Di•œy
* ,

2250 
Wödow


2253 
	`XD€sBackögSt‹e
(

2254 
S¸ìn
*

2257 
Boﬁ
 
	`XD€sSaveUndîs
(

2258 
S¸ìn
*

2261 
	`XDißbÀAc˚ssC⁄åﬁ
(

2262 
Di•œy
*

2266 
	`XDi•œyCñls
(

2267 
Di•œy
* ,

2271 
	`XDi•œyHeight
(

2272 
Di•œy
* ,

2276 
	`XDi•œyHeightMM
(

2277 
Di•œy
* ,

2281 
	`XDi•œyKeycodes
(

2282 
Di•œy
* ,

2287 
	`XDi•œyPœ√s
(

2288 
Di•œy
* ,

2292 
	`XDi•œyWidth
(

2293 
Di•œy
* ,

2297 
	`XDi•œyWidthMM
(

2298 
Di•œy
* ,

2302 
	`XDøwArc
(

2303 
Di•œy
* ,

2304 
DøwabÀ
 ,

2305 
GC
 ,

2314 
	`XDøwArcs
(

2315 
Di•œy
* ,

2316 
DøwabÀ
 ,

2317 
GC
 ,

2318 
XArc
* ,

2322 
	`XDøwImageSåög
(

2323 
Di•œy
* ,

2324 
DøwabÀ
 ,

2325 
GC
 ,

2328 
_Xc⁄°
 * ,

2332 
	`XDøwImageSåög16
(

2333 
Di•œy
* ,

2334 
DøwabÀ
 ,

2335 
GC
 ,

2338 
_Xc⁄°
 
XCh¨2b
* ,

2342 
	`XDøwLöe
(

2343 
Di•œy
* ,

2344 
DøwabÀ
 ,

2345 
GC
 ,

2352 
	`XDøwLöes
(

2353 
Di•œy
* ,

2354 
DøwabÀ
 ,

2355 
GC
 ,

2356 
XPoöt
* ,

2361 
	`XDøwPoöt
(

2362 
Di•œy
* ,

2363 
DøwabÀ
 ,

2364 
GC
 ,

2369 
	`XDøwPoöts
(

2370 
Di•œy
* ,

2371 
DøwabÀ
 ,

2372 
GC
 ,

2373 
XPoöt
* ,

2378 
	`XDøwRe˘™gÀ
(

2379 
Di•œy
* ,

2380 
DøwabÀ
 ,

2381 
GC
 ,

2388 
	`XDøwRe˘™gÀs
(

2389 
Di•œy
* ,

2390 
DøwabÀ
 ,

2391 
GC
 ,

2392 
XRe˘™gÀ
* ,

2396 
	`XDøwSegmíts
(

2397 
Di•œy
* ,

2398 
DøwabÀ
 ,

2399 
GC
 ,

2400 
XSegmít
* ,

2404 
	`XDøwSåög
(

2405 
Di•œy
* ,

2406 
DøwabÀ
 ,

2407 
GC
 ,

2410 
_Xc⁄°
 * ,

2414 
	`XDøwSåög16
(

2415 
Di•œy
* ,

2416 
DøwabÀ
 ,

2417 
GC
 ,

2420 
_Xc⁄°
 
XCh¨2b
* ,

2424 
	`XDøwText
(

2425 
Di•œy
* ,

2426 
DøwabÀ
 ,

2427 
GC
 ,

2430 
XTextIãm
* ,

2434 
	`XDøwText16
(

2435 
Di•œy
* ,

2436 
DøwabÀ
 ,

2437 
GC
 ,

2440 
XTextIãm16
* ,

2444 
	`XE«bÀAc˚ssC⁄åﬁ
(

2445 
Di•œy
*

2448 
	`XEvítsQueued
(

2449 
Di•œy
* ,

2453 
Sètus
 
	`XFëchName
(

2454 
Di•œy
* ,

2455 
Wödow
 ,

2459 
	`XFûlArc
(

2460 
Di•œy
* ,

2461 
DøwabÀ
 ,

2462 
GC
 ,

2471 
	`XFûlArcs
(

2472 
Di•œy
* ,

2473 
DøwabÀ
 ,

2474 
GC
 ,

2475 
XArc
* ,

2479 
	`XFûlPﬁyg⁄
(

2480 
Di•œy
* ,

2481 
DøwabÀ
 ,

2482 
GC
 ,

2483 
XPoöt
* ,

2489 
	`XFûlRe˘™gÀ
(

2490 
Di•œy
* ,

2491 
DøwabÀ
 ,

2492 
GC
 ,

2499 
	`XFûlRe˘™gÀs
(

2500 
Di•œy
* ,

2501 
DøwabÀ
 ,

2502 
GC
 ,

2503 
XRe˘™gÀ
* ,

2507 
	`XFlush
(

2508 
Di•œy
*

2511 
	`XF‹˚S¸ìnSavî
(

2512 
Di•œy
* ,

2516 
	`XFªe
(

2520 
	`XFªeCﬁ‹m≠
(

2521 
Di•œy
* ,

2522 
Cﬁ‹m≠


2525 
	`XFªeCﬁ‹s
(

2526 
Di•œy
* ,

2527 
Cﬁ‹m≠
 ,

2533 
	`XFªeCurs‹
(

2534 
Di•œy
* ,

2535 
Curs‹


2538 
	`XFªeExãnsi⁄Li°
(

2542 
	`XFªeF⁄t
(

2543 
Di•œy
* ,

2544 
XF⁄tSåu˘
*

2547 
	`XFªeF⁄tInfo
(

2549 
XF⁄tSåu˘
* ,

2553 
	`XFªeF⁄tNames
(

2557 
	`XFªeF⁄tP©h
(

2561 
	`XFªeGC
(

2562 
Di•œy
* ,

2563 
GC


2566 
	`XFªeModifõrm≠
(

2567 
XModifõrKeym≠
*

2570 
	`XFªePixm≠
(

2571 
Di•œy
* ,

2572 
Pixm≠


2575 
	`XGeomëry
(

2576 
Di•œy
* ,

2578 
_Xc⁄°
 * ,

2579 
_Xc⁄°
 * ,

2591 
	`XGëEº‹D©aba£Text
(

2592 
Di•œy
* ,

2593 
_Xc⁄°
 * ,

2594 
_Xc⁄°
 * ,

2595 
_Xc⁄°
 * ,

2600 
	`XGëEº‹Text
(

2601 
Di•œy
* ,

2607 
Boﬁ
 
	`XGëF⁄tPr›îty
(

2608 
XF⁄tSåu˘
* ,

2609 
Atom
 ,

2613 
Sètus
 
	`XGëGCVÆues
(

2614 
Di•œy
* ,

2615 
GC
 ,

2617 
XGCVÆues
*

2620 
Sètus
 
	`XGëGeomëry
(

2621 
Di•œy
* ,

2622 
DøwabÀ
 ,

2623 
Wödow
* ,

2632 
Sètus
 
	`XGëIc⁄Name
(

2633 
Di•œy
* ,

2634 
Wödow
 ,

2638 
	`XGëI≈utFocus
(

2639 
Di•œy
* ,

2640 
Wödow
* ,

2644 
	`XGëKeybﬂrdC⁄åﬁ
(

2645 
Di•œy
* ,

2646 
XKeybﬂrdSèã
*

2649 
	`XGëPoöãrC⁄åﬁ
(

2650 
Di•œy
* ,

2656 
	`XGëPoöãrM≠pög
(

2657 
Di•œy
* ,

2662 
	`XGëS¸ìnSavî
(

2663 
Di•œy
* ,

2670 
Sètus
 
	`XGëTønsõ¡F‹Höt
(

2671 
Di•œy
* ,

2672 
Wödow
 ,

2673 
Wödow
*

2676 
	`XGëWödowPr›îty
(

2677 
Di•œy
* ,

2678 
Wödow
 ,

2679 
Atom
 ,

2682 
Boﬁ
 ,

2683 
Atom
 ,

2684 
Atom
* ,

2691 
Sètus
 
	`XGëWödowAâribuãs
(

2692 
Di•œy
* ,

2693 
Wödow
 ,

2694 
XWödowAâribuãs
*

2697 
	`XGøbBuâ⁄
(

2698 
Di•œy
* ,

2701 
Wödow
 ,

2702 
Boﬁ
 ,

2706 
Wödow
 ,

2707 
Curs‹


2710 
	`XGøbKey
(

2711 
Di•œy
* ,

2714 
Wödow
 ,

2715 
Boﬁ
 ,

2720 
	`XGøbKeybﬂrd
(

2721 
Di•œy
* ,

2722 
Wödow
 ,

2723 
Boﬁ
 ,

2726 
Time


2729 
	`XGøbPoöãr
(

2730 
Di•œy
* ,

2731 
Wödow
 ,

2732 
Boﬁ
 ,

2736 
Wödow
 ,

2737 
Curs‹
 ,

2738 
Time


2741 
	`XGøbSîvî
(

2742 
Di•œy
*

2745 
	`XHeightMMOfS¸ìn
(

2746 
S¸ìn
*

2749 
	`XHeightOfS¸ìn
(

2750 
S¸ìn
*

2753 
	`XIfEvít
(

2754 
Di•œy
* ,

2755 
XEvít
* ,

2756 
	$Boﬁ
 (*) (

2757 
Di•œy
* ,

2758 
XEvít
* ,

2759 
XPoöãr


2761 
XPoöãr


2764 
	`XImageByãOrdî
(

2765 
Di•œy
*

2768 
	`XIn°ÆlCﬁ‹m≠
(

2769 
Di•œy
* ,

2770 
Cﬁ‹m≠


2773 
KeyCode
 
	`XKeysymToKeycode
(

2774 
Di•œy
* ,

2775 
KeySym


2778 
	`XKûlClõ¡
(

2779 
Di•œy
* ,

2780 
XID


2783 
Sètus
 
	`XLookupCﬁ‹
(

2784 
Di•œy
* ,

2785 
Cﬁ‹m≠
 ,

2786 
_Xc⁄°
 * ,

2787 
XCﬁ‹
* ,

2788 
XCﬁ‹
*

2791 
	`XLowîWödow
(

2792 
Di•œy
* ,

2793 
Wödow


2796 
	`XM≠Rai£d
(

2797 
Di•œy
* ,

2798 
Wödow


2801 
	`XM≠Subwödows
(

2802 
Di•œy
* ,

2803 
Wödow


2806 
	`XM≠Wödow
(

2807 
Di•œy
* ,

2808 
Wödow


2811 
	`XMaskEvít
(

2812 
Di•œy
* ,

2814 
XEvít
*

2817 
	`XMaxCm≠sOfS¸ìn
(

2818 
S¸ìn
*

2821 
	`XMöCm≠sOfS¸ìn
(

2822 
S¸ìn
*

2825 
	`XMoveResizeWödow
(

2826 
Di•œy
* ,

2827 
Wödow
 ,

2834 
	`XMoveWödow
(

2835 
Di•œy
* ,

2836 
Wödow
 ,

2841 
	`XNextEvít
(

2842 
Di•œy
* ,

2843 
XEvít
*

2846 
	`XNoOp
(

2847 
Di•œy
*

2850 
Sètus
 
	`XP¨£Cﬁ‹
(

2851 
Di•œy
* ,

2852 
Cﬁ‹m≠
 ,

2853 
_Xc⁄°
 * ,

2854 
XCﬁ‹
*

2857 
	`XP¨£Geomëry
(

2858 
_Xc⁄°
 * ,

2865 
	`XPìkEvít
(

2866 
Di•œy
* ,

2867 
XEvít
*

2870 
	`XPìkIfEvít
(

2871 
Di•œy
* ,

2872 
XEvít
* ,

2873 
	$Boﬁ
 (*) (

2874 
Di•œy
* ,

2875 
XEvít
* ,

2876 
XPoöãr


2878 
XPoöãr


2881 
	`XPídög
(

2882 
Di•œy
*

2885 
	`XPœ√sOfS¸ìn
(

2886 
S¸ìn
*

2889 
	`XPrŸocﬁRevisi⁄
(

2890 
Di•œy
*

2893 
	`XPrŸocﬁVîsi⁄
(

2894 
Di•œy
*

2898 
	`XPutBackEvít
(

2899 
Di•œy
* ,

2900 
XEvít
*

2903 
	`XPutImage
(

2904 
Di•œy
* ,

2905 
DøwabÀ
 ,

2906 
GC
 ,

2907 
XImage
* ,

2916 
	`XQLígth
(

2917 
Di•œy
*

2920 
Sètus
 
	`XQuîyBe°Curs‹
(

2921 
Di•œy
* ,

2922 
DøwabÀ
 ,

2929 
Sètus
 
	`XQuîyBe°Size
(

2930 
Di•œy
* ,

2932 
DøwabÀ
 ,

2939 
Sètus
 
	`XQuîyBe°Stù∂e
(

2940 
Di•œy
* ,

2941 
DøwabÀ
 ,

2948 
Sètus
 
	`XQuîyBe°Tûe
(

2949 
Di•œy
* ,

2950 
DøwabÀ
 ,

2957 
	`XQuîyCﬁ‹
(

2958 
Di•œy
* ,

2959 
Cﬁ‹m≠
 ,

2960 
XCﬁ‹
*

2963 
	`XQuîyCﬁ‹s
(

2964 
Di•œy
* ,

2965 
Cﬁ‹m≠
 ,

2966 
XCﬁ‹
* ,

2970 
Boﬁ
 
	`XQuîyExãnsi⁄
(

2971 
Di•œy
* ,

2972 
_Xc⁄°
 * ,

2978 
	`XQuîyKeym≠
(

2979 
Di•œy
* ,

2983 
Boﬁ
 
	`XQuîyPoöãr
(

2984 
Di•œy
* ,

2985 
Wödow
 ,

2986 
Wödow
* ,

2987 
Wödow
* ,

2995 
	`XQuîyTextExã¡s
(

2996 
Di•œy
* ,

2997 
XID
 ,

2998 
_Xc⁄°
 * ,

3003 
XCh¨Såu˘
*

3006 
	`XQuîyTextExã¡s16
(

3007 
Di•œy
* ,

3008 
XID
 ,

3009 
_Xc⁄°
 
XCh¨2b
* ,

3014 
XCh¨Såu˘
*

3017 
Sètus
 
	`XQuîyTªe
(

3018 
Di•œy
* ,

3019 
Wödow
 ,

3020 
Wödow
* ,

3021 
Wödow
* ,

3022 
Wödow
** ,

3026 
	`XRai£Wödow
(

3027 
Di•œy
* ,

3028 
Wödow


3031 
	`XRódBôm≠Fûe
(

3032 
Di•œy
* ,

3033 
DøwabÀ
 ,

3034 
_Xc⁄°
 * ,

3037 
Pixm≠
* ,

3042 
	`XRódBôm≠FûeD©a
(

3043 
_Xc⁄°
 * ,

3051 
	`XRebödKeysym
(

3052 
Di•œy
* ,

3053 
KeySym
 ,

3054 
KeySym
* ,

3056 
_Xc⁄°
 * ,

3060 
	`XRecﬁ‹Curs‹
(

3061 
Di•œy
* ,

3062 
Curs‹
 ,

3063 
XCﬁ‹
* ,

3064 
XCﬁ‹
*

3067 
	`XRe‰eshKeybﬂrdM≠pög
(

3068 
XM≠pögEvít
*

3071 
	`XRemoveFromSaveSë
(

3072 
Di•œy
* ,

3073 
Wödow


3076 
	`XRemoveHo°
(

3077 
Di•œy
* ,

3078 
XHo°Addªss
*

3081 
	`XRemoveHo°s
(

3082 
Di•œy
* ,

3083 
XHo°Addªss
* ,

3087 
	`XRï¨ítWödow
(

3088 
Di•œy
* ,

3089 
Wödow
 ,

3090 
Wödow
 ,

3095 
	`XRe£tS¸ìnSavî
(

3096 
Di•œy
*

3099 
	`XResizeWödow
(

3100 
Di•œy
* ,

3101 
Wödow
 ,

3106 
	`XRe°ackWödows
(

3107 
Di•œy
* ,

3108 
Wödow
* ,

3112 
	`XRŸ©eBuf„rs
(

3113 
Di•œy
* ,

3117 
	`XRŸ©eWödowPr›îtõs
(

3118 
Di•œy
* ,

3119 
Wödow
 ,

3120 
Atom
* ,

3125 
	`XS¸ìnCou¡
(

3126 
Di•œy
*

3129 
	`XSñe˘I≈ut
(

3130 
Di•œy
* ,

3131 
Wödow
 ,

3135 
Sètus
 
	`XSídEvít
(

3136 
Di•œy
* ,

3137 
Wödow
 ,

3138 
Boﬁ
 ,

3140 
XEvít
*

3143 
	`XSëAc˚ssC⁄åﬁ
(

3144 
Di•œy
* ,

3148 
	`XSëArcMode
(

3149 
Di•œy
* ,

3150 
GC
 ,

3154 
	`XSëBackground
(

3155 
Di•œy
* ,

3156 
GC
 ,

3160 
	`XSëClùMask
(

3161 
Di•œy
* ,

3162 
GC
 ,

3163 
Pixm≠


3166 
	`XSëClùOrigö
(

3167 
Di•œy
* ,

3168 
GC
 ,

3173 
	`XSëClùRe˘™gÀs
(

3174 
Di•œy
* ,

3175 
GC
 ,

3178 
XRe˘™gÀ
* ,

3183 
	`XSëClo£DownMode
(

3184 
Di•œy
* ,

3188 
	`XSëComm™d
(

3189 
Di•œy
* ,

3190 
Wödow
 ,

3195 
	`XSëDashes
(

3196 
Di•œy
* ,

3197 
GC
 ,

3199 
_Xc⁄°
 * ,

3203 
	`XSëFûlRuÀ
(

3204 
Di•œy
* ,

3205 
GC
 ,

3209 
	`XSëFûlStyÀ
(

3210 
Di•œy
* ,

3211 
GC
 ,

3215 
	`XSëF⁄t
(

3216 
Di•œy
* ,

3217 
GC
 ,

3218 
F⁄t


3221 
	`XSëF⁄tP©h
(

3222 
Di•œy
* ,

3227 
	`XSëF‹eground
(

3228 
Di•œy
* ,

3229 
GC
 ,

3233 
	`XSëFun˘i⁄
(

3234 
Di•œy
* ,

3235 
GC
 ,

3239 
	`XSëGøphicsExposuªs
(

3240 
Di•œy
* ,

3241 
GC
 ,

3242 
Boﬁ


3245 
	`XSëIc⁄Name
(

3246 
Di•œy
* ,

3247 
Wödow
 ,

3248 
_Xc⁄°
 *

3251 
	`XSëI≈utFocus
(

3252 
Di•œy
* ,

3253 
Wödow
 ,

3255 
Time


3258 
	`XSëLöeAâribuãs
(

3259 
Di•œy
* ,

3260 
GC
 ,

3267 
	`XSëModifõrM≠pög
(

3268 
Di•œy
* ,

3269 
XModifõrKeym≠
*

3272 
	`XSëPœ√Mask
(

3273 
Di•œy
* ,

3274 
GC
 ,

3278 
	`XSëPoöãrM≠pög
(

3279 
Di•œy
* ,

3280 
_Xc⁄°
 * ,

3284 
	`XSëS¸ìnSavî
(

3285 
Di•œy
* ,

3292 
	`XSëSñe˘i⁄Ow√r
(

3293 
Di•œy
* ,

3294 
Atom
 ,

3295 
Wödow
 ,

3296 
Time


3299 
	`XSëSèã
(

3300 
Di•œy
* ,

3301 
GC
 ,

3308 
	`XSëStù∂e
(

3309 
Di•œy
* ,

3310 
GC
 ,

3311 
Pixm≠


3314 
	`XSëSubwödowMode
(

3315 
Di•œy
* ,

3316 
GC
 ,

3320 
	`XSëTSOrigö
(

3321 
Di•œy
* ,

3322 
GC
 ,

3327 
	`XSëTûe
(

3328 
Di•œy
* ,

3329 
GC
 ,

3330 
Pixm≠


3333 
	`XSëWödowBackground
(

3334 
Di•œy
* ,

3335 
Wödow
 ,

3339 
	`XSëWödowBackgroundPixm≠
(

3340 
Di•œy
* ,

3341 
Wödow
 ,

3342 
Pixm≠


3345 
	`XSëWödowB‹dî
(

3346 
Di•œy
* ,

3347 
Wödow
 ,

3351 
	`XSëWödowB‹dîPixm≠
(

3352 
Di•œy
* ,

3353 
Wödow
 ,

3354 
Pixm≠


3357 
	`XSëWödowB‹dîWidth
(

3358 
Di•œy
* ,

3359 
Wödow
 ,

3363 
	`XSëWödowCﬁ‹m≠
(

3364 
Di•œy
* ,

3365 
Wödow
 ,

3366 
Cﬁ‹m≠


3369 
	`XSt‹eBuf„r
(

3370 
Di•œy
* ,

3371 
_Xc⁄°
 * ,

3376 
	`XSt‹eByãs
(

3377 
Di•œy
* ,

3378 
_Xc⁄°
 * ,

3382 
	`XSt‹eCﬁ‹
(

3383 
Di•œy
* ,

3384 
Cﬁ‹m≠
 ,

3385 
XCﬁ‹
*

3388 
	`XSt‹eCﬁ‹s
(

3389 
Di•œy
* ,

3390 
Cﬁ‹m≠
 ,

3391 
XCﬁ‹
* ,

3395 
	`XSt‹eName
(

3396 
Di•œy
* ,

3397 
Wödow
 ,

3398 
_Xc⁄°
 *

3401 
	`XSt‹eNamedCﬁ‹
(

3402 
Di•œy
* ,

3403 
Cﬁ‹m≠
 ,

3404 
_Xc⁄°
 * ,

3409 
	`XSync
(

3410 
Di•œy
* ,

3411 
Boﬁ


3414 
	`XTextExã¡s
(

3415 
XF⁄tSåu˘
* ,

3416 
_Xc⁄°
 * ,

3421 
XCh¨Såu˘
*

3424 
	`XTextExã¡s16
(

3425 
XF⁄tSåu˘
* ,

3426 
_Xc⁄°
 
XCh¨2b
* ,

3431 
XCh¨Såu˘
*

3434 
	`XTextWidth
(

3435 
XF⁄tSåu˘
* ,

3436 
_Xc⁄°
 * ,

3440 
	`XTextWidth16
(

3441 
XF⁄tSåu˘
* ,

3442 
_Xc⁄°
 
XCh¨2b
* ,

3446 
Boﬁ
 
	`XTøn¶©eCo‹dö©es
(

3447 
Di•œy
* ,

3448 
Wödow
 ,

3449 
Wödow
 ,

3454 
Wödow
*

3457 
	`XUndeföeCurs‹
(

3458 
Di•œy
* ,

3459 
Wödow


3462 
	`XUngøbBuâ⁄
(

3463 
Di•œy
* ,

3466 
Wödow


3469 
	`XUngøbKey
(

3470 
Di•œy
* ,

3473 
Wödow


3476 
	`XUngøbKeybﬂrd
(

3477 
Di•œy
* ,

3478 
Time


3481 
	`XUngøbPoöãr
(

3482 
Di•œy
* ,

3483 
Time


3486 
	`XUngøbSîvî
(

3487 
Di•œy
*

3490 
	`XUnö°ÆlCﬁ‹m≠
(

3491 
Di•œy
* ,

3492 
Cﬁ‹m≠


3495 
	`XU∆ﬂdF⁄t
(

3496 
Di•œy
* ,

3497 
F⁄t


3500 
	`XUnm≠Subwödows
(

3501 
Di•œy
* ,

3502 
Wödow


3505 
	`XUnm≠Wödow
(

3506 
Di•œy
* ,

3507 
Wödow


3510 
	`XVíd‹Rñó£
(

3511 
Di•œy
*

3514 
	`XW¨pPoöãr
(

3515 
Di•œy
* ,

3516 
Wödow
 ,

3517 
Wödow
 ,

3526 
	`XWidthMMOfS¸ìn
(

3527 
S¸ìn
*

3530 
	`XWidthOfS¸ìn
(

3531 
S¸ìn
*

3534 
	`XWödowEvít
(

3535 
Di•œy
* ,

3536 
Wödow
 ,

3538 
XEvít
*

3541 
	`XWrôeBôm≠Fûe
(

3542 
Di•œy
* ,

3543 
_Xc⁄°
 * ,

3544 
Pixm≠
 ,

3551 
Boﬁ
 
	`XSuµ‹tsLoˇÀ
 ();

3553 *
	`XSëLoˇÀModifõrs
(

3557 
XOM
 
	`XO≥nOM
(

3558 
Di•œy
* ,

3559 
_XrmHashBuckëRec
* ,

3560 
_Xc⁄°
 * ,

3561 
_Xc⁄°
 *

3564 
Sètus
 
	`XClo£OM
(

3565 
XOM


3568 *
	$XSëOMVÆues
(

3569 
XOM
 ,

3571 Ë
	`_X_SENTINEL
(0);

3573 *
	$XGëOMVÆues
(

3574 
XOM
 ,

3576 Ë
	`_X_SENTINEL
(0);

3578 
Di•œy
 *
	`XDi•œyOfOM
(

3579 
XOM


3582 *
	`XLoˇÀOfOM
(

3583 
XOM


3586 
XOC
 
	$XCª©eOC
(

3587 
XOM
 ,

3589 Ë
	`_X_SENTINEL
(0);

3591 
	`XDe°royOC
(

3592 
XOC


3595 
XOM
 
	`XOMOfOC
(

3596 
XOC


3599 *
	$XSëOCVÆues
(

3600 
XOC
 ,

3602 Ë
	`_X_SENTINEL
(0);

3604 *
	$XGëOCVÆues
(

3605 
XOC
 ,

3607 Ë
	`_X_SENTINEL
(0);

3609 
XF⁄tSë
 
	`XCª©eF⁄tSë
(

3610 
Di•œy
* ,

3611 
_Xc⁄°
 * ,

3617 
	`XFªeF⁄tSë
(

3618 
Di•œy
* ,

3619 
XF⁄tSë


3622 
	`XF⁄tsOfF⁄tSë
(

3623 
XF⁄tSë
 ,

3624 
XF⁄tSåu˘
*** ,

3628 *
	`XBa£F⁄tNameLi°OfF⁄tSë
(

3629 
XF⁄tSë


3632 *
	`XLoˇÀOfF⁄tSë
(

3633 
XF⁄tSë


3636 
Boﬁ
 
	`XC⁄ãxtDïídítDøwög
(

3637 
XF⁄tSë


3640 
Boﬁ
 
	`XDúe˘i⁄ÆDïídítDøwög
(

3641 
XF⁄tSë


3644 
Boﬁ
 
	`XC⁄ãxtuÆDøwög
(

3645 
XF⁄tSë


3648 
XF⁄tSëExã¡s
 *
	`XExã¡sOfF⁄tSë
(

3649 
XF⁄tSë


3652 
	`XmbTextEsˇ≥mít
(

3653 
XF⁄tSë
 ,

3654 
_Xc⁄°
 * ,

3658 
	`XwcTextEsˇ≥mít
(

3659 
XF⁄tSë
 ,

3660 
_Xc⁄°
 
wch¨_t
* ,

3664 
	`Xutf8TextEsˇ≥mít
(

3665 
XF⁄tSë
 ,

3666 
_Xc⁄°
 * ,

3670 
	`XmbTextExã¡s
(

3671 
XF⁄tSë
 ,

3672 
_Xc⁄°
 * ,

3674 
XRe˘™gÀ
* ,

3675 
XRe˘™gÀ
*

3678 
	`XwcTextExã¡s
(

3679 
XF⁄tSë
 ,

3680 
_Xc⁄°
 
wch¨_t
* ,

3682 
XRe˘™gÀ
* ,

3683 
XRe˘™gÀ
*

3686 
	`Xutf8TextExã¡s
(

3687 
XF⁄tSë
 ,

3688 
_Xc⁄°
 * ,

3690 
XRe˘™gÀ
* ,

3691 
XRe˘™gÀ
*

3694 
Sètus
 
	`XmbTextPîCh¨Exã¡s
(

3695 
XF⁄tSë
 ,

3696 
_Xc⁄°
 * ,

3698 
XRe˘™gÀ
* ,

3699 
XRe˘™gÀ
* ,

3702 
XRe˘™gÀ
* ,

3703 
XRe˘™gÀ
*

3706 
Sètus
 
	`XwcTextPîCh¨Exã¡s
(

3707 
XF⁄tSë
 ,

3708 
_Xc⁄°
 
wch¨_t
* ,

3710 
XRe˘™gÀ
* ,

3711 
XRe˘™gÀ
* ,

3714 
XRe˘™gÀ
* ,

3715 
XRe˘™gÀ
*

3718 
Sètus
 
	`Xutf8TextPîCh¨Exã¡s
(

3719 
XF⁄tSë
 ,

3720 
_Xc⁄°
 * ,

3722 
XRe˘™gÀ
* ,

3723 
XRe˘™gÀ
* ,

3726 
XRe˘™gÀ
* ,

3727 
XRe˘™gÀ
*

3730 
	`XmbDøwText
(

3731 
Di•œy
* ,

3732 
DøwabÀ
 ,

3733 
GC
 ,

3736 
XmbTextIãm
* ,

3740 
	`XwcDøwText
(

3741 
Di•œy
* ,

3742 
DøwabÀ
 ,

3743 
GC
 ,

3746 
XwcTextIãm
* ,

3750 
	`Xutf8DøwText
(

3751 
Di•œy
* ,

3752 
DøwabÀ
 ,

3753 
GC
 ,

3756 
XmbTextIãm
* ,

3760 
	`XmbDøwSåög
(

3761 
Di•œy
* ,

3762 
DøwabÀ
 ,

3763 
XF⁄tSë
 ,

3764 
GC
 ,

3767 
_Xc⁄°
 * ,

3771 
	`XwcDøwSåög
(

3772 
Di•œy
* ,

3773 
DøwabÀ
 ,

3774 
XF⁄tSë
 ,

3775 
GC
 ,

3778 
_Xc⁄°
 
wch¨_t
* ,

3782 
	`Xutf8DøwSåög
(

3783 
Di•œy
* ,

3784 
DøwabÀ
 ,

3785 
XF⁄tSë
 ,

3786 
GC
 ,

3789 
_Xc⁄°
 * ,

3793 
	`XmbDøwImageSåög
(

3794 
Di•œy
* ,

3795 
DøwabÀ
 ,

3796 
XF⁄tSë
 ,

3797 
GC
 ,

3800 
_Xc⁄°
 * ,

3804 
	`XwcDøwImageSåög
(

3805 
Di•œy
* ,

3806 
DøwabÀ
 ,

3807 
XF⁄tSë
 ,

3808 
GC
 ,

3811 
_Xc⁄°
 
wch¨_t
* ,

3815 
	`Xutf8DøwImageSåög
(

3816 
Di•œy
* ,

3817 
DøwabÀ
 ,

3818 
XF⁄tSë
 ,

3819 
GC
 ,

3822 
_Xc⁄°
 * ,

3826 
XIM
 
	`XO≥nIM
(

3827 
Di•œy
* ,

3828 
_XrmHashBuckëRec
* ,

3833 
Sètus
 
	`XClo£IM
(

3834 
XIM


3837 *
	$XGëIMVÆues
(

3838 
XIM
 , ...

3839 Ë
	`_X_SENTINEL
(0);

3841 *
	$XSëIMVÆues
(

3842 
XIM
 , ...

3843 Ë
	`_X_SENTINEL
(0);

3845 
Di•œy
 *
	`XDi•œyOfIM
(

3846 
XIM


3849 *
	`XLoˇÀOfIM
(

3850 
XIM


3853 
XIC
 
	$XCª©eIC
(

3854 
XIM
 , ...

3855 Ë
	`_X_SENTINEL
(0);

3857 
	`XDe°royIC
(

3858 
XIC


3861 
	`XSëICFocus
(

3862 
XIC


3865 
	`XUn£tICFocus
(

3866 
XIC


3869 
wch¨_t
 *
	`XwcRe£tIC
(

3870 
XIC


3873 *
	`XmbRe£tIC
(

3874 
XIC


3877 *
	`Xutf8Re£tIC
(

3878 
XIC


3881 *
	$XSëICVÆues
(

3882 
XIC
 , ...

3883 Ë
	`_X_SENTINEL
(0);

3885 *
	$XGëICVÆues
(

3886 
XIC
 , ...

3887 Ë
	`_X_SENTINEL
(0);

3889 
XIM
 
	`XIMOfIC
(

3890 
XIC


3893 
Boﬁ
 
	`XFûãrEvít
(

3894 
XEvít
* ,

3895 
Wödow


3898 
	`XmbLookupSåög
(

3899 
XIC
 ,

3900 
XKeyPªs£dEvít
* ,

3903 
KeySym
* ,

3904 
Sètus
*

3907 
	`XwcLookupSåög
(

3908 
XIC
 ,

3909 
XKeyPªs£dEvít
* ,

3910 
wch¨_t
* ,

3912 
KeySym
* ,

3913 
Sètus
*

3916 
	`Xutf8LookupSåög
(

3917 
XIC
 ,

3918 
XKeyPªs£dEvít
* ,

3921 
KeySym
* ,

3922 
Sètus
*

3925 
XVaNe°edLi°
 
	$XVaCª©eNe°edLi°
(

3927 Ë
	`_X_SENTINEL
(0);

3931 
Boﬁ
 
	`XRegi°îIMIn°™tüãCÆlback
(

3932 
Di•œy
* ,

3933 
_XrmHashBuckëRec
* ,

3936 
XIDProc
 ,

3937 
XPoöãr


3940 
Boﬁ
 
	`XUƒegi°îIMIn°™tüãCÆlback
(

3941 
Di•œy
* ,

3942 
_XrmHashBuckëRec
* ,

3945 
XIDProc
 ,

3946 
XPoöãr


3949 (*
	tXC⁄√˘i⁄W©chProc
)(

3950 
	tDi•œy
* ,

3951 
	tXPoöãr
 ,

3953 
	tBoﬁ
 ,

3954 
	tXPoöãr
*

3958 
Sètus
 
	`XI¡î«lC⁄√˘i⁄Numbîs
(

3959 
Di•œy
* ,

3964 
	`XPro˚ssI¡î«lC⁄√˘i⁄
(

3965 
Di•œy
* ,

3969 
Sètus
 
	`XAddC⁄√˘i⁄W©ch
(

3970 
Di•œy
* ,

3971 
XC⁄√˘i⁄W©chProc
 ,

3972 
XPoöãr


3975 
	`XRemoveC⁄√˘i⁄W©ch
(

3976 
Di•œy
* ,

3977 
XC⁄√˘i⁄W©chProc
 ,

3978 
XPoöãr


3981 
	`XSëAuth‹iz©i⁄
(

3988 
	`_Xmbtowc
(

3989 
wch¨_t
 * ,

3994 
	`_Xw˘omb
(

3996 
wch¨_t


3999 
Boﬁ
 
	`XGëEvítD©a
(

4000 
Di•œy
* ,

4001 
XGíîicEvítCookõ
*

4004 
	`XFªeEvítD©a
(

4005 
Di•œy
* ,

4006 
XGíîicEvítCookõ
*

4009 #ifde‡
__˛™g__


4010 #¥agm®
˛™g
 
dügno°ic
 
p›


4013 
_XFUNCPROTOEND


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/iconv.h

18 #i‚de‡
_ICONV_H


19 
	#_ICONV_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 
__BEGIN_DECLS


29 *
	tic⁄v_t
;

37 
ic⁄v_t
 
ic⁄v_›í
 (c⁄° *
__tocode
, c⁄° *
__‰omcode
);

42 
size_t
 
ic⁄v
 (
ic⁄v_t
 
__cd
, **
__ª°ri˘
 
__öbuf
,

43 
size_t
 *
__ª°ri˘
 
__öbyã¶e·
,

44 **
__ª°ri˘
 
__outbuf
,

45 
size_t
 *
__ª°ri˘
 
__outbyã¶e·
);

51 
ic⁄v_˛o£
 (
ic⁄v_t
 
__cd
);

53 
	g__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

145 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

147 
__MALLOC_DEPRECATED
;

148 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

150 
__MALLOC_DEPRECATED
;

151 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

152 
size_t
 
__size
,

154 
__MALLOC_DEPRECATED
;

155 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

156 
size_t
 
__size
,

158 
__MALLOC_DEPRECATED
;

159 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

162 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

165 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

102 #ifde‡
__USE_XOPEN2K8


103 #i‚de‡
__ssize_t_deföed


104 
__ssize_t
 
	tssize_t
;

105 
	#__ssize_t_deföed


	)

110 
__BEGIN_NAMESPACE_STD


111 #i‚de‡
__USE_FILE_OFFSET64


112 
_G_Âos_t
 
	tÂos_t
;

114 
_G_Âos64_t
 
	tÂos_t
;

116 
__END_NAMESPACE_STD


117 #ifde‡
__USE_LARGEFILE64


118 
_G_Âos64_t
 
	tÂos64_t
;

122 
	#_IOFBF
 0

	)

123 
	#_IOLBF
 1

	)

124 
	#_IONBF
 2

	)

128 #i‚de‡
BUFSIZ


129 
	#BUFSIZ
 
_IO_BUFSIZ


	)

135 #i‚de‡
EOF


136 
	#EOF
 (-1)

	)

142 
	#SEEK_SET
 0

	)

143 
	#SEEK_CUR
 1

	)

144 
	#SEEK_END
 2

	)

145 #ifde‡
__USE_GNU


146 
	#SEEK_DATA
 3

	)

147 
	#SEEK_HOLE
 4

	)

151 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


153 
	#P_tmpdú
 "/tmp"

	)

166 
	~<bôs/°dio_lim.h
>

170 
_IO_FILE
 *
°dö
;

171 
_IO_FILE
 *
°dout
;

172 
_IO_FILE
 *
°dîr
;

174 
	#°dö
 
°dö


	)

175 
	#°dout
 
°dout


	)

176 
	#°dîr
 
°dîr


	)

178 
__BEGIN_NAMESPACE_STD


180 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

182 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

183 
__END_NAMESPACE_STD


185 #ifde‡
__USE_ATFILE


187 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

188 c⁄° *
__√w
Ë
__THROW
;

191 
__BEGIN_NAMESPACE_STD


196 #i‚de‡
__USE_FILE_OFFSET64


197 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

199 #ifde‡
__REDIRECT


200 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

202 
	#tmpfûe
 
tmpfûe64


	)

206 #ifde‡
__USE_LARGEFILE64


207 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

211 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

212 
__END_NAMESPACE_STD


214 #ifde‡
__USE_MISC


217 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

221 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


229 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

230 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

234 
__BEGIN_NAMESPACE_STD


239 
	`f˛o£
 (
FILE
 *
__°ªam
);

244 
	`fÊush
 (
FILE
 *
__°ªam
);

245 
__END_NAMESPACE_STD


247 #ifde‡
__USE_MISC


254 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

257 #ifde‡
__USE_GNU


264 
	`f˛o£Æl
 ();

268 
__BEGIN_NAMESPACE_STD


269 #i‚de‡
__USE_FILE_OFFSET64


274 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

275 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

280 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

281 c⁄° *
__ª°ri˘
 
__modes
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

284 #ifde‡
__REDIRECT


285 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

286 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

287 
__wur
;

288 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

289 c⁄° *
__ª°ri˘
 
__modes
,

290 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

291 
__wur
;

293 
	#f›í
 
f›í64


	)

294 
	#‰e›í
 
‰e›í64


	)

297 
__END_NAMESPACE_STD


298 #ifde‡
__USE_LARGEFILE64


299 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

301 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

302 c⁄° *
__ª°ri˘
 
__modes
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

306 #ifdef 
__USE_POSIX


308 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

311 #ifdef 
__USE_GNU


314 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

315 c⁄° *
__ª°ri˘
 
__modes
,

316 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

319 #ifde‡
__USE_XOPEN2K8


321 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

322 
__THROW
 
__wur
;

327 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

331 
__BEGIN_NAMESPACE_STD


334 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

338 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
__modes
, 
size_t
 
__n
Ë
__THROW
;

340 
__END_NAMESPACE_STD


342 #ifdef 
__USE_MISC


345 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

346 
size_t
 
__size
Ë
__THROW
;

349 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

353 
__BEGIN_NAMESPACE_STD


358 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

366 
	$•rötf
 (*
__ª°ri˘
 
__s
,

367 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

373 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
_G_va_li°
 
__¨g
);

379 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

381 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

382 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

383 
__END_NAMESPACE_STD


385 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


386 
__BEGIN_NAMESPACE_C99


388 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

389 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

390 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

392 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

393 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

394 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

395 
__END_NAMESPACE_C99


398 #ifde‡
__USE_GNU


401 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

402 
_G_va_li°
 
__¨g
)

403 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

404 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

405 c⁄° *
__ª°ri˘
 
__fmt
, ...)

406 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

408 c⁄° *
__ª°ri˘
 
__fmt
, ...)

409 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

412 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

436 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

451 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

486 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (c⁄° *
__ª°ri˘
 
__s
,

506 c⁄° *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

516 c⁄° *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #ifde‡
__USE_POSIX199506


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #ifde‡
__USE_POSIX199506


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

627 #i‡!
deföed
 
__USE_ISOC11
 \

628 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

640 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

642 
__END_NAMESPACE_STD


644 #ifde‡
__USE_GNU


651 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

652 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

656 #ifdef 
__USE_XOPEN2K8


667 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

668 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

670 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

671 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

672 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

680 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

681 
size_t
 *
__ª°ri˘
 
__n
,

682 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

686 
__BEGIN_NAMESPACE_STD


691 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

697 
	`puts
 (c⁄° *
__s
);

704 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

711 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

712 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

717 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

718 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

719 
__END_NAMESPACE_STD


721 #ifde‡
__USE_GNU


728 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

729 
FILE
 *
__ª°ri˘
 
__°ªam
);

732 #ifde‡
__USE_MISC


739 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

741 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

742 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

746 
__BEGIN_NAMESPACE_STD


751 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

756 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

761 
	`ªwöd
 (
FILE
 *
__°ªam
);

762 
__END_NAMESPACE_STD


769 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


770 #i‚de‡
__USE_FILE_OFFSET64


775 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

780 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

782 #ifde‡
__REDIRECT


783 
	`__REDIRECT
 (
f£eko
,

784 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

785 
f£eko64
);

786 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

788 
	#f£eko
 
f£eko64


	)

789 
	#·ñlo
 
·ñlo64


	)

794 
__BEGIN_NAMESPACE_STD


795 #i‚de‡
__USE_FILE_OFFSET64


800 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

805 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

807 #ifde‡
__REDIRECT


808 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

809 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

810 
	`__REDIRECT
 (
f£ços
,

811 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

813 
	#fgëpos
 
fgëpos64


	)

814 
	#f£ços
 
f£ços64


	)

817 
__END_NAMESPACE_STD


819 #ifde‡
__USE_LARGEFILE64


820 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

821 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

822 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

823 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

826 
__BEGIN_NAMESPACE_STD


828 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

830 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

833 
__END_NAMESPACE_STD


835 #ifde‡
__USE_MISC


837 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

838 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

839 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

843 
__BEGIN_NAMESPACE_STD


848 
	`≥º‹
 (c⁄° *
__s
);

849 
__END_NAMESPACE_STD


855 
	~<bôs/sys_îæi°.h
>

858 #ifdef 
__USE_POSIX


860 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

863 #ifde‡
__USE_MISC


865 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

869 #ifde‡
__USE_POSIX2


874 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

880 
	`p˛o£
 (
FILE
 *
__°ªam
);

884 #ifdef 
__USE_POSIX


886 *
	$˘îmid
 (*
__s
Ë
__THROW
;

890 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


892 *
	`cu£rid
 (*
__s
);

896 #ifdef 
__USE_GNU


897 
ob°ack
;

900 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

901 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

903 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

904 c⁄° *
__ª°ri˘
 
__f‹m©
,

905 
_G_va_li°
 
__¨gs
)

906 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

910 #ifde‡
__USE_POSIX199506


914 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

921 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

924 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


928 
	#__√ed_gë›t


	)

929 
	~<gë›t.h
>

934 #ifde‡
__USE_EXTERN_INLINES


935 
	~<bôs/°dio.h
>

937 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


938 
	~<bôs/°dio2.h
>

940 #ifde‡
__LDBL_COMPAT


941 
	~<bôs/°dio-ldbl.h
>

944 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

45 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

46 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

47 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

48 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

49 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

50 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

51 #ifde‡
__WIFCONTINUED


52 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
__BEGIN_NAMESPACE_STD


60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

73 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__BEGIN_NAMESPACE_C99


78 
__exãnsi⁄__
 struct

80 
	mquŸ
;

81 
	mªm
;

82 } 
	tŒdiv_t
;

83 
	#__Œdiv_t_deföed
 1

	)

84 
	g__END_NAMESPACE_C99


89 
	#RAND_MAX
 2147483647

	)

94 
	#EXIT_FAILURE
 1

	)

95 
	#EXIT_SUCCESS
 0

	)

99 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

100 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

103 
__BEGIN_NAMESPACE_STD


105 
	$©of
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©oi
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 
	$©ﬁ
 (c⁄° *
__≈å
)

112 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_ISOC99


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

119 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

120 
__END_NAMESPACE_C99


123 
__BEGIN_NAMESPACE_STD


125 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

126 **
__ª°ri˘
 
__íd±r
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1));

128 
__END_NAMESPACE_STD


130 #ifdef 
__USE_ISOC99


131 
__BEGIN_NAMESPACE_C99


133 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

134 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

136 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

137 **
__ª°ri˘
 
__íd±r
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 
__END_NAMESPACE_C99


142 
__BEGIN_NAMESPACE_STD


144 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

145 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

149 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 
__END_NAMESPACE_STD


153 #ifde‡
__USE_MISC


155 
__exãnsi⁄__


156 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

157 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

158 
__THROW
 
	`__n⁄nuŒ
 ((1));

160 
__exãnsi⁄__


161 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

162 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__exãnsi⁄__


170 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

174 
__exãnsi⁄__


175 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


182 #ifde‡
__USE_GNU


196 
	~<xloˇÀ.h
>

200 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

202 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

204 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

205 **
__ª°ri˘
 
__íd±r
,

206 
__ba£
, 
__loˇÀ_t
 
__loc
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

209 
__exãnsi⁄__


210 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

212 
__loˇÀ_t
 
__loc
)

213 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

215 
__exãnsi⁄__


216 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

217 **
__ª°ri˘
 
__íd±r
,

218 
__ba£
, 
__loˇÀ_t
 
__loc
)

219 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

221 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

222 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

223 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

225 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

226 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

227 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

229 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

230 **
__ª°ri˘
 
__íd±r
,

231 
__loˇÀ_t
 
__loc
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

236 #ifde‡
__USE_EXTERN_INLINES


237 
__BEGIN_NAMESPACE_STD


238 
__exã∫_ölöe
 

239 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

241  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

242 
	}
}

243 
__exã∫_ölöe
 

244 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

246  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

247 
	}
}

248 
	g__END_NAMESPACE_STD


250 #ifde‡
__USE_ISOC99


251 
__BEGIN_NAMESPACE_C99


252 
__exãnsi⁄__
 
__exã∫_ölöe
 

253 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

255  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

256 
	}
}

257 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


266 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

269 
	$a64l
 (c⁄° *
__s
)

270 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

274 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


275 
	~<sys/ty≥s.h
>

282 
	$øndom
 (Ë
__THROW
;

285 
	$§™dom
 (
__£ed
Ë
__THROW
;

291 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

292 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

296 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

299 #ifde‡
__USE_MISC


304 
	søndom_d©a


306 
öt32_t
 *
Âå
;

307 
öt32_t
 *
Ωå
;

308 
öt32_t
 *
°©e
;

309 
ønd_ty≥
;

310 
ønd_deg
;

311 
ønd_£p
;

312 
öt32_t
 *
íd_±r
;

315 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

316 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

319 
__THROW
 
	`__n⁄nuŒ
 ((2));

321 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

322 
size_t
 
__°©ñí
,

323 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

324 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

326 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

327 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
__BEGIN_NAMESPACE_STD


335 
	$ønd
 (Ë
__THROW
;

337 
	$§™d
 (
__£ed
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifde‡
__USE_POSIX199506


342 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

346 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


350 
	$dønd48
 (Ë
__THROW
;

351 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$Ã™d48
 (Ë
__THROW
;

355 
	$ƒ™d48
 (
__xsubi
[3])

356 
__THROW
 
	`__n⁄nuŒ
 ((1));

359 
	$mønd48
 (Ë
__THROW
;

360 
	$jønd48
 (
__xsubi
[3])

361 
__THROW
 
	`__n⁄nuŒ
 ((1));

364 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

365 *
	$£ed48
 (
__£ed16v
[3])

366 
__THROW
 
	`__n⁄nuŒ
 ((1));

367 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_MISC


373 
	sdønd48_d©a


375 
__x
[3];

376 
__ﬁd_x
[3];

377 
__c
;

378 
__öô
;

379 
__exãnsi⁄__
 
__a
;

384 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

385 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$î™d48_r
 (
__xsubi
[3],

387 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

388 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

392 *
__ª°ri˘
 
__ªsu…
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

394 
	$ƒ™d48_r
 (
__xsubi
[3],

395 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

396 *
__ª°ri˘
 
__ªsu…
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

401 *
__ª°ri˘
 
__ªsu…
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

403 
	$jønd48_r
 (
__xsubi
[3],

404 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

405 *
__ª°ri˘
 
__ªsu…
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

409 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

410 
__THROW
 
	`__n⁄nuŒ
 ((2));

412 
	$£ed48_r
 (
__£ed16v
[3],

413 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

415 
	$lc⁄g48_r
 (
__∑øm
[7],

416 
dønd48_d©a
 *
__buf„r
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

423 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


424 
	#__mÆloc_™d_ˇŒoc_deföed


	)

425 
__BEGIN_NAMESPACE_STD


427 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

429 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

430 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

431 
__END_NAMESPACE_STD


434 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


435 
__BEGIN_NAMESPACE_STD


441 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

442 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

444 
	$‰ì
 (*
__±r
Ë
__THROW
;

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_MISC


449 
	$c‰ì
 (*
__±r
Ë
__THROW
;

452 #ifde‡
__USE_MISC


453 
	~<Æloˇ.h
>

456 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

457 || 
deföed
 
__USE_MISC


459 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

462 #ifde‡
__USE_XOPEN2K


464 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

465 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

468 #ifde‡
__USE_ISOC11


470 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

471 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

474 
__BEGIN_NAMESPACE_STD


476 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

480 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

482 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


484 #ifde‡
__˝lu•lus


485 "C++" 
	`©_quick_exô
 ((*
__func
) ())

486 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

488 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 
__END_NAMESPACE_STD


493 #ifdef 
__USE_MISC


496 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

497 
__THROW
 
	`__n⁄nuŒ
 ((1));

500 
__BEGIN_NAMESPACE_STD


504 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

506 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


510 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

512 
__END_NAMESPACE_STD


514 #ifde‡
__USE_ISOC99


515 
__BEGIN_NAMESPACE_C99


518 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
__END_NAMESPACE_C99


523 
__BEGIN_NAMESPACE_STD


525 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

526 
__END_NAMESPACE_STD


528 #ifde‡
__USE_GNU


531 *
	$£cuª_gëív
 (c⁄° *
__«me
)

532 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

535 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


539 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

542 #ifde‡
__USE_XOPEN2K


545 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

546 
__THROW
 
	`__n⁄nuŒ
 ((2));

549 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

552 #ifdef 
__USE_MISC


556 
	$˛óªnv
 (Ë
__THROW
;

560 #i‡
deföed
 
__USE_MISC
 \

561 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

567 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

570 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


579 #i‚de‡
__USE_FILE_OFFSET64


580 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

582 #ifde‡
__REDIRECT


583 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

584 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

586 
	#mk°emp
 
mk°emp64


	)

589 #ifde‡
__USE_LARGEFILE64


590 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

594 #ifde‡
__USE_MISC


601 #i‚de‡
__USE_FILE_OFFSET64


602 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

604 #ifde‡
__REDIRECT


605 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

606 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 
	#mk°emps
 
mk°emps64


	)

611 #ifde‡
__USE_LARGEFILE64


612 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

613 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_XOPEN2K8


623 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 #ifde‡
__USE_GNU


633 #i‚de‡
__USE_FILE_OFFSET64


634 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__REDIRECT


637 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

638 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
	#mko°emp
 
mko°emp64


	)

643 #ifde‡
__USE_LARGEFILE64


644 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

653 #i‚de‡
__USE_FILE_OFFSET64


654 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

655 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #ifde‡
__REDIRECT


658 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

659 
__Êags
), 
mko°emps64
)

660 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

662 
	#mko°emps
 
mko°emps64


	)

665 #ifde‡
__USE_LARGEFILE64


666 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

667 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

672 
__BEGIN_NAMESPACE_STD


677 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

678 
__END_NAMESPACE_STD


681 #ifdef 
__USE_GNU


684 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

685 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


694 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

695 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

700 #i‚de‡
__COMPAR_FN_T


701 
	#__COMPAR_FN_T


	)

702 (*
	t__com∑r_‚_t
) (const *, const *);

704 #ifdef 
__USE_GNU


705 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

708 #ifde‡
__USE_GNU


709 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

712 
__BEGIN_NAMESPACE_STD


715 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

716 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

717 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

719 #ifde‡
__USE_EXTERN_INLINES


720 
	~<bôs/°dlib-b£¨ch.h
>

725 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

726 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

727 #ifde‡
__USE_GNU


728 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

729 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

730 
	`__n⁄nuŒ
 ((1, 4));

735 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

736 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

737 
__END_NAMESPACE_STD


739 #ifde‡
__USE_ISOC99


740 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

741 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

745 
__BEGIN_NAMESPACE_STD


749 
div_t
 
	$div
 (
__numî
, 
__díom
)

750 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

751 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

752 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

753 
__END_NAMESPACE_STD


755 #ifde‡
__USE_ISOC99


756 
__BEGIN_NAMESPACE_C99


757 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

758 
__díom
)

759 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

760 
__END_NAMESPACE_C99


764 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

765 || 
deföed
 
__USE_MISC


772 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

773 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

778 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

779 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

784 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

785 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

788 #ifde‡
__USE_MISC


790 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

791 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

792 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

793 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

794 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

795 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

796 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

797 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

802 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

804 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

805 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

806 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

807 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

809 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

810 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

811 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

812 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

813 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

814 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

815 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

816 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

820 
__BEGIN_NAMESPACE_STD


823 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

826 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

827 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

830 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

834 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

835 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

837 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

838 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

839 
__THROW
;

840 
__END_NAMESPACE_STD


843 #ifde‡
__USE_MISC


848 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

852 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


859 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

860 *c⁄° *
__ª°ri˘
 
__tokís
,

861 **
__ª°ri˘
 
__vÆuï
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

866 #ifde‡
__USE_XOPEN


868 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #ifde‡
__USE_XOPEN2KXSI


876 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

879 #ifde‡
__USE_XOPEN_EXTENDED


884 
	$gø¡±
 (
__fd
Ë
__THROW
;

888 
	$u∆ock±
 (
__fd
Ë
__THROW
;

893 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

896 #ifde‡
__USE_GNU


900 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

901 
__THROW
 
	`__n⁄nuŒ
 ((2));

904 
	`gë±
 ();

907 #ifde‡
__USE_MISC


911 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

915 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


918 
	$ây¶Ÿ
 (Ë
__THROW
;

921 
	~<bôs/°dlib-Êﬂt.h
>

924 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


925 
	~<bôs/°dlib.h
>

927 #ifde‡
__LDBL_COMPAT


928 
	~<bôs/°dlib-ldbl.h
>

932 #unde‡
__√ed_mÆloc_™d_ˇŒoc


934 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
	`__GNUC_PREREQ
 (3,4)

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

644 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
__exã∫_Æways_ölöe
 *

647 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

648 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

650  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

651 
	}
}

656 
	g__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_MISC


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

31 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

32 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

35 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


39 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

40 
__THROW
 
__©åibuã_puª__
;

43 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

46 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

49 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


52 *
	`ödex
 (*
__s
, 
__c
)

53 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

54 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

57 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


58 
__exã∫_Æways_ölöe
 *

59 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


61  
	`__buûtö_ödex
 (
__s
, 
__c
);

64 
__exã∫_Æways_ölöe
 const *

65 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


67  
	`__buûtö_ödex
 (
__s
, 
__c
);

70 
	}
}

72 *
	$ödex
 (c⁄° *
__s
, 
__c
)

73 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


80 *
	`rödex
 (*
__s
, 
__c
)

81 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

85 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


86 
__exã∫_Æways_ölöe
 *

87 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


89  
	`__buûtö_rödex
 (
__s
, 
__c
);

92 
__exã∫_Æways_ölöe
 const *

93 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


95  
	`__buûtö_rödex
 (
__s
, 
__c
);

98 
	}
}

100 *
	$rödex
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


108 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

112 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

113 
__THROW
 
__©åibuã_puª__
;

116 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

117 
__THROW
 
__©åibuã_puª__
;

119 #ifdef 
__USE_XOPEN2K8


123 
	~<xloˇÀ.h
>

127 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

128 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

130 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

131 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

135 
__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	#__√ed_gë›t


	)

873 
	~<gë›t.h
>

877 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


881 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #i‡
deföed
 
__USE_MISC


888 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

893 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

899 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

901 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

908 
	$vh™gup
 (Ë
__THROW
;

911 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

919 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

920 
size_t
 
__off£t
, 
__sˇÀ
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1));

927 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

931 *
	$gëu£rshñl
 (Ë
__THROW
;

932 
	$ídu£rshñl
 (Ë
__THROW
;

933 
	$£tu£rshñl
 (Ë
__THROW
;

939 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

943 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

946 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

958 
	`fsync
 (
__fd
);

961 #ifde‡
__USE_GNU


964 
	$syncfs
 (
__fd
Ë
__THROW
;

968 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


971 
	`gëho°id
 ();

974 
	$sync
 (Ë
__THROW
;

977 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


980 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

985 
	$gëdèbÀsize
 (Ë
__THROW
;

991 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


994 #i‚de‡
__USE_FILE_OFFSET64


995 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

996 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

998 #ifde‡
__REDIRECT_NTH


999 
	`__REDIRECT_NTH
 (
åunˇã
,

1000 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1001 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1003 
	#åunˇã
 
åunˇã64


	)

1006 #ifde‡
__USE_LARGEFILE64


1007 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1013 #i‡
deföed
 
__USE_POSIX199309
 \

1014 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1020 #ifde‡
__REDIRECT_NTH


1021 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1022 
·runˇã64
Ë
__wur
;

1024 
	#·runˇã
 
·runˇã64


	)

1027 #ifde‡
__USE_LARGEFILE64


1028 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1034 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1035 || 
deföed
 
__USE_MISC


1039 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1045 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1049 #ifde‡
__USE_MISC


1060 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1065 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1077 
	#F_ULOCK
 0

	)

1078 
	#F_LOCK
 1

	)

1079 
	#F_TLOCK
 2

	)

1080 
	#F_TEST
 3

	)

1082 #i‚de‡
__USE_FILE_OFFSET64


1083 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1085 #ifde‡
__REDIRECT


1086 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1087 
lockf64
Ë
__wur
;

1089 
	#lockf
 
lockf64


	)

1092 #ifde‡
__USE_LARGEFILE64


1093 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1098 #ifde‡
__USE_GNU


1103 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1104 (
__exãnsi⁄__
 \

1105 ({ 
__ªsu…
; \

1106 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1107 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1108 
__ªsu…
; 
	}
}))

	)

1111 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1114 
fd©async
 (
__fûdes
);

1120 #ifdef 
__USE_XOPEN


1122 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1127 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1128 
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1148 *
	`cu£rid
 (*
__s
);

1154 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1155 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1156 (*
__∑ª¡
) (),

1157 (*
__chûd
Ë()Ë
__THROW
;

1162 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1163 
	~<bôs/uni°d.h
>

1166 
__END_DECLS


	@/usr/include/GL/glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_
 1

	)

4 #ifde‡
__˝lu•lus


39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

40 #i‚de‡
WIN32_LEAN_AND_MEAN


41 
	#WIN32_LEAN_AND_MEAN
 1

	)

43 
	~<wödows.h
>

46 #i‚de‡
APIENTRY


47 
	#APIENTRY


	)

49 #i‚de‡
APIENTRYP


50 
	#APIENTRYP
 
APIENTRY
 *

	)

52 #i‚de‡
GLAPI


53 
	#GLAPI
 

	)

56 
	#GL_GLEXT_VERSION
 20160714

	)

68 #i‚de‡
GL_VERSION_1_2


69 
	#GL_VERSION_1_2
 1

	)

70 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

71 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

72 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

73 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

74 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

75 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

76 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

77 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

78 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

79 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

80 
	#GL_TEXTURE_3D
 0x806F

	)

81 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

82 
	#GL_TEXTURE_DEPTH
 0x8071

	)

83 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

84 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

85 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

86 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

87 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

88 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

89 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

90 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

91 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

92 
	#GL_BGR
 0x80E0

	)

93 
	#GL_BGRA
 0x80E1

	)

94 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

95 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

96 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

97 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

98 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

99 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

100 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

101 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

102 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

103 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

104 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

105 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

106 
	#GL_RESCALE_NORMAL
 0x803A

	)

107 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

108 
	#GL_SINGLE_COLOR
 0x81F9

	)

109 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

110 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

111 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

112 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

113 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

114 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

115 #ifde‡
GL_GLEXT_PROTOTYPES


116 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

117 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

118 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

119 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

123 #i‚de‡
GL_VERSION_1_3


124 
	#GL_VERSION_1_3
 1

	)

125 
	#GL_TEXTURE0
 0x84C0

	)

126 
	#GL_TEXTURE1
 0x84C1

	)

127 
	#GL_TEXTURE2
 0x84C2

	)

128 
	#GL_TEXTURE3
 0x84C3

	)

129 
	#GL_TEXTURE4
 0x84C4

	)

130 
	#GL_TEXTURE5
 0x84C5

	)

131 
	#GL_TEXTURE6
 0x84C6

	)

132 
	#GL_TEXTURE7
 0x84C7

	)

133 
	#GL_TEXTURE8
 0x84C8

	)

134 
	#GL_TEXTURE9
 0x84C9

	)

135 
	#GL_TEXTURE10
 0x84CA

	)

136 
	#GL_TEXTURE11
 0x84CB

	)

137 
	#GL_TEXTURE12
 0x84CC

	)

138 
	#GL_TEXTURE13
 0x84CD

	)

139 
	#GL_TEXTURE14
 0x84CE

	)

140 
	#GL_TEXTURE15
 0x84CF

	)

141 
	#GL_TEXTURE16
 0x84D0

	)

142 
	#GL_TEXTURE17
 0x84D1

	)

143 
	#GL_TEXTURE18
 0x84D2

	)

144 
	#GL_TEXTURE19
 0x84D3

	)

145 
	#GL_TEXTURE20
 0x84D4

	)

146 
	#GL_TEXTURE21
 0x84D5

	)

147 
	#GL_TEXTURE22
 0x84D6

	)

148 
	#GL_TEXTURE23
 0x84D7

	)

149 
	#GL_TEXTURE24
 0x84D8

	)

150 
	#GL_TEXTURE25
 0x84D9

	)

151 
	#GL_TEXTURE26
 0x84DA

	)

152 
	#GL_TEXTURE27
 0x84DB

	)

153 
	#GL_TEXTURE28
 0x84DC

	)

154 
	#GL_TEXTURE29
 0x84DD

	)

155 
	#GL_TEXTURE30
 0x84DE

	)

156 
	#GL_TEXTURE31
 0x84DF

	)

157 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

158 
	#GL_MULTISAMPLE
 0x809D

	)

159 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

160 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

161 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

162 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

163 
	#GL_SAMPLES
 0x80A9

	)

164 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

165 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

166 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

167 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

168 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

169 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

170 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

171 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

172 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

173 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

174 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

175 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

176 
	#GL_COMPRESSED_RGB
 0x84ED

	)

177 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

178 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

179 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

180 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

181 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

182 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

183 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

184 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

185 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

186 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

187 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

188 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

189 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

190 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

191 
	#GL_NORMAL_MAP
 0x8511

	)

192 
	#GL_REFLECTION_MAP
 0x8512

	)

193 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

194 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

195 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

196 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

197 
	#GL_COMBINE
 0x8570

	)

198 
	#GL_COMBINE_RGB
 0x8571

	)

199 
	#GL_COMBINE_ALPHA
 0x8572

	)

200 
	#GL_SOURCE0_RGB
 0x8580

	)

201 
	#GL_SOURCE1_RGB
 0x8581

	)

202 
	#GL_SOURCE2_RGB
 0x8582

	)

203 
	#GL_SOURCE0_ALPHA
 0x8588

	)

204 
	#GL_SOURCE1_ALPHA
 0x8589

	)

205 
	#GL_SOURCE2_ALPHA
 0x858A

	)

206 
	#GL_OPERAND0_RGB
 0x8590

	)

207 
	#GL_OPERAND1_RGB
 0x8591

	)

208 
	#GL_OPERAND2_RGB
 0x8592

	)

209 
	#GL_OPERAND0_ALPHA
 0x8598

	)

210 
	#GL_OPERAND1_ALPHA
 0x8599

	)

211 
	#GL_OPERAND2_ALPHA
 0x859A

	)

212 
	#GL_RGB_SCALE
 0x8573

	)

213 
	#GL_ADD_SIGNED
 0x8574

	)

214 
	#GL_INTERPOLATE
 0x8575

	)

215 
	#GL_SUBTRACT
 0x84E7

	)

216 
	#GL_CONSTANT
 0x8576

	)

217 
	#GL_PRIMARY_COLOR
 0x8577

	)

218 
	#GL_PREVIOUS
 0x8578

	)

219 
	#GL_DOT3_RGB
 0x86AE

	)

220 
	#GL_DOT3_RGBA
 0x86AF

	)

221 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

222 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

223 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

224 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

225 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

226 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

227 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

228 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

229 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

230 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

231 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

232 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

233 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

234 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

235 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

236 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

237 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

238 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

239 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

240 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

241 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

242 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

243 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

244 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

245 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

246 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

247 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

248 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

249 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

250 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

251 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

252 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

253 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

254 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

255 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

256 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

257 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

258 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

259 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

260 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

261 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

262 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

263 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

264 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

265 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

266 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

267 #ifde‡
GL_GLEXT_PROTOTYPES


268 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

269 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

270 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

271 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

272 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

273 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

274 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

275 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

276 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

277 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
 
ãxtuª
);

278 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

279 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

280 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

281 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

282 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

283 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

284 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

285 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

286 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

287 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

288 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

289 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

290 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

291 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

292 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

293 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

294 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

295 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

296 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

297 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

298 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

299 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

300 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

301 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

302 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

303 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

304 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

305 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

306 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

307 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

308 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

309 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

310 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

311 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

312 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

313 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

317 #i‚de‡
GL_VERSION_1_4


318 
	#GL_VERSION_1_4
 1

	)

319 
	#GL_BLEND_DST_RGB
 0x80C8

	)

320 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

321 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

322 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

323 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

324 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

325 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

326 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

327 
	#GL_MIRRORED_REPEAT
 0x8370

	)

328 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

329 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

330 
	#GL_INCR_WRAP
 0x8507

	)

331 
	#GL_DECR_WRAP
 0x8508

	)

332 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

333 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

334 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

335 
	#GL_POINT_SIZE_MIN
 0x8126

	)

336 
	#GL_POINT_SIZE_MAX
 0x8127

	)

337 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

338 
	#GL_GENERATE_MIPMAP
 0x8191

	)

339 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

340 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

341 
	#GL_FOG_COORDINATE
 0x8451

	)

342 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

343 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

344 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

345 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

346 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

347 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

348 
	#GL_COLOR_SUM
 0x8458

	)

349 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

350 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

351 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

352 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

353 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

354 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

355 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

356 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

357 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

358 
	#GL_FUNC_ADD
 0x8006

	)

359 
	#GL_FUNC_SUBTRACT
 0x800A

	)

360 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

361 
	#GL_MIN
 0x8007

	)

362 
	#GL_MAX
 0x8008

	)

363 
	#GL_CONSTANT_COLOR
 0x8001

	)

364 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

365 
	#GL_CONSTANT_ALPHA
 0x8003

	)

366 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

367 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

368 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	tdøwcou¡
);

369 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
);

370 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

371 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

372 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

373 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

374 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

375 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

376 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

377 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

378 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

379 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

380 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

381 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

382 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

383 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

384 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

385 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

386 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

387 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

388 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

389 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

390 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

391 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

392 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

393 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

394 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

395 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

396 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

397 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

398 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

399 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

400 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

401 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

402 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

403 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

404 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

405 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

406 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

407 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

408 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

409 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

410 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

411 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

412 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

413 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

414 #ifde‡
GL_GLEXT_PROTOTYPES


415 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

416 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
døwcou¡
);

417 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
);

418 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

419 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

420 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

421 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

422 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
 
co‹d
);

423 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *
co‹d
);

424 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
 
co‹d
);

425 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *
co‹d
);

426 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

427 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

428 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *
v
);

429 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

430 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *
v
);

431 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

432 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *
v
);

433 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

434 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *
v
);

435 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

436 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *
v
);

437 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

438 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *
v
);

439 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

440 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *
v
);

441 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

442 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *
v
);

443 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

444 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

445 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *
v
);

446 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

447 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *
v
);

448 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
 
x
, GLöà
y
);

449 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *
v
);

450 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

451 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *
v
);

452 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

453 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *
v
);

454 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

455 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *
v
);

456 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

457 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *
v
);

458 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

459 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *
v
);

460 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

461 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
 
mode
);

465 #i‚de‡
GL_VERSION_1_5


466 
	#GL_VERSION_1_5
 1

	)

467 
	~<°ddef.h
>

468 
±rdiff_t
 
	tGLsizeùå
;

469 
±rdiff_t
 
	tGLöçå
;

470 
	#GL_BUFFER_SIZE
 0x8764

	)

471 
	#GL_BUFFER_USAGE
 0x8765

	)

472 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

473 
	#GL_CURRENT_QUERY
 0x8865

	)

474 
	#GL_QUERY_RESULT
 0x8866

	)

475 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

476 
	#GL_ARRAY_BUFFER
 0x8892

	)

477 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

478 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

479 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

480 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

481 
	#GL_READ_ONLY
 0x88B8

	)

482 
	#GL_WRITE_ONLY
 0x88B9

	)

483 
	#GL_READ_WRITE
 0x88BA

	)

484 
	#GL_BUFFER_ACCESS
 0x88BB

	)

485 
	#GL_BUFFER_MAPPED
 0x88BC

	)

486 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

487 
	#GL_STREAM_DRAW
 0x88E0

	)

488 
	#GL_STREAM_READ
 0x88E1

	)

489 
	#GL_STREAM_COPY
 0x88E2

	)

490 
	#GL_STATIC_DRAW
 0x88E4

	)

491 
	#GL_STATIC_READ
 0x88E5

	)

492 
	#GL_STATIC_COPY
 0x88E6

	)

493 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

494 
	#GL_DYNAMIC_READ
 0x88E9

	)

495 
	#GL_DYNAMIC_COPY
 0x88EA

	)

496 
	#GL_SAMPLES_PASSED
 0x8914

	)

497 
	#GL_SRC1_ALPHA
 0x8589

	)

498 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

499 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

500 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

501 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

502 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

503 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

504 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

505 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

506 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

507 
	#GL_FOG_COORD_SRC
 0x8450

	)

508 
	#GL_FOG_COORD
 0x8451

	)

509 
	#GL_CURRENT_FOG_COORD
 0x8453

	)

510 
	#GL_FOG_COORD_ARRAY_TYPE
 0x8454

	)

511 
	#GL_FOG_COORD_ARRAY_STRIDE
 0x8455

	)

512 
	#GL_FOG_COORD_ARRAY_POINTER
 0x8456

	)

513 
	#GL_FOG_COORD_ARRAY
 0x8457

	)

514 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 0x889D

	)

515 
	#GL_SRC0_RGB
 0x8580

	)

516 
	#GL_SRC1_RGB
 0x8581

	)

517 
	#GL_SRC2_RGB
 0x8582

	)

518 
	#GL_SRC0_ALPHA
 0x8588

	)

519 
	#GL_SRC2_ALPHA
 0x858A

	)

520 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

521 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

522 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

523 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

524 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

525 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

526 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

527 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

528 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

529 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

530 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

531 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

532 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

533 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

534 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

535 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

536 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

537 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

538 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

539 #ifde‡
GL_GLEXT_PROTOTYPES


540 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

541 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

542 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
 
id
);

543 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

544 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
 
èrgë
);

545 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

546 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

547 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

548 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

549 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

550 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

551 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

552 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

553 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

554 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

555 
GLAPI
 *
APIENTRY
 
glM≠Buf„r
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

556 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
 
èrgë
);

557 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

558 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

562 #i‚de‡
GL_VERSION_2_0


563 
	#GL_VERSION_2_0
 1

	)

564 
	tGLch¨
;

565 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

566 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

567 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

568 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

569 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

570 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

571 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

572 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

573 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

574 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

575 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

576 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

577 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

578 
	#GL_DRAW_BUFFER0
 0x8825

	)

579 
	#GL_DRAW_BUFFER1
 0x8826

	)

580 
	#GL_DRAW_BUFFER2
 0x8827

	)

581 
	#GL_DRAW_BUFFER3
 0x8828

	)

582 
	#GL_DRAW_BUFFER4
 0x8829

	)

583 
	#GL_DRAW_BUFFER5
 0x882A

	)

584 
	#GL_DRAW_BUFFER6
 0x882B

	)

585 
	#GL_DRAW_BUFFER7
 0x882C

	)

586 
	#GL_DRAW_BUFFER8
 0x882D

	)

587 
	#GL_DRAW_BUFFER9
 0x882E

	)

588 
	#GL_DRAW_BUFFER10
 0x882F

	)

589 
	#GL_DRAW_BUFFER11
 0x8830

	)

590 
	#GL_DRAW_BUFFER12
 0x8831

	)

591 
	#GL_DRAW_BUFFER13
 0x8832

	)

592 
	#GL_DRAW_BUFFER14
 0x8833

	)

593 
	#GL_DRAW_BUFFER15
 0x8834

	)

594 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

595 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

596 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

597 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

598 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

599 
	#GL_VERTEX_SHADER
 0x8B31

	)

600 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

601 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

602 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

603 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

604 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

605 
	#GL_SHADER_TYPE
 0x8B4F

	)

606 
	#GL_FLOAT_VEC2
 0x8B50

	)

607 
	#GL_FLOAT_VEC3
 0x8B51

	)

608 
	#GL_FLOAT_VEC4
 0x8B52

	)

609 
	#GL_INT_VEC2
 0x8B53

	)

610 
	#GL_INT_VEC3
 0x8B54

	)

611 
	#GL_INT_VEC4
 0x8B55

	)

612 
	#GL_BOOL
 0x8B56

	)

613 
	#GL_BOOL_VEC2
 0x8B57

	)

614 
	#GL_BOOL_VEC3
 0x8B58

	)

615 
	#GL_BOOL_VEC4
 0x8B59

	)

616 
	#GL_FLOAT_MAT2
 0x8B5A

	)

617 
	#GL_FLOAT_MAT3
 0x8B5B

	)

618 
	#GL_FLOAT_MAT4
 0x8B5C

	)

619 
	#GL_SAMPLER_1D
 0x8B5D

	)

620 
	#GL_SAMPLER_2D
 0x8B5E

	)

621 
	#GL_SAMPLER_3D
 0x8B5F

	)

622 
	#GL_SAMPLER_CUBE
 0x8B60

	)

623 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

624 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

625 
	#GL_DELETE_STATUS
 0x8B80

	)

626 
	#GL_COMPILE_STATUS
 0x8B81

	)

627 
	#GL_LINK_STATUS
 0x8B82

	)

628 
	#GL_VALIDATE_STATUS
 0x8B83

	)

629 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

630 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

631 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

632 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

633 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

634 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

635 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

636 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

637 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

638 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

639 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

640 
	#GL_LOWER_LEFT
 0x8CA1

	)

641 
	#GL_UPPER_LEFT
 0x8CA2

	)

642 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

643 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

644 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

645 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

646 
	#GL_POINT_SPRITE
 0x8861

	)

647 
	#GL_COORD_REPLACE
 0x8862

	)

648 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

649 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

650 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

651 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

652 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

653 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

654 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

655 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

656 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

657 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

658 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

659 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

660 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

661 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

662 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

663 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

664 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

665 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

666 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tshadîs
);

667 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

668 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

669 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

670 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

671 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

672 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

673 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

674 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

675 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

676 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

677 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

678 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

679 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

680 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

681 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

682 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

683 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

684 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

685 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

686 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

687 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

688 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

689 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

690 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

691 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

692 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

693 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

694 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

695 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

696 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

697 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

698 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

699 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

700 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

701 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

702 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

703 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

704 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

705 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

706 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

707 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

708 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

709 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

710 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

711 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

712 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

713 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

714 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

715 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

716 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

717 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

718 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

719 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

720 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

721 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

722 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

723 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

724 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

725 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

726 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

727 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

728 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

729 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

730 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

731 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

732 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

733 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

734 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

735 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

736 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

737 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

738 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

739 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

740 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

741 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

742 #ifde‡
GL_GLEXT_PROTOTYPES


743 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

744 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

745 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

746 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

747 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

748 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

749 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

750 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

751 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

752 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

753 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

754 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

755 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

756 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

757 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

758 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

759 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

760 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLuöà*
shadîs
);

761 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

762 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

763 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

764 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

765 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

766 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
sour˚
);

767 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

768 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

769 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

770 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

771 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

772 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

773 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

774 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

775 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

776 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

777 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rög
, c⁄° 
GLöt
 *
Àngth
);

778 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

779 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

780 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

781 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

782 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

783 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

784 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

785 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

786 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

787 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

788 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

789 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

790 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

791 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

792 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

793 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

794 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

795 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

796 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

797 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

798 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

799 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

800 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

801 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

802 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

803 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

804 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

805 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

806 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

807 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

808 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

809 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

810 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

811 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

812 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

813 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

814 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

815 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

816 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

817 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

818 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

819 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

820 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

821 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

822 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

823 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

824 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

825 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

826 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

827 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

828 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

829 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

830 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

831 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

832 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

833 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

834 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

835 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

839 #i‚de‡
GL_VERSION_2_1


840 
	#GL_VERSION_2_1
 1

	)

841 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

842 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

843 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

844 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

845 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

846 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

847 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

848 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

849 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

850 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

851 
	#GL_SRGB
 0x8C40

	)

852 
	#GL_SRGB8
 0x8C41

	)

853 
	#GL_SRGB_ALPHA
 0x8C42

	)

854 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

855 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

856 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

857 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

858 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

859 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

860 
	#GL_SLUMINANCE
 0x8C46

	)

861 
	#GL_SLUMINANCE8
 0x8C47

	)

862 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

863 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

864 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

865 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

866 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

867 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

868 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

869 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

870 #ifde‡
GL_GLEXT_PROTOTYPES


871 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

872 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

873 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

874 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

875 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

876 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

880 #i‚de‡
GL_VERSION_3_0


881 
	#GL_VERSION_3_0
 1

	)

882 
	tGLhÆf
;

883 
	#GL_COMPARE_REF_TO_TEXTURE
 0x884E

	)

884 
	#GL_CLIP_DISTANCE0
 0x3000

	)

885 
	#GL_CLIP_DISTANCE1
 0x3001

	)

886 
	#GL_CLIP_DISTANCE2
 0x3002

	)

887 
	#GL_CLIP_DISTANCE3
 0x3003

	)

888 
	#GL_CLIP_DISTANCE4
 0x3004

	)

889 
	#GL_CLIP_DISTANCE5
 0x3005

	)

890 
	#GL_CLIP_DISTANCE6
 0x3006

	)

891 
	#GL_CLIP_DISTANCE7
 0x3007

	)

892 
	#GL_MAX_CLIP_DISTANCES
 0x0D32

	)

893 
	#GL_MAJOR_VERSION
 0x821B

	)

894 
	#GL_MINOR_VERSION
 0x821C

	)

895 
	#GL_NUM_EXTENSIONS
 0x821D

	)

896 
	#GL_CONTEXT_FLAGS
 0x821E

	)

897 
	#GL_COMPRESSED_RED
 0x8225

	)

898 
	#GL_COMPRESSED_RG
 0x8226

	)

899 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x00000001

	)

900 
	#GL_RGBA32F
 0x8814

	)

901 
	#GL_RGB32F
 0x8815

	)

902 
	#GL_RGBA16F
 0x881A

	)

903 
	#GL_RGB16F
 0x881B

	)

904 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

905 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

906 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

907 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

908 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

909 
	#GL_FIXED_ONLY
 0x891D

	)

910 
	#GL_MAX_VARYING_COMPONENTS
 0x8B4B

	)

911 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

912 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

913 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

914 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

915 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

916 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

917 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

918 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

919 
	#GL_RGB9_E5
 0x8C3D

	)

920 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

921 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

922 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

923 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

924 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

925 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

926 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

927 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

928 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

929 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

930 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

931 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

932 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

933 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

934 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

935 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

936 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

937 
	#GL_RGBA32UI
 0x8D70

	)

938 
	#GL_RGB32UI
 0x8D71

	)

939 
	#GL_RGBA16UI
 0x8D76

	)

940 
	#GL_RGB16UI
 0x8D77

	)

941 
	#GL_RGBA8UI
 0x8D7C

	)

942 
	#GL_RGB8UI
 0x8D7D

	)

943 
	#GL_RGBA32I
 0x8D82

	)

944 
	#GL_RGB32I
 0x8D83

	)

945 
	#GL_RGBA16I
 0x8D88

	)

946 
	#GL_RGB16I
 0x8D89

	)

947 
	#GL_RGBA8I
 0x8D8E

	)

948 
	#GL_RGB8I
 0x8D8F

	)

949 
	#GL_RED_INTEGER
 0x8D94

	)

950 
	#GL_GREEN_INTEGER
 0x8D95

	)

951 
	#GL_BLUE_INTEGER
 0x8D96

	)

952 
	#GL_RGB_INTEGER
 0x8D98

	)

953 
	#GL_RGBA_INTEGER
 0x8D99

	)

954 
	#GL_BGR_INTEGER
 0x8D9A

	)

955 
	#GL_BGRA_INTEGER
 0x8D9B

	)

956 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

957 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

958 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

959 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

960 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

961 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

962 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

963 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

964 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

965 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

966 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

967 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

968 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

969 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

970 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

971 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

972 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

973 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

974 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

975 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

976 
	#GL_QUERY_WAIT
 0x8E13

	)

977 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

978 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

979 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

980 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

981 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

982 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

983 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

984 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

985 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

986 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

987 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

988 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

989 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

990 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

991 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

992 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

993 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

994 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

995 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

996 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

997 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

998 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

999 
	#GL_DEPTH_STENCIL
 0x84F9

	)

1000 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

1001 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

1002 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

1003 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

1004 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

1005 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

1006 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

1007 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

1008 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

1009 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

1010 
	#GL_DRAW_FRAMEBUFFER_BINDING
 0x8CA6

	)

1011 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

1012 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

1013 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

1014 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

1015 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

1016 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

1017 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

1018 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

1019 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

1020 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

1021 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

1022 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

1023 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

1024 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

1025 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

1026 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

1027 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

1028 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

1029 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

1030 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

1031 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

1032 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

1033 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

1034 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

1035 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

1036 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

1037 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

1038 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

1039 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

1040 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

1041 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

1042 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

1043 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

1044 
	#GL_COLOR_ATTACHMENT16
 0x8CF0

	)

1045 
	#GL_COLOR_ATTACHMENT17
 0x8CF1

	)

1046 
	#GL_COLOR_ATTACHMENT18
 0x8CF2

	)

1047 
	#GL_COLOR_ATTACHMENT19
 0x8CF3

	)

1048 
	#GL_COLOR_ATTACHMENT20
 0x8CF4

	)

1049 
	#GL_COLOR_ATTACHMENT21
 0x8CF5

	)

1050 
	#GL_COLOR_ATTACHMENT22
 0x8CF6

	)

1051 
	#GL_COLOR_ATTACHMENT23
 0x8CF7

	)

1052 
	#GL_COLOR_ATTACHMENT24
 0x8CF8

	)

1053 
	#GL_COLOR_ATTACHMENT25
 0x8CF9

	)

1054 
	#GL_COLOR_ATTACHMENT26
 0x8CFA

	)

1055 
	#GL_COLOR_ATTACHMENT27
 0x8CFB

	)

1056 
	#GL_COLOR_ATTACHMENT28
 0x8CFC

	)

1057 
	#GL_COLOR_ATTACHMENT29
 0x8CFD

	)

1058 
	#GL_COLOR_ATTACHMENT30
 0x8CFE

	)

1059 
	#GL_COLOR_ATTACHMENT31
 0x8CFF

	)

1060 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

1061 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

1062 
	#GL_FRAMEBUFFER
 0x8D40

	)

1063 
	#GL_RENDERBUFFER
 0x8D41

	)

1064 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

1065 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

1066 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

1067 
	#GL_STENCIL_INDEX1
 0x8D46

	)

1068 
	#GL_STENCIL_INDEX4
 0x8D47

	)

1069 
	#GL_STENCIL_INDEX8
 0x8D48

	)

1070 
	#GL_STENCIL_INDEX16
 0x8D49

	)

1071 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

1072 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

1073 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

1074 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

1075 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

1076 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

1077 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

1078 
	#GL_MAX_SAMPLES
 0x8D57

	)

1079 
	#GL_INDEX
 0x8222

	)

1080 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

1081 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

1082 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

1083 
	#GL_HALF_FLOAT
 0x140B

	)

1084 
	#GL_MAP_READ_BIT
 0x0001

	)

1085 
	#GL_MAP_WRITE_BIT
 0x0002

	)

1086 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

1087 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

1088 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

1089 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

1090 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

1091 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

1092 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

1093 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

1094 
	#GL_RG
 0x8227

	)

1095 
	#GL_RG_INTEGER
 0x8228

	)

1096 
	#GL_R8
 0x8229

	)

1097 
	#GL_R16
 0x822A

	)

1098 
	#GL_RG8
 0x822B

	)

1099 
	#GL_RG16
 0x822C

	)

1100 
	#GL_R16F
 0x822D

	)

1101 
	#GL_R32F
 0x822E

	)

1102 
	#GL_RG16F
 0x822F

	)

1103 
	#GL_RG32F
 0x8230

	)

1104 
	#GL_R8I
 0x8231

	)

1105 
	#GL_R8UI
 0x8232

	)

1106 
	#GL_R16I
 0x8233

	)

1107 
	#GL_R16UI
 0x8234

	)

1108 
	#GL_R32I
 0x8235

	)

1109 
	#GL_R32UI
 0x8236

	)

1110 
	#GL_RG8I
 0x8237

	)

1111 
	#GL_RG8UI
 0x8238

	)

1112 
	#GL_RG16I
 0x8239

	)

1113 
	#GL_RG16UI
 0x823A

	)

1114 
	#GL_RG32I
 0x823B

	)

1115 
	#GL_RG32UI
 0x823C

	)

1116 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

1117 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

1118 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

1119 
	#GL_ALPHA_INTEGER
 0x8D97

	)

1120 (
APIENTRYP
 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

1121 (
APIENTRYP
 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

1122 (
APIENTRYP
 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

1123 (
APIENTRYP
 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1124 (
APIENTRYP
 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1125 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1126 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

1127 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

1128 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

1129 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

1130 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

1131 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

1132 (
APIENTRYP
 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

1133 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

1134 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

1135 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1136 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1137 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1138 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

1139 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

1140 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

1141 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

1142 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

1143 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

1144 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

1145 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

1146 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1147 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1148 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1149 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1150 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1151 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1152 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1153 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1154 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

1155 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

1156 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

1157 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

1158 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

1159 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

1160 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1161 (
APIENTRYP
 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

1162 (
APIENTRYP
 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

1163 (
APIENTRYP
 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1164 (
APIENTRYP
 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1165 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1166 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1167 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1168 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1169 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

1170 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

1171 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1172 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

1173 (
APIENTRYP
 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

1174 (
APIENTRYP
 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1175 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1176 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

1177 c⁄° 
	tGLubyã
 *(
	tAPIENTRYP
 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
 
	t«me
, 
	tGLuöt
 
	tödex
);

1178 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

1179 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

1180 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

1181 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

1182 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1183 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1184 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

1185 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

1186 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

1187 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

1188 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

1189 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1190 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1191 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

1192 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

1193 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1194 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

1195 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

1196 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1197 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

1198 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

1199 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

1200 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1201 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

1202 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

1203 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1204 #ifde‡
GL_GLEXT_PROTOTYPES


1205 
GLAPI
 
APIENTRY
 
glCﬁ‹Maski
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

1206 
GLAPI
 
APIENTRY
 
glGëBoﬁóni_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

1207 
GLAPI
 
APIENTRY
 
glGëI¡egîi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

1208 
GLAPI
 
APIENTRY
 
glE«bÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1209 
GLAPI
 
APIENTRY
 
glDißbÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1210 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1211 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdback
 (
GLíum
 
¥imôiveMode
);

1212 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdback
 ();

1213 
GLAPI
 
APIENTRY
 
glBödBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

1214 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

1215 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

1216 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yög
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

1217 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

1218 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídî
 (
GLuöt
 
id
, 
GLíum
 
mode
);

1219 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídî
 ();

1220 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

1221 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1222 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1223 
GLAPI
 
APIENTRY
 
glVîãxAâribI1i
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

1224 
GLAPI
 
APIENTRY
 
glVîãxAâribI2i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

1225 
GLAPI
 
APIENTRY
 
glVîãxAâribI3i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

1226 
GLAPI
 
APIENTRY
 
glVîãxAâribI4i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

1227 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ui
 (
GLuöt
 
ödex
, GLuöà
x
);

1228 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

1229 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

1230 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

1231 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1232 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1233 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1234 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1235 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1236 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1237 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1238 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1239 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

1240 
GLAPI
 
APIENTRY
 
glVîãxAâribI4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

1241 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

1242 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

1243 
GLAPI
 
APIENTRY
 
glGëUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

1244 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

1245 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1246 
GLAPI
 
APIENTRY
 
glUnif‹m1ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

1247 
GLAPI
 
APIENTRY
 
glUnif‹m2ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

1248 
GLAPI
 
APIENTRY
 
glUnif‹m3ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

1249 
GLAPI
 
APIENTRY
 
glUnif‹m4ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

1250 
GLAPI
 
APIENTRY
 
glUnif‹m1uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1251 
GLAPI
 
APIENTRY
 
glUnif‹m2uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1252 
GLAPI
 
APIENTRY
 
glUnif‹m3uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1253 
GLAPI
 
APIENTRY
 
glUnif‹m4uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1254 
GLAPI
 
APIENTRY
 
glTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1255 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

1256 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1257 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

1258 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„riv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

1259 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„ruiv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLuöt
 *
vÆue
);

1260 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

1261 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfi
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

1262 
GLAPI
 c⁄° 
GLubyã
 *
APIENTRY
 
glGëSåögi
 (
GLíum
 
«me
, 
GLuöt
 
ödex
);

1263 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

1264 
GLAPI
 
APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

1265 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

1266 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

1267 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

1268 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1269 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

1270 
GLAPI
 
APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

1271 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

1272 
GLAPI
 
APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

1273 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

1274 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1275 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1276 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

1277 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

1278 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1279 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

1280 
GLAPI
 
APIENTRY
 
glBlôFømebuf„r
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

1281 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1282 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayî
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

1283 
GLAPI
 *
APIENTRY
 
glM≠Buf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

1284 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

1285 
GLAPI
 
APIENTRY
 
glBödVîãxAºay
 (
GLuöt
 
¨øy
);

1286 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºays
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

1287 
GLAPI
 
APIENTRY
 
glGíVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

1288 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºay
 (
GLuöt
 
¨øy
);

1292 #i‚de‡
GL_VERSION_3_1


1293 
	#GL_VERSION_3_1
 1

	)

1294 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

1295 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

1296 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

1297 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

1298 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

1299 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

1300 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

1301 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

1302 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

1303 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

1304 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

1305 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

1306 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

1307 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

1308 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

1309 
	#GL_R8_SNORM
 0x8F94

	)

1310 
	#GL_RG8_SNORM
 0x8F95

	)

1311 
	#GL_RGB8_SNORM
 0x8F96

	)

1312 
	#GL_RGBA8_SNORM
 0x8F97

	)

1313 
	#GL_R16_SNORM
 0x8F98

	)

1314 
	#GL_RG16_SNORM
 0x8F99

	)

1315 
	#GL_RGB16_SNORM
 0x8F9A

	)

1316 
	#GL_RGBA16_SNORM
 0x8F9B

	)

1317 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

1318 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

1319 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

1320 
	#GL_COPY_READ_BUFFER
 0x8F36

	)

1321 
	#GL_COPY_WRITE_BUFFER
 0x8F37

	)

1322 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

1323 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

1324 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

1325 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

1326 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

1327 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

1328 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

1329 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

1330 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

1331 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

1332 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

1333 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

1334 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

1335 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

1336 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

1337 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

1338 
	#GL_UNIFORM_TYPE
 0x8A37

	)

1339 
	#GL_UNIFORM_SIZE
 0x8A38

	)

1340 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

1341 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

1342 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

1343 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

1344 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

1345 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

1346 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

1347 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

1348 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

1349 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

1350 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

1351 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

1352 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

1353 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

1354 
	#GL_INVALID_INDEX
 0xFFFFFFFFu

	)

1355 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
);

1356 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
);

1357 (
APIENTRYP
 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

1358 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
 
	tödex
);

1359 (
APIENTRYP
 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadT¨gë
, GLíum 
	twrôeT¨gë
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

1360 (
APIENTRYP
 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tunif‹mNames
, GLuöà*
	tunif‹mIndi˚s
);

1361 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöà*
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1362 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mName
);

1363 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	tunif‹mBlockName
);

1364 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1365 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mBlockName
);

1366 (
APIENTRYP
 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

1367 #ifde‡
GL_GLEXT_PROTOTYPES


1368 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚d
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
);

1369 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚d
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
);

1370 
GLAPI
 
APIENTRY
 
glTexBuf„r
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

1371 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndex
 (
GLuöt
 
ödex
);

1372 
GLAPI
 
APIENTRY
 
glC›yBuf„rSubD©a
 (
GLíum
 
ªadT¨gë
, GLíum 
wrôeT¨gë
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

1373 
GLAPI
 
APIENTRY
 
glGëUnif‹mIndi˚s
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° 
GLch¨
 *c⁄°*
unif‹mNames
, GLuöà*
unif‹mIndi˚s
);

1374 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹msiv
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° GLuöà*
unif‹mIndi˚s
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1375 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mName
);

1376 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëUnif‹mBlockIndex
 (GLuöà
¥ogøm
, c⁄° 
GLch¨
 *
unif‹mBlockName
);

1377 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockiv
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1378 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mBlockName
);

1379 
GLAPI
 
APIENTRY
 
glUnif‹mBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, GLuöà
unif‹mBlockBödög
);

1383 #i‚de‡
GL_VERSION_3_2


1384 
	#GL_VERSION_3_2
 1

	)

1385 
__GLsync
 *
	tGLsync
;

1386 #i‚de‡
GLEXT_64_TYPES_DEFINED


1388 
	#GLEXT_64_TYPES_DEFINED


	)

1391 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

1392 
	~<öây≥s.h
>

1393 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

1394 
	~<öây≥s.h
>

1395 #i‡
deföed
(
__STDC__
)

1396 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

1397 
	töt64_t
;

1398 
	tuöt64_t
;

1400 
	töt64_t
;

1401 
	tuöt64_t
;

1404 #ñi‡
deföed
–
__VMS
 ) || deföed(
__sgi
)

1405 
	~<öây≥s.h
>

1406 #ñi‡
deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

1407 
	~<°döt.h
>

1408 #ñi‡
deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

1409 
	töt32_t
;

1410 
	töt64_t
;

1411 
	tuöt64_t
;

1412 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

1413 
	~<°döt.h
>

1414 #ñi‡
deföed
(
_WIN32
)

1415 
__öt32
 
	töt32_t
;

1416 
__öt64
 
	töt64_t
;

1417 
	t__öt64
 
	tuöt64_t
;

1420 
	~<öây≥s.h
>

1423 
uöt64_t
 
	tGLuöt64
;

1424 
öt64_t
 
	tGLöt64
;

1425 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

1426 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

1427 
	#GL_LINES_ADJACENCY
 0x000A

	)

1428 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

1429 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

1430 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

1431 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

1432 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

1433 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

1434 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

1435 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

1436 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

1437 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

1438 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

1439 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

1440 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

1441 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

1442 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

1443 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

1444 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

1445 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

1446 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

1447 
	#GL_DEPTH_CLAMP
 0x864F

	)

1448 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

1449 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

1450 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

1451 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

1452 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

1453 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

1454 
	#GL_OBJECT_TYPE
 0x9112

	)

1455 
	#GL_SYNC_CONDITION
 0x9113

	)

1456 
	#GL_SYNC_STATUS
 0x9114

	)

1457 
	#GL_SYNC_FLAGS
 0x9115

	)

1458 
	#GL_SYNC_FENCE
 0x9116

	)

1459 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

1460 
	#GL_UNSIGNALED
 0x9118

	)

1461 
	#GL_SIGNALED
 0x9119

	)

1462 
	#GL_ALREADY_SIGNALED
 0x911A

	)

1463 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

1464 
	#GL_CONDITION_SATISFIED
 0x911C

	)

1465 
	#GL_WAIT_FAILED
 0x911D

	)

1466 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFFuŒ

	)

1467 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

1468 
	#GL_SAMPLE_POSITION
 0x8E50

	)

1469 
	#GL_SAMPLE_MASK
 0x8E51

	)

1470 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

1471 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

1472 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

1473 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

1474 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

1475 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

1476 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

1477 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

1478 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

1479 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

1480 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

1481 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

1482 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

1483 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

1484 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

1485 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

1486 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

1487 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

1488 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

1489 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1490 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1491 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
);

1492 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
, c⁄° 
	tGLöt
 *
	tba£vîãx
);

1493 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

1494 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

1495 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 
	tsync
);

1496 (
APIENTRYP
 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 
	tsync
);

1497 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1498 (
APIENTRYP
 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1499 (
APIENTRYP
 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	td©a
);

1500 (
APIENTRYP
 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

1501 (
APIENTRYP
 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt64
 *
	td©a
);

1502 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1503 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1504 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1505 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1506 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

1507 (
APIENTRYP
 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tmaskNumbî
, 
	tGLbôfõld
 
	tmask
);

1508 #ifde‡
GL_GLEXT_PROTOTYPES


1509 
GLAPI
 
APIENTRY
 
glDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1510 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1511 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
);

1512 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
, c⁄° 
GLöt
 *
ba£vîãx
);

1513 
GLAPI
 
APIENTRY
 
glProvokögVîãx
 (
GLíum
 
mode
);

1514 
GLAPI
 
GLsync
 
APIENTRY
 
glFí˚Sync
 (
GLíum
 
c⁄dôi⁄
, 
GLbôfõld
 
Êags
);

1515 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSync
 (
GLsync
 
sync
);

1516 
GLAPI
 
APIENTRY
 
glDñëeSync
 (
GLsync
 
sync
);

1517 
GLAPI
 
GLíum
 
APIENTRY
 
glClõ¡WaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1518 
GLAPI
 
APIENTRY
 
glWaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1519 
GLAPI
 
APIENTRY
 
glGëI¡egî64v
 (
GLíum
 
≤ame
, 
GLöt64
 *
d©a
);

1520 
GLAPI
 
APIENTRY
 
glGëSynciv
 (
GLsync
 
sync
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

1521 
GLAPI
 
APIENTRY
 
glGëI¡egî64i_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt64
 *
d©a
);

1522 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîi64v
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt64
 *
∑øms
);

1523 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1524 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1525 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1526 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efv
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

1527 
GLAPI
 
APIENTRY
 
glSam∂eMaski
 (
GLuöt
 
maskNumbî
, 
GLbôfõld
 
mask
);

1531 #i‚de‡
GL_VERSION_3_3


1532 
	#GL_VERSION_3_3
 1

	)

1533 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR
 0x88FE

	)

1534 
	#GL_SRC1_COLOR
 0x88F9

	)

1535 
	#GL_ONE_MINUS_SRC1_COLOR
 0x88FA

	)

1536 
	#GL_ONE_MINUS_SRC1_ALPHA
 0x88FB

	)

1537 
	#GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
 0x88FC

	)

1538 
	#GL_ANY_SAMPLES_PASSED
 0x8C2F

	)

1539 
	#GL_SAMPLER_BINDING
 0x8919

	)

1540 
	#GL_RGB10_A2UI
 0x906F

	)

1541 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

1542 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

1543 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

1544 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

1545 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

1546 
	#GL_TIME_ELAPSED
 0x88BF

	)

1547 
	#GL_TIMESTAMP
 0x8E28

	)

1548 
	#GL_INT_2_10_10_10_REV
 0x8D9F

	)

1549 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONINDEXEDPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹Numbî
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

1550 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATAINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1551 (
APIENTRYP
 
	tPFNGLGENSAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, 
	tGLuöt
 *
	tßm∂îs
);

1552 (
APIENTRYP
 
	tPFNGLDELETESAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tßm∂îs
);

1553 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSAMPLERPROC
Ë(
	tGLuöt
 
	tßm∂î
);

1554 (
APIENTRYP
 
	tPFNGLBINDSAMPLERPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tßm∂î
);

1555 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

1556 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1557 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

1558 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

1559 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1560 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øm
);

1561 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1562 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1563 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

1564 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1565 (
APIENTRYP
 
	tPFNGLQUERYCOUNTERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

1566 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1567 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

1568 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

1569 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1570 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1571 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1572 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1573 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1574 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1575 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1576 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1577 (
APIENTRYP
 
	tPFNGLVERTEXP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1578 (
APIENTRYP
 
	tPFNGLVERTEXP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1579 (
APIENTRYP
 
	tPFNGLVERTEXP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1580 (
APIENTRYP
 
	tPFNGLVERTEXP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1581 (
APIENTRYP
 
	tPFNGLVERTEXP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1582 (
APIENTRYP
 
	tPFNGLVERTEXP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1583 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1584 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1585 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1586 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1587 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1588 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1589 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1590 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1591 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1592 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1593 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1594 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1595 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1596 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1597 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1598 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1599 (
APIENTRYP
 
	tPFNGLNORMALP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1600 (
APIENTRYP
 
	tPFNGLNORMALP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1601 (
APIENTRYP
 
	tPFNGLCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1602 (
APIENTRYP
 
	tPFNGLCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1603 (
APIENTRYP
 
	tPFNGLCOLORP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1604 (
APIENTRYP
 
	tPFNGLCOLORP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1605 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1606 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1607 #ifde‡
GL_GLEXT_PROTOTYPES


1608 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄Indexed
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹Numbî
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

1609 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aIndex
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1610 
GLAPI
 
APIENTRY
 
glGíSam∂îs
 (
GLsizei
 
cou¡
, 
GLuöt
 *
ßm∂îs
);

1611 
GLAPI
 
APIENTRY
 
glDñëeSam∂îs
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ßm∂îs
);

1612 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSam∂î
 (
GLuöt
 
ßm∂î
);

1613 
GLAPI
 
APIENTRY
 
glBödSam∂î
 (
GLuöt
 
unô
, GLuöà
ßm∂î
);

1614 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîi
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

1615 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1616 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîf
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

1617 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

1618 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1619 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øm
);

1620 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1621 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1622 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1623 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1624 
GLAPI
 
APIENTRY
 
glQuîyCou¡î
 (
GLuöt
 
id
, 
GLíum
 
èrgë
);

1625 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

1626 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

1627 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

1628 
GLAPI
 
APIENTRY
 
glVîãxAâribP1ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1629 
GLAPI
 
APIENTRY
 
glVîãxAâribP1uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1630 
GLAPI
 
APIENTRY
 
glVîãxAâribP2ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1631 
GLAPI
 
APIENTRY
 
glVîãxAâribP2uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1632 
GLAPI
 
APIENTRY
 
glVîãxAâribP3ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1633 
GLAPI
 
APIENTRY
 
glVîãxAâribP3uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1634 
GLAPI
 
APIENTRY
 
glVîãxAâribP4ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1635 
GLAPI
 
APIENTRY
 
glVîãxAâribP4uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1636 
GLAPI
 
APIENTRY
 
glVîãxP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1637 
GLAPI
 
APIENTRY
 
glVîãxP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1638 
GLAPI
 
APIENTRY
 
glVîãxP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1639 
GLAPI
 
APIENTRY
 
glVîãxP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1640 
GLAPI
 
APIENTRY
 
glVîãxP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1641 
GLAPI
 
APIENTRY
 
glVîãxP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1642 
GLAPI
 
APIENTRY
 
glTexCo‹dP1ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1643 
GLAPI
 
APIENTRY
 
glTexCo‹dP1uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1644 
GLAPI
 
APIENTRY
 
glTexCo‹dP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1645 
GLAPI
 
APIENTRY
 
glTexCo‹dP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1646 
GLAPI
 
APIENTRY
 
glTexCo‹dP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1647 
GLAPI
 
APIENTRY
 
glTexCo‹dP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1648 
GLAPI
 
APIENTRY
 
glTexCo‹dP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1649 
GLAPI
 
APIENTRY
 
glTexCo‹dP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1650 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1651 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1652 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1653 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1654 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1655 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1656 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1657 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1658 
GLAPI
 
APIENTRY
 
glN‹mÆP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1659 
GLAPI
 
APIENTRY
 
glN‹mÆP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1660 
GLAPI
 
APIENTRY
 
glCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1661 
GLAPI
 
APIENTRY
 
glCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1662 
GLAPI
 
APIENTRY
 
glCﬁ‹P4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1663 
GLAPI
 
APIENTRY
 
glCﬁ‹P4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1664 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1665 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1669 #i‚de‡
GL_VERSION_4_0


1670 
	#GL_VERSION_4_0
 1

	)

1671 
	#GL_SAMPLE_SHADING
 0x8C36

	)

1672 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

1673 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

1674 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

1675 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

1676 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

1677 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

1678 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

1679 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

1680 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

1681 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

1682 
	#GL_DRAW_INDIRECT_BUFFER
 0x8F3F

	)

1683 
	#GL_DRAW_INDIRECT_BUFFER_BINDING
 0x8F43

	)

1684 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

1685 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

1686 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

1687 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

1688 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

1689 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

1690 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

1691 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

1692 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

1693 
	#GL_DOUBLE_MAT2
 0x8F46

	)

1694 
	#GL_DOUBLE_MAT3
 0x8F47

	)

1695 
	#GL_DOUBLE_MAT4
 0x8F48

	)

1696 
	#GL_DOUBLE_MAT2x3
 0x8F49

	)

1697 
	#GL_DOUBLE_MAT2x4
 0x8F4A

	)

1698 
	#GL_DOUBLE_MAT3x2
 0x8F4B

	)

1699 
	#GL_DOUBLE_MAT3x4
 0x8F4C

	)

1700 
	#GL_DOUBLE_MAT4x2
 0x8F4D

	)

1701 
	#GL_DOUBLE_MAT4x3
 0x8F4E

	)

1702 
	#GL_ACTIVE_SUBROUTINES
 0x8DE5

	)

1703 
	#GL_ACTIVE_SUBROUTINE_UNIFORMS
 0x8DE6

	)

1704 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
 0x8E47

	)

1705 
	#GL_ACTIVE_SUBROUTINE_MAX_LENGTH
 0x8E48

	)

1706 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
 0x8E49

	)

1707 
	#GL_MAX_SUBROUTINES
 0x8DE7

	)

1708 
	#GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
 0x8DE8

	)

1709 
	#GL_NUM_COMPATIBLE_SUBROUTINES
 0x8E4A

	)

1710 
	#GL_COMPATIBLE_SUBROUTINES
 0x8E4B

	)

1711 
	#GL_PATCHES
 0x000E

	)

1712 
	#GL_PATCH_VERTICES
 0x8E72

	)

1713 
	#GL_PATCH_DEFAULT_INNER_LEVEL
 0x8E73

	)

1714 
	#GL_PATCH_DEFAULT_OUTER_LEVEL
 0x8E74

	)

1715 
	#GL_TESS_CONTROL_OUTPUT_VERTICES
 0x8E75

	)

1716 
	#GL_TESS_GEN_MODE
 0x8E76

	)

1717 
	#GL_TESS_GEN_SPACING
 0x8E77

	)

1718 
	#GL_TESS_GEN_VERTEX_ORDER
 0x8E78

	)

1719 
	#GL_TESS_GEN_POINT_MODE
 0x8E79

	)

1720 
	#GL_ISOLINES
 0x8E7A

	)

1721 
	#GL_FRACTIONAL_ODD
 0x8E7B

	)

1722 
	#GL_FRACTIONAL_EVEN
 0x8E7C

	)

1723 
	#GL_MAX_PATCH_VERTICES
 0x8E7D

	)

1724 
	#GL_MAX_TESS_GEN_LEVEL
 0x8E7E

	)

1725 
	#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E7F

	)

1726 
	#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E80

	)

1727 
	#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
 0x8E81

	)

1728 
	#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
 0x8E82

	)

1729 
	#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
 0x8E83

	)

1730 
	#GL_MAX_TESS_PATCH_COMPONENTS
 0x8E84

	)

1731 
	#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
 0x8E85

	)

1732 
	#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
 0x8E86

	)

1733 
	#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
 0x8E89

	)

1734 
	#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
 0x8E8A

	)

1735 
	#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
 0x886C

	)

1736 
	#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
 0x886D

	)

1737 
	#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E1E

	)

1738 
	#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E1F

	)

1739 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
 0x84F0

	)

1740 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x84F1

	)

1741 
	#GL_TESS_EVALUATION_SHADER
 0x8E87

	)

1742 
	#GL_TESS_CONTROL_SHADER
 0x8E88

	)

1743 
	#GL_TRANSFORM_FEEDBACK
 0x8E22

	)

1744 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
 0x8E23

	)

1745 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
 0x8E24

	)

1746 
	#GL_TRANSFORM_FEEDBACK_BINDING
 0x8E25

	)

1747 
	#GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
 0x8E70

	)

1748 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

1749 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

1750 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

1751 (
APIENTRYP
 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

1752 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

1753 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
);

1754 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
);

1755 (
APIENTRYP
 
	tPFNGLUNIFORM1DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

1756 (
APIENTRYP
 
	tPFNGLUNIFORM2DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1757 (
APIENTRYP
 
	tPFNGLUNIFORM3DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1758 (
APIENTRYP
 
	tPFNGLUNIFORM4DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1759 (
APIENTRYP
 
	tPFNGLUNIFORM1DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1760 (
APIENTRYP
 
	tPFNGLUNIFORM2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1761 (
APIENTRYP
 
	tPFNGLUNIFORM3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1762 (
APIENTRYP
 
	tPFNGLUNIFORM4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1763 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1764 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1765 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1766 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1767 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1768 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1769 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1770 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1771 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1772 (
APIENTRYP
 
	tPFNGLGETUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 *
	t∑øms
);

1773 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1774 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1775 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1776 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1777 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1778 (
APIENTRYP
 
	tPFNGLUNIFORMSUBROUTINESUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

1779 (
APIENTRYP
 
	tPFNGLGETUNIFORMSUBROUTINEUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 *
	t∑øms
);

1780 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTAGEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1781 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1782 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆues
);

1783 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

1784 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

1785 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

1786 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKPROC
Ë(
	tGLuöt
 
	tid
);

1787 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKPROC
) ();

1788 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKPROC
) ();

1789 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

1790 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
);

1791 (
APIENTRYP
 
	tPFNGLBEGINQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tid
);

1792 (
APIENTRYP
 
	tPFNGLENDQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1793 (
APIENTRYP
 
	tPFNGLGETQUERYINDEXEDIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1794 #ifde‡
GL_GLEXT_PROTOTYPES


1795 
GLAPI
 
APIENTRY
 
glMöSam∂eShadög
 (
GLÊﬂt
 
vÆue
);

1796 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄i
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

1797 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

1798 
GLAPI
 
APIENTRY
 
glBÀndFunci
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

1799 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

1800 
GLAPI
 
APIENTRY
 
glDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
);

1801 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
);

1802 
GLAPI
 
APIENTRY
 
glUnif‹m1d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

1803 
GLAPI
 
APIENTRY
 
glUnif‹m2d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

1804 
GLAPI
 
APIENTRY
 
glUnif‹m3d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1805 
GLAPI
 
APIENTRY
 
glUnif‹m4d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

1806 
GLAPI
 
APIENTRY
 
glUnif‹m1dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1807 
GLAPI
 
APIENTRY
 
glUnif‹m2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1808 
GLAPI
 
APIENTRY
 
glUnif‹m3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1809 
GLAPI
 
APIENTRY
 
glUnif‹m4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1810 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1811 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1812 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1813 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1814 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1815 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1816 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1817 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1818 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1819 
GLAPI
 
APIENTRY
 
glGëUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 *
∑øms
);

1820 
GLAPI
 
GLöt
 
APIENTRY
 
glGëSubroutöeUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1821 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëSubroutöeIndex
 (GLuöà
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1822 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1823 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹mName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1824 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1825 
GLAPI
 
APIENTRY
 
glUnif‹mSubroutöesuiv
 (
GLíum
 
shadîty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ödi˚s
);

1826 
GLAPI
 
APIENTRY
 
glGëUnif‹mSubroutöeuiv
 (
GLíum
 
shadîty≥
, 
GLöt
 
loˇti⁄
, 
GLuöt
 *
∑øms
);

1827 
GLAPI
 
APIENTRY
 
glGëProgømSègeiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1828 
GLAPI
 
APIENTRY
 
glP©chP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1829 
GLAPI
 
APIENTRY
 
glP©chP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆues
);

1830 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdback
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

1831 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacks
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

1832 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

1833 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdback
 (
GLuöt
 
id
);

1834 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdback
 ();

1835 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdback
 ();

1836 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdback
 (
GLíum
 
mode
, 
GLuöt
 
id
);

1837 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåóm
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
);

1838 
GLAPI
 
APIENTRY
 
glBegöQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
id
);

1839 
GLAPI
 
APIENTRY
 
glEndQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1840 
GLAPI
 
APIENTRY
 
glGëQuîyIndexediv
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1844 #i‚de‡
GL_VERSION_4_1


1845 
	#GL_VERSION_4_1
 1

	)

1846 
	#GL_FIXED
 0x140C

	)

1847 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

1848 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

1849 
	#GL_LOW_FLOAT
 0x8DF0

	)

1850 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

1851 
	#GL_HIGH_FLOAT
 0x8DF2

	)

1852 
	#GL_LOW_INT
 0x8DF3

	)

1853 
	#GL_MEDIUM_INT
 0x8DF4

	)

1854 
	#GL_HIGH_INT
 0x8DF5

	)

1855 
	#GL_SHADER_COMPILER
 0x8DFA

	)

1856 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

1857 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

1858 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

1859 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

1860 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

1861 
	#GL_RGB565
 0x8D62

	)

1862 
	#GL_PROGRAM_BINARY_RETRIEVABLE_HINT
 0x8257

	)

1863 
	#GL_PROGRAM_BINARY_LENGTH
 0x8741

	)

1864 
	#GL_NUM_PROGRAM_BINARY_FORMATS
 0x87FE

	)

1865 
	#GL_PROGRAM_BINARY_FORMATS
 0x87FF

	)

1866 
	#GL_VERTEX_SHADER_BIT
 0x00000001

	)

1867 
	#GL_FRAGMENT_SHADER_BIT
 0x00000002

	)

1868 
	#GL_GEOMETRY_SHADER_BIT
 0x00000004

	)

1869 
	#GL_TESS_CONTROL_SHADER_BIT
 0x00000008

	)

1870 
	#GL_TESS_EVALUATION_SHADER_BIT
 0x00000010

	)

1871 
	#GL_ALL_SHADER_BITS
 0xFFFFFFFF

	)

1872 
	#GL_PROGRAM_SEPARABLE
 0x8258

	)

1873 
	#GL_ACTIVE_PROGRAM
 0x8259

	)

1874 
	#GL_PROGRAM_PIPELINE_BINDING
 0x825A

	)

1875 
	#GL_MAX_VIEWPORTS
 0x825B

	)

1876 
	#GL_VIEWPORT_SUBPIXEL_BITS
 0x825C

	)

1877 
	#GL_VIEWPORT_BOUNDS_RANGE
 0x825D

	)

1878 
	#GL_LAYER_PROVOKING_VERTEX
 0x825E

	)

1879 
	#GL_VIEWPORT_INDEX_PROVOKING_VERTEX
 0x825F

	)

1880 
	#GL_UNDEFINED_VERTEX
 0x8260

	)

1881 (
APIENTRYP
 
	tPFNGLRELEASESHADERCOMPILERPROC
) ();

1882 (
APIENTRYP
 
	tPFNGLSHADERBINARYPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tshadîs
, 
	tGLíum
 
	tbö¨yf‹m©
, c⁄° *
	tbö¨y
, GLsizeò
	tÀngth
);

1883 (
APIENTRYP
 
	tPFNGLGETSHADERPRECISIONFORMATPROC
Ë(
	tGLíum
 
	tshadîty≥
, GLíum 
	t¥ecisi⁄ty≥
, 
	tGLöt
 *
	tønge
, GLöà*
	t¥ecisi⁄
);

1884 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFPROC
Ë(
	tGLÊﬂt
 
	tn
, GLÊﬂà
	tf
);

1885 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFPROC
Ë(
	tGLÊﬂt
 
	td
);

1886 (
APIENTRYP
 
	tPFNGLGETPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, *
	tbö¨y
);

1887 (
APIENTRYP
 
	tPFNGLPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° *
	tbö¨y
, 
	tGLsizei
 
	tÀngth
);

1888 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1889 (
APIENTRYP
 
	tPFNGLUSEPROGRAMSTAGESPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

1890 (
APIENTRYP
 
	tPFNGLACTIVESHADERPROGRAMPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

1891 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rögs
);

1892 (
APIENTRYP
 
	tPFNGLBINDPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1893 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tpùñöes
);

1894 (
APIENTRYP
 
	tPFNGLGENPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

1895 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1896 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEIVPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1897 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

1898 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1899 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

1900 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1901 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
);

1902 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1903 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

1904 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1905 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

1906 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1907 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

1908 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1909 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
);

1910 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1911 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

1912 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1913 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

1914 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1915 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

1916 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1917 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
);

1918 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1919 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1920 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1921 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

1922 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1923 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

1924 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1925 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLdoubÀ 
	tv3
);

1926 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1927 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1928 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1929 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1930 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1931 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1932 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1933 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1934 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1935 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1936 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1937 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1938 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1939 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1940 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1941 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1942 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1943 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1944 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1945 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1946 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1947 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1948 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEINFOLOGPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

1949 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

1950 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1951 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1952 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1953 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1954 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1955 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1956 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1957 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1958 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

1959 (
APIENTRYP
 
	tPFNGLVIEWPORTARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1960 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tw
, GLÊﬂà
	th
);

1961 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1962 (
APIENTRYP
 
	tPFNGLSCISSORARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tv
);

1963 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tÀ·
, GLöà
	tbŸtom
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1964 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1965 (
APIENTRYP
 
	tPFNGLDEPTHRANGEARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1966 (
APIENTRYP
 
	tPFNGLDEPTHRANGEINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tn
, GLdoubÀ 
	tf
);

1967 (
APIENTRYP
 
	tPFNGLGETFLOATI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

1968 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

1969 #ifde‡
GL_GLEXT_PROTOTYPES


1970 
GLAPI
 
APIENTRY
 
glRñó£ShadîCompûî
 ();

1971 
GLAPI
 
APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° *
bö¨y
, GLsizeò
Àngth
);

1972 
GLAPI
 
APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
 *
ønge
, GLöà*
¥ecisi⁄
);

1973 
GLAPI
 
APIENTRY
 
glDïthR™gef
 (
GLÊﬂt
 
n
, GLÊﬂà
f
);

1974 
GLAPI
 
APIENTRY
 
glCÀ¨Dïthf
 (
GLÊﬂt
 
d
);

1975 
GLAPI
 
APIENTRY
 
glGëProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, *
bö¨y
);

1976 
GLAPI
 
APIENTRY
 
glProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° *
bö¨y
, 
GLsizei
 
Àngth
);

1977 
GLAPI
 
APIENTRY
 
glProgømP¨amëîi
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1978 
GLAPI
 
APIENTRY
 
glU£ProgømSèges
 (
GLuöt
 
pùñöe
, 
GLbôfõld
 
°ages
, GLuöà
¥ogøm
);

1979 
GLAPI
 
APIENTRY
 
glA˘iveShadîProgøm
 (
GLuöt
 
pùñöe
, GLuöà
¥ogøm
);

1980 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømv
 (
GLíum
 
ty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rögs
);

1981 
GLAPI
 
APIENTRY
 
glBödProgømPùñöe
 (
GLuöt
 
pùñöe
);

1982 
GLAPI
 
APIENTRY
 
glDñëeProgømPùñöes
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
pùñöes
);

1983 
GLAPI
 
APIENTRY
 
glGíProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

1984 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømPùñöe
 (
GLuöt
 
pùñöe
);

1985 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeiv
 (
GLuöt
 
pùñöe
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1986 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

1987 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1988 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

1989 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1990 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
);

1991 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1992 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

1993 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

1994 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

1995 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1996 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

1997 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1998 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
);

1999 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2000 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

2001 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2002 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

2003 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2004 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

2005 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2006 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
);

2007 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2008 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

2009 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2010 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

2011 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2012 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

2013 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2014 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLdoubÀ 
v3
);

2015 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2016 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

2017 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2018 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2019 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2020 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2021 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2022 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2023 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2024 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2025 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2026 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2027 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2028 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2029 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2030 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2031 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2032 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2033 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2034 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2035 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2036 
GLAPI
 
APIENTRY
 
glVÆid©eProgømPùñöe
 (
GLuöt
 
pùñöe
);

2037 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeInfoLog
 (
GLuöt
 
pùñöe
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

2038 
GLAPI
 
APIENTRY
 
glVîãxAâribL1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

2039 
GLAPI
 
APIENTRY
 
glVîãxAâribL2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

2040 
GLAPI
 
APIENTRY
 
glVîãxAâribL3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

2041 
GLAPI
 
APIENTRY
 
glVîãxAâribL4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

2042 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2043 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2044 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2045 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2046 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

2047 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

2048 
GLAPI
 
APIENTRY
 
glVõwp‹tAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

2049 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedf
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
w
, GLÊﬂà
h
);

2050 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedfv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

2051 
GLAPI
 
APIENTRY
 
glSciss‹Aºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
v
);

2052 
GLAPI
 
APIENTRY
 
glSciss‹Indexed
 (
GLuöt
 
ödex
, 
GLöt
 
À·
, GLöà
bŸtom
, 
GLsizei
 
width
, GLsizeò
height
);

2053 
GLAPI
 
APIENTRY
 
glSciss‹Indexedv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

2054 
GLAPI
 
APIENTRY
 
glDïthR™geAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

2055 
GLAPI
 
APIENTRY
 
glDïthR™geIndexed
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
n
, GLdoubÀ 
f
);

2056 
GLAPI
 
APIENTRY
 
glGëFlﬂti_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

2057 
GLAPI
 
APIENTRY
 
glGëDoubÀi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

2061 #i‚de‡
GL_VERSION_4_2


2062 
	#GL_VERSION_4_2
 1

	)

2063 
	#GL_COPY_READ_BUFFER_BINDING
 0x8F36

	)

2064 
	#GL_COPY_WRITE_BUFFER_BINDING
 0x8F37

	)

2065 
	#GL_TRANSFORM_FEEDBACK_ACTIVE
 0x8E24

	)

2066 
	#GL_TRANSFORM_FEEDBACK_PAUSED
 0x8E23

	)

2067 
	#GL_UNPACK_COMPRESSED_BLOCK_WIDTH
 0x9127

	)

2068 
	#GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
 0x9128

	)

2069 
	#GL_UNPACK_COMPRESSED_BLOCK_DEPTH
 0x9129

	)

2070 
	#GL_UNPACK_COMPRESSED_BLOCK_SIZE
 0x912A

	)

2071 
	#GL_PACK_COMPRESSED_BLOCK_WIDTH
 0x912B

	)

2072 
	#GL_PACK_COMPRESSED_BLOCK_HEIGHT
 0x912C

	)

2073 
	#GL_PACK_COMPRESSED_BLOCK_DEPTH
 0x912D

	)

2074 
	#GL_PACK_COMPRESSED_BLOCK_SIZE
 0x912E

	)

2075 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

2076 
	#GL_MIN_MAP_BUFFER_ALIGNMENT
 0x90BC

	)

2077 
	#GL_ATOMIC_COUNTER_BUFFER
 0x92C0

	)

2078 
	#GL_ATOMIC_COUNTER_BUFFER_BINDING
 0x92C1

	)

2079 
	#GL_ATOMIC_COUNTER_BUFFER_START
 0x92C2

	)

2080 
	#GL_ATOMIC_COUNTER_BUFFER_SIZE
 0x92C3

	)

2081 
	#GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
 0x92C4

	)

2082 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
 0x92C5

	)

2083 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
 0x92C6

	)

2084 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
 0x92C7

	)

2085 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
 0x92C8

	)

2086 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x92C9

	)

2087 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
 0x92CA

	)

2088 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
 0x92CB

	)

2089 
	#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
 0x92CC

	)

2090 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
 0x92CD

	)

2091 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
 0x92CE

	)

2092 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
 0x92CF

	)

2093 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
 0x92D0

	)

2094 
	#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
 0x92D1

	)

2095 
	#GL_MAX_VERTEX_ATOMIC_COUNTERS
 0x92D2

	)

2096 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
 0x92D3

	)

2097 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
 0x92D4

	)

2098 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTERS
 0x92D5

	)

2099 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTERS
 0x92D6

	)

2100 
	#GL_MAX_COMBINED_ATOMIC_COUNTERS
 0x92D7

	)

2101 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
 0x92D8

	)

2102 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
 0x92DC

	)

2103 
	#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
 0x92D9

	)

2104 
	#GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
 0x92DA

	)

2105 
	#GL_UNSIGNED_INT_ATOMIC_COUNTER
 0x92DB

	)

2106 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
 0x00000001

	)

2107 
	#GL_ELEMENT_ARRAY_BARRIER_BIT
 0x00000002

	)

2108 
	#GL_UNIFORM_BARRIER_BIT
 0x00000004

	)

2109 
	#GL_TEXTURE_FETCH_BARRIER_BIT
 0x00000008

	)

2110 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
 0x00000020

	)

2111 
	#GL_COMMAND_BARRIER_BIT
 0x00000040

	)

2112 
	#GL_PIXEL_BUFFER_BARRIER_BIT
 0x00000080

	)

2113 
	#GL_TEXTURE_UPDATE_BARRIER_BIT
 0x00000100

	)

2114 
	#GL_BUFFER_UPDATE_BARRIER_BIT
 0x00000200

	)

2115 
	#GL_FRAMEBUFFER_BARRIER_BIT
 0x00000400

	)

2116 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT
 0x00000800

	)

2117 
	#GL_ATOMIC_COUNTER_BARRIER_BIT
 0x00001000

	)

2118 
	#GL_ALL_BARRIER_BITS
 0xFFFFFFFF

	)

2119 
	#GL_MAX_IMAGE_UNITS
 0x8F38

	)

2120 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
 0x8F39

	)

2121 
	#GL_IMAGE_BINDING_NAME
 0x8F3A

	)

2122 
	#GL_IMAGE_BINDING_LEVEL
 0x8F3B

	)

2123 
	#GL_IMAGE_BINDING_LAYERED
 0x8F3C

	)

2124 
	#GL_IMAGE_BINDING_LAYER
 0x8F3D

	)

2125 
	#GL_IMAGE_BINDING_ACCESS
 0x8F3E

	)

2126 
	#GL_IMAGE_1D
 0x904C

	)

2127 
	#GL_IMAGE_2D
 0x904D

	)

2128 
	#GL_IMAGE_3D
 0x904E

	)

2129 
	#GL_IMAGE_2D_RECT
 0x904F

	)

2130 
	#GL_IMAGE_CUBE
 0x9050

	)

2131 
	#GL_IMAGE_BUFFER
 0x9051

	)

2132 
	#GL_IMAGE_1D_ARRAY
 0x9052

	)

2133 
	#GL_IMAGE_2D_ARRAY
 0x9053

	)

2134 
	#GL_IMAGE_CUBE_MAP_ARRAY
 0x9054

	)

2135 
	#GL_IMAGE_2D_MULTISAMPLE
 0x9055

	)

2136 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9056

	)

2137 
	#GL_INT_IMAGE_1D
 0x9057

	)

2138 
	#GL_INT_IMAGE_2D
 0x9058

	)

2139 
	#GL_INT_IMAGE_3D
 0x9059

	)

2140 
	#GL_INT_IMAGE_2D_RECT
 0x905A

	)

2141 
	#GL_INT_IMAGE_CUBE
 0x905B

	)

2142 
	#GL_INT_IMAGE_BUFFER
 0x905C

	)

2143 
	#GL_INT_IMAGE_1D_ARRAY
 0x905D

	)

2144 
	#GL_INT_IMAGE_2D_ARRAY
 0x905E

	)

2145 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY
 0x905F

	)

2146 
	#GL_INT_IMAGE_2D_MULTISAMPLE
 0x9060

	)

2147 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9061

	)

2148 
	#GL_UNSIGNED_INT_IMAGE_1D
 0x9062

	)

2149 
	#GL_UNSIGNED_INT_IMAGE_2D
 0x9063

	)

2150 
	#GL_UNSIGNED_INT_IMAGE_3D
 0x9064

	)

2151 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT
 0x9065

	)

2152 
	#GL_UNSIGNED_INT_IMAGE_CUBE
 0x9066

	)

2153 
	#GL_UNSIGNED_INT_IMAGE_BUFFER
 0x9067

	)

2154 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY
 0x9068

	)

2155 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY
 0x9069

	)

2156 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
 0x906A

	)

2157 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
 0x906B

	)

2158 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x906C

	)

2159 
	#GL_MAX_IMAGE_SAMPLES
 0x906D

	)

2160 
	#GL_IMAGE_BINDING_FORMAT
 0x906E

	)

2161 
	#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
 0x90C7

	)

2162 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
 0x90C8

	)

2163 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
 0x90C9

	)

2164 
	#GL_MAX_VERTEX_IMAGE_UNIFORMS
 0x90CA

	)

2165 
	#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
 0x90CB

	)

2166 
	#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
 0x90CC

	)

2167 
	#GL_MAX_GEOMETRY_IMAGE_UNIFORMS
 0x90CD

	)

2168 
	#GL_MAX_FRAGMENT_IMAGE_UNIFORMS
 0x90CE

	)

2169 
	#GL_MAX_COMBINED_IMAGE_UNIFORMS
 0x90CF

	)

2170 
	#GL_COMPRESSED_RGBA_BPTC_UNORM
 0x8E8C

	)

2171 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
 0x8E8D

	)

2172 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
 0x8E8E

	)

2173 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
 0x8E8F

	)

2174 
	#GL_TEXTURE_IMMUTABLE_FORMAT
 0x912F

	)

2175 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2176 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2177 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
, 
	tGLuöt
 
	tba£ö°™˚
);

2178 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

2179 (
APIENTRYP
 
	tPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tbuf„rIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2180 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLíum 
	tf‹m©
);

2181 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

2182 (
APIENTRYP
 
	tPFNGLTEXSTORAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

2183 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2184 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2185 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tö°™˚cou¡
);

2186 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
, 
	tGLsizei
 
	tö°™˚cou¡
);

2187 #ifde‡
GL_GLEXT_PROTOTYPES


2188 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2189 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2190 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
, 
GLuöt
 
ba£ö°™˚
);

2191 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©iv
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt
 *
∑øms
);

2192 
GLAPI
 
APIENTRY
 
glGëA˘iveAtomicCou¡îBuf„riv
 (
GLuöt
 
¥ogøm
, GLuöà
buf„rIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2193 
GLAPI
 
APIENTRY
 
glBödImageTextuª
 (
GLuöt
 
unô
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLíum 
f‹m©
);

2194 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõr
 (
GLbôfõld
 
b¨rõrs
);

2195 
GLAPI
 
APIENTRY
 
glTexSt‹age1D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

2196 
GLAPI
 
APIENTRY
 
glTexSt‹age2D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2197 
GLAPI
 
APIENTRY
 
glTexSt‹age3D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

2198 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, 
GLsizei
 
ö°™˚cou¡
);

2199 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåómIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
, 
GLsizei
 
ö°™˚cou¡
);

2203 #i‚de‡
GL_VERSION_4_3


2204 
	#GL_VERSION_4_3
 1

	)

2205 (
APIENTRY
 *
	tGLDEBUGPROC
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

2206 
	#GL_NUM_SHADING_LANGUAGE_VERSIONS
 0x82E9

	)

2207 
	#GL_VERTEX_ATTRIB_ARRAY_LONG
 0x874E

	)

2208 
	#GL_COMPRESSED_RGB8_ETC2
 0x9274

	)

2209 
	#GL_COMPRESSED_SRGB8_ETC2
 0x9275

	)

2210 
	#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9276

	)

2211 
	#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9277

	)

2212 
	#GL_COMPRESSED_RGBA8_ETC2_EAC
 0x9278

	)

2213 
	#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
 0x9279

	)

2214 
	#GL_COMPRESSED_R11_EAC
 0x9270

	)

2215 
	#GL_COMPRESSED_SIGNED_R11_EAC
 0x9271

	)

2216 
	#GL_COMPRESSED_RG11_EAC
 0x9272

	)

2217 
	#GL_COMPRESSED_SIGNED_RG11_EAC
 0x9273

	)

2218 
	#GL_PRIMITIVE_RESTART_FIXED_INDEX
 0x8D69

	)

2219 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE
 0x8D6A

	)

2220 
	#GL_MAX_ELEMENT_INDEX
 0x8D6B

	)

2221 
	#GL_COMPUTE_SHADER
 0x91B9

	)

2222 
	#GL_MAX_COMPUTE_UNIFORM_BLOCKS
 0x91BB

	)

2223 
	#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
 0x91BC

	)

2224 
	#GL_MAX_COMPUTE_IMAGE_UNIFORMS
 0x91BD

	)

2225 
	#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
 0x8262

	)

2226 
	#GL_MAX_COMPUTE_UNIFORM_COMPONENTS
 0x8263

	)

2227 
	#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
 0x8264

	)

2228 
	#GL_MAX_COMPUTE_ATOMIC_COUNTERS
 0x8265

	)

2229 
	#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
 0x8266

	)

2230 
	#GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
 0x90EB

	)

2231 
	#GL_MAX_COMPUTE_WORK_GROUP_COUNT
 0x91BE

	)

2232 
	#GL_MAX_COMPUTE_WORK_GROUP_SIZE
 0x91BF

	)

2233 
	#GL_COMPUTE_WORK_GROUP_SIZE
 0x8267

	)

2234 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
 0x90EC

	)

2235 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
 0x90ED

	)

2236 
	#GL_DISPATCH_INDIRECT_BUFFER
 0x90EE

	)

2237 
	#GL_DISPATCH_INDIRECT_BUFFER_BINDING
 0x90EF

	)

2238 
	#GL_COMPUTE_SHADER_BIT
 0x00000020

	)

2239 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS
 0x8242

	)

2240 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
 0x8243

	)

2241 
	#GL_DEBUG_CALLBACK_FUNCTION
 0x8244

	)

2242 
	#GL_DEBUG_CALLBACK_USER_PARAM
 0x8245

	)

2243 
	#GL_DEBUG_SOURCE_API
 0x8246

	)

2244 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM
 0x8247

	)

2245 
	#GL_DEBUG_SOURCE_SHADER_COMPILER
 0x8248

	)

2246 
	#GL_DEBUG_SOURCE_THIRD_PARTY
 0x8249

	)

2247 
	#GL_DEBUG_SOURCE_APPLICATION
 0x824A

	)

2248 
	#GL_DEBUG_SOURCE_OTHER
 0x824B

	)

2249 
	#GL_DEBUG_TYPE_ERROR
 0x824C

	)

2250 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
 0x824D

	)

2251 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
 0x824E

	)

2252 
	#GL_DEBUG_TYPE_PORTABILITY
 0x824F

	)

2253 
	#GL_DEBUG_TYPE_PERFORMANCE
 0x8250

	)

2254 
	#GL_DEBUG_TYPE_OTHER
 0x8251

	)

2255 
	#GL_MAX_DEBUG_MESSAGE_LENGTH
 0x9143

	)

2256 
	#GL_MAX_DEBUG_LOGGED_MESSAGES
 0x9144

	)

2257 
	#GL_DEBUG_LOGGED_MESSAGES
 0x9145

	)

2258 
	#GL_DEBUG_SEVERITY_HIGH
 0x9146

	)

2259 
	#GL_DEBUG_SEVERITY_MEDIUM
 0x9147

	)

2260 
	#GL_DEBUG_SEVERITY_LOW
 0x9148

	)

2261 
	#GL_DEBUG_TYPE_MARKER
 0x8268

	)

2262 
	#GL_DEBUG_TYPE_PUSH_GROUP
 0x8269

	)

2263 
	#GL_DEBUG_TYPE_POP_GROUP
 0x826A

	)

2264 
	#GL_DEBUG_SEVERITY_NOTIFICATION
 0x826B

	)

2265 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH
 0x826C

	)

2266 
	#GL_DEBUG_GROUP_STACK_DEPTH
 0x826D

	)

2267 
	#GL_BUFFER
 0x82E0

	)

2268 
	#GL_SHADER
 0x82E1

	)

2269 
	#GL_PROGRAM
 0x82E2

	)

2270 
	#GL_QUERY
 0x82E3

	)

2271 
	#GL_PROGRAM_PIPELINE
 0x82E4

	)

2272 
	#GL_SAMPLER
 0x82E6

	)

2273 
	#GL_MAX_LABEL_LENGTH
 0x82E8

	)

2274 
	#GL_DEBUG_OUTPUT
 0x92E0

	)

2275 
	#GL_CONTEXT_FLAG_DEBUG_BIT
 0x00000002

	)

2276 
	#GL_MAX_UNIFORM_LOCATIONS
 0x826E

	)

2277 
	#GL_FRAMEBUFFER_DEFAULT_WIDTH
 0x9310

	)

2278 
	#GL_FRAMEBUFFER_DEFAULT_HEIGHT
 0x9311

	)

2279 
	#GL_FRAMEBUFFER_DEFAULT_LAYERS
 0x9312

	)

2280 
	#GL_FRAMEBUFFER_DEFAULT_SAMPLES
 0x9313

	)

2281 
	#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
 0x9314

	)

2282 
	#GL_MAX_FRAMEBUFFER_WIDTH
 0x9315

	)

2283 
	#GL_MAX_FRAMEBUFFER_HEIGHT
 0x9316

	)

2284 
	#GL_MAX_FRAMEBUFFER_LAYERS
 0x9317

	)

2285 
	#GL_MAX_FRAMEBUFFER_SAMPLES
 0x9318

	)

2286 
	#GL_INTERNALFORMAT_SUPPORTED
 0x826F

	)

2287 
	#GL_INTERNALFORMAT_PREFERRED
 0x8270

	)

2288 
	#GL_INTERNALFORMAT_RED_SIZE
 0x8271

	)

2289 
	#GL_INTERNALFORMAT_GREEN_SIZE
 0x8272

	)

2290 
	#GL_INTERNALFORMAT_BLUE_SIZE
 0x8273

	)

2291 
	#GL_INTERNALFORMAT_ALPHA_SIZE
 0x8274

	)

2292 
	#GL_INTERNALFORMAT_DEPTH_SIZE
 0x8275

	)

2293 
	#GL_INTERNALFORMAT_STENCIL_SIZE
 0x8276

	)

2294 
	#GL_INTERNALFORMAT_SHARED_SIZE
 0x8277

	)

2295 
	#GL_INTERNALFORMAT_RED_TYPE
 0x8278

	)

2296 
	#GL_INTERNALFORMAT_GREEN_TYPE
 0x8279

	)

2297 
	#GL_INTERNALFORMAT_BLUE_TYPE
 0x827A

	)

2298 
	#GL_INTERNALFORMAT_ALPHA_TYPE
 0x827B

	)

2299 
	#GL_INTERNALFORMAT_DEPTH_TYPE
 0x827C

	)

2300 
	#GL_INTERNALFORMAT_STENCIL_TYPE
 0x827D

	)

2301 
	#GL_MAX_WIDTH
 0x827E

	)

2302 
	#GL_MAX_HEIGHT
 0x827F

	)

2303 
	#GL_MAX_DEPTH
 0x8280

	)

2304 
	#GL_MAX_LAYERS
 0x8281

	)

2305 
	#GL_MAX_COMBINED_DIMENSIONS
 0x8282

	)

2306 
	#GL_COLOR_COMPONENTS
 0x8283

	)

2307 
	#GL_DEPTH_COMPONENTS
 0x8284

	)

2308 
	#GL_STENCIL_COMPONENTS
 0x8285

	)

2309 
	#GL_COLOR_RENDERABLE
 0x8286

	)

2310 
	#GL_DEPTH_RENDERABLE
 0x8287

	)

2311 
	#GL_STENCIL_RENDERABLE
 0x8288

	)

2312 
	#GL_FRAMEBUFFER_RENDERABLE
 0x8289

	)

2313 
	#GL_FRAMEBUFFER_RENDERABLE_LAYERED
 0x828A

	)

2314 
	#GL_FRAMEBUFFER_BLEND
 0x828B

	)

2315 
	#GL_READ_PIXELS
 0x828C

	)

2316 
	#GL_READ_PIXELS_FORMAT
 0x828D

	)

2317 
	#GL_READ_PIXELS_TYPE
 0x828E

	)

2318 
	#GL_TEXTURE_IMAGE_FORMAT
 0x828F

	)

2319 
	#GL_TEXTURE_IMAGE_TYPE
 0x8290

	)

2320 
	#GL_GET_TEXTURE_IMAGE_FORMAT
 0x8291

	)

2321 
	#GL_GET_TEXTURE_IMAGE_TYPE
 0x8292

	)

2322 
	#GL_MIPMAP
 0x8293

	)

2323 
	#GL_MANUAL_GENERATE_MIPMAP
 0x8294

	)

2324 
	#GL_AUTO_GENERATE_MIPMAP
 0x8295

	)

2325 
	#GL_COLOR_ENCODING
 0x8296

	)

2326 
	#GL_SRGB_READ
 0x8297

	)

2327 
	#GL_SRGB_WRITE
 0x8298

	)

2328 
	#GL_FILTER
 0x829A

	)

2329 
	#GL_VERTEX_TEXTURE
 0x829B

	)

2330 
	#GL_TESS_CONTROL_TEXTURE
 0x829C

	)

2331 
	#GL_TESS_EVALUATION_TEXTURE
 0x829D

	)

2332 
	#GL_GEOMETRY_TEXTURE
 0x829E

	)

2333 
	#GL_FRAGMENT_TEXTURE
 0x829F

	)

2334 
	#GL_COMPUTE_TEXTURE
 0x82A0

	)

2335 
	#GL_TEXTURE_SHADOW
 0x82A1

	)

2336 
	#GL_TEXTURE_GATHER
 0x82A2

	)

2337 
	#GL_TEXTURE_GATHER_SHADOW
 0x82A3

	)

2338 
	#GL_SHADER_IMAGE_LOAD
 0x82A4

	)

2339 
	#GL_SHADER_IMAGE_STORE
 0x82A5

	)

2340 
	#GL_SHADER_IMAGE_ATOMIC
 0x82A6

	)

2341 
	#GL_IMAGE_TEXEL_SIZE
 0x82A7

	)

2342 
	#GL_IMAGE_COMPATIBILITY_CLASS
 0x82A8

	)

2343 
	#GL_IMAGE_PIXEL_FORMAT
 0x82A9

	)

2344 
	#GL_IMAGE_PIXEL_TYPE
 0x82AA

	)

2345 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
 0x82AC

	)

2346 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
 0x82AD

	)

2347 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
 0x82AE

	)

2348 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
 0x82AF

	)

2349 
	#GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
 0x82B1

	)

2350 
	#GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
 0x82B2

	)

2351 
	#GL_TEXTURE_COMPRESSED_BLOCK_SIZE
 0x82B3

	)

2352 
	#GL_CLEAR_BUFFER
 0x82B4

	)

2353 
	#GL_TEXTURE_VIEW
 0x82B5

	)

2354 
	#GL_VIEW_COMPATIBILITY_CLASS
 0x82B6

	)

2355 
	#GL_FULL_SUPPORT
 0x82B7

	)

2356 
	#GL_CAVEAT_SUPPORT
 0x82B8

	)

2357 
	#GL_IMAGE_CLASS_4_X_32
 0x82B9

	)

2358 
	#GL_IMAGE_CLASS_2_X_32
 0x82BA

	)

2359 
	#GL_IMAGE_CLASS_1_X_32
 0x82BB

	)

2360 
	#GL_IMAGE_CLASS_4_X_16
 0x82BC

	)

2361 
	#GL_IMAGE_CLASS_2_X_16
 0x82BD

	)

2362 
	#GL_IMAGE_CLASS_1_X_16
 0x82BE

	)

2363 
	#GL_IMAGE_CLASS_4_X_8
 0x82BF

	)

2364 
	#GL_IMAGE_CLASS_2_X_8
 0x82C0

	)

2365 
	#GL_IMAGE_CLASS_1_X_8
 0x82C1

	)

2366 
	#GL_IMAGE_CLASS_11_11_10
 0x82C2

	)

2367 
	#GL_IMAGE_CLASS_10_10_10_2
 0x82C3

	)

2368 
	#GL_VIEW_CLASS_128_BITS
 0x82C4

	)

2369 
	#GL_VIEW_CLASS_96_BITS
 0x82C5

	)

2370 
	#GL_VIEW_CLASS_64_BITS
 0x82C6

	)

2371 
	#GL_VIEW_CLASS_48_BITS
 0x82C7

	)

2372 
	#GL_VIEW_CLASS_32_BITS
 0x82C8

	)

2373 
	#GL_VIEW_CLASS_24_BITS
 0x82C9

	)

2374 
	#GL_VIEW_CLASS_16_BITS
 0x82CA

	)

2375 
	#GL_VIEW_CLASS_8_BITS
 0x82CB

	)

2376 
	#GL_VIEW_CLASS_S3TC_DXT1_RGB
 0x82CC

	)

2377 
	#GL_VIEW_CLASS_S3TC_DXT1_RGBA
 0x82CD

	)

2378 
	#GL_VIEW_CLASS_S3TC_DXT3_RGBA
 0x82CE

	)

2379 
	#GL_VIEW_CLASS_S3TC_DXT5_RGBA
 0x82CF

	)

2380 
	#GL_VIEW_CLASS_RGTC1_RED
 0x82D0

	)

2381 
	#GL_VIEW_CLASS_RGTC2_RG
 0x82D1

	)

2382 
	#GL_VIEW_CLASS_BPTC_UNORM
 0x82D2

	)

2383 
	#GL_VIEW_CLASS_BPTC_FLOAT
 0x82D3

	)

2384 
	#GL_UNIFORM
 0x92E1

	)

2385 
	#GL_UNIFORM_BLOCK
 0x92E2

	)

2386 
	#GL_PROGRAM_INPUT
 0x92E3

	)

2387 
	#GL_PROGRAM_OUTPUT
 0x92E4

	)

2388 
	#GL_BUFFER_VARIABLE
 0x92E5

	)

2389 
	#GL_SHADER_STORAGE_BLOCK
 0x92E6

	)

2390 
	#GL_VERTEX_SUBROUTINE
 0x92E8

	)

2391 
	#GL_TESS_CONTROL_SUBROUTINE
 0x92E9

	)

2392 
	#GL_TESS_EVALUATION_SUBROUTINE
 0x92EA

	)

2393 
	#GL_GEOMETRY_SUBROUTINE
 0x92EB

	)

2394 
	#GL_FRAGMENT_SUBROUTINE
 0x92EC

	)

2395 
	#GL_COMPUTE_SUBROUTINE
 0x92ED

	)

2396 
	#GL_VERTEX_SUBROUTINE_UNIFORM
 0x92EE

	)

2397 
	#GL_TESS_CONTROL_SUBROUTINE_UNIFORM
 0x92EF

	)

2398 
	#GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
 0x92F0

	)

2399 
	#GL_GEOMETRY_SUBROUTINE_UNIFORM
 0x92F1

	)

2400 
	#GL_FRAGMENT_SUBROUTINE_UNIFORM
 0x92F2

	)

2401 
	#GL_COMPUTE_SUBROUTINE_UNIFORM
 0x92F3

	)

2402 
	#GL_TRANSFORM_FEEDBACK_VARYING
 0x92F4

	)

2403 
	#GL_ACTIVE_RESOURCES
 0x92F5

	)

2404 
	#GL_MAX_NAME_LENGTH
 0x92F6

	)

2405 
	#GL_MAX_NUM_ACTIVE_VARIABLES
 0x92F7

	)

2406 
	#GL_MAX_NUM_COMPATIBLE_SUBROUTINES
 0x92F8

	)

2407 
	#GL_NAME_LENGTH
 0x92F9

	)

2408 
	#GL_TYPE
 0x92FA

	)

2409 
	#GL_ARRAY_SIZE
 0x92FB

	)

2410 
	#GL_OFFSET
 0x92FC

	)

2411 
	#GL_BLOCK_INDEX
 0x92FD

	)

2412 
	#GL_ARRAY_STRIDE
 0x92FE

	)

2413 
	#GL_MATRIX_STRIDE
 0x92FF

	)

2414 
	#GL_IS_ROW_MAJOR
 0x9300

	)

2415 
	#GL_ATOMIC_COUNTER_BUFFER_INDEX
 0x9301

	)

2416 
	#GL_BUFFER_BINDING
 0x9302

	)

2417 
	#GL_BUFFER_DATA_SIZE
 0x9303

	)

2418 
	#GL_NUM_ACTIVE_VARIABLES
 0x9304

	)

2419 
	#GL_ACTIVE_VARIABLES
 0x9305

	)

2420 
	#GL_REFERENCED_BY_VERTEX_SHADER
 0x9306

	)

2421 
	#GL_REFERENCED_BY_TESS_CONTROL_SHADER
 0x9307

	)

2422 
	#GL_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x9308

	)

2423 
	#GL_REFERENCED_BY_GEOMETRY_SHADER
 0x9309

	)

2424 
	#GL_REFERENCED_BY_FRAGMENT_SHADER
 0x930A

	)

2425 
	#GL_REFERENCED_BY_COMPUTE_SHADER
 0x930B

	)

2426 
	#GL_TOP_LEVEL_ARRAY_SIZE
 0x930C

	)

2427 
	#GL_TOP_LEVEL_ARRAY_STRIDE
 0x930D

	)

2428 
	#GL_LOCATION
 0x930E

	)

2429 
	#GL_LOCATION_INDEX
 0x930F

	)

2430 
	#GL_IS_PER_PATCH
 0x92E7

	)

2431 
	#GL_SHADER_STORAGE_BUFFER
 0x90D2

	)

2432 
	#GL_SHADER_STORAGE_BUFFER_BINDING
 0x90D3

	)

2433 
	#GL_SHADER_STORAGE_BUFFER_START
 0x90D4

	)

2434 
	#GL_SHADER_STORAGE_BUFFER_SIZE
 0x90D5

	)

2435 
	#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
 0x90D6

	)

2436 
	#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
 0x90D7

	)

2437 
	#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
 0x90D8

	)

2438 
	#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
 0x90D9

	)

2439 
	#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
 0x90DA

	)

2440 
	#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
 0x90DB

	)

2441 
	#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
 0x90DC

	)

2442 
	#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
 0x90DD

	)

2443 
	#GL_MAX_SHADER_STORAGE_BLOCK_SIZE
 0x90DE

	)

2444 
	#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
 0x90DF

	)

2445 
	#GL_SHADER_STORAGE_BARRIER_BIT
 0x00002000

	)

2446 
	#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
 0x8F39

	)

2447 
	#GL_DEPTH_STENCIL_TEXTURE_MODE
 0x90EA

	)

2448 
	#GL_TEXTURE_BUFFER_OFFSET
 0x919D

	)

2449 
	#GL_TEXTURE_BUFFER_SIZE
 0x919E

	)

2450 
	#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
 0x919F

	)

2451 
	#GL_TEXTURE_VIEW_MIN_LEVEL
 0x82DB

	)

2452 
	#GL_TEXTURE_VIEW_NUM_LEVELS
 0x82DC

	)

2453 
	#GL_TEXTURE_VIEW_MIN_LAYER
 0x82DD

	)

2454 
	#GL_TEXTURE_VIEW_NUM_LAYERS
 0x82DE

	)

2455 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

2456 
	#GL_VERTEX_ATTRIB_BINDING
 0x82D4

	)

2457 
	#GL_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D5

	)

2458 
	#GL_VERTEX_BINDING_DIVISOR
 0x82D6

	)

2459 
	#GL_VERTEX_BINDING_OFFSET
 0x82D7

	)

2460 
	#GL_VERTEX_BINDING_STRIDE
 0x82D8

	)

2461 
	#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D9

	)

2462 
	#GL_MAX_VERTEX_ATTRIB_BINDINGS
 0x82DA

	)

2463 
	#GL_VERTEX_BINDING_BUFFER
 0x8F4F

	)

2464 
	#GL_DISPLAY_LIST
 0x82E7

	)

2465 (
APIENTRYP
 
	tPFNGLCLEARBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2466 (
APIENTRYP
 
	tPFNGLCLEARBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2467 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
);

2468 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEINDIRECTPROC
Ë(
	tGLöçå
 
	tödúe˘
);

2469 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATAPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	t§cWidth
, GLsizeò
	t§cHeight
, GLsizeò
	t§cDïth
);

2470 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2471 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2472 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

2473 (
APIENTRYP
 
	tPFNGLINVALIDATETEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2474 (
APIENTRYP
 
	tPFNGLINVALIDATETEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

2475 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

2476 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
);

2477 (
APIENTRYP
 
	tPFNGLINVALIDATEFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

2478 (
APIENTRYP
 
	tPFNGLINVALIDATESUBFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

2479 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2480 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2481 (
APIENTRYP
 
	tPFNGLGETPROGRAMINTERFACEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2482 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2483 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

2484 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	t∑øms
);

2485 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2486 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2487 (
APIENTRYP
 
	tPFNGLSHADERSTORAGEBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	t°‹ageBlockIndex
, GLuöà
	t°‹ageBlockBödög
);

2488 (
APIENTRYP
 
	tPFNGLTEXBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2489 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2490 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2491 (
APIENTRYP
 
	tPFNGLTEXTUREVIEWPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	t‹igãxtuª
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tmöÀvñ
, GLuöà
	tnumÀvñs
, GLuöà
	tmöœyî
, GLuöà
	tnumœyîs
);

2492 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

2493 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

2494 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2495 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2496 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	t©åibödex
, GLuöà
	tbödögödex
);

2497 (
APIENTRYP
 
	tPFNGLVERTEXBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tdivis‹
);

2498 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

2499 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

2500 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKPROC
Ë(
	tGLDEBUGPROC
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

2501 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

2502 (
APIENTRYP
 
	tPFNGLPUSHDEBUGGROUPPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tmesßge
);

2503 (
APIENTRYP
 
	tPFNGLPOPDEBUGGROUPPROC
) ();

2504 (
APIENTRYP
 
	tPFNGLOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2505 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2506 (
APIENTRYP
 
	tPFNGLOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2507 (
APIENTRYP
 
	tPFNGLGETOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2508 #ifde‡
GL_GLEXT_PROTOTYPES


2509 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2510 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rSubD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2511 
GLAPI
 
APIENTRY
 
glDi•©chCompuã
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
);

2512 
GLAPI
 
APIENTRY
 
glDi•©chCompuãIndúe˘
 (
GLöçå
 
ödúe˘
);

2513 
GLAPI
 
APIENTRY
 
glC›yImageSubD©a
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
§cWidth
, GLsizeò
§cHeight
, GLsizeò
§cDïth
);

2514 
GLAPI
 
APIENTRY
 
glFømebuf„rP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

2515 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2516 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©i64v
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

2517 
GLAPI
 
APIENTRY
 
glInvÆid©eTexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

2518 
GLAPI
 
APIENTRY
 
glInvÆid©eTexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

2519 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

2520 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rD©a
 (
GLuöt
 
buf„r
);

2521 
GLAPI
 
APIENTRY
 
glInvÆid©eFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

2522 
GLAPI
 
APIENTRY
 
glInvÆid©eSubFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

2523 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2524 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2525 
GLAPI
 
APIENTRY
 
glGëProgømI¡îÁ˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2526 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëProgømResour˚Index
 (GLuöà
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2527 
GLAPI
 
APIENTRY
 
glGëProgømResour˚Name
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

2528 
GLAPI
 
APIENTRY
 
glGëProgømResour˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
∑øms
);

2529 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2530 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄Index
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2531 
GLAPI
 
APIENTRY
 
glShadîSt‹ageBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
°‹ageBlockIndex
, GLuöà
°‹ageBlockBödög
);

2532 
GLAPI
 
APIENTRY
 
glTexBuf„rR™ge
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2533 
GLAPI
 
APIENTRY
 
glTexSt‹age2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2534 
GLAPI
 
APIENTRY
 
glTexSt‹age3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2535 
GLAPI
 
APIENTRY
 
glTextuªVõw
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
‹igãxtuª
, GLíum 
öã∫Æf‹m©
, GLuöà
möÀvñ
, GLuöà
numÀvñs
, GLuöà
möœyî
, GLuöà
numœyîs
);

2536 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„r
 (
GLuöt
 
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

2537 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

2538 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2539 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2540 
GLAPI
 
APIENTRY
 
glVîãxAâribBödög
 (
GLuöt
 
©åibödex
, GLuöà
bödögödex
);

2541 
GLAPI
 
APIENTRY
 
glVîãxBödögDivis‹
 (
GLuöt
 
bödögödex
, GLuöà
divis‹
);

2542 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁ
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

2543 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£π
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

2544 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlback
 (
GLDEBUGPROC
 
ˇŒback
, c⁄° *
u£rP¨am
);

2545 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLog
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

2546 
GLAPI
 
APIENTRY
 
glPushDebugGroup
 (
GLíum
 
sour˚
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
mesßge
);

2547 
GLAPI
 
APIENTRY
 
glP›DebugGroup
 ();

2548 
GLAPI
 
APIENTRY
 
glObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2549 
GLAPI
 
APIENTRY
 
glGëObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2550 
GLAPI
 
APIENTRY
 
glObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2551 
GLAPI
 
APIENTRY
 
glGëObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2555 #i‚de‡
GL_VERSION_4_4


2556 
	#GL_VERSION_4_4
 1

	)

2557 
	#GL_MAX_VERTEX_ATTRIB_STRIDE
 0x82E5

	)

2558 
	#GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
 0x8221

	)

2559 
	#GL_TEXTURE_BUFFER_BINDING
 0x8C2A

	)

2560 
	#GL_MAP_PERSISTENT_BIT
 0x0040

	)

2561 
	#GL_MAP_COHERENT_BIT
 0x0080

	)

2562 
	#GL_DYNAMIC_STORAGE_BIT
 0x0100

	)

2563 
	#GL_CLIENT_STORAGE_BIT
 0x0200

	)

2564 
	#GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
 0x00004000

	)

2565 
	#GL_BUFFER_IMMUTABLE_STORAGE
 0x821F

	)

2566 
	#GL_BUFFER_STORAGE_FLAGS
 0x8220

	)

2567 
	#GL_CLEAR_TEXTURE
 0x9365

	)

2568 
	#GL_LOCATION_COMPONENT
 0x934A

	)

2569 
	#GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
 0x934B

	)

2570 
	#GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
 0x934C

	)

2571 
	#GL_QUERY_BUFFER
 0x9192

	)

2572 
	#GL_QUERY_BUFFER_BARRIER_BIT
 0x00008000

	)

2573 
	#GL_QUERY_BUFFER_BINDING
 0x9193

	)

2574 
	#GL_QUERY_RESULT_NO_WAIT
 0x9194

	)

2575 
	#GL_MIRROR_CLAMP_TO_EDGE
 0x8743

	)

2576 (
APIENTRYP
 
	tPFNGLBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

2577 (
APIENTRYP
 
	tPFNGLCLEARTEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2578 (
APIENTRYP
 
	tPFNGLCLEARTEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2579 (
APIENTRYP
 
	tPFNGLBINDBUFFERSBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
);

2580 (
APIENTRYP
 
	tPFNGLBINDBUFFERSRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° 
	tGLsizeùå
 *
	tsizes
);

2581 (
APIENTRYP
 
	tPFNGLBINDTEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2582 (
APIENTRYP
 
	tPFNGLBINDSAMPLERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tßm∂îs
);

2583 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2584 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

2585 #ifde‡
GL_GLEXT_PROTOTYPES


2586 
GLAPI
 
APIENTRY
 
glBuf„rSt‹age
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

2587 
GLAPI
 
APIENTRY
 
glCÀ¨TexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2588 
GLAPI
 
APIENTRY
 
glCÀ¨TexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2589 
GLAPI
 
APIENTRY
 
glBödBuf„rsBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
);

2590 
GLAPI
 
APIENTRY
 
glBödBuf„rsR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° 
GLsizeùå
 *
sizes
);

2591 
GLAPI
 
APIENTRY
 
glBödTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2592 
GLAPI
 
APIENTRY
 
glBödSam∂îs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ßm∂îs
);

2593 
GLAPI
 
APIENTRY
 
glBödImageTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2594 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„rs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° GLsizeò*
°rides
);

2598 #i‚de‡
GL_VERSION_4_5


2599 
	#GL_VERSION_4_5
 1

	)

2600 
	#GL_CONTEXT_LOST
 0x0507

	)

2601 
	#GL_NEGATIVE_ONE_TO_ONE
 0x935E

	)

2602 
	#GL_ZERO_TO_ONE
 0x935F

	)

2603 
	#GL_CLIP_ORIGIN
 0x935C

	)

2604 
	#GL_CLIP_DEPTH_MODE
 0x935D

	)

2605 
	#GL_QUERY_WAIT_INVERTED
 0x8E17

	)

2606 
	#GL_QUERY_NO_WAIT_INVERTED
 0x8E18

	)

2607 
	#GL_QUERY_BY_REGION_WAIT_INVERTED
 0x8E19

	)

2608 
	#GL_QUERY_BY_REGION_NO_WAIT_INVERTED
 0x8E1A

	)

2609 
	#GL_MAX_CULL_DISTANCES
 0x82F9

	)

2610 
	#GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
 0x82FA

	)

2611 
	#GL_TEXTURE_TARGET
 0x1006

	)

2612 
	#GL_QUERY_TARGET
 0x82EA

	)

2613 
	#GL_GUILTY_CONTEXT_RESET
 0x8253

	)

2614 
	#GL_INNOCENT_CONTEXT_RESET
 0x8254

	)

2615 
	#GL_UNKNOWN_CONTEXT_RESET
 0x8255

	)

2616 
	#GL_RESET_NOTIFICATION_STRATEGY
 0x8256

	)

2617 
	#GL_LOSE_CONTEXT_ON_RESET
 0x8252

	)

2618 
	#GL_NO_RESET_NOTIFICATION
 0x8261

	)

2619 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
 0x00000004

	)

2620 
	#GL_CONTEXT_RELEASE_BEHAVIOR
 0x82FB

	)

2621 
	#GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH
 0x82FC

	)

2622 (
APIENTRYP
 
	tPFNGLCLIPCONTROLPROC
Ë(
	tGLíum
 
	t‹igö
, GLíum 
	tdïth
);

2623 (
APIENTRYP
 
	tPFNGLCREATETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

2624 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKBUFFERBASEPROC
Ë(
	tGLuöt
 
	txfb
, GLuöà
	tödex
, GLuöà
	tbuf„r
);

2625 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC
Ë(
	tGLuöt
 
	txfb
, GLuöà
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2626 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKIVPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2627 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKI_VPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øm
);

2628 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKI64_VPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, GLuöà
	tödex
, 
	tGLöt64
 *
	t∑øm
);

2629 (
APIENTRYP
 
	tPFNGLCREATEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

2630 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSTORAGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

2631 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLíum
 
	tußge
);

2632 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

2633 (
APIENTRYP
 
	tPFNGLCOPYNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

2634 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2635 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2636 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

2637 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

2638 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

2639 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

2640 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2641 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERI64VPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

2642 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, **
	t∑øms
);

2643 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

2644 (
APIENTRYP
 
	tPFNGLCREATEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

2645 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

2646 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2647 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

2648 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

2649 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf
);

2650 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

2651 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERREADBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t§c
);

2652 (
APIENTRYP
 
	tPFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° 
	tGLíum
 *
	t©èchmíts
);

2653 (
APIENTRYP
 
	tPFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° 
	tGLíum
 *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

2654 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

2655 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERUIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLuöà*
	tvÆue
);

2656 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERFVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2657 (
APIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERFIPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

2658 (
APIENTRYP
 
	tPFNGLBLITNAMEDFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	tªadFømebuf„r
, GLuöà
	tdøwFømebuf„r
, 
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

2659 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

2660 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2661 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2662 (
APIENTRYP
 
	tPFNGLCREATERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

2663 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2664 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2665 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2666 (
APIENTRYP
 
	tPFNGLCREATETEXTURESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

2667 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

2668 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2669 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

2670 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2671 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2672 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2673 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2674 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2675 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2676 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2677 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2678 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2679 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2680 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

2681 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2682 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2683 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

2684 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

2685 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2686 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

2687 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

2688 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

2689 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPPROC
Ë(
	tGLuöt
 
	tãxtuª
);

2690 (
APIENTRYP
 
	tPFNGLBINDTEXTUREUNITPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
);

2691 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2692 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2693 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

2694 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

2695 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

2696 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2697 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

2698 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2699 (
APIENTRYP
 
	tPFNGLCREATEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

2700 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYATTRIBPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

2701 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYATTRIBPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

2702 (
APIENTRYP
 
	tPFNGLVERTEXARRAYELEMENTBUFFERPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
);

2703 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

2704 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

2705 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

2706 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

2707 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2708 (
APIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2709 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

2710 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYIVPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2711 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINDEXEDIVPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2712 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINDEXED64IVPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øm
);

2713 (
APIENTRYP
 
	tPFNGLCREATESAMPLERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tßm∂îs
);

2714 (
APIENTRYP
 
	tPFNGLCREATEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

2715 (
APIENTRYP
 
	tPFNGLCREATEQUERIESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

2716 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2717 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2718 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2719 (
APIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2720 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERBYREGIONPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

2721 (
APIENTRYP
 
	tPFNGLGETTEXTURESUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	tpixñs
);

2722 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tbufSize
, *
	tpixñs
);

2723 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSPROC
) ();

2724 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2725 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2726 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

2727 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

2728 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

2729 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

2730 (
APIENTRYP
 
	tPFNGLREADNPIXELSPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

2731 (
APIENTRYP
 
	tPFNGLGETNMAPDVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

2732 (
APIENTRYP
 
	tPFNGLGETNMAPFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

2733 (
APIENTRYP
 
	tPFNGLGETNMAPIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

2734 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

2735 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

2736 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

2737 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

2738 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tèbÀ
);

2739 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timage
);

2740 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, *
	trow
, GLsizeò
	tcﬁumnBufSize
, *
	tcﬁumn
, *
	t•™
);

2741 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

2742 (
APIENTRYP
 
	tPFNGLGETNMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

2743 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERPROC
) ();

2744 #ifde‡
GL_GLEXT_PROTOTYPES


2745 
GLAPI
 
APIENTRY
 
glClùC⁄åﬁ
 (
GLíum
 
‹igö
, GLíum 
dïth
);

2746 
GLAPI
 
APIENTRY
 
glCª©eTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

2747 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackBuf„rBa£
 (
GLuöt
 
xfb
, GLuöà
ödex
, GLuöà
buf„r
);

2748 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackBuf„rR™ge
 (
GLuöt
 
xfb
, GLuöà
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2749 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackiv
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2750 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbacki_v
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, GLuöà
ödex
, 
GLöt
 *
∑øm
);

2751 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbacki64_v
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, GLuöà
ödex
, 
GLöt64
 *
∑øm
);

2752 
GLAPI
 
APIENTRY
 
glCª©eBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

2753 
GLAPI
 
APIENTRY
 
glNamedBuf„rSt‹age
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

2754 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©a
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLíum
 
ußge
);

2755 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

2756 
GLAPI
 
APIENTRY
 
glC›yNamedBuf„rSubD©a
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

2757 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©a
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2758 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2759 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„r
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

2760 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rR™ge
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

2761 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„r
 (
GLuöt
 
buf„r
);

2762 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™ge
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

2763 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîiv
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2764 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîi64v
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

2765 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrv
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, **
∑øms
);

2766 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

2767 
GLAPI
 
APIENTRY
 
glCª©eFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

2768 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

2769 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîi
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

2770 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

2771 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayî
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

2772 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rDøwBuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf
);

2773 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rDøwBuf„rs
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

2774 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRódBuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
§c
);

2775 
GLAPI
 
APIENTRY
 
glInvÆid©eNamedFømebuf„rD©a
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
numAâachmíts
, c⁄° 
GLíum
 *
©èchmíts
);

2776 
GLAPI
 
APIENTRY
 
glInvÆid©eNamedFømebuf„rSubD©a
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
numAâachmíts
, c⁄° 
GLíum
 *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

2777 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„riv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

2778 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„ruiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLuöà*
vÆue
);

2779 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„rfv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

2780 
GLAPI
 
APIENTRY
 
glCÀ¨NamedFømebuf„rfi
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

2781 
GLAPI
 
APIENTRY
 
glBlôNamedFømebuf„r
 (
GLuöt
 
ªadFømebuf„r
, GLuöà
døwFømebuf„r
, 
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

2782 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètus
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

2783 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2784 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2785 
GLAPI
 
APIENTRY
 
glCª©eRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

2786 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹age
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

2787 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂e
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2788 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîiv
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2789 
GLAPI
 
APIENTRY
 
glCª©eTextuªs
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

2790 
GLAPI
 
APIENTRY
 
glTextuªBuf„r
 (
GLuöt
 
ãxtuª
, 
GLíum
 
öã∫Æf‹m©
, GLuöà
buf„r
);

2791 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™ge
 (
GLuöt
 
ãxtuª
, 
GLíum
 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2792 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
);

2793 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2794 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

2795 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂e
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2796 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂e
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2797 
GLAPI
 
APIENTRY
 
glTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2798 
GLAPI
 
APIENTRY
 
glTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2799 
GLAPI
 
APIENTRY
 
glTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2800 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2801 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2802 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2803 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

2804 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

2805 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

2806 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîf
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

2807 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

2808 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîi
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

2809 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

2810 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øms
);

2811 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

2812 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠
 (
GLuöt
 
ãxtuª
);

2813 
GLAPI
 
APIENTRY
 
glBödTextuªUnô
 (
GLuöt
 
unô
, GLuöà
ãxtuª
);

2814 
GLAPI
 
APIENTRY
 
glGëTextuªImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
pixñs
);

2815 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLsizei
 
bufSize
, *
pixñs
);

2816 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

2817 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

2818 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

2819 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2820 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

2821 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2822 
GLAPI
 
APIENTRY
 
glCª©eVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

2823 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayAârib
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

2824 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayAârib
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

2825 
GLAPI
 
APIENTRY
 
glVîãxAºayEÀmítBuf„r
 (
GLuöt
 
vaobj
, GLuöà
buf„r
);

2826 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBuf„r
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

2827 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBuf„rs
 (
GLuöt
 
vaobj
, GLuöà
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° GLsizeò*
°rides
);

2828 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribBödög
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

2829 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

2830 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribIF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2831 
GLAPI
 
APIENTRY
 
glVîãxAºayAâribLF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2832 
GLAPI
 
APIENTRY
 
glVîãxAºayBödögDivis‹
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

2833 
GLAPI
 
APIENTRY
 
glGëVîãxAºayiv
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2834 
GLAPI
 
APIENTRY
 
glGëVîãxAºayIndexediv
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2835 
GLAPI
 
APIENTRY
 
glGëVîãxAºayIndexed64iv
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øm
);

2836 
GLAPI
 
APIENTRY
 
glCª©eSam∂îs
 (
GLsizei
 
n
, 
GLuöt
 *
ßm∂îs
);

2837 
GLAPI
 
APIENTRY
 
glCª©eProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

2838 
GLAPI
 
APIENTRY
 
glCª©eQuîõs
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, 
GLuöt
 *
ids
);

2839 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘i64v
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2840 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘iv
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2841 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘ui64v
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2842 
GLAPI
 
APIENTRY
 
glGëQuîyBuf„rObje˘uiv
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2843 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrByRegi⁄
 (
GLbôfõld
 
b¨rõrs
);

2844 
GLAPI
 
APIENTRY
 
glGëTextuªSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
pixñs
);

2845 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
bufSize
, *
pixñs
);

2846 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètus
 ();

2847 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, *
pixñs
);

2848 
GLAPI
 
APIENTRY
 
glGënTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
pixñs
);

2849 
GLAPI
 
APIENTRY
 
glGënUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

2850 
GLAPI
 
APIENTRY
 
glGënUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

2851 
GLAPI
 
APIENTRY
 
glGënUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

2852 
GLAPI
 
APIENTRY
 
glGënUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

2853 
GLAPI
 
APIENTRY
 
glRódnPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

2854 
GLAPI
 
APIENTRY
 
glGënM≠dv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

2855 
GLAPI
 
APIENTRY
 
glGënM≠fv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

2856 
GLAPI
 
APIENTRY
 
glGënM≠iv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

2857 
GLAPI
 
APIENTRY
 
glGënPixñM≠fv
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

2858 
GLAPI
 
APIENTRY
 
glGënPixñM≠uiv
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

2859 
GLAPI
 
APIENTRY
 
glGënPixñM≠usv
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

2860 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂e
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

2861 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
èbÀ
);

2862 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
image
);

2863 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, *
row
, GLsizeò
cﬁumnBufSize
, *
cﬁumn
, *
•™
);

2864 
GLAPI
 
APIENTRY
 
glGënHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

2865 
GLAPI
 
APIENTRY
 
glGënMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

2866 
GLAPI
 
APIENTRY
 
glTextuªB¨rõr
 ();

2870 #i‚de‡
GL_ARB_ES2_com∑tibûôy


2871 
	#GL_ARB_ES2_com∑tibûôy
 1

	)

2874 #i‚de‡
GL_ARB_ES3_1_com∑tibûôy


2875 
	#GL_ARB_ES3_1_com∑tibûôy
 1

	)

2878 #i‚de‡
GL_ARB_ES3_2_com∑tibûôy


2879 
	#GL_ARB_ES3_2_com∑tibûôy
 1

	)

2880 
	#GL_PRIMITIVE_BOUNDING_BOX_ARB
 0x92BE

	)

2881 
	#GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB
 0x9381

	)

2882 
	#GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB
 0x9382

	)

2883 (
APIENTRYP
 
	tPFNGLPRIMITIVEBOUNDINGBOXARBPROC
Ë(
	tGLÊﬂt
 
	tmöX
, GLÊﬂà
	tmöY
, GLÊﬂà
	tmöZ
, GLÊﬂà
	tmöW
, GLÊﬂà
	tmaxX
, GLÊﬂà
	tmaxY
, GLÊﬂà
	tmaxZ
, GLÊﬂà
	tmaxW
);

2884 #ifde‡
GL_GLEXT_PROTOTYPES


2885 
GLAPI
 
APIENTRY
 
glPrimôiveBoundögBoxARB
 (
GLÊﬂt
 
möX
, GLÊﬂà
möY
, GLÊﬂà
möZ
, GLÊﬂà
möW
, GLÊﬂà
maxX
, GLÊﬂà
maxY
, GLÊﬂà
maxZ
, GLÊﬂà
maxW
);

2889 #i‚de‡
GL_ARB_ES3_com∑tibûôy


2890 
	#GL_ARB_ES3_com∑tibûôy
 1

	)

2893 #i‚de‡
GL_ARB_¨øys_of_¨øys


2894 
	#GL_ARB_¨øys_of_¨øys
 1

	)

2897 #i‚de‡
GL_ARB_ba£_ö°™˚


2898 
	#GL_ARB_ba£_ö°™˚
 1

	)

2901 #i‚de‡
GL_ARB_bödÀss_ãxtuª


2902 
	#GL_ARB_bödÀss_ãxtuª
 1

	)

2903 
uöt64_t
 
	tGLuöt64EXT
;

2904 
	#GL_UNSIGNED_INT64_ARB
 0x140F

	)

2905 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
);

2906 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

2907 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2908 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2909 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

2910 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

2911 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2912 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2913 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

2914 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2915 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

2916 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2917 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2918 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64ARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

2919 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

2920 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

2921 #ifde‡
GL_GLEXT_PROTOTYPES


2922 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀARB
 (
GLuöt
 
ãxtuª
);

2923 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀARB
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

2924 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2925 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2926 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀARB
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

2927 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

2928 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2929 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2930 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

2931 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2932 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

2933 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2934 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2935 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64ARB
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

2936 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vARB
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

2937 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

2941 #i‚de‡
GL_ARB_bÀnd_func_exãnded


2942 
	#GL_ARB_bÀnd_func_exãnded
 1

	)

2945 #i‚de‡
GL_ARB_buf„r_°‹age


2946 
	#GL_ARB_buf„r_°‹age
 1

	)

2949 #i‚de‡
GL_ARB_˛_evít


2950 
	#GL_ARB_˛_evít
 1

	)

2951 
_˛_c⁄ãxt
;

2952 
_˛_evít
;

2953 
	#GL_SYNC_CL_EVENT_ARB
 0x8240

	)

2954 
	#GL_SYNC_CL_EVENT_COMPLETE_ARB
 0x8241

	)

2955 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLCREATESYNCFROMCLEVENTARBPROC
Ë(
	t_˛_c⁄ãxt
 *
	tc⁄ãxt
, 
	t_˛_evít
 *
	tevít
, 
	tGLbôfõld
 
	tÊags
);

2956 #ifde‡
GL_GLEXT_PROTOTYPES


2957 
GLAPI
 
GLsync
 
APIENTRY
 
glCª©eSyncFromCLevítARB
 (
_˛_c⁄ãxt
 *
c⁄ãxt
, 
_˛_evít
 *
evít
, 
GLbôfõld
 
Êags
);

2961 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


2962 
	#GL_ARB_˛ór_buf„r_obje˘
 1

	)

2965 #i‚de‡
GL_ARB_˛ór_ãxtuª


2966 
	#GL_ARB_˛ór_ãxtuª
 1

	)

2969 #i‚de‡
GL_ARB_˛ù_c⁄åﬁ


2970 
	#GL_ARB_˛ù_c⁄åﬁ
 1

	)

2973 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


2974 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

2975 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

2976 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

2977 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

2978 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

2979 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

2980 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

2981 #ifde‡
GL_GLEXT_PROTOTYPES


2982 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

2986 #i‚de‡
GL_ARB_com∑tibûôy


2987 
	#GL_ARB_com∑tibûôy
 1

	)

2990 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


2991 
	#GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 1

	)

2994 #i‚de‡
GL_ARB_compuã_shadî


2995 
	#GL_ARB_compuã_shadî
 1

	)

2998 #i‚de‡
GL_ARB_compuã_v¨übÀ_group_size


2999 
	#GL_ARB_compuã_v¨übÀ_group_size
 1

	)

3000 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
 0x9344

	)

3001 
	#GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
 0x90EB

	)

3002 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
 0x9345

	)

3003 
	#GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
 0x91BF

	)

3004 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
, GLuöà
	tgroup_size_x
, GLuöà
	tgroup_size_y
, GLuöà
	tgroup_size_z
);

3005 #ifde‡
GL_GLEXT_PROTOTYPES


3006 
GLAPI
 
APIENTRY
 
glDi•©chCompuãGroupSizeARB
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
, GLuöà
group_size_x
, GLuöà
group_size_y
, GLuöà
group_size_z
);

3010 #i‚de‡
GL_ARB_c⁄dôi⁄Æ_ªndî_övîãd


3011 
	#GL_ARB_c⁄dôi⁄Æ_ªndî_övîãd
 1

	)

3014 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


3015 
	#GL_ARB_c⁄£rv©ive_dïth
 1

	)

3018 #i‚de‡
GL_ARB_c›y_buf„r


3019 
	#GL_ARB_c›y_buf„r
 1

	)

3022 #i‚de‡
GL_ARB_c›y_image


3023 
	#GL_ARB_c›y_image
 1

	)

3026 #i‚de‡
GL_ARB_cuŒ_di°™˚


3027 
	#GL_ARB_cuŒ_di°™˚
 1

	)

3030 #i‚de‡
GL_ARB_debug_ouçut


3031 
	#GL_ARB_debug_ouçut
 1

	)

3032 (
APIENTRY
 *
	tGLDEBUGPROCARB
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

3033 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
 0x8242

	)

3034 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
 0x8243

	)

3035 
	#GL_DEBUG_CALLBACK_FUNCTION_ARB
 0x8244

	)

3036 
	#GL_DEBUG_CALLBACK_USER_PARAM_ARB
 0x8245

	)

3037 
	#GL_DEBUG_SOURCE_API_ARB
 0x8246

	)

3038 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
 0x8247

	)

3039 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
 0x8248

	)

3040 
	#GL_DEBUG_SOURCE_THIRD_PARTY_ARB
 0x8249

	)

3041 
	#GL_DEBUG_SOURCE_APPLICATION_ARB
 0x824A

	)

3042 
	#GL_DEBUG_SOURCE_OTHER_ARB
 0x824B

	)

3043 
	#GL_DEBUG_TYPE_ERROR_ARB
 0x824C

	)

3044 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
 0x824D

	)

3045 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
 0x824E

	)

3046 
	#GL_DEBUG_TYPE_PORTABILITY_ARB
 0x824F

	)

3047 
	#GL_DEBUG_TYPE_PERFORMANCE_ARB
 0x8250

	)

3048 
	#GL_DEBUG_TYPE_OTHER_ARB
 0x8251

	)

3049 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
 0x9143

	)

3050 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
 0x9144

	)

3051 
	#GL_DEBUG_LOGGED_MESSAGES_ARB
 0x9145

	)

3052 
	#GL_DEBUG_SEVERITY_HIGH_ARB
 0x9146

	)

3053 
	#GL_DEBUG_SEVERITY_MEDIUM_ARB
 0x9147

	)

3054 
	#GL_DEBUG_SEVERITY_LOW_ARB
 0x9148

	)

3055 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

3056 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

3057 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKARBPROC
Ë(
	tGLDEBUGPROCARB
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

3058 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGARBPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

3059 #ifde‡
GL_GLEXT_PROTOTYPES


3060 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

3061 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

3062 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackARB
 (
GLDEBUGPROCARB
 
ˇŒback
, c⁄° *
u£rP¨am
);

3063 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogARB
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

3067 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


3068 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

3071 #i‚de‡
GL_ARB_dïth_˛amp


3072 
	#GL_ARB_dïth_˛amp
 1

	)

3075 #i‚de‡
GL_ARB_dïth_ãxtuª


3076 
	#GL_ARB_dïth_ãxtuª
 1

	)

3077 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

3078 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

3079 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

3080 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

3081 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

3084 #i‚de‡
GL_ARB_dîiv©ive_c⁄åﬁ


3085 
	#GL_ARB_dîiv©ive_c⁄åﬁ
 1

	)

3088 #i‚de‡
GL_ARB_dúe˘_°©e_ac˚ss


3089 
	#GL_ARB_dúe˘_°©e_ac˚ss
 1

	)

3092 #i‚de‡
GL_ARB_døw_buf„rs


3093 
	#GL_ARB_døw_buf„rs
 1

	)

3094 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

3095 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

3096 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

3097 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

3098 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

3099 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

3100 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

3101 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

3102 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

3103 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

3104 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

3105 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

3106 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

3107 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

3108 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

3109 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

3110 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

3111 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

3112 #ifde‡
GL_GLEXT_PROTOTYPES


3113 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

3117 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


3118 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

3119 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

3120 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

3121 (
APIENTRYP
 
	tPFNGLBLENDFUNCIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

3122 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

3123 #ifde‡
GL_GLEXT_PROTOTYPES


3124 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄iARB
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

3125 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

3126 
GLAPI
 
APIENTRY
 
glBÀndFunciARB
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

3127 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

3131 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


3132 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

3135 #i‚de‡
GL_ARB_døw_ödúe˘


3136 
	#GL_ARB_døw_ödúe˘
 1

	)

3139 #i‚de‡
GL_ARB_døw_ö°™˚d


3140 
	#GL_ARB_døw_ö°™˚d
 1

	)

3141 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

3142 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

3143 #ifde‡
GL_GLEXT_PROTOTYPES


3144 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dARB
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

3145 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dARB
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

3149 #i‚de‡
GL_ARB_íh™˚d_œyouts


3150 
	#GL_ARB_íh™˚d_œyouts
 1

	)

3153 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


3154 
	#GL_ARB_ex∂icô_©åib_loˇti⁄
 1

	)

3157 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


3158 
	#GL_ARB_ex∂icô_unif‹m_loˇti⁄
 1

	)

3161 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


3162 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

3165 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


3166 
	#GL_ARB_‰agmít_œyî_võwp‹t
 1

	)

3169 #i‚de‡
GL_ARB_‰agmít_¥ogøm


3170 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

3171 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

3172 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

3173 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

3174 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

3175 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

3176 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

3177 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

3178 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

3179 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

3180 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

3181 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

3182 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

3183 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

3184 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

3185 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

3186 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

3187 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

3188 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

3189 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

3190 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

3191 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

3192 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

3193 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

3194 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

3195 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

3196 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

3197 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

3198 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

3199 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

3200 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

3201 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

3202 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

3203 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

3204 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

3205 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

3206 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

3207 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

3208 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

3209 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

3210 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

3211 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

3212 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

3213 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

3214 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

3215 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

3216 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

3217 
	#GL_MATRIX0_ARB
 0x88C0

	)

3218 
	#GL_MATRIX1_ARB
 0x88C1

	)

3219 
	#GL_MATRIX2_ARB
 0x88C2

	)

3220 
	#GL_MATRIX3_ARB
 0x88C3

	)

3221 
	#GL_MATRIX4_ARB
 0x88C4

	)

3222 
	#GL_MATRIX5_ARB
 0x88C5

	)

3223 
	#GL_MATRIX6_ARB
 0x88C6

	)

3224 
	#GL_MATRIX7_ARB
 0x88C7

	)

3225 
	#GL_MATRIX8_ARB
 0x88C8

	)

3226 
	#GL_MATRIX9_ARB
 0x88C9

	)

3227 
	#GL_MATRIX10_ARB
 0x88CA

	)

3228 
	#GL_MATRIX11_ARB
 0x88CB

	)

3229 
	#GL_MATRIX12_ARB
 0x88CC

	)

3230 
	#GL_MATRIX13_ARB
 0x88CD

	)

3231 
	#GL_MATRIX14_ARB
 0x88CE

	)

3232 
	#GL_MATRIX15_ARB
 0x88CF

	)

3233 
	#GL_MATRIX16_ARB
 0x88D0

	)

3234 
	#GL_MATRIX17_ARB
 0x88D1

	)

3235 
	#GL_MATRIX18_ARB
 0x88D2

	)

3236 
	#GL_MATRIX19_ARB
 0x88D3

	)

3237 
	#GL_MATRIX20_ARB
 0x88D4

	)

3238 
	#GL_MATRIX21_ARB
 0x88D5

	)

3239 
	#GL_MATRIX22_ARB
 0x88D6

	)

3240 
	#GL_MATRIX23_ARB
 0x88D7

	)

3241 
	#GL_MATRIX24_ARB
 0x88D8

	)

3242 
	#GL_MATRIX25_ARB
 0x88D9

	)

3243 
	#GL_MATRIX26_ARB
 0x88DA

	)

3244 
	#GL_MATRIX27_ARB
 0x88DB

	)

3245 
	#GL_MATRIX28_ARB
 0x88DC

	)

3246 
	#GL_MATRIX29_ARB
 0x88DD

	)

3247 
	#GL_MATRIX30_ARB
 0x88DE

	)

3248 
	#GL_MATRIX31_ARB
 0x88DF

	)

3249 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

3250 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

3251 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

3252 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

3253 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

3254 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

3255 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

3256 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3257 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

3258 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

3259 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

3260 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3261 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

3262 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

3263 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

3264 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

3265 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3266 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, *
	t°rög
);

3267 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

3268 #ifde‡
GL_GLEXT_PROTOTYPES


3269 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° *
°rög
);

3270 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
 
èrgë
, 
GLuöt
 
¥ogøm
);

3271 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

3272 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

3273 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

3274 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

3275 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

3276 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

3277 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

3278 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

3279 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

3280 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

3281 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

3282 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

3283 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

3284 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

3285 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3286 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, *
°rög
);

3287 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
 
¥ogøm
);

3291 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


3292 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

3295 #i‚de‡
GL_ARB_‰agmít_shadî


3296 
	#GL_ARB_‰agmít_shadî
 1

	)

3297 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

3298 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

3299 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

3302 #i‚de‡
GL_ARB_‰agmít_shadî_öãæock


3303 
	#GL_ARB_‰agmít_shadî_öãæock
 1

	)

3306 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


3307 
	#GL_ARB_‰amebuf„r_no_©èchmíts
 1

	)

3310 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


3311 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

3314 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


3315 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

3318 #i‚de‡
GL_ARB_geomëry_shadî4


3319 
	#GL_ARB_geomëry_shadî4
 1

	)

3320 
	#GL_LINES_ADJACENCY_ARB
 0x000A

	)

3321 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0x000B

	)

3322 
	#GL_TRIANGLES_ADJACENCY_ARB
 0x000C

	)

3323 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0x000D

	)

3324 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

3325 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

3326 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

3327 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

3328 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

3329 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

3330 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

3331 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

3332 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

3333 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

3334 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

3335 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

3336 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

3337 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

3338 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

3339 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

3340 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

3341 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

3342 #ifde‡
GL_GLEXT_PROTOTYPES


3343 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiARB
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

3344 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

3345 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

3346 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚ARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

3350 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


3351 
	#GL_ARB_gë_¥ogøm_bö¨y
 1

	)

3354 #i‚de‡
GL_ARB_gë_ãxtuª_sub_image


3355 
	#GL_ARB_gë_ãxtuª_sub_image
 1

	)

3358 #i‚de‡
GL_ARB_gpu_shadî5


3359 
	#GL_ARB_gpu_shadî5
 1

	)

3362 #i‚de‡
GL_ARB_gpu_shadî_Â64


3363 
	#GL_ARB_gpu_shadî_Â64
 1

	)

3366 #i‚de‡
GL_ARB_gpu_shadî_öt64


3367 
	#GL_ARB_gpu_shadî_öt64
 1

	)

3368 
	#GL_INT64_ARB
 0x140E

	)

3369 
	#GL_INT64_VEC2_ARB
 0x8FE9

	)

3370 
	#GL_INT64_VEC3_ARB
 0x8FEA

	)

3371 
	#GL_INT64_VEC4_ARB
 0x8FEB

	)

3372 
	#GL_UNSIGNED_INT64_VEC2_ARB
 0x8FF5

	)

3373 
	#GL_UNSIGNED_INT64_VEC3_ARB
 0x8FF6

	)

3374 
	#GL_UNSIGNED_INT64_VEC4_ARB
 0x8FF7

	)

3375 (
APIENTRYP
 
	tPFNGLUNIFORM1I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
);

3376 (
APIENTRYP
 
	tPFNGLUNIFORM2I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
);

3377 (
APIENTRYP
 
	tPFNGLUNIFORM3I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
);

3378 (
APIENTRYP
 
	tPFNGLUNIFORM4I64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
, GLöt64 
	tw
);

3379 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3380 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3381 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3382 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3383 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
);

3384 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
);

3385 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
);

3386 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
, GLuöt64 
	tw
);

3387 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3388 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3389 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3390 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3391 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 *
	t∑øms
);

3392 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 *
	t∑øms
);

3393 (
APIENTRYP
 
	tPFNGLGETNUNIFORMI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

3394 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt64
 *
	t∑øms
);

3395 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
);

3396 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
);

3397 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
);

3398 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64
 
	tx
, GLöt64 
	ty
, GLöt64 
	tz
, GLöt64 
	tw
);

3399 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3400 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3401 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3402 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64
 *
	tvÆue
);

3403 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
);

3404 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
);

3405 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
);

3406 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tx
, GLuöt64 
	ty
, GLuöt64 
	tz
, GLuöt64 
	tw
);

3407 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3408 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3409 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3410 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

3411 #ifde‡
GL_GLEXT_PROTOTYPES


3412 
GLAPI
 
APIENTRY
 
glUnif‹m1i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
);

3413 
GLAPI
 
APIENTRY
 
glUnif‹m2i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
);

3414 
GLAPI
 
APIENTRY
 
glUnif‹m3i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
);

3415 
GLAPI
 
APIENTRY
 
glUnif‹m4i64ARB
 (
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
, GLöt64 
w
);

3416 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3417 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3418 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3419 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3420 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
);

3421 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
);

3422 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
);

3423 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
, GLuöt64 
w
);

3424 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3425 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3426 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3427 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3428 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 *
∑øms
);

3429 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 *
∑øms
);

3430 
GLAPI
 
APIENTRY
 
glGënUnif‹mi64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

3431 
GLAPI
 
APIENTRY
 
glGënUnif‹mui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLuöt64
 *
∑øms
);

3432 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
);

3433 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
);

3434 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
);

3435 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64
 
x
, GLöt64 
y
, GLöt64 
z
, GLöt64 
w
);

3436 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3437 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3438 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3439 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64
 *
vÆue
);

3440 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
);

3441 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
);

3442 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
);

3443 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
x
, GLuöt64 
y
, GLuöt64 
z
, GLuöt64 
w
);

3444 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3445 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3446 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3447 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

3451 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


3452 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

3453 
	tGLhÆfARB
;

3454 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

3457 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


3458 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

3461 #i‚de‡
GL_ARB_imagög


3462 
	#GL_ARB_imagög
 1

	)

3463 
	#GL_BLEND_COLOR
 0x8005

	)

3464 
	#GL_BLEND_EQUATION
 0x8009

	)

3465 
	#GL_CONVOLUTION_1D
 0x8010

	)

3466 
	#GL_CONVOLUTION_2D
 0x8011

	)

3467 
	#GL_SEPARABLE_2D
 0x8012

	)

3468 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

3469 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

3470 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

3471 
	#GL_REDUCE
 0x8016

	)

3472 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

3473 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

3474 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

3475 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

3476 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

3477 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

3478 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

3479 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

3480 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

3481 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

3482 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

3483 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

3484 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

3485 
	#GL_HISTOGRAM
 0x8024

	)

3486 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

3487 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

3488 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

3489 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

3490 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

3491 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

3492 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

3493 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

3494 
	#GL_HISTOGRAM_SINK
 0x802D

	)

3495 
	#GL_MINMAX
 0x802E

	)

3496 
	#GL_MINMAX_FORMAT
 0x802F

	)

3497 
	#GL_MINMAX_SINK
 0x8030

	)

3498 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

3499 
	#GL_COLOR_MATRIX
 0x80B1

	)

3500 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

3501 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

3502 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

3503 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

3504 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

3505 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

3506 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

3507 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

3508 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

3509 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

3510 
	#GL_COLOR_TABLE
 0x80D0

	)

3511 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

3512 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

3513 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

3514 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

3515 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

3516 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

3517 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

3518 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

3519 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

3520 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

3521 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

3522 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

3523 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

3524 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

3525 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

3526 
	#GL_CONSTANT_BORDER
 0x8151

	)

3527 
	#GL_REPLICATE_BORDER
 0x8153

	)

3528 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

3529 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

3530 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3531 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3532 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3533 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tèbÀ
);

3534 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3535 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3536 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

3537 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

3538 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

3539 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

3540 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

3541 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3542 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

3543 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3544 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3545 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3546 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	timage
);

3547 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3548 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3549 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	trow
, *
	tcﬁumn
, *
	t•™
);

3550 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	trow
, c⁄° *
	tcﬁumn
);

3551 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

3552 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3553 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3554 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

3555 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3556 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3557 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3558 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3559 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

3560 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

3561 #ifde‡
GL_GLEXT_PROTOTYPES


3562 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

3563 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3564 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

3565 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

3566 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
èbÀ
);

3567 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3568 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3569 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

3570 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

3571 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

3572 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

3573 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

3574 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3575 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

3576 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

3577 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

3578 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

3579 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
image
);

3580 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3581 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3582 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
row
, *
cﬁumn
, *
•™
);

3583 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
row
, c⁄° *
cﬁumn
);

3584 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

3585 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3586 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3587 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

3588 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3589 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3590 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

3591 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

3592 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
 
èrgë
);

3593 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
 
èrgë
);

3597 #i‚de‡
GL_ARB_ödúe˘_∑ømëîs


3598 
	#GL_ARB_ödúe˘_∑ømëîs
 1

	)

3599 
	#GL_PARAMETER_BUFFER_ARB
 0x80EE

	)

3600 
	#GL_PARAMETER_BUFFER_BINDING_ARB
 0x80EF

	)

3601 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3602 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3603 #ifde‡
GL_GLEXT_PROTOTYPES


3604 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘Cou¡ARB
 (
GLíum
 
mode
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3605 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘Cou¡ARB
 (
GLíum
 
mode
, GLíum 
ty≥
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3609 #i‚de‡
GL_ARB_ö°™˚d_¨øys


3610 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

3611 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
 0x88FE

	)

3612 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORARBPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

3613 #ifde‡
GL_GLEXT_PROTOTYPES


3614 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹ARB
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

3618 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


3619 
	#GL_ARB_öã∫Æf‹m©_quîy
 1

	)

3622 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


3623 
	#GL_ARB_öã∫Æf‹m©_quîy2
 1

	)

3624 
	#GL_SRGB_DECODE_ARB
 0x8299

	)

3627 #i‚de‡
GL_ARB_övÆid©e_subd©a


3628 
	#GL_ARB_övÆid©e_subd©a
 1

	)

3631 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


3632 
	#GL_ARB_m≠_buf„r_Æignmít
 1

	)

3635 #i‚de‡
GL_ARB_m≠_buf„r_ønge


3636 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

3639 #i‚de‡
GL_ARB_m©rix_∑Àâe


3640 
	#GL_ARB_m©rix_∑Àâe
 1

	)

3641 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

3642 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

3643 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

3644 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

3645 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

3646 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

3647 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

3648 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

3649 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

3650 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

3651 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

3652 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

3653 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

3654 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

3655 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

3656 #ifde‡
GL_GLEXT_PROTOTYPES


3657 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
 
ödex
);

3658 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
ödi˚s
);

3659 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
ödi˚s
);

3660 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
ödi˚s
);

3661 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

3665 #i‚de‡
GL_ARB_mu…i_böd


3666 
	#GL_ARB_mu…i_böd
 1

	)

3669 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


3670 
	#GL_ARB_mu…i_døw_ödúe˘
 1

	)

3673 #i‚de‡
GL_ARB_mu…ißm∂e


3674 
	#GL_ARB_mu…ißm∂e
 1

	)

3675 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

3676 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

3677 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

3678 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

3679 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

3680 
	#GL_SAMPLES_ARB
 0x80A9

	)

3681 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

3682 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

3683 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

3684 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3685 #ifde‡
GL_GLEXT_PROTOTYPES


3686 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

3690 #i‚de‡
GL_ARB_mu…ôextuª


3691 
	#GL_ARB_mu…ôextuª
 1

	)

3692 
	#GL_TEXTURE0_ARB
 0x84C0

	)

3693 
	#GL_TEXTURE1_ARB
 0x84C1

	)

3694 
	#GL_TEXTURE2_ARB
 0x84C2

	)

3695 
	#GL_TEXTURE3_ARB
 0x84C3

	)

3696 
	#GL_TEXTURE4_ARB
 0x84C4

	)

3697 
	#GL_TEXTURE5_ARB
 0x84C5

	)

3698 
	#GL_TEXTURE6_ARB
 0x84C6

	)

3699 
	#GL_TEXTURE7_ARB
 0x84C7

	)

3700 
	#GL_TEXTURE8_ARB
 0x84C8

	)

3701 
	#GL_TEXTURE9_ARB
 0x84C9

	)

3702 
	#GL_TEXTURE10_ARB
 0x84CA

	)

3703 
	#GL_TEXTURE11_ARB
 0x84CB

	)

3704 
	#GL_TEXTURE12_ARB
 0x84CC

	)

3705 
	#GL_TEXTURE13_ARB
 0x84CD

	)

3706 
	#GL_TEXTURE14_ARB
 0x84CE

	)

3707 
	#GL_TEXTURE15_ARB
 0x84CF

	)

3708 
	#GL_TEXTURE16_ARB
 0x84D0

	)

3709 
	#GL_TEXTURE17_ARB
 0x84D1

	)

3710 
	#GL_TEXTURE18_ARB
 0x84D2

	)

3711 
	#GL_TEXTURE19_ARB
 0x84D3

	)

3712 
	#GL_TEXTURE20_ARB
 0x84D4

	)

3713 
	#GL_TEXTURE21_ARB
 0x84D5

	)

3714 
	#GL_TEXTURE22_ARB
 0x84D6

	)

3715 
	#GL_TEXTURE23_ARB
 0x84D7

	)

3716 
	#GL_TEXTURE24_ARB
 0x84D8

	)

3717 
	#GL_TEXTURE25_ARB
 0x84D9

	)

3718 
	#GL_TEXTURE26_ARB
 0x84DA

	)

3719 
	#GL_TEXTURE27_ARB
 0x84DB

	)

3720 
	#GL_TEXTURE28_ARB
 0x84DC

	)

3721 
	#GL_TEXTURE29_ARB
 0x84DD

	)

3722 
	#GL_TEXTURE30_ARB
 0x84DE

	)

3723 
	#GL_TEXTURE31_ARB
 0x84DF

	)

3724 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

3725 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

3726 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

3727 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3728 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3729 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3730 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3731 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3732 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3733 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3734 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3735 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3736 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3737 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3738 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3739 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3740 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3741 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3742 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3743 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3744 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3745 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3746 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3747 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3748 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3749 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3750 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3751 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3752 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3753 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3754 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3755 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3756 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3757 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3758 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3759 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3760 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3761 #ifde‡
GL_GLEXT_PROTOTYPES


3762 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

3763 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

3764 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

3765 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3766 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

3767 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3768 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

3769 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3770 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

3771 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3772 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

3773 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3774 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

3775 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3776 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

3777 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3778 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

3779 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3780 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

3781 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3782 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

3783 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3784 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

3785 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3786 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

3787 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3788 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

3789 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3790 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

3791 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3792 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

3793 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3794 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

3795 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3799 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


3800 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

3801 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

3802 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

3803 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

3804 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

3805 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

3806 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

3807 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

3808 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

3809 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

3810 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

3811 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3812 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3813 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

3814 #ifde‡
GL_GLEXT_PROTOTYPES


3815 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

3816 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

3817 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
 
id
);

3818 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

3819 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
 
èrgë
);

3820 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3821 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

3822 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

3826 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


3827 
	#GL_ARB_oc˛usi⁄_quîy2
 1

	)

3830 #i‚de‡
GL_ARB_∑øŒñ_shadî_compûe


3831 
	#GL_ARB_∑øŒñ_shadî_compûe
 1

	)

3832 
	#GL_MAX_SHADER_COMPILER_THREADS_ARB
 0x91B0

	)

3833 
	#GL_COMPLETION_STATUS_ARB
 0x91B1

	)

3834 (
APIENTRYP
 
	tPFNGLMAXSHADERCOMPILERTHREADSARBPROC
Ë(
	tGLuöt
 
	tcou¡
);

3835 #ifde‡
GL_GLEXT_PROTOTYPES


3836 
GLAPI
 
APIENTRY
 
glMaxShadîCompûîThªadsARB
 (
GLuöt
 
cou¡
);

3840 #i‚de‡
GL_ARB_pùñöe_°©i°ics_quîy


3841 
	#GL_ARB_pùñöe_°©i°ics_quîy
 1

	)

3842 
	#GL_VERTICES_SUBMITTED_ARB
 0x82EE

	)

3843 
	#GL_PRIMITIVES_SUBMITTED_ARB
 0x82EF

	)

3844 
	#GL_VERTEX_SHADER_INVOCATIONS_ARB
 0x82F0

	)

3845 
	#GL_TESS_CONTROL_SHADER_PATCHES_ARB
 0x82F1

	)

3846 
	#GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
 0x82F2

	)

3847 
	#GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB
 0x82F3

	)

3848 
	#GL_FRAGMENT_SHADER_INVOCATIONS_ARB
 0x82F4

	)

3849 
	#GL_COMPUTE_SHADER_INVOCATIONS_ARB
 0x82F5

	)

3850 
	#GL_CLIPPING_INPUT_PRIMITIVES_ARB
 0x82F6

	)

3851 
	#GL_CLIPPING_OUTPUT_PRIMITIVES_ARB
 0x82F7

	)

3854 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


3855 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

3856 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

3857 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

3858 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

3859 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

3862 #i‚de‡
GL_ARB_poöt_∑ømëîs


3863 
	#GL_ARB_poöt_∑ømëîs
 1

	)

3864 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

3865 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

3866 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

3867 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

3868 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

3869 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3870 #ifde‡
GL_GLEXT_PROTOTYPES


3871 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

3872 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3876 #i‚de‡
GL_ARB_poöt_•rôe


3877 
	#GL_ARB_poöt_•rôe
 1

	)

3878 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

3879 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

3882 #i‚de‡
GL_ARB_po°_dïth_covîage


3883 
	#GL_ARB_po°_dïth_covîage
 1

	)

3886 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


3887 
	#GL_ARB_¥ogøm_öãrÁ˚_quîy
 1

	)

3890 #i‚de‡
GL_ARB_¥ovokög_vîãx


3891 
	#GL_ARB_¥ovokög_vîãx
 1

	)

3894 #i‚de‡
GL_ARB_quîy_buf„r_obje˘


3895 
	#GL_ARB_quîy_buf„r_obje˘
 1

	)

3898 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


3899 
	#GL_ARB_robu°_buf„r_ac˚ss_behavi‹
 1

	)

3902 #i‚de‡
GL_ARB_robu°√ss


3903 
	#GL_ARB_robu°√ss
 1

	)

3904 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

3905 
	#GL_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

3906 
	#GL_GUILTY_CONTEXT_RESET_ARB
 0x8253

	)

3907 
	#GL_INNOCENT_CONTEXT_RESET_ARB
 0x8254

	)

3908 
	#GL_UNKNOWN_CONTEXT_RESET_ARB
 0x8255

	)

3909 
	#GL_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

3910 
	#GL_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

3911 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSARBPROC
) ();

3912 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3913 (
APIENTRYP
 
	tPFNGLREADNPIXELSARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

3914 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3915 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

3916 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

3917 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

3918 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

3919 (
APIENTRYP
 
	tPFNGLGETNMAPDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

3920 (
APIENTRYP
 
	tPFNGLGETNMAPFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

3921 (
APIENTRYP
 
	tPFNGLGETNMAPIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

3922 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

3923 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

3924 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

3925 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEARBPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

3926 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tèbÀ
);

3927 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timage
);

3928 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, *
	trow
, GLsizeò
	tcﬁumnBufSize
, *
	tcﬁumn
, *
	t•™
);

3929 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

3930 (
APIENTRYP
 
	tPFNGLGETNMINMAXARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

3931 #ifde‡
GL_GLEXT_PROTOTYPES


3932 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètusARB
 ();

3933 
GLAPI
 
APIENTRY
 
glGënTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
img
);

3934 
GLAPI
 
APIENTRY
 
glRódnPixñsARB
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

3935 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, *
img
);

3936 
GLAPI
 
APIENTRY
 
glGënUnif‹mfvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

3937 
GLAPI
 
APIENTRY
 
glGënUnif‹mivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

3938 
GLAPI
 
APIENTRY
 
glGënUnif‹muivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

3939 
GLAPI
 
APIENTRY
 
glGënUnif‹mdvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

3940 
GLAPI
 
APIENTRY
 
glGënM≠dvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

3941 
GLAPI
 
APIENTRY
 
glGënM≠fvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

3942 
GLAPI
 
APIENTRY
 
glGënM≠ivARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

3943 
GLAPI
 
APIENTRY
 
glGënPixñM≠fvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

3944 
GLAPI
 
APIENTRY
 
glGënPixñM≠uivARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

3945 
GLAPI
 
APIENTRY
 
glGënPixñM≠usvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

3946 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂eARB
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

3947 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
èbÀ
);

3948 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄FûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
image
);

3949 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, *
row
, GLsizeò
cﬁumnBufSize
, *
cﬁumn
, *
•™
);

3950 
GLAPI
 
APIENTRY
 
glGënHi°ogømARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

3951 
GLAPI
 
APIENTRY
 
glGënMömaxARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

3955 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


3956 
	#GL_ARB_robu°√ss_isﬁ©i⁄
 1

	)

3959 #i‚de‡
GL_ARB_ßm∂e_loˇti⁄s


3960 
	#GL_ARB_ßm∂e_loˇti⁄s
 1

	)

3961 
	#GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB
 0x933D

	)

3962 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB
 0x933E

	)

3963 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB
 0x933F

	)

3964 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB
 0x9340

	)

3965 
	#GL_SAMPLE_LOCATION_ARB
 0x8E50

	)

3966 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB
 0x9341

	)

3967 
	#GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB
 0x9342

	)

3968 
	#GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB
 0x9343

	)

3969 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3970 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, GLuöà
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3971 (
APIENTRYP
 
	tPFNGLEVALUATEDEPTHVALUESARBPROC
) ();

3972 #ifde‡
GL_GLEXT_PROTOTYPES


3973 
GLAPI
 
APIENTRY
 
glFømebuf„rSam∂eLoˇti⁄sfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

3974 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rSam∂eLoˇti⁄sfvARB
 (
GLuöt
 
‰amebuf„r
, GLuöà
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

3975 
GLAPI
 
APIENTRY
 
glEvÆu©eDïthVÆuesARB
 ();

3979 #i‚de‡
GL_ARB_ßm∂e_shadög


3980 
	#GL_ARB_ßm∂e_shadög
 1

	)

3981 
	#GL_SAMPLE_SHADING_ARB
 0x8C36

	)

3982 
	#GL_MIN_SAMPLE_SHADING_VALUE_ARB
 0x8C37

	)

3983 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

3984 #ifde‡
GL_GLEXT_PROTOTYPES


3985 
GLAPI
 
APIENTRY
 
glMöSam∂eShadögARB
 (
GLÊﬂt
 
vÆue
);

3989 #i‚de‡
GL_ARB_ßm∂î_obje˘s


3990 
	#GL_ARB_ßm∂î_obje˘s
 1

	)

3993 #i‚de‡
GL_ARB_£amÀss_cube_m≠


3994 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

3997 #i‚de‡
GL_ARB_£amÀss_cubem≠_≥r_ãxtuª


3998 
	#GL_ARB_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

4001 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


4002 
	#GL_ARB_£∑øã_shadî_obje˘s
 1

	)

4005 #i‚de‡
GL_ARB_shadî_©omic_cou¡î_›s


4006 
	#GL_ARB_shadî_©omic_cou¡î_›s
 1

	)

4009 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


4010 
	#GL_ARB_shadî_©omic_cou¡îs
 1

	)

4013 #i‚de‡
GL_ARB_shadî_bÆlŸ


4014 
	#GL_ARB_shadî_bÆlŸ
 1

	)

4017 #i‚de‡
GL_ARB_shadî_bô_ícodög


4018 
	#GL_ARB_shadî_bô_ícodög
 1

	)

4021 #i‚de‡
GL_ARB_shadî_˛ock


4022 
	#GL_ARB_shadî_˛ock
 1

	)

4025 #i‚de‡
GL_ARB_shadî_døw_∑ømëîs


4026 
	#GL_ARB_shadî_døw_∑ømëîs
 1

	)

4029 #i‚de‡
GL_ARB_shadî_group_vŸe


4030 
	#GL_ARB_shadî_group_vŸe
 1

	)

4033 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


4034 
	#GL_ARB_shadî_image_lﬂd_°‹e
 1

	)

4037 #i‚de‡
GL_ARB_shadî_image_size


4038 
	#GL_ARB_shadî_image_size
 1

	)

4041 #i‚de‡
GL_ARB_shadî_obje˘s


4042 
	#GL_ARB_shadî_obje˘s
 1

	)

4043 #ifde‡
__APPLE__


4044 #ifde‡
BUILDING_MESA


4046 
	tGLh™dÀARB
;

4048 *
	tGLh™dÀARB
;

4051 
	tGLh™dÀARB
;

4053 
	tGLch¨ARB
;

4054 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

4055 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

4056 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

4057 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

4058 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

4059 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

4060 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

4061 
	#GL_INT_VEC2_ARB
 0x8B53

	)

4062 
	#GL_INT_VEC3_ARB
 0x8B54

	)

4063 
	#GL_INT_VEC4_ARB
 0x8B55

	)

4064 
	#GL_BOOL_ARB
 0x8B56

	)

4065 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

4066 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

4067 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

4068 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

4069 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

4070 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

4071 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

4072 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

4073 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

4074 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

4075 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

4076 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

4077 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

4078 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

4079 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

4080 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

4081 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

4082 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

4083 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

4084 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

4085 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

4086 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

4087 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

4088 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

4089 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

4090 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

4091 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

4092 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
 **
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

4093 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

4094 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

4095 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

4096 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4097 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4098 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

4099 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

4100 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

4101 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

4102 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

4103 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

4104 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

4105 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

4106 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

4107 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4108 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4109 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4110 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4111 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4112 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4113 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4114 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4115 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4116 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4117 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4118 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4119 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4120 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

4121 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

4122 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4123 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4124 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

4125 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

4126 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

4127 #ifde‡
GL_GLEXT_PROTOTYPES


4128 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
 
obj
);

4129 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
 
≤ame
);

4130 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
©èchedObj
);

4131 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
 
shadîTy≥
);

4132 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
 
shadîObj
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨ARB
 **
°rög
, c⁄° 
GLöt
 *
Àngth
);

4133 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
 
shadîObj
);

4134 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

4135 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
obj
);

4136 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

4137 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
 
¥ogømObj
);

4138 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

4139 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

4140 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

4141 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

4142 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

4143 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

4144 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

4145 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

4146 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

4147 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4148 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4149 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4150 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

4151 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4152 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4153 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4154 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

4155 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

4156 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

4157 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

4158 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

4159 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

4160 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
öfoLog
);

4161 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
 
c⁄èöîObj
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLh™dÀARB *
obj
);

4162 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

4163 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

4164 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

4165 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

4166 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
sour˚
);

4170 #i‚de‡
GL_ARB_shadî_¥ecisi⁄


4171 
	#GL_ARB_shadî_¥ecisi⁄
 1

	)

4174 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


4175 
	#GL_ARB_shadî_°ícû_exp‹t
 1

	)

4178 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


4179 
	#GL_ARB_shadî_°‹age_buf„r_obje˘
 1

	)

4182 #i‚de‡
GL_ARB_shadî_subroutöe


4183 
	#GL_ARB_shadî_subroutöe
 1

	)

4186 #i‚de‡
GL_ARB_shadî_ãxtuª_image_ßm∂es


4187 
	#GL_ARB_shadî_ãxtuª_image_ßm∂es
 1

	)

4190 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


4191 
	#GL_ARB_shadî_ãxtuª_lod
 1

	)

4194 #i‚de‡
GL_ARB_shadî_võwp‹t_œyî_¨øy


4195 
	#GL_ARB_shadî_võwp‹t_œyî_¨øy
 1

	)

4198 #i‚de‡
GL_ARB_shadög_œnguage_100


4199 
	#GL_ARB_shadög_œnguage_100
 1

	)

4200 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

4203 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


4204 
	#GL_ARB_shadög_œnguage_420∑ck
 1

	)

4207 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


4208 
	#GL_ARB_shadög_œnguage_ö˛ude
 1

	)

4209 
	#GL_SHADER_INCLUDE_ARB
 0x8DAE

	)

4210 
	#GL_NAMED_STRING_LENGTH_ARB
 0x8DE9

	)

4211 
	#GL_NAMED_STRING_TYPE_ARB
 0x8DEA

	)

4212 (
APIENTRYP
 
	tPFNGLNAMEDSTRINGARBPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, GLöà
	t°rögÀn
, c⁄° GLch¨ *
	t°rög
);

4213 (
APIENTRYP
 
	tPFNGLDELETENAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

4214 (
APIENTRYP
 
	tPFNGLCOMPILESHADERINCLUDEARBPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t∑th
, c⁄° 
	tGLöt
 *
	tÀngth
);

4215 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

4216 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t°rögÀn
, GLch¨ *
	t°rög
);

4217 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGIVARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

4218 #ifde‡
GL_GLEXT_PROTOTYPES


4219 
GLAPI
 
APIENTRY
 
glNamedSåögARB
 (
GLíum
 
ty≥
, 
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, GLöà
°rögÀn
, c⁄° GLch¨ *
°rög
);

4220 
GLAPI
 
APIENTRY
 
glDñëeNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

4221 
GLAPI
 
APIENTRY
 
glCompûeShadîIn˛udeARB
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
∑th
, c⁄° 
GLöt
 *
Àngth
);

4222 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

4223 
GLAPI
 
APIENTRY
 
glGëNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLsizei
 
bufSize
, GLöà*
°rögÀn
, GLch¨ *
°rög
);

4224 
GLAPI
 
APIENTRY
 
glGëNamedSåögivARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

4228 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


4229 
	#GL_ARB_shadög_œnguage_∑ckög
 1

	)

4232 #i‚de‡
GL_ARB_shadow


4233 
	#GL_ARB_shadow
 1

	)

4234 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

4235 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

4236 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

4239 #i‚de‡
GL_ARB_shadow_ambõ¡


4240 
	#GL_ARB_shadow_ambõ¡
 1

	)

4241 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

4244 #i‚de‡
GL_ARB_•¨£_buf„r


4245 
	#GL_ARB_•¨£_buf„r
 1

	)

4246 
	#GL_SPARSE_STORAGE_BIT_ARB
 0x0400

	)

4247 
	#GL_SPARSE_BUFFER_PAGE_SIZE_ARB
 0x82F8

	)

4248 (
APIENTRYP
 
	tPFNGLBUFFERPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

4249 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

4250 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

4251 #ifde‡
GL_GLEXT_PROTOTYPES


4252 
GLAPI
 
APIENTRY
 
glBuf„rPageCommômítARB
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

4253 
GLAPI
 
APIENTRY
 
glNamedBuf„rPageCommômítEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

4254 
GLAPI
 
APIENTRY
 
glNamedBuf„rPageCommômítARB
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

4258 #i‚de‡
GL_ARB_•¨£_ãxtuª


4259 
	#GL_ARB_•¨£_ãxtuª
 1

	)

4260 
	#GL_TEXTURE_SPARSE_ARB
 0x91A6

	)

4261 
	#GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
 0x91A7

	)

4262 
	#GL_NUM_SPARSE_LEVELS_ARB
 0x91AA

	)

4263 
	#GL_NUM_VIRTUAL_PAGE_SIZES_ARB
 0x91A8

	)

4264 
	#GL_VIRTUAL_PAGE_SIZE_X_ARB
 0x9195

	)

4265 
	#GL_VIRTUAL_PAGE_SIZE_Y_ARB
 0x9196

	)

4266 
	#GL_VIRTUAL_PAGE_SIZE_Z_ARB
 0x9197

	)

4267 
	#GL_MAX_SPARSE_TEXTURE_SIZE_ARB
 0x9198

	)

4268 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
 0x9199

	)

4269 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
 0x919A

	)

4270 
	#GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
 0x91A9

	)

4271 (
APIENTRYP
 
	tPFNGLTEXPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tcommô
);

4272 #ifde‡
GL_GLEXT_PROTOTYPES


4273 
GLAPI
 
APIENTRY
 
glTexPageCommômítARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
commô
);

4277 #i‚de‡
GL_ARB_•¨£_ãxtuª2


4278 
	#GL_ARB_•¨£_ãxtuª2
 1

	)

4281 #i‚de‡
GL_ARB_•¨£_ãxtuª_˛amp


4282 
	#GL_ARB_•¨£_ãxtuª_˛amp
 1

	)

4285 #i‚de‡
GL_ARB_°ícû_ãxturög


4286 
	#GL_ARB_°ícû_ãxturög
 1

	)

4289 #i‚de‡
GL_ARB_sync


4290 
	#GL_ARB_sync
 1

	)

4293 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


4294 
	#GL_ARB_ãs£Œ©i⁄_shadî
 1

	)

4297 #i‚de‡
GL_ARB_ãxtuª_b¨rõr


4298 
	#GL_ARB_ãxtuª_b¨rõr
 1

	)

4301 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


4302 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

4303 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

4306 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


4307 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

4308 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

4309 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

4310 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

4311 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

4312 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

4313 (
APIENTRYP
 
	tPFNGLTEXBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

4314 #ifde‡
GL_GLEXT_PROTOTYPES


4315 
GLAPI
 
APIENTRY
 
glTexBuf„rARB
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

4319 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


4320 
	#GL_ARB_ãxtuª_buf„r_obje˘_rgb32
 1

	)

4323 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


4324 
	#GL_ARB_ãxtuª_buf„r_ønge
 1

	)

4327 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


4328 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

4329 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

4330 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

4331 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

4332 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

4333 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

4334 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

4335 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

4336 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

4337 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

4338 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

4339 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

4340 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4341 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4342 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4343 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4344 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4345 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

4346 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

4347 #ifde‡
GL_GLEXT_PROTOTYPES


4348 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

4349 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

4350 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

4351 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

4352 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

4353 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

4354 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

4358 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


4359 
	#GL_ARB_ãxtuª_com¥essi⁄_b±c
 1

	)

4360 
	#GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
 0x8E8C

	)

4361 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
 0x8E8D

	)

4362 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
 0x8E8E

	)

4363 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
 0x8E8F

	)

4366 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


4367 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

4370 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


4371 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

4372 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

4373 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

4374 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

4375 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

4376 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

4377 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

4378 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

4379 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

4380 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

4381 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

4382 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

4383 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

4386 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


4387 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

4388 
	#GL_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x9009

	)

4389 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
 0x900A

	)

4390 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x900B

	)

4391 
	#GL_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900C

	)

4392 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
 0x900D

	)

4393 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900E

	)

4394 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900F

	)

4397 #i‚de‡
GL_ARB_ãxtuª_ív_add


4398 
	#GL_ARB_ãxtuª_ív_add
 1

	)

4401 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


4402 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

4403 
	#GL_COMBINE_ARB
 0x8570

	)

4404 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

4405 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

4406 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

4407 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

4408 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

4409 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

4410 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

4411 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

4412 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

4413 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

4414 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

4415 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

4416 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

4417 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

4418 
	#GL_RGB_SCALE_ARB
 0x8573

	)

4419 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

4420 
	#GL_INTERPOLATE_ARB
 0x8575

	)

4421 
	#GL_SUBTRACT_ARB
 0x84E7

	)

4422 
	#GL_CONSTANT_ARB
 0x8576

	)

4423 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

4424 
	#GL_PREVIOUS_ARB
 0x8578

	)

4427 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


4428 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

4431 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


4432 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

4433 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

4434 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

4437 #i‚de‡
GL_ARB_ãxtuª_fûãr_mömax


4438 
	#GL_ARB_ãxtuª_fûãr_mömax
 1

	)

4439 
	#GL_TEXTURE_REDUCTION_MODE_ARB
 0x9366

	)

4440 
	#GL_WEIGHTED_AVERAGE_ARB
 0x9367

	)

4443 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


4444 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

4445 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

4446 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

4447 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

4448 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

4449 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

4450 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

4451 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

4452 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

4453 
	#GL_RGBA32F_ARB
 0x8814

	)

4454 
	#GL_RGB32F_ARB
 0x8815

	)

4455 
	#GL_ALPHA32F_ARB
 0x8816

	)

4456 
	#GL_INTENSITY32F_ARB
 0x8817

	)

4457 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

4458 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

4459 
	#GL_RGBA16F_ARB
 0x881A

	)

4460 
	#GL_RGB16F_ARB
 0x881B

	)

4461 
	#GL_ALPHA16F_ARB
 0x881C

	)

4462 
	#GL_INTENSITY16F_ARB
 0x881D

	)

4463 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

4464 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

4467 #i‚de‡
GL_ARB_ãxtuª_g©hî


4468 
	#GL_ARB_ãxtuª_g©hî
 1

	)

4469 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5E

	)

4470 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5F

	)

4471 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
 0x8F9F

	)

4474 #i‚de‡
GL_ARB_ãxtuª_múr‹_˛amp_to_edge


4475 
	#GL_ARB_ãxtuª_múr‹_˛amp_to_edge
 1

	)

4478 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


4479 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

4480 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

4483 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


4484 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

4487 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


4488 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

4491 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


4492 
	#GL_ARB_ãxtuª_quîy_Àvñs
 1

	)

4495 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


4496 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

4499 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


4500 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

4501 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

4502 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

4503 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

4504 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

4507 #i‚de‡
GL_ARB_ãxtuª_rg


4508 
	#GL_ARB_ãxtuª_rg
 1

	)

4511 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


4512 
	#GL_ARB_ãxtuª_rgb10_a2ui
 1

	)

4515 #i‚de‡
GL_ARB_ãxtuª_°ícû8


4516 
	#GL_ARB_ãxtuª_°ícû8
 1

	)

4519 #i‚de‡
GL_ARB_ãxtuª_°‹age


4520 
	#GL_ARB_ãxtuª_°‹age
 1

	)

4523 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


4524 
	#GL_ARB_ãxtuª_°‹age_mu…ißm∂e
 1

	)

4527 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


4528 
	#GL_ARB_ãxtuª_swizzÀ
 1

	)

4531 #i‚de‡
GL_ARB_ãxtuª_võw


4532 
	#GL_ARB_ãxtuª_võw
 1

	)

4535 #i‚de‡
GL_ARB_timî_quîy


4536 
	#GL_ARB_timî_quîy
 1

	)

4539 #i‚de‡
GL_ARB_å™sf‹m_„edback2


4540 
	#GL_ARB_å™sf‹m_„edback2
 1

	)

4543 #i‚de‡
GL_ARB_å™sf‹m_„edback3


4544 
	#GL_ARB_å™sf‹m_„edback3
 1

	)

4547 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


4548 
	#GL_ARB_å™sf‹m_„edback_ö°™˚d
 1

	)

4551 #i‚de‡
GL_ARB_å™sf‹m_„edback_ovîÊow_quîy


4552 
	#GL_ARB_å™sf‹m_„edback_ovîÊow_quîy
 1

	)

4553 
	#GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB
 0x82EC

	)

4554 
	#GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
 0x82ED

	)

4557 #i‚de‡
GL_ARB_å™•o£_m©rix


4558 
	#GL_ARB_å™•o£_m©rix
 1

	)

4559 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

4560 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

4561 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

4562 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

4563 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4564 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4565 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4566 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4567 #ifde‡
GL_GLEXT_PROTOTYPES


4568 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

4569 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

4570 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

4571 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

4575 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


4576 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

4579 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


4580 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

4583 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


4584 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

4587 #i‚de‡
GL_ARB_vîãx_©åib_64bô


4588 
	#GL_ARB_vîãx_©åib_64bô
 1

	)

4591 #i‚de‡
GL_ARB_vîãx_©åib_bödög


4592 
	#GL_ARB_vîãx_©åib_bödög
 1

	)

4595 #i‚de‡
GL_ARB_vîãx_bÀnd


4596 
	#GL_ARB_vîãx_bÀnd
 1

	)

4597 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

4598 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

4599 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

4600 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

4601 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

4602 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

4603 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

4604 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

4605 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

4606 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

4607 
	#GL_MODELVIEW0_ARB
 0x1700

	)

4608 
	#GL_MODELVIEW1_ARB
 0x850A

	)

4609 
	#GL_MODELVIEW2_ARB
 0x8722

	)

4610 
	#GL_MODELVIEW3_ARB
 0x8723

	)

4611 
	#GL_MODELVIEW4_ARB
 0x8724

	)

4612 
	#GL_MODELVIEW5_ARB
 0x8725

	)

4613 
	#GL_MODELVIEW6_ARB
 0x8726

	)

4614 
	#GL_MODELVIEW7_ARB
 0x8727

	)

4615 
	#GL_MODELVIEW8_ARB
 0x8728

	)

4616 
	#GL_MODELVIEW9_ARB
 0x8729

	)

4617 
	#GL_MODELVIEW10_ARB
 0x872A

	)

4618 
	#GL_MODELVIEW11_ARB
 0x872B

	)

4619 
	#GL_MODELVIEW12_ARB
 0x872C

	)

4620 
	#GL_MODELVIEW13_ARB
 0x872D

	)

4621 
	#GL_MODELVIEW14_ARB
 0x872E

	)

4622 
	#GL_MODELVIEW15_ARB
 0x872F

	)

4623 
	#GL_MODELVIEW16_ARB
 0x8730

	)

4624 
	#GL_MODELVIEW17_ARB
 0x8731

	)

4625 
	#GL_MODELVIEW18_ARB
 0x8732

	)

4626 
	#GL_MODELVIEW19_ARB
 0x8733

	)

4627 
	#GL_MODELVIEW20_ARB
 0x8734

	)

4628 
	#GL_MODELVIEW21_ARB
 0x8735

	)

4629 
	#GL_MODELVIEW22_ARB
 0x8736

	)

4630 
	#GL_MODELVIEW23_ARB
 0x8737

	)

4631 
	#GL_MODELVIEW24_ARB
 0x8738

	)

4632 
	#GL_MODELVIEW25_ARB
 0x8739

	)

4633 
	#GL_MODELVIEW26_ARB
 0x873A

	)

4634 
	#GL_MODELVIEW27_ARB
 0x873B

	)

4635 
	#GL_MODELVIEW28_ARB
 0x873C

	)

4636 
	#GL_MODELVIEW29_ARB
 0x873D

	)

4637 
	#GL_MODELVIEW30_ARB
 0x873E

	)

4638 
	#GL_MODELVIEW31_ARB
 0x873F

	)

4639 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

4640 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

4641 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

4642 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

4643 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

4644 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

4645 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

4646 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

4647 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

4648 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

4649 #ifde‡
GL_GLEXT_PROTOTYPES


4650 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
 
size
, c⁄° 
GLbyã
 *
weights
);

4651 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
 
size
, c⁄° 
GLsh‹t
 *
weights
);

4652 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
 
size
, c⁄° GLöà*
weights
);

4653 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
 
size
, c⁄° 
GLÊﬂt
 *
weights
);

4654 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
 
size
, c⁄° 
GLdoubÀ
 *
weights
);

4655 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
weights
);

4656 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
weights
);

4657 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
weights
);

4658 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

4659 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
 
cou¡
);

4663 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


4664 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

4665 
±rdiff_t
 
	tGLsizeùåARB
;

4666 
±rdiff_t
 
	tGLöçåARB
;

4667 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

4668 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

4669 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

4670 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

4671 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

4672 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

4673 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

4674 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

4675 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

4676 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

4677 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

4678 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

4679 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

4680 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

4681 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

4682 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

4683 
	#GL_READ_ONLY_ARB
 0x88B8

	)

4684 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

4685 
	#GL_READ_WRITE_ARB
 0x88BA

	)

4686 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

4687 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

4688 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

4689 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

4690 
	#GL_STREAM_READ_ARB
 0x88E1

	)

4691 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

4692 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

4693 
	#GL_STATIC_READ_ARB
 0x88E5

	)

4694 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

4695 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

4696 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

4697 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

4698 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

4699 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

4700 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

4701 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4702 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

4703 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° *
	td©a
);

4704 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, *
	td©a
);

4705 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

4706 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4707 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4708 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

4709 #ifde‡
GL_GLEXT_PROTOTYPES


4710 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

4711 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

4712 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

4713 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
 
buf„r
);

4714 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
 
èrgë
, 
GLsizeùåARB
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

4715 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, c⁄° *
d©a
);

4716 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, *
d©a
);

4717 
GLAPI
 *
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

4718 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
 
èrgë
);

4719 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

4720 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

4724 #i‚de‡
GL_ARB_vîãx_¥ogøm


4725 
	#GL_ARB_vîãx_¥ogøm
 1

	)

4726 
	#GL_COLOR_SUM_ARB
 0x8458

	)

4727 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

4728 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

4729 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

4730 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

4731 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

4732 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

4733 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

4734 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

4735 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

4736 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

4737 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

4738 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

4739 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

4740 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

4741 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

4742 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

4743 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4744 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

4745 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4746 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

4747 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4748 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4749 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4750 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4751 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4752 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4753 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4754 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4755 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4756 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4757 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4758 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4759 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4760 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4761 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4762 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4763 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

4764 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4765 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4766 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4767 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4768 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4769 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4770 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4771 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4772 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4773 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

4774 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4775 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4776 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4777 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4778 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

4779 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4780 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4781 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4782 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4783 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4784 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

4785 #ifde‡
GL_GLEXT_PROTOTYPES


4786 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

4787 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4788 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

4789 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4790 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

4791 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4792 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

4793 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4794 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

4795 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4796 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

4797 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4798 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

4799 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4800 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

4801 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4802 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

4803 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4804 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

4805 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

4806 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4807 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

4808 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

4809 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

4810 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

4811 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

4812 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

4813 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4814 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

4815 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4816 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

4817 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

4818 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4819 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

4820 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

4821 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

4822 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

4823 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

4824 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

4825 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

4826 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

4827 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

4828 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

4832 #i‚de‡
GL_ARB_vîãx_shadî


4833 
	#GL_ARB_vîãx_shadî
 1

	)

4834 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

4835 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

4836 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

4837 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

4838 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

4839 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

4840 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

4841 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4842 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4843 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4844 #ifde‡
GL_GLEXT_PROTOTYPES


4845 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, c⁄° 
GLch¨ARB
 *
«me
);

4846 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

4847 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

4851 #i‚de‡
GL_ARB_vîãx_ty≥_10f_11f_11f_ªv


4852 
	#GL_ARB_vîãx_ty≥_10f_11f_11f_ªv
 1

	)

4855 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


4856 
	#GL_ARB_vîãx_ty≥_2_10_10_10_ªv
 1

	)

4859 #i‚de‡
GL_ARB_võwp‹t_¨øy


4860 
	#GL_ARB_võwp‹t_¨øy
 1

	)

4863 #i‚de‡
GL_ARB_wödow_pos


4864 
	#GL_ARB_wödow_pos
 1

	)

4865 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4866 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4867 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4868 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4869 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

4870 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4871 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4872 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4873 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4874 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4875 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4876 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4877 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

4878 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4879 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4880 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4881 #ifde‡
GL_GLEXT_PROTOTYPES


4882 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

4883 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

4884 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

4885 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

4886 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
 
x
, GLöà
y
);

4887 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *
v
);

4888 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
);

4889 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *
v
);

4890 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

4891 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

4892 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

4893 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

4894 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

4895 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *
v
);

4896 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

4897 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *
v
);

4901 #i‚de‡
GL_KHR_bÀnd_equ©i⁄_adv™˚d


4902 
	#GL_KHR_bÀnd_equ©i⁄_adv™˚d
 1

	)

4903 
	#GL_MULTIPLY_KHR
 0x9294

	)

4904 
	#GL_SCREEN_KHR
 0x9295

	)

4905 
	#GL_OVERLAY_KHR
 0x9296

	)

4906 
	#GL_DARKEN_KHR
 0x9297

	)

4907 
	#GL_LIGHTEN_KHR
 0x9298

	)

4908 
	#GL_COLORDODGE_KHR
 0x9299

	)

4909 
	#GL_COLORBURN_KHR
 0x929A

	)

4910 
	#GL_HARDLIGHT_KHR
 0x929B

	)

4911 
	#GL_SOFTLIGHT_KHR
 0x929C

	)

4912 
	#GL_DIFFERENCE_KHR
 0x929E

	)

4913 
	#GL_EXCLUSION_KHR
 0x92A0

	)

4914 
	#GL_HSL_HUE_KHR
 0x92AD

	)

4915 
	#GL_HSL_SATURATION_KHR
 0x92AE

	)

4916 
	#GL_HSL_COLOR_KHR
 0x92AF

	)

4917 
	#GL_HSL_LUMINOSITY_KHR
 0x92B0

	)

4918 (
APIENTRYP
 
	tPFNGLBLENDBARRIERKHRPROC
) ();

4919 #ifde‡
GL_GLEXT_PROTOTYPES


4920 
GLAPI
 
APIENTRY
 
glBÀndB¨rõrKHR
 ();

4924 #i‚de‡
GL_KHR_bÀnd_equ©i⁄_adv™˚d_cohîít


4925 
	#GL_KHR_bÀnd_equ©i⁄_adv™˚d_cohîít
 1

	)

4926 
	#GL_BLEND_ADVANCED_COHERENT_KHR
 0x9285

	)

4929 #i‚de‡
GL_KHR_c⁄ãxt_Êush_c⁄åﬁ


4930 
	#GL_KHR_c⁄ãxt_Êush_c⁄åﬁ
 1

	)

4933 #i‚de‡
GL_KHR_debug


4934 
	#GL_KHR_debug
 1

	)

4937 #i‚de‡
GL_KHR_no_îr‹


4938 
	#GL_KHR_no_îr‹
 1

	)

4939 
	#GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR
 0x00000008

	)

4942 #i‚de‡
GL_KHR_robu°_buf„r_ac˚ss_behavi‹


4943 
	#GL_KHR_robu°_buf„r_ac˚ss_behavi‹
 1

	)

4946 #i‚de‡
GL_KHR_robu°√ss


4947 
	#GL_KHR_robu°√ss
 1

	)

4948 
	#GL_CONTEXT_ROBUST_ACCESS
 0x90F3

	)

4951 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr


4952 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr
 1

	)

4953 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

4954 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

4955 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

4956 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

4957 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

4958 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

4959 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

4960 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

4961 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

4962 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

4963 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

4964 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

4965 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

4966 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

4967 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

4968 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

4969 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

4970 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

4971 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

4972 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

4973 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

4974 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

4975 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

4976 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

4977 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

4978 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

4979 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

4980 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

4983 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


4984 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

4987 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_¶i˚d_3d


4988 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_¶i˚d_3d
 1

	)

4991 #i‚de‡
GL_OES_byã_co‹dö©es


4992 
	#GL_OES_byã_co‹dö©es
 1

	)

4993 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
);

4994 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4995 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
);

4996 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4997 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
);

4998 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4999 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
, GLbyã 
	tq
);

5000 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

5001 (
APIENTRYP
 
	tPFNGLTEXCOORD1BOESPROC
Ë(
	tGLbyã
 
	ts
);

5002 (
APIENTRYP
 
	tPFNGLTEXCOORD1BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5003 (
APIENTRYP
 
	tPFNGLTEXCOORD2BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
);

5004 (
APIENTRYP
 
	tPFNGLTEXCOORD2BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5005 (
APIENTRYP
 
	tPFNGLTEXCOORD3BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
);

5006 (
APIENTRYP
 
	tPFNGLTEXCOORD3BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5007 (
APIENTRYP
 
	tPFNGLTEXCOORD4BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
, GLbyã 
	tq
);

5008 (
APIENTRYP
 
	tPFNGLTEXCOORD4BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5009 (
APIENTRYP
 
	tPFNGLVERTEX2BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
);

5010 (
APIENTRYP
 
	tPFNGLVERTEX2BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5011 (
APIENTRYP
 
	tPFNGLVERTEX3BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
, GLbyã 
	tz
);

5012 (
APIENTRYP
 
	tPFNGLVERTEX3BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5013 (
APIENTRYP
 
	tPFNGLVERTEX4BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
, GLbyã 
	tz
, GLbyã 
	tw
);

5014 (
APIENTRYP
 
	tPFNGLVERTEX4BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

5015 #ifde‡
GL_GLEXT_PROTOTYPES


5016 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
);

5017 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5018 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
);

5019 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5020 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
);

5021 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5022 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
, GLbyã 
q
);

5023 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

5024 
GLAPI
 
APIENTRY
 
glTexCo‹d1bOES
 (
GLbyã
 
s
);

5025 
GLAPI
 
APIENTRY
 
glTexCo‹d1bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5026 
GLAPI
 
APIENTRY
 
glTexCo‹d2bOES
 (
GLbyã
 
s
, GLbyã 
t
);

5027 
GLAPI
 
APIENTRY
 
glTexCo‹d2bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5028 
GLAPI
 
APIENTRY
 
glTexCo‹d3bOES
 (
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
);

5029 
GLAPI
 
APIENTRY
 
glTexCo‹d3bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5030 
GLAPI
 
APIENTRY
 
glTexCo‹d4bOES
 (
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
, GLbyã 
q
);

5031 
GLAPI
 
APIENTRY
 
glTexCo‹d4bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5032 
GLAPI
 
APIENTRY
 
glVîãx2bOES
 (
GLbyã
 
x
, GLbyã 
y
);

5033 
GLAPI
 
APIENTRY
 
glVîãx2bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5034 
GLAPI
 
APIENTRY
 
glVîãx3bOES
 (
GLbyã
 
x
, GLbyã 
y
, GLbyã 
z
);

5035 
GLAPI
 
APIENTRY
 
glVîãx3bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5036 
GLAPI
 
APIENTRY
 
glVîãx4bOES
 (
GLbyã
 
x
, GLbyã 
y
, GLbyã 
z
, GLbyã 
w
);

5037 
GLAPI
 
APIENTRY
 
glVîãx4bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

5041 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


5042 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

5043 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

5044 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

5045 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

5046 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

5047 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

5048 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

5049 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

5050 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

5051 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

5052 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

5055 #i‚de‡
GL_OES_fixed_poöt


5056 
	#GL_OES_fixed_poöt
 1

	)

5057 
GLöt
 
	tGLfixed
;

5058 
	#GL_FIXED_OES
 0x140C

	)

5059 (
APIENTRYP
 
	tPFNGLALPHAFUNCXOESPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLfixed
 
	tªf
);

5060 (
APIENTRYP
 
	tPFNGLCLEARCOLORXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5061 (
APIENTRYP
 
	tPFNGLCLEARDEPTHXOESPROC
Ë(
	tGLfixed
 
	tdïth
);

5062 (
APIENTRYP
 
	tPFNGLCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLfixed
 *
	tequ©i⁄
);

5063 (
APIENTRYP
 
	tPFNGLCOLOR4XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5064 (
APIENTRYP
 
	tPFNGLDEPTHRANGEXOESPROC
Ë(
	tGLfixed
 
	tn
, GLfixed 
	tf
);

5065 (
APIENTRYP
 
	tPFNGLFOGXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5066 (
APIENTRYP
 
	tPFNGLFOGXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

5067 (
APIENTRYP
 
	tPFNGLFRUSTUMXOESPROC
Ë(
	tGLfixed
 
	tl
, GLfixed 
	tr
, GLfixed 
	tb
, GLfixed 
	tt
, GLfixed 
	tn
, GLfixed 
	tf
);

5068 (
APIENTRYP
 
	tPFNGLGETCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLfixed
 *
	tequ©i⁄
);

5069 (
APIENTRYP
 
	tPFNGLGETFIXEDVOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5070 (
APIENTRYP
 
	tPFNGLGETTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5071 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5072 (
APIENTRYP
 
	tPFNGLLIGHTMODELXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5073 (
APIENTRYP
 
	tPFNGLLIGHTMODELXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

5074 (
APIENTRYP
 
	tPFNGLLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5075 (
APIENTRYP
 
	tPFNGLLIGHTXVOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5076 (
APIENTRYP
 
	tPFNGLLINEWIDTHXOESPROC
Ë(
	tGLfixed
 
	twidth
);

5077 (
APIENTRYP
 
	tPFNGLLOADMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5078 (
APIENTRYP
 
	tPFNGLMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5079 (
APIENTRYP
 
	tPFNGLMATERIALXVOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

5080 (
APIENTRYP
 
	tPFNGLMULTMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5081 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

5082 (
APIENTRYP
 
	tPFNGLNORMAL3XOESPROC
Ë(
	tGLfixed
 
	tnx
, GLfixed 
	tny
, GLfixed 
	tnz
);

5083 (
APIENTRYP
 
	tPFNGLORTHOXOESPROC
Ë(
	tGLfixed
 
	tl
, GLfixed 
	tr
, GLfixed 
	tb
, GLfixed 
	tt
, GLfixed 
	tn
, GLfixed 
	tf
);

5084 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5085 (
APIENTRYP
 
	tPFNGLPOINTSIZEXOESPROC
Ë(
	tGLfixed
 
	tsize
);

5086 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETXOESPROC
Ë(
	tGLfixed
 
	tÁ˘‹
, GLfixed 
	tunôs
);

5087 (
APIENTRYP
 
	tPFNGLROTATEXOESPROC
Ë(
	tGLfixed
 
	t™gÀ
, GLfixed 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5088 (
APIENTRYP
 
	tPFNGLSCALEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5089 (
APIENTRYP
 
	tPFNGLTEXENVXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5090 (
APIENTRYP
 
	tPFNGLTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5091 (
APIENTRYP
 
	tPFNGLTEXPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5092 (
APIENTRYP
 
	tPFNGLTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5093 (
APIENTRYP
 
	tPFNGLTRANSLATEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5094 (
APIENTRYP
 
	tPFNGLACCUMXOESPROC
Ë(
	tGLíum
 
	t›
, 
	tGLfixed
 
	tvÆue
);

5095 (
APIENTRYP
 
	tPFNGLBITMAPXOESPROC
Ë(
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLfixed
 
	tx‹ig
, GLfixed 
	ty‹ig
, GLfixed 
	txmove
, GLfixed 
	tymove
, c⁄° 
	tGLubyã
 *
	tbôm≠
);

5096 (
APIENTRYP
 
	tPFNGLBLENDCOLORXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5097 (
APIENTRYP
 
	tPFNGLCLEARACCUMXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

5098 (
APIENTRYP
 
	tPFNGLCOLOR3XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
);

5099 (
APIENTRYP
 
	tPFNGLCOLOR3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄íts
);

5100 (
APIENTRYP
 
	tPFNGLCOLOR4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄íts
);

5101 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5102 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5103 (
APIENTRYP
 
	tPFNGLEVALCOORD1XOESPROC
Ë(
	tGLfixed
 
	tu
);

5104 (
APIENTRYP
 
	tPFNGLEVALCOORD1XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5105 (
APIENTRYP
 
	tPFNGLEVALCOORD2XOESPROC
Ë(
	tGLfixed
 
	tu
, GLfixed 
	tv
);

5106 (
APIENTRYP
 
	tPFNGLEVALCOORD2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5107 (
APIENTRYP
 
	tPFNGLFEEDBACKBUFFERXOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLfixed
 *
	tbuf„r
);

5108 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5109 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5110 (
APIENTRYP
 
	tPFNGLGETLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5111 (
APIENTRYP
 
	tPFNGLGETMAPXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLfixed
 *
	tv
);

5112 (
APIENTRYP
 
	tPFNGLGETMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5113 (
APIENTRYP
 
	tPFNGLGETPIXELMAPXVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLöt
 
	tsize
, 
	tGLfixed
 *
	tvÆues
);

5114 (
APIENTRYP
 
	tPFNGLGETTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5115 (
APIENTRYP
 
	tPFNGLGETTEXLEVELPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

5116 (
APIENTRYP
 
	tPFNGLINDEXXOESPROC
Ë(
	tGLfixed
 
	tcomp⁄ít
);

5117 (
APIENTRYP
 
	tPFNGLINDEXXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄ít
);

5118 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5119 (
APIENTRYP
 
	tPFNGLMAP1XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, GLfixed 
	tpoöts
);

5120 (
APIENTRYP
 
	tPFNGLMAP2XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLfixed 
	tv1
, GLfixed 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLfixed 
	tpoöts
);

5121 (
APIENTRYP
 
	tPFNGLMAPGRID1XOESPROC
Ë(
	tGLöt
 
	tn
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
);

5122 (
APIENTRYP
 
	tPFNGLMAPGRID2XOESPROC
Ë(
	tGLöt
 
	tn
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, GLfixed 
	tv1
, GLfixed 
	tv2
);

5123 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

5124 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
);

5125 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5126 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
);

5127 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5128 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
);

5129 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5130 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

5131 (
APIENTRYP
 
	tPFNGLNORMAL3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5132 (
APIENTRYP
 
	tPFNGLPASSTHROUGHXOESPROC
Ë(
	tGLfixed
 
	ttokí
);

5133 (
APIENTRYP
 
	tPFNGLPIXELMAPXPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLöt
 
	tsize
, c⁄° 
	tGLfixed
 *
	tvÆues
);

5134 (
APIENTRYP
 
	tPFNGLPIXELSTOREXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5135 (
APIENTRYP
 
	tPFNGLPIXELTRANSFERXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5136 (
APIENTRYP
 
	tPFNGLPIXELZOOMXOESPROC
Ë(
	tGLfixed
 
	txÁ˘‹
, GLfixed 
	tyÁ˘‹
);

5137 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESXOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGLfixed
 *
	t¥i‹ôõs
);

5138 (
APIENTRYP
 
	tPFNGLRASTERPOS2XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
);

5139 (
APIENTRYP
 
	tPFNGLRASTERPOS2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5140 (
APIENTRYP
 
	tPFNGLRASTERPOS3XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5141 (
APIENTRYP
 
	tPFNGLRASTERPOS3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5142 (
APIENTRYP
 
	tPFNGLRASTERPOS4XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
, GLfixed 
	tw
);

5143 (
APIENTRYP
 
	tPFNGLRASTERPOS4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5144 (
APIENTRYP
 
	tPFNGLRECTXOESPROC
Ë(
	tGLfixed
 
	tx1
, GLfixed 
	ty1
, GLfixed 
	tx2
, GLfixed 
	ty2
);

5145 (
APIENTRYP
 
	tPFNGLRECTXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tv1
, c⁄° GLfixed *
	tv2
);

5146 (
APIENTRYP
 
	tPFNGLTEXCOORD1XOESPROC
Ë(
	tGLfixed
 
	ts
);

5147 (
APIENTRYP
 
	tPFNGLTEXCOORD1XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5148 (
APIENTRYP
 
	tPFNGLTEXCOORD2XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
);

5149 (
APIENTRYP
 
	tPFNGLTEXCOORD2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5150 (
APIENTRYP
 
	tPFNGLTEXCOORD3XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
);

5151 (
APIENTRYP
 
	tPFNGLTEXCOORD3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5152 (
APIENTRYP
 
	tPFNGLTEXCOORD4XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

5153 (
APIENTRYP
 
	tPFNGLTEXCOORD4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5154 (
APIENTRYP
 
	tPFNGLTEXGENXOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

5155 (
APIENTRYP
 
	tPFNGLTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

5156 (
APIENTRYP
 
	tPFNGLVERTEX2XOESPROC
Ë(
	tGLfixed
 
	tx
);

5157 (
APIENTRYP
 
	tPFNGLVERTEX2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5158 (
APIENTRYP
 
	tPFNGLVERTEX3XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
);

5159 (
APIENTRYP
 
	tPFNGLVERTEX3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5160 (
APIENTRYP
 
	tPFNGLVERTEX4XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

5161 (
APIENTRYP
 
	tPFNGLVERTEX4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

5162 #ifde‡
GL_GLEXT_PROTOTYPES


5163 
GLAPI
 
APIENTRY
 
glAÕhaFuncxOES
 (
GLíum
 
func
, 
GLfixed
 
ªf
);

5164 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5165 
GLAPI
 
APIENTRY
 
glCÀ¨DïthxOES
 (
GLfixed
 
dïth
);

5166 
GLAPI
 
APIENTRY
 
glClùPœ√xOES
 (
GLíum
 
∂™e
, c⁄° 
GLfixed
 *
equ©i⁄
);

5167 
GLAPI
 
APIENTRY
 
glCﬁ‹4xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5168 
GLAPI
 
APIENTRY
 
glDïthR™gexOES
 (
GLfixed
 
n
, GLfixed 
f
);

5169 
GLAPI
 
APIENTRY
 
glFogxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5170 
GLAPI
 
APIENTRY
 
glFogxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

5171 
GLAPI
 
APIENTRY
 
glFru°umxOES
 (
GLfixed
 
l
, GLfixed 
r
, GLfixed 
b
, GLfixed 
t
, GLfixed 
n
, GLfixed 
f
);

5172 
GLAPI
 
APIENTRY
 
glGëClùPœ√xOES
 (
GLíum
 
∂™e
, 
GLfixed
 *
equ©i⁄
);

5173 
GLAPI
 
APIENTRY
 
glGëFixedvOES
 (
GLíum
 
≤ame
, 
GLfixed
 *
∑øms
);

5174 
GLAPI
 
APIENTRY
 
glGëTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5175 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5176 
GLAPI
 
APIENTRY
 
glLightModñxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5177 
GLAPI
 
APIENTRY
 
glLightModñxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

5178 
GLAPI
 
APIENTRY
 
glLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5179 
GLAPI
 
APIENTRY
 
glLightxvOES
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5180 
GLAPI
 
APIENTRY
 
glLöeWidthxOES
 (
GLfixed
 
width
);

5181 
GLAPI
 
APIENTRY
 
glLﬂdM©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5182 
GLAPI
 
APIENTRY
 
glM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5183 
GLAPI
 
APIENTRY
 
glM©îülxvOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

5184 
GLAPI
 
APIENTRY
 
glMu…M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5185 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

5186 
GLAPI
 
APIENTRY
 
glN‹mÆ3xOES
 (
GLfixed
 
nx
, GLfixed 
ny
, GLfixed 
nz
);

5187 
GLAPI
 
APIENTRY
 
glOπhoxOES
 (
GLfixed
 
l
, GLfixed 
r
, GLfixed 
b
, GLfixed 
t
, GLfixed 
n
, GLfixed 
f
);

5188 
GLAPI
 
APIENTRY
 
glPoötP¨amëîxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5189 
GLAPI
 
APIENTRY
 
glPoötSizexOES
 (
GLfixed
 
size
);

5190 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£txOES
 (
GLfixed
 
Á˘‹
, GLfixed 
unôs
);

5191 
GLAPI
 
APIENTRY
 
glRŸ©exOES
 (
GLfixed
 
™gÀ
, GLfixed 
x
, GLfixed 
y
, GLfixed 
z
);

5192 
GLAPI
 
APIENTRY
 
glSˇÀxOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5193 
GLAPI
 
APIENTRY
 
glTexEnvxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5194 
GLAPI
 
APIENTRY
 
glTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5195 
GLAPI
 
APIENTRY
 
glTexP¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5196 
GLAPI
 
APIENTRY
 
glTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5197 
GLAPI
 
APIENTRY
 
glTøn¶©exOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5198 
GLAPI
 
APIENTRY
 
glAccumxOES
 (
GLíum
 
›
, 
GLfixed
 
vÆue
);

5199 
GLAPI
 
APIENTRY
 
glBôm≠xOES
 (
GLsizei
 
width
, GLsizeò
height
, 
GLfixed
 
x‹ig
, GLfixed 
y‹ig
, GLfixed 
xmove
, GLfixed 
ymove
, c⁄° 
GLubyã
 *
bôm≠
);

5200 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5201 
GLAPI
 
APIENTRY
 
glCÀ¨AccumxOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

5202 
GLAPI
 
APIENTRY
 
glCﬁ‹3xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
);

5203 
GLAPI
 
APIENTRY
 
glCﬁ‹3xvOES
 (c⁄° 
GLfixed
 *
comp⁄íts
);

5204 
GLAPI
 
APIENTRY
 
glCﬁ‹4xvOES
 (c⁄° 
GLfixed
 *
comp⁄íts
);

5205 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5206 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5207 
GLAPI
 
APIENTRY
 
glEvÆCo‹d1xOES
 (
GLfixed
 
u
);

5208 
GLAPI
 
APIENTRY
 
glEvÆCo‹d1xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5209 
GLAPI
 
APIENTRY
 
glEvÆCo‹d2xOES
 (
GLfixed
 
u
, GLfixed 
v
);

5210 
GLAPI
 
APIENTRY
 
glEvÆCo‹d2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5211 
GLAPI
 
APIENTRY
 
glFìdbackBuf„rxOES
 (
GLsizei
 
n
, 
GLíum
 
ty≥
, c⁄° 
GLfixed
 *
buf„r
);

5212 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5213 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5214 
GLAPI
 
APIENTRY
 
glGëLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5215 
GLAPI
 
APIENTRY
 
glGëM≠xvOES
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLfixed
 *
v
);

5216 
GLAPI
 
APIENTRY
 
glGëM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5217 
GLAPI
 
APIENTRY
 
glGëPixñM≠xv
 (
GLíum
 
m≠
, 
GLöt
 
size
, 
GLfixed
 *
vÆues
);

5218 
GLAPI
 
APIENTRY
 
glGëTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5219 
GLAPI
 
APIENTRY
 
glGëTexLevñP¨amëîxvOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

5220 
GLAPI
 
APIENTRY
 
glIndexxOES
 (
GLfixed
 
comp⁄ít
);

5221 
GLAPI
 
APIENTRY
 
glIndexxvOES
 (c⁄° 
GLfixed
 *
comp⁄ít
);

5222 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5223 
GLAPI
 
APIENTRY
 
glM≠1xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
u1
, GLfixed 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, GLfixed 
poöts
);

5224 
GLAPI
 
APIENTRY
 
glM≠2xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
u1
, GLfixed 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLfixed 
v1
, GLfixed 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLfixed 
poöts
);

5225 
GLAPI
 
APIENTRY
 
glM≠Grid1xOES
 (
GLöt
 
n
, 
GLfixed
 
u1
, GLfixed 
u2
);

5226 
GLAPI
 
APIENTRY
 
glM≠Grid2xOES
 (
GLöt
 
n
, 
GLfixed
 
u1
, GLfixed 
u2
, GLfixed 
v1
, GLfixed 
v2
);

5227 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

5228 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
);

5229 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5230 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
);

5231 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5232 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
);

5233 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5234 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

5235 
GLAPI
 
APIENTRY
 
glN‹mÆ3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5236 
GLAPI
 
APIENTRY
 
glPassThroughxOES
 (
GLfixed
 
tokí
);

5237 
GLAPI
 
APIENTRY
 
glPixñM≠x
 (
GLíum
 
m≠
, 
GLöt
 
size
, c⁄° 
GLfixed
 *
vÆues
);

5238 
GLAPI
 
APIENTRY
 
glPixñSt‹ex
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5239 
GLAPI
 
APIENTRY
 
glPixñTøns„rxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

5240 
GLAPI
 
APIENTRY
 
glPixñZoomxOES
 (
GLfixed
 
xÁ˘‹
, GLfixed 
yÁ˘‹
);

5241 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsxOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GLfixed
 *
¥i‹ôõs
);

5242 
GLAPI
 
APIENTRY
 
glRa°îPos2xOES
 (
GLfixed
 
x
, GLfixed 
y
);

5243 
GLAPI
 
APIENTRY
 
glRa°îPos2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5244 
GLAPI
 
APIENTRY
 
glRa°îPos3xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5245 
GLAPI
 
APIENTRY
 
glRa°îPos3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5246 
GLAPI
 
APIENTRY
 
glRa°îPos4xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
, GLfixed 
w
);

5247 
GLAPI
 
APIENTRY
 
glRa°îPos4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5248 
GLAPI
 
APIENTRY
 
glRe˘xOES
 (
GLfixed
 
x1
, GLfixed 
y1
, GLfixed 
x2
, GLfixed 
y2
);

5249 
GLAPI
 
APIENTRY
 
glRe˘xvOES
 (c⁄° 
GLfixed
 *
v1
, c⁄° GLfixed *
v2
);

5250 
GLAPI
 
APIENTRY
 
glTexCo‹d1xOES
 (
GLfixed
 
s
);

5251 
GLAPI
 
APIENTRY
 
glTexCo‹d1xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5252 
GLAPI
 
APIENTRY
 
glTexCo‹d2xOES
 (
GLfixed
 
s
, GLfixed 
t
);

5253 
GLAPI
 
APIENTRY
 
glTexCo‹d2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5254 
GLAPI
 
APIENTRY
 
glTexCo‹d3xOES
 (
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
);

5255 
GLAPI
 
APIENTRY
 
glTexCo‹d3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5256 
GLAPI
 
APIENTRY
 
glTexCo‹d4xOES
 (
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

5257 
GLAPI
 
APIENTRY
 
glTexCo‹d4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5258 
GLAPI
 
APIENTRY
 
glTexGíxOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

5259 
GLAPI
 
APIENTRY
 
glTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

5260 
GLAPI
 
APIENTRY
 
glVîãx2xOES
 (
GLfixed
 
x
);

5261 
GLAPI
 
APIENTRY
 
glVîãx2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5262 
GLAPI
 
APIENTRY
 
glVîãx3xOES
 (
GLfixed
 
x
, GLfixed 
y
);

5263 
GLAPI
 
APIENTRY
 
glVîãx3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5264 
GLAPI
 
APIENTRY
 
glVîãx4xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

5265 
GLAPI
 
APIENTRY
 
glVîãx4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

5269 #i‚de‡
GL_OES_quîy_m©rix


5270 
	#GL_OES_quîy_m©rix
 1

	)

5271 
GLbôfõld
 (
	tAPIENTRYP
 
	tPFNGLQUERYMATRIXXOESPROC
Ë(
	tGLfixed
 *
	tm™tisß
, 
	tGLöt
 *
	texp⁄ít
);

5272 #ifde‡
GL_GLEXT_PROTOTYPES


5273 
GLAPI
 
GLbôfõld
 
APIENTRY
 
glQuîyM©rixxOES
 (
GLfixed
 *
m™tisß
, 
GLöt
 *
exp⁄ít
);

5277 #i‚de‡
GL_OES_ªad_f‹m©


5278 
	#GL_OES_ªad_f‹m©
 1

	)

5279 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

5280 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

5283 #i‚de‡
GL_OES_sögÀ_¥ecisi⁄


5284 
	#GL_OES_sögÀ_¥ecisi⁄
 1

	)

5285 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFOESPROC
Ë(
	tGL˛ampf
 
	tdïth
);

5286 (
APIENTRYP
 
	tPFNGLCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLÊﬂt
 *
	tequ©i⁄
);

5287 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFOESPROC
Ë(
	tGL˛ampf
 
	tn
, GL˛amp‡
	tf
);

5288 (
APIENTRYP
 
	tPFNGLFRUSTUMFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

5289 (
APIENTRYP
 
	tPFNGLGETCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLÊﬂt
 *
	tequ©i⁄
);

5290 (
APIENTRYP
 
	tPFNGLORTHOFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

5291 #ifde‡
GL_GLEXT_PROTOTYPES


5292 
GLAPI
 
APIENTRY
 
glCÀ¨DïthfOES
 (
GL˛ampf
 
dïth
);

5293 
GLAPI
 
APIENTRY
 
glClùPœ√fOES
 (
GLíum
 
∂™e
, c⁄° 
GLÊﬂt
 *
equ©i⁄
);

5294 
GLAPI
 
APIENTRY
 
glDïthR™gefOES
 (
GL˛ampf
 
n
, GL˛amp‡
f
);

5295 
GLAPI
 
APIENTRY
 
glFru°umfOES
 (
GLÊﬂt
 
l
, GLÊﬂà
r
, GLÊﬂà
b
, GLÊﬂà
t
, GLÊﬂà
n
, GLÊﬂà
f
);

5296 
GLAPI
 
APIENTRY
 
glGëClùPœ√fOES
 (
GLíum
 
∂™e
, 
GLÊﬂt
 *
equ©i⁄
);

5297 
GLAPI
 
APIENTRY
 
glOπhofOES
 (
GLÊﬂt
 
l
, GLÊﬂà
r
, GLÊﬂà
b
, GLÊﬂà
t
, GLÊﬂà
n
, GLÊﬂà
f
);

5301 #i‚de‡
GL_3DFX_mu…ißm∂e


5302 
	#GL_3DFX_mu…ißm∂e
 1

	)

5303 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

5304 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

5305 
	#GL_SAMPLES_3DFX
 0x86B4

	)

5306 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

5309 #i‚de‡
GL_3DFX_tbuf„r


5310 
	#GL_3DFX_tbuf„r
 1

	)

5311 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

5312 #ifde‡
GL_GLEXT_PROTOTYPES


5313 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
 
mask
);

5317 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


5318 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

5319 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

5320 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

5323 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


5324 
	#GL_AMD_bÀnd_mömax_Á˘‹
 1

	)

5325 
	#GL_FACTOR_MIN_AMD
 0x901C

	)

5326 
	#GL_FACTOR_MAX_AMD
 0x901D

	)

5329 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


5330 
	#GL_AMD_c⁄£rv©ive_dïth
 1

	)

5333 #i‚de‡
GL_AMD_debug_ouçut


5334 
	#GL_AMD_debug_ouçut
 1

	)

5335 (
APIENTRY
 *
	tGLDEBUGPROCAMD
)(
	tGLuöt
 
	tid
,
	tGLíum
 
	tˇãg‹y
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,*
	tu£rP¨am
);

5336 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
 0x9143

	)

5337 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
 0x9144

	)

5338 
	#GL_DEBUG_LOGGED_MESSAGES_AMD
 0x9145

	)

5339 
	#GL_DEBUG_SEVERITY_HIGH_AMD
 0x9146

	)

5340 
	#GL_DEBUG_SEVERITY_MEDIUM_AMD
 0x9147

	)

5341 
	#GL_DEBUG_SEVERITY_LOW_AMD
 0x9148

	)

5342 
	#GL_DEBUG_CATEGORY_API_ERROR_AMD
 0x9149

	)

5343 
	#GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
 0x914A

	)

5344 
	#GL_DEBUG_CATEGORY_DEPRECATION_AMD
 0x914B

	)

5345 
	#GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
 0x914C

	)

5346 
	#GL_DEBUG_CATEGORY_PERFORMANCE_AMD
 0x914D

	)

5347 
	#GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
 0x914E

	)

5348 
	#GL_DEBUG_CATEGORY_APPLICATION_AMD
 0x914F

	)

5349 
	#GL_DEBUG_CATEGORY_OTHER_AMD
 0x9150

	)

5350 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEENABLEAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

5351 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

5352 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKAMDPROC
Ë(
	tGLDEBUGPROCAMD
 
	tˇŒback
, *
	tu£rP¨am
);

5353 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGAMDPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tˇãg‹õs
, GLuöà*
	t£vîôõs
, GLuöà*
	tids
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßge
);

5354 #ifde‡
GL_GLEXT_PROTOTYPES


5355 
GLAPI
 
APIENTRY
 
glDebugMesßgeE«bÀAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

5356 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

5357 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackAMD
 (
GLDEBUGPROCAMD
 
ˇŒback
, *
u£rP¨am
);

5358 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogAMD
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
ˇãg‹õs
, GLuöà*
£vîôõs
, GLuöà*
ids
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßge
);

5362 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


5363 
	#GL_AMD_dïth_˛amp_£∑øã
 1

	)

5364 
	#GL_DEPTH_CLAMP_NEAR_AMD
 0x901E

	)

5365 
	#GL_DEPTH_CLAMP_FAR_AMD
 0x901F

	)

5368 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


5369 
	#GL_AMD_døw_buf„rs_bÀnd
 1

	)

5370 (
APIENTRYP
 
	tPFNGLBLENDFUNCINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

5371 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

5372 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

5373 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

5374 #ifde‡
GL_GLEXT_PROTOTYPES


5375 
GLAPI
 
APIENTRY
 
glBÀndFuncIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

5376 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

5377 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄IndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

5378 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

5382 #i‚de‡
GL_AMD_g˙_shadî


5383 
	#GL_AMD_g˙_shadî
 1

	)

5386 #i‚de‡
GL_AMD_gpu_shadî_öt64


5387 
	#GL_AMD_gpu_shadî_öt64
 1

	)

5388 
öt64_t
 
	tGLöt64EXT
;

5389 
	#GL_INT64_NV
 0x140E

	)

5390 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

5391 
	#GL_INT8_NV
 0x8FE0

	)

5392 
	#GL_INT8_VEC2_NV
 0x8FE1

	)

5393 
	#GL_INT8_VEC3_NV
 0x8FE2

	)

5394 
	#GL_INT8_VEC4_NV
 0x8FE3

	)

5395 
	#GL_INT16_NV
 0x8FE4

	)

5396 
	#GL_INT16_VEC2_NV
 0x8FE5

	)

5397 
	#GL_INT16_VEC3_NV
 0x8FE6

	)

5398 
	#GL_INT16_VEC4_NV
 0x8FE7

	)

5399 
	#GL_INT64_VEC2_NV
 0x8FE9

	)

5400 
	#GL_INT64_VEC3_NV
 0x8FEA

	)

5401 
	#GL_INT64_VEC4_NV
 0x8FEB

	)

5402 
	#GL_UNSIGNED_INT8_NV
 0x8FEC

	)

5403 
	#GL_UNSIGNED_INT8_VEC2_NV
 0x8FED

	)

5404 
	#GL_UNSIGNED_INT8_VEC3_NV
 0x8FEE

	)

5405 
	#GL_UNSIGNED_INT8_VEC4_NV
 0x8FEF

	)

5406 
	#GL_UNSIGNED_INT16_NV
 0x8FF0

	)

5407 
	#GL_UNSIGNED_INT16_VEC2_NV
 0x8FF1

	)

5408 
	#GL_UNSIGNED_INT16_VEC3_NV
 0x8FF2

	)

5409 
	#GL_UNSIGNED_INT16_VEC4_NV
 0x8FF3

	)

5410 
	#GL_UNSIGNED_INT64_VEC2_NV
 0x8FF5

	)

5411 
	#GL_UNSIGNED_INT64_VEC3_NV
 0x8FF6

	)

5412 
	#GL_UNSIGNED_INT64_VEC4_NV
 0x8FF7

	)

5413 
	#GL_FLOAT16_NV
 0x8FF8

	)

5414 
	#GL_FLOAT16_VEC2_NV
 0x8FF9

	)

5415 
	#GL_FLOAT16_VEC3_NV
 0x8FFA

	)

5416 
	#GL_FLOAT16_VEC4_NV
 0x8FFB

	)

5417 (
APIENTRYP
 
	tPFNGLUNIFORM1I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

5418 (
APIENTRYP
 
	tPFNGLUNIFORM2I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

5419 (
APIENTRYP
 
	tPFNGLUNIFORM3I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

5420 (
APIENTRYP
 
	tPFNGLUNIFORM4I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

5421 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5422 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5423 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5424 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5425 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

5426 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

5427 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

5428 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

5429 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5430 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5431 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5432 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5433 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 *
	t∑øms
);

5434 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 *
	t∑øms
);

5435 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

5436 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

5437 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

5438 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

5439 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5440 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5441 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5442 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

5443 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

5444 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

5445 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

5446 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

5447 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5448 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5449 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5450 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

5451 #ifde‡
GL_GLEXT_PROTOTYPES


5452 
GLAPI
 
APIENTRY
 
glUnif‹m1i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

5453 
GLAPI
 
APIENTRY
 
glUnif‹m2i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

5454 
GLAPI
 
APIENTRY
 
glUnif‹m3i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

5455 
GLAPI
 
APIENTRY
 
glUnif‹m4i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

5456 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5457 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5458 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5459 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5460 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

5461 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

5462 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

5463 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

5464 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5465 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5466 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5467 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5468 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 *
∑øms
);

5469 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 *
∑øms
);

5470 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

5471 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

5472 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

5473 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

5474 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5475 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5476 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5477 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

5478 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

5479 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

5480 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

5481 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

5482 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5483 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5484 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5485 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

5489 #i‚de‡
GL_AMD_öãæóved_ñemíts


5490 
	#GL_AMD_öãæóved_ñemíts
 1

	)

5491 
	#GL_VERTEX_ELEMENT_SWIZZLE_AMD
 0x91A4

	)

5492 
	#GL_VERTEX_ID_SWIZZLE_AMD
 0x91A5

	)

5493 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPARAMETERIAMDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5494 #ifde‡
GL_GLEXT_PROTOTYPES


5495 
GLAPI
 
APIENTRY
 
glVîãxAâribP¨amëîiAMD
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5499 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


5500 
	#GL_AMD_mu…i_døw_ödúe˘
 1

	)

5501 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

5502 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

5503 #ifde‡
GL_GLEXT_PROTOTYPES


5504 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘AMD
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

5505 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘AMD
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

5509 #i‚de‡
GL_AMD_«me_gí_dñëe


5510 
	#GL_AMD_«me_gí_dñëe
 1

	)

5511 
	#GL_DATA_BUFFER_AMD
 0x9151

	)

5512 
	#GL_PERFORMANCE_MONITOR_AMD
 0x9152

	)

5513 
	#GL_QUERY_OBJECT_AMD
 0x9153

	)

5514 
	#GL_VERTEX_ARRAY_OBJECT_AMD
 0x9154

	)

5515 
	#GL_SAMPLER_OBJECT_AMD
 0x9155

	)

5516 (
APIENTRYP
 
	tPFNGLGENNAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, GLuöà*
	t«mes
);

5517 (
APIENTRYP
 
	tPFNGLDELETENAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, c⁄° GLuöà*
	t«mes
);

5518 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
);

5519 #ifde‡
GL_GLEXT_PROTOTYPES


5520 
GLAPI
 
APIENTRY
 
glGíNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, GLuöà*
«mes
);

5521 
GLAPI
 
APIENTRY
 
glDñëeNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, c⁄° GLuöà*
«mes
);

5522 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNameAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
);

5526 #i‚de‡
GL_AMD_oc˛usi⁄_quîy_evít


5527 
	#GL_AMD_oc˛usi⁄_quîy_evít
 1

	)

5528 
	#GL_OCCLUSION_QUERY_EVENT_MASK_AMD
 0x874F

	)

5529 
	#GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
 0x00000001

	)

5530 
	#GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
 0x00000002

	)

5531 
	#GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
 0x00000004

	)

5532 
	#GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
 0x00000008

	)

5533 
	#GL_QUERY_ALL_EVENT_BITS_AMD
 0xFFFFFFFF

	)

5534 (
APIENTRYP
 
	tPFNGLQUERYOBJECTPARAMETERUIAMDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, GLíum 
	t≤ame
, GLuöà
	t∑øm
);

5535 #ifde‡
GL_GLEXT_PROTOTYPES


5536 
GLAPI
 
APIENTRY
 
glQuîyObje˘P¨amëîuiAMD
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, GLíum 
≤ame
, GLuöà
∑øm
);

5540 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


5541 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

5542 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

5543 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

5544 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

5545 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

5546 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

5547 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

5548 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

5549 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

5550 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

5551 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

5552 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

5553 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, *
	td©a
);

5554 (
APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

5555 (
APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

5556 (
APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îLi°
);

5557 (
APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

5558 (
APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

5559 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

5560 #ifde‡
GL_GLEXT_PROTOTYPES


5561 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

5562 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

5563 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

5564 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

5565 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, *
d©a
);

5566 
GLAPI
 
APIENTRY
 
glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

5567 
GLAPI
 
APIENTRY
 
glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

5568 
GLAPI
 
APIENTRY
 
glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îLi°
);

5569 
GLAPI
 
APIENTRY
 
glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

5570 
GLAPI
 
APIENTRY
 
glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

5571 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

5575 #i‚de‡
GL_AMD_pö√d_mem‹y


5576 
	#GL_AMD_pö√d_mem‹y
 1

	)

5577 
	#GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
 0x9160

	)

5580 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


5581 
	#GL_AMD_quîy_buf„r_obje˘
 1

	)

5582 
	#GL_QUERY_BUFFER_AMD
 0x9192

	)

5583 
	#GL_QUERY_BUFFER_BINDING_AMD
 0x9193

	)

5584 
	#GL_QUERY_RESULT_NO_WAIT_AMD
 0x9194

	)

5587 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


5588 
	#GL_AMD_ßm∂e_posôi⁄s
 1

	)

5589 
	#GL_SUBSAMPLE_DISTANCE_AMD
 0x883F

	)

5590 (
APIENTRYP
 
	tPFNGLSETMULTISAMPLEFVAMDPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tvÆ
);

5591 #ifde‡
GL_GLEXT_PROTOTYPES


5592 
GLAPI
 
APIENTRY
 
glSëMu…ißm∂efvAMD
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
vÆ
);

5596 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


5597 
	#GL_AMD_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

5600 #i‚de‡
GL_AMD_shadî_©omic_cou¡î_›s


5601 
	#GL_AMD_shadî_©omic_cou¡î_›s
 1

	)

5604 #i‚de‡
GL_AMD_shadî_ex∂icô_vîãx_∑ømëî


5605 
	#GL_AMD_shadî_ex∂icô_vîãx_∑ømëî
 1

	)

5608 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


5609 
	#GL_AMD_shadî_°ícû_exp‹t
 1

	)

5612 #i‚de‡
GL_AMD_shadî_åö¨y_mömax


5613 
	#GL_AMD_shadî_åö¨y_mömax
 1

	)

5616 #i‚de‡
GL_AMD_•¨£_ãxtuª


5617 
	#GL_AMD_•¨£_ãxtuª
 1

	)

5618 
	#GL_VIRTUAL_PAGE_SIZE_X_AMD
 0x9195

	)

5619 
	#GL_VIRTUAL_PAGE_SIZE_Y_AMD
 0x9196

	)

5620 
	#GL_VIRTUAL_PAGE_SIZE_Z_AMD
 0x9197

	)

5621 
	#GL_MAX_SPARSE_TEXTURE_SIZE_AMD
 0x9198

	)

5622 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
 0x9199

	)

5623 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
 0x919A

	)

5624 
	#GL_MIN_SPARSE_LEVEL_AMD
 0x919B

	)

5625 
	#GL_MIN_LOD_WARNING_AMD
 0x919C

	)

5626 
	#GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
 0x00000001

	)

5627 (
APIENTRYP
 
	tPFNGLTEXSTORAGESPARSEAMDPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

5628 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGESPARSEAMDPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

5629 #ifde‡
GL_GLEXT_PROTOTYPES


5630 
GLAPI
 
APIENTRY
 
glTexSt‹ageS∑r£AMD
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

5631 
GLAPI
 
APIENTRY
 
glTextuªSt‹ageS∑r£AMD
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

5635 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


5636 
	#GL_AMD_°ícû_›î©i⁄_exãnded
 1

	)

5637 
	#GL_SET_AMD
 0x874A

	)

5638 
	#GL_REPLACE_VALUE_AMD
 0x874B

	)

5639 
	#GL_STENCIL_OP_VALUE_AMD
 0x874C

	)

5640 
	#GL_STENCIL_BACK_OP_VALUE_AMD
 0x874D

	)

5641 (
APIENTRYP
 
	tPFNGLSTENCILOPVALUEAMDPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tvÆue
);

5642 #ifde‡
GL_GLEXT_PROTOTYPES


5643 
GLAPI
 
APIENTRY
 
glSãncûOpVÆueAMD
 (
GLíum
 
Á˚
, 
GLuöt
 
vÆue
);

5647 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


5648 
	#GL_AMD_ãxtuª_ãxtuª4
 1

	)

5651 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


5652 
	#GL_AMD_å™sf‹m_„edback3_löes_åüngÀs
 1

	)

5655 #i‚de‡
GL_AMD_å™sf‹m_„edback4


5656 
	#GL_AMD_å™sf‹m_„edback4
 1

	)

5657 
	#GL_STREAM_RASTERIZATION_AMD
 0x91A0

	)

5660 #i‚de‡
GL_AMD_vîãx_shadî_œyî


5661 
	#GL_AMD_vîãx_shadî_œyî
 1

	)

5664 #i‚de‡
GL_AMD_vîãx_shadî_ãs£Œ©‹


5665 
	#GL_AMD_vîãx_shadî_ãs£Œ©‹
 1

	)

5666 
	#GL_SAMPLER_BUFFER_AMD
 0x9001

	)

5667 
	#GL_INT_SAMPLER_BUFFER_AMD
 0x9002

	)

5668 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
 0x9003

	)

5669 
	#GL_TESSELLATION_MODE_AMD
 0x9004

	)

5670 
	#GL_TESSELLATION_FACTOR_AMD
 0x9005

	)

5671 
	#GL_DISCRETE_AMD
 0x9006

	)

5672 
	#GL_CONTINUOUS_AMD
 0x9007

	)

5673 (
APIENTRYP
 
	tPFNGLTESSELLATIONFACTORAMDPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

5674 (
APIENTRYP
 
	tPFNGLTESSELLATIONMODEAMDPROC
Ë(
	tGLíum
 
	tmode
);

5675 #ifde‡
GL_GLEXT_PROTOTYPES


5676 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄Fa˘‹AMD
 (
GLÊﬂt
 
Á˘‹
);

5677 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄ModeAMD
 (
GLíum
 
mode
);

5681 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


5682 
	#GL_AMD_vîãx_shadî_võwp‹t_ödex
 1

	)

5685 #i‚de‡
GL_APPLE_aux_dïth_°ícû


5686 
	#GL_APPLE_aux_dïth_°ícû
 1

	)

5687 
	#GL_AUX_DEPTH_STENCIL_APPLE
 0x8A14

	)

5690 #i‚de‡
GL_APPLE_˛õ¡_°‹age


5691 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

5692 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

5695 #i‚de‡
GL_APPLE_ñemít_¨øy


5696 
	#GL_APPLE_ñemít_¨øy
 1

	)

5697 
	#GL_ELEMENT_ARRAY_APPLE
 0x8A0C

	)

5698 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8A0D

	)

5699 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x8A0E

	)

5700 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° *
	tpoöãr
);

5701 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5702 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5703 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5704 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5705 #ifde‡
GL_GLEXT_PROTOTYPES


5706 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
 
ty≥
, c⁄° *
poöãr
);

5707 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5708 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5709 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

5710 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

5714 #i‚de‡
GL_APPLE_„n˚


5715 
	#GL_APPLE_„n˚
 1

	)

5716 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

5717 
	#GL_FENCE_APPLE
 0x8A0B

	)

5718 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

5719 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

5720 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5721 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5722 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5723 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5724 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

5725 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

5726 #ifde‡
GL_GLEXT_PROTOTYPES


5727 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

5728 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

5729 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
 
„n˚
);

5730 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
 
„n˚
);

5731 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
 
„n˚
);

5732 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
 
„n˚
);

5733 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
 
obje˘
, 
GLuöt
 
«me
);

5734 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
 
obje˘
, 
GLöt
 
«me
);

5738 #i‚de‡
GL_APPLE_Êﬂt_pixñs


5739 
	#GL_APPLE_Êﬂt_pixñs
 1

	)

5740 
	#GL_HALF_APPLE
 0x140B

	)

5741 
	#GL_RGBA_FLOAT32_APPLE
 0x8814

	)

5742 
	#GL_RGB_FLOAT32_APPLE
 0x8815

	)

5743 
	#GL_ALPHA_FLOAT32_APPLE
 0x8816

	)

5744 
	#GL_INTENSITY_FLOAT32_APPLE
 0x8817

	)

5745 
	#GL_LUMINANCE_FLOAT32_APPLE
 0x8818

	)

5746 
	#GL_LUMINANCE_ALPHA_FLOAT32_APPLE
 0x8819

	)

5747 
	#GL_RGBA_FLOAT16_APPLE
 0x881A

	)

5748 
	#GL_RGB_FLOAT16_APPLE
 0x881B

	)

5749 
	#GL_ALPHA_FLOAT16_APPLE
 0x881C

	)

5750 
	#GL_INTENSITY_FLOAT16_APPLE
 0x881D

	)

5751 
	#GL_LUMINANCE_FLOAT16_APPLE
 0x881E

	)

5752 
	#GL_LUMINANCE_ALPHA_FLOAT16_APPLE
 0x881F

	)

5753 
	#GL_COLOR_FLOAT_APPLE
 0x8A0F

	)

5756 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


5757 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

5758 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

5759 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

5760 (
APIENTRYP
 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5761 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

5762 #ifde‡
GL_GLEXT_PROTOTYPES


5763 
GLAPI
 
APIENTRY
 
glBuf„rP¨amëîiAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

5764 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™geAPPLE
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

5768 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


5769 
	#GL_APPLE_obje˘_purgóbÀ
 1

	)

5770 
	#GL_BUFFER_OBJECT_APPLE
 0x85B3

	)

5771 
	#GL_RELEASED_APPLE
 0x8A19

	)

5772 
	#GL_VOLATILE_APPLE
 0x8A1A

	)

5773 
	#GL_RETAINED_APPLE
 0x8A1B

	)

5774 
	#GL_UNDEFINED_APPLE
 0x8A1C

	)

5775 
	#GL_PURGEABLE_APPLE
 0x8A1D

	)

5776 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

5777 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTUNPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

5778 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5779 #ifde‡
GL_GLEXT_PROTOTYPES


5780 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘PurgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

5781 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘U≈urgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

5782 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivAPPLE
 (
GLíum
 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

5786 #i‚de‡
GL_APPLE_rgb_422


5787 
	#GL_APPLE_rgb_422
 1

	)

5788 
	#GL_RGB_422_APPLE
 0x8A1F

	)

5789 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

5790 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

5791 
	#GL_RGB_RAW_422_APPLE
 0x8A51

	)

5794 #i‚de‡
GL_APPLE_row_byãs


5795 
	#GL_APPLE_row_byãs
 1

	)

5796 
	#GL_PACK_ROW_BYTES_APPLE
 0x8A15

	)

5797 
	#GL_UNPACK_ROW_BYTES_APPLE
 0x8A16

	)

5800 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


5801 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

5802 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

5805 #i‚de‡
GL_APPLE_ãxtuª_ønge


5806 
	#GL_APPLE_ãxtuª_ønge
 1

	)

5807 
	#GL_TEXTURE_RANGE_LENGTH_APPLE
 0x85B7

	)

5808 
	#GL_TEXTURE_RANGE_POINTER_APPLE
 0x85B8

	)

5809 
	#GL_TEXTURE_STORAGE_HINT_APPLE
 0x85BC

	)

5810 
	#GL_STORAGE_PRIVATE_APPLE
 0x85BD

	)

5811 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

5812 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

5813 (
APIENTRYP
 
	tPFNGLTEXTURERANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

5814 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

5815 #ifde‡
GL_GLEXT_PROTOTYPES


5816 
GLAPI
 
APIENTRY
 
glTextuªR™geAPPLE
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° *
poöãr
);

5817 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîPoöãrvAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

5821 #i‚de‡
GL_APPLE_å™sf‹m_höt


5822 
	#GL_APPLE_å™sf‹m_höt
 1

	)

5823 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

5826 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


5827 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

5828 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

5829 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

5830 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

5831 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

5832 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

5833 #ifde‡
GL_GLEXT_PROTOTYPES


5834 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

5835 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

5836 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

5837 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

5841 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


5842 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

5843 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

5844 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

5845 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

5846 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

5847 
	#GL_STORAGE_CLIENT_APPLE
 0x85B4

	)

5848 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, *
	tpoöãr
);

5849 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, *
	tpoöãr
);

5850 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5851 #ifde‡
GL_GLEXT_PROTOTYPES


5852 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, *
poöãr
);

5853 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, *
poöãr
);

5854 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5858 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


5859 
	#GL_APPLE_vîãx_¥ogøm_evÆu©‹s
 1

	)

5860 
	#GL_VERTEX_ATTRIB_MAP1_APPLE
 0x8A00

	)

5861 
	#GL_VERTEX_ATTRIB_MAP2_APPLE
 0x8A01

	)

5862 
	#GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
 0x8A02

	)

5863 
	#GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
 0x8A03

	)

5864 
	#GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
 0x8A04

	)

5865 
	#GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
 0x8A05

	)

5866 
	#GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
 0x8A06

	)

5867 
	#GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
 0x8A07

	)

5868 
	#GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
 0x8A08

	)

5869 
	#GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
 0x8A09

	)

5870 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5871 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5872 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXATTRIBENABLEDAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5873 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5874 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5875 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5876 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5877 #ifde‡
GL_GLEXT_PROTOTYPES


5878 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5879 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5880 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAâribE«bÀdAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5881 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLdoubÀ *
poöts
);

5882 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLÊﬂà*
poöts
);

5883 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLdoubÀ *
poöts
);

5884 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLÊﬂà*
poöts
);

5888 #i‚de‡
GL_APPLE_ycb¸_422


5889 
	#GL_APPLE_ycb¸_422
 1

	)

5890 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

5893 #i‚de‡
GL_ATI_døw_buf„rs


5894 
	#GL_ATI_døw_buf„rs
 1

	)

5895 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

5896 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

5897 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

5898 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

5899 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

5900 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

5901 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

5902 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

5903 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

5904 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

5905 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

5906 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

5907 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

5908 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

5909 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

5910 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

5911 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

5912 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

5913 #ifde‡
GL_GLEXT_PROTOTYPES


5914 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

5918 #i‚de‡
GL_ATI_ñemít_¨øy


5919 
	#GL_ATI_ñemít_¨øy
 1

	)

5920 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

5921 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

5922 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

5923 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° *
	tpoöãr
);

5924 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

5925 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

5926 #ifde‡
GL_GLEXT_PROTOTYPES


5927 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
 
ty≥
, c⁄° *
poöãr
);

5928 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
);

5929 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
);

5933 #i‚de‡
GL_ATI_ívm≠_bumpm≠


5934 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

5935 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

5936 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

5937 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

5938 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

5939 
	#GL_DUDV_ATI
 0x8779

	)

5940 
	#GL_DU8DV8_ATI
 0x877A

	)

5941 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

5942 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

5943 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

5944 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

5945 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

5946 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

5947 #ifde‡
GL_GLEXT_PROTOTYPES


5948 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

5949 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

5950 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

5951 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øm
);

5955 #i‚de‡
GL_ATI_‰agmít_shadî


5956 
	#GL_ATI_‰agmít_shadî
 1

	)

5957 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

5958 
	#GL_REG_0_ATI
 0x8921

	)

5959 
	#GL_REG_1_ATI
 0x8922

	)

5960 
	#GL_REG_2_ATI
 0x8923

	)

5961 
	#GL_REG_3_ATI
 0x8924

	)

5962 
	#GL_REG_4_ATI
 0x8925

	)

5963 
	#GL_REG_5_ATI
 0x8926

	)

5964 
	#GL_REG_6_ATI
 0x8927

	)

5965 
	#GL_REG_7_ATI
 0x8928

	)

5966 
	#GL_REG_8_ATI
 0x8929

	)

5967 
	#GL_REG_9_ATI
 0x892A

	)

5968 
	#GL_REG_10_ATI
 0x892B

	)

5969 
	#GL_REG_11_ATI
 0x892C

	)

5970 
	#GL_REG_12_ATI
 0x892D

	)

5971 
	#GL_REG_13_ATI
 0x892E

	)

5972 
	#GL_REG_14_ATI
 0x892F

	)

5973 
	#GL_REG_15_ATI
 0x8930

	)

5974 
	#GL_REG_16_ATI
 0x8931

	)

5975 
	#GL_REG_17_ATI
 0x8932

	)

5976 
	#GL_REG_18_ATI
 0x8933

	)

5977 
	#GL_REG_19_ATI
 0x8934

	)

5978 
	#GL_REG_20_ATI
 0x8935

	)

5979 
	#GL_REG_21_ATI
 0x8936

	)

5980 
	#GL_REG_22_ATI
 0x8937

	)

5981 
	#GL_REG_23_ATI
 0x8938

	)

5982 
	#GL_REG_24_ATI
 0x8939

	)

5983 
	#GL_REG_25_ATI
 0x893A

	)

5984 
	#GL_REG_26_ATI
 0x893B

	)

5985 
	#GL_REG_27_ATI
 0x893C

	)

5986 
	#GL_REG_28_ATI
 0x893D

	)

5987 
	#GL_REG_29_ATI
 0x893E

	)

5988 
	#GL_REG_30_ATI
 0x893F

	)

5989 
	#GL_REG_31_ATI
 0x8940

	)

5990 
	#GL_CON_0_ATI
 0x8941

	)

5991 
	#GL_CON_1_ATI
 0x8942

	)

5992 
	#GL_CON_2_ATI
 0x8943

	)

5993 
	#GL_CON_3_ATI
 0x8944

	)

5994 
	#GL_CON_4_ATI
 0x8945

	)

5995 
	#GL_CON_5_ATI
 0x8946

	)

5996 
	#GL_CON_6_ATI
 0x8947

	)

5997 
	#GL_CON_7_ATI
 0x8948

	)

5998 
	#GL_CON_8_ATI
 0x8949

	)

5999 
	#GL_CON_9_ATI
 0x894A

	)

6000 
	#GL_CON_10_ATI
 0x894B

	)

6001 
	#GL_CON_11_ATI
 0x894C

	)

6002 
	#GL_CON_12_ATI
 0x894D

	)

6003 
	#GL_CON_13_ATI
 0x894E

	)

6004 
	#GL_CON_14_ATI
 0x894F

	)

6005 
	#GL_CON_15_ATI
 0x8950

	)

6006 
	#GL_CON_16_ATI
 0x8951

	)

6007 
	#GL_CON_17_ATI
 0x8952

	)

6008 
	#GL_CON_18_ATI
 0x8953

	)

6009 
	#GL_CON_19_ATI
 0x8954

	)

6010 
	#GL_CON_20_ATI
 0x8955

	)

6011 
	#GL_CON_21_ATI
 0x8956

	)

6012 
	#GL_CON_22_ATI
 0x8957

	)

6013 
	#GL_CON_23_ATI
 0x8958

	)

6014 
	#GL_CON_24_ATI
 0x8959

	)

6015 
	#GL_CON_25_ATI
 0x895A

	)

6016 
	#GL_CON_26_ATI
 0x895B

	)

6017 
	#GL_CON_27_ATI
 0x895C

	)

6018 
	#GL_CON_28_ATI
 0x895D

	)

6019 
	#GL_CON_29_ATI
 0x895E

	)

6020 
	#GL_CON_30_ATI
 0x895F

	)

6021 
	#GL_CON_31_ATI
 0x8960

	)

6022 
	#GL_MOV_ATI
 0x8961

	)

6023 
	#GL_ADD_ATI
 0x8963

	)

6024 
	#GL_MUL_ATI
 0x8964

	)

6025 
	#GL_SUB_ATI
 0x8965

	)

6026 
	#GL_DOT3_ATI
 0x8966

	)

6027 
	#GL_DOT4_ATI
 0x8967

	)

6028 
	#GL_MAD_ATI
 0x8968

	)

6029 
	#GL_LERP_ATI
 0x8969

	)

6030 
	#GL_CND_ATI
 0x896A

	)

6031 
	#GL_CND0_ATI
 0x896B

	)

6032 
	#GL_DOT2_ADD_ATI
 0x896C

	)

6033 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

6034 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

6035 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

6036 
	#GL_NUM_PASSES_ATI
 0x8970

	)

6037 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

6038 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

6039 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

6040 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

6041 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

6042 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

6043 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

6044 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

6045 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

6046 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

6047 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

6048 
	#GL_RED_BIT_ATI
 0x00000001

	)

6049 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

6050 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

6051 
	#GL_2X_BIT_ATI
 0x00000001

	)

6052 
	#GL_4X_BIT_ATI
 0x00000002

	)

6053 
	#GL_8X_BIT_ATI
 0x00000004

	)

6054 
	#GL_HALF_BIT_ATI
 0x00000008

	)

6055 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

6056 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

6057 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

6058 
	#GL_COMP_BIT_ATI
 0x00000002

	)

6059 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

6060 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

6061 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

6062 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

6063 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

6064 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

6065 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

6066 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

6067 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

6068 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

6069 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

6070 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

6071 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

6072 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

6073 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

6074 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6075 #ifde‡
GL_GLEXT_PROTOTYPES


6076 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuöà
ønge
);

6077 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
 
id
);

6078 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
 
id
);

6079 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

6080 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

6081 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
 
d°
, GLuöà
co‹d
, 
GLíum
 
swizzÀ
);

6082 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
 
d°
, GLuöà
öãΩ
, 
GLíum
 
swizzÀ
);

6083 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

6084 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

6085 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

6086 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

6087 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

6088 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

6089 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
 
d°
, c⁄° 
GLÊﬂt
 *
vÆue
);

6093 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


6094 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

6095 *(
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6096 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6097 #ifde‡
GL_GLEXT_PROTOTYPES


6098 
GLAPI
 *
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6099 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6103 #i‚de‡
GL_ATI_memöfo


6104 
	#GL_ATI_memöfo
 1

	)

6105 
	#GL_VBO_FREE_MEMORY_ATI
 0x87FB

	)

6106 
	#GL_TEXTURE_FREE_MEMORY_ATI
 0x87FC

	)

6107 
	#GL_RENDERBUFFER_FREE_MEMORY_ATI
 0x87FD

	)

6110 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


6111 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

6112 
	#GL_RGBA_FLOAT_MODE_ATI
 0x8820

	)

6113 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

6116 #i‚de‡
GL_ATI_≤_åüngÀs


6117 
	#GL_ATI_≤_åüngÀs
 1

	)

6118 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

6119 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

6120 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

6121 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

6122 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

6123 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

6124 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

6125 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

6126 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

6127 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6128 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6129 #ifde‡
GL_GLEXT_PROTOTYPES


6130 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6131 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

6135 #i‚de‡
GL_ATI_£∑øã_°ícû


6136 
	#GL_ATI_£∑øã_°ícû
 1

	)

6137 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

6138 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

6139 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

6140 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

6141 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

6142 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

6143 #ifde‡
GL_GLEXT_PROTOTYPES


6144 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

6145 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
 
‰⁄tfunc
, GLíum 
backfunc
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

6149 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


6150 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

6151 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

6154 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


6155 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

6156 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

6157 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

6158 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

6161 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


6162 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

6163 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

6164 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

6165 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

6166 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

6167 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

6168 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

6169 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

6170 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

6171 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

6172 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

6173 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

6174 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

6177 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


6178 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

6179 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

6180 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

6183 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


6184 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

6185 
	#GL_STATIC_ATI
 0x8760

	)

6186 
	#GL_DYNAMIC_ATI
 0x8761

	)

6187 
	#GL_PRESERVE_ATI
 0x8762

	)

6188 
	#GL_DISCARD_ATI
 0x8763

	)

6189 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

6190 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

6191 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

6192 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

6193 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° *
	tpoöãr
, 
	tGLíum
 
	tußge
);

6194 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6195 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

6196 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6197 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6198 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6199 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

6200 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6201 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6202 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

6203 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6204 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6205 #ifde‡
GL_GLEXT_PROTOTYPES


6206 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
 
size
, c⁄° *
poöãr
, 
GLíum
 
ußge
);

6207 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6208 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
 
buf„r
, GLuöà
off£t
, 
GLsizei
 
size
, c⁄° *
poöãr
, 
GLíum
 
¥e£rve
);

6209 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6210 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6211 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

6212 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
 
¨øy
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLuöt
 
buf„r
, GLuöà
off£t
);

6213 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6214 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6215 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

6216 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6217 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6221 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


6222 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

6223 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

6224 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6225 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6226 #ifde‡
GL_GLEXT_PROTOTYPES


6227 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

6228 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6229 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6233 #i‚de‡
GL_ATI_vîãx_°ªams


6234 
	#GL_ATI_vîãx_°ªams
 1

	)

6235 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

6236 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

6237 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

6238 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

6239 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

6240 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

6241 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

6242 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

6243 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

6244 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

6245 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

6246 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6247 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

6248 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6249 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

6250 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6251 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

6252 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6253 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

6254 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6255 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

6256 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6257 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

6258 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6259 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6260 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6261 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

6262 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6263 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

6264 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6265 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6266 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6267 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6268 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6269 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

6270 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6271 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6272 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6273 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6274 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6275 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6276 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6277 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

6278 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

6279 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

6280 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

6281 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

6282 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

6283 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

6284 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

6285 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

6286 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

6287 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

6288 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6289 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6290 #ifde‡
GL_GLEXT_PROTOTYPES


6291 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
);

6292 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6293 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
);

6294 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6295 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
);

6296 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6297 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
);

6298 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6299 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
);

6300 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6301 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
);

6302 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6303 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

6304 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6305 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

6306 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6307 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

6308 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6309 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

6310 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6311 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6312 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6313 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6314 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6315 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

6316 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6317 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

6318 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6319 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

6320 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6321 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

6322 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6323 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
 
°ªam
, 
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
);

6324 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
 
°ªam
, c⁄° 
GLbyã
 *
co‹ds
);

6325 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
);

6326 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

6327 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
nx
, GLöà
ny
, GLöà
nz
);

6328 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

6329 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

6330 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

6331 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
);

6332 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

6333 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
 
°ªam
);

6334 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6335 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

6339 #i‚de‡
GL_EXT_422_pixñs


6340 
	#GL_EXT_422_pixñs
 1

	)

6341 
	#GL_422_EXT
 0x80CC

	)

6342 
	#GL_422_REV_EXT
 0x80CD

	)

6343 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

6344 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

6347 #i‚de‡
GL_EXT_abgr


6348 
	#GL_EXT_abgr
 1

	)

6349 
	#GL_ABGR_EXT
 0x8000

	)

6352 #i‚de‡
GL_EXT_bgø


6353 
	#GL_EXT_bgø
 1

	)

6354 
	#GL_BGR_EXT
 0x80E0

	)

6355 
	#GL_BGRA_EXT
 0x80E1

	)

6358 #i‚de‡
GL_EXT_bödabÀ_unif‹m


6359 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

6360 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

6361 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

6362 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

6363 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

6364 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

6365 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

6366 (
APIENTRYP
 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

6367 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

6368 
GLöçå
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

6369 #ifde‡
GL_GLEXT_PROTOTYPES


6370 
GLAPI
 
APIENTRY
 
glUnif‹mBuf„rEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
buf„r
);

6371 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mBuf„rSizeEXT
 (
GLuöt
 
¥ogøm
, GLöà
loˇti⁄
);

6372 
GLAPI
 
GLöçå
 
APIENTRY
 
glGëUnif‹mOff£tEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
);

6376 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


6377 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

6378 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

6379 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

6380 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

6381 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

6382 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

6383 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

6384 #ifde‡
GL_GLEXT_PROTOTYPES


6385 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

6389 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


6390 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

6391 
	#GL_BLEND_EQUATION_RGB_EXT
 0x8009

	)

6392 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

6393 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6394 #ifde‡
GL_GLEXT_PROTOTYPES


6395 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

6399 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


6400 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

6401 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

6402 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

6403 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

6404 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

6405 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

6406 #ifde‡
GL_GLEXT_PROTOTYPES


6407 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

6411 #i‚de‡
GL_EXT_bÀnd_logic_›


6412 
	#GL_EXT_bÀnd_logic_›
 1

	)

6415 #i‚de‡
GL_EXT_bÀnd_mömax


6416 
	#GL_EXT_bÀnd_mömax
 1

	)

6417 
	#GL_MIN_EXT
 0x8007

	)

6418 
	#GL_MAX_EXT
 0x8008

	)

6419 
	#GL_FUNC_ADD_EXT
 0x8006

	)

6420 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

6421 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

6422 #ifde‡
GL_GLEXT_PROTOTYPES


6423 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
 
mode
);

6427 #i‚de‡
GL_EXT_bÀnd_subåa˘


6428 
	#GL_EXT_bÀnd_subåa˘
 1

	)

6429 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

6430 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

6433 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


6434 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

6435 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

6438 #i‚de‡
GL_EXT_cmyka


6439 
	#GL_EXT_cmyka
 1

	)

6440 
	#GL_CMYK_EXT
 0x800C

	)

6441 
	#GL_CMYKA_EXT
 0x800D

	)

6442 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

6443 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

6446 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


6447 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

6448 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6449 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

6450 #ifde‡
GL_GLEXT_PROTOTYPES


6451 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

6452 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

6456 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


6457 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

6458 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

6459 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

6460 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6461 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

6462 #ifde‡
GL_GLEXT_PROTOTYPES


6463 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

6464 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

6468 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


6469 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

6470 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

6471 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

6472 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

6473 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

6474 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

6475 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

6476 
	#GL_REDUCE_EXT
 0x8016

	)

6477 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

6478 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

6479 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

6480 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

6481 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

6482 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

6483 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

6484 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

6485 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

6486 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

6487 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

6488 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

6489 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

6490 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

6491 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

6492 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

6493 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6494 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

6495 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6496 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6497 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6498 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	timage
);

6499 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6500 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6501 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	trow
, *
	tcﬁumn
, *
	t•™
);

6502 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	trow
, c⁄° *
	tcﬁumn
);

6503 #ifde‡
GL_GLEXT_PROTOTYPES


6504 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

6505 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

6506 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

6507 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6508 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

6509 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6510 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

6511 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6512 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
image
);

6513 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6514 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6515 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
row
, *
cﬁumn
, *
•™
);

6516 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
row
, c⁄° *
cﬁumn
);

6520 #i‚de‡
GL_EXT_co‹dö©e_‰ame


6521 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

6522 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

6523 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

6524 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

6525 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

6526 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

6527 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

6528 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

6529 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

6530 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

6531 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

6532 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

6533 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

6534 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

6535 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

6536 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

6537 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6538 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

6539 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6540 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

6541 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6542 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

6543 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6544 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

6545 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6546 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

6547 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6548 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

6549 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6550 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

6551 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6552 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

6553 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6554 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

6555 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6556 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6557 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6558 #ifde‡
GL_GLEXT_PROTOTYPES


6559 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
 
tx
, GLbyã 
ty
, GLbyã 
tz
);

6560 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *
v
);

6561 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
 
tx
, GLdoubÀ 
ty
, GLdoubÀ 
tz
);

6562 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

6563 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
 
tx
, GLÊﬂà
ty
, GLÊﬂà
tz
);

6564 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

6565 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
 
tx
, GLöà
ty
, GLöà
tz
);

6566 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *
v
);

6567 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
 
tx
, GLsh‹à
ty
, GLsh‹à
tz
);

6568 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

6569 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
 
bx
, GLbyã 
by
, GLbyã 
bz
);

6570 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *
v
);

6571 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
 
bx
, GLdoubÀ 
by
, GLdoubÀ 
bz
);

6572 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

6573 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
 
bx
, GLÊﬂà
by
, GLÊﬂà
bz
);

6574 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

6575 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
 
bx
, GLöà
by
, GLöà
bz
);

6576 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *
v
);

6577 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
 
bx
, GLsh‹à
by
, GLsh‹à
bz
);

6578 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

6579 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6580 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6584 #i‚de‡
GL_EXT_c›y_ãxtuª


6585 
	#GL_EXT_c›y_ãxtuª
 1

	)

6586 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6587 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6588 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6589 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6590 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6591 #ifde‡
GL_GLEXT_PROTOTYPES


6592 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6593 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6594 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6595 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6596 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6600 #i‚de‡
GL_EXT_cuŒ_vîãx


6601 
	#GL_EXT_cuŒ_vîãx
 1

	)

6602 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

6603 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

6604 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

6605 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6606 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6607 #ifde‡
GL_GLEXT_PROTOTYPES


6608 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6609 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6613 #i‚de‡
GL_EXT_debug_œbñ


6614 
	#GL_EXT_debug_œbñ
 1

	)

6615 
	#GL_PROGRAM_PIPELINE_OBJECT_EXT
 0x8A4F

	)

6616 
	#GL_PROGRAM_OBJECT_EXT
 0x8B40

	)

6617 
	#GL_SHADER_OBJECT_EXT
 0x8B48

	)

6618 
	#GL_BUFFER_OBJECT_EXT
 0x9151

	)

6619 
	#GL_QUERY_OBJECT_EXT
 0x9153

	)

6620 
	#GL_VERTEX_ARRAY_OBJECT_EXT
 0x9154

	)

6621 (
APIENTRYP
 
	tPFNGLLABELOBJECTEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

6622 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

6623 #ifde‡
GL_GLEXT_PROTOTYPES


6624 
GLAPI
 
APIENTRY
 
glLabñObje˘EXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

6625 
GLAPI
 
APIENTRY
 
glGëObje˘LabñEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

6629 #i‚de‡
GL_EXT_debug_m¨kî


6630 
	#GL_EXT_debug_m¨kî
 1

	)

6631 (
APIENTRYP
 
	tPFNGLINSERTEVENTMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

6632 (
APIENTRYP
 
	tPFNGLPUSHGROUPMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

6633 (
APIENTRYP
 
	tPFNGLPOPGROUPMARKEREXTPROC
) ();

6634 #ifde‡
GL_GLEXT_PROTOTYPES


6635 
GLAPI
 
APIENTRY
 
glIn£πEvítM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

6636 
GLAPI
 
APIENTRY
 
glPushGroupM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

6637 
GLAPI
 
APIENTRY
 
glP›GroupM¨kîEXT
 ();

6641 #i‚de‡
GL_EXT_dïth_bounds_ã°


6642 
	#GL_EXT_dïth_bounds_ã°
 1

	)

6643 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

6644 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

6645 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

6646 #ifde‡
GL_GLEXT_PROTOTYPES


6647 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
 
zmö
, GL˛ampd 
zmax
);

6651 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


6652 
	#GL_EXT_dúe˘_°©e_ac˚ss
 1

	)

6653 
	#GL_PROGRAM_MATRIX_EXT
 0x8E2D

	)

6654 
	#GL_TRANSPOSE_PROGRAM_MATRIX_EXT
 0x8E2E

	)

6655 
	#GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
 0x8E2F

	)

6656 (
APIENTRYP
 
	tPFNGLMATRIXLOADFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6657 (
APIENTRYP
 
	tPFNGLMATRIXLOADDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6658 (
APIENTRYP
 
	tPFNGLMATRIXMULTFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6659 (
APIENTRYP
 
	tPFNGLMATRIXMULTDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6660 (
APIENTRYP
 
	tPFNGLMATRIXLOADIDENTITYEXTPROC
Ë(
	tGLíum
 
	tmode
);

6661 (
APIENTRYP
 
	tPFNGLMATRIXROTATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	t™gÀ
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6662 (
APIENTRYP
 
	tPFNGLMATRIXROTATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	t™gÀ
, GLdoubÀ 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6663 (
APIENTRYP
 
	tPFNGLMATRIXSCALEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6664 (
APIENTRYP
 
	tPFNGLMATRIXSCALEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6665 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6666 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6667 (
APIENTRYP
 
	tPFNGLMATRIXFRUSTUMEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

6668 (
APIENTRYP
 
	tPFNGLMATRIXORTHOEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

6669 (
APIENTRYP
 
	tPFNGLMATRIXPOPEXTPROC
Ë(
	tGLíum
 
	tmode
);

6670 (
APIENTRYP
 
	tPFNGLMATRIXPUSHEXTPROC
Ë(
	tGLíum
 
	tmode
);

6671 (
APIENTRYP
 
	tPFNGLCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

6672 (
APIENTRYP
 
	tPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

6673 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6674 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6675 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6676 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6677 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6678 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6679 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6680 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6681 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6682 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6683 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6684 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6685 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

6686 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6687 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6688 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6689 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

6690 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6691 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6692 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6693 (
APIENTRYP
 
	tPFNGLBINDMULTITEXTUREEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

6694 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6695 (
APIENTRYP
 
	tPFNGLMULTITEXENVFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6696 (
APIENTRYP
 
	tPFNGLMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6697 (
APIENTRYP
 
	tPFNGLMULTITEXENVIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6698 (
APIENTRYP
 
	tPFNGLMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6699 (
APIENTRYP
 
	tPFNGLMULTITEXGENDEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 
	t∑øm
);

6700 (
APIENTRYP
 
	tPFNGLMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

6701 (
APIENTRYP
 
	tPFNGLMULTITEXGENFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6702 (
APIENTRYP
 
	tPFNGLMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6703 (
APIENTRYP
 
	tPFNGLMULTITEXGENIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6704 (
APIENTRYP
 
	tPFNGLMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6705 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6706 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6707 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6708 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6709 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6710 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6711 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6712 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6713 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6714 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6715 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6716 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6717 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6718 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6719 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6720 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6721 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6722 (
APIENTRYP
 
	tPFNGLGETMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

6723 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6724 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6725 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6726 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

6727 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6728 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6729 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6730 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6731 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6732 (
APIENTRYP
 
	tPFNGLGETFLOATINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

6733 (
APIENTRYP
 
	tPFNGLGETDOUBLEINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

6734 (
APIENTRYP
 
	tPFNGLGETPOINTERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, **
	td©a
);

6735 (
APIENTRYP
 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6736 (
APIENTRYP
 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6737 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6738 (
APIENTRYP
 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

6739 (
APIENTRYP
 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

6740 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6741 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6742 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6743 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6744 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6745 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6746 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, *
	timg
);

6747 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6748 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6749 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6750 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6751 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6752 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6753 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tlod
, *
	timg
);

6754 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6755 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6756 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6757 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6758 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLíum
 
	tußge
);

6759 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

6760 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

6761 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6762 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6763 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, **
	t∑øms
);

6764 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

6765 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

6766 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

6767 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

6768 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

6769 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

6770 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

6771 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

6772 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

6773 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6774 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6775 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6776 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6777 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6778 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6779 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6780 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6781 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6782 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6783 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6784 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6785 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6786 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6787 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6788 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6789 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6790 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

6791 (
APIENTRYP
 
	tPFNGLMULTITEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

6792 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6793 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

6794 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6795 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, GLuöà*
	t∑øms
);

6796 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6797 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

6798 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6799 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

6800 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

6801 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

6802 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

6803 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

6804 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6805 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6806 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6807 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6808 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6809 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6810 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

6811 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

6812 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

6813 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° GLuöà*
	t∑øms
);

6814 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

6815 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øms
);

6816 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà*
	t∑øms
);

6817 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6818 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6819 (
APIENTRYP
 
	tPFNGLGETFLOATI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

6820 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

6821 (
APIENTRYP
 
	tPFNGLGETPOINTERI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, **
	t∑øms
);

6822 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

6823 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6824 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

6825 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6826 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6827 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

6828 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

6829 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6830 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, *
	t°rög
);

6831 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6832 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6833 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6834 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6835 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

6836 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6837 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6838 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

6839 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

6840 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6841 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
);

6842 (
APIENTRYP
 
	tPFNGLGENERATEMULTITEXMIPMAPEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
);

6843 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

6844 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6845 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERREADBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

6846 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6847 (
APIENTRYP
 
	tPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

6848 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6849 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

6850 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

6851 (
APIENTRYP
 
	tPFNGLTEXTURERENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	tªndîbuf„r
);

6852 (
APIENTRYP
 
	tPFNGLMULTITEXRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

6853 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6854 (
APIENTRYP
 
	tPFNGLVERTEXARRAYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6855 (
APIENTRYP
 
	tPFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6856 (
APIENTRYP
 
	tPFNGLVERTEXARRAYINDEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6857 (
APIENTRYP
 
	tPFNGLVERTEXARRAYNORMALOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6858 (
APIENTRYP
 
	tPFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6859 (
APIENTRYP
 
	tPFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6860 (
APIENTRYP
 
	tPFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6861 (
APIENTRYP
 
	tPFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6862 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6863 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6864 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

6865 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

6866 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

6867 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

6868 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6869 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, **
	t∑øm
);

6870 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINTEGERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6871 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYPOINTERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, **
	t∑øm
);

6872 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

6873 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

6874 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

6875 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6876 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizeùå
 
	toff£t
, GLsizeùå 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6877 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6878 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6879 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

6880 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6881 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6882 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6883 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6884 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6885 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6886 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6887 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6888 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6889 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6890 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6891 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6892 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6893 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6894 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6895 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6896 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6897 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

6898 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6899 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

6900 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6901 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6902 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

6903 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

6904 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6905 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6906 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

6907 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

6908 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6909 (
APIENTRYP
 
	tPFNGLTEXTUREPAGECOMMITMENTEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tcommô
);

6910 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, GLuöà
	tdivis‹
);

6911 #ifde‡
GL_GLEXT_PROTOTYPES


6912 
GLAPI
 
APIENTRY
 
glM©rixLﬂdfEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6913 
GLAPI
 
APIENTRY
 
glM©rixLﬂddEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6914 
GLAPI
 
APIENTRY
 
glM©rixMu…fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6915 
GLAPI
 
APIENTRY
 
glM©rixMu…dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6916 
GLAPI
 
APIENTRY
 
glM©rixLﬂdIdítôyEXT
 (
GLíum
 
mode
);

6917 
GLAPI
 
APIENTRY
 
glM©rixRŸ©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6918 
GLAPI
 
APIENTRY
 
glM©rixRŸ©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
™gÀ
, GLdoubÀ 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6919 
GLAPI
 
APIENTRY
 
glM©rixSˇÀfEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6920 
GLAPI
 
APIENTRY
 
glM©rixSˇÀdEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6921 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6922 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6923 
GLAPI
 
APIENTRY
 
glM©rixFru°umEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

6924 
GLAPI
 
APIENTRY
 
glM©rixOπhoEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

6925 
GLAPI
 
APIENTRY
 
glM©rixP›EXT
 (
GLíum
 
mode
);

6926 
GLAPI
 
APIENTRY
 
glM©rixPushEXT
 (
GLíum
 
mode
);

6927 
GLAPI
 
APIENTRY
 
glClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

6928 
GLAPI
 
APIENTRY
 
glPushClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

6929 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6930 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6931 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6932 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6933 
GLAPI
 
APIENTRY
 
glTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6934 
GLAPI
 
APIENTRY
 
glTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6935 
GLAPI
 
APIENTRY
 
glTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6936 
GLAPI
 
APIENTRY
 
glTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6937 
GLAPI
 
APIENTRY
 
glC›yTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6938 
GLAPI
 
APIENTRY
 
glC›yTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6939 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6940 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6941 
GLAPI
 
APIENTRY
 
glGëTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

6942 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6943 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6944 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6945 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

6946 
GLAPI
 
APIENTRY
 
glTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6947 
GLAPI
 
APIENTRY
 
glTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6948 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6949 
GLAPI
 
APIENTRY
 
glBödMu…iTextuªEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ãxtuª
);

6950 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dPoöãrEXT
 (
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6951 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6952 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6953 
GLAPI
 
APIENTRY
 
glMu…iTexEnviEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6954 
GLAPI
 
APIENTRY
 
glMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6955 
GLAPI
 
APIENTRY
 
glMu…iTexGídEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
);

6956 
GLAPI
 
APIENTRY
 
glMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

6957 
GLAPI
 
APIENTRY
 
glMu…iTexGífEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6958 
GLAPI
 
APIENTRY
 
glMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6959 
GLAPI
 
APIENTRY
 
glMu…iTexGíiEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6960 
GLAPI
 
APIENTRY
 
glMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6961 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6962 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6963 
GLAPI
 
APIENTRY
 
glGëMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6964 
GLAPI
 
APIENTRY
 
glGëMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6965 
GLAPI
 
APIENTRY
 
glGëMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6966 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîiEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6967 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6968 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6969 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6970 
GLAPI
 
APIENTRY
 
glMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6971 
GLAPI
 
APIENTRY
 
glMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6972 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6973 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6974 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6975 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6976 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6977 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6978 
GLAPI
 
APIENTRY
 
glGëMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

6979 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6980 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6981 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6982 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

6983 
GLAPI
 
APIENTRY
 
glMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6984 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6985 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6986 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6987 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6988 
GLAPI
 
APIENTRY
 
glGëFlﬂtIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

6989 
GLAPI
 
APIENTRY
 
glGëDoubÀIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

6990 
GLAPI
 
APIENTRY
 
glGëPoöãrIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, **
d©a
);

6991 
GLAPI
 
APIENTRY
 
glE«bÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6992 
GLAPI
 
APIENTRY
 
glDißbÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6993 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6994 
GLAPI
 
APIENTRY
 
glGëI¡egîIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

6995 
GLAPI
 
APIENTRY
 
glGëBoﬁónIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

6996 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6997 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6998 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6999 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7000 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7001 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7002 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
lod
, *
img
);

7003 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

7004 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

7005 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

7006 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7007 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7008 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

7009 
GLAPI
 
APIENTRY
 
glGëCom¥es£dMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
lod
, *
img
);

7010 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

7011 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

7012 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

7013 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

7014 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLíum
 
ußge
);

7015 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

7016 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

7017 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
);

7018 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîivEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7019 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrvEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, **
∑øms
);

7020 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

7021 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

7022 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

7023 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

7024 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

7025 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

7026 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

7027 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

7028 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

7029 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7030 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7031 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7032 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

7033 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7034 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7035 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7036 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

7037 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7038 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7039 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7040 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7041 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7042 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7043 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7044 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7045 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

7046 
GLAPI
 
APIENTRY
 
glTextuªBuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
);

7047 
GLAPI
 
APIENTRY
 
glMu…iTexBuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

7048 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7049 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° GLuöà*
∑øms
);

7050 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7051 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, GLuöà*
∑øms
);

7052 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7053 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

7054 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7055 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

7056 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

7057 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

7058 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

7059 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

7060 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7061 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7062 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7063 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

7064 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîs4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

7065 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4iEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

7066 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLöt
 *
∑øms
);

7067 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

7068 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

7069 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° GLuöà*
∑øms
);

7070 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

7071 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 *
∑øms
);

7072 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIuivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà*
∑øms
);

7073 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãiEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

7074 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãiEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

7075 
GLAPI
 
APIENTRY
 
glGëFlﬂti_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

7076 
GLAPI
 
APIENTRY
 
glGëDoubÀi_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

7077 
GLAPI
 
APIENTRY
 
glGëPoöãri_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, **
∑øms
);

7078 
GLAPI
 
APIENTRY
 
glNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° *
°rög
);

7079 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7080 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

7081 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

7082 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

7083 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîdvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 *
∑øms
);

7084 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîfvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 *
∑øms
);

7085 
GLAPI
 
APIENTRY
 
glGëNamedProgømivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7086 
GLAPI
 
APIENTRY
 
glGëNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, *
°rög
);

7087 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

7088 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîivEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7089 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7090 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7091 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètusEXT
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

7092 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª1DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

7093 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª2DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

7094 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª3DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

7095 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

7096 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7097 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠EXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
);

7098 
GLAPI
 
APIENTRY
 
glGíî©eMu…iTexMùm≠EXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
);

7099 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

7100 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rsEXT
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

7101 
GLAPI
 
APIENTRY
 
glFømebuf„rRódBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

7102 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7103 
GLAPI
 
APIENTRY
 
glNamedC›yBuf„rSubD©aEXT
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

7104 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

7105 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayîEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

7106 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªFa˚EXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

7107 
GLAPI
 
APIENTRY
 
glTextuªRídîbuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
ªndîbuf„r
);

7108 
GLAPI
 
APIENTRY
 
glMu…iTexRídîbuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

7109 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7110 
GLAPI
 
APIENTRY
 
glVîãxAºayCﬁ‹Off£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7111 
GLAPI
 
APIENTRY
 
glVîãxAºayEdgeFœgOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7112 
GLAPI
 
APIENTRY
 
glVîãxAºayIndexOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7113 
GLAPI
 
APIENTRY
 
glVîãxAºayN‹mÆOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7114 
GLAPI
 
APIENTRY
 
glVîãxAºayTexCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7115 
GLAPI
 
APIENTRY
 
glVîãxAºayMu…iTexCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7116 
GLAPI
 
APIENTRY
 
glVîãxAºayFogCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7117 
GLAPI
 
APIENTRY
 
glVîãxAºaySec⁄d¨yCﬁ‹Off£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7118 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7119 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7120 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
¨øy
);

7121 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
¨øy
);

7122 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayAâribEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

7123 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayAâribEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

7124 
GLAPI
 
APIENTRY
 
glGëVîãxAºayI¡egîvEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

7125 
GLAPI
 
APIENTRY
 
glGëVîãxAºayPoöãrvEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, **
∑øm
);

7126 
GLAPI
 
APIENTRY
 
glGëVîãxAºayI¡egîi_vEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

7127 
GLAPI
 
APIENTRY
 
glGëVîãxAºayPoöãri_vEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, **
∑øm
);

7128 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

7129 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

7130 
GLAPI
 
APIENTRY
 
glNamedBuf„rSt‹ageEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

7131 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

7132 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizeùå
 
off£t
, GLsizeùå 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

7133 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîiEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

7134 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

7135 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

7136 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

7137 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

7138 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7139 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7140 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7141 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7142 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

7143 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7144 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7145 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7146 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7147 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7148 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7149 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7150 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7151 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

7152 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™geEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

7153 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

7154 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7155 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

7156 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7157 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7158 
GLAPI
 
APIENTRY
 
glVîãxAºayBödVîãxBuf„rEXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

7159 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

7160 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

7161 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

7162 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribBödögEXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

7163 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBödögDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

7164 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

7165 
GLAPI
 
APIENTRY
 
glTextuªPageCommômítEXT
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
commô
);

7166 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, GLuöà
divis‹
);

7170 #i‚de‡
GL_EXT_døw_buf„rs2


7171 
	#GL_EXT_døw_buf„rs2
 1

	)

7172 (
APIENTRYP
 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

7173 #ifde‡
GL_GLEXT_PROTOTYPES


7174 
GLAPI
 
APIENTRY
 
glCﬁ‹MaskIndexedEXT
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

7178 #i‚de‡
GL_EXT_døw_ö°™˚d


7179 
	#GL_EXT_døw_ö°™˚d
 1

	)

7180 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

7181 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

7182 #ifde‡
GL_GLEXT_PROTOTYPES


7183 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dEXT
 (
GLíum
 
mode
, 
GLöt
 
°¨t
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

7184 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dEXT
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

7188 #i‚de‡
GL_EXT_døw_ønge_ñemíts


7189 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

7190 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

7191 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

7192 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

7193 #ifde‡
GL_GLEXT_PROTOTYPES


7194 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

7198 #i‚de‡
GL_EXT_fog_co‹d


7199 
	#GL_EXT_fog_co‹d
 1

	)

7200 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

7201 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

7202 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

7203 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

7204 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

7205 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

7206 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

7207 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

7208 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

7209 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

7210 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

7211 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

7212 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7213 #ifde‡
GL_GLEXT_PROTOTYPES


7214 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
 
co‹d
);

7215 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *
co‹d
);

7216 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
 
co‹d
);

7217 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *
co‹d
);

7218 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7222 #i‚de‡
GL_EXT_‰amebuf„r_blô


7223 
	#GL_EXT_‰amebuf„r_blô
 1

	)

7224 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

7225 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

7226 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

7227 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

7228 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

7229 #ifde‡
GL_GLEXT_PROTOTYPES


7230 
GLAPI
 
APIENTRY
 
glBlôFømebuf„rEXT
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

7234 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


7235 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

7236 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

7237 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

7238 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

7239 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

7240 #ifde‡
GL_GLEXT_PROTOTYPES


7241 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

7245 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


7246 
	#GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 1

	)

7247 
	#GL_SCALED_RESOLVE_FASTEST_EXT
 0x90BA

	)

7248 
	#GL_SCALED_RESOLVE_NICEST_EXT
 0x90BB

	)

7251 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


7252 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

7253 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

7254 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

7255 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

7256 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

7257 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

7258 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

7259 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

7260 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

7261 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

7262 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

7263 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

7264 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

7265 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

7266 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

7267 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

7268 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

7269 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

7270 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

7271 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

7272 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

7273 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

7274 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

7275 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

7276 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

7277 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

7278 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

7279 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

7280 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

7281 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

7282 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

7283 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

7284 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

7285 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

7286 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

7287 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

7288 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

7289 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

7290 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

7291 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

7292 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

7293 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

7294 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

7295 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

7296 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

7297 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

7298 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

7299 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

7300 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

7301 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

7302 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

7303 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

7304 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

7305 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

7306 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

7307 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

7308 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7309 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7310 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

7311 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

7312 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

7313 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

7314 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7315 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7316 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

7317 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

7318 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

7319 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7320 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7321 #ifde‡
GL_GLEXT_PROTOTYPES


7322 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
 
ªndîbuf„r
);

7323 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

7324 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

7325 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

7326 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

7327 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7328 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
 
‰amebuf„r
);

7329 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

7330 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

7331 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

7332 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLíum 
èrgë
);

7333 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7334 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

7335 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

7336 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

7337 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7338 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
 
èrgë
);

7342 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


7343 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

7344 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

7345 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

7348 #i‚de‡
GL_EXT_geomëry_shadî4


7349 
	#GL_EXT_geomëry_shadî4
 1

	)

7350 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

7351 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

7352 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

7353 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

7354 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

7355 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

7356 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

7357 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

7358 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

7359 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

7360 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

7361 
	#GL_LINES_ADJACENCY_EXT
 0x000A

	)

7362 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0x000B

	)

7363 
	#GL_TRIANGLES_ADJACENCY_EXT
 0x000C

	)

7364 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0x000D

	)

7365 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

7366 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

7367 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

7368 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

7369 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

7370 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

7371 #ifde‡
GL_GLEXT_PROTOTYPES


7372 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

7376 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


7377 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

7378 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7379 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7380 #ifde‡
GL_GLEXT_PROTOTYPES


7381 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

7382 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

7386 #i‚de‡
GL_EXT_gpu_shadî4


7387 
	#GL_EXT_gpu_shadî4
 1

	)

7388 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
 0x88FD

	)

7389 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

7390 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

7391 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

7392 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

7393 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

7394 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

7395 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

7396 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

7397 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

7398 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

7399 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

7400 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

7401 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

7402 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

7403 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

7404 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

7405 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

7406 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

7407 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

7408 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

7409 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

7410 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

7411 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

7412 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

7413 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

7414 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_EXT
 0x8904

	)

7415 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_EXT
 0x8905

	)

7416 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

7417 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

7418 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

7419 (
APIENTRYP
 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

7420 (
APIENTRYP
 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

7421 (
APIENTRYP
 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

7422 (
APIENTRYP
 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

7423 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7424 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7425 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7426 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

7427 #ifde‡
GL_GLEXT_PROTOTYPES


7428 
GLAPI
 
APIENTRY
 
glGëUnif‹muivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

7429 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

7430 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

7431 
GLAPI
 
APIENTRY
 
glUnif‹m1uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

7432 
GLAPI
 
APIENTRY
 
glUnif‹m2uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

7433 
GLAPI
 
APIENTRY
 
glUnif‹m3uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

7434 
GLAPI
 
APIENTRY
 
glUnif‹m4uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

7435 
GLAPI
 
APIENTRY
 
glUnif‹m1uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7436 
GLAPI
 
APIENTRY
 
glUnif‹m2uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7437 
GLAPI
 
APIENTRY
 
glUnif‹m3uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7438 
GLAPI
 
APIENTRY
 
glUnif‹m4uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

7442 #i‚de‡
GL_EXT_hi°ogøm


7443 
	#GL_EXT_hi°ogøm
 1

	)

7444 
	#GL_HISTOGRAM_EXT
 0x8024

	)

7445 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

7446 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

7447 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

7448 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

7449 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

7450 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

7451 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

7452 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

7453 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

7454 
	#GL_MINMAX_EXT
 0x802E

	)

7455 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

7456 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

7457 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

7458 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

7459 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7460 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7461 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

7462 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7463 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7464 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

7465 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

7466 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7467 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

7468 #ifde‡
GL_GLEXT_PROTOTYPES


7469 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

7470 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7471 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7472 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

7473 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7474 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7475 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

7476 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

7477 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
 
èrgë
);

7478 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
 
èrgë
);

7482 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


7483 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

7484 
	#GL_IUI_V2F_EXT
 0x81AD

	)

7485 
	#GL_IUI_V3F_EXT
 0x81AE

	)

7486 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

7487 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

7488 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

7489 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

7490 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

7491 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

7494 #i‚de‡
GL_EXT_ödex_func


7495 
	#GL_EXT_ödex_func
 1

	)

7496 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

7497 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

7498 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

7499 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

7500 #ifde‡
GL_GLEXT_PROTOTYPES


7501 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

7505 #i‚de‡
GL_EXT_ödex_m©îül


7506 
	#GL_EXT_ödex_m©îül
 1

	)

7507 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

7508 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

7509 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

7510 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

7511 #ifde‡
GL_GLEXT_PROTOTYPES


7512 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

7516 #i‚de‡
GL_EXT_ödex_ãxtuª


7517 
	#GL_EXT_ödex_ãxtuª
 1

	)

7520 #i‚de‡
GL_EXT_light_ãxtuª


7521 
	#GL_EXT_light_ãxtuª
 1

	)

7522 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

7523 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

7524 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

7525 
	#GL_ATTENUATION_EXT
 0x834D

	)

7526 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

7527 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

7528 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

7529 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

7530 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

7531 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

7532 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

7533 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

7534 #ifde‡
GL_GLEXT_PROTOTYPES


7535 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
 
mode
);

7536 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
 
≤ame
);

7537 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

7541 #i‚de‡
GL_EXT_misc_©åibuã


7542 
	#GL_EXT_misc_©åibuã
 1

	)

7545 #i‚de‡
GL_EXT_mu…i_døw_¨øys


7546 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

7547 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

7548 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	t¥imcou¡
);

7549 #ifde‡
GL_GLEXT_PROTOTYPES


7550 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

7551 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
¥imcou¡
);

7555 #i‚de‡
GL_EXT_mu…ißm∂e


7556 
	#GL_EXT_mu…ißm∂e
 1

	)

7557 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

7558 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

7559 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

7560 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

7561 
	#GL_1PASS_EXT
 0x80A1

	)

7562 
	#GL_2PASS_0_EXT
 0x80A2

	)

7563 
	#GL_2PASS_1_EXT
 0x80A3

	)

7564 
	#GL_4PASS_0_EXT
 0x80A4

	)

7565 
	#GL_4PASS_1_EXT
 0x80A5

	)

7566 
	#GL_4PASS_2_EXT
 0x80A6

	)

7567 
	#GL_4PASS_3_EXT
 0x80A7

	)

7568 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

7569 
	#GL_SAMPLES_EXT
 0x80A9

	)

7570 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

7571 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

7572 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

7573 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

7574 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

7575 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

7576 #ifde‡
GL_GLEXT_PROTOTYPES


7577 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

7578 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
 
∑âîn
);

7582 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


7583 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

7584 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

7585 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

7586 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

7587 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

7590 #i‚de‡
GL_EXT_∑cked_Êﬂt


7591 
	#GL_EXT_∑cked_Êﬂt
 1

	)

7592 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

7593 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

7594 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

7597 #i‚de‡
GL_EXT_∑cked_pixñs


7598 
	#GL_EXT_∑cked_pixñs
 1

	)

7599 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

7600 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

7601 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

7602 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

7603 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

7606 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


7607 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

7608 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

7609 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

7610 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

7611 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

7612 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

7613 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

7614 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

7615 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

7616 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	td©a
);

7617 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7618 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7619 #ifde‡
GL_GLEXT_PROTOTYPES


7620 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

7621 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
d©a
);

7622 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7623 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7627 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


7628 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

7629 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

7630 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

7631 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

7632 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

7635 #i‚de‡
GL_EXT_pixñ_å™sf‹m


7636 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

7637 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

7638 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

7639 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

7640 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

7641 
	#GL_CUBIC_EXT
 0x8334

	)

7642 
	#GL_AVERAGE_EXT
 0x8335

	)

7643 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

7644 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

7645 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

7646 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7647 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7648 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

7649 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7650 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7651 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7652 #ifde‡
GL_GLEXT_PROTOTYPES


7653 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

7654 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

7655 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7656 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7657 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7658 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7662 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


7663 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

7666 #i‚de‡
GL_EXT_poöt_∑ømëîs


7667 
	#GL_EXT_poöt_∑ømëîs
 1

	)

7668 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

7669 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

7670 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

7671 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

7672 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7673 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7674 #ifde‡
GL_GLEXT_PROTOTYPES


7675 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

7676 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7680 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


7681 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

7682 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

7683 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

7684 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

7685 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

7686 #ifde‡
GL_GLEXT_PROTOTYPES


7687 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
büs
);

7691 #i‚de‡
GL_EXT_pﬁyg⁄_off£t_˛amp


7692 
	#GL_EXT_pﬁyg⁄_off£t_˛amp
 1

	)

7693 
	#GL_POLYGON_OFFSET_CLAMP_EXT
 0x8E1B

	)

7694 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETCLAMPEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
, GLÊﬂà
	t˛amp
);

7695 #ifde‡
GL_GLEXT_PROTOTYPES


7696 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tCœmpEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
, GLÊﬂà
˛amp
);

7700 #i‚de‡
GL_EXT_po°_dïth_covîage


7701 
	#GL_EXT_po°_dïth_covîage
 1

	)

7704 #i‚de‡
GL_EXT_¥ovokög_vîãx


7705 
	#GL_EXT_¥ovokög_vîãx
 1

	)

7706 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
 0x8E4C

	)

7707 
	#GL_FIRST_VERTEX_CONVENTION_EXT
 0x8E4D

	)

7708 
	#GL_LAST_VERTEX_CONVENTION_EXT
 0x8E4E

	)

7709 
	#GL_PROVOKING_VERTEX_EXT
 0x8E4F

	)

7710 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXEXTPROC
Ë(
	tGLíum
 
	tmode
);

7711 #ifde‡
GL_GLEXT_PROTOTYPES


7712 
GLAPI
 
APIENTRY
 
glProvokögVîãxEXT
 (
GLíum
 
mode
);

7716 #i‚de‡
GL_EXT_ø°î_mu…ißm∂e


7717 
	#GL_EXT_ø°î_mu…ißm∂e
 1

	)

7718 
	#GL_RASTER_MULTISAMPLE_EXT
 0x9327

	)

7719 
	#GL_RASTER_SAMPLES_EXT
 0x9328

	)

7720 
	#GL_MAX_RASTER_SAMPLES_EXT
 0x9329

	)

7721 
	#GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT
 0x932A

	)

7722 
	#GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT
 0x932B

	)

7723 
	#GL_EFFECTIVE_RASTER_SAMPLES_EXT
 0x932C

	)

7724 (
APIENTRYP
 
	tPFNGLRASTERSAMPLESEXTPROC
Ë(
	tGLuöt
 
	tßm∂es
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

7725 #ifde‡
GL_GLEXT_PROTOTYPES


7726 
GLAPI
 
APIENTRY
 
glRa°îSam∂esEXT
 (
GLuöt
 
ßm∂es
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

7730 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


7731 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

7732 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

7735 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


7736 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

7737 
	#GL_COLOR_SUM_EXT
 0x8458

	)

7738 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

7739 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

7740 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

7741 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

7742 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

7743 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

7744 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

7745 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

7746 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

7747 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7748 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

7749 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7750 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

7751 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7752 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

7753 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7754 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

7755 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

7756 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

7757 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

7758 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

7759 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

7760 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7761 #ifde‡
GL_GLEXT_PROTOTYPES


7762 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

7763 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *
v
);

7764 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

7765 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

7766 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

7767 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

7768 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

7769 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *
v
);

7770 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

7771 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

7772 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

7773 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *
v
);

7774 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

7775 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *
v
);

7776 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

7777 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *
v
);

7778 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7782 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


7783 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

7784 
	#GL_ACTIVE_PROGRAM_EXT
 0x8B8D

	)

7785 (
APIENTRYP
 
	tPFNGLUSESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	t¥ogøm
);

7786 (
APIENTRYP
 
	tPFNGLACTIVEPROGRAMEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

7787 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLch¨
 *
	t°rög
);

7788 #ifde‡
GL_GLEXT_PROTOTYPES


7789 
GLAPI
 
APIENTRY
 
glU£ShadîProgømEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
¥ogøm
);

7790 
GLAPI
 
APIENTRY
 
glA˘iveProgømEXT
 (
GLuöt
 
¥ogøm
);

7791 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømEXT
 (
GLíum
 
ty≥
, c⁄° 
GLch¨
 *
°rög
);

7795 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


7796 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

7797 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

7798 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

7799 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

7802 #i‚de‡
GL_EXT_shadî_image_lﬂd_f‹m©ãd


7803 
	#GL_EXT_shadî_image_lﬂd_f‹m©ãd
 1

	)

7806 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


7807 
	#GL_EXT_shadî_image_lﬂd_°‹e
 1

	)

7808 
	#GL_MAX_IMAGE_UNITS_EXT
 0x8F38

	)

7809 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
 0x8F39

	)

7810 
	#GL_IMAGE_BINDING_NAME_EXT
 0x8F3A

	)

7811 
	#GL_IMAGE_BINDING_LEVEL_EXT
 0x8F3B

	)

7812 
	#GL_IMAGE_BINDING_LAYERED_EXT
 0x8F3C

	)

7813 
	#GL_IMAGE_BINDING_LAYER_EXT
 0x8F3D

	)

7814 
	#GL_IMAGE_BINDING_ACCESS_EXT
 0x8F3E

	)

7815 
	#GL_IMAGE_1D_EXT
 0x904C

	)

7816 
	#GL_IMAGE_2D_EXT
 0x904D

	)

7817 
	#GL_IMAGE_3D_EXT
 0x904E

	)

7818 
	#GL_IMAGE_2D_RECT_EXT
 0x904F

	)

7819 
	#GL_IMAGE_CUBE_EXT
 0x9050

	)

7820 
	#GL_IMAGE_BUFFER_EXT
 0x9051

	)

7821 
	#GL_IMAGE_1D_ARRAY_EXT
 0x9052

	)

7822 
	#GL_IMAGE_2D_ARRAY_EXT
 0x9053

	)

7823 
	#GL_IMAGE_CUBE_MAP_ARRAY_EXT
 0x9054

	)

7824 
	#GL_IMAGE_2D_MULTISAMPLE_EXT
 0x9055

	)

7825 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9056

	)

7826 
	#GL_INT_IMAGE_1D_EXT
 0x9057

	)

7827 
	#GL_INT_IMAGE_2D_EXT
 0x9058

	)

7828 
	#GL_INT_IMAGE_3D_EXT
 0x9059

	)

7829 
	#GL_INT_IMAGE_2D_RECT_EXT
 0x905A

	)

7830 
	#GL_INT_IMAGE_CUBE_EXT
 0x905B

	)

7831 
	#GL_INT_IMAGE_BUFFER_EXT
 0x905C

	)

7832 
	#GL_INT_IMAGE_1D_ARRAY_EXT
 0x905D

	)

7833 
	#GL_INT_IMAGE_2D_ARRAY_EXT
 0x905E

	)

7834 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x905F

	)

7835 
	#GL_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x9060

	)

7836 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9061

	)

7837 
	#GL_UNSIGNED_INT_IMAGE_1D_EXT
 0x9062

	)

7838 
	#GL_UNSIGNED_INT_IMAGE_2D_EXT
 0x9063

	)

7839 
	#GL_UNSIGNED_INT_IMAGE_3D_EXT
 0x9064

	)

7840 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
 0x9065

	)

7841 
	#GL_UNSIGNED_INT_IMAGE_CUBE_EXT
 0x9066

	)

7842 
	#GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
 0x9067

	)

7843 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
 0x9068

	)

7844 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
 0x9069

	)

7845 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x906A

	)

7846 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x906B

	)

7847 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x906C

	)

7848 
	#GL_MAX_IMAGE_SAMPLES_EXT
 0x906D

	)

7849 
	#GL_IMAGE_BINDING_FORMAT_EXT
 0x906E

	)

7850 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
 0x00000001

	)

7851 
	#GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
 0x00000002

	)

7852 
	#GL_UNIFORM_BARRIER_BIT_EXT
 0x00000004

	)

7853 
	#GL_TEXTURE_FETCH_BARRIER_BIT_EXT
 0x00000008

	)

7854 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
 0x00000020

	)

7855 
	#GL_COMMAND_BARRIER_BIT_EXT
 0x00000040

	)

7856 
	#GL_PIXEL_BUFFER_BARRIER_BIT_EXT
 0x00000080

	)

7857 
	#GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
 0x00000100

	)

7858 
	#GL_BUFFER_UPDATE_BARRIER_BIT_EXT
 0x00000200

	)

7859 
	#GL_FRAMEBUFFER_BARRIER_BIT_EXT
 0x00000400

	)

7860 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
 0x00000800

	)

7861 
	#GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
 0x00001000

	)

7862 
	#GL_ALL_BARRIER_BITS_EXT
 0xFFFFFFFF

	)

7863 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLöà
	tf‹m©
);

7864 (
APIENTRYP
 
	tPFNGLMEMORYBARRIEREXTPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

7865 #ifde‡
GL_GLEXT_PROTOTYPES


7866 
GLAPI
 
APIENTRY
 
glBödImageTextuªEXT
 (
GLuöt
 
ödex
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLöà
f‹m©
);

7867 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrEXT
 (
GLbôfõld
 
b¨rõrs
);

7871 #i‚de‡
GL_EXT_shadî_öãgî_mix


7872 
	#GL_EXT_shadî_öãgî_mix
 1

	)

7875 #i‚de‡
GL_EXT_shadow_funcs


7876 
	#GL_EXT_shadow_funcs
 1

	)

7879 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


7880 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

7881 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

7884 #i‚de‡
GL_EXT_•¨£_ãxtuª2


7885 
	#GL_EXT_•¨£_ãxtuª2
 1

	)

7888 #i‚de‡
GL_EXT_°ícû_˛ór_èg


7889 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

7890 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

7891 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

7892 (
APIENTRYP
 
	tPFNGLSTENCILCLEARTAGEXTPROC
Ë(
	tGLsizei
 
	t°ícûTagBôs
, 
	tGLuöt
 
	t°ícûCÀ¨Tag
);

7893 #ifde‡
GL_GLEXT_PROTOTYPES


7894 
GLAPI
 
APIENTRY
 
glSãncûCÀ¨TagEXT
 (
GLsizei
 
°ícûTagBôs
, 
GLuöt
 
°ícûCÀ¨Tag
);

7898 #i‚de‡
GL_EXT_°ícû_two_side


7899 
	#GL_EXT_°ícû_two_side
 1

	)

7900 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

7901 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

7902 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

7903 #ifde‡
GL_GLEXT_PROTOTYPES


7904 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
 
Á˚
);

7908 #i‚de‡
GL_EXT_°ícû_wøp


7909 
	#GL_EXT_°ícû_wøp
 1

	)

7910 
	#GL_INCR_WRAP_EXT
 0x8507

	)

7911 
	#GL_DECR_WRAP_EXT
 0x8508

	)

7914 #i‚de‡
GL_EXT_subãxtuª


7915 
	#GL_EXT_subãxtuª
 1

	)

7916 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7917 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7918 #ifde‡
GL_GLEXT_PROTOTYPES


7919 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7920 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7924 #i‚de‡
GL_EXT_ãxtuª


7925 
	#GL_EXT_ãxtuª
 1

	)

7926 
	#GL_ALPHA4_EXT
 0x803B

	)

7927 
	#GL_ALPHA8_EXT
 0x803C

	)

7928 
	#GL_ALPHA12_EXT
 0x803D

	)

7929 
	#GL_ALPHA16_EXT
 0x803E

	)

7930 
	#GL_LUMINANCE4_EXT
 0x803F

	)

7931 
	#GL_LUMINANCE8_EXT
 0x8040

	)

7932 
	#GL_LUMINANCE12_EXT
 0x8041

	)

7933 
	#GL_LUMINANCE16_EXT
 0x8042

	)

7934 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

7935 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

7936 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

7937 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

7938 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

7939 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

7940 
	#GL_INTENSITY_EXT
 0x8049

	)

7941 
	#GL_INTENSITY4_EXT
 0x804A

	)

7942 
	#GL_INTENSITY8_EXT
 0x804B

	)

7943 
	#GL_INTENSITY12_EXT
 0x804C

	)

7944 
	#GL_INTENSITY16_EXT
 0x804D

	)

7945 
	#GL_RGB2_EXT
 0x804E

	)

7946 
	#GL_RGB4_EXT
 0x804F

	)

7947 
	#GL_RGB5_EXT
 0x8050

	)

7948 
	#GL_RGB8_EXT
 0x8051

	)

7949 
	#GL_RGB10_EXT
 0x8052

	)

7950 
	#GL_RGB12_EXT
 0x8053

	)

7951 
	#GL_RGB16_EXT
 0x8054

	)

7952 
	#GL_RGBA2_EXT
 0x8055

	)

7953 
	#GL_RGBA4_EXT
 0x8056

	)

7954 
	#GL_RGB5_A1_EXT
 0x8057

	)

7955 
	#GL_RGBA8_EXT
 0x8058

	)

7956 
	#GL_RGB10_A2_EXT
 0x8059

	)

7957 
	#GL_RGBA12_EXT
 0x805A

	)

7958 
	#GL_RGBA16_EXT
 0x805B

	)

7959 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

7960 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

7961 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

7962 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

7963 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

7964 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

7965 
	#GL_REPLACE_EXT
 0x8062

	)

7966 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

7967 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

7968 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

7971 #i‚de‡
GL_EXT_ãxtuª3D


7972 
	#GL_EXT_ãxtuª3D
 1

	)

7973 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

7974 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

7975 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

7976 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

7977 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

7978 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

7979 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

7980 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

7981 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

7982 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7983 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7984 #ifde‡
GL_GLEXT_PROTOTYPES


7985 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7986 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7990 #i‚de‡
GL_EXT_ãxtuª_¨øy


7991 
	#GL_EXT_ãxtuª_¨øy
 1

	)

7992 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

7993 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

7994 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

7995 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

7996 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

7997 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

7998 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

7999 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

8000 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

8001 #ifde‡
GL_GLEXT_PROTOTYPES


8002 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

8006 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


8007 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

8008 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

8009 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

8010 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

8011 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

8012 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

8013 (
APIENTRYP
 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

8014 #ifde‡
GL_GLEXT_PROTOTYPES


8015 
GLAPI
 
APIENTRY
 
glTexBuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

8019 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


8020 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

8021 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

8022 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

8023 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

8024 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

8027 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


8028 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

8029 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

8030 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

8031 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

8032 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

8035 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


8036 
	#GL_EXT_ãxtuª_com¥essi⁄_s3tc
 1

	)

8037 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

8038 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

8039 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

8040 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

8043 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


8044 
	#GL_EXT_ãxtuª_cube_m≠
 1

	)

8045 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

8046 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

8047 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

8048 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

8049 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

8050 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

8051 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

8052 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

8053 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

8054 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

8055 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

8056 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

8059 #i‚de‡
GL_EXT_ãxtuª_ív_add


8060 
	#GL_EXT_ãxtuª_ív_add
 1

	)

8063 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


8064 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

8065 
	#GL_COMBINE_EXT
 0x8570

	)

8066 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

8067 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

8068 
	#GL_RGB_SCALE_EXT
 0x8573

	)

8069 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

8070 
	#GL_INTERPOLATE_EXT
 0x8575

	)

8071 
	#GL_CONSTANT_EXT
 0x8576

	)

8072 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

8073 
	#GL_PREVIOUS_EXT
 0x8578

	)

8074 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

8075 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

8076 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

8077 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

8078 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

8079 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

8080 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

8081 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

8082 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

8083 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

8084 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

8085 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

8088 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


8089 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

8090 
	#GL_DOT3_RGB_EXT
 0x8740

	)

8091 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

8094 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


8095 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

8096 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

8097 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

8100 #i‚de‡
GL_EXT_ãxtuª_fûãr_mömax


8101 
	#GL_EXT_ãxtuª_fûãr_mömax
 1

	)

8104 #i‚de‡
GL_EXT_ãxtuª_öãgî


8105 
	#GL_EXT_ãxtuª_öãgî
 1

	)

8106 
	#GL_RGBA32UI_EXT
 0x8D70

	)

8107 
	#GL_RGB32UI_EXT
 0x8D71

	)

8108 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

8109 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

8110 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

8111 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

8112 
	#GL_RGBA16UI_EXT
 0x8D76

	)

8113 
	#GL_RGB16UI_EXT
 0x8D77

	)

8114 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

8115 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

8116 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

8117 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

8118 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

8119 
	#GL_RGB8UI_EXT
 0x8D7D

	)

8120 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

8121 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

8122 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

8123 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

8124 
	#GL_RGBA32I_EXT
 0x8D82

	)

8125 
	#GL_RGB32I_EXT
 0x8D83

	)

8126 
	#GL_ALPHA32I_EXT
 0x8D84

	)

8127 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

8128 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

8129 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

8130 
	#GL_RGBA16I_EXT
 0x8D88

	)

8131 
	#GL_RGB16I_EXT
 0x8D89

	)

8132 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

8133 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

8134 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

8135 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

8136 
	#GL_RGBA8I_EXT
 0x8D8E

	)

8137 
	#GL_RGB8I_EXT
 0x8D8F

	)

8138 
	#GL_ALPHA8I_EXT
 0x8D90

	)

8139 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

8140 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

8141 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

8142 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

8143 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

8144 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

8145 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

8146 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

8147 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

8148 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

8149 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

8150 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

8151 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

8152 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

8153 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8154 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

8155 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8156 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

8157 (
APIENTRYP
 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

8158 (
APIENTRYP
 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

8159 #ifde‡
GL_GLEXT_PROTOTYPES


8160 
GLAPI
 
APIENTRY
 
glTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8161 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

8162 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8163 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

8164 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IiEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
, GLöà
Æpha
);

8165 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IuiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
, GLuöà
Æpha
);

8169 #i‚de‡
GL_EXT_ãxtuª_lod_büs


8170 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

8171 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

8172 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

8173 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

8176 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


8177 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

8178 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

8179 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

8180 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

8183 #i‚de‡
GL_EXT_ãxtuª_obje˘


8184 
	#GL_EXT_ãxtuª_obje˘
 1

	)

8185 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

8186 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

8187 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

8188 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

8189 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

8190 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

8191 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

8192 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

8193 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

8194 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

8195 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

8196 #ifde‡
GL_GLEXT_PROTOTYPES


8197 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, GLboﬁó¿*
ªsidí˚s
);

8198 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

8199 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

8200 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

8201 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
 
ãxtuª
);

8202 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GL˛ampf
 *
¥i‹ôõs
);

8206 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


8207 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

8208 
	#GL_PERTURB_EXT
 0x85AE

	)

8209 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

8210 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

8211 #ifde‡
GL_GLEXT_PROTOTYPES


8212 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
 
mode
);

8216 #i‚de‡
GL_EXT_ãxtuª_sRGB


8217 
	#GL_EXT_ãxtuª_sRGB
 1

	)

8218 
	#GL_SRGB_EXT
 0x8C40

	)

8219 
	#GL_SRGB8_EXT
 0x8C41

	)

8220 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

8221 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

8222 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

8223 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

8224 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

8225 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

8226 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

8227 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

8228 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

8229 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

8230 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

8231 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

8232 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

8233 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

8236 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


8237 
	#GL_EXT_ãxtuª_sRGB_decode
 1

	)

8238 
	#GL_TEXTURE_SRGB_DECODE_EXT
 0x8A48

	)

8239 
	#GL_DECODE_EXT
 0x8A49

	)

8240 
	#GL_SKIP_DECODE_EXT
 0x8A4A

	)

8243 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


8244 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

8245 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

8246 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

8247 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

8250 #i‚de‡
GL_EXT_ãxtuª_¢‹m


8251 
	#GL_EXT_ãxtuª_¢‹m
 1

	)

8252 
	#GL_ALPHA_SNORM
 0x9010

	)

8253 
	#GL_LUMINANCE_SNORM
 0x9011

	)

8254 
	#GL_LUMINANCE_ALPHA_SNORM
 0x9012

	)

8255 
	#GL_INTENSITY_SNORM
 0x9013

	)

8256 
	#GL_ALPHA8_SNORM
 0x9014

	)

8257 
	#GL_LUMINANCE8_SNORM
 0x9015

	)

8258 
	#GL_LUMINANCE8_ALPHA8_SNORM
 0x9016

	)

8259 
	#GL_INTENSITY8_SNORM
 0x9017

	)

8260 
	#GL_ALPHA16_SNORM
 0x9018

	)

8261 
	#GL_LUMINANCE16_SNORM
 0x9019

	)

8262 
	#GL_LUMINANCE16_ALPHA16_SNORM
 0x901A

	)

8263 
	#GL_INTENSITY16_SNORM
 0x901B

	)

8264 
	#GL_RED_SNORM
 0x8F90

	)

8265 
	#GL_RG_SNORM
 0x8F91

	)

8266 
	#GL_RGB_SNORM
 0x8F92

	)

8267 
	#GL_RGBA_SNORM
 0x8F93

	)

8270 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


8271 
	#GL_EXT_ãxtuª_swizzÀ
 1

	)

8272 
	#GL_TEXTURE_SWIZZLE_R_EXT
 0x8E42

	)

8273 
	#GL_TEXTURE_SWIZZLE_G_EXT
 0x8E43

	)

8274 
	#GL_TEXTURE_SWIZZLE_B_EXT
 0x8E44

	)

8275 
	#GL_TEXTURE_SWIZZLE_A_EXT
 0x8E45

	)

8276 
	#GL_TEXTURE_SWIZZLE_RGBA_EXT
 0x8E46

	)

8279 #i‚de‡
GL_EXT_timî_quîy


8280 
	#GL_EXT_timî_quîy
 1

	)

8281 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

8282 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

8283 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

8284 #ifde‡
GL_GLEXT_PROTOTYPES


8285 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

8286 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

8290 #i‚de‡
GL_EXT_å™sf‹m_„edback


8291 
	#GL_EXT_å™sf‹m_„edback
 1

	)

8292 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

8293 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

8294 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

8295 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

8296 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

8297 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

8298 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

8299 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

8300 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

8301 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

8302 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

8303 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

8304 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

8305 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

8306 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

8307 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKEXTPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

8308 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKEXTPROC
) ();

8309 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8310 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

8311 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

8312 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

8313 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

8314 #ifde‡
GL_GLEXT_PROTOTYPES


8315 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackEXT
 (
GLíum
 
¥imôiveMode
);

8316 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackEXT
 ();

8317 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

8318 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

8319 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£EXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

8320 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsEXT
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

8321 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögEXT
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

8325 #i‚de‡
GL_EXT_vîãx_¨øy


8326 
	#GL_EXT_vîãx_¨øy
 1

	)

8327 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

8328 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

8329 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

8330 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

8331 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

8332 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

8333 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

8334 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

8335 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

8336 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

8337 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

8338 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

8339 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

8340 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

8341 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

8342 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

8343 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

8344 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

8345 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

8346 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

8347 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

8348 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

8349 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

8350 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

8351 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

8352 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

8353 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

8354 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

8355 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

8356 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

8357 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

8358 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

8359 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

8360 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8361 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

8362 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

8363 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, **
	t∑øms
);

8364 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8365 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8366 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8367 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

8368 #ifde‡
GL_GLEXT_PROTOTYPES


8369 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
 
i
);

8370 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8371 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

8372 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLboﬁón
 *
poöãr
);

8373 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
 
≤ame
, **
∑øms
);

8374 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8375 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8376 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8377 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

8381 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


8382 
	#GL_EXT_vîãx_¨øy_bgø
 1

	)

8385 #i‚de‡
GL_EXT_vîãx_©åib_64bô


8386 
	#GL_EXT_vîãx_©åib_64bô
 1

	)

8387 
	#GL_DOUBLE_VEC2_EXT
 0x8FFC

	)

8388 
	#GL_DOUBLE_VEC3_EXT
 0x8FFD

	)

8389 
	#GL_DOUBLE_VEC4_EXT
 0x8FFE

	)

8390 
	#GL_DOUBLE_MAT2_EXT
 0x8F46

	)

8391 
	#GL_DOUBLE_MAT3_EXT
 0x8F47

	)

8392 
	#GL_DOUBLE_MAT4_EXT
 0x8F48

	)

8393 
	#GL_DOUBLE_MAT2x3_EXT
 0x8F49

	)

8394 
	#GL_DOUBLE_MAT2x4_EXT
 0x8F4A

	)

8395 
	#GL_DOUBLE_MAT3x2_EXT
 0x8F4B

	)

8396 
	#GL_DOUBLE_MAT3x4_EXT
 0x8F4C

	)

8397 
	#GL_DOUBLE_MAT4x2_EXT
 0x8F4D

	)

8398 
	#GL_DOUBLE_MAT4x3_EXT
 0x8F4E

	)

8399 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

8400 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8401 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8402 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8403 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8404 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8405 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8406 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8407 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

8408 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

8409 #ifde‡
GL_GLEXT_PROTOTYPES


8410 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

8411 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8412 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8413 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8414 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8415 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8416 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8417 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

8418 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

8419 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdvEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

8423 #i‚de‡
GL_EXT_vîãx_shadî


8424 
	#GL_EXT_vîãx_shadî
 1

	)

8425 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

8426 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

8427 
	#GL_OP_INDEX_EXT
 0x8782

	)

8428 
	#GL_OP_NEGATE_EXT
 0x8783

	)

8429 
	#GL_OP_DOT3_EXT
 0x8784

	)

8430 
	#GL_OP_DOT4_EXT
 0x8785

	)

8431 
	#GL_OP_MUL_EXT
 0x8786

	)

8432 
	#GL_OP_ADD_EXT
 0x8787

	)

8433 
	#GL_OP_MADD_EXT
 0x8788

	)

8434 
	#GL_OP_FRAC_EXT
 0x8789

	)

8435 
	#GL_OP_MAX_EXT
 0x878A

	)

8436 
	#GL_OP_MIN_EXT
 0x878B

	)

8437 
	#GL_OP_SET_GE_EXT
 0x878C

	)

8438 
	#GL_OP_SET_LT_EXT
 0x878D

	)

8439 
	#GL_OP_CLAMP_EXT
 0x878E

	)

8440 
	#GL_OP_FLOOR_EXT
 0x878F

	)

8441 
	#GL_OP_ROUND_EXT
 0x8790

	)

8442 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

8443 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

8444 
	#GL_OP_POWER_EXT
 0x8793

	)

8445 
	#GL_OP_RECIP_EXT
 0x8794

	)

8446 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

8447 
	#GL_OP_SUB_EXT
 0x8796

	)

8448 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

8449 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

8450 
	#GL_OP_MOV_EXT
 0x8799

	)

8451 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

8452 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

8453 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

8454 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

8455 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

8456 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

8457 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

8458 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

8459 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

8460 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

8461 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

8462 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

8463 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

8464 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

8465 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

8466 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

8467 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

8468 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

8469 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

8470 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

8471 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

8472 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

8473 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

8474 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

8475 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

8476 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

8477 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

8478 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

8479 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

8480 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

8481 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

8482 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

8483 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

8484 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

8485 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

8486 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

8487 
	#GL_SCALAR_EXT
 0x87BE

	)

8488 
	#GL_VECTOR_EXT
 0x87BF

	)

8489 
	#GL_MATRIX_EXT
 0x87C0

	)

8490 
	#GL_VARIANT_EXT
 0x87C1

	)

8491 
	#GL_INVARIANT_EXT
 0x87C2

	)

8492 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

8493 
	#GL_LOCAL_EXT
 0x87C4

	)

8494 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

8495 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

8496 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

8497 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

8498 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

8499 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

8500 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

8501 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

8502 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

8503 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

8504 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

8505 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

8506 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

8507 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

8508 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

8509 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

8510 
	#GL_X_EXT
 0x87D5

	)

8511 
	#GL_Y_EXT
 0x87D6

	)

8512 
	#GL_Z_EXT
 0x87D7

	)

8513 
	#GL_W_EXT
 0x87D8

	)

8514 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

8515 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

8516 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

8517 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

8518 
	#GL_ZERO_EXT
 0x87DD

	)

8519 
	#GL_ONE_EXT
 0x87DE

	)

8520 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

8521 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

8522 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

8523 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

8524 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

8525 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

8526 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

8527 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

8528 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

8529 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

8530 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

8531 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

8532 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

8533 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

8534 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

8535 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

8536 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

8537 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

8538 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

8539 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

8540 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

8541 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

8542 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

8543 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

8544 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

8545 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

8546 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

8547 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

8548 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° *
	taddr
);

8549 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° *
	taddr
);

8550 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

8551 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

8552 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

8553 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

8554 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

8555 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

8556 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

8557 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

8558 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° *
	taddr
);

8559 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

8560 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

8561 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

8562 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

8563 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

8564 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

8565 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

8566 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

8567 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

8568 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

8569 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

8570 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, **
	td©a
);

8571 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

8572 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

8573 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

8574 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

8575 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

8576 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

8577 #ifde‡
GL_GLEXT_PROTOTYPES


8578 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

8579 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

8580 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
 
id
);

8581 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuöà
ønge
);

8582 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
 
id
);

8583 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
);

8584 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
);

8585 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
, GLuöà
¨g3
);

8586 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

8587 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

8588 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

8589 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

8590 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
 
d©©y≥
, GLíum 
°‹agëy≥
, GLíum 
ønge
, GLuöà
comp⁄íts
);

8591 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° *
addr
);

8592 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° *
addr
);

8593 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
 
id
, c⁄° 
GLbyã
 *
addr
);

8594 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
 
id
, c⁄° 
GLsh‹t
 *
addr
);

8595 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
 
id
, c⁄° 
GLöt
 *
addr
);

8596 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
addr
);

8597 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
 
id
, c⁄° 
GLdoubÀ
 *
addr
);

8598 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
 
id
, c⁄° 
GLubyã
 *
addr
);

8599 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
 
id
, c⁄° 
GLush‹t
 *
addr
);

8600 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
 
id
, c⁄° GLuöà*
addr
);

8601 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, GLuöà
°ride
, c⁄° *
addr
);

8602 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

8603 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

8604 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
 
light
, GLíum 
vÆue
);

8605 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
 
Á˚
, GLíum 
vÆue
);

8606 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
co‹d
, GLíum 
vÆue
);

8607 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
vÆue
);

8608 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
 
vÆue
);

8609 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
 
id
, 
GLíum
 
ˇp
);

8610 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8611 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8612 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8613 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, **
d©a
);

8614 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8615 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8616 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8617 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8618 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8619 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8623 #i‚de‡
GL_EXT_vîãx_weightög


8624 
	#GL_EXT_vîãx_weightög
 1

	)

8625 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 0x0BA3

	)

8626 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

8627 
	#GL_MODELVIEW0_MATRIX_EXT
 0x0BA6

	)

8628 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

8629 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

8630 
	#GL_MODELVIEW0_EXT
 0x1700

	)

8631 
	#GL_MODELVIEW1_EXT
 0x850A

	)

8632 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

8633 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

8634 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

8635 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

8636 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

8637 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

8638 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

8639 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

8640 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

8641 #ifde‡
GL_GLEXT_PROTOTYPES


8642 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
 
weight
);

8643 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *
weight
);

8644 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

8648 #i‚de‡
GL_EXT_wödow_ª˘™gÀs


8649 
	#GL_EXT_wödow_ª˘™gÀs
 1

	)

8650 
	#GL_INCLUSIVE_EXT
 0x8F10

	)

8651 
	#GL_EXCLUSIVE_EXT
 0x8F11

	)

8652 
	#GL_WINDOW_RECTANGLE_EXT
 0x8F12

	)

8653 
	#GL_WINDOW_RECTANGLE_MODE_EXT
 0x8F13

	)

8654 
	#GL_MAX_WINDOW_RECTANGLES_EXT
 0x8F14

	)

8655 
	#GL_NUM_WINDOW_RECTANGLES_EXT
 0x8F15

	)

8656 (
APIENTRYP
 
	tPFNGLWINDOWRECTANGLESEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tbox
);

8657 #ifde‡
GL_GLEXT_PROTOTYPES


8658 
GLAPI
 
APIENTRY
 
glWödowRe˘™gÀsEXT
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
box
);

8662 #i‚de‡
GL_EXT_x11_sync_obje˘


8663 
	#GL_EXT_x11_sync_obje˘
 1

	)

8664 
	#GL_SYNC_X11_FENCE_EXT
 0x90E1

	)

8665 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLIMPORTSYNCEXTPROC
Ë(
	tGLíum
 
	texã∫Æ_sync_ty≥
, 
	tGLöçå
 
	texã∫Æ_sync
, 
	tGLbôfõld
 
	tÊags
);

8666 #ifde‡
GL_GLEXT_PROTOTYPES


8667 
GLAPI
 
GLsync
 
APIENTRY
 
glImp‹tSyncEXT
 (
GLíum
 
exã∫Æ_sync_ty≥
, 
GLöçå
 
exã∫Æ_sync
, 
GLbôfõld
 
Êags
);

8671 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


8672 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

8673 (
APIENTRYP
 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

8674 #ifde‡
GL_GLEXT_PROTOTYPES


8675 
GLAPI
 
APIENTRY
 
glFømeTîmö©‹GREMEDY
 ();

8679 #i‚de‡
GL_GREMEDY_°rög_m¨kî


8680 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

8681 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

8682 #ifde‡
GL_GLEXT_PROTOTYPES


8683 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
 
Àn
, c⁄° *
°rög
);

8687 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


8688 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

8689 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

8690 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

8691 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

8692 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

8695 #i‚de‡
GL_HP_image_å™sf‹m


8696 
	#GL_HP_image_å™sf‹m
 1

	)

8697 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

8698 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

8699 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

8700 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

8701 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

8702 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

8703 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

8704 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

8705 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

8706 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

8707 
	#GL_CUBIC_HP
 0x815F

	)

8708 
	#GL_AVERAGE_HP
 0x8160

	)

8709 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

8710 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

8711 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

8712 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8713 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8714 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8715 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8716 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8717 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8718 #ifde‡
GL_GLEXT_PROTOTYPES


8719 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

8720 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

8721 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8722 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8723 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8724 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8728 #i‚de‡
GL_HP_oc˛usi⁄_ã°


8729 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

8730 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

8731 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

8734 #i‚de‡
GL_HP_ãxtuª_lightög


8735 
	#GL_HP_ãxtuª_lightög
 1

	)

8736 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

8737 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

8738 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

8741 #i‚de‡
GL_IBM_cuŒ_vîãx


8742 
	#GL_IBM_cuŒ_vîãx
 1

	)

8743 
	#GL_CULL_VERTEX_IBM
 103050

	)

8746 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


8747 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

8748 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

8749 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

8750 #ifde‡
GL_GLEXT_PROTOTYPES


8751 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
, GLöà
mode°ride
);

8752 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
¥imcou¡
, 
GLöt
 
mode°ride
);

8756 #i‚de‡
GL_IBM_ø°îpos_˛ù


8757 
	#GL_IBM_ø°îpos_˛ù
 1

	)

8758 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

8761 #i‚de‡
GL_IBM_°©ic_d©a


8762 
	#GL_IBM_°©ic_d©a
 1

	)

8763 
	#GL_ALL_STATIC_DATA_IBM
 103060

	)

8764 
	#GL_STATIC_VERTEX_ARRAY_IBM
 103061

	)

8765 (
APIENTRYP
 
	tPFNGLFLUSHSTATICDATAIBMPROC
Ë(
	tGLíum
 
	tèrgë
);

8766 #ifde‡
GL_GLEXT_PROTOTYPES


8767 
GLAPI
 
APIENTRY
 
glFlushSèticD©aIBM
 (
GLíum
 
èrgë
);

8771 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


8772 
	#GL_IBM_ãxtuª_múr‹ed_ª≥©
 1

	)

8773 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

8776 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


8777 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

8778 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

8779 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

8780 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

8781 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

8782 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

8783 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

8784 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

8785 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

8786 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

8787 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

8788 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

8789 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

8790 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

8791 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

8792 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

8793 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

8794 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8795 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8796 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
 **
	tpoöãr
, GLöà
	t±r°ride
);

8797 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8798 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8799 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8800 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8801 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8802 #ifde‡
GL_GLEXT_PROTOTYPES


8803 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8804 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8805 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
 
°ride
, c⁄° 
GLboﬁón
 **
poöãr
, GLöà
±r°ride
);

8806 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8807 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8808 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8809 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8810 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8814 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


8815 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

8816 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

8817 #ifde‡
GL_GLEXT_PROTOTYPES


8818 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

8822 #i‚de‡
GL_INGR_cﬁ‹_˛amp


8823 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

8824 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

8825 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

8826 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

8827 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

8828 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

8829 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

8830 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

8831 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

8834 #i‚de‡
GL_INGR_öãæa˚_ªad


8835 
	#GL_INGR_öãæa˚_ªad
 1

	)

8836 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

8839 #i‚de‡
GL_INTEL_c⁄£rv©ive_ø°îiz©i⁄


8840 
	#GL_INTEL_c⁄£rv©ive_ø°îiz©i⁄
 1

	)

8841 
	#GL_CONSERVATIVE_RASTERIZATION_INTEL
 0x83FE

	)

8844 #i‚de‡
GL_INTEL_‰agmít_shadî_‹dîög


8845 
	#GL_INTEL_‰agmít_shadî_‹dîög
 1

	)

8848 #i‚de‡
GL_INTEL_‰amebuf„r_CMAA


8849 
	#GL_INTEL_‰amebuf„r_CMAA
 1

	)

8850 (
APIENTRYP
 
	tPFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC
) ();

8851 #ifde‡
GL_GLEXT_PROTOTYPES


8852 
GLAPI
 
APIENTRY
 
glAµlyFømebuf„rAâachmítCMAAINTEL
 ();

8856 #i‚de‡
GL_INTEL_m≠_ãxtuª


8857 
	#GL_INTEL_m≠_ãxtuª
 1

	)

8858 
	#GL_TEXTURE_MEMORY_LAYOUT_INTEL
 0x83FF

	)

8859 
	#GL_LAYOUT_DEFAULT_INTEL
 0

	)

8860 
	#GL_LAYOUT_LINEAR_INTEL
 1

	)

8861 
	#GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
 2

	)

8862 (
APIENTRYP
 
	tPFNGLSYNCTEXTUREINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
);

8863 (
APIENTRYP
 
	tPFNGLUNMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8864 *(
	tAPIENTRYP
 
	tPFNGLMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLbôfõld
 
	tac˚ss
, GLöà*
	t°ride
, 
	tGLíum
 *
	tœyout
);

8865 #ifde‡
GL_GLEXT_PROTOTYPES


8866 
GLAPI
 
APIENTRY
 
glSyncTextuªINTEL
 (
GLuöt
 
ãxtuª
);

8867 
GLAPI
 
APIENTRY
 
glUnm≠Textuª2DINTEL
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

8868 
GLAPI
 *
APIENTRY
 
glM≠Textuª2DINTEL
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLbôfõld
 
ac˚ss
, GLöà*
°ride
, 
GLíum
 *
œyout
);

8872 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


8873 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

8874 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

8875 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

8876 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

8877 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

8878 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

8879 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8880 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8881 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8882 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8883 #ifde‡
GL_GLEXT_PROTOTYPES


8884 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8885 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
 
ty≥
, c⁄° **
poöãr
);

8886 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8887 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8891 #i‚de‡
GL_INTEL_≥rf‹m™˚_quîy


8892 
	#GL_INTEL_≥rf‹m™˚_quîy
 1

	)

8893 
	#GL_PERFQUERY_SINGLE_CONTEXT_INTEL
 0x00000000

	)

8894 
	#GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
 0x00000001

	)

8895 
	#GL_PERFQUERY_WAIT_INTEL
 0x83FB

	)

8896 
	#GL_PERFQUERY_FLUSH_INTEL
 0x83FA

	)

8897 
	#GL_PERFQUERY_DONOT_FLUSH_INTEL
 0x83F9

	)

8898 
	#GL_PERFQUERY_COUNTER_EVENT_INTEL
 0x94F0

	)

8899 
	#GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
 0x94F1

	)

8900 
	#GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
 0x94F2

	)

8901 
	#GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
 0x94F3

	)

8902 
	#GL_PERFQUERY_COUNTER_RAW_INTEL
 0x94F4

	)

8903 
	#GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL
 0x94F5

	)

8904 
	#GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
 0x94F8

	)

8905 
	#GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
 0x94F9

	)

8906 
	#GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
 0x94FA

	)

8907 
	#GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
 0x94FB

	)

8908 
	#GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
 0x94FC

	)

8909 
	#GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
 0x94FD

	)

8910 
	#GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
 0x94FE

	)

8911 
	#GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
 0x94FF

	)

8912 
	#GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
 0x9500

	)

8913 (
APIENTRYP
 
	tPFNGLBEGINPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8914 (
APIENTRYP
 
	tPFNGLCREATEPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà*
	tquîyH™dÀ
);

8915 (
APIENTRYP
 
	tPFNGLDELETEPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8916 (
APIENTRYP
 
	tPFNGLENDPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8917 (
APIENTRYP
 
	tPFNGLGETFIRSTPERFQUERYIDINTELPROC
Ë(
	tGLuöt
 *
	tquîyId
);

8918 (
APIENTRYP
 
	tPFNGLGETNEXTPERFQUERYIDINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà*
	t√xtQuîyId
);

8919 (
APIENTRYP
 
	tPFNGLGETPERFCOUNTERINFOINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà
	tcou¡îId
, GLuöà
	tcou¡îNameLígth
, 
	tGLch¨
 *
	tcou¡îName
, GLuöà
	tcou¡îDescLígth
, GLch¨ *
	tcou¡îDesc
, GLuöà*
	tcou¡îOff£t
, GLuöà*
	tcou¡îD©aSize
, GLuöà*
	tcou¡îTy≥Enum
, GLuöà*
	tcou¡îD©aTy≥Enum
, 
	tGLuöt64
 *
	tøwCou¡îMaxVÆue
);

8920 (
APIENTRYP
 
	tPFNGLGETPERFQUERYDATAINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
, GLuöà
	tÊags
, 
	tGLsizei
 
	td©aSize
, 
	tGLvoid
 *
	td©a
, GLuöà*
	tbyãsWrôãn
);

8921 (
APIENTRYP
 
	tPFNGLGETPERFQUERYIDBYNAMEINTELPROC
Ë(
	tGLch¨
 *
	tquîyName
, 
	tGLuöt
 *
	tquîyId
);

8922 (
APIENTRYP
 
	tPFNGLGETPERFQUERYINFOINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà
	tquîyNameLígth
, 
	tGLch¨
 *
	tquîyName
, GLuöà*
	td©aSize
, GLuöà*
	tnoCou¡îs
, GLuöà*
	tnoIn°™˚s
, GLuöà*
	tˇpsMask
);

8923 #ifde‡
GL_GLEXT_PROTOTYPES


8924 
GLAPI
 
APIENTRY
 
glBegöPîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8925 
GLAPI
 
APIENTRY
 
glCª©ePîfQuîyINTEL
 (
GLuöt
 
quîyId
, GLuöà*
quîyH™dÀ
);

8926 
GLAPI
 
APIENTRY
 
glDñëePîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8927 
GLAPI
 
APIENTRY
 
glEndPîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8928 
GLAPI
 
APIENTRY
 
glGëFú°PîfQuîyIdINTEL
 (
GLuöt
 *
quîyId
);

8929 
GLAPI
 
APIENTRY
 
glGëNextPîfQuîyIdINTEL
 (
GLuöt
 
quîyId
, GLuöà*
√xtQuîyId
);

8930 
GLAPI
 
APIENTRY
 
glGëPîfCou¡îInfoINTEL
 (
GLuöt
 
quîyId
, GLuöà
cou¡îId
, GLuöà
cou¡îNameLígth
, 
GLch¨
 *
cou¡îName
, GLuöà
cou¡îDescLígth
, GLch¨ *
cou¡îDesc
, GLuöà*
cou¡îOff£t
, GLuöà*
cou¡îD©aSize
, GLuöà*
cou¡îTy≥Enum
, GLuöà*
cou¡îD©aTy≥Enum
, 
GLuöt64
 *
øwCou¡îMaxVÆue
);

8931 
GLAPI
 
APIENTRY
 
glGëPîfQuîyD©aINTEL
 (
GLuöt
 
quîyH™dÀ
, GLuöà
Êags
, 
GLsizei
 
d©aSize
, 
GLvoid
 *
d©a
, GLuöà*
byãsWrôãn
);

8932 
GLAPI
 
APIENTRY
 
glGëPîfQuîyIdByNameINTEL
 (
GLch¨
 *
quîyName
, 
GLuöt
 *
quîyId
);

8933 
GLAPI
 
APIENTRY
 
glGëPîfQuîyInfoINTEL
 (
GLuöt
 
quîyId
, GLuöà
quîyNameLígth
, 
GLch¨
 *
quîyName
, GLuöà*
d©aSize
, GLuöà*
noCou¡îs
, GLuöà*
noIn°™˚s
, GLuöà*
ˇpsMask
);

8937 #i‚de‡
GL_MESAX_ãxtuª_°ack


8938 
	#GL_MESAX_ãxtuª_°ack
 1

	)

8939 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

8940 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

8941 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

8942 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

8943 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

8944 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

8947 #i‚de‡
GL_MESA_∑ck_övît


8948 
	#GL_MESA_∑ck_övît
 1

	)

8949 
	#GL_PACK_INVERT_MESA
 0x8758

	)

8952 #i‚de‡
GL_MESA_ªsize_buf„rs


8953 
	#GL_MESA_ªsize_buf„rs
 1

	)

8954 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

8955 #ifde‡
GL_GLEXT_PROTOTYPES


8956 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

8960 #i‚de‡
GL_MESA_wödow_pos


8961 
	#GL_MESA_wödow_pos
 1

	)

8962 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8963 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8964 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

8965 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8966 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

8967 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8968 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

8969 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8970 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8971 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8972 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

8973 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8974 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

8975 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8976 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

8977 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8978 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8979 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8980 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

8981 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8982 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8983 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8984 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

8985 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8986 #ifde‡
GL_GLEXT_PROTOTYPES


8987 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8988 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8989 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

8990 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8991 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
 
x
, GLöà
y
);

8992 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *
v
);

8993 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
);

8994 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8995 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8996 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8997 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

8998 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8999 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

9000 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *
v
);

9001 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

9002 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *
v
);

9003 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

9004 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

9005 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9006 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

9007 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9008 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *
v
);

9009 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

9010 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *
v
);

9014 #i‚de‡
GL_MESA_ycb¸_ãxtuª


9015 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

9016 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

9017 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

9018 
	#GL_YCBCR_MESA
 0x8757

	)

9021 #i‚de‡
GL_NVX_c⁄dôi⁄Æ_ªndî


9022 
	#GL_NVX_c⁄dôi⁄Æ_ªndî
 1

	)

9023 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVXPROC
Ë(
	tGLuöt
 
	tid
);

9024 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVXPROC
) ();

9025 #ifde‡
GL_GLEXT_PROTOTYPES


9026 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNVX
 (
GLuöt
 
id
);

9027 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNVX
 ();

9031 #i‚de‡
GL_NVX_gpu_mem‹y_öfo


9032 
	#GL_NVX_gpu_mem‹y_öfo
 1

	)

9033 
	#GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
 0x9047

	)

9034 
	#GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
 0x9048

	)

9035 
	#GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
 0x9049

	)

9036 
	#GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
 0x904A

	)

9037 
	#GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
 0x904B

	)

9040 #i‚de‡
GL_NV_bödÀss_mu…i_døw_ödúe˘


9041 
	#GL_NV_bödÀss_mu…i_døw_ödúe˘
 1

	)

9042 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9043 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9044 #ifde‡
GL_GLEXT_PROTOTYPES


9045 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘BödÀssNV
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9046 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘BödÀssNV
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9050 #i‚de‡
GL_NV_bödÀss_mu…i_døw_ödúe˘_cou¡


9051 
	#GL_NV_bödÀss_mu…i_døw_ödúe˘_cou¡
 1

	)

9052 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	tmaxDøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9053 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	tmaxDøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

9054 #ifde‡
GL_GLEXT_PROTOTYPES


9055 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘BödÀssCou¡NV
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
maxDøwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9056 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘BödÀssCou¡NV
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
maxDøwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

9060 #i‚de‡
GL_NV_bödÀss_ãxtuª


9061 
	#GL_NV_bödÀss_ãxtuª
 1

	)

9062 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
);

9063 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

9064 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9065 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9066 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

9067 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

9068 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9069 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

9070 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

9071 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

9072 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

9073 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9074 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

9075 #ifde‡
GL_GLEXT_PROTOTYPES


9076 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀNV
 (
GLuöt
 
ãxtuª
);

9077 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

9078 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

9079 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

9080 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀNV
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

9081 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

9082 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

9083 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

9084 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

9085 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

9086 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

9087 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

9088 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

9092 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d


9093 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d
 1

	)

9094 
	#GL_BLEND_OVERLAP_NV
 0x9281

	)

9095 
	#GL_BLEND_PREMULTIPLIED_SRC_NV
 0x9280

	)

9096 
	#GL_BLUE_NV
 0x1905

	)

9097 
	#GL_COLORBURN_NV
 0x929A

	)

9098 
	#GL_COLORDODGE_NV
 0x9299

	)

9099 
	#GL_CONJOINT_NV
 0x9284

	)

9100 
	#GL_CONTRAST_NV
 0x92A1

	)

9101 
	#GL_DARKEN_NV
 0x9297

	)

9102 
	#GL_DIFFERENCE_NV
 0x929E

	)

9103 
	#GL_DISJOINT_NV
 0x9283

	)

9104 
	#GL_DST_ATOP_NV
 0x928F

	)

9105 
	#GL_DST_IN_NV
 0x928B

	)

9106 
	#GL_DST_NV
 0x9287

	)

9107 
	#GL_DST_OUT_NV
 0x928D

	)

9108 
	#GL_DST_OVER_NV
 0x9289

	)

9109 
	#GL_EXCLUSION_NV
 0x92A0

	)

9110 
	#GL_GREEN_NV
 0x1904

	)

9111 
	#GL_HARDLIGHT_NV
 0x929B

	)

9112 
	#GL_HARDMIX_NV
 0x92A9

	)

9113 
	#GL_HSL_COLOR_NV
 0x92AF

	)

9114 
	#GL_HSL_HUE_NV
 0x92AD

	)

9115 
	#GL_HSL_LUMINOSITY_NV
 0x92B0

	)

9116 
	#GL_HSL_SATURATION_NV
 0x92AE

	)

9117 
	#GL_INVERT_OVG_NV
 0x92B4

	)

9118 
	#GL_INVERT_RGB_NV
 0x92A3

	)

9119 
	#GL_LIGHTEN_NV
 0x9298

	)

9120 
	#GL_LINEARBURN_NV
 0x92A5

	)

9121 
	#GL_LINEARDODGE_NV
 0x92A4

	)

9122 
	#GL_LINEARLIGHT_NV
 0x92A7

	)

9123 
	#GL_MINUS_CLAMPED_NV
 0x92B3

	)

9124 
	#GL_MINUS_NV
 0x929F

	)

9125 
	#GL_MULTIPLY_NV
 0x9294

	)

9126 
	#GL_OVERLAY_NV
 0x9296

	)

9127 
	#GL_PINLIGHT_NV
 0x92A8

	)

9128 
	#GL_PLUS_CLAMPED_ALPHA_NV
 0x92B2

	)

9129 
	#GL_PLUS_CLAMPED_NV
 0x92B1

	)

9130 
	#GL_PLUS_DARKER_NV
 0x9292

	)

9131 
	#GL_PLUS_NV
 0x9291

	)

9132 
	#GL_RED_NV
 0x1903

	)

9133 
	#GL_SCREEN_NV
 0x9295

	)

9134 
	#GL_SOFTLIGHT_NV
 0x929C

	)

9135 
	#GL_SRC_ATOP_NV
 0x928E

	)

9136 
	#GL_SRC_IN_NV
 0x928A

	)

9137 
	#GL_SRC_NV
 0x9286

	)

9138 
	#GL_SRC_OUT_NV
 0x928C

	)

9139 
	#GL_SRC_OVER_NV
 0x9288

	)

9140 
	#GL_UNCORRELATED_NV
 0x9282

	)

9141 
	#GL_VIVIDLIGHT_NV
 0x92A6

	)

9142 
	#GL_XOR_NV
 0x1506

	)

9143 (
APIENTRYP
 
	tPFNGLBLENDPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

9144 (
APIENTRYP
 
	tPFNGLBLENDBARRIERNVPROC
) ();

9145 #ifde‡
GL_GLEXT_PROTOTYPES


9146 
GLAPI
 
APIENTRY
 
glBÀndP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

9147 
GLAPI
 
APIENTRY
 
glBÀndB¨rõrNV
 ();

9151 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít


9152 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít
 1

	)

9153 
	#GL_BLEND_ADVANCED_COHERENT_NV
 0x9285

	)

9156 #i‚de‡
GL_NV_bÀnd_squ¨e


9157 
	#GL_NV_bÀnd_squ¨e
 1

	)

9160 #i‚de‡
GL_NV_˛ù_•a˚_w_sˇlög


9161 
	#GL_NV_˛ù_•a˚_w_sˇlög
 1

	)

9162 
	#GL_VIEWPORT_POSITION_W_SCALE_NV
 0x937C

	)

9163 
	#GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV
 0x937D

	)

9164 
	#GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV
 0x937E

	)

9165 (
APIENTRYP
 
	tPFNGLVIEWPORTPOSITIONWSCALENVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	txc€ff
, GLÊﬂà
	tyc€ff
);

9166 #ifde‡
GL_GLEXT_PROTOTYPES


9167 
GLAPI
 
APIENTRY
 
glVõwp‹tPosôi⁄WSˇÀNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
xc€ff
, GLÊﬂà
yc€ff
);

9171 #i‚de‡
GL_NV_comm™d_li°


9172 
	#GL_NV_comm™d_li°
 1

	)

9173 
	#GL_TERMINATE_SEQUENCE_COMMAND_NV
 0x0000

	)

9174 
	#GL_NOP_COMMAND_NV
 0x0001

	)

9175 
	#GL_DRAW_ELEMENTS_COMMAND_NV
 0x0002

	)

9176 
	#GL_DRAW_ARRAYS_COMMAND_NV
 0x0003

	)

9177 
	#GL_DRAW_ELEMENTS_STRIP_COMMAND_NV
 0x0004

	)

9178 
	#GL_DRAW_ARRAYS_STRIP_COMMAND_NV
 0x0005

	)

9179 
	#GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV
 0x0006

	)

9180 
	#GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV
 0x0007

	)

9181 
	#GL_ELEMENT_ADDRESS_COMMAND_NV
 0x0008

	)

9182 
	#GL_ATTRIBUTE_ADDRESS_COMMAND_NV
 0x0009

	)

9183 
	#GL_UNIFORM_ADDRESS_COMMAND_NV
 0x000A

	)

9184 
	#GL_BLEND_COLOR_COMMAND_NV
 0x000B

	)

9185 
	#GL_STENCIL_REF_COMMAND_NV
 0x000C

	)

9186 
	#GL_LINE_WIDTH_COMMAND_NV
 0x000D

	)

9187 
	#GL_POLYGON_OFFSET_COMMAND_NV
 0x000E

	)

9188 
	#GL_ALPHA_REF_COMMAND_NV
 0x000F

	)

9189 
	#GL_VIEWPORT_COMMAND_NV
 0x0010

	)

9190 
	#GL_SCISSOR_COMMAND_NV
 0x0011

	)

9191 
	#GL_FRONT_FACE_COMMAND_NV
 0x0012

	)

9192 (
APIENTRYP
 
	tPFNGLCREATESTATESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t°©es
);

9193 (
APIENTRYP
 
	tPFNGLDELETESTATESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t°©es
);

9194 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSTATENVPROC
Ë(
	tGLuöt
 
	t°©e
);

9195 (
APIENTRYP
 
	tPFNGLSTATECAPTURENVPROC
Ë(
	tGLuöt
 
	t°©e
, 
	tGLíum
 
	tmode
);

9196 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETCOMMANDHEADERNVPROC
Ë(
	tGLíum
 
	ttokíID
, 
	tGLuöt
 
	tsize
);

9197 
GLush‹t
 (
	tAPIENTRYP
 
	tPFNGLGETSTAGEINDEXNVPROC
Ë(
	tGLíum
 
	tshadîty≥
);

9198 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
, 
	tGLuöt
 
	tbuf„r
, c⁄° 
	tGLöçå
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, GLuöà
	tcou¡
);

9199 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSADDRESSNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
, c⁄° 
	tGLuöt64
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, 
	tGLuöt
 
	tcou¡
);

9200 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSSTATESNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, c⁄° 
	tGLöçå
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, c⁄° GLuöà*
	t°©es
, c⁄° GLuöà*
	tfbos
, GLuöà
	tcou¡
);

9201 (
APIENTRYP
 
	tPFNGLDRAWCOMMANDSSTATESADDRESSNVPROC
Ë(c⁄° 
	tGLuöt64
 *
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, c⁄° 
	tGLuöt
 *
	t°©es
, c⁄° GLuöà*
	tfbos
, GLuöà
	tcou¡
);

9202 (
APIENTRYP
 
	tPFNGLCREATECOMMANDLISTSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tli°s
);

9203 (
APIENTRYP
 
	tPFNGLDELETECOMMANDLISTSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tli°s
);

9204 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISCOMMANDLISTNVPROC
Ë(
	tGLuöt
 
	tli°
);

9205 (
APIENTRYP
 
	tPFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC
Ë(
	tGLuöt
 
	tli°
, GLuöà
	t£gmít
, c⁄° **
	tödúe˘s
, c⁄° 
	tGLsizei
 *
	tsizes
, c⁄° GLuöà*
	t°©es
, c⁄° GLuöà*
	tfbos
, GLuöà
	tcou¡
);

9206 (
APIENTRYP
 
	tPFNGLCOMMANDLISTSEGMENTSNVPROC
Ë(
	tGLuöt
 
	tli°
, GLuöà
	t£gmíts
);

9207 (
APIENTRYP
 
	tPFNGLCOMPILECOMMANDLISTNVPROC
Ë(
	tGLuöt
 
	tli°
);

9208 (
APIENTRYP
 
	tPFNGLCALLCOMMANDLISTNVPROC
Ë(
	tGLuöt
 
	tli°
);

9209 #ifde‡
GL_GLEXT_PROTOTYPES


9210 
GLAPI
 
APIENTRY
 
glCª©eSèãsNV
 (
GLsizei
 
n
, 
GLuöt
 *
°©es
);

9211 
GLAPI
 
APIENTRY
 
glDñëeSèãsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
°©es
);

9212 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSèãNV
 (
GLuöt
 
°©e
);

9213 
GLAPI
 
APIENTRY
 
glSèãC≠tuªNV
 (
GLuöt
 
°©e
, 
GLíum
 
mode
);

9214 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëComm™dHódîNV
 (
GLíum
 
tokíID
, GLuöà
size
);

9215 
GLAPI
 
GLush‹t
 
APIENTRY
 
glGëSègeIndexNV
 (
GLíum
 
shadîty≥
);

9216 
GLAPI
 
APIENTRY
 
glDøwComm™dsNV
 (
GLíum
 
¥imôiveMode
, 
GLuöt
 
buf„r
, c⁄° 
GLöçå
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, GLuöà
cou¡
);

9217 
GLAPI
 
APIENTRY
 
glDøwComm™dsAddªssNV
 (
GLíum
 
¥imôiveMode
, c⁄° 
GLuöt64
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, 
GLuöt
 
cou¡
);

9218 
GLAPI
 
APIENTRY
 
glDøwComm™dsSèãsNV
 (
GLuöt
 
buf„r
, c⁄° 
GLöçå
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, c⁄° GLuöà*
°©es
, c⁄° GLuöà*
fbos
, GLuöà
cou¡
);

9219 
GLAPI
 
APIENTRY
 
glDøwComm™dsSèãsAddªssNV
 (c⁄° 
GLuöt64
 *
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, c⁄° 
GLuöt
 *
°©es
, c⁄° GLuöà*
fbos
, GLuöà
cou¡
);

9220 
GLAPI
 
APIENTRY
 
glCª©eComm™dLi°sNV
 (
GLsizei
 
n
, 
GLuöt
 *
li°s
);

9221 
GLAPI
 
APIENTRY
 
glDñëeComm™dLi°sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
li°s
);

9222 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsComm™dLi°NV
 (
GLuöt
 
li°
);

9223 
GLAPI
 
APIENTRY
 
glLi°DøwComm™dsSèãsClõ¡NV
 (
GLuöt
 
li°
, GLuöà
£gmít
, c⁄° **
ödúe˘s
, c⁄° 
GLsizei
 *
sizes
, c⁄° GLuöà*
°©es
, c⁄° GLuöà*
fbos
, GLuöà
cou¡
);

9224 
GLAPI
 
APIENTRY
 
glComm™dLi°SegmítsNV
 (
GLuöt
 
li°
, GLuöà
£gmíts
);

9225 
GLAPI
 
APIENTRY
 
glCompûeComm™dLi°NV
 (
GLuöt
 
li°
);

9226 
GLAPI
 
APIENTRY
 
glCÆlComm™dLi°NV
 (
GLuöt
 
li°
);

9230 #i‚de‡
GL_NV_compuã_¥ogøm5


9231 
	#GL_NV_compuã_¥ogøm5
 1

	)

9232 
	#GL_COMPUTE_PROGRAM_NV
 0x90FB

	)

9233 
	#GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
 0x90FC

	)

9236 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


9237 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

9238 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

9239 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

9240 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

9241 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

9242 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

9243 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVPROC
) ();

9244 #ifde‡
GL_GLEXT_PROTOTYPES


9245 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNV
 (
GLuöt
 
id
, 
GLíum
 
mode
);

9246 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNV
 ();

9250 #i‚de‡
GL_NV_c⁄£rv©ive_ø°î


9251 
	#GL_NV_c⁄£rv©ive_ø°î
 1

	)

9252 
	#GL_CONSERVATIVE_RASTERIZATION_NV
 0x9346

	)

9253 
	#GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV
 0x9347

	)

9254 
	#GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV
 0x9348

	)

9255 
	#GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV
 0x9349

	)

9256 (
APIENTRYP
 
	tPFNGLSUBPIXELPRECISIONBIASNVPROC
Ë(
	tGLuöt
 
	txbôs
, GLuöà
	tybôs
);

9257 #ifde‡
GL_GLEXT_PROTOTYPES


9258 
GLAPI
 
APIENTRY
 
glSubpixñPªcisi⁄BüsNV
 (
GLuöt
 
xbôs
, GLuöà
ybôs
);

9262 #i‚de‡
GL_NV_c⁄£rv©ive_ø°î_dû©e


9263 
	#GL_NV_c⁄£rv©ive_ø°î_dû©e
 1

	)

9264 
	#GL_CONSERVATIVE_RASTER_DILATE_NV
 0x9379

	)

9265 
	#GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV
 0x937A

	)

9266 
	#GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV
 0x937B

	)

9267 (
APIENTRYP
 
	tPFNGLCONSERVATIVERASTERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

9268 #ifde‡
GL_GLEXT_PROTOTYPES


9269 
GLAPI
 
APIENTRY
 
glC⁄£rv©iveRa°îP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

9273 #i‚de‡
GL_NV_c⁄£rv©ive_ø°î_¥e_¢≠_åüngÀs


9274 
	#GL_NV_c⁄£rv©ive_ø°î_¥e_¢≠_åüngÀs
 1

	)

9275 
	#GL_CONSERVATIVE_RASTER_MODE_NV
 0x954D

	)

9276 
	#GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV
 0x954E

	)

9277 
	#GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV
 0x954F

	)

9278 (
APIENTRYP
 
	tPFNGLCONSERVATIVERASTERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9279 #ifde‡
GL_GLEXT_PROTOTYPES


9280 
GLAPI
 
APIENTRY
 
glC⁄£rv©iveRa°îP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9284 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


9285 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

9286 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

9287 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

9290 #i‚de‡
GL_NV_c›y_image


9291 
	#GL_NV_c›y_image
 1

	)

9292 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATANVPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

9293 #ifde‡
GL_GLEXT_PROTOTYPES


9294 
GLAPI
 
APIENTRY
 
glC›yImageSubD©aNV
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

9298 #i‚de‡
GL_NV_dìp_ãxtuª3D


9299 
	#GL_NV_dìp_ãxtuª3D
 1

	)

9300 
	#GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
 0x90D0

	)

9301 
	#GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
 0x90D1

	)

9304 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


9305 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

9306 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

9307 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

9308 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

9309 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

9310 (
APIENTRYP
 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

9311 (
APIENTRYP
 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

9312 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

9313 #ifde‡
GL_GLEXT_PROTOTYPES


9314 
GLAPI
 
APIENTRY
 
glDïthR™gedNV
 (
GLdoubÀ
 
zNór
, GLdoubÀ 
zF¨
);

9315 
GLAPI
 
APIENTRY
 
glCÀ¨DïthdNV
 (
GLdoubÀ
 
dïth
);

9316 
GLAPI
 
APIENTRY
 
glDïthBoundsdNV
 (
GLdoubÀ
 
zmö
, GLdoubÀ 
zmax
);

9320 #i‚de‡
GL_NV_dïth_˛amp


9321 
	#GL_NV_dïth_˛amp
 1

	)

9322 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

9325 #i‚de‡
GL_NV_døw_ãxtuª


9326 
	#GL_NV_døw_ãxtuª
 1

	)

9327 (
APIENTRYP
 
	tPFNGLDRAWTEXTURENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
, 
	tGLÊﬂt
 
	tx0
, GLÊﬂà
	ty0
, GLÊﬂà
	tx1
, GLÊﬂà
	ty1
, GLÊﬂà
	tz
, GLÊﬂà
	ts0
, GLÊﬂà
	tt0
, GLÊﬂà
	ts1
, GLÊﬂà
	tt1
);

9328 #ifde‡
GL_GLEXT_PROTOTYPES


9329 
GLAPI
 
APIENTRY
 
glDøwTextuªNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
, 
GLÊﬂt
 
x0
, GLÊﬂà
y0
, GLÊﬂà
x1
, GLÊﬂà
y1
, GLÊﬂà
z
, GLÊﬂà
s0
, GLÊﬂà
t0
, GLÊﬂà
s1
, GLÊﬂà
t1
);

9333 #i‚de‡
GL_NV_evÆu©‹s


9334 
	#GL_NV_evÆu©‹s
 1

	)

9335 
	#GL_EVAL_2D_NV
 0x86C0

	)

9336 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

9337 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

9338 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

9339 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

9340 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

9341 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

9342 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

9343 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

9344 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

9345 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

9346 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

9347 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

9348 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

9349 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

9350 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

9351 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

9352 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

9353 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

9354 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

9355 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

9356 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

9357 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

9358 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

9359 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° *
	tpoöts
);

9360 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9361 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9362 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, *
	tpoöts
);

9363 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9364 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9365 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9366 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9367 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

9368 #ifde‡
GL_GLEXT_PROTOTYPES


9369 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLöt
 
u‹dî
, GLöà
v‹dî
, 
GLboﬁón
 
∑cked
, c⁄° *
poöts
);

9370 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9371 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9372 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLboﬁón
 
∑cked
, *
poöts
);

9373 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9374 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9375 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9376 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9377 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
 
èrgë
, GLíum 
mode
);

9381 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


9382 
	#GL_NV_ex∂icô_mu…ißm∂e
 1

	)

9383 
	#GL_SAMPLE_POSITION_NV
 0x8E50

	)

9384 
	#GL_SAMPLE_MASK_NV
 0x8E51

	)

9385 
	#GL_SAMPLE_MASK_VALUE_NV
 0x8E52

	)

9386 
	#GL_TEXTURE_BINDING_RENDERBUFFER_NV
 0x8E53

	)

9387 
	#GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
 0x8E54

	)

9388 
	#GL_TEXTURE_RENDERBUFFER_NV
 0x8E55

	)

9389 
	#GL_SAMPLER_RENDERBUFFER_NV
 0x8E56

	)

9390 
	#GL_INT_SAMPLER_RENDERBUFFER_NV
 0x8E57

	)

9391 
	#GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
 0x8E58

	)

9392 
	#GL_MAX_SAMPLE_MASK_WORDS_NV
 0x8E59

	)

9393 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

9394 (
APIENTRYP
 
	tPFNGLSAMPLEMASKINDEXEDNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

9395 (
APIENTRYP
 
	tPFNGLTEXRENDERBUFFERNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

9396 #ifde‡
GL_GLEXT_PROTOTYPES


9397 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efvNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

9398 
GLAPI
 
APIENTRY
 
glSam∂eMaskIndexedNV
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

9399 
GLAPI
 
APIENTRY
 
glTexRídîbuf„rNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

9403 #i‚de‡
GL_NV_„n˚


9404 
	#GL_NV_„n˚
 1

	)

9405 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

9406 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

9407 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

9408 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

9409 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

9410 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

9411 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

9412 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9413 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

9414 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

9415 #ifde‡
GL_GLEXT_PROTOTYPES


9416 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

9417 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

9418 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
 
„n˚
);

9419 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

9420 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9421 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
 
„n˚
);

9422 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

9426 #i‚de‡
GL_NV_fûl_ª˘™gÀ


9427 
	#GL_NV_fûl_ª˘™gÀ
 1

	)

9428 
	#GL_FILL_RECTANGLE_NV
 0x933C

	)

9431 #i‚de‡
GL_NV_Êﬂt_buf„r


9432 
	#GL_NV_Êﬂt_buf„r
 1

	)

9433 
	#GL_FLOAT_R_NV
 0x8880

	)

9434 
	#GL_FLOAT_RG_NV
 0x8881

	)

9435 
	#GL_FLOAT_RGB_NV
 0x8882

	)

9436 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

9437 
	#GL_FLOAT_R16_NV
 0x8884

	)

9438 
	#GL_FLOAT_R32_NV
 0x8885

	)

9439 
	#GL_FLOAT_RG16_NV
 0x8886

	)

9440 
	#GL_FLOAT_RG32_NV
 0x8887

	)

9441 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

9442 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

9443 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

9444 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

9445 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

9446 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

9447 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

9450 #i‚de‡
GL_NV_fog_di°™˚


9451 
	#GL_NV_fog_di°™˚
 1

	)

9452 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

9453 
	#GL_EYE_RADIAL_NV
 0x855B

	)

9454 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

9457 #i‚de‡
GL_NV_‰agmít_covîage_to_cﬁ‹


9458 
	#GL_NV_‰agmít_covîage_to_cﬁ‹
 1

	)

9459 
	#GL_FRAGMENT_COVERAGE_TO_COLOR_NV
 0x92DD

	)

9460 
	#GL_FRAGMENT_COVERAGE_COLOR_NV
 0x92DE

	)

9461 (
APIENTRYP
 
	tPFNGLFRAGMENTCOVERAGECOLORNVPROC
Ë(
	tGLuöt
 
	tcﬁ‹
);

9462 #ifde‡
GL_GLEXT_PROTOTYPES


9463 
GLAPI
 
APIENTRY
 
glFøgmítCovîageCﬁ‹NV
 (
GLuöt
 
cﬁ‹
);

9467 #i‚de‡
GL_NV_‰agmít_¥ogøm


9468 
	#GL_NV_‰agmít_¥ogøm
 1

	)

9469 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

9470 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

9471 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

9472 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

9473 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

9474 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

9475 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9476 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9477 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

9478 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9479 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

9480 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

9481 #ifde‡
GL_GLEXT_PROTOTYPES


9482 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9483 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLÊﬂt
 *
v
);

9484 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

9485 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLdoubÀ
 *
v
);

9486 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
∑øms
);

9487 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 *
∑øms
);

9491 #i‚de‡
GL_NV_‰agmít_¥ogøm2


9492 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

9493 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

9494 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

9495 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

9496 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

9497 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

9500 #i‚de‡
GL_NV_‰agmít_¥ogøm4


9501 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

9504 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


9505 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

9508 #i‚de‡
GL_NV_‰agmít_shadî_öãæock


9509 
	#GL_NV_‰agmít_shadî_öãæock
 1

	)

9512 #i‚de‡
GL_NV_‰amebuf„r_mixed_ßm∂es


9513 
	#GL_NV_‰amebuf„r_mixed_ßm∂es
 1

	)

9514 
	#GL_COVERAGE_MODULATION_TABLE_NV
 0x9331

	)

9515 
	#GL_COLOR_SAMPLES_NV
 0x8E20

	)

9516 
	#GL_DEPTH_SAMPLES_NV
 0x932D

	)

9517 
	#GL_STENCIL_SAMPLES_NV
 0x932E

	)

9518 
	#GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV
 0x932F

	)

9519 
	#GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV
 0x9330

	)

9520 
	#GL_COVERAGE_MODULATION_NV
 0x9332

	)

9521 
	#GL_COVERAGE_MODULATION_TABLE_SIZE_NV
 0x9333

	)

9522 (
APIENTRYP
 
	tPFNGLCOVERAGEMODULATIONTABLENVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9523 (
APIENTRYP
 
	tPFNGLGETCOVERAGEMODULATIONTABLENVPROC
Ë(
	tGLsizei
 
	tbufsize
, 
	tGLÊﬂt
 *
	tv
);

9524 (
APIENTRYP
 
	tPFNGLCOVERAGEMODULATIONNVPROC
Ë(
	tGLíum
 
	tcomp⁄íts
);

9525 #ifde‡
GL_GLEXT_PROTOTYPES


9526 
GLAPI
 
APIENTRY
 
glCovîageModuœti⁄TabÀNV
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
v
);

9527 
GLAPI
 
APIENTRY
 
glGëCovîageModuœti⁄TabÀNV
 (
GLsizei
 
bufsize
, 
GLÊﬂt
 *
v
);

9528 
GLAPI
 
APIENTRY
 
glCovîageModuœti⁄NV
 (
GLíum
 
comp⁄íts
);

9532 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


9533 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

9534 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

9535 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

9536 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

9537 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

9538 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

9539 #ifde‡
GL_GLEXT_PROTOTYPES


9540 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

9544 #i‚de‡
GL_NV_geomëry_¥ogøm4


9545 
	#GL_NV_geomëry_¥ogøm4
 1

	)

9546 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

9547 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

9548 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

9549 (
APIENTRYP
 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

9550 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

9551 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

9552 #ifde‡
GL_GLEXT_PROTOTYPES


9553 
GLAPI
 
APIENTRY
 
glProgømVîãxLimôNV
 (
GLíum
 
èrgë
, 
GLöt
 
limô
);

9554 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

9555 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚EXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

9559 #i‚de‡
GL_NV_geomëry_shadî4


9560 
	#GL_NV_geomëry_shadî4
 1

	)

9563 #i‚de‡
GL_NV_geomëry_shadî_∑s°hrough


9564 
	#GL_NV_geomëry_shadî_∑s°hrough
 1

	)

9567 #i‚de‡
GL_NV_gpu_¥ogøm4


9568 
	#GL_NV_gpu_¥ogøm4
 1

	)

9569 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

9570 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

9571 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

9572 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

9573 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

9574 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

9575 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

9576 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

9577 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

9578 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

9579 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9580 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

9581 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

9582 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9583 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

9584 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

9585 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9586 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

9587 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

9588 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9589 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

9590 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

9591 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

9592 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

9593 #ifde‡
GL_GLEXT_PROTOTYPES


9594 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9595 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

9596 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9597 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

9598 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

9599 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9600 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

9601 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

9602 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9603 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

9604 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

9605 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9606 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

9607 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

9608 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

9609 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

9613 #i‚de‡
GL_NV_gpu_¥ogøm5


9614 
	#GL_NV_gpu_¥ogøm5
 1

	)

9615 
	#GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
 0x8E5A

	)

9616 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5B

	)

9617 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5C

	)

9618 
	#GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
 0x8E5D

	)

9619 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5E

	)

9620 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5F

	)

9621 
	#GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
 0x8F44

	)

9622 
	#GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
 0x8F45

	)

9623 (
APIENTRYP
 
	tPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	t∑øms
);

9624 (
APIENTRYP
 
	tPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øm
);

9625 #ifde‡
GL_GLEXT_PROTOTYPES


9626 
GLAPI
 
APIENTRY
 
glProgømSubroutöeP¨amëîsuivNV
 (
GLíum
 
èrgë
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
∑øms
);

9627 
GLAPI
 
APIENTRY
 
glGëProgømSubroutöeP¨amëîuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øm
);

9631 #i‚de‡
GL_NV_gpu_¥ogøm5_mem_exãnded


9632 
	#GL_NV_gpu_¥ogøm5_mem_exãnded
 1

	)

9635 #i‚de‡
GL_NV_gpu_shadî5


9636 
	#GL_NV_gpu_shadî5
 1

	)

9639 #i‚de‡
GL_NV_hÆf_Êﬂt


9640 
	#GL_NV_hÆf_Êﬂt
 1

	)

9641 
	tGLhÆfNV
;

9642 
	#GL_HALF_FLOAT_NV
 0x140B

	)

9643 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

9644 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9645 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

9646 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9647 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

9648 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9649 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

9650 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9651 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

9652 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9653 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

9654 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9655 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

9656 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9657 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

9658 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9659 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

9660 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9661 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

9662 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9663 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

9664 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9665 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

9666 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9667 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

9668 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9669 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

9670 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9671 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

9672 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

9673 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

9674 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

9675 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

9676 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

9677 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

9678 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9679 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

9680 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9681 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

9682 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9683 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

9684 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9685 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9686 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9687 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9688 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

9689 #ifde‡
GL_GLEXT_PROTOTYPES


9690 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
);

9691 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9692 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

9693 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9694 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

9695 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9696 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
 
nx
, GLhÆfNV 
ny
, GLhÆfNV 
nz
);

9697 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9698 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

9699 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9700 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
, GLhÆfNV 
Æpha
);

9701 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9702 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
 
s
);

9703 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9704 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
);

9705 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9706 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

9707 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9708 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

9709 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9710 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
);

9711 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9712 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
);

9713 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9714 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

9715 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9716 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

9717 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

9718 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
 
fog
);

9719 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *
fog
);

9720 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

9721 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

9722 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
 
weight
);

9723 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *
weight
);

9724 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
);

9725 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9726 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
);

9727 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9728 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

9729 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9730 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

9731 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

9732 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9733 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9734 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9735 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

9739 #i‚de‡
GL_NV_öã∫Æf‹m©_ßm∂e_quîy


9740 
	#GL_NV_öã∫Æf‹m©_ßm∂e_quîy
 1

	)

9741 
	#GL_MULTISAMPLES_NV
 0x9371

	)

9742 
	#GL_SUPERSAMPLE_SCALE_X_NV
 0x9372

	)

9743 
	#GL_SUPERSAMPLE_SCALE_Y_NV
 0x9373

	)

9744 
	#GL_CONFORMANT_NV
 0x9374

	)

9745 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATSAMPLEIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	t≤ame
, GLsizeò
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

9746 #ifde‡
GL_GLEXT_PROTOTYPES


9747 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©Sam∂eivNV
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
ßm∂es
, GLíum 
≤ame
, GLsizeò
bufSize
, 
GLöt
 *
∑øms
);

9751 #i‚de‡
GL_NV_light_max_exp⁄ít


9752 
	#GL_NV_light_max_exp⁄ít
 1

	)

9753 
	#GL_MAX_SHININESS_NV
 0x8504

	)

9754 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

9757 #i‚de‡
GL_NV_mu…ißm∂e_covîage


9758 
	#GL_NV_mu…ißm∂e_covîage
 1

	)

9761 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


9762 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

9763 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

9766 #i‚de‡
GL_NV_oc˛usi⁄_quîy


9767 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

9768 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

9769 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

9770 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

9771 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

9772 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

9773 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

9774 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

9775 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

9776 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

9777 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9778 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

9779 #ifde‡
GL_GLEXT_PROTOTYPES


9780 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

9781 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

9782 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

9783 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

9784 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

9785 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9786 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

9790 #i‚de‡
GL_NV_∑cked_dïth_°ícû


9791 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

9792 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

9793 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

9796 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


9797 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

9798 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

9799 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

9800 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

9801 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

9802 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

9803 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9804 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9805 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9806 #ifde‡
GL_GLEXT_PROTOTYPES


9807 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

9808 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9809 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9813 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


9814 
	#GL_NV_∑ømëî_buf„r_obje˘2
 1

	)

9817 #i‚de‡
GL_NV_∑th_ªndîög


9818 
	#GL_NV_∑th_ªndîög
 1

	)

9819 
	#GL_PATH_FORMAT_SVG_NV
 0x9070

	)

9820 
	#GL_PATH_FORMAT_PS_NV
 0x9071

	)

9821 
	#GL_STANDARD_FONT_NAME_NV
 0x9072

	)

9822 
	#GL_SYSTEM_FONT_NAME_NV
 0x9073

	)

9823 
	#GL_FILE_NAME_NV
 0x9074

	)

9824 
	#GL_PATH_STROKE_WIDTH_NV
 0x9075

	)

9825 
	#GL_PATH_END_CAPS_NV
 0x9076

	)

9826 
	#GL_PATH_INITIAL_END_CAP_NV
 0x9077

	)

9827 
	#GL_PATH_TERMINAL_END_CAP_NV
 0x9078

	)

9828 
	#GL_PATH_JOIN_STYLE_NV
 0x9079

	)

9829 
	#GL_PATH_MITER_LIMIT_NV
 0x907A

	)

9830 
	#GL_PATH_DASH_CAPS_NV
 0x907B

	)

9831 
	#GL_PATH_INITIAL_DASH_CAP_NV
 0x907C

	)

9832 
	#GL_PATH_TERMINAL_DASH_CAP_NV
 0x907D

	)

9833 
	#GL_PATH_DASH_OFFSET_NV
 0x907E

	)

9834 
	#GL_PATH_CLIENT_LENGTH_NV
 0x907F

	)

9835 
	#GL_PATH_FILL_MODE_NV
 0x9080

	)

9836 
	#GL_PATH_FILL_MASK_NV
 0x9081

	)

9837 
	#GL_PATH_FILL_COVER_MODE_NV
 0x9082

	)

9838 
	#GL_PATH_STROKE_COVER_MODE_NV
 0x9083

	)

9839 
	#GL_PATH_STROKE_MASK_NV
 0x9084

	)

9840 
	#GL_COUNT_UP_NV
 0x9088

	)

9841 
	#GL_COUNT_DOWN_NV
 0x9089

	)

9842 
	#GL_PATH_OBJECT_BOUNDING_BOX_NV
 0x908A

	)

9843 
	#GL_CONVEX_HULL_NV
 0x908B

	)

9844 
	#GL_BOUNDING_BOX_NV
 0x908D

	)

9845 
	#GL_TRANSLATE_X_NV
 0x908E

	)

9846 
	#GL_TRANSLATE_Y_NV
 0x908F

	)

9847 
	#GL_TRANSLATE_2D_NV
 0x9090

	)

9848 
	#GL_TRANSLATE_3D_NV
 0x9091

	)

9849 
	#GL_AFFINE_2D_NV
 0x9092

	)

9850 
	#GL_AFFINE_3D_NV
 0x9094

	)

9851 
	#GL_TRANSPOSE_AFFINE_2D_NV
 0x9096

	)

9852 
	#GL_TRANSPOSE_AFFINE_3D_NV
 0x9098

	)

9853 
	#GL_UTF8_NV
 0x909A

	)

9854 
	#GL_UTF16_NV
 0x909B

	)

9855 
	#GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
 0x909C

	)

9856 
	#GL_PATH_COMMAND_COUNT_NV
 0x909D

	)

9857 
	#GL_PATH_COORD_COUNT_NV
 0x909E

	)

9858 
	#GL_PATH_DASH_ARRAY_COUNT_NV
 0x909F

	)

9859 
	#GL_PATH_COMPUTED_LENGTH_NV
 0x90A0

	)

9860 
	#GL_PATH_FILL_BOUNDING_BOX_NV
 0x90A1

	)

9861 
	#GL_PATH_STROKE_BOUNDING_BOX_NV
 0x90A2

	)

9862 
	#GL_SQUARE_NV
 0x90A3

	)

9863 
	#GL_ROUND_NV
 0x90A4

	)

9864 
	#GL_TRIANGULAR_NV
 0x90A5

	)

9865 
	#GL_BEVEL_NV
 0x90A6

	)

9866 
	#GL_MITER_REVERT_NV
 0x90A7

	)

9867 
	#GL_MITER_TRUNCATE_NV
 0x90A8

	)

9868 
	#GL_SKIP_MISSING_GLYPH_NV
 0x90A9

	)

9869 
	#GL_USE_MISSING_GLYPH_NV
 0x90AA

	)

9870 
	#GL_PATH_ERROR_POSITION_NV
 0x90AB

	)

9871 
	#GL_ACCUM_ADJACENT_PAIRS_NV
 0x90AD

	)

9872 
	#GL_ADJACENT_PAIRS_NV
 0x90AE

	)

9873 
	#GL_FIRST_TO_REST_NV
 0x90AF

	)

9874 
	#GL_PATH_GEN_MODE_NV
 0x90B0

	)

9875 
	#GL_PATH_GEN_COEFF_NV
 0x90B1

	)

9876 
	#GL_PATH_GEN_COMPONENTS_NV
 0x90B3

	)

9877 
	#GL_PATH_STENCIL_FUNC_NV
 0x90B7

	)

9878 
	#GL_PATH_STENCIL_REF_NV
 0x90B8

	)

9879 
	#GL_PATH_STENCIL_VALUE_MASK_NV
 0x90B9

	)

9880 
	#GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
 0x90BD

	)

9881 
	#GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
 0x90BE

	)

9882 
	#GL_PATH_COVER_DEPTH_FUNC_NV
 0x90BF

	)

9883 
	#GL_PATH_DASH_OFFSET_RESET_NV
 0x90B4

	)

9884 
	#GL_MOVE_TO_RESETS_NV
 0x90B5

	)

9885 
	#GL_MOVE_TO_CONTINUES_NV
 0x90B6

	)

9886 
	#GL_CLOSE_PATH_NV
 0x00

	)

9887 
	#GL_MOVE_TO_NV
 0x02

	)

9888 
	#GL_RELATIVE_MOVE_TO_NV
 0x03

	)

9889 
	#GL_LINE_TO_NV
 0x04

	)

9890 
	#GL_RELATIVE_LINE_TO_NV
 0x05

	)

9891 
	#GL_HORIZONTAL_LINE_TO_NV
 0x06

	)

9892 
	#GL_RELATIVE_HORIZONTAL_LINE_TO_NV
 0x07

	)

9893 
	#GL_VERTICAL_LINE_TO_NV
 0x08

	)

9894 
	#GL_RELATIVE_VERTICAL_LINE_TO_NV
 0x09

	)

9895 
	#GL_QUADRATIC_CURVE_TO_NV
 0x0A

	)

9896 
	#GL_RELATIVE_QUADRATIC_CURVE_TO_NV
 0x0B

	)

9897 
	#GL_CUBIC_CURVE_TO_NV
 0x0C

	)

9898 
	#GL_RELATIVE_CUBIC_CURVE_TO_NV
 0x0D

	)

9899 
	#GL_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0E

	)

9900 
	#GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0F

	)

9901 
	#GL_SMOOTH_CUBIC_CURVE_TO_NV
 0x10

	)

9902 
	#GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
 0x11

	)

9903 
	#GL_SMALL_CCW_ARC_TO_NV
 0x12

	)

9904 
	#GL_RELATIVE_SMALL_CCW_ARC_TO_NV
 0x13

	)

9905 
	#GL_SMALL_CW_ARC_TO_NV
 0x14

	)

9906 
	#GL_RELATIVE_SMALL_CW_ARC_TO_NV
 0x15

	)

9907 
	#GL_LARGE_CCW_ARC_TO_NV
 0x16

	)

9908 
	#GL_RELATIVE_LARGE_CCW_ARC_TO_NV
 0x17

	)

9909 
	#GL_LARGE_CW_ARC_TO_NV
 0x18

	)

9910 
	#GL_RELATIVE_LARGE_CW_ARC_TO_NV
 0x19

	)

9911 
	#GL_RESTART_PATH_NV
 0xF0

	)

9912 
	#GL_DUP_FIRST_CUBIC_CURVE_TO_NV
 0xF2

	)

9913 
	#GL_DUP_LAST_CUBIC_CURVE_TO_NV
 0xF4

	)

9914 
	#GL_RECT_NV
 0xF6

	)

9915 
	#GL_CIRCULAR_CCW_ARC_TO_NV
 0xF8

	)

9916 
	#GL_CIRCULAR_CW_ARC_TO_NV
 0xFA

	)

9917 
	#GL_CIRCULAR_TANGENT_ARC_TO_NV
 0xFC

	)

9918 
	#GL_ARC_TO_NV
 0xFE

	)

9919 
	#GL_RELATIVE_ARC_TO_NV
 0xFF

	)

9920 
	#GL_BOLD_BIT_NV
 0x01

	)

9921 
	#GL_ITALIC_BIT_NV
 0x02

	)

9922 
	#GL_GLYPH_WIDTH_BIT_NV
 0x01

	)

9923 
	#GL_GLYPH_HEIGHT_BIT_NV
 0x02

	)

9924 
	#GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
 0x04

	)

9925 
	#GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
 0x08

	)

9926 
	#GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
 0x10

	)

9927 
	#GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
 0x20

	)

9928 
	#GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
 0x40

	)

9929 
	#GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
 0x80

	)

9930 
	#GL_GLYPH_HAS_KERNING_BIT_NV
 0x100

	)

9931 
	#GL_FONT_X_MIN_BOUNDS_BIT_NV
 0x00010000

	)

9932 
	#GL_FONT_Y_MIN_BOUNDS_BIT_NV
 0x00020000

	)

9933 
	#GL_FONT_X_MAX_BOUNDS_BIT_NV
 0x00040000

	)

9934 
	#GL_FONT_Y_MAX_BOUNDS_BIT_NV
 0x00080000

	)

9935 
	#GL_FONT_UNITS_PER_EM_BIT_NV
 0x00100000

	)

9936 
	#GL_FONT_ASCENDER_BIT_NV
 0x00200000

	)

9937 
	#GL_FONT_DESCENDER_BIT_NV
 0x00400000

	)

9938 
	#GL_FONT_HEIGHT_BIT_NV
 0x00800000

	)

9939 
	#GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
 0x01000000

	)

9940 
	#GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
 0x02000000

	)

9941 
	#GL_FONT_UNDERLINE_POSITION_BIT_NV
 0x04000000

	)

9942 
	#GL_FONT_UNDERLINE_THICKNESS_BIT_NV
 0x08000000

	)

9943 
	#GL_FONT_HAS_KERNING_BIT_NV
 0x10000000

	)

9944 
	#GL_ROUNDED_RECT_NV
 0xE8

	)

9945 
	#GL_RELATIVE_ROUNDED_RECT_NV
 0xE9

	)

9946 
	#GL_ROUNDED_RECT2_NV
 0xEA

	)

9947 
	#GL_RELATIVE_ROUNDED_RECT2_NV
 0xEB

	)

9948 
	#GL_ROUNDED_RECT4_NV
 0xEC

	)

9949 
	#GL_RELATIVE_ROUNDED_RECT4_NV
 0xED

	)

9950 
	#GL_ROUNDED_RECT8_NV
 0xEE

	)

9951 
	#GL_RELATIVE_ROUNDED_RECT8_NV
 0xEF

	)

9952 
	#GL_RELATIVE_RECT_NV
 0xF7

	)

9953 
	#GL_FONT_GLYPHS_AVAILABLE_NV
 0x9368

	)

9954 
	#GL_FONT_TARGET_UNAVAILABLE_NV
 0x9369

	)

9955 
	#GL_FONT_UNAVAILABLE_NV
 0x936A

	)

9956 
	#GL_FONT_UNINTELLIGIBLE_NV
 0x936B

	)

9957 
	#GL_CONIC_CURVE_TO_NV
 0x1A

	)

9958 
	#GL_RELATIVE_CONIC_CURVE_TO_NV
 0x1B

	)

9959 
	#GL_FONT_NUM_GLYPH_INDICES_BIT_NV
 0x20000000

	)

9960 
	#GL_STANDARD_FONT_FORMAT_NV
 0x936C

	)

9961 
	#GL_2_BYTES_NV
 0x1407

	)

9962 
	#GL_3_BYTES_NV
 0x1408

	)

9963 
	#GL_4_BYTES_NV
 0x1409

	)

9964 
	#GL_EYE_LINEAR_NV
 0x2400

	)

9965 
	#GL_OBJECT_LINEAR_NV
 0x2401

	)

9966 
	#GL_CONSTANT_NV
 0x8576

	)

9967 
	#GL_PATH_FOG_GEN_MODE_NV
 0x90AC

	)

9968 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

9969 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

9970 
	#GL_PATH_GEN_COLOR_FORMAT_NV
 0x90B2

	)

9971 
	#GL_PATH_PROJECTION_NV
 0x1701

	)

9972 
	#GL_PATH_MODELVIEW_NV
 0x1700

	)

9973 
	#GL_PATH_MODELVIEW_STACK_DEPTH_NV
 0x0BA3

	)

9974 
	#GL_PATH_MODELVIEW_MATRIX_NV
 0x0BA6

	)

9975 
	#GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV
 0x0D36

	)

9976 
	#GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV
 0x84E3

	)

9977 
	#GL_PATH_PROJECTION_STACK_DEPTH_NV
 0x0BA4

	)

9978 
	#GL_PATH_PROJECTION_MATRIX_NV
 0x0BA7

	)

9979 
	#GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV
 0x0D38

	)

9980 
	#GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV
 0x84E4

	)

9981 
	#GL_FRAGMENT_INPUT_NV
 0x936D

	)

9982 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENPATHSNVPROC
Ë(
	tGLsizei
 
	tønge
);

9983 (
APIENTRYP
 
	tPFNGLDELETEPATHSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tønge
);

9984 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
);

9985 (
APIENTRYP
 
	tPFNGLPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9986 (
APIENTRYP
 
	tPFNGLPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9987 (
APIENTRYP
 
	tPFNGLPATHSUBCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tcomm™dSèπ
, GLsizeò
	tcomm™dsToDñëe
, GLsizeò
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9988 (
APIENTRYP
 
	tPFNGLPATHSUBCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tco‹dSèπ
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9989 (
APIENTRYP
 
	tPFNGLPATHSTRINGNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tf‹m©
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	t∑thSåög
);

9990 (
APIENTRYP
 
	tPFNGLPATHGLYPHSNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	tty≥
, c⁄° *
	tch¨codes
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9991 (
APIENTRYP
 
	tPFNGLPATHGLYPHRANGENVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°Glyph
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9992 (
APIENTRYP
 
	tPFNGLWEIGHTPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, 
	tGLsizei
 
	tnumP©hs
, c⁄° GLuöà*
	t∑ths
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

9993 (
APIENTRYP
 
	tPFNGLCOPYPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
);

9994 (
APIENTRYP
 
	tPFNGLINTERPOLATEPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t∑thA
, GLuöà
	t∑thB
, 
	tGLÊﬂt
 
	tweight
);

9995 (
APIENTRYP
 
	tPFNGLTRANSFORMPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
, 
	tGLíum
 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9996 (
APIENTRYP
 
	tPFNGLPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	tvÆue
);

9997 (
APIENTRYP
 
	tPFNGLPATHPARAMETERINVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

9998 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9999 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

10000 (
APIENTRYP
 
	tPFNGLPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tdashCou¡
, c⁄° 
	tGLÊﬂt
 *
	tdashAºay
);

10001 (
APIENTRYP
 
	tPFNGLPATHSTENCILFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

10002 (
APIENTRYP
 
	tPFNGLPATHSTENCILDEPTHOFFSETNVPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
);

10003 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
);

10004 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
);

10005 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10006 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10007 (
APIENTRYP
 
	tPFNGLPATHCOVERDEPTHFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
);

10008 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

10009 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

10010 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10011 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10012 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

10013 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

10014 (
APIENTRYP
 
	tPFNGLGETPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLubyã
 *
	tcomm™ds
);

10015 (
APIENTRYP
 
	tPFNGLGETPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tco‹ds
);

10016 (
APIENTRYP
 
	tPFNGLGETPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tdashAºay
);

10017 (
APIENTRYP
 
	tPFNGLGETPATHMETRICSNVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

10018 (
APIENTRYP
 
	tPFNGLGETPATHMETRICRANGENVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLuöt
 
	tfú°P©hName
, 
	tGLsizei
 
	tnumP©hs
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

10019 (
APIENTRYP
 
	tPFNGLGETPATHSPACINGNVPROC
Ë(
	tGLíum
 
	t∑thLi°Mode
, 
	tGLsizei
 
	tnumP©hs
, GLíum 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLÊﬂt
 
	tadv™˚SˇÀ
, GLÊﬂà
	tkînögSˇÀ
, GLíum 
	tå™sf‹mTy≥
, GLÊﬂà*
	tªtu∫edS∑cög
);

10020 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, GLuöà
	tmask
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10021 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10022 
GLÊﬂt
 (
	tAPIENTRYP
 
	tPFNGLGETPATHLENGTHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
);

10023 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLPOINTALONGPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
, 
	tGLÊﬂt
 
	tdi°™˚
, GLÊﬂà*
	tx
, GLÊﬂà*
	ty
, GLÊﬂà*
	tèngítX
, GLÊﬂà*
	tèngítY
);

10024 (
APIENTRYP
 
	tPFNGLMATRIXLOAD3X2FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10025 (
APIENTRYP
 
	tPFNGLMATRIXLOAD3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10026 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSE3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10027 (
APIENTRYP
 
	tPFNGLMATRIXMULT3X2FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10028 (
APIENTRYP
 
	tPFNGLMATRIXMULT3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10029 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSE3X3FNVPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

10030 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tcovîMode
);

10031 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, 
	tGLíum
 
	tcovîMode
);

10032 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10033 (
APIENTRYP
 
	tPFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

10034 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLPATHGLYPHINDEXRANGENVPROC
Ë(
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLuöt
 
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
, GLuöà
	tba£AndCou¡
[2]);

10035 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLPATHGLYPHINDEXARRAYNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°GlyphIndex
, 
	tGLsizei
 
	tnumGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

10036 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, 
	tGLsizeùå
 
	tf⁄tSize
, c⁄° *
	tf⁄tD©a
, 
	tGLsizei
 
	tÁ˚Index
, GLuöà
	tfú°GlyphIndex
, GLsizeò
	tnumGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

10037 (
APIENTRYP
 
	tPFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLíum
 
	tgíMode
, GLöà
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

10038 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEFVNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLÊﬂt
 *
	t∑øms
);

10039 (
APIENTRYP
 
	tPFNGLPATHCOLORGENNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	tgíMode
, GLíum 
	tcﬁ‹F‹m©
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

10040 (
APIENTRYP
 
	tPFNGLPATHTEXGENNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	tgíMode
, 
	tGLöt
 
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

10041 (
APIENTRYP
 
	tPFNGLPATHFOGGENNVPROC
Ë(
	tGLíum
 
	tgíMode
);

10042 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENIVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

10043 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENFVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

10044 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENIVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

10045 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENFVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

10046 #ifde‡
GL_GLEXT_PROTOTYPES


10047 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíP©hsNV
 (
GLsizei
 
ønge
);

10048 
GLAPI
 
APIENTRY
 
glDñëeP©hsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
ønge
);

10049 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsP©hNV
 (
GLuöt
 
∑th
);

10050 
GLAPI
 
APIENTRY
 
glP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10051 
GLAPI
 
APIENTRY
 
glP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10052 
GLAPI
 
APIENTRY
 
glP©hSubComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
comm™dSèπ
, GLsizeò
comm™dsToDñëe
, GLsizeò
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10053 
GLAPI
 
APIENTRY
 
glP©hSubCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
co‹dSèπ
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

10054 
GLAPI
 
APIENTRY
 
glP©hSåögNV
 (
GLuöt
 
∑th
, 
GLíum
 
f‹m©
, 
GLsizei
 
Àngth
, c⁄° *
∑thSåög
);

10055 
GLAPI
 
APIENTRY
 
glP©hGlyphsNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLsizei
 
numGlyphs
, GLíum 
ty≥
, c⁄° *
ch¨codes
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10056 
GLAPI
 
APIENTRY
 
glP©hGlyphR™geNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°Glyph
, 
GLsizei
 
numGlyphs
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10057 
GLAPI
 
APIENTRY
 
glWeightP©hsNV
 (
GLuöt
 
ªsu…P©h
, 
GLsizei
 
numP©hs
, c⁄° GLuöà*
∑ths
, c⁄° 
GLÊﬂt
 *
weights
);

10058 
GLAPI
 
APIENTRY
 
glC›yP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
);

10059 
GLAPI
 
APIENTRY
 
glI¡îpﬁ©eP©hsNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
∑thA
, GLuöà
∑thB
, 
GLÊﬂt
 
weight
);

10060 
GLAPI
 
APIENTRY
 
glTønsf‹mP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
, 
GLíum
 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10061 
GLAPI
 
APIENTRY
 
glP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
vÆue
);

10062 
GLAPI
 
APIENTRY
 
glP©hP¨amëîiNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

10063 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆue
);

10064 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

10065 
GLAPI
 
APIENTRY
 
glP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLsizei
 
dashCou¡
, c⁄° 
GLÊﬂt
 *
dashAºay
);

10066 
GLAPI
 
APIENTRY
 
glP©hSãncûFuncNV
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

10067 
GLAPI
 
APIENTRY
 
glP©hSãncûDïthOff£tNV
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

10068 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
);

10069 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
);

10070 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10071 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10072 
GLAPI
 
APIENTRY
 
glP©hCovîDïthFuncNV
 (
GLíum
 
func
);

10073 
GLAPI
 
APIENTRY
 
glCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

10074 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

10075 
GLAPI
 
APIENTRY
 
glCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10076 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10077 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 *
vÆue
);

10078 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
vÆue
);

10079 
GLAPI
 
APIENTRY
 
glGëP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLubyã
 *
comm™ds
);

10080 
GLAPI
 
APIENTRY
 
glGëP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
co‹ds
);

10081 
GLAPI
 
APIENTRY
 
glGëP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
dashAºay
);

10082 
GLAPI
 
APIENTRY
 
glGëP©hMëricsNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

10083 
GLAPI
 
APIENTRY
 
glGëP©hMëricR™geNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLuöt
 
fú°P©hName
, 
GLsizei
 
numP©hs
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

10084 
GLAPI
 
APIENTRY
 
glGëP©hS∑cögNV
 (
GLíum
 
∑thLi°Mode
, 
GLsizei
 
numP©hs
, GLíum 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLÊﬂt
 
adv™˚SˇÀ
, GLÊﬂà
kînögSˇÀ
, GLíum 
å™sf‹mTy≥
, GLÊﬂà*
ªtu∫edS∑cög
);

10085 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInFûlP©hNV
 (
GLuöt
 
∑th
, GLuöà
mask
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10086 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10087 
GLAPI
 
GLÊﬂt
 
APIENTRY
 
glGëP©hLígthNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
);

10088 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glPoötAl⁄gP©hNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
, 
GLÊﬂt
 
di°™˚
, GLÊﬂà*
x
, GLÊﬂà*
y
, GLÊﬂà*
èngítX
, GLÊﬂà*
èngítY
);

10089 
GLAPI
 
APIENTRY
 
glM©rixLﬂd3x2fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10090 
GLAPI
 
APIENTRY
 
glM©rixLﬂd3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10091 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10092 
GLAPI
 
APIENTRY
 
glM©rixMu…3x2fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10093 
GLAPI
 
APIENTRY
 
glM©rixMu…3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10094 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£3x3fNV
 (
GLíum
 
m©rixMode
, c⁄° 
GLÊﬂt
 *
m
);

10095 
GLAPI
 
APIENTRY
 
glSãncûThíCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
, GLíum 
covîMode
);

10096 
GLAPI
 
APIENTRY
 
glSãncûThíCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, 
GLíum
 
covîMode
);

10097 
GLAPI
 
APIENTRY
 
glSãncûThíCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10098 
GLAPI
 
APIENTRY
 
glSãncûThíCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

10099 
GLAPI
 
GLíum
 
APIENTRY
 
glP©hGlyphIndexR™geNV
 (GLíum 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLuöt
 
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
, GLuöà
ba£AndCou¡
[2]);

10100 
GLAPI
 
GLíum
 
APIENTRY
 
glP©hGlyphIndexAºayNV
 (
GLuöt
 
fú°P©hName
, GLíum 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°GlyphIndex
, 
GLsizei
 
numGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10101 
GLAPI
 
GLíum
 
APIENTRY
 
glP©hMem‹yGlyphIndexAºayNV
 (
GLuöt
 
fú°P©hName
, GLíum 
f⁄tT¨gë
, 
GLsizeùå
 
f⁄tSize
, c⁄° *
f⁄tD©a
, 
GLsizei
 
Á˚Index
, GLuöà
fú°GlyphIndex
, GLsizeò
numGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

10102 
GLAPI
 
APIENTRY
 
glProgømP©hFøgmítI≈utGíNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLíum
 
gíMode
, GLöà
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

10103 
GLAPI
 
APIENTRY
 
glGëProgømResour˚fvNV
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLÊﬂt
 *
∑øms
);

10104 
GLAPI
 
APIENTRY
 
glP©hCﬁ‹GíNV
 (
GLíum
 
cﬁ‹
, GLíum 
gíMode
, GLíum 
cﬁ‹F‹m©
, c⁄° 
GLÊﬂt
 *
c€ffs
);

10105 
GLAPI
 
APIENTRY
 
glP©hTexGíNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
gíMode
, 
GLöt
 
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

10106 
GLAPI
 
APIENTRY
 
glP©hFogGíNV
 (
GLíum
 
gíMode
);

10107 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GíivNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

10108 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GífvNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

10109 
GLAPI
 
APIENTRY
 
glGëP©hTexGíivNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

10110 
GLAPI
 
APIENTRY
 
glGëP©hTexGífvNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

10114 #i‚de‡
GL_NV_∑th_ªndîög_sh¨ed_edge


10115 
	#GL_NV_∑th_ªndîög_sh¨ed_edge
 1

	)

10116 
	#GL_SHARED_EDGE_NV
 0xC0

	)

10119 #i‚de‡
GL_NV_pixñ_d©a_ønge


10120 
	#GL_NV_pixñ_d©a_ønge
 1

	)

10121 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

10122 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

10123 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

10124 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

10125 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

10126 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

10127 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

10128 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

10129 #ifde‡
GL_GLEXT_PROTOTYPES


10130 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° *
poöãr
);

10131 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
 
èrgë
);

10135 #i‚de‡
GL_NV_poöt_•rôe


10136 
	#GL_NV_poöt_•rôe
 1

	)

10137 
	#GL_POINT_SPRITE_NV
 0x8861

	)

10138 
	#GL_COORD_REPLACE_NV
 0x8862

	)

10139 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

10140 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10141 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10142 #ifde‡
GL_GLEXT_PROTOTYPES


10143 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10144 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10148 #i‚de‡
GL_NV_¥e£¡_video


10149 
	#GL_NV_¥e£¡_video
 1

	)

10150 
	#GL_FRAME_NV
 0x8E26

	)

10151 
	#GL_FIELDS_NV
 0x8E27

	)

10152 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

10153 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

10154 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

10155 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

10156 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEKEYEDNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLuöà
	tkey0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLuöà
	tkey1
);

10157 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEDUALFILLNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLíum 
	tèrgë2
, GLuöà
	tfûl2
, GLíum 
	tèrgë3
, GLuöà
	tfûl3
);

10158 (
APIENTRYP
 
	tPFNGLGETVIDEOIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10159 (
APIENTRYP
 
	tPFNGLGETVIDEOUIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

10160 (
APIENTRYP
 
	tPFNGLGETVIDEOI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

10161 (
APIENTRYP
 
	tPFNGLGETVIDEOUI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10162 #ifde‡
GL_GLEXT_PROTOTYPES


10163 
GLAPI
 
APIENTRY
 
glPª£¡FømeKeyedNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLuöà
key0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLuöà
key1
);

10164 
GLAPI
 
APIENTRY
 
glPª£¡FømeDuÆFûlNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLíum 
èrgë2
, GLuöà
fûl2
, GLíum 
èrgë3
, GLuöà
fûl3
);

10165 
GLAPI
 
APIENTRY
 
glGëVideoivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10166 
GLAPI
 
APIENTRY
 
glGëVideouivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

10167 
GLAPI
 
APIENTRY
 
glGëVideoi64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

10168 
GLAPI
 
APIENTRY
 
glGëVideoui64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10172 #i‚de‡
GL_NV_¥imôive_ª°¨t


10173 
	#GL_NV_¥imôive_ª°¨t
 1

	)

10174 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

10175 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

10176 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

10177 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

10178 #ifde‡
GL_GLEXT_PROTOTYPES


10179 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

10180 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
 
ödex
);

10184 #i‚de‡
GL_NV_ªgi°î_comböîs


10185 
	#GL_NV_ªgi°î_comböîs
 1

	)

10186 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

10187 
	#GL_VARIABLE_A_NV
 0x8523

	)

10188 
	#GL_VARIABLE_B_NV
 0x8524

	)

10189 
	#GL_VARIABLE_C_NV
 0x8525

	)

10190 
	#GL_VARIABLE_D_NV
 0x8526

	)

10191 
	#GL_VARIABLE_E_NV
 0x8527

	)

10192 
	#GL_VARIABLE_F_NV
 0x8528

	)

10193 
	#GL_VARIABLE_G_NV
 0x8529

	)

10194 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

10195 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

10196 
	#GL_SPARE0_NV
 0x852E

	)

10197 
	#GL_SPARE1_NV
 0x852F

	)

10198 
	#GL_DISCARD_NV
 0x8530

	)

10199 
	#GL_E_TIMES_F_NV
 0x8531

	)

10200 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

10201 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

10202 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

10203 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

10204 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

10205 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

10206 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

10207 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

10208 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

10209 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

10210 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

10211 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

10212 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

10213 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

10214 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

10215 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

10216 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

10217 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

10218 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

10219 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

10220 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

10221 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

10222 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

10223 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

10224 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

10225 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

10226 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

10227 
	#GL_COMBINER0_NV
 0x8550

	)

10228 
	#GL_COMBINER1_NV
 0x8551

	)

10229 
	#GL_COMBINER2_NV
 0x8552

	)

10230 
	#GL_COMBINER3_NV
 0x8553

	)

10231 
	#GL_COMBINER4_NV
 0x8554

	)

10232 
	#GL_COMBINER5_NV
 0x8555

	)

10233 
	#GL_COMBINER6_NV
 0x8556

	)

10234 
	#GL_COMBINER7_NV
 0x8557

	)

10235 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10236 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10237 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10238 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10239 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

10240 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

10241 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

10242 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10243 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10244 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10245 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10246 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10247 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10248 #ifde‡
GL_GLEXT_PROTOTYPES


10249 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10250 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10251 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10252 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10253 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

10254 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
abOuçut
, GLíum 
cdOuçut
, GLíum 
sumOuçut
, GLíum 
sˇÀ
, GLíum 
büs
, 
GLboﬁón
 
abDŸProdu˘
, GLboﬁó¿
cdDŸProdu˘
, GLboﬁó¿
muxSum
);

10255 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

10256 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10257 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10258 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10259 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10260 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10261 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10265 #i‚de‡
GL_NV_ªgi°î_comböîs2


10266 
	#GL_NV_ªgi°î_comböîs2
 1

	)

10267 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

10268 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10269 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10270 #ifde‡
GL_GLEXT_PROTOTYPES


10271 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10272 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10276 #i‚de‡
GL_NV_robu°√ss_video_mem‹y_purge


10277 
	#GL_NV_robu°√ss_video_mem‹y_purge
 1

	)

10278 
	#GL_PURGED_CONTEXT_RESET_NV
 0x92BB

	)

10281 #i‚de‡
GL_NV_ßm∂e_loˇti⁄s


10282 
	#GL_NV_ßm∂e_loˇti⁄s
 1

	)

10283 
	#GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV
 0x933D

	)

10284 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV
 0x933E

	)

10285 
	#GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV
 0x933F

	)

10286 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV
 0x9340

	)

10287 
	#GL_SAMPLE_LOCATION_NV
 0x8E50

	)

10288 
	#GL_PROGRAMMABLE_SAMPLE_LOCATION_NV
 0x9341

	)

10289 
	#GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV
 0x9342

	)

10290 
	#GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV
 0x9343

	)

10291 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10292 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, GLuöà
	t°¨t
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10293 (
APIENTRYP
 
	tPFNGLRESOLVEDEPTHVALUESNVPROC
) ();

10294 #ifde‡
GL_GLEXT_PROTOTYPES


10295 
GLAPI
 
APIENTRY
 
glFømebuf„rSam∂eLoˇti⁄sfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10296 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rSam∂eLoˇti⁄sfvNV
 (
GLuöt
 
‰amebuf„r
, GLuöà
°¨t
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10297 
GLAPI
 
APIENTRY
 
glResﬁveDïthVÆuesNV
 ();

10301 #i‚de‡
GL_NV_ßm∂e_mask_ovîride_covîage


10302 
	#GL_NV_ßm∂e_mask_ovîride_covîage
 1

	)

10305 #i‚de‡
GL_NV_shadî_©omic_cou¡îs


10306 
	#GL_NV_shadî_©omic_cou¡îs
 1

	)

10309 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


10310 
	#GL_NV_shadî_©omic_Êﬂt
 1

	)

10313 #i‚de‡
GL_NV_shadî_©omic_Êﬂt64


10314 
	#GL_NV_shadî_©omic_Êﬂt64
 1

	)

10317 #i‚de‡
GL_NV_shadî_©omic_Â16_ve˘‹


10318 
	#GL_NV_shadî_©omic_Â16_ve˘‹
 1

	)

10321 #i‚de‡
GL_NV_shadî_©omic_öt64


10322 
	#GL_NV_shadî_©omic_öt64
 1

	)

10325 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


10326 
	#GL_NV_shadî_buf„r_lﬂd
 1

	)

10327 
	#GL_BUFFER_GPU_ADDRESS_NV
 0x8F1D

	)

10328 
	#GL_GPU_ADDRESS_NV
 0x8F34

	)

10329 
	#GL_MAX_SHADER_BUFFER_ADDRESS_NV
 0x8F35

	)

10330 (
APIENTRYP
 
	tPFNGLMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

10331 (
APIENTRYP
 
	tPFNGLMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

10332 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

10333 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

10334 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10335 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

10336 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10337 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10338 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt64EXT
 *
	tªsu…
);

10339 (
APIENTRYP
 
	tPFNGLUNIFORMUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

10340 (
APIENTRYP
 
	tPFNGLUNIFORMUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

10341 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

10342 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

10343 #ifde‡
GL_GLEXT_PROTOTYPES


10344 
GLAPI
 
APIENTRY
 
glMakeBuf„rResidítNV
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

10345 
GLAPI
 
APIENTRY
 
glMakeBuf„rN⁄ResidítNV
 (
GLíum
 
èrgë
);

10346 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rResidítNV
 (
GLíum
 
èrgë
);

10347 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

10348 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rN⁄ResidítNV
 (
GLuöt
 
buf„r
);

10349 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
);

10350 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîui64vNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10351 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîui64vNV
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10352 
GLAPI
 
APIENTRY
 
glGëI¡egîui64vNV
 (
GLíum
 
vÆue
, 
GLuöt64EXT
 *
ªsu…
);

10353 
GLAPI
 
APIENTRY
 
glUnif‹mui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

10354 
GLAPI
 
APIENTRY
 
glUnif‹mui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

10355 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

10356 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

10360 #i‚de‡
GL_NV_shadî_buf„r_°‹e


10361 
	#GL_NV_shadî_buf„r_°‹e
 1

	)

10362 
	#GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
 0x00000010

	)

10365 #i‚de‡
GL_NV_shadî_°‹age_buf„r_obje˘


10366 
	#GL_NV_shadî_°‹age_buf„r_obje˘
 1

	)

10369 #i‚de‡
GL_NV_shadî_thªad_group


10370 
	#GL_NV_shadî_thªad_group
 1

	)

10371 
	#GL_WARP_SIZE_NV
 0x9339

	)

10372 
	#GL_WARPS_PER_SM_NV
 0x933A

	)

10373 
	#GL_SM_COUNT_NV
 0x933B

	)

10376 #i‚de‡
GL_NV_shadî_thªad_shufÊe


10377 
	#GL_NV_shadî_thªad_shufÊe
 1

	)

10380 #i‚de‡
GL_NV_°îeo_võw_ªndîög


10381 
	#GL_NV_°îeo_võw_ªndîög
 1

	)

10384 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


10385 
	#GL_NV_ãs£Œ©i⁄_¥ogøm5
 1

	)

10386 
	#GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
 0x86D8

	)

10387 
	#GL_TESS_CONTROL_PROGRAM_NV
 0x891E

	)

10388 
	#GL_TESS_EVALUATION_PROGRAM_NV
 0x891F

	)

10389 
	#GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
 0x8C74

	)

10390 
	#GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
 0x8C75

	)

10393 #i‚de‡
GL_NV_ãxgí_emboss


10394 
	#GL_NV_ãxgí_emboss
 1

	)

10395 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

10396 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

10397 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

10400 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


10401 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

10402 
	#GL_NORMAL_MAP_NV
 0x8511

	)

10403 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

10406 #i‚de‡
GL_NV_ãxtuª_b¨rõr


10407 
	#GL_NV_ãxtuª_b¨rõr
 1

	)

10408 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERNVPROC
) ();

10409 #ifde‡
GL_GLEXT_PROTOTYPES


10410 
GLAPI
 
APIENTRY
 
glTextuªB¨rõrNV
 ();

10414 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


10415 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

10418 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


10419 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

10420 
	#GL_COMBINE4_NV
 0x8503

	)

10421 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

10422 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

10423 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

10424 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

10427 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


10428 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

10429 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

10432 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


10433 
	#GL_NV_ãxtuª_mu…ißm∂e
 1

	)

10434 
	#GL_TEXTURE_COVERAGE_SAMPLES_NV
 0x9045

	)

10435 
	#GL_TEXTURE_COLOR_SAMPLES_NV
 0x9046

	)

10436 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10437 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10438 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10439 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10440 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10441 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

10442 #ifde‡
GL_GLEXT_PROTOTYPES


10443 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10444 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10445 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10446 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10447 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10448 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

10452 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


10453 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

10454 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

10455 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

10456 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

10457 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

10460 #i‚de‡
GL_NV_ãxtuª_shadî


10461 
	#GL_NV_ãxtuª_shadî
 1

	)

10462 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

10463 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

10464 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

10465 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

10466 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

10467 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

10468 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

10469 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

10470 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

10471 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

10472 
	#GL_CULL_MODES_NV
 0x86E0

	)

10473 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

10474 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

10475 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

10476 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 0x86E1

	)

10477 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 0x86E2

	)

10478 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 0x86E3

	)

10479 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

10480 
	#GL_CONST_EYE_NV
 0x86E5

	)

10481 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

10482 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

10483 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

10484 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

10485 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

10486 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

10487 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

10488 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

10489 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

10490 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

10491 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

10492 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

10493 
	#GL_HILO_NV
 0x86F4

	)

10494 
	#GL_DSDT_NV
 0x86F5

	)

10495 
	#GL_DSDT_MAG_NV
 0x86F6

	)

10496 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

10497 
	#GL_HILO16_NV
 0x86F8

	)

10498 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

10499 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

10500 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

10501 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

10502 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

10503 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

10504 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

10505 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

10506 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

10507 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

10508 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

10509 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

10510 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

10511 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

10512 
	#GL_DSDT8_NV
 0x8709

	)

10513 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

10514 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

10515 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

10516 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

10517 
	#GL_HI_SCALE_NV
 0x870E

	)

10518 
	#GL_LO_SCALE_NV
 0x870F

	)

10519 
	#GL_DS_SCALE_NV
 0x8710

	)

10520 
	#GL_DT_SCALE_NV
 0x8711

	)

10521 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

10522 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

10523 
	#GL_HI_BIAS_NV
 0x8714

	)

10524 
	#GL_LO_BIAS_NV
 0x8715

	)

10525 
	#GL_DS_BIAS_NV
 0x8716

	)

10526 
	#GL_DT_BIAS_NV
 0x8717

	)

10527 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

10528 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

10529 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

10530 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

10531 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

10532 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

10533 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

10534 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

10537 #i‚de‡
GL_NV_ãxtuª_shadî2


10538 
	#GL_NV_ãxtuª_shadî2
 1

	)

10539 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

10542 #i‚de‡
GL_NV_ãxtuª_shadî3


10543 
	#GL_NV_ãxtuª_shadî3
 1

	)

10544 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

10545 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

10546 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

10547 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

10548 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

10549 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

10550 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

10551 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

10552 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

10553 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

10554 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

10555 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

10556 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

10557 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

10558 
	#GL_HILO8_NV
 0x885E

	)

10559 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

10560 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

10563 #i‚de‡
GL_NV_å™sf‹m_„edback


10564 
	#GL_NV_å™sf‹m_„edback
 1

	)

10565 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

10566 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

10567 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

10568 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

10569 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

10570 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

10571 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

10572 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

10573 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

10574 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

10575 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

10576 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

10577 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

10578 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

10579 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

10580 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

10581 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

10582 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

10583 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

10584 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
 0x8C8A

	)

10585 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

10586 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

10587 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

10588 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

10589 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

10590 
	#GL_LAYER_NV
 0x8DAA

	)

10591 
	#GL_NEXT_BUFFER_NV
 -2

	)

10592 
	#GL_SKIP_COMPONENTS4_NV
 -3

	)

10593 
	#GL_SKIP_COMPONENTS3_NV
 -4

	)

10594 
	#GL_SKIP_COMPONENTS2_NV
 -5

	)

10595 
	#GL_SKIP_COMPONENTS1_NV
 -6

	)

10596 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

10597 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

10598 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

10599 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

10600 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

10601 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

10602 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tloˇti⁄s
, 
	tGLíum
 
	tbuf„rMode
);

10603 (
APIENTRYP
 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

10604 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

10605 (
APIENTRYP
 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

10606 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

10607 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, GLsizeò
	tnbuf„rs
, c⁄° GLöà*
	tbuf°ªams
, 
	tGLíum
 
	tbuf„rMode
);

10608 #ifde‡
GL_GLEXT_PROTOTYPES


10609 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackNV
 (
GLíum
 
¥imôiveMode
);

10610 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackNV
 ();

10611 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, 
GLíum
 
buf„rMode
);

10612 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

10613 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

10614 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£NV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

10615 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsNV
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
loˇti⁄s
, 
GLíum
 
buf„rMode
);

10616 
GLAPI
 
APIENTRY
 
glA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

10617 
GLAPI
 
GLöt
 
APIENTRY
 
glGëV¨yögLoˇti⁄NV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

10618 
GLAPI
 
APIENTRY
 
glGëA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

10619 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLöt
 *
loˇti⁄
);

10620 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackSåómAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, GLsizeò
nbuf„rs
, c⁄° GLöà*
buf°ªams
, 
GLíum
 
buf„rMode
);

10624 #i‚de‡
GL_NV_å™sf‹m_„edback2


10625 
	#GL_NV_å™sf‹m_„edback2
 1

	)

10626 
	#GL_TRANSFORM_FEEDBACK_NV
 0x8E22

	)

10627 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
 0x8E23

	)

10628 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
 0x8E24

	)

10629 
	#GL_TRANSFORM_FEEDBACK_BINDING_NV
 0x8E25

	)

10630 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

10631 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

10632 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

10633 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKNVPROC
Ë(
	tGLuöt
 
	tid
);

10634 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKNVPROC
) ();

10635 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKNVPROC
) ();

10636 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

10637 #ifde‡
GL_GLEXT_PROTOTYPES


10638 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdbackNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

10639 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

10640 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

10641 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdbackNV
 (
GLuöt
 
id
);

10642 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdbackNV
 ();

10643 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdbackNV
 ();

10644 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackNV
 (
GLíum
 
mode
, 
GLuöt
 
id
);

10648 #i‚de‡
GL_NV_unif‹m_buf„r_unifõd_mem‹y


10649 
	#GL_NV_unif‹m_buf„r_unifõd_mem‹y
 1

	)

10650 
	#GL_UNIFORM_BUFFER_UNIFIED_NV
 0x936E

	)

10651 
	#GL_UNIFORM_BUFFER_ADDRESS_NV
 0x936F

	)

10652 
	#GL_UNIFORM_BUFFER_LENGTH_NV
 0x9370

	)

10655 #i‚de‡
GL_NV_vd∑u_öãr›


10656 
	#GL_NV_vd∑u_öãr›
 1

	)

10657 
GLöçå
 
	tGLvd∑uSurÁ˚NV
;

10658 
	#GL_SURFACE_STATE_NV
 0x86EB

	)

10659 
	#GL_SURFACE_REGISTERED_NV
 0x86FD

	)

10660 
	#GL_SURFACE_MAPPED_NV
 0x8700

	)

10661 
	#GL_WRITE_DISCARD_NV
 0x88BE

	)

10662 (
APIENTRYP
 
	tPFNGLVDPAUINITNVPROC
Ë(c⁄° *
	tvdpDevi˚
, c⁄° *
	tgëProcAddªss
);

10663 (
APIENTRYP
 
	tPFNGLVDPAUFININVPROC
) ();

10664 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTERVIDEOSURFACENVPROC
Ë(c⁄° *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

10665 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
Ë(c⁄° *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

10666 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLVDPAUISSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

10667 (
APIENTRYP
 
	tPFNGLVDPAUUNREGISTERSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

10668 (
APIENTRYP
 
	tPFNGLVDPAUGETSURFACEIVNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

10669 (
APIENTRYP
 
	tPFNGLVDPAUSURFACEACCESSNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	tac˚ss
);

10670 (
APIENTRYP
 
	tPFNGLVDPAUMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚s
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

10671 (
APIENTRYP
 
	tPFNGLVDPAUUNMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

10672 #ifde‡
GL_GLEXT_PROTOTYPES


10673 
GLAPI
 
APIENTRY
 
glVDPAUInôNV
 (c⁄° *
vdpDevi˚
, c⁄° *
gëProcAddªss
);

10674 
GLAPI
 
APIENTRY
 
glVDPAUFöiNV
 ();

10675 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îVideoSurÁ˚NV
 (c⁄° *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

10676 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îOuçutSurÁ˚NV
 (c⁄° *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

10677 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glVDPAUIsSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

10678 
GLAPI
 
APIENTRY
 
glVDPAUUƒegi°îSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

10679 
GLAPI
 
APIENTRY
 
glVDPAUGëSurÁ˚ivNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

10680 
GLAPI
 
APIENTRY
 
glVDPAUSurÁ˚Ac˚ssNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
ac˚ss
);

10681 
GLAPI
 
APIENTRY
 
glVDPAUM≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚s
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

10682 
GLAPI
 
APIENTRY
 
glVDPAUUnm≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

10686 #i‚de‡
GL_NV_vîãx_¨øy_ønge


10687 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

10688 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

10689 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

10690 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

10691 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

10692 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

10693 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

10694 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

10695 #ifde‡
GL_GLEXT_PROTOTYPES


10696 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

10697 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
 
Àngth
, c⁄° *
poöãr
);

10701 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


10702 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

10703 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

10706 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


10707 
	#GL_NV_vîãx_©åib_öãgî_64bô
 1

	)

10708 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
);

10709 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

10710 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

10711 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

10712 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10713 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10714 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10715 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

10716 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

10717 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

10718 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

10719 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

10720 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10721 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10722 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10723 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

10724 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

10725 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10726 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10727 #ifde‡
GL_GLEXT_PROTOTYPES


10728 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
);

10729 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

10730 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

10731 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

10732 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10733 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10734 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10735 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

10736 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

10737 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

10738 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

10739 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

10740 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10741 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10742 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10743 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

10744 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLi64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

10745 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

10746 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10750 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


10751 
	#GL_NV_vîãx_buf„r_unifõd_mem‹y
 1

	)

10752 
	#GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
 0x8F1E

	)

10753 
	#GL_ELEMENT_ARRAY_UNIFIED_NV
 0x8F1F

	)

10754 
	#GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
 0x8F20

	)

10755 
	#GL_VERTEX_ARRAY_ADDRESS_NV
 0x8F21

	)

10756 
	#GL_NORMAL_ARRAY_ADDRESS_NV
 0x8F22

	)

10757 
	#GL_COLOR_ARRAY_ADDRESS_NV
 0x8F23

	)

10758 
	#GL_INDEX_ARRAY_ADDRESS_NV
 0x8F24

	)

10759 
	#GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
 0x8F25

	)

10760 
	#GL_EDGE_FLAG_ARRAY_ADDRESS_NV
 0x8F26

	)

10761 
	#GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
 0x8F27

	)

10762 
	#GL_FOG_COORD_ARRAY_ADDRESS_NV
 0x8F28

	)

10763 
	#GL_ELEMENT_ARRAY_ADDRESS_NV
 0x8F29

	)

10764 
	#GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
 0x8F2A

	)

10765 
	#GL_VERTEX_ARRAY_LENGTH_NV
 0x8F2B

	)

10766 
	#GL_NORMAL_ARRAY_LENGTH_NV
 0x8F2C

	)

10767 
	#GL_COLOR_ARRAY_LENGTH_NV
 0x8F2D

	)

10768 
	#GL_INDEX_ARRAY_LENGTH_NV
 0x8F2E

	)

10769 
	#GL_TEXTURE_COORD_ARRAY_LENGTH_NV
 0x8F2F

	)

10770 
	#GL_EDGE_FLAG_ARRAY_LENGTH_NV
 0x8F30

	)

10771 
	#GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
 0x8F31

	)

10772 
	#GL_FOG_COORD_ARRAY_LENGTH_NV
 0x8F32

	)

10773 
	#GL_ELEMENT_ARRAY_LENGTH_NV
 0x8F33

	)

10774 
	#GL_DRAW_INDIRECT_UNIFIED_NV
 0x8F40

	)

10775 
	#GL_DRAW_INDIRECT_ADDRESS_NV
 0x8F41

	)

10776 
	#GL_DRAW_INDIRECT_LENGTH_NV
 0x8F42

	)

10777 (
APIENTRYP
 
	tPFNGLBUFFERADDRESSRANGENVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	taddªss
, 
	tGLsizeùå
 
	tÀngth
);

10778 (
APIENTRYP
 
	tPFNGLVERTEXFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10779 (
APIENTRYP
 
	tPFNGLNORMALFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10780 (
APIENTRYP
 
	tPFNGLCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10781 (
APIENTRYP
 
	tPFNGLINDEXFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10782 (
APIENTRYP
 
	tPFNGLTEXCOORDFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10783 (
APIENTRYP
 
	tPFNGLEDGEFLAGFORMATNVPROC
Ë(
	tGLsizei
 
	t°ride
);

10784 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10785 (
APIENTRYP
 
	tPFNGLFOGCOORDFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10786 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
);

10787 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

10788 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64I_VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 *
	tªsu…
);

10789 #ifde‡
GL_GLEXT_PROTOTYPES


10790 
GLAPI
 
APIENTRY
 
glBuf„rAddªssR™geNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 
addªss
, 
GLsizeùå
 
Àngth
);

10791 
GLAPI
 
APIENTRY
 
glVîãxF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10792 
GLAPI
 
APIENTRY
 
glN‹mÆF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10793 
GLAPI
 
APIENTRY
 
glCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10794 
GLAPI
 
APIENTRY
 
glIndexF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10795 
GLAPI
 
APIENTRY
 
glTexCo‹dF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10796 
GLAPI
 
APIENTRY
 
glEdgeFœgF‹m©NV
 (
GLsizei
 
°ride
);

10797 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10798 
GLAPI
 
APIENTRY
 
glFogCo‹dF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10799 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
);

10800 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

10801 
GLAPI
 
APIENTRY
 
glGëI¡egîui64i_vNV
 (
GLíum
 
vÆue
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 *
ªsu…
);

10805 #i‚de‡
GL_NV_vîãx_¥ogøm


10806 
	#GL_NV_vîãx_¥ogøm
 1

	)

10807 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

10808 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

10809 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

10810 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

10811 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

10812 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

10813 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

10814 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

10815 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

10816 
	#GL_IDENTITY_NV
 0x862A

	)

10817 
	#GL_INVERSE_NV
 0x862B

	)

10818 
	#GL_TRANSPOSE_NV
 0x862C

	)

10819 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

10820 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

10821 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

10822 
	#GL_MATRIX0_NV
 0x8630

	)

10823 
	#GL_MATRIX1_NV
 0x8631

	)

10824 
	#GL_MATRIX2_NV
 0x8632

	)

10825 
	#GL_MATRIX3_NV
 0x8633

	)

10826 
	#GL_MATRIX4_NV
 0x8634

	)

10827 
	#GL_MATRIX5_NV
 0x8635

	)

10828 
	#GL_MATRIX6_NV
 0x8636

	)

10829 
	#GL_MATRIX7_NV
 0x8637

	)

10830 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

10831 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

10832 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

10833 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

10834 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

10835 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

10836 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

10837 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

10838 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

10839 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

10840 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

10841 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

10842 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

10843 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

10844 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

10845 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

10846 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

10847 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

10848 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

10849 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

10850 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

10851 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

10852 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

10853 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

10854 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

10855 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

10856 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

10857 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

10858 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

10859 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

10860 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

10861 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

10862 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

10863 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

10864 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

10865 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

10866 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

10867 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

10868 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

10869 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

10870 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

10871 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

10872 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

10873 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

10874 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

10875 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

10876 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

10877 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

10878 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

10879 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

10880 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

10881 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

10882 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

10883 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

10884 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

10885 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

10886 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

10887 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

10888 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

10889 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

10890 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

10891 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

10892 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10893 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10894 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

10895 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10896 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10897 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10898 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

10899 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10900 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10901 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10902 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10903 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

10904 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

10905 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

10906 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10907 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10908 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10909 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10910 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10911 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10912 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

10913 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

10914 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

10915 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

10916 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10917 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

10918 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10919 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

10920 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10921 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10922 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10923 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10924 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10925 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10926 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10927 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10928 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10929 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10930 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10931 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10932 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10933 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10934 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10935 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10936 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10937 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10938 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10939 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

10940 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

10941 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10942 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10943 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10944 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10945 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10946 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10947 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10948 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10949 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10950 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10951 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10952 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10953 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

10954 #ifde‡
GL_GLEXT_PROTOTYPES


10955 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
, GLboﬁó¿*
ªsidí˚s
);

10956 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

10957 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10958 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
∑øms
);

10959 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

10960 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10961 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10962 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10963 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLubyã
 *
¥ogøm
);

10964 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10965 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10966 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10967 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10968 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

10969 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
 
id
);

10970 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
¥ogøm
);

10971 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10972 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10973 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10974 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10975 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10976 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10977 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10978 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
m©rix
, GLíum 
å™sf‹m
);

10979 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
 
ödex
, 
GLöt
 
fsize
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

10980 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

10981 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10982 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

10983 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10984 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

10985 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10986 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

10987 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10988 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10989 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10990 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

10991 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10992 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

10993 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10994 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

10995 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10996 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

10997 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10998 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10999 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

11000 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

11001 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

11002 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

11003 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

11004 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

11005 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

11006 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

11007 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

11008 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

11009 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

11010 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

11011 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

11012 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

11013 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

11014 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

11015 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

11016 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

11017 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

11018 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLubyã
 *
v
);

11022 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


11023 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

11026 #i‚de‡
GL_NV_vîãx_¥ogøm2


11027 
	#GL_NV_vîãx_¥ogøm2
 1

	)

11030 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


11031 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

11034 #i‚de‡
GL_NV_vîãx_¥ogøm3


11035 
	#GL_NV_vîãx_¥ogøm3
 1

	)

11038 #i‚de‡
GL_NV_vîãx_¥ogøm4


11039 
	#GL_NV_vîãx_¥ogøm4
 1

	)

11040 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

11041 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

11042 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

11043 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

11044 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11045 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

11046 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

11047 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

11048 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11049 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11050 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11051 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11052 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

11053 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11054 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11055 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11056 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

11057 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

11058 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

11059 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

11060 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

11061 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

11062 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11063 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

11064 #ifde‡
GL_GLEXT_PROTOTYPES


11065 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

11066 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

11067 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

11068 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

11069 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
);

11070 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

11071 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

11072 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

11073 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11074 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11075 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11076 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

11077 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11078 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11079 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11080 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

11081 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

11082 
GLAPI
 
APIENTRY
 
glVîãxAâribI4svEXT
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

11083 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

11084 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

11085 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

11086 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11087 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

11091 #i‚de‡
GL_NV_video_ˇ±uª


11092 
	#GL_NV_video_ˇ±uª
 1

	)

11093 
	#GL_VIDEO_BUFFER_NV
 0x9020

	)

11094 
	#GL_VIDEO_BUFFER_BINDING_NV
 0x9021

	)

11095 
	#GL_FIELD_UPPER_NV
 0x9022

	)

11096 
	#GL_FIELD_LOWER_NV
 0x9023

	)

11097 
	#GL_NUM_VIDEO_CAPTURE_STREAMS_NV
 0x9024

	)

11098 
	#GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
 0x9025

	)

11099 
	#GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
 0x9026

	)

11100 
	#GL_LAST_VIDEO_CAPTURE_STATUS_NV
 0x9027

	)

11101 
	#GL_VIDEO_BUFFER_PITCH_NV
 0x9028

	)

11102 
	#GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
 0x9029

	)

11103 
	#GL_VIDEO_COLOR_CONVERSION_MAX_NV
 0x902A

	)

11104 
	#GL_VIDEO_COLOR_CONVERSION_MIN_NV
 0x902B

	)

11105 
	#GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
 0x902C

	)

11106 
	#GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
 0x902D

	)

11107 
	#GL_PARTIAL_SUCCESS_NV
 0x902E

	)

11108 
	#GL_SUCCESS_NV
 0x902F

	)

11109 
	#GL_FAILURE_NV
 0x9030

	)

11110 
	#GL_YCBYCR8_422_NV
 0x9031

	)

11111 
	#GL_YCBAYCR8A_4224_NV
 0x9032

	)

11112 
	#GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
 0x9033

	)

11113 
	#GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
 0x9034

	)

11114 
	#GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
 0x9035

	)

11115 
	#GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
 0x9036

	)

11116 
	#GL_Z4Y12Z4CB12Z4CR12_444_NV
 0x9037

	)

11117 
	#GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
 0x9038

	)

11118 
	#GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
 0x9039

	)

11119 
	#GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
 0x903A

	)

11120 
	#GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
 0x903B

	)

11121 
	#GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
 0x903C

	)

11122 (
APIENTRYP
 
	tPFNGLBEGINVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

11123 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, 
	tGLöçåARB
 
	toff£t
);

11124 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, GLíum 
	tèrgë
, GLuöà
	tãxtuª
);

11125 (
APIENTRYP
 
	tPFNGLENDVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

11126 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTUREIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11127 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11128 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11129 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

11130 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà*
	t£quí˚_num
, 
	tGLuöt64EXT
 *
	tˇ±uª_time
);

11131 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11132 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11133 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

11134 #ifde‡
GL_GLEXT_PROTOTYPES


11135 
GLAPI
 
APIENTRY
 
glBegöVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

11136 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómBuf„rNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, 
GLöçåARB
 
off£t
);

11137 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómTextuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, GLíum 
èrgë
, GLuöà
ãxtuª
);

11138 
GLAPI
 
APIENTRY
 
glEndVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

11139 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11140 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11141 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11142 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

11143 
GLAPI
 
GLíum
 
APIENTRY
 
glVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà*
£quí˚_num
, 
GLuöt64EXT
 *
ˇ±uª_time
);

11144 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11145 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11146 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

11150 #i‚de‡
GL_NV_võwp‹t_¨øy2


11151 
	#GL_NV_võwp‹t_¨øy2
 1

	)

11154 #i‚de‡
GL_NV_võwp‹t_swizzÀ


11155 
	#GL_NV_võwp‹t_swizzÀ
 1

	)

11156 
	#GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV
 0x9350

	)

11157 
	#GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV
 0x9351

	)

11158 
	#GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV
 0x9352

	)

11159 
	#GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV
 0x9353

	)

11160 
	#GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV
 0x9354

	)

11161 
	#GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV
 0x9355

	)

11162 
	#GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV
 0x9356

	)

11163 
	#GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV
 0x9357

	)

11164 
	#GL_VIEWPORT_SWIZZLE_X_NV
 0x9358

	)

11165 
	#GL_VIEWPORT_SWIZZLE_Y_NV
 0x9359

	)

11166 
	#GL_VIEWPORT_SWIZZLE_Z_NV
 0x935A

	)

11167 
	#GL_VIEWPORT_SWIZZLE_W_NV
 0x935B

	)

11168 (
APIENTRYP
 
	tPFNGLVIEWPORTSWIZZLENVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tswizzÀx
, GLíum 
	tswizzÀy
, GLíum 
	tswizzÀz
, GLíum 
	tswizzÀw
);

11169 #ifde‡
GL_GLEXT_PROTOTYPES


11170 
GLAPI
 
APIENTRY
 
glVõwp‹tSwizzÀNV
 (
GLuöt
 
ödex
, 
GLíum
 
swizzÀx
, GLíum 
swizzÀy
, GLíum 
swizzÀz
, GLíum 
swizzÀw
);

11174 #i‚de‡
GL_OML_öãæa˚


11175 
	#GL_OML_öãæa˚
 1

	)

11176 
	#GL_INTERLACE_OML
 0x8980

	)

11177 
	#GL_INTERLACE_READ_OML
 0x8981

	)

11180 #i‚de‡
GL_OML_ªßm∂e


11181 
	#GL_OML_ªßm∂e
 1

	)

11182 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

11183 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

11184 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

11185 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

11186 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

11187 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

11190 #i‚de‡
GL_OML_subßm∂e


11191 
	#GL_OML_subßm∂e
 1

	)

11192 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

11193 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

11196 #i‚de‡
GL_OVR_mu…ivõw


11197 
	#GL_OVR_mu…ivõw
 1

	)

11198 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR
 0x9630

	)

11199 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR
 0x9632

	)

11200 
	#GL_MAX_VIEWS_OVR
 0x9631

	)

11201 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tba£VõwIndex
, 
	tGLsizei
 
	tnumVõws
);

11202 #ifde‡
GL_GLEXT_PROTOTYPES


11203 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªMu…ivõwOVR
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
ba£VõwIndex
, 
GLsizei
 
numVõws
);

11207 #i‚de‡
GL_OVR_mu…ivõw2


11208 
	#GL_OVR_mu…ivõw2
 1

	)

11211 #i‚de‡
GL_PGI_misc_höts


11212 
	#GL_PGI_misc_höts
 1

	)

11213 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

11214 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

11215 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

11216 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

11217 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

11218 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

11219 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

11220 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

11221 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

11222 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

11223 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

11224 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

11225 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

11226 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

11227 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

11228 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

11229 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

11230 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

11231 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

11232 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

11233 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

11234 #ifde‡
GL_GLEXT_PROTOTYPES


11235 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
 
èrgë
, 
GLöt
 
mode
);

11239 #i‚de‡
GL_PGI_vîãx_höts


11240 
	#GL_PGI_vîãx_höts
 1

	)

11241 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

11242 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

11243 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

11244 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

11245 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

11246 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

11247 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

11248 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

11249 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

11250 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

11251 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

11252 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

11253 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

11254 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

11255 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

11256 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

11257 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

11258 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

11259 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

11260 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

11261 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

11262 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

11265 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


11266 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

11267 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

11268 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

11271 #i‚de‡
GL_S3_s3tc


11272 
	#GL_S3_s3tc
 1

	)

11273 
	#GL_RGB_S3TC
 0x83A0

	)

11274 
	#GL_RGB4_S3TC
 0x83A1

	)

11275 
	#GL_RGBA_S3TC
 0x83A2

	)

11276 
	#GL_RGBA4_S3TC
 0x83A3

	)

11277 
	#GL_RGBA_DXT5_S3TC
 0x83A4

	)

11278 
	#GL_RGBA4_DXT5_S3TC
 0x83A5

	)

11281 #i‚de‡
GL_SGIS_dëaû_ãxtuª


11282 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

11283 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

11284 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

11285 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

11286 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

11287 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

11288 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

11289 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

11290 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

11291 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

11292 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

11293 #ifde‡
GL_GLEXT_PROTOTYPES


11294 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

11295 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

11299 #i‚de‡
GL_SGIS_fog_fun˘i⁄


11300 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

11301 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

11302 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

11303 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

11304 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

11305 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

11306 #ifde‡
GL_GLEXT_PROTOTYPES


11307 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

11308 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *
poöts
);

11312 #i‚de‡
GL_SGIS_gíî©e_mùm≠


11313 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

11314 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

11315 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

11318 #i‚de‡
GL_SGIS_mu…ißm∂e


11319 
	#GL_SGIS_mu…ißm∂e
 1

	)

11320 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

11321 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

11322 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

11323 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

11324 
	#GL_1PASS_SGIS
 0x80A1

	)

11325 
	#GL_2PASS_0_SGIS
 0x80A2

	)

11326 
	#GL_2PASS_1_SGIS
 0x80A3

	)

11327 
	#GL_4PASS_0_SGIS
 0x80A4

	)

11328 
	#GL_4PASS_1_SGIS
 0x80A5

	)

11329 
	#GL_4PASS_2_SGIS
 0x80A6

	)

11330 
	#GL_4PASS_3_SGIS
 0x80A7

	)

11331 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

11332 
	#GL_SAMPLES_SGIS
 0x80A9

	)

11333 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

11334 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

11335 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

11336 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

11337 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

11338 #ifde‡
GL_GLEXT_PROTOTYPES


11339 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

11340 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
 
∑âîn
);

11344 #i‚de‡
GL_SGIS_pixñ_ãxtuª


11345 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

11346 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

11347 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

11348 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

11349 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

11350 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11351 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11352 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11353 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11354 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11355 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11356 #ifde‡
GL_GLEXT_PROTOTYPES


11357 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11358 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11359 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11360 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11361 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11362 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11366 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


11367 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

11368 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

11369 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

11370 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

11371 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

11372 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

11373 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

11374 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

11375 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

11378 #i‚de‡
GL_SGIS_poöt_∑ømëîs


11379 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

11380 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

11381 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

11382 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

11383 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

11384 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11385 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11386 #ifde‡
GL_GLEXT_PROTOTYPES


11387 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11388 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11392 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


11393 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

11394 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

11395 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

11396 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

11397 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

11398 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

11399 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

11400 #ifde‡
GL_GLEXT_PROTOTYPES


11401 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

11402 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

11406 #i‚de‡
GL_SGIS_ãxtuª4D


11407 
	#GL_SGIS_ãxtuª4D
 1

	)

11408 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

11409 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

11410 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

11411 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

11412 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

11413 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

11414 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

11415 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

11416 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

11417 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

11418 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

11419 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

11420 #ifde‡
GL_GLEXT_PROTOTYPES


11421 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

11422 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
woff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

11426 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


11427 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

11428 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

11431 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


11432 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

11433 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

11434 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

11435 #ifde‡
GL_GLEXT_PROTOTYPES


11436 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

11440 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


11441 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

11442 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

11445 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


11446 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

11447 
	#GL_FILTER4_SGIS
 0x8146

	)

11448 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

11449 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

11450 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

11451 #ifde‡
GL_GLEXT_PROTOTYPES


11452 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLÊﬂt
 *
weights
);

11453 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
weights
);

11457 #i‚de‡
GL_SGIS_ãxtuª_lod


11458 
	#GL_SGIS_ãxtuª_lod
 1

	)

11459 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

11460 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

11461 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

11462 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

11465 #i‚de‡
GL_SGIS_ãxtuª_£À˘


11466 
	#GL_SGIS_ãxtuª_£À˘
 1

	)

11467 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

11468 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

11469 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

11470 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

11471 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

11472 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

11473 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

11474 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

11475 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

11476 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

11477 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

11478 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

11479 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

11480 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

11481 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

11482 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

11483 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

11484 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

11485 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

11486 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

11487 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

11488 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

11491 #i‚de‡
GL_SGIX_async


11492 
	#GL_SGIX_async
 1

	)

11493 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

11494 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

11495 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

11496 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

11497 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

11498 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

11499 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

11500 #ifde‡
GL_GLEXT_PROTOTYPES


11501 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

11502 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

11503 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

11504 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
 
ønge
);

11505 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
 
m¨kî
, 
GLsizei
 
ønge
);

11506 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

11510 #i‚de‡
GL_SGIX_async_hi°ogøm


11511 
	#GL_SGIX_async_hi°ogøm
 1

	)

11512 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

11513 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

11516 #i‚de‡
GL_SGIX_async_pixñ


11517 
	#GL_SGIX_async_pixñ
 1

	)

11518 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

11519 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

11520 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

11521 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

11522 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

11523 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

11526 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


11527 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

11528 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

11529 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

11532 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


11533 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

11534 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

11537 #i‚de‡
GL_SGIX_˛ùm≠


11538 
	#GL_SGIX_˛ùm≠
 1

	)

11539 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

11540 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

11541 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

11542 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

11543 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

11544 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

11545 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

11546 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

11547 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

11548 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

11549 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

11550 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

11553 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


11554 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

11555 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

11558 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


11559 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

11562 #i‚de‡
GL_SGIX_dïth_ãxtuª


11563 
	#GL_SGIX_dïth_ãxtuª
 1

	)

11564 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

11565 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

11566 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

11569 #i‚de‡
GL_SGIX_Êush_ø°î


11570 
	#GL_SGIX_Êush_ø°î
 1

	)

11571 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

11572 #ifde‡
GL_GLEXT_PROTOTYPES


11573 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

11577 #i‚de‡
GL_SGIX_fog_off£t


11578 
	#GL_SGIX_fog_off£t
 1

	)

11579 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

11580 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

11583 #i‚de‡
GL_SGIX_‰agmít_lightög


11584 
	#GL_SGIX_‰agmít_lightög
 1

	)

11585 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

11586 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

11587 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

11588 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

11589 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

11590 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

11591 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

11592 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

11593 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

11594 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

11595 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

11596 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

11597 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

11598 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

11599 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

11600 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

11601 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

11602 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

11603 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

11604 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

11605 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

11606 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11607 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11608 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11609 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11610 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11611 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11612 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11613 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11614 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11615 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11616 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11617 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11618 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11619 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11620 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11621 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11622 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11623 #ifde‡
GL_GLEXT_PROTOTYPES


11624 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
 
Á˚
, GLíum 
mode
);

11625 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11626 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11627 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11628 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11629 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11630 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11631 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11632 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11633 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

11634 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11635 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

11636 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11637 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11638 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11639 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11640 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11641 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11645 #i‚de‡
GL_SGIX_‰amezoom


11646 
	#GL_SGIX_‰amezoom
 1

	)

11647 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

11648 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

11649 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

11650 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

11651 #ifde‡
GL_GLEXT_PROTOTYPES


11652 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
 
Á˘‹
);

11656 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


11657 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

11658 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° *
	t∑øms
);

11659 #ifde‡
GL_GLEXT_PROTOTYPES


11660 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
 
≤ame
, c⁄° *
∑øms
);

11664 #i‚de‡
GL_SGIX_ö°rumíts


11665 
	#GL_SGIX_ö°rumíts
 1

	)

11666 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

11667 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

11668 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

11669 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

11670 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

11671 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

11672 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

11673 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

11674 #ifde‡
GL_GLEXT_PROTOTYPES


11675 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

11676 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
 
size
, 
GLöt
 *
buf„r
);

11677 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLöà*
m¨kî_p
);

11678 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
 
m¨kî
);

11679 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

11680 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
 
m¨kî
);

11684 #i‚de‡
GL_SGIX_öãæa˚


11685 
	#GL_SGIX_öãæa˚
 1

	)

11686 
	#GL_INTERLACE_SGIX
 0x8094

	)

11689 #i‚de‡
GL_SGIX_ú_ö°rumít1


11690 
	#GL_SGIX_ú_ö°rumít1
 1

	)

11691 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

11694 #i‚de‡
GL_SGIX_li°_¥i‹ôy


11695 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

11696 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

11697 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11698 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11699 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11700 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11701 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11702 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11703 #ifde‡
GL_GLEXT_PROTOTYPES


11704 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11705 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

11706 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11707 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11708 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11709 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11713 #i‚de‡
GL_SGIX_pixñ_ãxtuª


11714 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

11715 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

11716 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

11717 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

11718 #ifde‡
GL_GLEXT_PROTOTYPES


11719 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
 
mode
);

11723 #i‚de‡
GL_SGIX_pixñ_tûes


11724 
	#GL_SGIX_pixñ_tûes
 1

	)

11725 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

11726 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

11727 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

11728 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

11729 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

11730 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

11731 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

11732 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

11735 #i‚de‡
GL_SGIX_pﬁynomül_ffd


11736 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

11737 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

11738 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

11739 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

11740 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

11741 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

11742 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

11743 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

11744 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

11745 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

11746 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

11747 #ifde‡
GL_GLEXT_PROTOTYPES


11748 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLdoubÀ 
w1
, GLdoubÀ 
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLdoubÀ *
poöts
);

11749 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLÊﬂà
w1
, GLÊﬂà
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLÊﬂà*
poöts
);

11750 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
 
mask
);

11751 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
 
mask
);

11755 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


11756 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

11757 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

11758 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

11759 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

11760 #ifde‡
GL_GLEXT_PROTOTYPES


11761 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *
equ©i⁄
);

11765 #i‚de‡
GL_SGIX_ªßm∂e


11766 
	#GL_SGIX_ªßm∂e
 1

	)

11767 
	#GL_PACK_RESAMPLE_SGIX
 0x842E

	)

11768 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842F

	)

11769 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x8433

	)

11770 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x8434

	)

11771 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

11774 #i‚de‡
GL_SGIX_sˇÀbüs_höt


11775 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

11776 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

11779 #i‚de‡
GL_SGIX_shadow


11780 
	#GL_SGIX_shadow
 1

	)

11781 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

11782 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

11783 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

11784 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

11787 #i‚de‡
GL_SGIX_shadow_ambõ¡


11788 
	#GL_SGIX_shadow_ambõ¡
 1

	)

11789 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

11792 #i‚de‡
GL_SGIX_•rôe


11793 
	#GL_SGIX_•rôe
 1

	)

11794 
	#GL_SPRITE_SGIX
 0x8148

	)

11795 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

11796 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

11797 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

11798 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

11799 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

11800 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

11801 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

11802 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11803 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

11804 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11805 #ifde‡
GL_GLEXT_PROTOTYPES


11806 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

11807 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11808 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

11809 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11813 #i‚de‡
GL_SGIX_subßm∂e


11814 
	#GL_SGIX_subßm∂e
 1

	)

11815 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

11816 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

11817 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

11818 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

11819 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

11822 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


11823 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

11824 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

11825 #ifde‡
GL_GLEXT_PROTOTYPES


11826 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

11830 #i‚de‡
GL_SGIX_ãxtuª_add_ív


11831 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

11832 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

11835 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


11836 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

11837 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

11838 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

11839 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

11842 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


11843 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

11844 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

11845 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

11846 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

11849 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


11850 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

11851 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

11854 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


11855 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

11856 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

11857 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

11858 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

11859 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

11862 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


11863 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

11864 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

11865 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

11868 #i‚de‡
GL_SGIX_y¸cb


11869 
	#GL_SGIX_y¸cb
 1

	)

11870 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

11871 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

11874 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


11875 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

11878 #i‚de‡
GL_SGIX_y¸cba


11879 
	#GL_SGIX_y¸cba
 1

	)

11880 
	#GL_YCRCB_SGIX
 0x8318

	)

11881 
	#GL_YCRCBA_SGIX
 0x8319

	)

11884 #i‚de‡
GL_SGI_cﬁ‹_m©rix


11885 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

11886 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

11887 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

11888 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

11889 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

11890 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

11891 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

11892 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

11893 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

11894 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

11895 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

11896 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

11899 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


11900 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

11901 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

11902 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

11903 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

11904 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

11905 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

11906 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

11907 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

11908 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

11909 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

11910 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

11911 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

11912 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

11913 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

11914 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

11915 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

11916 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

11917 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

11918 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

11919 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

11920 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

11921 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tèbÀ
);

11922 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

11923 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

11924 #ifde‡
GL_GLEXT_PROTOTYPES


11925 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

11926 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

11927 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

11928 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

11929 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
èbÀ
);

11930 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

11931 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

11935 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


11936 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

11937 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

11938 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

11941 #i‚de‡
GL_SUNX_c⁄°™t_d©a


11942 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

11943 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

11944 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

11945 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

11946 #ifde‡
GL_GLEXT_PROTOTYPES


11947 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

11951 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


11952 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

11953 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

11956 #i‚de‡
GL_SUN_globÆ_Æpha


11957 
	#GL_SUN_globÆ_Æpha
 1

	)

11958 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

11959 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

11960 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

11961 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

11962 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

11963 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

11964 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

11965 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

11966 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

11967 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

11968 #ifde‡
GL_GLEXT_PROTOTYPES


11969 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
 
Á˘‹
);

11970 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
 
Á˘‹
);

11971 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
 
Á˘‹
);

11972 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
 
Á˘‹
);

11973 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
 
Á˘‹
);

11974 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
 
Á˘‹
);

11975 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
 
Á˘‹
);

11976 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
 
Á˘‹
);

11980 #i‚de‡
GL_SUN_mesh_¨øy


11981 
	#GL_SUN_mesh_¨øy
 1

	)

11982 
	#GL_QUAD_MESH_SUN
 0x8614

	)

11983 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

11984 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

11985 #ifde‡
GL_GLEXT_PROTOTYPES


11986 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
width
);

11990 #i‚de‡
GL_SUN_¶i˚_accum


11991 
	#GL_SUN_¶i˚_accum
 1

	)

11992 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

11995 #i‚de‡
GL_SUN_åüngÀ_li°


11996 
	#GL_SUN_åüngÀ_li°
 1

	)

11997 
	#GL_RESTART_SUN
 0x0001

	)

11998 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

11999 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

12000 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

12001 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

12002 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

12003 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

12004 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

12005 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

12006 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

12007 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

12008 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

12009 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

12010 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

12011 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

12012 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

12013 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

12014 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

12015 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

12016 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

12017 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

12018 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

12019 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

12020 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° **
	tpoöãr
);

12021 #ifde‡
GL_GLEXT_PROTOTYPES


12022 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
 
code
);

12023 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
 
code
);

12024 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
 
code
);

12025 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *
code
);

12026 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *
code
);

12027 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *
code
);

12028 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° **
poöãr
);

12032 #i‚de‡
GL_SUN_vîãx


12033 
	#GL_SUN_vîãx
 1

	)

12034 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

12035 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

12036 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12037 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

12038 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12039 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

12040 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12041 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

12042 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12043 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12044 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12045 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

12046 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

12047 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

12048 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12049 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

12050 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12051 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

12052 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12053 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12054 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12055 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12056 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

12057 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12058 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12059 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

12060 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12061 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

12062 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12063 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

12064 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12065 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

12066 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12067 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12068 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12069 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

12070 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12071 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12072 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

12073 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

12074 #ifde‡
GL_GLEXT_PROTOTYPES


12075 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

12076 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

12077 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12078 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

12079 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12080 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

12081 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12082 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

12083 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12084 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12085 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12086 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

12087 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

12088 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

12089 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12090 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° 
GLubyã
 *
c
, c⁄° GLÊﬂà*
v
);

12091 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12092 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
v
);

12093 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12094 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12095 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12096 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12097 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

12098 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12099 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12100 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
v
);

12101 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
 
rc
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12102 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

12103 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12104 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

12105 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12106 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

12107 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12108 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12109 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12110 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

12111 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12112 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12113 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

12114 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

12118 #i‚de‡
GL_WIN_ph⁄g_shadög


12119 
	#GL_WIN_ph⁄g_shadög
 1

	)

12120 
	#GL_PHONG_WIN
 0x80EA

	)

12121 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

12124 #i‚de‡
GL_WIN_•ecuœr_fog


12125 
	#GL_WIN_•ecuœr_fog
 1

	)

12126 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

12129 #ifde‡
__˝lu•lus


	@/usr/include/X11/X.h

3 #i‚de‡
X_H


4 
	#X_H


	)

53 
	#X_PROTOCOL
 11

	)

54 
	#X_PROTOCOL_REVISION
 0

	)

63 #i‚de‡
_XSERVER64


64 #i‚de‡
_XTYPEDEF_XID


65 
	#_XTYPEDEF_XID


	)

66 
	tXID
;

68 #i‚de‡
_XTYPEDEF_MASK


69 
	#_XTYPEDEF_MASK


	)

70 
	tMask
;

72 #i‚de‡
_XTYPEDEF_ATOM


73 
	#_XTYPEDEF_ATOM


	)

74 
	tAtom
;

76 
	tVisuÆID
;

77 
	tTime
;

79 
	~<X11/Xmd.h
>

80 #i‚de‡
_XTYPEDEF_XID


81 
	#_XTYPEDEF_XID


	)

82 
CARD32
 
	tXID
;

84 #i‚de‡
_XTYPEDEF_MASK


85 
	#_XTYPEDEF_MASK


	)

86 
CARD32
 
	tMask
;

88 #i‚de‡
_XTYPEDEF_ATOM


89 
	#_XTYPEDEF_ATOM


	)

90 
CARD32
 
	tAtom
;

92 
CARD32
 
	tVisuÆID
;

93 
CARD32
 
	tTime
;

96 
XID
 
	tWödow
;

97 
XID
 
	tDøwabÀ
;

98 #i‚de‡
_XTYPEDEF_FONT


99 
	#_XTYPEDEF_FONT


	)

100 
XID
 
	tF⁄t
;

102 
XID
 
	tPixm≠
;

103 
XID
 
	tCurs‹
;

104 
XID
 
	tCﬁ‹m≠
;

105 
XID
 
	tGC⁄ãxt
;

106 
XID
 
	tKeySym
;

108 
	tKeyCode
;

114 #i‚de‡
N⁄e


115 
	#N⁄e
 0L

	)

118 
	#P¨ítRñ©ive
 1L

	)

121 
	#C›yFromP¨ít
 0L

	)

126 
	#PoöãrWödow
 0L

	)

127 
	#I≈utFocus
 1L

	)

129 
	#PoöãrRoŸ
 1L

	)

131 
	#AnyPr›îtyTy≥
 0L

	)

133 
	#AnyKey
 0L

	)

135 
	#AnyBuâ⁄
 0L

	)

137 
	#AŒTemp‹¨y
 0L

	)

139 
	#CuºítTime
 0L

	)

141 
	#NoSymbﬁ
 0L

	)

150 
	#NoEvítMask
 0L

	)

151 
	#KeyPªssMask
 (1L<<0)

	)

152 
	#KeyRñó£Mask
 (1L<<1)

	)

153 
	#Buâ⁄PªssMask
 (1L<<2)

	)

154 
	#Buâ⁄Rñó£Mask
 (1L<<3)

	)

155 
	#E¡îWödowMask
 (1L<<4)

	)

156 
	#LóveWödowMask
 (1L<<5)

	)

157 
	#PoöãrMŸi⁄Mask
 (1L<<6)

	)

158 
	#PoöãrMŸi⁄HötMask
 (1L<<7)

	)

159 
	#Buâ⁄1MŸi⁄Mask
 (1L<<8)

	)

160 
	#Buâ⁄2MŸi⁄Mask
 (1L<<9)

	)

161 
	#Buâ⁄3MŸi⁄Mask
 (1L<<10)

	)

162 
	#Buâ⁄4MŸi⁄Mask
 (1L<<11)

	)

163 
	#Buâ⁄5MŸi⁄Mask
 (1L<<12)

	)

164 
	#Buâ⁄MŸi⁄Mask
 (1L<<13)

	)

165 
	#Keym≠SèãMask
 (1L<<14)

	)

166 
	#ExposuªMask
 (1L<<15)

	)

167 
	#VisibûôyCh™geMask
 (1L<<16)

	)

168 
	#Såu˘uªNŸifyMask
 (1L<<17)

	)

169 
	#ResizeRedúe˘Mask
 (1L<<18)

	)

170 
	#Sub°ru˘uªNŸifyMask
 (1L<<19)

	)

171 
	#Sub°ru˘uªRedúe˘Mask
 (1L<<20)

	)

172 
	#FocusCh™geMask
 (1L<<21)

	)

173 
	#Pr›îtyCh™geMask
 (1L<<22)

	)

174 
	#Cﬁ‹m≠Ch™geMask
 (1L<<23)

	)

175 
	#Ow√rGøbBuâ⁄Mask
 (1L<<24)

	)

181 
	#KeyPªss
 2

	)

182 
	#KeyRñó£
 3

	)

183 
	#Buâ⁄Pªss
 4

	)

184 
	#Buâ⁄Rñó£
 5

	)

185 
	#MŸi⁄NŸify
 6

	)

186 
	#E¡îNŸify
 7

	)

187 
	#LóveNŸify
 8

	)

188 
	#FocusIn
 9

	)

189 
	#FocusOut
 10

	)

190 
	#Keym≠NŸify
 11

	)

191 
	#Expo£
 12

	)

192 
	#GøphicsExpo£
 13

	)

193 
	#NoExpo£
 14

	)

194 
	#VisibûôyNŸify
 15

	)

195 
	#Cª©eNŸify
 16

	)

196 
	#De°royNŸify
 17

	)

197 
	#Unm≠NŸify
 18

	)

198 
	#M≠NŸify
 19

	)

199 
	#M≠Reque°
 20

	)

200 
	#Rï¨ítNŸify
 21

	)

201 
	#C⁄figuªNŸify
 22

	)

202 
	#C⁄figuªReque°
 23

	)

203 
	#GøvôyNŸify
 24

	)

204 
	#ResizeReque°
 25

	)

205 
	#CúcuœãNŸify
 26

	)

206 
	#CúcuœãReque°
 27

	)

207 
	#Pr›îtyNŸify
 28

	)

208 
	#Sñe˘i⁄CÀ¨
 29

	)

209 
	#Sñe˘i⁄Reque°
 30

	)

210 
	#Sñe˘i⁄NŸify
 31

	)

211 
	#Cﬁ‹m≠NŸify
 32

	)

212 
	#Clõ¡Mesßge
 33

	)

213 
	#M≠pögNŸify
 34

	)

214 
	#GíîicEvít
 35

	)

215 
	#LASTEvít
 36

	)

221 
	#Shi·Mask
 (1<<0)

	)

222 
	#LockMask
 (1<<1)

	)

223 
	#C⁄åﬁMask
 (1<<2)

	)

224 
	#Mod1Mask
 (1<<3)

	)

225 
	#Mod2Mask
 (1<<4)

	)

226 
	#Mod3Mask
 (1<<5)

	)

227 
	#Mod4Mask
 (1<<6)

	)

228 
	#Mod5Mask
 (1<<7)

	)

233 
	#Shi·M≠Index
 0

	)

234 
	#LockM≠Index
 1

	)

235 
	#C⁄åﬁM≠Index
 2

	)

236 
	#Mod1M≠Index
 3

	)

237 
	#Mod2M≠Index
 4

	)

238 
	#Mod3M≠Index
 5

	)

239 
	#Mod4M≠Index
 6

	)

240 
	#Mod5M≠Index
 7

	)

246 
	#Buâ⁄1Mask
 (1<<8)

	)

247 
	#Buâ⁄2Mask
 (1<<9)

	)

248 
	#Buâ⁄3Mask
 (1<<10)

	)

249 
	#Buâ⁄4Mask
 (1<<11)

	)

250 
	#Buâ⁄5Mask
 (1<<12)

	)

252 
	#AnyModifõr
 (1<<15Ë

	)

259 
	#Buâ⁄1
 1

	)

260 
	#Buâ⁄2
 2

	)

261 
	#Buâ⁄3
 3

	)

262 
	#Buâ⁄4
 4

	)

263 
	#Buâ⁄5
 5

	)

267 
	#NŸifyN‹mÆ
 0

	)

268 
	#NŸifyGøb
 1

	)

269 
	#NŸifyUngøb
 2

	)

270 
	#NŸifyWhûeGøbbed
 3

	)

272 
	#NŸifyHöt
 1

	)

276 
	#NŸifyAn˚°‹
 0

	)

277 
	#NŸifyVútuÆ
 1

	)

278 
	#NŸifyIn„ri‹
 2

	)

279 
	#NŸifyN⁄löór
 3

	)

280 
	#NŸifyN⁄löórVútuÆ
 4

	)

281 
	#NŸifyPoöãr
 5

	)

282 
	#NŸifyPoöãrRoŸ
 6

	)

283 
	#NŸifyDëaûN⁄e
 7

	)

287 
	#VisibûôyUnobscuªd
 0

	)

288 
	#VisibûôyP¨tüŒyObscuªd
 1

	)

289 
	#VisibûôyFuŒyObscuªd
 2

	)

293 
	#Pœ˚OnT›
 0

	)

294 
	#Pœ˚OnBŸtom
 1

	)

298 
	#FamûyI¡î√t
 0

	)

299 
	#FamûyDEC√t
 1

	)

300 
	#FamûyChaos
 2

	)

301 
	#FamûyI¡î√t6
 6

	)

304 
	#FamûySîvîI¡î¥ëed
 5

	)

308 
	#Pr›îtyNewVÆue
 0

	)

309 
	#Pr›îtyDñëe
 1

	)

313 
	#Cﬁ‹m≠Unö°ÆÀd
 0

	)

314 
	#Cﬁ‹m≠In°ÆÀd
 1

	)

318 
	#GøbModeSync
 0

	)

319 
	#GøbModeAsync
 1

	)

323 
	#GøbSuc˚ss
 0

	)

324 
	#AÃódyGøbbed
 1

	)

325 
	#GøbInvÆidTime
 2

	)

326 
	#GøbNŸVõwabÀ
 3

	)

327 
	#GøbFrozí
 4

	)

331 
	#AsyncPoöãr
 0

	)

332 
	#SyncPoöãr
 1

	)

333 
	#RïœyPoöãr
 2

	)

334 
	#AsyncKeybﬂrd
 3

	)

335 
	#SyncKeybﬂrd
 4

	)

336 
	#RïœyKeybﬂrd
 5

	)

337 
	#AsyncBŸh
 6

	)

338 
	#SyncBŸh
 7

	)

342 
	#RevîtToN⁄e
 ()
N⁄e


	)

343 
	#RevîtToPoöãrRoŸ
 ()
PoöãrRoŸ


	)

344 
	#RevîtToP¨ít
 2

	)

350 
	#Suc˚ss
 0

	)

351 
	#BadReque°
 1

	)

352 
	#BadVÆue
 2

	)

353 
	#BadWödow
 3

	)

354 
	#BadPixm≠
 4

	)

355 
	#BadAtom
 5

	)

356 
	#BadCurs‹
 6

	)

357 
	#BadF⁄t
 7

	)

358 
	#BadM©ch
 8

	)

359 
	#BadDøwabÀ
 9

	)

360 
	#BadAc˚ss
 10

	)

369 
	#BadAŒoc
 11

	)

370 
	#BadCﬁ‹
 12

	)

371 
	#BadGC
 13

	)

372 
	#BadIDChoi˚
 14

	)

373 
	#BadName
 15

	)

374 
	#BadLígth
 16

	)

375 
	#BadIm∂emíèti⁄
 17

	)

377 
	#Fú°Exãnsi⁄Eº‹
 128

	)

378 
	#La°Exãnsi⁄Eº‹
 255

	)

387 
	#I≈utOuçut
 1

	)

388 
	#I≈utO∆y
 2

	)

392 
	#CWBackPixm≠
 (1L<<0)

	)

393 
	#CWBackPixñ
 (1L<<1)

	)

394 
	#CWB‹dîPixm≠
 (1L<<2)

	)

395 
	#CWB‹dîPixñ
 (1L<<3)

	)

396 
	#CWBôGøvôy
 (1L<<4)

	)

397 
	#CWWöGøvôy
 (1L<<5)

	)

398 
	#CWBackögSt‹e
 (1L<<6)

	)

399 
	#CWBackögPœ√s
 (1L<<7)

	)

400 
	#CWBackögPixñ
 (1L<<8)

	)

401 
	#CWOvîrideRedúe˘
 (1L<<9)

	)

402 
	#CWSaveUndî
 (1L<<10)

	)

403 
	#CWEvítMask
 (1L<<11)

	)

404 
	#CWD⁄tPr›ag©e
 (1L<<12)

	)

405 
	#CWCﬁ‹m≠
 (1L<<13)

	)

406 
	#CWCurs‹
 (1L<<14)

	)

410 
	#CWX
 (1<<0)

	)

411 
	#CWY
 (1<<1)

	)

412 
	#CWWidth
 (1<<2)

	)

413 
	#CWHeight
 (1<<3)

	)

414 
	#CWB‹dîWidth
 (1<<4)

	)

415 
	#CWSiblög
 (1<<5)

	)

416 
	#CWSèckMode
 (1<<6)

	)

421 
	#F‹gëGøvôy
 0

	)

422 
	#N‹thWe°Gøvôy
 1

	)

423 
	#N‹thGøvôy
 2

	)

424 
	#N‹thEa°Gøvôy
 3

	)

425 
	#We°Gøvôy
 4

	)

426 
	#CíãrGøvôy
 5

	)

427 
	#Ea°Gøvôy
 6

	)

428 
	#SouthWe°Gøvôy
 7

	)

429 
	#SouthGøvôy
 8

	)

430 
	#SouthEa°Gøvôy
 9

	)

431 
	#SèticGøvôy
 10

	)

435 
	#Unm≠Gøvôy
 0

	)

439 
	#NŸU£ful
 0

	)

440 
	#WhíM≠≥d
 1

	)

441 
	#Always
 2

	)

445 
	#IsUnm≠≥d
 0

	)

446 
	#IsUnvõwabÀ
 1

	)

447 
	#IsVõwabÀ
 2

	)

451 
	#SëModeIn£π
 0

	)

452 
	#SëModeDñëe
 1

	)

456 
	#De°royAŒ
 0

	)

457 
	#RëaöPîm™ít
 1

	)

458 
	#RëaöTemp‹¨y
 2

	)

462 
	#Above
 0

	)

463 
	#Bñow
 1

	)

464 
	#T›If
 2

	)

465 
	#BŸtomIf
 3

	)

466 
	#Oµosôe
 4

	)

470 
	#Rai£Lowe°
 0

	)

471 
	#LowîHighe°
 1

	)

475 
	#Pr›ModeRïœ˚
 0

	)

476 
	#Pr›ModePª≥nd
 1

	)

477 
	#Pr›ModeAµíd
 2

	)

485 
	#GX˛ór
 0x0

	)

486 
	#GX™d
 0x1

	)

487 
	#GX™dRevî£
 0x2

	)

488 
	#GXc›y
 0x3

	)

489 
	#GX™dInvîãd
 0x4

	)

490 
	#GXno›
 0x5

	)

491 
	#GXx‹
 0x6

	)

492 
	#GX‹
 0x7

	)

493 
	#GXn‹
 0x8

	)

494 
	#GXequiv
 0x9

	)

495 
	#GXövît
 0x®

	)

496 
	#GX‹Revî£
 0xb

	)

497 
	#GXc›yInvîãd
 0x¯

	)

498 
	#GX‹Invîãd
 0xd

	)

499 
	#GX«nd
 0xê

	)

500 
	#GX£t
 0x‡

	)

504 
	#LöeSﬁid
 0

	)

505 
	#LöeOnOffDash
 1

	)

506 
	#LöeDoubÀDash
 2

	)

510 
	#C≠NŸLa°
 0

	)

511 
	#C≠Buâ
 1

	)

512 
	#C≠Round
 2

	)

513 
	#C≠Proje˘ög
 3

	)

517 
	#JoöMôî
 0

	)

518 
	#JoöRound
 1

	)

519 
	#JoöBevñ
 2

	)

523 
	#FûlSﬁid
 0

	)

524 
	#FûlTûed
 1

	)

525 
	#FûlStù∂ed
 2

	)

526 
	#FûlO∑queStù∂ed
 3

	)

530 
	#EvíOddRuÀ
 0

	)

531 
	#WödögRuÀ
 1

	)

535 
	#ClùByChûdªn
 0

	)

536 
	#In˛udeIn„ri‹s
 1

	)

540 
	#Uns‹ãd
 0

	)

541 
	#YS‹ãd
 1

	)

542 
	#YXS‹ãd
 2

	)

543 
	#YXB™ded
 3

	)

547 
	#Co‹dModeOrigö
 0

	)

548 
	#Co‹dModePªvious
 1

	)

552 
	#Com∂ex
 0

	)

553 
	#N⁄c⁄vex
 1

	)

554 
	#C⁄vex
 2

	)

558 
	#ArcCh‹d
 0

	)

559 
	#ArcPõSli˚
 1

	)

564 
	#GCFun˘i⁄
 (1L<<0)

	)

565 
	#GCPœ√Mask
 (1L<<1)

	)

566 
	#GCF‹eground
 (1L<<2)

	)

567 
	#GCBackground
 (1L<<3)

	)

568 
	#GCLöeWidth
 (1L<<4)

	)

569 
	#GCLöeStyÀ
 (1L<<5)

	)

570 
	#GCC≠StyÀ
 (1L<<6)

	)

571 
	#GCJoöStyÀ
 (1L<<7)

	)

572 
	#GCFûlStyÀ
 (1L<<8)

	)

573 
	#GCFûlRuÀ
 (1L<<9)

	)

574 
	#GCTûe
 (1L<<10)

	)

575 
	#GCStù∂e
 (1L<<11)

	)

576 
	#GCTûeStùXOrigö
 (1L<<12)

	)

577 
	#GCTûeStùYOrigö
 (1L<<13)

	)

578 
	#GCF⁄t
 (1L<<14)

	)

579 
	#GCSubwödowMode
 (1L<<15)

	)

580 
	#GCGøphicsExposuªs
 (1L<<16)

	)

581 
	#GCClùXOrigö
 (1L<<17)

	)

582 
	#GCClùYOrigö
 (1L<<18)

	)

583 
	#GCClùMask
 (1L<<19)

	)

584 
	#GCDashOff£t
 (1L<<20)

	)

585 
	#GCDashLi°
 (1L<<21)

	)

586 
	#GCArcMode
 (1L<<22)

	)

588 
	#GCLa°Bô
 22

	)

595 
	#F⁄tLe·ToRight
 0

	)

596 
	#F⁄tRightToLe·
 1

	)

598 
	#F⁄tCh™ge
 255

	)

606 
	#XYBôm≠
 0

	)

607 
	#XYPixm≠
 1

	)

608 
	#ZPixm≠
 2

	)

616 
	#AŒocN⁄e
 0

	)

617 
	#AŒocAŒ
 1

	)

622 
	#DoRed
 (1<<0)

	)

623 
	#DoGªí
 (1<<1)

	)

624 
	#DoBlue
 (1<<2)

	)

632 
	#Curs‹Sh≠e
 0

	)

633 
	#TûeSh≠e
 1

	)

634 
	#Stù∂eSh≠e
 2

	)

640 
	#AutoRïótModeOff
 0

	)

641 
	#AutoRïótModeOn
 1

	)

642 
	#AutoRïótModeDeÁu…
 2

	)

644 
	#LedModeOff
 0

	)

645 
	#LedModeOn
 1

	)

649 
	#KBKeyClickPî˚¡
 (1L<<0)

	)

650 
	#KBBñlPî˚¡
 (1L<<1)

	)

651 
	#KBBñlPôch
 (1L<<2)

	)

652 
	#KBBñlDuøti⁄
 (1L<<3)

	)

653 
	#KBLed
 (1L<<4)

	)

654 
	#KBLedMode
 (1L<<5)

	)

655 
	#KBKey
 (1L<<6)

	)

656 
	#KBAutoRïótMode
 (1L<<7)

	)

658 
	#M≠pögSuc˚ss
 0

	)

659 
	#M≠pögBusy
 1

	)

660 
	#M≠pögFaûed
 2

	)

662 
	#M≠pögModifõr
 0

	)

663 
	#M≠pögKeybﬂrd
 1

	)

664 
	#M≠pögPoöãr
 2

	)

670 
	#D⁄tPª„rBœnkög
 0

	)

671 
	#Pª„rBœnkög
 1

	)

672 
	#DeÁu…Bœnkög
 2

	)

674 
	#DißbÀS¸ìnSavî
 0

	)

675 
	#DißbÀS¸ìnI¡îvÆ
 0

	)

677 
	#D⁄tAŒowExposuªs
 0

	)

678 
	#AŒowExposuªs
 1

	)

679 
	#DeÁu…Exposuªs
 2

	)

683 
	#S¸ìnSavîRe£t
 0

	)

684 
	#S¸ìnSavîA˘ive
 1

	)

692 
	#Ho°In£π
 0

	)

693 
	#Ho°Dñëe
 1

	)

697 
	#E«bÀAc˚ss
 1

	)

698 
	#DißbÀAc˚ss
 0

	)

704 
	#SèticGøy
 0

	)

705 
	#GøySˇÀ
 1

	)

706 
	#SèticCﬁ‹
 2

	)

707 
	#P£udoCﬁ‹
 3

	)

708 
	#TrueCﬁ‹
 4

	)

709 
	#Dúe˘Cﬁ‹
 5

	)

714 
	#LSBFú°
 0

	)

715 
	#MSBFú°
 1

	)

	@/usr/include/X11/Xfuncproto.h

30 #i‚de‡
_XFUNCPROTO_H_


31 
	#_XFUNCPROTO_H_


	)

33 #i‚de‡
NìdFun˘i⁄PrŸŸy≥s


34 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

37 #i‚de‡
NìdV¨¨gsPrŸŸy≥s


38 
	#NìdV¨¨gsPrŸŸy≥s
 1

	)

41 #i‡
NìdFun˘i⁄PrŸŸy≥s


43 #i‚de‡
NìdNe°edPrŸŸy≥s


44 
	#NìdNe°edPrŸŸy≥s
 1

	)

47 #i‚de‡
_Xc⁄°


48 
	#_Xc⁄°
 c⁄°

	)

52 #i‚de‡
NARROWPROTO


53 
	#NARROWPROTO


	)

55 #i‚de‡
FUNCPROTO


56 
	#FUNCPROTO
 15

	)

59 #i‚de‡
NìdWidePrŸŸy≥s


60 #ifde‡
NARROWPROTO


61 
	#NìdWidePrŸŸy≥s
 0

	)

63 
	#NìdWidePrŸŸy≥s
 1

	)

69 #i‚de‡
_XFUNCPROTOBEGIN


70 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

71 
	#_XFUNCPROTOBEGIN
 "C" {

	)

72 
	#_XFUNCPROTOEND
 }

	)

74 
	#_XFUNCPROTOBEGIN


	)

75 
	#_XFUNCPROTOEND


	)

80 #i‚de‡
__has_©åibuã


81 
	#__has_©åibuã
(
x
Ë0

	)

83 #i‚de‡
__has_„©uª


84 
	#__has_„©uª
(
x
Ë0

	)

86 #i‚de‡
__has_exãnsi⁄


87 
	#__has_exãnsi⁄
(
x
Ë0

	)

91 #i‡
__has_©åibuã
(
__£¡öñ__
Ë|| (
deföed
(
__GNUC__
) && (__GNUC__ >= 4))

92 
	#_X_SENTINEL
(
x
Ë
	`__©åibuã__
 ((
	`__£¡öñ__
(x)))

	)

94 
	#_X_SENTINEL
(
x
)

	)

98 #i‡(
__has_©åibuã
(
visibûôy
Ë|| (
deföed
(
__GNUC__
) && (__GNUC__ >= 4))) \

99 && !
deföed
(
__CYGWIN__
Ë&& !
	$deföed
(
__MINGW32__
)

100 
	#_X_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

101 
	#_X_HIDDEN
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

102 
	#_X_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
("öã∫Æ")))

	)

103 #ñi‡
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

104 
	#_X_EXPORT
 
__globÆ


	)

105 
	#_X_HIDDEN
 
__hiddí


	)

106 
	#_X_INTERNAL
 
__hiddí


	)

108 
	#_X_EXPORT


	)

109 
	#_X_HIDDEN


	)

110 
	#_X_INTERNAL


	)

115 #i‡
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

116 
	#_X_LIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

117 
	#_X_UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

119 
	#_X_LIKELY
(
x
Ë(x)

	)

120 
	#_X_UNLIKELY
(
x
Ë(x)

	)

125 #i‡
	`__has_©åibuã
(
__cﬁd__
) || \

126 (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 403))

127 
	#_X_COLD
 
	`__©åibuã__
((
__cﬁd__
))

	)

129 
	#_X_COLD


	)

133 #i‡
	`__has_©åibuã
(
dïªˇãd
) \

134 || (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 301)) \

135 || (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x5130))

136 
	#_X_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

138 
	#_X_DEPRECATED


	)

142 #i‡
	`__has_exãnsi⁄
(
©åibuã_dïªˇãd_wôh_mesßge
) || \

143 (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ >5Ë|| ((__GNUC__ =4Ë&& (
__GNUC_MINOR__
 >= 5))))

144 
	#_X_DEPRECATED_MSG
(
_msg
Ë
	`__©åibuã__
((
	`dïªˇãd
(_msg)))

	)

146 
	#_X_DEPRECATED_MSG
(
_msg
Ë
_X_DEPRECATED


	)

150 #i‡
	`__has_©åibuã
(
n‹ëu∫
) \

151 || (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)) \

152 || (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

153 
	#_X_NORETURN
 
	`__©åibuã
((
n‹ëu∫
))

	)

155 
	#_X_NORETURN


	)

159 #i‡
	`__has_©åibuã
(
__f‹m©__
) \

160 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 203)

161 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,x,y)))

	)

163 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
)

	)

169 #i‡
	`__has_©åibuã
(
n⁄nuŒ
) \

170 && 
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

171 
	#_X_NONNULL
(...Ë
	`__©åibuã__
((
	`n⁄nuŒ
(
__VA_ARGS__
)))

	)

172 #ñi‡
	`__has_©åibuã
(
n⁄nuŒ
) \

173 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

174 
	#_X_NONNULL
(
¨gs
...Ë
	`__©åibuã__
((
	`n⁄nuŒ
◊rgs)))

	)

175 #ñi‡
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

176 
	#_X_NONNULL
(...Ë

	)

180 #i‡
	`__has_©åibuã
(
__unu£d__
) \

181 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)

182 
	#_X_UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

184 
	#_X_UNUSED


	)

190 #i‡
	`deföed
(
ölöe
) || \

191 (
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)) || \

192 (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550))

193 
	#_X_INLINE
 
ölöe


	)

194 #ñi‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

195 
	#_X_INLINE
 
__ölöe__


	)

197 
	#_X_INLINE


	)

202 #i‚de‡
_X_RESTRICT_KYWD


203 #i‡
	`deföed
(
ª°ri˘
) || \

204 (
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L) \

205 && !
	$deföed
(
__˝lu•lus
))

206 
	#_X_RESTRICT_KYWD
 
ª°ri˘


	)

207 #ñi‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

208 
	#_X_RESTRICT_KYWD
 
__ª°ri˘__


	)

210 
	#_X_RESTRICT_KYWD


	)

215 #i‡
	`__has_©åibuã
(
no_ßnôize_thªad
)

216 
	#_X_NOTSAN
 
	`__©åibuã__
((
no_ßnôize_thªad
))

	)

218 
	#_X_NOTSAN


	)

	@/usr/include/X11/Xosdefs.h

27 #i‚de‡
_XOSDEFS_H_


28 
	#_XOSDEFS_H_


	)

37 #ifde‡
_SCO_DS


38 #i‚de‡
__SCO__


39 
	#__SCO__


	)

43 #ifde‡
__i386__


44 #ifde‡
SYSV


45 #i‡!
deföed
(
__SCO__
) && \

46 !
deföed
(
__UNIXWARE__
Ë&& !
	$deföed
(
__sun
)

47 #i‡!
	`deföed
(
_POSIX_SOURCE
)

48 
	#X_NOT_POSIX


	)

54 #ifde‡
__sun


58 #i‡
	`deföed
(
__SVR4
Ë&& !deföed(
SVR4
)

59 
	#SVR4
 1

	)

61 #ifde‡
SVR4


63 
	#X_POSIX_C_SOURCE
 199300L

	)

67 #ifde‡
WIN32


68 #i‚de‡
_POSIX_


69 
	#X_NOT_POSIX


	)

74 #ifde‡
__APPLE__


75 
	#NULL_NOT_ZERO


	)

82 #i‡
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_POSIX_SOURCE
Ë|| deföed(
_POSIX_C_SOURCE
)

83 #i‚de‡
_DARWIN_C_SOURCE


84 
	#_DARWIN_C_SOURCE


	)

90 #ifde‡
__GNU__


91 #i‚de‡
PATH_MAX


92 
	#PATH_MAX
 4096

	)

94 #i‚de‡
MAXPATHLEN


95 
	#MAXPATHLEN
 4096

	)

99 #i‡
	`deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

100 #i‚de‡
PATH_MAX


101 
	#PATH_MAX
 1024

	)

103 #i‚de‡
MAXPATHLEN


104 
	#MAXPATHLEN
 1024

	)

108 #i‡
	`deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__FªeBSD__
) \

109 || 
	`deföed
(
__APPLE__
Ë|| 
	$deföed
(
__Døg⁄Fly__
)

110 #i‚de‡
CSRG_BASED


111 
	#CSRG_BASED


	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 #ifde‡
__USE_ISOC99


26 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

27 #ifde‡
__MATH_DECLARE_LDOUBLE


28 #ifde‡
__NO_LONG_DOUBLE_MATH


29 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

31 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

36 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


38 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

40 #ifde‡
__USE_ISOC99


41 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

42 #ifde‡
__MATH_DECLARE_LDOUBLE


43 #ifde‡
__NO_LONG_DOUBLE_MATH


44 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

46 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

52 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

53 #ifde‡
__USE_ISOC99


54 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

55 #ifde‡
__MATH_DECLARE_LDOUBLE


56 #ifde‡
__NO_LONG_DOUBLE_MATH


57 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

59 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

65 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

66 #ifde‡
__USE_ISOC99


67 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

68 #ifde‡
__MATH_DECLARE_LDOUBLE


69 #ifde‡
__NO_LONG_DOUBLE_MATH


70 
__REDIRECT_NTH
 (
©™2l
, (, ),

71 
__©™2_föôe
);

73 
__REDIRECT_NTH
 (
©™2l
, (, ),

74 
__©™2l_föôe
);

79 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


81 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

83 #ifde‡
__USE_ISOC99


84 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

85 #ifde‡
__MATH_DECLARE_LDOUBLE


86 #ifde‡
__NO_LONG_DOUBLE_MATH


87 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

89 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

95 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

96 #ifde‡
__USE_ISOC99


97 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

102 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

108 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

109 #ifde‡
__USE_ISOC99


110 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

111 #ifde‡
__MATH_DECLARE_LDOUBLE


112 #ifde‡
__NO_LONG_DOUBLE_MATH


113 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

115 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

120 #ifde‡
__USE_GNU


122 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

123 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

124 #ifde‡
__MATH_DECLARE_LDOUBLE


125 #ifde‡
__NO_LONG_DOUBLE_MATH


126 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

128 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

133 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

134 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

135 #ifde‡
__MATH_DECLARE_LDOUBLE


136 #ifde‡
__NO_LONG_DOUBLE_MATH


137 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

139 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

144 #ifde‡
__USE_ISOC99


146 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

147 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

148 #ifde‡
__MATH_DECLARE_LDOUBLE


149 #ifde‡
__NO_LONG_DOUBLE_MATH


150 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

152 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

158 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

159 #ifde‡
__USE_ISOC99


160 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

161 #ifde‡
__MATH_DECLARE_LDOUBLE


162 #ifde‡
__NO_LONG_DOUBLE_MATH


163 
__REDIRECT_NTH
 (
fmodl
, (, ),

164 
__fmod_föôe
);

166 
__REDIRECT_NTH
 (
fmodl
, (, ),

167 
__fmodl_föôe
);

172 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


174 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

176 #ifde‡
__USE_ISOC99


177 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

178 #ifde‡
__MATH_DECLARE_LDOUBLE


179 #ifde‡
__NO_LONG_DOUBLE_MATH


180 
__REDIRECT_NTH
 (
hypŸl
, (, ),

181 
__hypŸ_föôe
);

183 
__REDIRECT_NTH
 (
hypŸl
, (, ),

184 
__hypŸl_föôe
);

189 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


191 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

193 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


194 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

195 #ifde‡
__MATH_DECLARE_LDOUBLE


196 #ifde‡
__NO_LONG_DOUBLE_MATH


197 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

199 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

204 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


206 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

208 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


209 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

210 #ifde‡
__MATH_DECLARE_LDOUBLE


211 #ifde‡
__NO_LONG_DOUBLE_MATH


212 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

214 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


221 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

223 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


224 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

225 #ifde‡
__MATH_DECLARE_LDOUBLE


226 #ifde‡
__NO_LONG_DOUBLE_MATH


227 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

229 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

234 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


236 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

238 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


239 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

240 #ifde‡
__MATH_DECLARE_LDOUBLE


241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

244 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


251 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

253 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


254 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

255 #ifde‡
__MATH_DECLARE_LDOUBLE


256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

259 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

264 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


266 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

268 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


269 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

270 #ifde‡
__MATH_DECLARE_LDOUBLE


271 #ifde‡
__NO_LONG_DOUBLE_MATH


272 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

274 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

279 #ifde‡
__USE_MISC


281 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

282 #ifde‡
__USE_ISOC99


283 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

284 #ifde‡
__MATH_DECLARE_LDOUBLE


285 #ifde‡
__NO_LONG_DOUBLE_MATH


286 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

287 
__lgamma_r_föôe
);

289 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

290 
__lgammÆ_r_föôe
);

296 
__lgamma_r_föôe
 (, *);

297 
__lgammaf_r_föôe
 (, *);

298 #ifde‡
__NO_LONG_DOUBLE_MATH


299 
__REDIRECT_NTH
 (
__lgammÆ_r_föôe
, (, *),

300 
__lgamma_r_föôe
);

302 
__lgammÆ_r_föôe
 (, *);

305 #i‡((
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

306 && 
deföed
 
	g__exã∫_Æways_ölöe
)

308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

310 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


311  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

313 
__loˇl_signgam
 = 0;

314  
	`__lgamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

316 
	}
}

318 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


319 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

321 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


322  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

324 
__loˇl_signgam
 = 0;

325  
	`__lgammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

327 
	}
}

328 #ifde‡
__MATH_DECLARE_LDOUBLE


329 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

331 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


332  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

334 
__loˇl_signgam
 = 0;

335  
	`__lgammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

337 
	}
}

341 #i‡((
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)) \

342 && 
deföed
 
	g__exã∫_Æways_ölöe
)

344 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

346  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

347 
	}
}

348 #ifde‡
__USE_ISOC99


349 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

351  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

352 
	}
}

353 #ifde‡
__MATH_DECLARE_LDOUBLE


354 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

356  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

357 
	}
}

363 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

364 #ifde‡
__USE_ISOC99


365 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

366 #ifde‡
__MATH_DECLARE_LDOUBLE


367 #ifde‡
__NO_LONG_DOUBLE_MATH


368 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

370 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

376 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

377 #ifde‡
__USE_ISOC99


378 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

379 #ifde‡
__MATH_DECLARE_LDOUBLE


380 #ifde‡
__NO_LONG_DOUBLE_MATH


381 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

383 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

388 #ifde‡
__USE_ISOC99


390 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

391 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

396 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

402 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

403 #ifde‡
__USE_ISOC99


404 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

405 #ifde‡
__MATH_DECLARE_LDOUBLE


406 #ifde‡
__NO_LONG_DOUBLE_MATH


407 
__REDIRECT_NTH
 (
powl
, (, ),

408 
__pow_föôe
);

410 
__REDIRECT_NTH
 (
powl
, (, ),

411 
__powl_föôe
);

416 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


418 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

420 #ifde‡
__USE_ISOC99


421 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

422 #ifde‡
__MATH_DECLARE_LDOUBLE


423 #ifde‡
__NO_LONG_DOUBLE_MATH


424 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

425 
__ªmaödî_föôe
);

427 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

428 
__ªmaödîl_föôe
);

433 #i‡(
deföed
 
__USE_MISC
 \

434 || (
deföed
 
	g__USE_XOPEN_EXTENDED
 && !deföed 
	g__USE_XOPEN2K8
))

436 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

438 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


439 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

440 #ifde‡
__MATH_DECLARE_LDOUBLE


441 #ifde‡
__NO_LONG_DOUBLE_MATH


442 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

443 
__sˇlb_föôe
);

445 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

446 
__sˇlbl_föôe
);

452 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

453 #ifde‡
__USE_ISOC99


454 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

455 #ifde‡
__MATH_DECLARE_LDOUBLE


456 #ifde‡
__NO_LONG_DOUBLE_MATH


457 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

459 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

465 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

466 #ifde‡
__USE_ISOC99


467 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

468 #ifde‡
__MATH_DECLARE_LDOUBLE


469 #ifde‡
__NO_LONG_DOUBLE_MATH


470 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

472 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

477 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


479 
__gamma_r_föôe
 (, *);

480 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

482 
__loˇl_signgam
 = 0;

483 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

484  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

485 
	}
}

486 
__gammaf_r_föôe
 (, *);

487 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

489 
__loˇl_signgam
 = 0;

490 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

491  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

492 
	}
}

493 #ifde‡
__MATH_DECLARE_LDOUBLE


494 
__gammÆ_r_föôe
 (, *);

495 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

497 
__loˇl_signgam
 = 0;

498 #ifde‡
__NO_LONG_DOUBLE_MATH


499 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

501 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

503  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

504 
	}
}

	@/usr/include/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #ñi‡
__GNUC_PREREQ
 (6,0)

33 
	#__DECL_SIMD_x86_64
 
	`__©åibuã__
 ((
	`__simd__
 ("nŸöbønch")))

	)

36 #ifde‡
__DECL_SIMD_x86_64


37 #unde‡
__DECL_SIMD_cos


38 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_cosf


40 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_sö


42 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_söf


44 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_söcos


46 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_söcosf


48 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_log


50 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_logf


52 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_exp


54 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

55 #unde‡
__DECL_SIMD_expf


56 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

57 #unde‡
__DECL_SIMD_pow


58 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

59 #unde‡
__DECL_SIMD_powf


60 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL_VEC
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


199 #i‡(!
deföed
 
__˝lu•lus
 \

200 || 
	g__˝lu•lus
 < 201103L \

201 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

204 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

211 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

215 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

218 #ifde‡
__USE_ISOC99


219 
__BEGIN_NAMESPACE_C99


221 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

222 
	g__END_NAMESPACE_C99


225 #ifde‡
__USE_ISOC99


226 
__BEGIN_NAMESPACE_C99


228 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

229 
	g__END_NAMESPACE_C99


234 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

236 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

237 #i‡(!
deföed
 
__˝lu•lus
 \

238 || 
	g__˝lu•lus
 < 201103L \

239 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

241 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

245 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && 
__MATH_DECLARING_DOUBLE
)

247 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

248 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

249 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

250 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

256 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

260 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

261 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

262 
	g__END_NAMESPACE_C99


265 #ifde‡
__USE_ISOC99


266 
__BEGIN_NAMESPACE_C99


268 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

269 
	g__END_NAMESPACE_C99


272 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

274 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

277 #ifde‡
__USE_MISC


281 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

285 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


286 
__BEGIN_NAMESPACE_C99


289 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

292 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

293 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


294 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

297 #ifde‡
__USE_GNU


299 
__MATHCALL
 (
√xtdown
,, (
_MdoubÀ_
 
__x
));

301 
__MATHCALL
 (
√xtup
,, (
_MdoubÀ_
 
__x
));

305 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

307 #ifde‡
__USE_ISOC99


309 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

313 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

316 #ifde‡
__USE_ISOC99


318 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

322 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

326 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

330 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

335 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

342 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

343 
__exãnsi⁄__


344 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

348 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

349 
__exãnsi⁄__


350 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

354 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

357 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

360 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

364 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

365 
__©åibuã__
 ((
__c⁄°__
));

368 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

369 
__©åibuã__
 ((
__c⁄°__
));

373 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

376 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


377 
	g__END_NAMESPACE_C99


380 #ifde‡
__USE_GNU


382 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

383 
__©åibuã__
 ((
__c⁄°__
));

386 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

387 && 
	g__MATH_DECLARING_DOUBLE
 \

388 && !
deföed
 
	g__USE_XOPEN2K8
)

390 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


390 #i‡!
deföed
 
__SSE2_MATH__
 && !deföed 
__x86_64__


391 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

392 && 
deföed
 
	g__OPTIMIZE__
)

396 #unde‡
m©h_îrh™dlög


405 #ifde‡
__USE_ISOC99


406 
	#__ölöe_m©h›
(
func
, 
›
) \

407 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

408 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

409 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›NP
(
func
, 
›
) \

411 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

412 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

415 
	#__ölöe_m©h›
(
func
, 
›
) \

416 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

417 
	#__ölöe_m©h›NP
(
func
, 
›
) \

418 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

421 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

422 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

423 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

424 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

427 #ifde‡
__USE_ISOC99


428 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

429 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

434 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

437 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

438 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

439 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

440 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

443 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

444 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

445 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

447 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

448 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

450 
Êﬂt_ty≥
 
__ªsu…
; \

451 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

452  
__ªsu…
; \

453 }

	)

456 #ifde‡
__USE_ISOC99


457 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

460 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

461 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

462 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

463 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

464 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

465 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

469 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

470 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

471 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

472 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

473 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

478 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

479 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

480 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

482 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

483 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

484 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

485 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

486 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

487 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

488 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

489 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

490 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

491 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

492 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

493 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

496 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

497 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

498 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

500 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

501 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

503 
code
; \

504 }

	)

507 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

508 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

509 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

511 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

512 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

514 
code
; \

515 }

	)

517 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

518 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

519 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

521 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

522 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

523 
Êﬂt_ty≥
 
¨g3
)) \

525 
code
; \

526 }

	)

530 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


534 #ifde‡
__FAST_MATH__


535 #ifde‡
__USE_GNU


536 
	#__söcos_code
 \

537 
__co§
; \

538 
__sör
; \

539 
__swtmp
; \

540 
__asm
 
__vﬁ©ûe__
 \

555 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

556 *
__söx
 = 
__sör
; \

557 *
__cosx
 = 
__co§


	)

559 
__MATH_INLINE
 

560 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

562 
__söcos_code
;

563 
	}
}

565 
__MATH_INLINE
 

566 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

568 
__söcos_code
;

569 
	}
}

571 
__MATH_INLINE
 

572 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

574 
__söcos_code
;

575 
	}
}

582 #i‡
__GNUC_PREREQ
 (3, 5)

583 
	#__expm1_code
 \

584 
__ãmp
; \

585 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

586  
__ãmp
 ? __ãm∞: 
__x


	)

588 
	#__expm1_code
 \

589 
__vÆue
; \

590 
__exp⁄ít
; \

591 
__ãmp
; \

592 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

602 
__asm
 
__vﬁ©ûe__
 \

604 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

605 
__ãmp
 -= 1.0; \

606 
__ãmp
 +
__vÆue
; \

607  
__ãmp
 ? __ãm∞: 
__x


	)

609 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

611 #i‡
	`__GNUC_PREREQ
 (3, 4)

612 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

614 
	#__exp_code
 \

615 
__vÆue
; \

616 
__exp⁄ít
; \

617 
__asm
 
__vﬁ©ûe__
 \

625 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

626 
__vÆue
 += 1.0; \

627 
__asm
 
__vﬁ©ûe__
 \

629 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

630  
__vÆue


	)

631 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

632 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

636 #i‡!
	`__GNUC_PREREQ
 (3, 5)

637 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

638 
__vÆue
; \

639 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

640 
__asm
 
__vﬁ©ûe__
 \

642 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

643  
__vÆue
)

648 #i‡
	`__GNUC_PREREQ
 (3, 4)

649 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

650  
	$__buûtö_©™2l
 (
__y
, 
__x
))

652 
	#__©™2_code
 \

653 
__vÆue
; \

654 
__asm
 
__vﬁ©ûe__
 \

656 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

657  
__vÆue


	)

658 #ifde‡
__FAST_MATH__


659 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

661 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

665 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

666 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

667 
__vÆue
; \

668 
__asm
 
__vﬁ©ûe__
 \

673 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

674  
__vÆue
)

678 #ifde‡
__FAST_MATH__


679 #i‡!
	`__GNUC_PREREQ
 (3,3)

680 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

681 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

682 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

684 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

688 #i‡
	`__GNUC_PREREQ
 (2, 8)

689 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

690 #ifde‡
__USE_ISOC99


691 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

692 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

694 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

696 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

697 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

700 #ifde‡
__FAST_MATH__


701 #i‡!
	`__GNUC_PREREQ
 (3, 4)

703 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

705 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

707 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 #i‡!
	`__GNUC_PREREQ
 (3, 5)

711 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

713 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

714 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

717 #i‡!
	`__GNUC_PREREQ
 (3, 4)

718 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

722 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

723 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

724 { 
__xld
: 
__x
 
	}
}; \

725 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

726 
	g__n
.
	g__xi
[1] = 0x80000000; \

727 
	g__n
.
	g__xi
[0] = 0; \

728  
	g__n
.
	g__xld
)

731 #ifde‡
__FAST_MATH__


733 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

734 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

735  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

737 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

738 
__ex
 = 
	`__ex∂
 (
__x
); \

739  0.5 * (
__ex
 + 1.0 / __ex))

741 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

742 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

743  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

746 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

747 
__vÆue
; \

748 
__ign‹e
; \

749 
__cw
; \

750 
__cwtmp
; \

751 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

759 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

760 "=m" (
__cw
) \

761 : "0" (
__x
)); \

762  
__vÆue
)

764 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

765 
__vÆue
; \

766 
__ign‹e
; \

767 
__cw
; \

768 
__cwtmp
; \

769 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

777 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

778 "=m" (
__cw
) \

779 : "0" (
__x
)); \

780  
__vÆue
)

782 #ifde‡
__FAST_MATH__


783 
	#__ldexp_code
 \

784 
__vÆue
; \

785 
__asm
 
__vﬁ©ûe__
 \

787 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

788  
__vÆue


	)

790 
__MATH_INLINE
 

791 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

793 
__ldexp_code
;

794 
	}
}

799 #ifde‡
__USE_ISOC99


801 #ifde‡
__FAST_MATH__


802 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

806 
	#__M_SQRT2
 1.41421356237309504880L

	)

808 #i‡!
	`__GNUC_PREREQ
 (3, 5)

809 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

810 
__vÆue
; \

811 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

812 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

814 
__asm
 
__vﬁ©ûe__
 \

818 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

819  
__vÆue
)

824 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

825 
__y
 = 
	`__Áb¶
 (
__x
); \

826  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

827 * 
	$__sgn1l
 (
__x
)))

829 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

830  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

832 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

833 
__y
 = 
	`__Áb¶
 (
__x
); \

834  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

837 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

838  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

840 #i‡!
	`__GNUC_PREREQ
 (3, 5)

841 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

842 
__vÆue
; \

843 
__junk
; \

844 
__asm
 
__vﬁ©ûe__
 \

846 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

847  
__vÆue
)

853 #ifde‡
__USE_ISOC99


854 #ifde‡
__FAST_MATH__


856 #i‡!
	`__GNUC_PREREQ
 (3, 5)

857 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

860 
__MATH_INLINE
 

861 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

863 
__ldexp_code
;

864 
	}
}

866 
__MATH_INLINE
 

867 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

869 
__ldexp_code
;

870 
	}
}

872 
__ölöe_m©h›NP
 (
röt
, "frndint")

875 
	#__Ãöt_code
 \

876 
__Ãöåes
; \

877 
__asm__
 
__vﬁ©ûe__
 \

879 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

880  
__Ãöåes


	)

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãötf
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöt
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 
__MATH_INLINE
 

892 
__NTH
 (
	$Ãöé
 (
__x
))

894 
__Ãöt_code
;

895 
	}
}

896 #unde‡
__Ãöt_code


898 
	#__Œröt_code
 \

899 
__Œröåes
; \

900 
__asm__
 
__vﬁ©ûe__
 \

902 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

903  
__Œröåes


	)

904 
__exãnsi⁄__


905 
__MATH_INLINE
 

906 
__NTH
 (
	$Œrötf
 (
__x
))

908 
__Œröt_code
;

909 
	}
}

910 
__exãnsi⁄__


911 
__MATH_INLINE
 

912 
__NTH
 (
	$Œröt
 (
__x
))

914 
__Œröt_code
;

915 
	}
}

916 
__exãnsi⁄__


917 
__MATH_INLINE
 

918 
__NTH
 (
	$Œröé
 (
__x
))

920 
__Œröt_code
;

921 
	}
}

922 #unde‡
__Œröt_code


927 #ifde‡
__USE_MISC


929 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

930 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

931 
__vÆue
; \

932 
__˛obbîed
; \

933 
__asm
 
__vﬁ©ûe__
 \

938 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

939  
__vÆue
)

944 
__MATH_INLINE
 

945 
__NTH
 (
	$__föôe
 (
__x
))

947  (
__exãnsi⁄__


948 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

950 
	}
}

955 #unde‡
__©™2_code


956 #ifde‡
__FAST_MATH__


957 #unde‡
__expm1_code


958 #unde‡
__exp_code


959 #unde‡
__söcos_code


966 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


967 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

968 
__ölöe_m©hcode2_
 (, 
__õì754_©™2l
, 
__y
, 
__x
,

969 
__vÆue
;

970 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

971 : "Ò" (
__vÆue
)

972 : "0" (
__x
), "u" (
__y
) : "st(1)");

973  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_INLINE_u«lig√d
 1

	)

27 
	#_HAVE_STRING_ARCH_memp˝y
 1

	)

31 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

32 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

33 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

34 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

35 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

36 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

37 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

38 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

39 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

40 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

41 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

42 || 
deföed
 
	g__btvî2__
)

46 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

47 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

49 #i‚de‡
__STRING_INLINE


50 #i‚de‡
__exã∫_ölöe


51 
	#__STRING_INLINE
 
ölöe


	)

53 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

58 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

59 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

60 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

62 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

63 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

64 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

65 | ((c⁄° *Ë(
§c
))[
idx
])

	)

69 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

70 
	#mem˝y
(
de°
, 
§c
, 
n
) \

71 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

72 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

73 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

74 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

75 ((
n
) == 0 \

76 ? (
de°
) \

77 : (((
n
) % 4 == 0) \

78 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

79 : (((
n
) % 2 == 0) \

80 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

81 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

83 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

84 
size_t
 
__n
);

86 
__STRING_INLINE
 *

87 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

89 
__d0
, 
__d1
;

90 *
__tmp
 = 
__de°
;

91 
__asm__
 
__vﬁ©ûe__


99 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

100 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

102  
__de°
;

103 
	}
}

105 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

106 
size_t
 
__n
);

108 
__STRING_INLINE
 *

109 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

111 
__d0
, 
__d1
;

112 *
__tmp
 = 
__de°
;

113 
__asm__
 
__vﬁ©ûe__


126 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

127 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

129  
__de°
;

130 
	}
}

132 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

134 
__STRING_INLINE
 *

135 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

137 
__d0
, 
__d1
, 
__d2
;

138 *
__tmp
 = 
__de°
;

139 
__asm__
 
__vﬁ©ûe__


150 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

151 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

152 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

153 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

155  
__de°
;

156 
	}
}

158 
	#_HAVE_STRING_ARCH_memmove
 1

	)

159 #i‚de‡
_FORCE_INLINES


162 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

164 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

165 
	`__asm__
 ("memmove");

167 
__STRING_INLINE
 *

168 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

170 
__d0
, 
__d1
, 
__d2
;

171 *
__tmp
 = 
__de°
;

172 i‡(
__de°
 < 
__§c
)

173 
__asm__
 
__vﬁ©ûe__


176 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

177 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

178 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

179 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

181 
__asm__
 
__vﬁ©ûe__


187 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

188 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

189 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

190 "2" (
__n
 + (*Ë
__tmp
),

191 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

192  
__de°
;

193 
	}
}

197 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

198 #i‚de‡
_FORCE_INLINES


199 #i‚de‡
__PIC__


201 
__STRING_INLINE
 

202 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

204 
__d0
, 
__d1
, 
__d2
;

205 
__ªs
;

206 
__asm__
 
__vﬁ©ûe__


214 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

215 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

216 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

217 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

219  
__ªs
;

220 
	}
}

225 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

226 
	#_USE_STRING_ARCH_mem£t
 1

	)

227 
	#mem£t
(
s
, 
c
, 
n
) \

228 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

229 ? ((
n
) == 1 \

230 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

231 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

232 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

233 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

236 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

237 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

238 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

240 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

241 *((*Ë
__s
Ë(Ë(
c
); \

242 
__s
; })

	)

244 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

245 ({ *
__s
 = (
s
); \

247 
__ui
; \

248 
__usi
; \

249 
__uc
; \

250 } *
__u
 = 
__s
; \

251 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

257 i‡((
n
) == 3 || (n) >= 5) \

258 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

261 
n
) \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__ui
 = 
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

273 
__u
->
__usi
 = (Ë
__c
; \

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

275 
__u
->
__uc
 = (Ë
__c
; \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__usi
 = (Ë
__c
; \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__uc
 = (Ë
__c
; \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

312 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

314 
__u
->
__ui
 = 
__c
; \

319 
__s
; })

	)

321 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

322 (((
n
) % 4 == 0) \

323 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

324 
n
) \

325 : (((
n
) % 2 == 0) \

326 ? 
	`__mem£t_c˙_by2
 (
s
, \

327 ((Ë((Ë(
c
))) * 0x01010101,\

328 
n
) \

329 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

331 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

332 
size_t
 
__n
);

334 
__STRING_INLINE
 *

335 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

337 *
__tmp
 = 
__s
;

338 
__d0
;

339 #ifde‡
__i686__


340 
__asm__
 
__vﬁ©ûe__


343 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

344 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

345 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

348 
__asm__
 
__vﬁ©ûe__


354 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

355 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359  
__s
;

360 
	}
}

362 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

363 
size_t
 
__n
);

365 
__STRING_INLINE
 *

366 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

368 
__d0
, 
__d1
;

369 *
__tmp
 = 
__s
;

370 #ifde‡
__i686__


371 
__asm__
 
__vﬁ©ûe__


375 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

376 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

377 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

380 
__asm__
 
__vﬁ©ûe__


386 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

387 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

388 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

391  
__s
;

392 
	}
}

394 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

395 (((
n
) % 4 == 0) \

396 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

397 : (((
n
) % 2 == 0) \

398 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

399 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

401 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

403 
__STRING_INLINE
 *

404 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

406 *
__tmp
 = 
__s
;

407 
__d0
;

408 
__asm__
 
__vﬁ©ûe__


418 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

419 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

420 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

422  
__s
;

423 
	}
}

425 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

427 
__STRING_INLINE
 *

428 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
;

431 *
__tmp
 = 
__s
;

432 
__asm__
 
__vﬁ©ûe__


443 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

444 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

445 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

447  
__s
;

448 
	}
}

452 
	#_HAVE_STRING_ARCH_memchr
 1

	)

453 #i‚de‡
_FORCE_INLINES


454 
__STRING_INLINE
 *

455 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

457 
__d0
;

458 #ifde‡
__i686__


459 
__d1
;

461 *
__ªs
;

462 i‡(
__n
 == 0)

463  
NULL
;

464 #ifde‡
__i686__


465 
__asm__
 
__vﬁ©ûe__


469 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

470 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

471 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

474 
__asm__
 
__vﬁ©ûe__


480 : "=D" (
__ªs
), "=&c" (
__d0
)

481 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

482 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

485  
__ªs
 - 1;

486 
	}
}

489 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

490 #i‚de‡
_FORCE_INLINES


491 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

493 
__STRING_INLINE
 *

494 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

496 
__d0
;

497 #ifde‡
__i686__


498 
__d1
;

500 *
__ªs
;

501 i‡(
__n
 == 0)

502  
NULL
;

503 #ifde‡
__i686__


504 
__asm__
 
__vﬁ©ûe__


510 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

511 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

512 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

515 
__asm__
 
__vﬁ©ûe__


522 : "=D" (
__ªs
), "=&c" (
__d0
)

523 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

524 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

527  
__ªs
;

528 
	}
}

529 #ifde‡
__USE_GNU


530 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

535 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

536 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

538 #i‚de‡
_FORCE_INLINES


539 
__STRING_INLINE
 *

540 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

542 
__d0
;

543 *
__ªs
;

544 
__asm__
 
__vﬁ©ûe__


547 : "=D" (
__ªs
), "=&c" (
__d0
)

548 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

549 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

551  
__ªs
 - 1;

552 
	}
}

553 #ifde‡
__USE_GNU


554 
__STRING_INLINE
 *

555 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

557  
	`__øwmemchr
 (
__s
, 
__c
);

558 
	}
}

564 
	#_HAVE_STRING_ARCH_°æí
 1

	)

565 
	#°æí
(
°r
) \

566 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

567 ? 
	`__buûtö_°æí
 (
°r
) \

568 : 
	`__°æí_g
 (
°r
)))

	)

569 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

571 
__STRING_INLINE
 
size_t


572 
	$__°æí_g
 (c⁄° *
__°r
)

574 
__dummy
;

575 c⁄° *
__tmp
 = 
__°r
;

576 
__asm__
 
__vﬁ©ûe__


582 : "Ù" (
__tmp
), "=&q" (
__dummy
)

583 : "0" (
__°r
),

584 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

586  
__tmp
 - 
__°r
 - 1;

587 
	}
}

591 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

592 
	#°r˝y
(
de°
, 
§c
) \

593 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

594 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

595 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

596 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

597 (c⁄° *Ë(
§c
), \

598 
	`°æí
 (
§c
) + 1)) \

599 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

601 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

602 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

604 
__ui
; \

605 
__usi
; \

606 
__uc
; \

607 
__c
; \

608 } *
__u
 = (*Ë
__de°
; \

609 
§˛í
) \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

618 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

619 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

620 
__u
->
__uc
 = '\0'; \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__uc
 = '\0'; \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

632 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

637 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

638 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

640 
__u
->
__uc
 = '\0'; \

643 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

645 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

648 (*Ë
__de°
; }))

	)

650 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

652 
__STRING_INLINE
 *

653 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

655 *
__tmp
 = 
__de°
;

656 
__dummy
;

657 
__asm__
 
__vﬁ©ûe__


666 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

667 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

668 : "0" (
__§c
), "1" (
__tmp
),

669 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

671  
__de°
;

672 
	}
}

675 #ifde‡
__USE_GNU


676 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

678 
	#__°p˝y
(
de°
, 
§c
) \

679 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

680 ? (
	`°æí
 (
§c
) + 1 <= 8 \

681 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

682 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

683 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

684 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

685 ((
§˛í
) % 4 == 0 \

686 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

687 : ((
§˛í
) % 2 == 0 \

688 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

689 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

692 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

694 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

695 (
	`__exãnsi⁄__
 ({ union { \

696 
__ui
; \

697 
__usi
; \

698 
__uc
; \

699 
__c
; \

700 } *
__u
 = (*Ë(
de°
); \

701 
§˛í
) \

704 
__u
->
__uc
 = '\0'; \

707 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

708 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

713 
__u
->
__uc
 = '\0'; \

716 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

717 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

721 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

722 
__u
->
__uc
 = '\0'; \

725 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

726 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

727 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

728 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

731 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

732 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

733 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

734 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

735 
__u
->
__uc
 = '\0'; \

738 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

739 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

740 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

741 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

744 (*Ë
__u
; }))

	)

746 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

747 
size_t
 
__§˛í
);

749 
__STRING_INLINE
 *

750 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

752 *
__tmp
 = 
__de°
;

753 
__d0
, 
__d1
;

754 
__asm__
 
__vﬁ©ûe__


762 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

763 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

765  
__tmp
;

766 
	}
}

768 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

769 
size_t
 
__§˛í
);

771 
__STRING_INLINE
 *

772 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

774 *
__tmp
 = 
__de°
;

775 
__d0
, 
__d1
;

776 
__asm__
 
__vﬁ©ûe__


789 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

790 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

791 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

792 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

794  
__tmp
 + 2;

795 
	}
}

797 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

798 
size_t
 
__§˛í
);

800 
__STRING_INLINE
 *

801 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

803 
__d0
, 
__d1
;

804 *
__tmp
 = 
__de°
;

805 
__asm__
 
__vﬁ©ûe__


816 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

817 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

818 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

819 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

821  
__tmp
;

822 
	}
}

824 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

826 
__STRING_INLINE
 *

827 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

829 *
__tmp
 = 
__de°
;

830 
__dummy
;

831 
__asm__
 
__vﬁ©ûe__


840 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

841 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

842 : "0" (
__§c
), "1" (
__tmp
),

843 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

845  
__tmp
 - 1;

846 
	}
}

851 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

852 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

853 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

854 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

855 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

856 (c⁄° *Ë(
§c
), 
n
) \

857 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

858 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

859 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

860 (((
§˛í
) % 4 == 0) \

861 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

862 : (((
§˛í
) % 2 == 0) \

863 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

864 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

866 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

867 
size_t
 
__§˛í
, size_à
__n
);

869 
__STRING_INLINE
 *

870 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

872 *
__tmp
 = 
__de°
;

873 
__dummy1
, 
__dummy2
;

874 
__asm__
 
__vﬁ©ûe__


882 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

883 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

884 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

885 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

887 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

888  
__de°
;

889 
	}
}

891 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

892 
size_t
 
__§˛í
, size_à
__n
);

894 
__STRING_INLINE
 *

895 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

897 *
__tmp
 = 
__de°
;

898 
__dummy1
, 
__dummy2
;

899 
__asm__
 
__vﬁ©ûe__


912 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

913 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

914 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

915 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

917 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

918  
__de°
;

919 
	}
}

921 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

922 
size_t
 
__§˛í
, size_à
__n
);

924 
__STRING_INLINE
 *

925 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

927 
__d0
, 
__d1
;

928 *
__tmp
 = 
__de°
;

929 
__asm__
 
__vﬁ©ûe__


940 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

941 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

942 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

943 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

945 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

946  
__de°
;

947 
	}
}

949 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

950 
size_t
 
__n
);

952 
__STRING_INLINE
 *

953 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

955 *
__tmp
 = 
__de°
;

956 
__dummy
;

957 i‡(
__n
 > 0)

958 
__asm__
 
__vﬁ©ûe__


974 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

975 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

978  
__de°
;

979 
	}
}

983 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

984 
	#°rˇt
(
de°
, 
§c
) \

985 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

986 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

987 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

989 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

990 
size_t
 
__§˛í
);

992 
__STRING_INLINE
 *

993 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

995 #ifde‡
__i686__


996 
__d0
;

997 *
__tmp
;

998 
__asm__
 
__vﬁ©ûe__


1000 : "=D" (
__tmp
), "=&c" (
__d0
),

1001 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1002 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1003 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1005 --
__tmp
;

1007 *
__tmp
 = 
__de°
;

1008 
__asm__
 
__vﬁ©ûe__


1014 : "Ù" (
__tmp
),

1015 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1016 : "0" (
__tmp
),

1017 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1020 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1021  
__de°
;

1022 
	}
}

1024 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1026 
__STRING_INLINE
 *

1027 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1029 *
__tmp
 = 
__de°
;

1030 
__dummy
;

1031 
__asm__
 
__vﬁ©ûe__


1044 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1045 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1046 : "1" (
__tmp
), "2" (
__§c
),

1047 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1049  
__de°
;

1050 
	}
}

1054 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1055 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1056 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1057 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1058 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1059 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1060 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1061 (c⁄° *Ë(
§c
), \

1062 (
n
)Ë0, 
__de°
)) \

1063 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1065 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1066 
size_t
 
__n
);

1068 
__STRING_INLINE
 *

1069 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1071 *
__tmp
 = 
__de°
;

1072 
__dummy
;

1073 #ifde‡
__i686__


1074 
__asm__
 
__vﬁ©ûe__


1088 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1089 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1092 
__asm__
 
__vﬁ©ûe__


1109 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1110 : "1" ((Ë
__tmp
 - 1), "2" (
__§c
), "3" (
__n
)

1113  
__de°
;

1114 
	}
}

1118 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1119 
	#°rcmp
(
s1
, 
s2
) \

1120 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1121 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1122 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1123 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1124 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1125 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1126 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1127 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1128 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1129 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1130 (c⁄° *Ë(
s2
), \

1131 
	`°æí
 (
s1
)) \

1132 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1133 (c⁄° *Ë(
s2
), \

1134 
	`°æí
 (
s1
))) \

1135 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1136 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1137 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1138 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1139 (c⁄° *Ë(
s2
), \

1140 
	`°æí
 (
s2
)) \

1141 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1142 (c⁄° *Ë(
s2
), \

1143 
	`°æí
 (
s2
))) \

1144 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1146 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1147 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1148 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1150 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1151 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1153 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1154 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1155 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1158 
__ªsu…
; }))

	)

1160 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1161 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1162 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1163 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1165 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1166 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1168 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1169 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1170 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1173 
__ªsu…
; }))

	)

1175 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1176 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1177 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1178 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1180 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1181 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1183 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1184 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1185 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1188 
__ªsu…
; }))

	)

1190 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1192 
__STRING_INLINE
 

1193 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1195 
__ªs
;

1196 
__asm__
 
__vﬁ©ûe__


1212 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1213 : "1" (
__s1
), "2" (
__s2
),

1214 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1215 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1217  
__ªs
;

1218 
	}
}

1222 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1223 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1224 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1225 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1226 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1227 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1228 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1230 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1231 
size_t
 
__n
);

1233 
__STRING_INLINE
 

1234 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1236 
__ªs
;

1237 
__asm__
 
__vﬁ©ûe__


1256 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1257 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1258 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1259 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1261  
__ªs
;

1262 
	}
}

1266 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1267 
	#_USE_STRING_ARCH_°rchr
 1

	)

1268 
	#°rchr
(
s
, 
c
) \

1269 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1270 ? ((
c
) == '\0' \

1271 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1272 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1273 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1275 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1277 
__STRING_INLINE
 *

1278 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1280 
__d0
;

1281 *
__ªs
;

1282 
__asm__
 
__vﬁ©ûe__


1292 : "Ù" (
__ªs
), "=&a" (
__d0
)

1293 : "0" (
__s
), "1" (
__c
),

1294 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1296  
__ªs
;

1297 
	}
}

1299 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1301 
__STRING_INLINE
 *

1302 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1304 
__d0
;

1305 *
__ªs
;

1306 
__asm__
 
__vﬁ©ûe__


1317 : "Ù" (
__ªs
), "=&a" (
__d0
)

1318 : "0" (
__s
), "1" (
__c
),

1319 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1321  
__ªs
;

1322 
	}
}

1326 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1327 
	#__°rch∫ul
(
s
, 
c
) \

1328 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1329 ? ((
c
) == '\0' \

1330 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1331 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1332 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1334 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1336 
__STRING_INLINE
 *

1337 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1339 
__d0
;

1340 *
__ªs
;

1341 
__asm__
 
__vﬁ©ûe__


1351 : "Ù" (
__ªs
), "=&a" (
__d0
)

1352 : "0" (
__s
), "1" (
__c
),

1353 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1355  
__ªs
;

1356 
	}
}

1358 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1360 
__STRING_INLINE
 *

1361 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1363 
__d0
;

1364 *
__ªs
;

1365 
__asm__
 
__vﬁ©ûe__


1376 : "Ù" (
__ªs
), "=&a" (
__d0
)

1377 : "0" (
__s
), "1" (
__c
),

1378 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1380  
__ªs
;

1381 
	}
}

1382 #ifde‡
__USE_GNU


1383 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1387 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1389 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1390 
	#ödex
(
s
, 
c
) \

1391 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1392 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1393 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1398 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1399 
	#°ºchr
(
s
, 
c
) \

1400 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1401 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1402 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1404 #ifde‡
__i686__


1405 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1407 
__STRING_INLINE
 *

1408 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1410 
__d0
, 
__d1
;

1411 *
__ªs
;

1412 
__asm__
 
__vﬁ©ûe__


1420 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1421 : "0" (1), "1" (
__s
), "2" (
__c
),

1422 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1424  
__ªs
 - 1;

1425 
	}
}

1427 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1429 
__STRING_INLINE
 *

1430 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1432 
__d0
, 
__d1
;

1433 *
__ªs
;

1434 
__asm__
 
__vﬁ©ûe__


1443 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1444 : "0" (1), "1" (
__s
), "2" (
__c
),

1445 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1447  
__ªs
 - 1;

1448 
	}
}

1450 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1452 
__STRING_INLINE
 *

1453 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1455 
__d0
, 
__d1
;

1456 *
__ªs
;

1457 
__asm__
 
__vﬁ©ûe__


1467 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1468 : "0" (0), "1" (
__s
), "2" (
__c
),

1469 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1471  
__ªs
;

1472 
	}
}

1474 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1476 
__STRING_INLINE
 *

1477 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1479 
__d0
, 
__d1
;

1480 *
__ªs
;

1481 
__asm__
 
__vﬁ©ûe__


1492 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1493 : "0" (0), "1" (
__s
), "2" (
__c
),

1494 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1496  
__ªs
;

1497 
	}
}

1501 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1503 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1504 
	#rödex
(
s
, 
c
) \

1505 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1506 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1507 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1513 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1514 
	#°rc•n
(
s
, 
ªje˘
) \

1515 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1516 ? ((
ªje˘
)[0] == '\0' \

1517 ? 
	`°æí
 (
s
) \

1518 : ((
ªje˘
)[1] == '\0' \

1519 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1520 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1521 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1523 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1525 #i‚de‡
_FORCE_INLINES


1526 
__STRING_INLINE
 
size_t


1527 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1529 
__d0
;

1530 *
__ªs
;

1531 
__asm__
 
__vﬁ©ûe__


1540 : "Ù" (
__ªs
), "=&a" (
__d0
)

1541 : "0" (
__s
), "1" (
__ªje˘
),

1542 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1544  (
__ªs
 - 1Ë- 
__s
;

1545 
	}
}

1548 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1549 
size_t
 
__ªje˘_Àn
);

1551 
__STRING_INLINE
 
size_t


1552 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1554 
__d0
, 
__d1
, 
__d2
;

1555 c⁄° *
__ªs
;

1556 
__asm__
 
__vﬁ©ûe__


1567 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1568 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1570  (
__ªs
 - 1Ë- 
__s
;

1571 
	}
}

1573 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1574 #ifde‡
__PIC__


1576 
__STRING_INLINE
 
size_t


1577 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1579 
__d0
, 
__d1
, 
__d2
;

1580 c⁄° *
__ªs
;

1581 
__asm__
 
__vﬁ©ûe__


1598 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1599 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1601  (
__ªs
 - 1Ë- 
__s
;

1602 
	}
}

1604 
__STRING_INLINE
 
size_t


1605 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1607 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1608 c⁄° *
__ªs
;

1609 
__asm__
 
__vﬁ©ûe__


1623 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1624 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1627  (
__ªs
 - 1Ë- 
__s
;

1628 
	}
}

1634 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1635 
	#°r•n
(
s
, 
ac˚±
) \

1636 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1637 ? ((
ac˚±
)[0] == '\0' \

1638 ? ((Ë(
s
), 0) \

1639 : ((
ac˚±
)[1] == '\0' \

1640 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1641 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1642 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1644 #i‚de‡
_FORCE_INLINES


1645 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1647 
__STRING_INLINE
 
size_t


1648 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1650 
__d0
;

1651 *
__ªs
;

1653 
__asm__
 
__vﬁ©ûe__


1659 : "Ù" (
__ªs
), "=&q" (
__d0
)

1660 : "0" (
__s
), "1" (
__ac˚±
),

1661 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1663  (
__ªs
 - 1Ë- 
__s
;

1664 
	}
}

1667 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1668 
size_t
 
__ac˚±_Àn
);

1670 
__STRING_INLINE
 
size_t


1671 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1673 
__d0
, 
__d1
, 
__d2
;

1674 c⁄° *
__ªs
;

1675 
__asm__
 
__vﬁ©ûe__


1686 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1687 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1690 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1691 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1693  (
__ªs
 - 1Ë- 
__s
;

1694 
	}
}

1696 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1697 #ifde‡
__PIC__


1699 
__STRING_INLINE
 
size_t


1700 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1702 
__d0
, 
__d1
, 
__d2
;

1703 c⁄° *
__ªs
;

1704 
__asm__
 
__vﬁ©ûe__


1720 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1721 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1723  (
__ªs
 - 1Ë- 
__s
;

1724 
	}
}

1726 
__STRING_INLINE
 
size_t


1727 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1729 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1730 c⁄° *
__ªs
;

1731 
__asm__
 
__vﬁ©ûe__


1745 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1746 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1748  (
__ªs
 - 1Ë- 
__s
;

1749 
	}
}

1754 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1755 
	#°Ωbrk
(
s
, 
ac˚±
) \

1756 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1757 ? ((
ac˚±
)[0] == '\0' \

1758 ? ((Ë(
s
), (*) 0) \

1759 : ((
ac˚±
)[1] == '\0' \

1760 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1761 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1762 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1764 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1765 
size_t
 
__ac˚±_Àn
);

1767 
__STRING_INLINE
 *

1768 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1770 
__d0
, 
__d1
, 
__d2
;

1771 *
__ªs
;

1772 
__asm__
 
__vﬁ©ûe__


1787 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1788 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1790  
__ªs
;

1791 
	}
}

1793 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1794 #ifde‡
__PIC__


1796 
__STRING_INLINE
 *

1797 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1799 
__d0
, 
__d1
, 
__d2
;

1800 *
__ªs
;

1801 
__asm__
 
__vﬁ©ûe__


1822 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1823 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1825  
__ªs
;

1826 
	}
}

1828 
__STRING_INLINE
 *

1829 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1831 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1832 *
__ªs
;

1833 
__asm__
 
__vﬁ©ûe__


1852 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1853 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1855  
__ªs
;

1856 
	}
}

1861 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1862 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1863 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1864 ? ((
√edÀ
)[0] == '\0' \

1865 ? (
hay°ack
) \

1866 : ((
√edÀ
)[1] == '\0' \

1867 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1868 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1869 
	`°æí
 (
√edÀ
)))) \

1870 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1874 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1875 c⁄° 
__√edÀ
[],

1876 
size_t
 
__√edÀ_Àn
);

1878 
__STRING_INLINE
 *

1879 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1880 
size_t
 
__√edÀ_Àn
)

1882 
__d0
, 
__d1
, 
__d2
;

1883 *
__ªs
;

1884 
__asm__
 
__vﬁ©ûe__


1897 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1898 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1900  
__ªs
;

1901 
	}
}

1903 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1904 c⁄° *
__√edÀ
);

1905 #ifde‡
__PIC__


1907 
__STRING_INLINE
 *

1908 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1910 
__d0
, 
__d1
, 
__d2
;

1911 *
__ªs
;

1912 
__asm__
 
__vﬁ©ûe__


1931 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1932 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1933 "d" (
__√edÀ
)

1935  
__ªs
;

1936 
	}
}

1938 
__STRING_INLINE
 *

1939 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1941 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1942 *
__ªs
;

1943 
__asm__
 
__vﬁ©ûe__


1960 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1961 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1962 "b" (
__√edÀ
)

1964  
__ªs
;

1965 
	}
}

1971 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1972 #ifde‡
__i686__


1973 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1974 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1975 ? 
	`__buûtö_ffs
 (
w‹d
) \

1976 : ({ 
__˙t
, 
__tmp
; \

1977 
__asm__
 
__vﬁ©ûe__
 \

1980 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1981 : "rm" (
w‹d
), "1" (-1)); \

1982 
__˙t
 + 1; }))

	)

1984 #i‚de‡
ff¶


1985 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1990 #i‚de‡
_FORCE_INLINES


1991 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

52 
	#__°rög2_1b±r_p
(
__x
) \

53 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

56 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


57 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

61 #i‚de‡
_HAVE_STRING_ARCH_°rchr


62 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

63 
	#°rchr
(
s
, 
c
) \

64 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

65 && (
c
) == '\0' \

66 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

67 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

72 #ifde‡
__USE_GNU


73 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


74 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

77 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

83 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


84 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

89 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


90 #ifde‡
_USE_STRING_ARCH_°rchr


91 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

92 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

93 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

94 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

95 ? 
	`°rˇt
 (
__de°
, 
§c
) \

96 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

97 
§c
, 
n
)Ë'\0', 
__de°
)) \

98 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

100 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

106 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


107 
	#°rcmp
(
s1
, 
s2
) \

108 
__exãnsi⁄__
 \

109 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

110 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

111 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

112 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

113 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

114 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

115 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

116 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

118 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

119 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

120 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

121 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

122 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

123 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

124 : -
	`__°rcmp_cg
 (
s2
, 
s1
, 
__s2_Àn
)) \

125 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

127 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

128 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

129 (c⁄° *Ë(c⁄° *Ë(
s2
); \

130 
__ªsu…
 = \

131 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

132 - 
__s2
[0]); \

133 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

135 
__ªsu…
 = (((const *) \

136 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

137 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

139 
__ªsu…
 = (((const *) \

140 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

141 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

142 
__ªsu…
 = (((const *) \

143 (c⁄° *Ë(
s1
))[3] \

144 - 
__s2
[3]); \

147 
__ªsu…
; }))

	)

152 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


153 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

154 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

155 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

156 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

157 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

158 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

159 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

165 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


166 
	#°rc•n
(
s
, 
ªje˘
Ë
	`__buûtö_°rc•n
 (s,Ñeje˘)

	)

172 #i‚de‡
_HAVE_STRING_ARCH_°r•n


173 
	#°r•n
(
s
, 
ac˚±
Ë
	`__buûtö_°r•n
 (s,ác˚±)

	)

178 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


179 
	#°Ωbrk
(
s
, 
ac˚±
Ë
	`__buûtö_°Ωbrk
 (s,ác˚±)

	)

183 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


184 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


185 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

186 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

187 && ((c⁄° *Ë(
£p
))[0] != '\0' \

188 && ((c⁄° *Ë(
£p
))[1] == '\0' \

189 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

190 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

193 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

194 
__STRING_INLINE
 *

195 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

197 *
__ªsu…
;

198 i‡(
__s
 =
NULL
)

199 
__s
 = *
__√xç
;

200 *
__s
 =
__£p
)

201 ++
__s
;

202 
__ªsu…
 = 
NULL
;

203 i‡(*
__s
 != '\0')

205 
__ªsu…
 = 
__s
++;

206 *
__s
 != '\0')

207 i‡(*
__s
++ =
__£p
)

209 
__s
[-1] = '\0';

213 *
__√xç
 = 
__s
;

214  
__ªsu…
;

215 
	}
}

216 #ifde‡
__USE_POSIX


217 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

222 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


223 #i‚de‡
_HAVE_STRING_ARCH_°r£p


225 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

226 
	#__°r£p
(
s
, 
ªje˘
) \

227 
__exãnsi⁄__
 \

228 ({ 
__r0
, 
__r1
, 
__r2
; \

229 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

230 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

231 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

232 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

233 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

234 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

235 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

236 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

237 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

238 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

239 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

240 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

243 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

244 
__STRING_INLINE
 *

245 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

247 *
__ªtvÆ
 = *
__s
;

248 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

249 *(*
__s
)++ = '\0';

250  
__ªtvÆ
;

251 
	}
}

253 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

254 
__STRING_INLINE
 *

255 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

257 *
__ªtvÆ
 = *
__s
;

258 i‡(
__ªtvÆ
 !
NULL
)

260 *
__˝
 = 
__ªtvÆ
;

263 i‡(*
__˝
 == '\0')

265 
__˝
 = 
NULL
;

268 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

270 *
__˝
++ = '\0';

273 ++
__˝
;

275 *
__s
 = 
__˝
;

277  
__ªtvÆ
;

278 
	}
}

280 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

281 
__ªje˘3
);

282 
__STRING_INLINE
 *

283 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

285 *
__ªtvÆ
 = *
__s
;

286 i‡(
__ªtvÆ
 !
NULL
)

288 *
__˝
 = 
__ªtvÆ
;

291 i‡(*
__˝
 == '\0')

293 
__˝
 = 
NULL
;

296 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

298 *
__˝
++ = '\0';

301 ++
__˝
;

303 *
__s
 = 
__˝
;

305  
__ªtvÆ
;

306 
	}
}

307 #ifde‡
__USE_MISC


308 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

315 #ifde‡
__USE_MISC


317 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


318 
	#__√ed_mÆloc_™d_ˇŒoc


	)

319 
	~<°dlib.h
>

322 #i‚de‡
_HAVE_STRING_ARCH_°rdup


324 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

325 
	#__°rdup
(
s
) \

326 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

327 ? (((c⁄° *Ë(
s
))[0] == '\0' \

328 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

329 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

330 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

331 i‡(
__ªtvÆ
 !
NULL
) \

332 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

333 
__ªtvÆ
; 
	}
})) \

334 : 
	`__°rdup
 (
s
)))

	)

336 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


337 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

341 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


343 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

344 
__THROW
 
__©åibuã_mÆloc__
;

345 
	#__°∫dup
(
s
, 
n
) \

346 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

347 ? (((c⁄° *Ë(
s
))[0] == '\0' \

348 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

349 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

350 
size_t
 
__n
 = (
n
); \

351 *
__ªtvÆ
; \

352 i‡(
__n
 < 
__Àn
) \

353 
__Àn
 = 
__n
 + 1; \

354 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

355 i‡(
__ªtvÆ
 !
NULL
) \

357 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

358 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

359 
__Àn
 - 1); \

361 
__ªtvÆ
; 
	}
})) \

362 : 
	`__°∫dup
 (
s
, 
n
)))

	)

364 #ifde‡
__USE_XOPEN2K8


365 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

371 #i‚de‡
_FORCE_INLINES


372 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

330 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

331 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

332 #ñi‡!
__GNUC_PREREQ
 (4, 1)

333 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


334 #ñi‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 #i‚de‡
__USE_FORTIFY_LEVEL


341 
	#__USE_FORTIFY_LEVEL
 0

	)

346 
	~<°dc-¥edef.h
>

354 #unde‡
__GNU_LIBRARY__


355 
	#__GNU_LIBRARY__
 6

	)

359 
	#__GLIBC__
 2

	)

360 
	#__GLIBC_MINOR__
 24

	)

362 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

363 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

366 #i‚de‡
__ASSEMBLER__


367 #i‚de‡
_SYS_CDEFS_H


368 
	~<sys/cdefs.h
>

373 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


374 
	#__USE_LARGEFILE
 1

	)

375 
	#__USE_LARGEFILE64
 1

	)

381 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

382 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

383 && 
deföed
 
	g__exã∫_ölöe


384 
	#__USE_EXTERN_INLINES
 1

	)

392 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 #ifde‡
__USE_XOPEN2K


43 
	#__√ed_time•ec


	)

45 
	~<time.h
>

46 
	#__√ed_timevÆ


	)

47 
	~<bôs/time.h
>

49 #i‚de‡
__su£c⁄ds_t_deföed


50 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

51 
	#__su£c⁄ds_t_deföed


	)

56 
	t__fd_mask
;

59 #unde‡
__NFDBITS


61 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

62 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

63 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

70 #ifde‡
__USE_XOPEN


71 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

72 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

74 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

75 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

77 } 
	tfd_£t
;

80 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

82 #ifde‡
__USE_MISC


84 
__fd_mask
 
	tfd_mask
;

87 
	#NFDBITS
 
__NFDBITS


	)

92 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

93 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

94 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

95 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

98 
__BEGIN_DECLS


108 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

109 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

110 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

111 
timevÆ
 *
__ª°ri˘
 
__timeout
);

113 #ifde‡
__USE_XOPEN2K


120 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

121 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

122 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

123 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

124 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

129 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


130 
	~<bôs/£À˘2.h
>

133 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/X11/Xmd.h

47 #i‚de‡
XMD_H


48 
	#XMD_H
 1

	)

56 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

57 
	~<sys/iß_defs.h
>

60 #i‡
deföed
 (
_LP64
Ë|| deföed(
__LP64__
) || \

61 
deföed
(
__Æpha
Ë|| deföed(
__Æpha__
) || \

62 
deföed
(
__ü64__
Ë|| deföed(
ü64
) || \

63 
deföed
(
__•¨c64__
) || \

64 
deföed
(
__s390x__
) || \

65 
deföed
(
__amd64__
Ë|| deföed(
amd64
) || \

66 
	$deföed
(
__powîpc64__
)

67 #i‡!
	`deföed
(
__ILP32__
)

68 
	#LONG64


	)

86 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

87 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

94 
	#B32


	)

95 
	#B16


	)

96 #ifde‡
LONG64


97 
	tINT64
;

98 
	tINT32
;

100 
	tINT32
;

102 
	tINT16
;

104 sig√d 
	tINT8
;

106 #ifde‡
LONG64


107 
	tCARD64
;

108 
	tCARD32
;

110 
	tCARD64
;

111 
	tCARD32
;

113 
	tCARD16
;

114 
	tCARD8
;

116 
CARD32
 
	tBITS32
;

117 
CARD16
 
	tBITS16
;

119 
CARD8
 
	tBYTE
;

120 
CARD8
 
	tBOOL
;

126 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

127 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

128 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

129 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

130 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

131 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

132 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

133 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

134 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

140 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

40 
	#__DECL_SIMD_sö


	)

41 
	#__DECL_SIMD_söf


	)

42 
	#__DECL_SIMD_söl


	)

44 
	#__DECL_SIMD_söcos


	)

45 
	#__DECL_SIMD_söcosf


	)

46 
	#__DECL_SIMD_söco¶


	)

48 
	#__DECL_SIMD_log


	)

49 
	#__DECL_SIMD_logf


	)

50 
	#__DECL_SIMD_logl


	)

52 
	#__DECL_SIMD_exp


	)

53 
	#__DECL_SIMD_expf


	)

54 
	#__DECL_SIMD_ex∂


	)

56 
	#__DECL_SIMD_pow


	)

57 
	#__DECL_SIMD_powf


	)

58 
	#__DECL_SIMD_powl


	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

310 #unde‡
__Æways_ölöe


311 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

313 #unde‡
__Æways_ölöe


314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡
__GNUC_PREREQ
 (4,3)

320 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

322 
	#__©åibuã_¨tificül__


	)

334 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

335 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

336 || 
deföed
 
__GNUC_GNU_INLINE__
)))

337 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


338 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

339 
	#__exã∫_Æways_ölöe
 \

340 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

342 
	#__exã∫_ölöe
 
__ölöe


	)

343 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

347 #ifde‡
__exã∫_Æways_ölöe


348 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

353 #i‡
__GNUC_PREREQ
 (4,3)

354 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

355 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

362 #i‡!
__GNUC_PREREQ
 (2,8)

363 
	#__exãnsi⁄__


	)

367 #i‡!
__GNUC_PREREQ
 (2,92)

368 
	#__ª°ri˘


	)

374 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


375 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

377 #ifde‡
__GNUC__


378 
	#__ª°ri˘_¨r


	)

380 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

381 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

384 
	#__ª°ri˘_¨r


	)

389 #i‡
__GNUC__
 >= 3

390 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

391 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

393 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

394 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

397 #i‡(!
deföed
 
_N‹ëu∫
 \

398 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

399 && !
	$__GNUC_PREREQ
 (4,7))

400 #i‡
	`__GNUC_PREREQ
 (2,8)

401 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

403 
	#_N‹ëu∫


	)

407 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

408 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

409 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

410 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

411 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

412 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

415 
	~<bôs/w‹dsize.h
>

417 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


418 
	#__LDBL_COMPAT
 1

	)

419 #ifde‡
__REDIRECT


420 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

421 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

422 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

423 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

424 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

425 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

426 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

427 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

428 
	#__LDBL_REDIR_DECL
(
«me
) \

429 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

430 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

431 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

432 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

433 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

436 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


437 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

438 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

439 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

440 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

441 
	#__LDBL_REDIR_DECL
(
«me
)

	)

442 #ifde‡
__REDIRECT


443 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

444 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

445 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
558
16540
Color.cpp
Color.h
Obj2.cpp
Obj2.h
Rasterizer.cpp
Rasterizer.h
SDL-win/include/SDL/._SDL.h
SDL-win/include/SDL/._SDL_active.h
SDL-win/include/SDL/._SDL_audio.h
SDL-win/include/SDL/._SDL_byteorder.h
SDL-win/include/SDL/._SDL_cdrom.h
SDL-win/include/SDL/._SDL_config.h
SDL-win/include/SDL/._SDL_copying.h
SDL-win/include/SDL/._SDL_cpuinfo.h
SDL-win/include/SDL/._SDL_endian.h
SDL-win/include/SDL/._SDL_error.h
SDL-win/include/SDL/._SDL_events.h
SDL-win/include/SDL/._SDL_getenv.h
SDL-win/include/SDL/._SDL_joystick.h
SDL-win/include/SDL/._SDL_keyboard.h
SDL-win/include/SDL/._SDL_keysym.h
SDL-win/include/SDL/._SDL_loadso.h
SDL-win/include/SDL/._SDL_main.h
SDL-win/include/SDL/._SDL_mouse.h
SDL-win/include/SDL/._SDL_mutex.h
SDL-win/include/SDL/._SDL_name.h
SDL-win/include/SDL/._SDL_opengl.h
SDL-win/include/SDL/._SDL_platform.h
SDL-win/include/SDL/._SDL_quit.h
SDL-win/include/SDL/._SDL_rwops.h
SDL-win/include/SDL/._SDL_stdinc.h
SDL-win/include/SDL/._SDL_syswm.h
SDL-win/include/SDL/._SDL_thread.h
SDL-win/include/SDL/._SDL_timer.h
SDL-win/include/SDL/._SDL_types.h
SDL-win/include/SDL/._SDL_version.h
SDL-win/include/SDL/._SDL_video.h
SDL-win/include/SDL/._begin_code.h
SDL-win/include/SDL/._close_code.h
SDL-win/include/SDL/SDL.h
SDL-win/include/SDL/SDL_active.h
SDL-win/include/SDL/SDL_audio.h
SDL-win/include/SDL/SDL_byteorder.h
SDL-win/include/SDL/SDL_cdrom.h
SDL-win/include/SDL/SDL_config.h
SDL-win/include/SDL/SDL_config_win32.h
SDL-win/include/SDL/SDL_copying.h
SDL-win/include/SDL/SDL_cpuinfo.h
SDL-win/include/SDL/SDL_endian.h
SDL-win/include/SDL/SDL_error.h
SDL-win/include/SDL/SDL_events.h
SDL-win/include/SDL/SDL_getenv.h
SDL-win/include/SDL/SDL_joystick.h
SDL-win/include/SDL/SDL_keyboard.h
SDL-win/include/SDL/SDL_keysym.h
SDL-win/include/SDL/SDL_loadso.h
SDL-win/include/SDL/SDL_main.h
SDL-win/include/SDL/SDL_mouse.h
SDL-win/include/SDL/SDL_mutex.h
SDL-win/include/SDL/SDL_name.h
SDL-win/include/SDL/SDL_opengl.h
SDL-win/include/SDL/SDL_platform.h
SDL-win/include/SDL/SDL_quit.h
SDL-win/include/SDL/SDL_rwops.h
SDL-win/include/SDL/SDL_stdinc.h
SDL-win/include/SDL/SDL_syswm.h
SDL-win/include/SDL/SDL_thread.h
SDL-win/include/SDL/SDL_timer.h
SDL-win/include/SDL/SDL_types.h
SDL-win/include/SDL/SDL_version.h
SDL-win/include/SDL/SDL_video.h
SDL-win/include/SDL/begin_code.h
SDL-win/include/SDL/close_code.h
SDL-win/test/._checkkeys.c
SDL-win/test/._graywin.c
SDL-win/test/._loopwave.c
SDL-win/test/._testalpha.c
SDL-win/test/._testbitmap.c
SDL-win/test/._testblitspeed.c
SDL-win/test/._testcdrom.c
SDL-win/test/._testcursor.c
SDL-win/test/._testdyngl.c
SDL-win/test/._testerror.c
SDL-win/test/._testfile.c
SDL-win/test/._testgamma.c
SDL-win/test/._testgl.c
SDL-win/test/._testhread.c
SDL-win/test/._testiconv.c
SDL-win/test/._testjoystick.c
SDL-win/test/._testkeys.c
SDL-win/test/._testloadso.c
SDL-win/test/._testlock.c
SDL-win/test/._testoverlay.c
SDL-win/test/._testoverlay2.c
SDL-win/test/._testpalette.c
SDL-win/test/._testplatform.c
SDL-win/test/._testsem.c
SDL-win/test/._testsprite.c
SDL-win/test/._testtimer.c
SDL-win/test/._testver.c
SDL-win/test/._testvidinfo.c
SDL-win/test/._testwin.c
SDL-win/test/._testwm.c
SDL-win/test/._threadwin.c
SDL-win/test/._torturethread.c
SDL-win/test/checkkeys.c
SDL-win/test/graywin.c
SDL-win/test/loopwave.c
SDL-win/test/testalpha.c
SDL-win/test/testbitmap.c
SDL-win/test/testblitspeed.c
SDL-win/test/testcdrom.c
SDL-win/test/testcursor.c
SDL-win/test/testdyngl.c
SDL-win/test/testerror.c
SDL-win/test/testfile.c
SDL-win/test/testgamma.c
SDL-win/test/testgl.c
SDL-win/test/testhread.c
SDL-win/test/testiconv.c
SDL-win/test/testjoystick.c
SDL-win/test/testkeys.c
SDL-win/test/testloadso.c
SDL-win/test/testlock.c
SDL-win/test/testoverlay.c
SDL-win/test/testoverlay2.c
SDL-win/test/testpalette.c
SDL-win/test/testplatform.c
SDL-win/test/testsem.c
SDL-win/test/testsprite.c
SDL-win/test/testtimer.c
SDL-win/test/testver.c
SDL-win/test/testvidinfo.c
SDL-win/test/testwin.c
SDL-win/test/testwm.c
SDL-win/test/threadwin.c
SDL-win/test/torturethread.c
SDL/include/SDL.h
SDL/include/SDL_active.h
SDL/include/SDL_audio.h
SDL/include/SDL_byteorder.h
SDL/include/SDL_cdrom.h
SDL/include/SDL_config.h
SDL/include/SDL_config_dreamcast.h
SDL/include/SDL_config_macos.h
SDL/include/SDL_config_macosx.h
SDL/include/SDL_config_minimal.h
SDL/include/SDL_config_nds.h
SDL/include/SDL_config_os2.h
SDL/include/SDL_config_symbian.h
SDL/include/SDL_config_win32.h
SDL/include/SDL_copying.h
SDL/include/SDL_cpuinfo.h
SDL/include/SDL_endian.h
SDL/include/SDL_error.h
SDL/include/SDL_events.h
SDL/include/SDL_getenv.h
SDL/include/SDL_joystick.h
SDL/include/SDL_keyboard.h
SDL/include/SDL_keysym.h
SDL/include/SDL_loadso.h
SDL/include/SDL_main.h
SDL/include/SDL_mouse.h
SDL/include/SDL_mutex.h
SDL/include/SDL_name.h
SDL/include/SDL_opengl.h
SDL/include/SDL_platform.h
SDL/include/SDL_quit.h
SDL/include/SDL_rwops.h
SDL/include/SDL_stdinc.h
SDL/include/SDL_syswm.h
SDL/include/SDL_thread.h
SDL/include/SDL_timer.h
SDL/include/SDL_types.h
SDL/include/SDL_version.h
SDL/include/SDL_video.h
SDL/include/begin_code.h
SDL/include/close_code.h
glm/glm/common.hpp
glm/glm/detail/_features.hpp
glm/glm/detail/_fixes.hpp
glm/glm/detail/_noise.hpp
glm/glm/detail/_swizzle.hpp
glm/glm/detail/_swizzle_func.hpp
glm/glm/detail/_vectorize.hpp
glm/glm/detail/dummy.cpp
glm/glm/detail/func_common.hpp
glm/glm/detail/func_exponential.hpp
glm/glm/detail/func_geometric.hpp
glm/glm/detail/func_integer.hpp
glm/glm/detail/func_matrix.hpp
glm/glm/detail/func_packing.hpp
glm/glm/detail/func_trigonometric.hpp
glm/glm/detail/func_vector_relational.hpp
glm/glm/detail/glm.cpp
glm/glm/detail/precision.hpp
glm/glm/detail/setup.hpp
glm/glm/detail/type_float.hpp
glm/glm/detail/type_gentype.hpp
glm/glm/detail/type_half.hpp
glm/glm/detail/type_int.hpp
glm/glm/detail/type_mat.hpp
glm/glm/detail/type_mat2x2.hpp
glm/glm/detail/type_mat2x3.hpp
glm/glm/detail/type_mat2x4.hpp
glm/glm/detail/type_mat3x2.hpp
glm/glm/detail/type_mat3x3.hpp
glm/glm/detail/type_mat3x4.hpp
glm/glm/detail/type_mat4x2.hpp
glm/glm/detail/type_mat4x3.hpp
glm/glm/detail/type_mat4x4.hpp
glm/glm/detail/type_vec.hpp
glm/glm/detail/type_vec1.hpp
glm/glm/detail/type_vec2.hpp
glm/glm/detail/type_vec3.hpp
glm/glm/detail/type_vec4.hpp
glm/glm/exponential.hpp
glm/glm/ext.hpp
glm/glm/fwd.hpp
glm/glm/geometric.hpp
glm/glm/glm.hpp
glm/glm/gtc/bitfield.hpp
glm/glm/gtc/color_space.hpp
glm/glm/gtc/constants.hpp
glm/glm/gtc/epsilon.hpp
glm/glm/gtc/functions.hpp
glm/glm/gtc/integer.hpp
glm/glm/gtc/matrix_access.hpp
glm/glm/gtc/matrix_integer.hpp
glm/glm/gtc/matrix_inverse.hpp
glm/glm/gtc/matrix_transform.hpp
glm/glm/gtc/noise.hpp
glm/glm/gtc/packing.hpp
glm/glm/gtc/quaternion.hpp
glm/glm/gtc/random.hpp
glm/glm/gtc/reciprocal.hpp
glm/glm/gtc/round.hpp
glm/glm/gtc/type_aligned.hpp
glm/glm/gtc/type_precision.hpp
glm/glm/gtc/type_ptr.hpp
glm/glm/gtc/ulp.hpp
glm/glm/gtc/vec1.hpp
glm/glm/gtx/associated_min_max.hpp
glm/glm/gtx/bit.hpp
glm/glm/gtx/closest_point.hpp
glm/glm/gtx/color_space.hpp
glm/glm/gtx/color_space_YCoCg.hpp
glm/glm/gtx/common.hpp
glm/glm/gtx/compatibility.hpp
glm/glm/gtx/component_wise.hpp
glm/glm/gtx/dual_quaternion.hpp
glm/glm/gtx/euler_angles.hpp
glm/glm/gtx/extend.hpp
glm/glm/gtx/extended_min_max.hpp
glm/glm/gtx/fast_exponential.hpp
glm/glm/gtx/fast_square_root.hpp
glm/glm/gtx/fast_trigonometry.hpp
glm/glm/gtx/gradient_paint.hpp
glm/glm/gtx/handed_coordinate_space.hpp
glm/glm/gtx/hash.hpp
glm/glm/gtx/integer.hpp
glm/glm/gtx/intersect.hpp
glm/glm/gtx/io.hpp
glm/glm/gtx/log_base.hpp
glm/glm/gtx/matrix_cross_product.hpp
glm/glm/gtx/matrix_decompose.hpp
glm/glm/gtx/matrix_interpolation.hpp
glm/glm/gtx/matrix_major_storage.hpp
glm/glm/gtx/matrix_operation.hpp
glm/glm/gtx/matrix_query.hpp
glm/glm/gtx/matrix_transform_2d.hpp
glm/glm/gtx/mixed_product.hpp
glm/glm/gtx/norm.hpp
glm/glm/gtx/normal.hpp
glm/glm/gtx/normalize_dot.hpp
glm/glm/gtx/number_precision.hpp
glm/glm/gtx/optimum_pow.hpp
glm/glm/gtx/orthonormalize.hpp
glm/glm/gtx/perpendicular.hpp
glm/glm/gtx/polar_coordinates.hpp
glm/glm/gtx/projection.hpp
glm/glm/gtx/quaternion.hpp
glm/glm/gtx/range.hpp
glm/glm/gtx/raw_data.hpp
glm/glm/gtx/rotate_normalized_axis.hpp
glm/glm/gtx/rotate_vector.hpp
glm/glm/gtx/scalar_multiplication.hpp
glm/glm/gtx/scalar_relational.hpp
glm/glm/gtx/simd_mat4.hpp
glm/glm/gtx/simd_quat.hpp
glm/glm/gtx/simd_vec4.hpp
glm/glm/gtx/spline.hpp
glm/glm/gtx/std_based_type.hpp
glm/glm/gtx/string_cast.hpp
glm/glm/gtx/transform.hpp
glm/glm/gtx/transform2.hpp
glm/glm/gtx/type_aligned.hpp
glm/glm/gtx/type_trait.hpp
glm/glm/gtx/vector_angle.hpp
glm/glm/gtx/vector_query.hpp
glm/glm/gtx/wrap.hpp
glm/glm/integer.hpp
glm/glm/mat2x2.hpp
glm/glm/mat2x3.hpp
glm/glm/mat2x4.hpp
glm/glm/mat3x2.hpp
glm/glm/mat3x3.hpp
glm/glm/mat3x4.hpp
glm/glm/mat4x2.hpp
glm/glm/mat4x3.hpp
glm/glm/mat4x4.hpp
glm/glm/matrix.hpp
glm/glm/packing.hpp
glm/glm/simd/common.h
glm/glm/simd/exponential.h
glm/glm/simd/geometric.h
glm/glm/simd/integer.h
glm/glm/simd/matrix.h
glm/glm/simd/packing.h
glm/glm/simd/platform.h
glm/glm/simd/trigonometric.h
glm/glm/simd/vector_relational.h
glm/glm/trigonometric.hpp
glm/glm/vec2.hpp
glm/glm/vec3.hpp
glm/glm/vec4.hpp
glm/glm/vector_relational.hpp
glm/test/bug/bug_ms_vec_static.cpp
glm/test/core/core_force_pure.cpp
glm/test/core/core_force_unrestricted_gentype.cpp
glm/test/core/core_func_common.cpp
glm/test/core/core_func_exponential.cpp
glm/test/core/core_func_geometric.cpp
glm/test/core/core_func_integer.cpp
glm/test/core/core_func_integer_bit_count.cpp
glm/test/core/core_func_integer_find_lsb.cpp
glm/test/core/core_func_integer_find_msb.cpp
glm/test/core/core_func_matrix.cpp
glm/test/core/core_func_noise.cpp
glm/test/core/core_func_packing.cpp
glm/test/core/core_func_swizzle.cpp
glm/test/core/core_func_trigonometric.cpp
glm/test/core/core_func_vector_relational.cpp
glm/test/core/core_setup_force_cxx98.cpp
glm/test/core/core_setup_message.cpp
glm/test/core/core_setup_precision.cpp
glm/test/core/core_type_aligned.cpp
glm/test/core/core_type_cast.cpp
glm/test/core/core_type_ctor.cpp
glm/test/core/core_type_float.cpp
glm/test/core/core_type_int.cpp
glm/test/core/core_type_length.cpp
glm/test/core/core_type_mat2x2.cpp
glm/test/core/core_type_mat2x3.cpp
glm/test/core/core_type_mat2x4.cpp
glm/test/core/core_type_mat3x2.cpp
glm/test/core/core_type_mat3x3.cpp
glm/test/core/core_type_mat3x4.cpp
glm/test/core/core_type_mat4x2.cpp
glm/test/core/core_type_mat4x3.cpp
glm/test/core/core_type_mat4x4.cpp
glm/test/core/core_type_vec1.cpp
glm/test/core/core_type_vec2.cpp
glm/test/core/core_type_vec3.cpp
glm/test/core/core_type_vec4.cpp
glm/test/external/gli/core/dummy.cpp
glm/test/external/gli/core/generate_mipmaps.hpp
glm/test/external/gli/core/image2d.hpp
glm/test/external/gli/core/operation.hpp
glm/test/external/gli/core/operator.hpp
glm/test/external/gli/core/shared_array.hpp
glm/test/external/gli/core/shared_ptr.hpp
glm/test/external/gli/core/size.hpp
glm/test/external/gli/core/texture2d.hpp
glm/test/external/gli/core/texture2d_array.hpp
glm/test/external/gli/core/texture_cube.hpp
glm/test/external/gli/core/texture_cube_array.hpp
glm/test/external/gli/gli.hpp
glm/test/external/gli/gtx/compression.hpp
glm/test/external/gli/gtx/fetch.hpp
glm/test/external/gli/gtx/gl_texture2d.hpp
glm/test/external/gli/gtx/gradient.hpp
glm/test/external/gli/gtx/loader.hpp
glm/test/external/gli/gtx/loader_dds10.hpp
glm/test/external/gli/gtx/loader_dds9.hpp
glm/test/external/gli/gtx/loader_tga.hpp
glm/test/external/gli/gtx/wavelet.hpp
glm/test/gtc/gtc_bitfield.cpp
glm/test/gtc/gtc_color_space.cpp
glm/test/gtc/gtc_constants.cpp
glm/test/gtc/gtc_epsilon.cpp
glm/test/gtc/gtc_functions.cpp
glm/test/gtc/gtc_integer.cpp
glm/test/gtc/gtc_matrix_access.cpp
glm/test/gtc/gtc_matrix_integer.cpp
glm/test/gtc/gtc_matrix_inverse.cpp
glm/test/gtc/gtc_matrix_transform.cpp
glm/test/gtc/gtc_noise.cpp
glm/test/gtc/gtc_packing.cpp
glm/test/gtc/gtc_quaternion.cpp
glm/test/gtc/gtc_random.cpp
glm/test/gtc/gtc_reciprocal.cpp
glm/test/gtc/gtc_round.cpp
glm/test/gtc/gtc_type_aligned.cpp
glm/test/gtc/gtc_type_precision.cpp
glm/test/gtc/gtc_type_ptr.cpp
glm/test/gtc/gtc_ulp.cpp
glm/test/gtc/gtc_user_defined_types.cpp
glm/test/gtc/gtc_vec1.cpp
glm/test/gtx/gtx_associated_min_max.cpp
glm/test/gtx/gtx_closest_point.cpp
glm/test/gtx/gtx_color_space.cpp
glm/test/gtx/gtx_color_space_YCoCg.cpp
glm/test/gtx/gtx_common.cpp
glm/test/gtx/gtx_compatibility.cpp
glm/test/gtx/gtx_component_wise.cpp
glm/test/gtx/gtx_dual_quaternion.cpp
glm/test/gtx/gtx_euler_angle.cpp
glm/test/gtx/gtx_extend.cpp
glm/test/gtx/gtx_extended_min_max.cpp
glm/test/gtx/gtx_extented_min_max.cpp
glm/test/gtx/gtx_fast_exponential.cpp
glm/test/gtx/gtx_fast_square_root.cpp
glm/test/gtx/gtx_fast_trigonometry.cpp
glm/test/gtx/gtx_gradient_paint.cpp
glm/test/gtx/gtx_handed_coordinate_space.cpp
glm/test/gtx/gtx_int_10_10_10_2.cpp
glm/test/gtx/gtx_integer.cpp
glm/test/gtx/gtx_intersect.cpp
glm/test/gtx/gtx_io.cpp
glm/test/gtx/gtx_log_base.cpp
glm/test/gtx/gtx_matrix_cross_product.cpp
glm/test/gtx/gtx_matrix_decompose.cpp
glm/test/gtx/gtx_matrix_interpolation.cpp
glm/test/gtx/gtx_matrix_major_storage.cpp
glm/test/gtx/gtx_matrix_operation.cpp
glm/test/gtx/gtx_matrix_query.cpp
glm/test/gtx/gtx_matrix_transform_2d.cpp
glm/test/gtx/gtx_mixed_product.cpp
glm/test/gtx/gtx_norm.cpp
glm/test/gtx/gtx_normal.cpp
glm/test/gtx/gtx_normalize_dot.cpp
glm/test/gtx/gtx_number_precision.cpp
glm/test/gtx/gtx_optimum_pow.cpp
glm/test/gtx/gtx_orthonormalize.cpp
glm/test/gtx/gtx_perpendicular.cpp
glm/test/gtx/gtx_polar_coordinates.cpp
glm/test/gtx/gtx_projection.cpp
glm/test/gtx/gtx_quaternion.cpp
glm/test/gtx/gtx_random.cpp
glm/test/gtx/gtx_range.cpp
glm/test/gtx/gtx_rotate_normalized_axis.cpp
glm/test/gtx/gtx_rotate_vector.cpp
glm/test/gtx/gtx_scalar_multiplication.cpp
glm/test/gtx/gtx_scalar_relational.cpp
glm/test/gtx/gtx_simd_mat4.cpp
glm/test/gtx/gtx_simd_vec4.cpp
glm/test/gtx/gtx_spline.cpp
glm/test/gtx/gtx_string_cast.cpp
glm/test/gtx/gtx_type_aligned.cpp
glm/test/gtx/gtx_type_trait.cpp
glm/test/gtx/gtx_vector_angle.cpp
glm/test/gtx/gtx_vector_query.cpp
glm/test/gtx/gtx_wrap.cpp
main.cpp
/usr/include/GL/gl.h
/usr/include/GL/glu.h
/usr/include/X11/Xatom.h
/usr/include/X11/Xlib.h
/usr/include/alloca.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/iconv.h
/usr/include/inttypes.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/GL/glext.h
/usr/include/X11/X.h
/usr/include/X11/Xfuncproto.h
/usr/include/X11/Xosdefs.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/endian.h
/usr/include/bits/environments.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/math-finite.h
/usr/include/bits/math-vector.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/X11/Xmd.h
/usr/include/_G_config.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/libm-simd-decl-stubs.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
